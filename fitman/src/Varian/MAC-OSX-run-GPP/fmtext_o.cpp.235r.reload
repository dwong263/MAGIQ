
;; Function void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*) (_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess, funcdef_no=2, decl_uid=5435, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=213 from oldreg=157, assigning class GENERAL_REGS to r213
   51: {r213:SI=r213:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  313: r213:SI=r91:SI
    Inserting insn reload after:
  314: r157:SI=r213:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 56:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=214 from oldreg=94, assigning class SSE_REGS to r214
   56: r214:SF=r214:SF/r93:SF
      REG_DEAD r93:SF
      REG_DEAD r90:SF
    Inserting insn reload before:
  315: r214:SF=r90:SF
    Inserting insn reload after:
  316: r94:SF=r214:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 60:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 65:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 67:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 68:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 121:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 125:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 129:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 135:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 144:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 147:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 162:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 165:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 168:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 171:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 174:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 177:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) r  (1) rm {extendhisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 186:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 194:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 197:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 200:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 203:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 206:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 208:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 215:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 221:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 223:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 227:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 228:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 229:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 233:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 234:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 235:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 255:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 260:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 262
	 Choosing alt 0 in insn 262:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 263:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 267:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 269:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 276
	 Choosing alt 0 in insn 276:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 277:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 281:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 285:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 291:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 294:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 18
EBB 17

********** Pseudo live ranges #1: **********

  BB 17
  BB 18
   Insn 311: point = 0
  BB 16
   Insn 296: point = 0
   Insn 295: point = 0
   Insn 294: point = 1
  BB 3
   Insn 301: point = 2
   Insn 28: point = 2
   Insn 27: point = 2
   Insn 26: point = 2
   Insn 25: point = 2
   Insn 24: point = 3
  BB 15
   Insn 292: point = 4
   Insn 291: point = 4
  BB 13
   Insn 256: point = 4
   Insn 255: point = 4
   Insn 254: point = 5
  BB 14
   Insn 305: point = 6
   Insn 285: point = 6
   Insn 284: point = 6
   Insn 283: point = 6
   Insn 282: point = 6
   Insn 281: point = 7
   Insn 280: point = 7
   Insn 279: point = 8
   Insn 278: point = 9
   Insn 277: point = 11
   Insn 276: point = 13
   Insn 275: point = 15
   Insn 274: point = 16
   Insn 273: point = 18
   Insn 272: point = 20
   Insn 271: point = 22
   Insn 270: point = 23
   Insn 269: point = 23
   Insn 268: point = 23
   Insn 267: point = 24
   Insn 266: point = 24
   Insn 265: point = 25
   Insn 264: point = 26
   Insn 263: point = 28
   Insn 262: point = 30
   Insn 261: point = 32
   Insn 260: point = 33
   Insn 259: point = 35
   Insn 258: point = 37
  BB 12
   Insn 252: point = 38
  BB 11
   Insn 249: point = 38
   Insn 248: point = 39
   Insn 247: point = 41
  BB 10
   Insn 245: point = 42
   Insn 244: point = 42
   Insn 243: point = 43
   Insn 242: point = 45
   Insn 241: point = 46
   Insn 240: point = 48
   Insn 239: point = 49
   Insn 238: point = 50
   Insn 237: point = 52
   Insn 236: point = 53
   Insn 235: point = 53
   Insn 234: point = 53
   Insn 233: point = 53
   Insn 232: point = 53
   Insn 231: point = 54
   Insn 230: point = 55
   Insn 229: point = 55
   Insn 228: point = 55
   Insn 227: point = 55
   Insn 226: point = 55
   Insn 225: point = 56
   Insn 224: point = 57
   Insn 223: point = 57
   Insn 222: point = 57
   Insn 221: point = 57
   Insn 220: point = 57
   Insn 219: point = 58
   Insn 218: point = 59
   Insn 217: point = 59
   Insn 216: point = 59
   Insn 215: point = 60
   Insn 214: point = 60
   Insn 213: point = 61
   Insn 212: point = 62
   Insn 211: point = 63
   Insn 210: point = 64
   Insn 209: point = 65
   Insn 208: point = 66
   Insn 207: point = 67
   Insn 206: point = 69
   Insn 205: point = 71
   Insn 204: point = 72
   Insn 203: point = 74
   Insn 202: point = 76
   Insn 201: point = 77
   Insn 200: point = 79
   Insn 199: point = 81
   Insn 198: point = 82
   Insn 197: point = 84
   Insn 196: point = 86
   Insn 195: point = 87
   Insn 194: point = 89
   Insn 193: point = 91
   Insn 192: point = 92
   Insn 191: point = 94
   Insn 190: point = 96
   Insn 189: point = 97
   Insn 188: point = 97
   Insn 187: point = 97
   Insn 186: point = 98
   Insn 185: point = 98
   Insn 184: point = 99
   Insn 183: point = 100
   Insn 182: point = 101
   Insn 181: point = 102
   Insn 180: point = 103
   Insn 179: point = 104
   Insn 178: point = 105
   Insn 177: point = 107
   Insn 176: point = 109
   Insn 175: point = 110
   Insn 174: point = 112
   Insn 173: point = 114
   Insn 172: point = 115
   Insn 171: point = 117
   Insn 170: point = 119
   Insn 169: point = 120
   Insn 168: point = 122
   Insn 167: point = 124
   Insn 166: point = 125
   Insn 165: point = 127
   Insn 164: point = 129
   Insn 163: point = 130
   Insn 162: point = 132
   Insn 161: point = 134
   Insn 160: point = 135
   Insn 159: point = 135
   Insn 158: point = 135
   Insn 157: point = 136
   Insn 156: point = 136
   Insn 155: point = 137
   Insn 154: point = 138
   Insn 153: point = 140
  BB 8
   Insn 303: point = 141
   Insn 138: point = 141
   Insn 137: point = 141
   Insn 136: point = 141
   Insn 135: point = 142
   Insn 134: point = 142
   Insn 133: point = 143
   Insn 132: point = 144
   Insn 131: point = 145
   Insn 130: point = 145
   Insn 129: point = 145
   Insn 128: point = 145
   Insn 127: point = 146
   Insn 126: point = 147
   Insn 125: point = 148
   Insn 124: point = 150
  BB 7
   Insn 121: point = 151
   Insn 120: point = 152
   Insn 119: point = 154
   Insn 118: point = 156
   Insn 117: point = 157
   Insn 116: point = 157
   Insn 115: point = 158
   Insn 114: point = 160
   Insn 113: point = 161
   Insn 112: point = 163
  BB 6
   Insn 109: point = 164
   Insn 108: point = 164
   Insn 107: point = 165
   Insn 106: point = 166
   Insn 105: point = 166
   Insn 104: point = 167
  BB 5
   Insn 102: point = 168
   Insn 101: point = 168
   Insn 100: point = 168
   Insn 99: point = 169
   Insn 98: point = 171
   Insn 97: point = 172
   Insn 96: point = 172
   Insn 95: point = 173
   Insn 94: point = 173
   Insn 93: point = 175
  BB 9
   Insn 150: point = 176
   Insn 149: point = 176
   Insn 148: point = 176
   Insn 147: point = 177
   Insn 146: point = 177
   Insn 145: point = 178
   Insn 144: point = 179
   Insn 143: point = 181
  BB 4
   Insn 91: point = 182
   Insn 90: point = 182
   Insn 89: point = 183
   Insn 88: point = 184
   Insn 87: point = 184
   Insn 86: point = 185
   Insn 85: point = 187
   Insn 84: point = 188
   Insn 83: point = 188
   Insn 82: point = 188
   Insn 81: point = 189
   Insn 80: point = 189
   Insn 79: point = 190
   Insn 78: point = 191
   Insn 77: point = 193
   Insn 76: point = 194
   Insn 75: point = 194
   Insn 74: point = 194
   Insn 73: point = 195
   Insn 72: point = 195
   Insn 71: point = 196
   Insn 70: point = 197
   Insn 69: point = 199
   Insn 68: point = 201
   Insn 67: point = 202
   Insn 66: point = 204
   Insn 65: point = 205
   Insn 64: point = 207
   Insn 63: point = 208
   Insn 62: point = 208
   Insn 61: point = 208
   Insn 60: point = 209
   Insn 59: point = 209
   Insn 58: point = 210
   Insn 57: point = 211
   Insn 316: point = 213
	Hard reg 21 is preferable by r214 with profit 1
   Insn 56: point = 215
   Insn 315: point = 216
	Hard reg 21 is preferable by r214 with profit 1
	Hard reg 22 is preferable by r214 with profit 1
   Insn 55: point = 218
   Insn 54: point = 220
   Insn 53: point = 222
   Insn 52: point = 224
   Insn 314: point = 226
	Hard reg 1 is preferable by r213 with profit 1
   Insn 51: point = 228
   Insn 313: point = 228
   Insn 50: point = 229
   Insn 49: point = 231
   Insn 48: point = 232
   Insn 47: point = 234
   Insn 46: point = 235
   Insn 45: point = 235
   Insn 44: point = 235
   Insn 43: point = 235
   Insn 42: point = 235
   Insn 41: point = 236
   Insn 40: point = 237
   Insn 39: point = 237
   Insn 38: point = 237
   Insn 37: point = 238
   Insn 36: point = 238
   Insn 35: point = 239
   Insn 34: point = 240
   Insn 33: point = 242
  BB 2
   Insn 22: point = 243
   Insn 21: point = 243
   Insn 20: point = 244
   Insn 19: point = 245
   Insn 18: point = 245
   Insn 17: point = 246
   Insn 16: point = 247
   Insn 15: point = 247
   Insn 14: point = 248
   Insn 13: point = 248
   Insn 12: point = 249
   Insn 11: point = 249
   Insn 7: point = 249
   Insn 6: point = 249
   Insn 5: point = 249
   Insn 4: point = 249
   Insn 3: point = 249
   Insn 2: point = 249
 r87: [245..246]
 r88: [243..244]
 r89: [238..240]
 r90: [217..232]
 r91: [225..229]
 r92: [219..220]
 r93: [215..218]
 r94: [212..213]
 r95: [209..211]
 r96: [198..205]
 r97: [200..202]
 r98: [198..199]
 r99: [195..197]
 r100: [189..191]
 r101: [184..185]
 r102: [182..183]
 r103: [172..173]
 r104: [170..171]
 r105: [164..165]
 r106: [153..161]
 r107: [157..158]
 r108: [155..156]
 r109: [153..154]
 r110: [145..148]
 r111: [177..179]
 r112: [136..138]
 r113: [131..132]
 r114: [103..130]
 r115: [126..127]
 r116: [102..125]
 r117: [121..122]
 r118: [101..120]
 r119: [116..117]
 r120: [100..115]
 r121: [111..112]
 r122: [99..110]
 r123: [106..107]
 r124: [98..105]
 r125: [93..94]
 r126: [65..92]
 r127: [88..89]
 r128: [64..87]
 r129: [83..84]
 r130: [63..82]
 r131: [78..79]
 r132: [62..77]
 r133: [73..74]
 r134: [61..72]
 r135: [68..69]
 r136: [60..67]
 r137: [42..46]
 r138: [42..43]
 r139: [34..35]
 r140: [31..33]
 r141: [29..30]
 r142: [27..28]
 r143: [24..26]
 r144: [19..20]
 r145: [17..18]
 r146: [14..16]
 r147: [12..13]
 r148: [10..11]
 r149: [7..9]
 r150: [247..248]
 r151: [2..3]
 r152: [241..242]
 r153: [237..239]
 r154: [235..236]
 r155: [233..234]
 r156: [230..231]
 r157: [225..226]
 r158: [223..224]
 r159: [221..222]
 r160: [208..210]
 r161: [206..207]
 r162: [203..204]
 r163: [200..201]
 r164: [194..196]
 r165: [192..193]
 r166: [188..190]
 r167: [186..187]
 r168: [174..175]
 r169: [168..169]
 r170: [166..167]
 r171: [162..163]
 r172: [159..160]
 r173: [151..152]
 r174: [149..150]
 r175: [146..147]
 r176: [142..144]
 r177: [141..143]
 r178: [180..181]
 r179: [176..178]
 r180: [139..140]
 r181: [135..137]
 r182: [133..134]
 r183: [128..129]
 r184: [123..124]
 r185: [118..119]
 r186: [113..114]
 r187: [108..109]
 r188: [97..104]
 r189: [95..96]
 r190: [90..91]
 r191: [85..86]
 r192: [80..81]
 r193: [75..76]
 r194: [70..71]
 r195: [59..66]
 r196: [57..58]
 r197: [55..56]
 r198: [53..54]
 r199: [51..52]
 r200: [49..50]
 r201: [47..48]
 r202: [44..45]
 r203: [40..41]
 r204: [38..39]
 r205: [4..5]
 r206: [36..37]
 r207: [31..32]
 r208: [23..25]
 r209: [21..22]
 r210: [14..15]
 r211: [6..8]
 r212: [0..1]
 r213: [227..228]
 r214: [214..216]
Compressing live ranges: from 249 to 196 - 78%
Ranges after the compression:
 r87: [192..193]
 r88: [190..191]
 r89: [186..187]
 r90: [168..181]
 r91: [176..179]
 r92: [170..171]
 r93: [166..169]
 r94: [164..165]
 r95: [162..163]
 r96: [154..159]
 r97: [156..157]
 r98: [154..155]
 r99: [152..153]
 r100: [148..149]
 r101: [144..145]
 r102: [142..143]
 r103: [134..135]
 r104: [132..133]
 r105: [126..127]
 r106: [116..123]
 r107: [120..121]
 r108: [118..119]
 r109: [116..117]
 r110: [110..111]
 r111: [138..139]
 r112: [104..105]
 r113: [100..101]
 r114: [78..99]
 r115: [96..97]
 r116: [78..95]
 r117: [92..93]
 r118: [78..91]
 r119: [88..89]
 r120: [78..87]
 r121: [84..85]
 r122: [78..83]
 r123: [80..81]
 r124: [78..79]
 r125: [74..75]
 r126: [52..73]
 r127: [70..71]
 r128: [52..69]
 r129: [66..67]
 r130: [52..65]
 r131: [62..63]
 r132: [52..61]
 r133: [58..59]
 r134: [52..57]
 r135: [54..55]
 r136: [52..53]
 r137: [36..39]
 r138: [36..37]
 r139: [28..29]
 r140: [26..27]
 r141: [24..25]
 r142: [22..23]
 r143: [20..21]
 r144: [16..17]
 r145: [14..15]
 r146: [12..13]
 r147: [10..11]
 r148: [8..9]
 r149: [6..7]
 r150: [194..195]
 r151: [2..3]
 r152: [188..189]
 r153: [186..187]
 r154: [184..185]
 r155: [182..183]
 r156: [180..181]
 r157: [176..177]
 r158: [174..175]
 r159: [172..173]
 r160: [162..163]
 r161: [160..161]
 r162: [158..159]
 r163: [156..157]
 r164: [152..153]
 r165: [150..151]
 r166: [148..149]
 r167: [146..147]
 r168: [136..137]
 r169: [130..131]
 r170: [128..129]
 r171: [124..125]
 r172: [122..123]
 r173: [114..115]
 r174: [112..113]
 r175: [110..111]
 r176: [108..109]
 r177: [108..109]
 r178: [140..141]
 r179: [138..139]
 r180: [106..107]
 r181: [104..105]
 r182: [102..103]
 r183: [98..99]
 r184: [94..95]
 r185: [90..91]
 r186: [86..87]
 r187: [82..83]
 r188: [78..79]
 r189: [76..77]
 r190: [72..73]
 r191: [68..69]
 r192: [64..65]
 r193: [60..61]
 r194: [56..57]
 r195: [52..53]
 r196: [50..51]
 r197: [48..49]
 r198: [46..47]
 r199: [44..45]
 r200: [42..43]
 r201: [40..41]
 r202: [38..39]
 r203: [34..35]
 r204: [32..33]
 r205: [4..5]
 r206: [30..31]
 r207: [26..27]
 r208: [20..21]
 r209: [18..19]
 r210: [12..13]
 r211: [6..7]
 r212: [0..1]
 r213: [178..179]
 r214: [166..167]

********** Assignment #1: **********

	 Assigning to 213 (cl=GENERAL_REGS, orig=157, freq=3, tfirst=213, tfreq=3)...
	   Assign 1 to reload r213 (freq=3)
	 Assigning to 214 (cl=SSE_REGS, orig=94, freq=3, tfirst=214, tfreq=3)...
	   Assign 22 to reload r214 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 34
changing reg in insn 36
changing reg in insn 48
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 65
changing reg in insn 67
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 78
changing reg in insn 80
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 107
changing reg in insn 108
changing reg in insn 113
changing reg in insn 115
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 125
changing reg in insn 128
changing reg in insn 144
changing reg in insn 146
changing reg in insn 154
changing reg in insn 156
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 180
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 181
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 182
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 183
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 184
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 185
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 209
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 210
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 211
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 212
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 213
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 214
changing reg in insn 241
changing reg in insn 244
changing reg in insn 243
changing reg in insn 244
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 280
changing reg in insn 13
changing reg in insn 15
changing reg in insn 24
changing reg in insn 25
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 61
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 93
changing reg in insn 94
changing reg in insn 99
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 132
changing reg in insn 134
changing reg in insn 133
changing reg in insn 136
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 158
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 187
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 216
changing reg in insn 219
changing reg in insn 220
changing reg in insn 225
changing reg in insn 226
changing reg in insn 231
changing reg in insn 232
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 249
changing reg in insn 254
changing reg in insn 255
changing reg in insn 258
changing reg in insn 259
changing reg in insn 261
changing reg in insn 265
changing reg in insn 268
changing reg in insn 271
changing reg in insn 272
changing reg in insn 275
changing reg in insn 279
changing reg in insn 282
changing reg in insn 294
changing reg in insn 295
deleting insn with uid = 17.
deleting insn with uid = 36.
deleting insn with uid = 314.
deleting insn with uid = 54.
deleting insn with uid = 315.
deleting insn with uid = 59.
deleting insn with uid = 72.
deleting insn with uid = 80.
deleting insn with uid = 89.
deleting insn with uid = 98.
deleting insn with uid = 107.
deleting insn with uid = 118.
deleting insn with uid = 134.
deleting insn with uid = 146.
deleting insn with uid = 156.
deleting insn with uid = 180.
deleting insn with uid = 181.
deleting insn with uid = 182.
deleting insn with uid = 183.
deleting insn with uid = 184.
deleting insn with uid = 185.
deleting insn with uid = 209.
deleting insn with uid = 210.
deleting insn with uid = 211.
deleting insn with uid = 212.
deleting insn with uid = 213.
deleting insn with uid = 214.
deleting insn with uid = 266.
deleting insn with uid = 280.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 218.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 230.
verify found no changes in insn with uid = 236.
verify found no changes in insn with uid = 270.
verify found no changes in insn with uid = 284.
verify found no changes in insn with uid = 296.


void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 37[r8] 38[r9]
;;  ref usage 	r0={110d,92u} r1={40d,17u,2e} r2={29d,6u} r3={1d,1u} r4={43d,20u} r5={47d,24u} r6={1d,93u} r7={1d,41u} r8={23d} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r17={50d,8u} r18={23d} r19={23d} r20={1d,1u,9e} r21={47d,23u} r22={29d,5u} r23={27d,3u} r24={26d,2u} r25={26d,2u} r26={25d,1u} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={24d,1u} r38={24d,1u} r39={23d} r40={23d} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} r53={23d} r54={23d} r55={23d} r56={23d} r57={23d} r58={23d} r59={23d} r60={23d} r61={23d} r62={23d} r63={23d} r64={23d} r65={23d} r66={23d} r67={23d} r68={23d} r69={23d} r70={23d} r71={23d} r72={23d} r73={23d} r74={23d} r75={23d} r76={23d} r77={23d} r78={23d} r79={23d} r80={23d} 
;;    total ref usage 2239{1887d,341u,11e} in 243{220 regular + 23 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 150
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 data+0 S8 A64])
        (reg:DI 4 si [ data ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 index1+0 S4 A32])
        (reg:SI 37 r8 [ index1 ])) fmtext_o.cpp:37 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])
        (reg:DI 38 r9 [ procpar_info ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:39 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 fnptr+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:41 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f93b2296090 *.LC0>)) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [150])) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(call_insn 16 15 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f93b2574510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:43 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 16 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 D.6651 ] [87])) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:43 4 {*cmpdi_ccno_1}
     (nil))
(insn 20 19 21 2 (set (reg:QI 0 ax [orig:88 D.6652 ] [88])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:43 607 {*setcc_qi}
     (nil))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.6652 ] [88])
            (const_int 0 [0]))) fmtext_o.cpp:43 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) fmtext_o.cpp:43 612 {*jcc_1}
     (nil)
 -> 31)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 151
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:45 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [151])) fmtext_o.cpp:45 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f93b2296120 *.LC1>)) fmtext_o.cpp:45 89 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:45 93 {*movqi_internal}
     (nil))
(call_insn 28 27 301 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f93b27b65e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:45 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 301 28 302 3 (set (pc)
        (label_ref:DI 310)) fmtext_o.cpp:103 654 {jump}
     (nil)
 -> 310)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 302 301 31)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167
(code_label 31 302 32 4 2 "" [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:SI 1 dx [orig:89 D.6653 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [152])
                (const_int 300 [0x12c])) [0 procpar_info_16(D)->num_points+0 S4 A32])) fmtext_o.cpp:48 90 {*movsi_internal}
     (nil))
(insn 35 34 37 4 (set (reg:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 37 35 38 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f93b22961b0 *.LC2>)) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [153])) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:48 93 {*movqi_internal}
     (nil))
(call_insn 40 39 41 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:48 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 41 40 42 4 (set (reg:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [154])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 1 dx)
        (const_int 2 [0x2])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f93b2296240 *.LC3>)) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(call_insn 46 45 47 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f93b27b6000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:49 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SF 22 xmm1 [orig:90 D.6654 ] [90])
        (mem/j:SF (reg/f:DI 0 ax [155]) [0 procpar_info_16(D)->acquision_time+0 S4 A64])) fmtext_o.cpp:50 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 50 49 313 4 (set (reg:SI 0 ax [orig:91 D.6653 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [156])
                (const_int 300 [0x12c])) [0 procpar_info_16(D)->num_points+0 S4 A32])) fmtext_o.cpp:50 90 {*movsi_internal}
     (nil))
(insn 313 50 51 4 (set (reg:SI 1 dx [157])
        (reg:SI 0 ax [orig:91 D.6653 ] [91])) fmtext_o.cpp:50 90 {*movsi_internal}
     (nil))
(insn 51 313 52 4 (parallel [
            (set (reg:SI 1 dx [157])
                (lshiftrt:SI (reg:SI 1 dx [157])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 544 {*lshrsi3_1}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:SI 0 ax [158])
                (plus:SI (reg:SI 0 ax [orig:91 D.6653 ] [91])
                    (reg:SI 1 dx [157])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 217 {*addsi_1}
     (nil))
(insn 53 52 55 4 (parallel [
            (set (reg:SI 0 ax [159])
                (ashiftrt:SI (reg:SI 0 ax [158])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 545 {*ashrsi3_1}
     (nil))
(insn 55 53 56 4 (set (reg:SF 21 xmm0 [orig:93 D.6654 ] [93])
        (float:SF (reg:SI 0 ax [orig:92 D.6653 ] [92]))) fmtext_o.cpp:50 199 {*floatsisf2_sse}
     (nil))
(insn 56 55 316 4 (set (reg:SF 22 xmm1 [orig:94 D.6654 ] [94])
        (div:SF (reg:SF 22 xmm1 [orig:94 D.6654 ] [94])
            (reg:SF 21 xmm0 [orig:93 D.6654 ] [93]))) fmtext_o.cpp:50 804 {*fop_sf_1_sse}
     (nil))
(insn 316 56 57 4 (set (reg:SF 21 xmm0 [orig:94 D.6654 ] [94])
        (reg:SF 22 xmm1 [orig:94 D.6654 ] [94])) fmtext_o.cpp:50 129 {*movsf_internal}
     (nil))
(insn 57 316 58 4 (set (reg:DF 21 xmm0 [orig:95 D.6655 ] [95])
        (float_extend:DF (reg:SF 21 xmm0 [orig:94 D.6654 ] [94]))) fmtext_o.cpp:50 152 {*extendsfdf2_sse}
     (nil))
(insn 58 57 60 4 (set (reg:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 60 58 61 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f93b22962d0 *.LC4>)) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [160])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:50 93 {*movqi_internal}
     (nil))
(call_insn 63 62 64 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:50 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:DF 22 xmm1 [orig:96 D.6655 ] [96])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [161])
                (const_int 304 [0x130])) [0 procpar_info_16(D)->main_frequency+0 S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:DF 21 xmm0 [orig:97 D.6655 ] [97])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [162])
                (const_int 312 [0x138])) [0 procpar_info_16(D)->offset_frequency+0 S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DF 23 xmm2 [163])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 69 68 70 4 (set (reg:DF 21 xmm0 [orig:98 D.6655 ] [98])
        (div:DF (reg:DF 21 xmm0 [orig:97 D.6655 ] [97])
            (reg:DF 23 xmm2 [163]))) fmtext_o.cpp:51 805 {*fop_df_1_sse}
     (nil))
(insn 70 69 71 4 (set (reg:DF 21 xmm0 [orig:99 D.6655 ] [99])
        (plus:DF (reg:DF 21 xmm0 [orig:98 D.6655 ] [98])
            (reg:DF 22 xmm1 [orig:96 D.6655 ] [96]))) fmtext_o.cpp:51 798 {*fop_df_comm_sse}
     (nil))
(insn 71 70 73 4 (set (reg:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 73 71 74 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f93b2296360 *.LC6>)) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [164])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:51 93 {*movqi_internal}
     (nil))
(call_insn 76 75 77 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:51 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:SI 1 dx [orig:100 D.6653 ] [100])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [165])
                (const_int 296 [0x128])) [0 procpar_info_16(D)->num_transients+0 S4 A64])) fmtext_o.cpp:52 90 {*movsi_internal}
     (nil))
(insn 79 78 81 4 (set (reg:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 81 79 82 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f93b22961b0 *.LC2>)) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [166])) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:52 93 {*movqi_internal}
     (nil))
(call_insn 84 83 85 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:52 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 85 84 86 4 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 86 85 87 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.6656 ] [101])
                (plus:DI (reg/f:DI 0 ax [167])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:58 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 87 86 88 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:101 D.6656 ] [101])) fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(call_insn/i 88 87 90 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f93b27ad0d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:58 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 90 88 91 4 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:102 D.6657 ] [102])
            (const_int 32 [0x20]))) fmtext_o.cpp:58 8 {*cmpdi_1}
     (nil))
(jump_insn 91 90 92 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 141)
            (pc))) fmtext_o.cpp:58 612 {*jcc_1}
     (nil)
 -> 141)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 104 168 169
(note 92 91 93 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 5 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:62 89 {*movdi_internal}
     (nil))
(insn 94 93 95 5 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.6656 ] [103])
                (plus:DI (reg/f:DI 0 ax [168])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:62 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 95 94 96 5 (set (reg:SI 4 si)
        (const_int 47 [0x2f])) fmtext_o.cpp:62 90 {*movsi_internal}
     (nil))
(insn 96 95 97 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:103 D.6656 ] [103])) fmtext_o.cpp:62 89 {*movdi_internal}
     (nil))
(call_insn/i 97 96 99 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strrchr") [flags 0x41]  <function_decl 0x7f93b27b00d8 strrchr>) [0 strrchr S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:62 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 99 97 100 5 (parallel [
            (set (reg:DI 0 ax [169])
                (plus:DI (reg/f:DI 0 ax [orig:104 D.6658 ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:62 218 {*adddi_1}
     (nil))
(insn 100 99 101 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 fnptr+0 S8 A64])
        (reg:DI 0 ax [169])) fmtext_o.cpp:62 89 {*movdi_internal}
     (nil))
(insn 101 100 102 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 fnptr+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:63 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 102 101 103 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) fmtext_o.cpp:63 612 {*jcc_1}
     (nil)
 -> 110)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105 170
(note 103 102 104 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 6 (set (reg:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(insn 105 104 106 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [170])) fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(call_insn/i 106 105 108 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f93b27ad0d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:63 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 108 106 109 6 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:105 D.6657 ] [105])
            (const_int 32 [0x20]))) fmtext_o.cpp:63 8 {*cmpdi_1}
     (nil))
(jump_insn 109 108 110 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 122)
            (pc))) fmtext_o.cpp:63 612 {*jcc_1}
     (nil)
 -> 122)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 106 107 108 109 171 172 173
(code_label 110 109 111 7 5 "" [1 uses])
(note 111 110 112 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 7 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 113 112 114 7 (parallel [
            (set (reg/f:DI 3 bx [orig:106 D.6658 ] [106])
                (plus:DI (reg/f:DI 0 ax [171])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 114 113 115 7 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 115 114 116 7 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.6656 ] [107])
                (plus:DI (reg/f:DI 0 ax [172])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 116 115 117 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:107 D.6656 ] [107])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(call_insn/i 117 116 119 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f93b27ad0d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:65 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 117 120 7 (parallel [
            (set (reg:DI 0 ax [orig:109 D.6659 ] [109])
                (plus:DI (reg:DI 0 ax [orig:108 D.6657 ] [108])
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 218 {*adddi_1}
     (nil))
(insn 120 119 121 7 (parallel [
            (set (reg:DI 0 ax [173])
                (plus:DI (reg:DI 0 ax [orig:109 D.6659 ] [109])
                    (reg/f:DI 3 bx [orig:106 D.6658 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 218 {*adddi_1}
     (nil))
(insn 121 120 122 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 fnptr+0 S8 A64])
        (reg:DI 0 ax [173])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 174 175 176 177
(code_label 122 121 123 8 6 "" [1 uses])
(note 123 122 124 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 8 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 125 124 126 8 (parallel [
            (set (reg/f:DI 2 cx [orig:110 D.6656 ] [110])
                (plus:DI (reg/f:DI 0 ax [174])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:67 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 126 125 127 8 (set (reg:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 127 126 128 8 (set (reg:DI 1 dx)
        (reg:DI 0 ax [175])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 128 127 129 8 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:110 D.6656 ] [110])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 129 128 130 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f93b22963f0 *.LC7>)) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:67 93 {*movqi_internal}
     (nil))
(call_insn 131 130 132 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f93b27b65e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:67 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 132 131 133 8 (set (reg:DI 1 dx [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 133 132 135 8 (set (reg:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 135 133 136 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f93b2296480 *.LC8>)) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [177])) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 137 136 138 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:68 93 {*movqi_internal}
     (nil))
(call_insn 138 137 303 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:68 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 303 138 304 8 (set (pc)
        (label_ref 151)) 654 {jump}
     (nil)
 -> 151)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 304 303 141)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 111 178 179
(code_label 141 304 142 9 4 "" [1 uses])
(note 142 141 143 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 9 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 144 143 145 9 (parallel [
            (set (reg/f:DI 1 dx [orig:111 D.6656 ] [111])
                (plus:DI (reg/f:DI 0 ax [178])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:71 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 145 144 147 9 (set (reg:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 147 145 148 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f93b2296480 *.LC8>)) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 148 147 149 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [179])) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 149 148 150 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:71 93 {*movqi_internal}
     (nil))
(call_insn 150 149 151 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:71 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202
(code_label 151 150 152 10 7 "" [1 uses])
(note 152 151 153 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 153 152 154 10 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 154 153 155 10 (parallel [
            (set (reg/f:DI 1 dx [orig:112 D.6660 ] [112])
                (plus:DI (reg/f:DI 0 ax [180])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:75 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 155 154 157 10 (set (reg:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 157 155 158 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f93b2296480 *.LC8>)) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 158 157 159 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [181])) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 159 158 160 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:75 93 {*movqi_internal}
     (nil))
(call_insn 160 159 161 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:75 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 161 160 162 10 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 162 161 163 10 (set (reg:SF 21 xmm0 [orig:113 D.6654 ] [113])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [182])
                (const_int 368 [0x170])) [0 procpar_info_16(D)->vtheta+0 S4 A64])) fmtext_o.cpp:78 129 {*movsf_internal}
     (nil))
(insn 163 162 164 10 (set (reg:DF 25 xmm4 [orig:114 D.6655 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.6654 ] [113]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (nil))
(insn 164 163 165 10 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 165 164 166 10 (set (reg:SF 21 xmm0 [orig:115 D.6654 ] [115])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [183])
                (const_int 352 [0x160])) [0 procpar_info_16(D)->vox3+0 S4 A64])) fmtext_o.cpp:78 129 {*movsf_internal}
     (nil))
(insn 166 165 167 10 (set (reg:DF 24 xmm3 [orig:116 D.6655 ] [116])
        (float_extend:DF (reg:SF 21 xmm0 [orig:115 D.6654 ] [115]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (nil))
(insn 167 166 168 10 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 168 167 169 10 (set (reg:SF 21 xmm0 [orig:117 D.6654 ] [117])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [184])
                (const_int 348 [0x15c])) [0 procpar_info_16(D)->vox2+0 S4 A32])) fmtext_o.cpp:78 129 {*movsf_internal}
     (nil))
(insn 169 168 170 10 (set (reg:DF 23 xmm2 [orig:118 D.6655 ] [118])
        (float_extend:DF (reg:SF 21 xmm0 [orig:117 D.6654 ] [117]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (nil))
(insn 170 169 171 10 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:77 89 {*movdi_internal}
     (nil))
(insn 171 170 172 10 (set (reg:SF 21 xmm0 [orig:119 D.6654 ] [119])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [185])
                (const_int 344 [0x158])) [0 procpar_info_16(D)->vox1+0 S4 A64])) fmtext_o.cpp:77 129 {*movsf_internal}
     (nil))
(insn 172 171 173 10 (set (reg:DF 22 xmm1 [orig:120 D.6655 ] [120])
        (float_extend:DF (reg:SF 21 xmm0 [orig:119 D.6654 ] [119]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (nil))
(insn 173 172 174 10 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:77 89 {*movdi_internal}
     (nil))
(insn 174 173 175 10 (set (reg:SF 21 xmm0 [orig:121 D.6654 ] [121])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [186])
                (const_int 4 [0x4])) [0 preprocess_60(D)->scale_factor+0 S4 A32])) fmtext_o.cpp:77 129 {*movsf_internal}
     (nil))
(insn 175 174 176 10 (set (reg:DF 21 xmm0 [orig:122 D.6655 ] [122])
        (float_extend:DF (reg:SF 21 xmm0 [orig:121 D.6654 ] [121]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (nil))
(insn 176 175 177 10 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:77 89 {*movdi_internal}
     (nil))
(insn 177 176 178 10 (set (reg:HI 0 ax [orig:123 D.6661 ] [123])
        (mem/j:HI (reg/f:DI 0 ax [187]) [0 block_header_63(D)->scale.number+0 S2 A32])) fmtext_o.cpp:77 92 {*movhi_internal}
     (nil))
(insn 178 177 179 10 (set (reg:SI 1 dx [orig:124 D.6653 ] [124])
        (sign_extend:SI (reg:HI 0 ax [orig:123 D.6661 ] [123]))) fmtext_o.cpp:76 146 {extendhisi2}
     (nil))
(insn 179 178 186 10 (set (reg:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 186 179 187 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f93b2296510 *.LC9>)) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 187 186 188 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [188])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 188 187 189 10 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) fmtext_o.cpp:78 93 {*movqi_internal}
     (nil))
(call_insn 189 188 190 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:78 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 21 xmm0))
                        (expr_list:DF (use (reg:DF 22 xmm1))
                            (expr_list:DF (use (reg:DF 23 xmm2))
                                (expr_list:DF (use (reg:DF 24 xmm3))
                                    (expr_list:DF (use (reg:DF 25 xmm4))
                                        (nil)))))))))))
(insn 190 189 191 10 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 191 190 192 10 (set (reg:SF 21 xmm0 [orig:125 D.6654 ] [125])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [189])
                (const_int 328 [0x148])) [0 procpar_info_16(D)->gain+0 S4 A64])) fmtext_o.cpp:81 129 {*movsf_internal}
     (nil))
(insn 192 191 193 10 (set (reg:DF 26 xmm5 [orig:126 D.6655 ] [126])
        (float_extend:DF (reg:SF 21 xmm0 [orig:125 D.6654 ] [125]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (nil))
(insn 193 192 194 10 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 194 193 195 10 (set (reg:SF 21 xmm0 [orig:127 D.6654 ] [127])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [190])
                (const_int 340 [0x154])) [0 procpar_info_16(D)->pos3+0 S4 A32])) fmtext_o.cpp:81 129 {*movsf_internal}
     (nil))
(insn 195 194 196 10 (set (reg:DF 25 xmm4 [orig:128 D.6655 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.6654 ] [127]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (nil))
(insn 196 195 197 10 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 197 196 198 10 (set (reg:SF 21 xmm0 [orig:129 D.6654 ] [129])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [191])
                (const_int 336 [0x150])) [0 procpar_info_16(D)->pos2+0 S4 A64])) fmtext_o.cpp:80 129 {*movsf_internal}
     (nil))
(insn 198 197 199 10 (set (reg:DF 24 xmm3 [orig:130 D.6655 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.6654 ] [129]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (nil))
(insn 199 198 200 10 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 200 199 201 10 (set (reg:SF 21 xmm0 [orig:131 D.6654 ] [131])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [192])
                (const_int 332 [0x14c])) [0 procpar_info_16(D)->pos1+0 S4 A32])) fmtext_o.cpp:80 129 {*movsf_internal}
     (nil))
(insn 201 200 202 10 (set (reg:DF 23 xmm2 [orig:132 D.6655 ] [132])
        (float_extend:DF (reg:SF 21 xmm0 [orig:131 D.6654 ] [131]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (nil))
(insn 202 201 203 10 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 203 202 204 10 (set (reg:SF 21 xmm0 [orig:133 D.6654 ] [133])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [193])
                (const_int 324 [0x144])) [0 procpar_info_16(D)->tm+0 S4 A32])) fmtext_o.cpp:80 129 {*movsf_internal}
     (nil))
(insn 204 203 205 10 (set (reg:DF 22 xmm1 [orig:134 D.6655 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.6654 ] [133]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (nil))
(insn 205 204 206 10 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 206 205 207 10 (set (reg:SF 21 xmm0 [orig:135 D.6654 ] [135])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [194])
                (const_int 320 [0x140])) [0 procpar_info_16(D)->te+0 S4 A64])) fmtext_o.cpp:80 129 {*movsf_internal}
     (nil))
(insn 207 206 208 10 (set (reg:DF 21 xmm0 [orig:136 D.6655 ] [136])
        (float_extend:DF (reg:SF 21 xmm0 [orig:135 D.6654 ] [135]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (nil))
(insn 208 207 215 10 (set (reg:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 215 208 216 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f93b22965a0 *.LC10>)) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 216 215 217 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [195])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 217 216 218 10 (set (reg:QI 0 ax)
        (const_int 6 [0x6])) fmtext_o.cpp:81 93 {*movqi_internal}
     (nil))
(call_insn 218 217 219 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:81 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (expr_list:DF (use (reg:DF 24 xmm3))
                                (expr_list:DF (use (reg:DF 25 xmm4))
                                    (expr_list:DF (use (reg:DF 26 xmm5))
                                        (nil)))))))))))
(insn 219 218 220 10 (set (reg:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 220 219 221 10 (set (reg:DI 2 cx)
        (reg:DI 0 ax [196])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 221 220 222 10 (set (reg:DI 1 dx)
        (const_int 13 [0xd])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 222 221 223 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 223 222 224 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f93b2296630 *.LC11>)) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(call_insn 224 223 225 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f93b27b6000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:82 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 225 224 226 10 (set (reg:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 226 225 227 10 (set (reg:DI 2 cx)
        (reg:DI 0 ax [197])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 227 226 228 10 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 228 227 229 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 229 228 230 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f93b22966c0 *.LC12>)) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(call_insn 230 229 231 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f93b27b6000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:83 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 231 230 232 10 (set (reg:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 232 231 233 10 (set (reg:DI 2 cx)
        (reg:DI 0 ax [198])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 233 232 234 10 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 234 233 235 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 235 234 236 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f93b2296750 *.LC13>)) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn 236 235 237 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f93b27b6000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:84 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 237 236 238 10 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:88 89 {*movdi_internal}
     (nil))
(insn 238 237 239 10 (set (reg:SI 0 ax [200])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [199])
                (const_int 8 [0x8])) [0 main_header_83(D)->np.number+0 S4 A32])) fmtext_o.cpp:88 90 {*movsi_internal}
     (nil))
(insn 239 238 240 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 number_output_points+0 S4 A32])
        (reg:SI 0 ax [200])) fmtext_o.cpp:88 90 {*movsi_internal}
     (nil))
(insn 240 239 241 10 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:89 89 {*movdi_internal}
     (nil))
(insn 241 240 242 10 (set (reg:SI 1 dx [orig:137 D.6653 ] [137])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [201])
                (const_int 24 [0x18])) [0 preprocess_60(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:89 90 {*movsi_internal}
     (nil))
(insn 242 241 243 10 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:89 89 {*movdi_internal}
     (nil))
(insn 243 242 244 10 (set (reg:SI 0 ax [orig:138 D.6653 ] [138])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [202])
                (const_int 8 [0x8])) [0 main_header_83(D)->np.number+0 S4 A32])) fmtext_o.cpp:89 90 {*movsi_internal}
     (nil))
(insn 244 243 245 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:137 D.6653 ] [137])
            (reg:SI 0 ax [orig:138 D.6653 ] [138]))) fmtext_o.cpp:89 7 {*cmpsi_1}
     (nil))
(jump_insn 245 244 246 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 250)
            (pc))) fmtext_o.cpp:89 612 {*jcc_1}
     (nil)
 -> 250)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 203 204
(note 246 245 247 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 11 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:90 89 {*movdi_internal}
     (nil))
(insn 248 247 249 11 (set (reg:SI 0 ax [204])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [203])
                (const_int 24 [0x18])) [0 preprocess_60(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:90 90 {*movsi_internal}
     (nil))
(insn 249 248 250 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 number_output_points+0 S4 A32])
        (reg:SI 0 ax [204])) fmtext_o.cpp:90 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 250 249 251 12 8 "" [1 uses])
(note 251 250 252 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 252 251 286 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              14 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 205
(code_label 286 252 253 13 10 "" [1 uses])
(note 253 286 254 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 13 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 j+0 S4 A32])) fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
(insn 255 254 256 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [205])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 number_output_points+0 S4 A32]))) fmtext_o.cpp:92 7 {*cmpsi_1}
     (nil))
(jump_insn 256 255 257 13 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 289)
            (pc))) fmtext_o.cpp:92 612 {*jcc_1}
     (nil)
 -> 289)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 139 140 141 142 143 144 145 146 147 148 149 206 207 208 209 210 211
(note 257 256 258 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 258 257 259 14 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 j+0 S4 A32])) fmtext_o.cpp:93 90 {*movsi_internal}
     (nil))
(insn 259 258 260 14 (set (reg:DI 0 ax [orig:139 D.6657 ] [139])
        (sign_extend:DI (reg:SI 0 ax [206]))) fmtext_o.cpp:93 142 {*extendsidi2_rex64}
     (nil))
(insn 260 259 261 14 (parallel [
            (set (reg:DI 1 dx [orig:140 D.6657 ] [140])
                (ashift:DI (reg:DI 0 ax [orig:139 D.6657 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:93 512 {*ashldi3_1}
     (nil))
(insn 261 260 262 14 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 data+0 S8 A64])) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 262 261 263 14 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.6662 ] [141])
                (plus:DI (reg/f:DI 0 ax [207])
                    (reg:DI 1 dx [orig:140 D.6657 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:93 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:140 D.6657 ] [140]))
        (nil)))
(insn 263 262 264 14 (set (reg:SF 21 xmm0 [orig:142 D.6654 ] [142])
        (mem:SF (reg/f:DI 0 ax [orig:141 D.6662 ] [141]) [0 *_92+0 S4 A32])) fmtext_o.cpp:93 129 {*movsf_internal}
     (nil))
(insn 264 263 265 14 (set (reg:DF 21 xmm0 [orig:143 D.6655 ] [143])
        (float_extend:DF (reg:SF 21 xmm0 [orig:142 D.6654 ] [142]))) fmtext_o.cpp:93 152 {*extendsfdf2_sse}
     (nil))
(insn 265 264 267 14 (set (reg:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 267 265 268 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f93b22967e0 *.LC14>)) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 268 267 269 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [208])) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 269 268 270 14 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:93 93 {*movqi_internal}
     (nil))
(call_insn 270 269 271 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:93 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 271 270 272 14 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 j+0 S4 A32])) fmtext_o.cpp:94 90 {*movsi_internal}
     (nil))
(insn 272 271 273 14 (set (reg:DI 0 ax [orig:144 D.6659 ] [144])
        (sign_extend:DI (reg:SI 0 ax [209]))) fmtext_o.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 273 272 274 14 (parallel [
            (set (reg:DI 0 ax [orig:145 D.6659 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 D.6659 ] [144])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 218 {*adddi_1}
     (nil))
(insn 274 273 275 14 (parallel [
            (set (reg:DI 1 dx [orig:146 D.6659 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.6659 ] [145])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 512 {*ashldi3_1}
     (nil))
(insn 275 274 276 14 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 data+0 S8 A64])) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 276 275 277 14 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6662 ] [147])
                (plus:DI (reg/f:DI 0 ax [210])
                    (reg:DI 1 dx [orig:146 D.6659 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:146 D.6659 ] [146]))
        (nil)))
(insn 277 276 278 14 (set (reg:SF 21 xmm0 [orig:148 D.6654 ] [148])
        (mem:SF (reg/f:DI 0 ax [orig:147 D.6662 ] [147]) [0 *_99+0 S4 A32])) fmtext_o.cpp:94 129 {*movsf_internal}
     (nil))
(insn 278 277 279 14 (set (reg:DF 21 xmm0 [orig:149 D.6655 ] [149])
        (float_extend:DF (reg:SF 21 xmm0 [orig:148 D.6654 ] [148]))) fmtext_o.cpp:94 152 {*extendsfdf2_sse}
     (nil))
(insn 279 278 281 14 (set (reg:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 281 279 282 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f93b22967e0 *.LC14>)) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 282 281 283 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [211])) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 283 282 284 14 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:94 93 {*movqi_internal}
     (nil))
(call_insn 284 283 285 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f93b27b0870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:94 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 285 284 305 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:92 217 {*addsi_1}
     (nil))
(jump_insn 305 285 306 14 (set (pc)
        (label_ref 286)) fmtext_o.cpp:92 654 {jump}
     (nil)
 -> 286)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 306 305 289)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 289 306 290 15 9 "" [1 uses])
(note 290 289 291 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 291 290 292 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:98 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 292 291 293 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 310)
            (pc))) fmtext_o.cpp:98 612 {*jcc_1}
     (nil)
 -> 310)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 212
(note 293 292 294 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 294 293 295 16 (set (reg:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 295 294 296 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [212])) fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(call_insn 296 295 310 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f93b25741b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:99 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 17, flags: (NEW, RTL, MODIFIED)
;;  pred:       15
;;              3 [100.0%] 
;;              16 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 310 296 309 18 11 "" [2 uses])
(note 309 310 311 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 311 309 299 18 (const_int 0 [0]) fmtext_o.cpp:103 684 {nop}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 [100.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 299 311 300 17 1 "" [0 uses])
(note 300 299 312 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 312 300 0 NOTE_INSN_DELETED)

;; Function int read_csi_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision3* (*)[100], Precision4* (*)[100], Precision4* (*)[32], int*, PE_info*) (_Z13read_csi_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEPA100_P10Precision3PA100_P10Precision4PA32_SK_S_P7PE_info, funcdef_no=3, decl_uid=5417, cgraph_uid=3, symbol_order=3)

      Creating newreg=706
Removing SCRATCH in insn #21 (nop 2)
rescanning insn with uid = 21.
      Creating newreg=707
Removing SCRATCH in insn #1123 (nop 3)
rescanning insn with uid = 1123.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r706
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=708 from oldreg=384, assigning class GENERAL_REGS to r708
   56: {r708:DI=r708:DI<<0x8;clobber flags:CC;}
      REG_DEAD r382:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1183: r708:DI=r382:DI
    Inserting insn reload after:
 1184: r384:DI=r708:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 63:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 89:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 127:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 135
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 163:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 185:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 192:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 217:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 223:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 228:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 239:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 242:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 248:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 254:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 256:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 263:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 267:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 268:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 276:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 281:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 289
	 Choosing alt 0 in insn 289:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 291:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) rm  (1) rn {*cmphi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 298:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 299:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 304
	 Choosing alt 2 in insn 304:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 305:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 307:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 311:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 316:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 322:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 330:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 331:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 332:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) rm  (1) rn {*cmphi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 337:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 344
	 Choosing alt 2 in insn 344:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 345:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 351:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 356:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 360:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 362:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 370:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 377:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 383:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 389:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 394:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 397:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 399:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 400:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 402:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 413
	 Choosing alt 2 in insn 413:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 415:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 419:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 423:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 428:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 432:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 438:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 443:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 450:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 453:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 455:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 459:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 464:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 470:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 472:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 476:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 481:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 487:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 489:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 490:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 491:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 493:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 497:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 502:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 506:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 508:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 510:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 514:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 523:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 525:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 527:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 529:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 531:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 535:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 540:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 544:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 546:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 548:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 551:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 552:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 557:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 562:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 563:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 565:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 566:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 567:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 568:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 574:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 580:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 586:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 588:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 589:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 591:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 594:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 597:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 599:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 604:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 605:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 606
	 Choosing alt 0 in insn 606:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 609:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 610:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 611:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 615:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 617:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 620:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 623:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 624:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 625
	 Choosing alt 0 in insn 625:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 628:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 630:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 634:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 638:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 639:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 640:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 646:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 652:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 654:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 656:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 659:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 661:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 663
	 Choosing alt 0 in insn 663:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 665:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 670:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 671:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 672
	 Choosing alt 0 in insn 672:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 674:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 677:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 683:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=0,overall=12,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 684:  (0) rm  (1) 0 {ashrsi3_cvt}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
            alt=2: Bad operand -- refuse
	 Choosing alt 1 in insn 685:  (0) rm  (1) 0  (2) re {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 688:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 689:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 691:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 693:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 695:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 698:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 700:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 702:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 705:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 707:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=709 from oldreg=260, assigning class GENERAL_REGS to r709
  707: {r709:DI=r709:DI<<0x8;clobber flags:CC;}
      REG_DEAD r259:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1185: r709:DI=r259:DI
    Inserting insn reload after:
 1186: r260:DI=r709:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 708:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 709:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 711:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 719:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 720:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 726:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 732:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 734:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 736:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 739:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 741:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 742:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 746:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 748:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 749:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 750:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 751:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 755:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 756:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=710 from oldreg=270, assigning class GENERAL_REGS to r710
  756: {r710:DI=r710:DI<<0x8;clobber flags:CC;}
      REG_DEAD r269:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1187: r710:DI=r269:DI
    Inserting insn reload after:
 1188: r270:DI=r710:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 757:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 758:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 760:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 761:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 762:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 763:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 764:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 765
	 Choosing alt 0 in insn 765:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 766:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 767:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 768:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 774:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 780:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 786:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 788:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 789:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 790:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 791:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 794:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 796:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 797:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 798:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 799:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 802:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 804:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 805:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 807:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 810:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 811:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 812:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 813:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 815:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 816:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 817:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 819:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 821:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 822:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 823:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 824
	 Choosing alt 0 in insn 824:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 825:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 826:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=711 from oldreg=285, assigning class GENERAL_REGS to r711
  826: {r711:DI=r711:DI<<0x8;clobber flags:CC;}
      REG_DEAD r284:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1189: r711:DI=r284:DI
    Inserting insn reload after:
 1190: r285:DI=r711:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 827:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 828:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 829:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 830:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 831:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 832:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 834:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 835:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 836:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 837:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 838:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 840:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 841:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 842:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 843
	 Choosing alt 0 in insn 843:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 844:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 845:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 846:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 847:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 848:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 849:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 850:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 851:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 852:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 853:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 855:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 856:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 857:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 858:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 859:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 861:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 862:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 863:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 864
	 Choosing alt 0 in insn 864:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 865:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 866:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=712 from oldreg=296, assigning class GENERAL_REGS to r712
  866: {r712:DI=r712:DI<<0x8;clobber flags:CC;}
      REG_DEAD r295:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1191: r712:DI=r295:DI
    Inserting insn reload after:
 1192: r296:DI=r712:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 867:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 868:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 869:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 870:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 871:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 872:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 874:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 875:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 876:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 877:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 878:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 880:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 881:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 882:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 883
	 Choosing alt 0 in insn 883:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 884:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 885:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 886:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 887:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 888:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 889:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 890:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 891:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 892:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 894:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 895:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 896:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 897:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 898:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 901:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 902:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 903:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 904:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 905:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 906:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 907:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 908:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 909:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 910:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 911
	 Choosing alt 0 in insn 911:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 912:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 913:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 919:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 925:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 931:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 933:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 934:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 935:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 938:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 940:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 941:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 942:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 945:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 947:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 948:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 949:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 950:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 951:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 952:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 953
	 Choosing alt 2 in insn 953:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 955:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 958:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 959:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 961:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 962:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 963:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 964:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 965:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 968:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 970:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 971:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 972:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 973:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 974:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 975:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=713 from oldreg=328, assigning class GENERAL_REGS to r713
  975: {r713:DI=r713:DI<<0x8;clobber flags:CC;}
      REG_DEAD r327:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1193: r713:DI=r327:DI
    Inserting insn reload after:
 1194: r328:DI=r713:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 976:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 977:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 978:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 979:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 980:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 981:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 982:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 983:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 984:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 985:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 986:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 987:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 988:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 990:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 991:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 992:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 993:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 994:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 997:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 998:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 999:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1000:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1001:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1002:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1003:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1004:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1005:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1006:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=714 from oldreg=338, assigning class GENERAL_REGS to r714
 1006: {r714:DI=r714:DI<<0x8;clobber flags:CC;}
      REG_DEAD r337:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1195: r714:DI=r337:DI
    Inserting insn reload after:
 1196: r338:DI=r714:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1007:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1008:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1009:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1010:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1011:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1012:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1013:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1014:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1015:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1016:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1017:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1018:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1019:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1021:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1022:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1023:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1024:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1025:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1028:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1029:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1030:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1031:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1032:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1033:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1034:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1035:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1036:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1037:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=715 from oldreg=349, assigning class GENERAL_REGS to r715
 1037: {r715:DI=r715:DI<<0x8;clobber flags:CC;}
      REG_DEAD r348:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1197: r715:DI=r348:DI
    Inserting insn reload after:
 1198: r349:DI=r715:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1038:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1039:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1040:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1041:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1042:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1043:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1044:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1045:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1046:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1047:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1048:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1049:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1050:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1052:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1053:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1054:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1055:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1056:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1059:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1060:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1061:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1062:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1063:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1064:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1065:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1066:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1067:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1068:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=716 from oldreg=360, assigning class GENERAL_REGS to r716
 1068: {r716:DI=r716:DI<<0x8;clobber flags:CC;}
      REG_DEAD r359:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1199: r716:DI=r359:DI
    Inserting insn reload after:
 1200: r360:DI=r716:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1069:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1070:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1071:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1072:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1073:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1074:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1075:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1076:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1077:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1078:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1079:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1080:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1086:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1092:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1098:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1104:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1106:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1109:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1112:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1115:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1123:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r707
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1125:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90

********** Pseudo live ranges #1: **********

  BB 6
   Insn 75: point = 0
   Insn 74: point = 0
   Insn 73: point = 0
   Insn 72: point = 0
  BB 8
   Insn 101: point = 0
   Insn 100: point = 0
   Insn 99: point = 0
   Insn 98: point = 0
  BB 29
   Insn 373: point = 0
   Insn 372: point = 0
   Insn 371: point = 0
   Insn 370: point = 0
  BB 89
   Insn 1125: point = 0
  BB 90
   Insn 1128: point = 0
  BB 88
   Insn 1124: point = 0
   Insn 1123: point = 0
   Insn 1122: point = 1
   Insn 1118: point = 2
   Insn 1115: point = 4
  BB 87
   Insn 1112: point = 5
   Insn 1111: point = 5
   Insn 1110: point = 6
   Insn 1109: point = 8
  BB 86
   Insn 1107: point = 9
   Insn 1106: point = 9
   Insn 1105: point = 10
   Insn 1104: point = 12
  BB 3
   Insn 33: point = 13
   Insn 32: point = 13
   Insn 31: point = 14
   Insn 30: point = 16
   Insn 29: point = 18
  BB 85
   Insn 1180: point = 19
   Insn 1098: point = 19
  BB 77
   Insn 936: point = 19
   Insn 935: point = 19
   Insn 934: point = 20
   Insn 933: point = 22
  BB 84
   Insn 1178: point = 23
   Insn 1092: point = 23
  BB 79
   Insn 943: point = 23
   Insn 942: point = 23
   Insn 941: point = 24
   Insn 940: point = 26
  BB 83
   Insn 1176: point = 27
   Insn 1086: point = 27
  BB 81
   Insn 956: point = 27
   Insn 955: point = 27
   Insn 954: point = 28
   Insn 953: point = 30
   Insn 952: point = 32
   Insn 951: point = 33
   Insn 950: point = 35
   Insn 949: point = 37
   Insn 948: point = 39
   Insn 947: point = 41
  BB 82
   Insn 1174: point = 42
   Insn 1080: point = 42
   Insn 1079: point = 42
   Insn 1078: point = 43
   Insn 1077: point = 45
   Insn 1076: point = 47
   Insn 1075: point = 49
   Insn 1074: point = 51
   Insn 1073: point = 52
   Insn 1072: point = 54
   Insn 1071: point = 56
   Insn 1070: point = 57
   Insn 1069: point = 59
   Insn 1200: point = 60
	Hard reg 2 is preferable by r716 with profit 1
   Insn 1068: point = 62
   Insn 1199: point = 62
	Hard reg 2 is preferable by r716 with profit 1
	Hard reg 0 is preferable by r716 with profit 1
   Insn 1067: point = 64
   Insn 1066: point = 66
   Insn 1065: point = 67
   Insn 1064: point = 69
   Insn 1063: point = 70
   Insn 1062: point = 72
   Insn 1061: point = 74
   Insn 1060: point = 75
   Insn 1059: point = 77
   Insn 1058: point = 78
   Insn 1057: point = 80
   Insn 1056: point = 82
   Insn 1055: point = 84
   Insn 1054: point = 85
   Insn 1053: point = 86
   Insn 1052: point = 87
   Insn 1051: point = 87
   Insn 1050: point = 88
   Insn 1049: point = 90
   Insn 1048: point = 91
   Insn 1047: point = 92
   Insn 1046: point = 94
   Insn 1045: point = 96
   Insn 1044: point = 98
   Insn 1043: point = 100
   Insn 1042: point = 101
   Insn 1041: point = 103
   Insn 1040: point = 105
   Insn 1039: point = 106
   Insn 1038: point = 108
   Insn 1198: point = 109
	Hard reg 2 is preferable by r715 with profit 1
   Insn 1037: point = 111
   Insn 1197: point = 111
	Hard reg 2 is preferable by r715 with profit 1
	Hard reg 0 is preferable by r715 with profit 1
   Insn 1036: point = 113
   Insn 1035: point = 115
   Insn 1034: point = 116
   Insn 1033: point = 118
   Insn 1032: point = 119
   Insn 1031: point = 121
   Insn 1030: point = 123
   Insn 1029: point = 124
   Insn 1028: point = 126
   Insn 1027: point = 127
   Insn 1026: point = 129
   Insn 1025: point = 131
   Insn 1024: point = 133
   Insn 1023: point = 134
   Insn 1022: point = 135
   Insn 1021: point = 136
   Insn 1020: point = 136
   Insn 1019: point = 137
   Insn 1018: point = 139
   Insn 1017: point = 140
   Insn 1016: point = 141
   Insn 1015: point = 143
   Insn 1014: point = 145
   Insn 1013: point = 147
   Insn 1012: point = 149
   Insn 1011: point = 150
   Insn 1010: point = 152
   Insn 1009: point = 154
   Insn 1008: point = 155
   Insn 1007: point = 157
   Insn 1196: point = 158
	Hard reg 2 is preferable by r714 with profit 1
   Insn 1006: point = 160
   Insn 1195: point = 160
	Hard reg 2 is preferable by r714 with profit 1
	Hard reg 0 is preferable by r714 with profit 1
   Insn 1005: point = 162
   Insn 1004: point = 164
   Insn 1003: point = 165
   Insn 1002: point = 167
   Insn 1001: point = 168
   Insn 1000: point = 170
   Insn 999: point = 172
   Insn 998: point = 173
   Insn 997: point = 175
   Insn 996: point = 176
   Insn 995: point = 178
   Insn 994: point = 180
   Insn 993: point = 182
   Insn 992: point = 183
   Insn 991: point = 184
   Insn 990: point = 185
   Insn 989: point = 185
   Insn 988: point = 186
   Insn 987: point = 188
   Insn 986: point = 189
   Insn 985: point = 190
   Insn 984: point = 192
   Insn 983: point = 193
   Insn 982: point = 195
   Insn 981: point = 197
   Insn 980: point = 198
   Insn 979: point = 200
   Insn 978: point = 202
   Insn 977: point = 203
   Insn 976: point = 205
   Insn 1194: point = 206
	Hard reg 2 is preferable by r713 with profit 1
   Insn 975: point = 208
   Insn 1193: point = 208
	Hard reg 2 is preferable by r713 with profit 1
	Hard reg 0 is preferable by r713 with profit 1
   Insn 974: point = 210
   Insn 973: point = 212
   Insn 972: point = 213
   Insn 971: point = 215
   Insn 970: point = 217
   Insn 969: point = 218
   Insn 968: point = 220
   Insn 967: point = 221
   Insn 966: point = 223
   Insn 965: point = 225
   Insn 964: point = 227
   Insn 963: point = 228
   Insn 962: point = 229
   Insn 961: point = 230
   Insn 960: point = 230
   Insn 959: point = 231
   Insn 958: point = 233
  BB 80
   Insn 945: point = 234
  BB 78
   Insn 938: point = 234
  BB 76
   Insn 931: point = 234
  BB 68
   Insn 792: point = 234
   Insn 791: point = 234
   Insn 790: point = 235
   Insn 789: point = 237
   Insn 788: point = 239
  BB 75
   Insn 1172: point = 240
   Insn 925: point = 240
  BB 70
   Insn 800: point = 240
   Insn 799: point = 240
   Insn 798: point = 241
   Insn 797: point = 243
   Insn 796: point = 245
  BB 74
   Insn 1170: point = 246
   Insn 919: point = 246
  BB 72
   Insn 808: point = 246
   Insn 807: point = 246
   Insn 806: point = 247
   Insn 805: point = 249
   Insn 804: point = 251
  BB 73
   Insn 1168: point = 252
   Insn 913: point = 252
   Insn 912: point = 252
   Insn 911: point = 253
   Insn 910: point = 255
   Insn 909: point = 257
   Insn 908: point = 259
   Insn 907: point = 261
   Insn 906: point = 263
   Insn 905: point = 264
   Insn 904: point = 266
   Insn 903: point = 268
   Insn 902: point = 269
   Insn 901: point = 271
   Insn 900: point = 272
   Insn 899: point = 274
   Insn 898: point = 276
   Insn 897: point = 278
   Insn 896: point = 279
   Insn 895: point = 280
   Insn 894: point = 281
   Insn 893: point = 281
   Insn 892: point = 282
   Insn 891: point = 284
   Insn 890: point = 285
   Insn 889: point = 287
   Insn 888: point = 289
   Insn 887: point = 291
   Insn 886: point = 293
   Insn 885: point = 294
   Insn 884: point = 296
   Insn 883: point = 298
   Insn 882: point = 300
   Insn 881: point = 301
   Insn 880: point = 303
   Insn 879: point = 305
   Insn 878: point = 307
   Insn 877: point = 309
   Insn 876: point = 310
   Insn 875: point = 311
   Insn 874: point = 312
   Insn 873: point = 312
   Insn 872: point = 313
   Insn 871: point = 315
   Insn 870: point = 316
   Insn 869: point = 318
   Insn 868: point = 319
   Insn 867: point = 321
   Insn 1192: point = 322
	Hard reg 1 is preferable by r712 with profit 1
   Insn 866: point = 324
   Insn 1191: point = 324
	Hard reg 1 is preferable by r712 with profit 1
	Hard reg 0 is preferable by r712 with profit 1
   Insn 865: point = 326
   Insn 864: point = 328
   Insn 863: point = 330
   Insn 862: point = 331
   Insn 861: point = 333
   Insn 860: point = 335
   Insn 859: point = 337
   Insn 858: point = 339
   Insn 857: point = 340
   Insn 856: point = 341
   Insn 855: point = 342
   Insn 854: point = 342
   Insn 853: point = 343
   Insn 852: point = 345
   Insn 851: point = 346
   Insn 850: point = 348
   Insn 849: point = 349
   Insn 848: point = 351
   Insn 847: point = 353
   Insn 846: point = 355
   Insn 845: point = 356
   Insn 844: point = 358
   Insn 843: point = 360
   Insn 842: point = 362
   Insn 841: point = 363
   Insn 840: point = 365
   Insn 839: point = 367
   Insn 838: point = 369
   Insn 837: point = 371
   Insn 836: point = 372
   Insn 835: point = 373
   Insn 834: point = 374
   Insn 833: point = 374
   Insn 832: point = 375
   Insn 831: point = 377
   Insn 830: point = 378
   Insn 829: point = 380
   Insn 828: point = 381
   Insn 827: point = 383
   Insn 1190: point = 384
	Hard reg 1 is preferable by r711 with profit 1
   Insn 826: point = 386
   Insn 1189: point = 386
	Hard reg 1 is preferable by r711 with profit 1
	Hard reg 0 is preferable by r711 with profit 1
   Insn 825: point = 388
   Insn 824: point = 390
   Insn 823: point = 392
   Insn 822: point = 393
   Insn 821: point = 395
   Insn 820: point = 397
   Insn 819: point = 399
   Insn 818: point = 401
   Insn 817: point = 402
   Insn 816: point = 403
   Insn 815: point = 404
   Insn 814: point = 404
   Insn 813: point = 405
   Insn 812: point = 407
   Insn 811: point = 408
   Insn 810: point = 410
  BB 71
   Insn 802: point = 411
  BB 69
   Insn 794: point = 411
  BB 67
   Insn 786: point = 411
  BB 59
   Insn 737: point = 411
   Insn 736: point = 411
   Insn 735: point = 412
   Insn 734: point = 414
  BB 66
   Insn 1166: point = 415
   Insn 780: point = 415
  BB 61
   Insn 744: point = 415
   Insn 743: point = 415
   Insn 742: point = 416
   Insn 741: point = 418
  BB 65
   Insn 1164: point = 419
   Insn 774: point = 419
  BB 63
   Insn 752: point = 419
   Insn 751: point = 419
   Insn 750: point = 420
   Insn 749: point = 422
   Insn 748: point = 424
  BB 64
   Insn 1162: point = 425
   Insn 768: point = 425
   Insn 767: point = 425
   Insn 766: point = 426
   Insn 765: point = 427
   Insn 764: point = 429
   Insn 763: point = 431
   Insn 762: point = 433
   Insn 761: point = 434
   Insn 760: point = 436
   Insn 759: point = 438
   Insn 758: point = 439
   Insn 757: point = 441
   Insn 1188: point = 442
	Hard reg 1 is preferable by r710 with profit 1
   Insn 756: point = 444
   Insn 1187: point = 444
	Hard reg 1 is preferable by r710 with profit 1
	Hard reg 0 is preferable by r710 with profit 1
   Insn 755: point = 446
   Insn 754: point = 448
  BB 62
   Insn 746: point = 449
  BB 60
   Insn 739: point = 449
  BB 58
   Insn 732: point = 449
  BB 53
   Insn 696: point = 449
   Insn 695: point = 449
   Insn 694: point = 450
   Insn 693: point = 452
  BB 57
   Insn 1160: point = 453
   Insn 726: point = 453
  BB 55
   Insn 703: point = 453
   Insn 702: point = 453
   Insn 701: point = 454
   Insn 700: point = 456
  BB 56
   Insn 1158: point = 457
   Insn 720: point = 457
   Insn 719: point = 457
   Insn 718: point = 458
   Insn 717: point = 460
   Insn 716: point = 461
   Insn 715: point = 463
   Insn 714: point = 464
   Insn 713: point = 464
   Insn 712: point = 465
   Insn 711: point = 467
   Insn 710: point = 469
   Insn 709: point = 470
   Insn 708: point = 472
   Insn 1186: point = 473
	Hard reg 1 is preferable by r709 with profit 1
   Insn 707: point = 475
   Insn 1185: point = 475
	Hard reg 1 is preferable by r709 with profit 1
	Hard reg 0 is preferable by r709 with profit 1
   Insn 706: point = 477
   Insn 705: point = 479
  BB 54
   Insn 698: point = 480
  BB 52
   Insn 691: point = 480
   Insn 690: point = 480
   Insn 689: point = 481
   Insn 688: point = 482
   Insn 687: point = 484
   Insn 686: point = 485
   Insn 685: point = 486
   Insn 684: point = 486
   Insn 683: point = 488
  BB 48
   Insn 657: point = 489
   Insn 656: point = 489
   Insn 655: point = 490
   Insn 654: point = 492
  BB 51
   Insn 1156: point = 493
   Insn 677: point = 493
  BB 50
   Insn 674: point = 493
   Insn 673: point = 494
   Insn 672: point = 496
   Insn 671: point = 498
   Insn 670: point = 499
   Insn 669: point = 501
   Insn 668: point = 503
  BB 49
   Insn 666: point = 504
   Insn 665: point = 504
   Insn 664: point = 505
   Insn 663: point = 507
   Insn 662: point = 509
   Insn 661: point = 510
   Insn 660: point = 512
   Insn 659: point = 514
  BB 47
   Insn 652: point = 515
  BB 42
   Insn 592: point = 515
   Insn 591: point = 515
   Insn 590: point = 516
   Insn 589: point = 518
   Insn 588: point = 520
  BB 46
   Insn 1154: point = 521
   Insn 646: point = 521
  BB 44
   Insn 600: point = 521
   Insn 599: point = 521
   Insn 598: point = 522
   Insn 597: point = 524
   Insn 596: point = 526
  BB 45
   Insn 1152: point = 527
   Insn 640: point = 527
   Insn 639: point = 527
   Insn 638: point = 528
   Insn 637: point = 530
   Insn 636: point = 532
   Insn 635: point = 534
   Insn 634: point = 535
   Insn 633: point = 536
   Insn 632: point = 537
   Insn 631: point = 537
   Insn 630: point = 538
   Insn 629: point = 540
   Insn 628: point = 541
   Insn 627: point = 543
   Insn 626: point = 544
   Insn 625: point = 546
   Insn 624: point = 548
   Insn 623: point = 549
   Insn 622: point = 551
   Insn 621: point = 553
   Insn 620: point = 554
   Insn 619: point = 555
   Insn 618: point = 557
   Insn 617: point = 559
   Insn 616: point = 561
   Insn 615: point = 562
   Insn 614: point = 563
   Insn 613: point = 564
   Insn 612: point = 564
   Insn 611: point = 565
   Insn 610: point = 567
   Insn 609: point = 568
   Insn 608: point = 570
   Insn 607: point = 571
   Insn 606: point = 573
   Insn 605: point = 575
   Insn 604: point = 576
   Insn 603: point = 578
   Insn 602: point = 580
  BB 43
   Insn 594: point = 581
  BB 41
   Insn 586: point = 581
  BB 33
   Insn 395: point = 581
   Insn 394: point = 581
   Insn 393: point = 582
   Insn 392: point = 584
   Insn 391: point = 586
  BB 40
   Insn 1150: point = 587
   Insn 580: point = 587
  BB 35
   Insn 403: point = 587
   Insn 402: point = 587
   Insn 401: point = 588
   Insn 400: point = 590
   Insn 399: point = 592
  BB 39
   Insn 1148: point = 593
   Insn 574: point = 593
  BB 37
   Insn 416: point = 593
   Insn 415: point = 593
   Insn 414: point = 594
   Insn 413: point = 596
   Insn 412: point = 598
   Insn 411: point = 599
   Insn 410: point = 601
   Insn 409: point = 603
   Insn 408: point = 605
   Insn 407: point = 607
  BB 38
   Insn 1146: point = 608
   Insn 568: point = 608
   Insn 567: point = 608
   Insn 566: point = 609
   Insn 565: point = 611
   Insn 564: point = 613
   Insn 563: point = 615
   Insn 562: point = 617
   Insn 561: point = 618
   Insn 560: point = 620
   Insn 559: point = 622
   Insn 558: point = 623
   Insn 557: point = 625
   Insn 556: point = 626
   Insn 555: point = 628
   Insn 554: point = 630
   Insn 553: point = 632
   Insn 552: point = 633
   Insn 551: point = 634
   Insn 550: point = 635
   Insn 549: point = 635
   Insn 548: point = 636
   Insn 547: point = 638
   Insn 546: point = 639
   Insn 545: point = 641
   Insn 544: point = 642
   Insn 543: point = 644
   Insn 542: point = 646
   Insn 541: point = 647
   Insn 540: point = 649
   Insn 539: point = 650
   Insn 538: point = 652
   Insn 537: point = 654
   Insn 536: point = 656
   Insn 535: point = 657
   Insn 534: point = 658
   Insn 533: point = 659
   Insn 532: point = 659
   Insn 531: point = 660
   Insn 530: point = 662
   Insn 529: point = 663
   Insn 528: point = 664
   Insn 527: point = 666
   Insn 526: point = 668
   Insn 525: point = 670
   Insn 524: point = 672
   Insn 523: point = 673
   Insn 522: point = 675
   Insn 521: point = 677
   Insn 520: point = 678
   Insn 519: point = 680
   Insn 518: point = 681
   Insn 517: point = 683
   Insn 516: point = 685
   Insn 515: point = 687
   Insn 514: point = 688
   Insn 513: point = 689
   Insn 512: point = 690
   Insn 511: point = 690
   Insn 510: point = 691
   Insn 509: point = 693
   Insn 508: point = 694
   Insn 507: point = 696
   Insn 506: point = 697
   Insn 505: point = 699
   Insn 504: point = 701
   Insn 503: point = 702
   Insn 502: point = 704
   Insn 501: point = 705
   Insn 500: point = 707
   Insn 499: point = 709
   Insn 498: point = 711
   Insn 497: point = 712
   Insn 496: point = 713
   Insn 495: point = 714
   Insn 494: point = 714
   Insn 493: point = 715
   Insn 492: point = 717
   Insn 491: point = 718
   Insn 490: point = 719
   Insn 489: point = 721
   Insn 488: point = 723
   Insn 487: point = 725
   Insn 486: point = 727
   Insn 485: point = 728
   Insn 484: point = 730
   Insn 483: point = 732
   Insn 482: point = 733
   Insn 481: point = 735
   Insn 480: point = 736
   Insn 479: point = 738
   Insn 478: point = 740
   Insn 477: point = 742
   Insn 476: point = 743
   Insn 475: point = 744
   Insn 474: point = 745
   Insn 473: point = 745
   Insn 472: point = 746
   Insn 471: point = 748
   Insn 470: point = 749
   Insn 469: point = 751
   Insn 468: point = 752
   Insn 467: point = 754
   Insn 466: point = 756
   Insn 465: point = 757
   Insn 464: point = 759
   Insn 463: point = 760
   Insn 462: point = 762
   Insn 461: point = 764
   Insn 460: point = 766
   Insn 459: point = 767
   Insn 458: point = 768
   Insn 457: point = 769
   Insn 456: point = 769
   Insn 455: point = 770
   Insn 454: point = 772
   Insn 453: point = 773
   Insn 452: point = 774
   Insn 451: point = 776
   Insn 450: point = 777
   Insn 449: point = 779
   Insn 448: point = 781
   Insn 447: point = 782
   Insn 446: point = 784
   Insn 445: point = 786
   Insn 444: point = 787
   Insn 443: point = 789
   Insn 442: point = 790
   Insn 441: point = 792
   Insn 440: point = 794
   Insn 439: point = 796
   Insn 438: point = 797
   Insn 437: point = 798
   Insn 436: point = 799
   Insn 435: point = 799
   Insn 434: point = 800
   Insn 433: point = 802
   Insn 432: point = 803
   Insn 431: point = 805
   Insn 430: point = 807
   Insn 429: point = 808
   Insn 428: point = 810
   Insn 427: point = 811
   Insn 426: point = 813
   Insn 425: point = 815
   Insn 424: point = 817
   Insn 423: point = 818
   Insn 422: point = 819
   Insn 421: point = 820
   Insn 420: point = 820
   Insn 419: point = 821
   Insn 418: point = 823
  BB 36
   Insn 405: point = 824
  BB 34
   Insn 397: point = 824
  BB 32
   Insn 389: point = 824
  BB 21
   Insn 260: point = 824
   Insn 259: point = 824
   Insn 258: point = 825
   Insn 257: point = 827
   Insn 256: point = 829
  BB 31
   Insn 1144: point = 830
   Insn 383: point = 830
  BB 23
   Insn 277: point = 830
   Insn 276: point = 830
   Insn 275: point = 831
   Insn 274: point = 833
   Insn 273: point = 835
  BB 30
   Insn 1142: point = 836
   Insn 377: point = 836
  BB 28
   Insn 1140: point = 836
   Insn 365: point = 836
   Insn 364: point = 836
   Insn 363: point = 837
   Insn 362: point = 838
   Insn 361: point = 838
   Insn 360: point = 839
   Insn 359: point = 841
   Insn 358: point = 843
   Insn 357: point = 844
   Insn 356: point = 846
   Insn 355: point = 847
   Insn 354: point = 849
   Insn 353: point = 851
   Insn 352: point = 853
   Insn 351: point = 854
   Insn 350: point = 855
   Insn 349: point = 856
   Insn 348: point = 856
   Insn 347: point = 857
   Insn 346: point = 859
   Insn 345: point = 860
   Insn 344: point = 862
   Insn 343: point = 864
   Insn 342: point = 866
   Insn 341: point = 868
   Insn 340: point = 869
   Insn 339: point = 871
   Insn 338: point = 873
   Insn 337: point = 874
   Insn 336: point = 876
  BB 27
   Insn 334: point = 877
   Insn 333: point = 877
   Insn 332: point = 878
   Insn 331: point = 880
   Insn 330: point = 882
  BB 26
   Insn 1138: point = 883
   Insn 325: point = 883
   Insn 324: point = 883
   Insn 323: point = 884
   Insn 322: point = 885
   Insn 321: point = 885
   Insn 320: point = 886
   Insn 319: point = 888
   Insn 318: point = 890
   Insn 317: point = 891
   Insn 316: point = 893
   Insn 315: point = 894
   Insn 314: point = 896
   Insn 313: point = 898
   Insn 312: point = 900
   Insn 311: point = 901
   Insn 310: point = 902
   Insn 309: point = 903
   Insn 308: point = 903
   Insn 307: point = 904
   Insn 306: point = 906
   Insn 305: point = 907
   Insn 304: point = 909
   Insn 303: point = 911
   Insn 302: point = 913
   Insn 301: point = 915
   Insn 300: point = 916
   Insn 299: point = 918
   Insn 298: point = 920
   Insn 297: point = 921
   Insn 296: point = 923
  BB 25
   Insn 293: point = 924
   Insn 292: point = 924
   Insn 291: point = 925
   Insn 290: point = 927
   Insn 289: point = 929
   Insn 288: point = 931
   Insn 287: point = 932
   Insn 286: point = 934
   Insn 285: point = 936
  BB 24
   Insn 283: point = 937
   Insn 282: point = 937
   Insn 281: point = 938
   Insn 280: point = 940
   Insn 279: point = 942
  BB 22
   Insn 271: point = 943
   Insn 270: point = 943
   Insn 269: point = 943
   Insn 268: point = 944
   Insn 267: point = 944
   Insn 266: point = 944
   Insn 265: point = 945
   Insn 264: point = 947
   Insn 263: point = 948
   Insn 262: point = 950
  BB 20
   Insn 254: point = 951
  BB 10
   Insn 115: point = 951
   Insn 114: point = 951
   Insn 113: point = 952
   Insn 112: point = 954
   Insn 111: point = 956
  BB 19
   Insn 1136: point = 957
   Insn 248: point = 957
  BB 12
   Insn 123: point = 957
   Insn 122: point = 957
   Insn 121: point = 958
   Insn 120: point = 960
   Insn 119: point = 962
  BB 18
   Insn 1134: point = 963
   Insn 242: point = 963
  BB 15
   Insn 1132: point = 963
   Insn 185: point = 963
   Insn 184: point = 964
   Insn 183: point = 966
   Insn 182: point = 967
   Insn 181: point = 969
   Insn 180: point = 970
   Insn 179: point = 970
   Insn 178: point = 971
   Insn 177: point = 973
   Insn 176: point = 975
   Insn 175: point = 976
   Insn 174: point = 978
   Insn 173: point = 979
   Insn 172: point = 981
   Insn 171: point = 983
   Insn 170: point = 985
   Insn 169: point = 986
   Insn 168: point = 987
   Insn 167: point = 988
   Insn 166: point = 988
   Insn 165: point = 989
   Insn 164: point = 991
   Insn 163: point = 992
   Insn 162: point = 993
   Insn 161: point = 995
   Insn 160: point = 996
   Insn 159: point = 998
   Insn 158: point = 999
   Insn 157: point = 999
   Insn 156: point = 1000
   Insn 155: point = 1002
   Insn 154: point = 1004
   Insn 153: point = 1005
   Insn 152: point = 1007
   Insn 151: point = 1008
   Insn 150: point = 1010
   Insn 149: point = 1012
   Insn 148: point = 1014
   Insn 147: point = 1015
   Insn 146: point = 1016
   Insn 145: point = 1017
   Insn 144: point = 1017
   Insn 143: point = 1018
   Insn 142: point = 1020
  BB 17
   Insn 239: point = 1021
   Insn 238: point = 1022
   Insn 237: point = 1024
   Insn 236: point = 1025
   Insn 235: point = 1027
   Insn 234: point = 1028
   Insn 233: point = 1028
   Insn 232: point = 1029
   Insn 231: point = 1031
   Insn 230: point = 1033
   Insn 229: point = 1034
   Insn 228: point = 1036
   Insn 227: point = 1037
   Insn 226: point = 1039
   Insn 225: point = 1041
   Insn 224: point = 1043
   Insn 223: point = 1044
   Insn 222: point = 1045
   Insn 221: point = 1046
   Insn 220: point = 1046
   Insn 219: point = 1047
   Insn 218: point = 1049
   Insn 217: point = 1050
   Insn 216: point = 1051
   Insn 215: point = 1053
   Insn 214: point = 1054
   Insn 213: point = 1056
   Insn 212: point = 1057
   Insn 211: point = 1057
   Insn 210: point = 1058
   Insn 209: point = 1060
   Insn 208: point = 1062
   Insn 207: point = 1063
   Insn 206: point = 1065
   Insn 205: point = 1066
   Insn 204: point = 1068
   Insn 203: point = 1070
   Insn 202: point = 1072
   Insn 201: point = 1073
   Insn 200: point = 1074
   Insn 199: point = 1075
   Insn 198: point = 1075
   Insn 197: point = 1076
   Insn 196: point = 1078
  BB 16
   Insn 194: point = 1079
   Insn 193: point = 1079
   Insn 192: point = 1080
   Insn 191: point = 1082
   Insn 190: point = 1084
  BB 14
   Insn 139: point = 1085
   Insn 138: point = 1085
   Insn 137: point = 1086
   Insn 136: point = 1088
   Insn 135: point = 1090
   Insn 134: point = 1092
   Insn 133: point = 1093
   Insn 132: point = 1095
   Insn 131: point = 1097
  BB 13
   Insn 129: point = 1098
   Insn 128: point = 1098
   Insn 127: point = 1099
   Insn 126: point = 1101
   Insn 125: point = 1103
  BB 11
   Insn 117: point = 1104
  BB 9
   Insn 109: point = 1104
   Insn 108: point = 1104
   Insn 107: point = 1105
   Insn 106: point = 1107
   Insn 105: point = 1109
  BB 7
   Insn 96: point = 1110
   Insn 95: point = 1110
   Insn 94: point = 1111
   Insn 93: point = 1112
   Insn 92: point = 1113
   Insn 91: point = 1114
   Insn 90: point = 1114
   Insn 89: point = 1115
   Insn 88: point = 1115
   Insn 87: point = 1115
   Insn 86: point = 1116
   Insn 85: point = 1118
   Insn 84: point = 1119
   Insn 83: point = 1121
   Insn 82: point = 1123
   Insn 81: point = 1124
   Insn 80: point = 1126
   Insn 79: point = 1128
  BB 5
   Insn 70: point = 1129
   Insn 69: point = 1129
   Insn 68: point = 1130
   Insn 67: point = 1132
   Insn 66: point = 1133
   Insn 65: point = 1135
   Insn 64: point = 1137
   Insn 63: point = 1138
   Insn 62: point = 1139
   Insn 61: point = 1140
   Insn 60: point = 1140
   Insn 59: point = 1141
   Insn 58: point = 1141
   Insn 57: point = 1143
   Insn 1184: point = 1144
	Hard reg 1 is preferable by r708 with profit 1
   Insn 56: point = 1146
   Insn 1183: point = 1146
	Hard reg 1 is preferable by r708 with profit 1
	Hard reg 0 is preferable by r708 with profit 1
   Insn 55: point = 1148
   Insn 54: point = 1150
   Insn 53: point = 1151
   Insn 52: point = 1153
   Insn 51: point = 1154
   Insn 50: point = 1156
   Insn 49: point = 1158
  BB 4
   Insn 47: point = 1159
   Insn 46: point = 1159
   Insn 45: point = 1160
   Insn 44: point = 1162
   Insn 43: point = 1164
   Insn 42: point = 1165
   Insn 41: point = 1167
   Insn 40: point = 1169
   Insn 39: point = 1171
   Insn 38: point = 1172
   Insn 37: point = 1172
   Insn 36: point = 1173
   Insn 35: point = 1175
  BB 2
   Insn 27: point = 1176
   Insn 26: point = 1176
   Insn 25: point = 1176
   Insn 24: point = 1176
   Insn 21: point = 1176
   Insn 19: point = 1178
   Insn 18: point = 1179
   Insn 17: point = 1180
   Insn 16: point = 1181
   Insn 15: point = 1182
   Insn 14: point = 1183
   Insn 13: point = 1184
   Insn 12: point = 1185
   Insn 11: point = 1186
   Insn 10: point = 1187
   Insn 9: point = 1188
   Insn 8: point = 1189
   Insn 7: point = 1190
   Insn 6: point = 1190
   Insn 5: point = 1190
   Insn 4: point = 1190
   Insn 3: point = 1190
   Insn 2: point = 1190
 r87: [15..16]
 r88: [13..14]
 r89: [1171..1173]
 r90: [1163..1165]
 r91: [1161..1162]
 r92: [1159..1160]
 r93: [1155..1156]
 r94: [1152..1154]
 r95: [1138..1151]
 r96: [1140..1141]
 r97: [1138..1139]
 r98: [1134..1135]
 r99: [1131..1133]
 r100: [1129..1130]
 r101: [1125..1126]
 r102: [1122..1124]
 r103: [1120..1121]
 r104: [1115..1119]
 r105: [1114..1116]
 r106: [1112..1113]
 r107: [1110..1111]
 r108: [1106..1107]
 r109: [953..954]
 r110: [951..952]
 r111: [959..960]
 r112: [957..958]
 r113: [1100..1101]
 r114: [1098..1099]
 r115: [1094..1095]
 r116: [1091..1093]
 r117: [1089..1090]
 r118: [1087..1088]
 r119: [1085..1086]
 r120: [1081..1082]
 r121: [1079..1080]
 r122: [1074..1076]
 r123: [1064..1066]
 r124: [1050..1063]
 r125: [1059..1060]
 r126: [1057..1058]
 r127: [1050..1054]
 r128: [1045..1047]
 r129: [1035..1037]
 r130: [1021..1034]
 r131: [1030..1031]
 r132: [1028..1029]
 r133: [1021..1025]
 r134: [1016..1018]
 r135: [1006..1008]
 r136: [992..1005]
 r137: [1001..1002]
 r138: [999..1000]
 r139: [992..996]
 r140: [987..989]
 r141: [977..979]
 r142: [963..976]
 r143: [972..973]
 r144: [970..971]
 r145: [963..967]
 r146: [826..827]
 r147: [824..825]
 r148: [944..948]
 r149: [943..945]
 r150: [832..833]
 r151: [830..831]
 r152: [939..940]
 r153: [937..938]
 r154: [933..934]
 r155: [930..932]
 r156: [928..929]
 r157: [926..927]
 r158: [924..925]
 r159: [879..880]
 r160: [877..878]
 r161: [838..874]
 r162: [870..871]
 r163: [863..869]
 r164: [865..866]
 r165: [863..864]
 r166: [861..862]
 r167: [837..860]
 r168: [855..857]
 r169: [845..847]
 r170: [840..844]
 r171: [836..839]
 r172: [885..921]
 r173: [917..918]
 r174: [910..916]
 r175: [912..913]
 r176: [910..911]
 r177: [908..909]
 r178: [884..907]
 r179: [902..904]
 r180: [892..894]
 r181: [887..891]
 r182: [883..886]
 r183: [583..584]
 r184: [581..582]
 r185: [589..590]
 r186: [587..588]
 r187: [604..605]
 r188: [602..603]
 r189: [600..601]
 r190: [597..599]
 r191: [597..598]
 r192: [595..596]
 r193: [593..594]
 r194: [819..821]
 r195: [809..811]
 r196: [804..808]
 r197: [773..803]
 r198: [798..800]
 r199: [788..790]
 r200: [783..787]
 r201: [778..782]
 r202: [773..777]
 r203: [768..770]
 r204: [758..760]
 r205: [753..757]
 r206: [718..752]
 r207: [720..749]
 r208: [744..746]
 r209: [734..736]
 r210: [729..733]
 r211: [722..728]
 r212: [724..725]
 r213: [718..721]
 r214: [713..715]
 r215: [703..705]
 r216: [698..702]
 r217: [663..697]
 r218: [665..694]
 r219: [689..691]
 r220: [679..681]
 r221: [674..678]
 r222: [667..673]
 r223: [669..670]
 r224: [663..666]
 r225: [658..660]
 r226: [648..650]
 r227: [643..647]
 r228: [608..642]
 r229: [610..639]
 r230: [634..636]
 r231: [624..626]
 r232: [619..623]
 r233: [612..618]
 r234: [614..615]
 r235: [608..611]
 r236: [517..518]
 r237: [515..516]
 r238: [523..524]
 r239: [521..522]
 r240: [577..578]
 r241: [574..576]
 r242: [572..573]
 r243: [554..571]
 r244: [550..551]
 r245: [547..549]
 r246: [545..546]
 r247: [527..544]
 r248: [489..490]
 r249: [511..512]
 r250: [508..510]
 r251: [506..507]
 r252: [504..505]
 r253: [500..501]
 r254: [497..499]
 r255: [495..496]
 r256: [480..482]
 r257: [449..450]
 r258: [453..454]
 r259: [476..477]
 r260: [471..473]
 r261: [457..470]
 r262: [466..467]
 r263: [464..465]
 r264: [457..461]
 r265: [411..412]
 r266: [415..416]
 r267: [421..422]
 r268: [419..420]
 r269: [445..446]
 r270: [440..442]
 r271: [435..439]
 r272: [428..434]
 r273: [430..431]
 r274: [428..429]
 r275: [425..427]
 r276: [236..237]
 r277: [234..235]
 r278: [242..243]
 r279: [240..241]
 r280: [248..249]
 r281: [246..247]
 r282: [391..393]
 r283: [389..390]
 r284: [387..388]
 r285: [382..384]
 r286: [357..381]
 r287: [361..363]
 r288: [359..360]
 r289: [350..356]
 r290: [352..353]
 r291: [350..351]
 r292: [252..349]
 r293: [329..331]
 r294: [327..328]
 r295: [325..326]
 r296: [320..322]
 r297: [295..319]
 r298: [299..301]
 r299: [297..298]
 r300: [288..294]
 r301: [290..291]
 r302: [288..289]
 r303: [286..287]
 r304: [254..285]
 r305: [280..282]
 r306: [270..272]
 r307: [265..269]
 r308: [258..264]
 r309: [260..261]
 r310: [258..259]
 r311: [256..257]
 r312: [254..255]
 r313: [252..253]
 r314: [19..20]
 r315: [23..24]
 r316: [38..39]
 r317: [36..37]
 r318: [34..35]
 r319: [31..33]
 r320: [31..32]
 r321: [29..30]
 r322: [27..28]
 r323: [229..231]
 r324: [219..221]
 r325: [214..218]
 r326: [189..213]
 r327: [209..210]
 r328: [204..206]
 r329: [199..203]
 r330: [194..198]
 r331: [189..193]
 r332: [184..186]
 r333: [174..176]
 r334: [169..173]
 r335: [140..168]
 r336: [142..165]
 r337: [161..162]
 r338: [156..158]
 r339: [151..155]
 r340: [144..150]
 r341: [146..147]
 r342: [140..143]
 r343: [135..137]
 r344: [125..127]
 r345: [120..124]
 r346: [91..119]
 r347: [93..116]
 r348: [112..113]
 r349: [107..109]
 r350: [102..106]
 r351: [95..101]
 r352: [97..98]
 r353: [91..94]
 r354: [86..88]
 r355: [76..78]
 r356: [71..75]
 r357: [42..70]
 r358: [44..67]
 r359: [63..64]
 r360: [58..60]
 r361: [53..57]
 r362: [46..52]
 r363: [48..49]
 r364: [42..45]
 r365: [9..10]
 r366: [5..6]
 r367: [3..4]
 r368: [1..2]
 r369: [1188..1189]
 r370: [1186..1187]
 r371: [1184..1185]
 r372: [1182..1183]
 r373: [1180..1181]
 r374: [1178..1179]
 r375: [17..18]
 r376: [1174..1175]
 r377: [1170..1172] [1166..1167]
 r378: [1168..1169]
 r379: [1163..1164]
 r380: [1157..1158]
 r381: [1152..1153]
 r382: [1147..1148]
 r383: [1149..1150]
 r384: [1142..1144]
 r385: [1142..1143]
 r386: [1136..1137]
 r387: [1131..1132]
 r388: [1127..1128]
 r389: [1122..1123]
 r390: [1117..1118]
 r391: [1108..1109]
 r392: [1104..1105]
 r393: [955..956]
 r394: [961..962]
 r395: [1102..1103]
 r396: [1096..1097]
 r397: [1091..1092]
 r398: [1019..1020]
 r399: [1013..1017] [1009..1010]
 r400: [1014..1015]
 r401: [1011..1012]
 r402: [1006..1007]
 r403: [1003..1004]
 r404: [997..998]
 r405: [992..993]
 r406: [994..995]
 r407: [990..991]
 r408: [984..988] [980..981]
 r409: [985..986]
 r410: [982..983]
 r411: [977..978]
 r412: [974..975]
 r413: [968..969]
 r414: [963..964]
 r415: [965..966]
 r416: [1083..1084]
 r417: [1077..1078]
 r418: [1071..1075] [1067..1068]
 r419: [1072..1073]
 r420: [1069..1070]
 r421: [1064..1065]
 r422: [1061..1062]
 r423: [1055..1056]
 r424: [1050..1051]
 r425: [1052..1053]
 r426: [1048..1049]
 r427: [1042..1046] [1038..1039]
 r428: [1043..1044]
 r429: [1040..1041]
 r430: [1035..1036]
 r431: [1032..1033]
 r432: [1026..1027]
 r433: [1021..1022]
 r434: [1023..1024]
 r435: [828..829]
 r436: [949..950]
 r437: [946..947]
 r438: [834..835]
 r439: [941..942]
 r440: [935..936]
 r441: [930..931]
 r442: [922..923]
 r443: [919..920]
 r444: [914..915]
 r445: [905..906]
 r446: [899..903] [895..896]
 r447: [900..901]
 r448: [897..898]
 r449: [892..893]
 r450: [887..888]
 r451: [889..890]
 r452: [881..882]
 r453: [875..876]
 r454: [872..873]
 r455: [867..868]
 r456: [858..859]
 r457: [852..856] [848..849]
 r458: [853..854]
 r459: [850..851]
 r460: [845..846]
 r461: [840..841]
 r462: [842..843]
 r463: [585..586]
 r464: [591..592]
 r465: [606..607]
 r466: [822..823]
 r467: [816..820] [812..813]
 r468: [817..818]
 r469: [814..815]
 r470: [809..810]
 r471: [804..805]
 r472: [806..807]
 r473: [801..802]
 r474: [795..799] [791..792]
 r475: [796..797]
 r476: [793..794]
 r477: [788..789]
 r478: [783..784]
 r479: [785..786]
 r480: [778..779]
 r481: [780..781]
 r482: [773..774]
 r483: [775..776]
 r484: [771..772]
 r485: [765..769] [761..762]
 r486: [766..767]
 r487: [763..764]
 r488: [758..759]
 r489: [753..754]
 r490: [755..756]
 r491: [750..751]
 r492: [747..748]
 r493: [741..745] [737..738]
 r494: [742..743]
 r495: [739..740]
 r496: [734..735]
 r497: [729..730]
 r498: [731..732]
 r499: [726..727]
 r500: [722..723]
 r501: [718..719]
 r502: [716..717]
 r503: [710..714] [706..707]
 r504: [711..712]
 r505: [708..709]
 r506: [703..704]
 r507: [698..699]
 r508: [700..701]
 r509: [695..696]
 r510: [692..693]
 r511: [686..690] [682..683]
 r512: [687..688]
 r513: [684..685]
 r514: [679..680]
 r515: [674..675]
 r516: [676..677]
 r517: [671..672]
 r518: [667..668]
 r519: [663..664]
 r520: [661..662]
 r521: [655..659] [651..652]
 r522: [656..657]
 r523: [653..654]
 r524: [648..649]
 r525: [643..644]
 r526: [645..646]
 r527: [640..641]
 r528: [637..638]
 r529: [631..635] [627..628]
 r530: [632..633]
 r531: [629..630]
 r532: [624..625]
 r533: [619..620]
 r534: [621..622]
 r535: [616..617]
 r536: [612..613]
 r537: [608..609]
 r538: [519..520]
 r539: [525..526]
 r540: [579..580]
 r541: [574..575]
 r542: [556..568]
 r543: [569..570]
 r544: [563..565]
 r545: [566..567]
 r546: [560..564] [556..557]
 r547: [561..562]
 r548: [558..559]
 r549: [554..555]
 r550: [552..553]
 r551: [547..548]
 r552: [529..541]
 r553: [542..543]
 r554: [536..538]
 r555: [539..540]
 r556: [533..537] [529..530]
 r557: [534..535]
 r558: [531..532]
 r559: [527..528]
 r560: [491..492]
 r561: [513..514]
 r562: [508..509]
 r563: [502..503]
 r564: [497..498]
 r565: [493..494]
 r566: [485..486]
 r567: [487..488]
 r568: [483..484]
 r569: [480..481]
 r570: [451..452]
 r571: [455..456]
 r572: [478..479]
 r573: [471..472]
 r574: [468..469]
 r575: [462..463]
 r576: [457..458]
 r577: [459..460]
 r578: [413..414]
 r579: [417..418]
 r580: [423..424]
 r581: [447..448]
 r582: [440..441]
 r583: [435..436]
 r584: [437..438]
 r585: [432..433]
 r586: [425..426]
 r587: [238..239]
 r588: [244..245]
 r589: [250..251]
 r590: [396..408]
 r591: [409..410]
 r592: [403..405]
 r593: [406..407]
 r594: [400..404] [396..397]
 r595: [401..402]
 r596: [398..399]
 r597: [394..395]
 r598: [391..392]
 r599: [382..383]
 r600: [366..378]
 r601: [379..380]
 r602: [373..375]
 r603: [376..377]
 r604: [370..374] [366..367]
 r605: [371..372]
 r606: [368..369]
 r607: [364..365]
 r608: [361..362]
 r609: [357..358]
 r610: [354..355]
 r611: [334..346]
 r612: [347..348]
 r613: [341..343]
 r614: [344..345]
 r615: [338..342] [334..335]
 r616: [339..340]
 r617: [336..337]
 r618: [332..333]
 r619: [329..330]
 r620: [320..321]
 r621: [304..316]
 r622: [317..318]
 r623: [311..313]
 r624: [314..315]
 r625: [308..312] [304..305]
 r626: [309..310]
 r627: [306..307]
 r628: [302..303]
 r629: [299..300]
 r630: [295..296]
 r631: [292..293]
 r632: [283..284]
 r633: [277..281] [273..274]
 r634: [278..279]
 r635: [275..276]
 r636: [270..271]
 r637: [265..266]
 r638: [267..268]
 r639: [262..263]
 r640: [21..22]
 r641: [25..26]
 r642: [40..41]
 r643: [232..233]
 r644: [226..230] [222..223]
 r645: [227..228]
 r646: [224..225]
 r647: [219..220]
 r648: [214..215]
 r649: [216..217]
 r650: [211..212]
 r651: [204..205]
 r652: [199..200]
 r653: [201..202]
 r654: [194..195]
 r655: [196..197]
 r656: [189..190]
 r657: [191..192]
 r658: [187..188]
 r659: [181..185] [177..178]
 r660: [182..183]
 r661: [179..180]
 r662: [174..175]
 r663: [169..170]
 r664: [171..172]
 r665: [166..167]
 r666: [163..164]
 r667: [156..157]
 r668: [151..152]
 r669: [153..154]
 r670: [148..149]
 r671: [144..145]
 r672: [140..141]
 r673: [138..139]
 r674: [132..136] [128..129]
 r675: [133..134]
 r676: [130..131]
 r677: [125..126]
 r678: [120..121]
 r679: [122..123]
 r680: [117..118]
 r681: [114..115]
 r682: [107..108]
 r683: [102..103]
 r684: [104..105]
 r685: [99..100]
 r686: [95..96]
 r687: [91..92]
 r688: [89..90]
 r689: [83..87] [79..80]
 r690: [84..85]
 r691: [81..82]
 r692: [76..77]
 r693: [71..72]
 r694: [73..74]
 r695: [68..69]
 r696: [65..66]
 r697: [58..59]
 r698: [53..54]
 r699: [55..56]
 r700: [50..51]
 r701: [46..47]
 r702: [42..43]
 r703: [11..12]
 r704: [7..8]
 r706: [1176..1177]
 r707: [0..0]
 r708: [1145..1146]
 r709: [474..475]
 r710: [443..444]
 r711: [385..386]
 r712: [323..324]
 r713: [207..208]
 r714: [159..160]
 r715: [110..111]
 r716: [61..62]
Compressing live ranges: from 1190 to 1007 - 84%
Ranges after the compression:
 r87: [15..16]
 r88: [13..14]
 r89: [989..990]
 r90: [983..984]
 r91: [981..982]
 r92: [979..980]
 r93: [975..976]
 r94: [973..974]
 r95: [961..972]
 r96: [963..964]
 r97: [961..962]
 r98: [957..958]
 r99: [955..956]
 r100: [953..954]
 r101: [949..950]
 r102: [947..948]
 r103: [945..946]
 r104: [941..944]
 r105: [941..942]
 r106: [939..940]
 r107: [937..938]
 r108: [933..934]
 r109: [801..802]
 r110: [799..800]
 r111: [807..808]
 r112: [805..806]
 r113: [927..928]
 r114: [925..926]
 r115: [921..922]
 r116: [919..920]
 r117: [917..918]
 r118: [915..916]
 r119: [913..914]
 r120: [909..910]
 r121: [907..908]
 r122: [903..904]
 r123: [895..896]
 r124: [883..894]
 r125: [891..892]
 r126: [889..890]
 r127: [883..886]
 r128: [879..880]
 r129: [871..872]
 r130: [859..870]
 r131: [867..868]
 r132: [865..866]
 r133: [859..862]
 r134: [855..856]
 r135: [847..848]
 r136: [835..846]
 r137: [843..844]
 r138: [841..842]
 r139: [835..838]
 r140: [831..832]
 r141: [823..824]
 r142: [811..822]
 r143: [819..820]
 r144: [817..818]
 r145: [811..814]
 r146: [695..696]
 r147: [693..694]
 r148: [793..796]
 r149: [793..794]
 r150: [701..702]
 r151: [699..700]
 r152: [789..790]
 r153: [787..788]
 r154: [783..784]
 r155: [781..782]
 r156: [779..780]
 r157: [777..778]
 r158: [775..776]
 r159: [739..740]
 r160: [737..738]
 r161: [705..734]
 r162: [731..732]
 r163: [725..730]
 r164: [727..728]
 r165: [725..726]
 r166: [723..724]
 r167: [705..722]
 r168: [719..720]
 r169: [711..712]
 r170: [707..710]
 r171: [705..706]
 r172: [743..772]
 r173: [769..770]
 r174: [763..768]
 r175: [765..766]
 r176: [763..764]
 r177: [761..762]
 r178: [743..760]
 r179: [757..758]
 r180: [749..750]
 r181: [745..748]
 r182: [743..744]
 r183: [497..498]
 r184: [495..496]
 r185: [503..504]
 r186: [501..502]
 r187: [517..518]
 r188: [515..516]
 r189: [513..514]
 r190: [511..512]
 r191: [511..512]
 r192: [509..510]
 r193: [507..508]
 r194: [689..690]
 r195: [681..682]
 r196: [677..680]
 r197: [653..676]
 r198: [673..674]
 r199: [665..666]
 r200: [661..664]
 r201: [657..660]
 r202: [653..656]
 r203: [649..650]
 r204: [641..642]
 r205: [637..640]
 r206: [609..636]
 r207: [611..634]
 r208: [631..632]
 r209: [623..624]
 r210: [619..622]
 r211: [613..618]
 r212: [615..616]
 r213: [609..612]
 r214: [605..606]
 r215: [597..598]
 r216: [593..596]
 r217: [565..592]
 r218: [567..590]
 r219: [587..588]
 r220: [579..580]
 r221: [575..578]
 r222: [569..574]
 r223: [571..572]
 r224: [565..568]
 r225: [561..562]
 r226: [553..554]
 r227: [549..552]
 r228: [521..548]
 r229: [523..546]
 r230: [543..544]
 r231: [535..536]
 r232: [531..534]
 r233: [525..530]
 r234: [527..528]
 r235: [521..524]
 r236: [441..442]
 r237: [439..440]
 r238: [447..448]
 r239: [445..446]
 r240: [491..492]
 r241: [489..490]
 r242: [487..488]
 r243: [473..486]
 r244: [469..470]
 r245: [467..468]
 r246: [465..466]
 r247: [451..464]
 r248: [415..416]
 r249: [435..436]
 r250: [433..434]
 r251: [431..432]
 r252: [429..430]
 r253: [425..426]
 r254: [423..424]
 r255: [421..422]
 r256: [407..408]
 r257: [379..380]
 r258: [383..384]
 r259: [403..404]
 r260: [399..400]
 r261: [387..398]
 r262: [395..396]
 r263: [393..394]
 r264: [387..390]
 r265: [345..346]
 r266: [349..350]
 r267: [355..356]
 r268: [353..354]
 r269: [375..376]
 r270: [371..372]
 r271: [367..370]
 r272: [361..366]
 r273: [363..364]
 r274: [361..362]
 r275: [359..360]
 r276: [199..200]
 r277: [197..198]
 r278: [205..206]
 r279: [203..204]
 r280: [211..212]
 r281: [209..210]
 r282: [329..330]
 r283: [327..328]
 r284: [325..326]
 r285: [321..322]
 r286: [301..320]
 r287: [305..306]
 r288: [303..304]
 r289: [295..300]
 r290: [297..298]
 r291: [295..296]
 r292: [215..294]
 r293: [279..280]
 r294: [277..278]
 r295: [275..276]
 r296: [271..272]
 r297: [251..270]
 r298: [255..256]
 r299: [253..254]
 r300: [245..250]
 r301: [247..248]
 r302: [245..246]
 r303: [243..244]
 r304: [217..242]
 r305: [239..240]
 r306: [231..232]
 r307: [227..230]
 r308: [221..226]
 r309: [223..224]
 r310: [221..222]
 r311: [219..220]
 r312: [217..218]
 r313: [215..216]
 r314: [19..20]
 r315: [23..24]
 r316: [37..38]
 r317: [35..36]
 r318: [33..34]
 r319: [31..32]
 r320: [31..32]
 r321: [29..30]
 r322: [27..28]
 r323: [193..194]
 r324: [185..186]
 r325: [181..184]
 r326: [161..180]
 r327: [177..178]
 r328: [173..174]
 r329: [169..172]
 r330: [165..168]
 r331: [161..164]
 r332: [157..158]
 r333: [149..150]
 r334: [145..148]
 r335: [121..144]
 r336: [123..142]
 r337: [139..140]
 r338: [135..136]
 r339: [131..134]
 r340: [125..130]
 r341: [127..128]
 r342: [121..124]
 r343: [117..118]
 r344: [109..110]
 r345: [105..108]
 r346: [81..104]
 r347: [83..102]
 r348: [99..100]
 r349: [95..96]
 r350: [91..94]
 r351: [85..90]
 r352: [87..88]
 r353: [81..84]
 r354: [77..78]
 r355: [69..70]
 r356: [65..68]
 r357: [41..64]
 r358: [43..62]
 r359: [59..60]
 r360: [55..56]
 r361: [51..54]
 r362: [45..50]
 r363: [47..48]
 r364: [41..44]
 r365: [9..10]
 r366: [5..6]
 r367: [3..4]
 r368: [1..2]
 r369: [1005..1006]
 r370: [1003..1004]
 r371: [1001..1002]
 r372: [999..1000]
 r373: [997..998]
 r374: [995..996]
 r375: [17..18]
 r376: [991..992]
 r377: [989..990] [985..986]
 r378: [987..988]
 r379: [983..984]
 r380: [977..978]
 r381: [973..974]
 r382: [969..970]
 r383: [971..972]
 r384: [965..966]
 r385: [965..966]
 r386: [959..960]
 r387: [955..956]
 r388: [951..952]
 r389: [947..948]
 r390: [943..944]
 r391: [935..936]
 r392: [931..932]
 r393: [803..804]
 r394: [809..810]
 r395: [929..930]
 r396: [923..924]
 r397: [919..920]
 r398: [857..858]
 r399: [853..856] [849..850]
 r400: [853..854]
 r401: [851..852]
 r402: [847..848]
 r403: [845..846]
 r404: [839..840]
 r405: [835..836]
 r406: [837..838]
 r407: [833..834]
 r408: [829..832] [825..826]
 r409: [829..830]
 r410: [827..828]
 r411: [823..824]
 r412: [821..822]
 r413: [815..816]
 r414: [811..812]
 r415: [813..814]
 r416: [911..912]
 r417: [905..906]
 r418: [901..904] [897..898]
 r419: [901..902]
 r420: [899..900]
 r421: [895..896]
 r422: [893..894]
 r423: [887..888]
 r424: [883..884]
 r425: [885..886]
 r426: [881..882]
 r427: [877..880] [873..874]
 r428: [877..878]
 r429: [875..876]
 r430: [871..872]
 r431: [869..870]
 r432: [863..864]
 r433: [859..860]
 r434: [861..862]
 r435: [697..698]
 r436: [797..798]
 r437: [795..796]
 r438: [703..704]
 r439: [791..792]
 r440: [785..786]
 r441: [781..782]
 r442: [773..774]
 r443: [771..772]
 r444: [767..768]
 r445: [759..760]
 r446: [755..758] [751..752]
 r447: [755..756]
 r448: [753..754]
 r449: [749..750]
 r450: [745..746]
 r451: [747..748]
 r452: [741..742]
 r453: [735..736]
 r454: [733..734]
 r455: [729..730]
 r456: [721..722]
 r457: [717..720] [713..714]
 r458: [717..718]
 r459: [715..716]
 r460: [711..712]
 r461: [707..708]
 r462: [709..710]
 r463: [499..500]
 r464: [505..506]
 r465: [519..520]
 r466: [691..692]
 r467: [687..690] [683..684]
 r468: [687..688]
 r469: [685..686]
 r470: [681..682]
 r471: [677..678]
 r472: [679..680]
 r473: [675..676]
 r474: [671..674] [667..668]
 r475: [671..672]
 r476: [669..670]
 r477: [665..666]
 r478: [661..662]
 r479: [663..664]
 r480: [657..658]
 r481: [659..660]
 r482: [653..654]
 r483: [655..656]
 r484: [651..652]
 r485: [647..650] [643..644]
 r486: [647..648]
 r487: [645..646]
 r488: [641..642]
 r489: [637..638]
 r490: [639..640]
 r491: [635..636]
 r492: [633..634]
 r493: [629..632] [625..626]
 r494: [629..630]
 r495: [627..628]
 r496: [623..624]
 r497: [619..620]
 r498: [621..622]
 r499: [617..618]
 r500: [613..614]
 r501: [609..610]
 r502: [607..608]
 r503: [603..606] [599..600]
 r504: [603..604]
 r505: [601..602]
 r506: [597..598]
 r507: [593..594]
 r508: [595..596]
 r509: [591..592]
 r510: [589..590]
 r511: [585..588] [581..582]
 r512: [585..586]
 r513: [583..584]
 r514: [579..580]
 r515: [575..576]
 r516: [577..578]
 r517: [573..574]
 r518: [569..570]
 r519: [565..566]
 r520: [563..564]
 r521: [559..562] [555..556]
 r522: [559..560]
 r523: [557..558]
 r524: [553..554]
 r525: [549..550]
 r526: [551..552]
 r527: [547..548]
 r528: [545..546]
 r529: [541..544] [537..538]
 r530: [541..542]
 r531: [539..540]
 r532: [535..536]
 r533: [531..532]
 r534: [533..534]
 r535: [529..530]
 r536: [525..526]
 r537: [521..522]
 r538: [443..444]
 r539: [449..450]
 r540: [493..494]
 r541: [489..490]
 r542: [475..484]
 r543: [485..486]
 r544: [481..482]
 r545: [483..484]
 r546: [479..482] [475..476]
 r547: [479..480]
 r548: [477..478]
 r549: [473..474]
 r550: [471..472]
 r551: [467..468]
 r552: [453..462]
 r553: [463..464]
 r554: [459..460]
 r555: [461..462]
 r556: [457..460] [453..454]
 r557: [457..458]
 r558: [455..456]
 r559: [451..452]
 r560: [417..418]
 r561: [437..438]
 r562: [433..434]
 r563: [427..428]
 r564: [423..424]
 r565: [419..420]
 r566: [411..412]
 r567: [413..414]
 r568: [409..410]
 r569: [407..408]
 r570: [381..382]
 r571: [385..386]
 r572: [405..406]
 r573: [399..400]
 r574: [397..398]
 r575: [391..392]
 r576: [387..388]
 r577: [389..390]
 r578: [347..348]
 r579: [351..352]
 r580: [357..358]
 r581: [377..378]
 r582: [371..372]
 r583: [367..368]
 r584: [369..370]
 r585: [365..366]
 r586: [359..360]
 r587: [201..202]
 r588: [207..208]
 r589: [213..214]
 r590: [333..342]
 r591: [343..344]
 r592: [339..340]
 r593: [341..342]
 r594: [337..340] [333..334]
 r595: [337..338]
 r596: [335..336]
 r597: [331..332]
 r598: [329..330]
 r599: [321..322]
 r600: [309..318]
 r601: [319..320]
 r602: [315..316]
 r603: [317..318]
 r604: [313..316] [309..310]
 r605: [313..314]
 r606: [311..312]
 r607: [307..308]
 r608: [305..306]
 r609: [301..302]
 r610: [299..300]
 r611: [283..292]
 r612: [293..294]
 r613: [289..290]
 r614: [291..292]
 r615: [287..290] [283..284]
 r616: [287..288]
 r617: [285..286]
 r618: [281..282]
 r619: [279..280]
 r620: [271..272]
 r621: [259..268]
 r622: [269..270]
 r623: [265..266]
 r624: [267..268]
 r625: [263..266] [259..260]
 r626: [263..264]
 r627: [261..262]
 r628: [257..258]
 r629: [255..256]
 r630: [251..252]
 r631: [249..250]
 r632: [241..242]
 r633: [237..240] [233..234]
 r634: [237..238]
 r635: [235..236]
 r636: [231..232]
 r637: [227..228]
 r638: [229..230]
 r639: [225..226]
 r640: [21..22]
 r641: [25..26]
 r642: [39..40]
 r643: [195..196]
 r644: [191..194] [187..188]
 r645: [191..192]
 r646: [189..190]
 r647: [185..186]
 r648: [181..182]
 r649: [183..184]
 r650: [179..180]
 r651: [173..174]
 r652: [169..170]
 r653: [171..172]
 r654: [165..166]
 r655: [167..168]
 r656: [161..162]
 r657: [163..164]
 r658: [159..160]
 r659: [155..158] [151..152]
 r660: [155..156]
 r661: [153..154]
 r662: [149..150]
 r663: [145..146]
 r664: [147..148]
 r665: [143..144]
 r666: [141..142]
 r667: [135..136]
 r668: [131..132]
 r669: [133..134]
 r670: [129..130]
 r671: [125..126]
 r672: [121..122]
 r673: [119..120]
 r674: [115..118] [111..112]
 r675: [115..116]
 r676: [113..114]
 r677: [109..110]
 r678: [105..106]
 r679: [107..108]
 r680: [103..104]
 r681: [101..102]
 r682: [95..96]
 r683: [91..92]
 r684: [93..94]
 r685: [89..90]
 r686: [85..86]
 r687: [81..82]
 r688: [79..80]
 r689: [75..78] [71..72]
 r690: [75..76]
 r691: [73..74]
 r692: [69..70]
 r693: [65..66]
 r694: [67..68]
 r695: [63..64]
 r696: [61..62]
 r697: [55..56]
 r698: [51..52]
 r699: [53..54]
 r700: [49..50]
 r701: [45..46]
 r702: [41..42]
 r703: [11..12]
 r704: [7..8]
 r706: [993..994]
 r707: [0..0]
 r708: [967..968]
 r709: [401..402]
 r710: [373..374]
 r711: [323..324]
 r712: [273..274]
 r713: [175..176]
 r714: [137..138]
 r715: [97..98]
 r716: [57..58]

********** Assignment #1: **********

	 Assigning to 708 (cl=GENERAL_REGS, orig=384, freq=3, tfirst=708, tfreq=3)...
	   Assign 0 to reload r708 (freq=3)
	 Assigning to 709 (cl=GENERAL_REGS, orig=260, freq=3, tfirst=709, tfreq=3)...
	   Assign 0 to reload r709 (freq=3)
	 Assigning to 710 (cl=GENERAL_REGS, orig=270, freq=3, tfirst=710, tfreq=3)...
	   Assign 0 to reload r710 (freq=3)
	 Assigning to 711 (cl=GENERAL_REGS, orig=285, freq=3, tfirst=711, tfreq=3)...
	   Assign 0 to reload r711 (freq=3)
	 Assigning to 712 (cl=GENERAL_REGS, orig=296, freq=3, tfirst=712, tfreq=3)...
	   Assign 0 to reload r712 (freq=3)
	 Assigning to 713 (cl=GENERAL_REGS, orig=328, freq=3, tfirst=713, tfreq=3)...
	   Assign 0 to reload r713 (freq=3)
	 Assigning to 714 (cl=GENERAL_REGS, orig=338, freq=3, tfirst=714, tfreq=3)...
	   Assign 0 to reload r714 (freq=3)
	 Assigning to 715 (cl=GENERAL_REGS, orig=349, freq=3, tfirst=715, tfreq=3)...
	   Assign 0 to reload r715 (freq=3)
	 Assigning to 716 (cl=GENERAL_REGS, orig=360, freq=3, tfirst=716, tfreq=3)...
	   Assign 0 to reload r716 (freq=3)
	 Assigning to 706 (cl=INDEX_REGS, orig=706, freq=1, tfirst=706, tfreq=1)...
	   Assign 0 to reload r706 (freq=1)
	 Assigning to 707 (cl=INDEX_REGS, orig=707, freq=1, tfirst=707, tfreq=1)...
	   Assign 3 to reload r707 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 39
changing reg in insn 37
changing reg in insn 39
changing reg in insn 42
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 53
changing reg in insn 53
changing reg in insn 63
changing reg in insn 58
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 87
changing reg in insn 86
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 106
changing reg in insn 107
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 197
changing reg in insn 200
changing reg in insn 198
changing reg in insn 200
changing reg in insn 205
changing reg in insn 207
changing reg in insn 207
changing reg in insn 207
changing reg in insn 217
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 214
changing reg in insn 217
changing reg in insn 219
changing reg in insn 222
changing reg in insn 220
changing reg in insn 222
changing reg in insn 227
changing reg in insn 229
changing reg in insn 229
changing reg in insn 229
changing reg in insn 239
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 236
changing reg in insn 239
changing reg in insn 143
changing reg in insn 146
changing reg in insn 144
changing reg in insn 146
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 153
changing reg in insn 163
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 160
changing reg in insn 163
changing reg in insn 165
changing reg in insn 168
changing reg in insn 166
changing reg in insn 168
changing reg in insn 173
changing reg in insn 175
changing reg in insn 175
changing reg in insn 175
changing reg in insn 185
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 182
changing reg in insn 185
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 259
changing reg in insn 263
changing reg in insn 266
changing reg in insn 265
changing reg in insn 269
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 289
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 331
changing reg in insn 332
changing reg in insn 332
changing reg in insn 333
changing reg in insn 337
changing reg in insn 361
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 363
changing reg in insn 347
changing reg in insn 350
changing reg in insn 348
changing reg in insn 350
changing reg in insn 355
changing reg in insn 357
changing reg in insn 357
changing reg in insn 357
changing reg in insn 360
changing reg in insn 360
changing reg in insn 364
changing reg in insn 297
changing reg in insn 321
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 323
changing reg in insn 307
changing reg in insn 310
changing reg in insn 308
changing reg in insn 310
changing reg in insn 315
changing reg in insn 317
changing reg in insn 317
changing reg in insn 317
changing reg in insn 320
changing reg in insn 320
changing reg in insn 324
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 400
changing reg in insn 401
changing reg in insn 401
changing reg in insn 402
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 412
changing reg in insn 413
changing reg in insn 414
changing reg in insn 414
changing reg in insn 415
changing reg in insn 419
changing reg in insn 422
changing reg in insn 420
changing reg in insn 422
changing reg in insn 427
changing reg in insn 429
changing reg in insn 429
changing reg in insn 429
changing reg in insn 432
changing reg in insn 432
changing reg in insn 453
changing reg in insn 434
changing reg in insn 437
changing reg in insn 435
changing reg in insn 437
changing reg in insn 442
changing reg in insn 444
changing reg in insn 444
changing reg in insn 444
changing reg in insn 447
changing reg in insn 447
changing reg in insn 450
changing reg in insn 450
changing reg in insn 453
changing reg in insn 455
changing reg in insn 458
changing reg in insn 456
changing reg in insn 458
changing reg in insn 463
changing reg in insn 465
changing reg in insn 465
changing reg in insn 465
changing reg in insn 468
changing reg in insn 468
changing reg in insn 491
changing reg in insn 470
changing reg in insn 490
changing reg in insn 472
changing reg in insn 475
changing reg in insn 473
changing reg in insn 475
changing reg in insn 480
changing reg in insn 482
changing reg in insn 482
changing reg in insn 482
changing reg in insn 485
changing reg in insn 485
changing reg in insn 489
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 491
changing reg in insn 493
changing reg in insn 496
changing reg in insn 494
changing reg in insn 496
changing reg in insn 501
changing reg in insn 503
changing reg in insn 503
changing reg in insn 503
changing reg in insn 506
changing reg in insn 506
changing reg in insn 529
changing reg in insn 508
changing reg in insn 528
changing reg in insn 510
changing reg in insn 513
changing reg in insn 511
changing reg in insn 513
changing reg in insn 518
changing reg in insn 520
changing reg in insn 520
changing reg in insn 520
changing reg in insn 523
changing reg in insn 523
changing reg in insn 527
changing reg in insn 525
changing reg in insn 526
changing reg in insn 527
changing reg in insn 529
changing reg in insn 531
changing reg in insn 534
changing reg in insn 532
changing reg in insn 534
changing reg in insn 539
changing reg in insn 541
changing reg in insn 541
changing reg in insn 541
changing reg in insn 544
changing reg in insn 544
changing reg in insn 567
changing reg in insn 546
changing reg in insn 566
changing reg in insn 548
changing reg in insn 551
changing reg in insn 549
changing reg in insn 551
changing reg in insn 556
changing reg in insn 558
changing reg in insn 558
changing reg in insn 558
changing reg in insn 561
changing reg in insn 561
changing reg in insn 565
changing reg in insn 563
changing reg in insn 564
changing reg in insn 565
changing reg in insn 567
changing reg in insn 589
changing reg in insn 590
changing reg in insn 590
changing reg in insn 591
changing reg in insn 597
changing reg in insn 598
changing reg in insn 598
changing reg in insn 599
changing reg in insn 603
changing reg in insn 604
changing reg in insn 604
changing reg in insn 606
changing reg in insn 606
changing reg in insn 607
changing reg in insn 607
changing reg in insn 620
changing reg in insn 622
changing reg in insn 623
changing reg in insn 623
changing reg in insn 625
changing reg in insn 625
changing reg in insn 626
changing reg in insn 626
changing reg in insn 639
changing reg in insn 655
changing reg in insn 656
changing reg in insn 660
changing reg in insn 661
changing reg in insn 661
changing reg in insn 663
changing reg in insn 663
changing reg in insn 664
changing reg in insn 664
changing reg in insn 665
changing reg in insn 669
changing reg in insn 670
changing reg in insn 670
changing reg in insn 672
changing reg in insn 672
changing reg in insn 673
changing reg in insn 688
changing reg in insn 690
changing reg in insn 694
changing reg in insn 695
changing reg in insn 701
changing reg in insn 702
changing reg in insn 706
changing reg in insn 709
changing reg in insn 709
changing reg in insn 709
changing reg in insn 719
changing reg in insn 711
changing reg in insn 712
changing reg in insn 712
changing reg in insn 713
changing reg in insn 716
changing reg in insn 719
changing reg in insn 735
changing reg in insn 736
changing reg in insn 742
changing reg in insn 743
changing reg in insn 749
changing reg in insn 750
changing reg in insn 750
changing reg in insn 751
changing reg in insn 755
changing reg in insn 758
changing reg in insn 758
changing reg in insn 758
changing reg in insn 761
changing reg in insn 761
changing reg in insn 763
changing reg in insn 764
changing reg in insn 764
changing reg in insn 765
changing reg in insn 767
changing reg in insn 789
changing reg in insn 790
changing reg in insn 790
changing reg in insn 791
changing reg in insn 797
changing reg in insn 798
changing reg in insn 798
changing reg in insn 799
changing reg in insn 805
changing reg in insn 806
changing reg in insn 806
changing reg in insn 807
changing reg in insn 822
changing reg in insn 824
changing reg in insn 824
changing reg in insn 825
changing reg in insn 825
changing reg in insn 828
changing reg in insn 828
changing reg in insn 828
changing reg in insn 845
changing reg in insn 841
changing reg in insn 843
changing reg in insn 843
changing reg in insn 844
changing reg in insn 845
changing reg in insn 849
changing reg in insn 847
changing reg in insn 848
changing reg in insn 848
changing reg in insn 849
changing reg in insn 849
changing reg in insn 912
changing reg in insn 862
changing reg in insn 864
changing reg in insn 864
changing reg in insn 865
changing reg in insn 865
changing reg in insn 868
changing reg in insn 868
changing reg in insn 868
changing reg in insn 885
changing reg in insn 881
changing reg in insn 883
changing reg in insn 883
changing reg in insn 884
changing reg in insn 885
changing reg in insn 889
changing reg in insn 887
changing reg in insn 888
changing reg in insn 888
changing reg in insn 889
changing reg in insn 889
changing reg in insn 890
changing reg in insn 890
changing reg in insn 892
changing reg in insn 895
changing reg in insn 893
changing reg in insn 895
changing reg in insn 900
changing reg in insn 902
changing reg in insn 902
changing reg in insn 902
changing reg in insn 905
changing reg in insn 905
changing reg in insn 909
changing reg in insn 907
changing reg in insn 908
changing reg in insn 908
changing reg in insn 909
changing reg in insn 909
changing reg in insn 910
changing reg in insn 910
changing reg in insn 911
changing reg in insn 912
changing reg in insn 934
changing reg in insn 935
changing reg in insn 941
changing reg in insn 942
changing reg in insn 948
changing reg in insn 949
changing reg in insn 949
changing reg in insn 950
changing reg in insn 950
changing reg in insn 951
changing reg in insn 952
changing reg in insn 953
changing reg in insn 954
changing reg in insn 954
changing reg in insn 955
changing reg in insn 959
changing reg in insn 962
changing reg in insn 960
changing reg in insn 962
changing reg in insn 967
changing reg in insn 969
changing reg in insn 969
changing reg in insn 969
changing reg in insn 972
changing reg in insn 972
changing reg in insn 986
changing reg in insn 974
changing reg in insn 977
changing reg in insn 977
changing reg in insn 977
changing reg in insn 980
changing reg in insn 980
changing reg in insn 983
changing reg in insn 983
changing reg in insn 986
changing reg in insn 988
changing reg in insn 991
changing reg in insn 989
changing reg in insn 991
changing reg in insn 996
changing reg in insn 998
changing reg in insn 998
changing reg in insn 998
changing reg in insn 1001
changing reg in insn 1001
changing reg in insn 1017
changing reg in insn 1003
changing reg in insn 1016
changing reg in insn 1005
changing reg in insn 1008
changing reg in insn 1008
changing reg in insn 1008
changing reg in insn 1011
changing reg in insn 1011
changing reg in insn 1015
changing reg in insn 1013
changing reg in insn 1014
changing reg in insn 1015
changing reg in insn 1017
changing reg in insn 1019
changing reg in insn 1022
changing reg in insn 1020
changing reg in insn 1022
changing reg in insn 1027
changing reg in insn 1029
changing reg in insn 1029
changing reg in insn 1029
changing reg in insn 1032
changing reg in insn 1032
changing reg in insn 1048
changing reg in insn 1034
changing reg in insn 1047
changing reg in insn 1036
changing reg in insn 1039
changing reg in insn 1039
changing reg in insn 1039
changing reg in insn 1042
changing reg in insn 1042
changing reg in insn 1046
changing reg in insn 1044
changing reg in insn 1045
changing reg in insn 1046
changing reg in insn 1048
changing reg in insn 1050
changing reg in insn 1053
changing reg in insn 1051
changing reg in insn 1053
changing reg in insn 1058
changing reg in insn 1060
changing reg in insn 1060
changing reg in insn 1060
changing reg in insn 1063
changing reg in insn 1063
changing reg in insn 1079
changing reg in insn 1065
changing reg in insn 1078
changing reg in insn 1067
changing reg in insn 1070
changing reg in insn 1070
changing reg in insn 1070
changing reg in insn 1073
changing reg in insn 1073
changing reg in insn 1077
changing reg in insn 1075
changing reg in insn 1076
changing reg in insn 1077
changing reg in insn 1079
changing reg in insn 1105
changing reg in insn 1106
changing reg in insn 1110
changing reg in insn 1111
changing reg in insn 1115
changing reg in insn 1118
changing reg in insn 1118
changing reg in insn 1122
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 29
changing reg in insn 30
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 39
changing reg in insn 38
changing reg in insn 37
changing reg in insn 42
changing reg in insn 40
changing reg in insn 39
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 57
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 112
changing reg in insn 119
changing reg in insn 120
changing reg in insn 125
changing reg in insn 126
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 142
changing reg in insn 143
changing reg in insn 150
changing reg in insn 148
changing reg in insn 146
changing reg in insn 145
changing reg in insn 144
changing reg in insn 151
changing reg in insn 149
changing reg in insn 148
changing reg in insn 147
changing reg in insn 146
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 159
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 172
changing reg in insn 170
changing reg in insn 168
changing reg in insn 167
changing reg in insn 166
changing reg in insn 173
changing reg in insn 171
changing reg in insn 170
changing reg in insn 169
changing reg in insn 168
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 181
changing reg in insn 182
changing reg in insn 184
changing reg in insn 185
changing reg in insn 183
changing reg in insn 184
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 197
changing reg in insn 204
changing reg in insn 202
changing reg in insn 200
changing reg in insn 199
changing reg in insn 198
changing reg in insn 205
changing reg in insn 203
changing reg in insn 202
changing reg in insn 201
changing reg in insn 200
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 226
changing reg in insn 224
changing reg in insn 222
changing reg in insn 221
changing reg in insn 220
changing reg in insn 227
changing reg in insn 225
changing reg in insn 224
changing reg in insn 223
changing reg in insn 222
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 235
changing reg in insn 236
changing reg in insn 238
changing reg in insn 239
changing reg in insn 237
changing reg in insn 238
changing reg in insn 256
changing reg in insn 257
changing reg in insn 262
changing reg in insn 263
changing reg in insn 264
changing reg in insn 265
changing reg in insn 273
changing reg in insn 274
changing reg in insn 279
changing reg in insn 280
changing reg in insn 285
changing reg in insn 286
changing reg in insn 288
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 299
changing reg in insn 301
changing reg in insn 302
changing reg in insn 306
changing reg in insn 307
changing reg in insn 314
changing reg in insn 312
changing reg in insn 310
changing reg in insn 309
changing reg in insn 308
changing reg in insn 315
changing reg in insn 313
changing reg in insn 312
changing reg in insn 311
changing reg in insn 310
changing reg in insn 309
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 316
changing reg in insn 317
changing reg in insn 319
changing reg in insn 320
changing reg in insn 318
changing reg in insn 319
changing reg in insn 330
changing reg in insn 331
changing reg in insn 336
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 346
changing reg in insn 347
changing reg in insn 354
changing reg in insn 352
changing reg in insn 350
changing reg in insn 349
changing reg in insn 348
changing reg in insn 355
changing reg in insn 353
changing reg in insn 352
changing reg in insn 351
changing reg in insn 350
changing reg in insn 349
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 354
changing reg in insn 356
changing reg in insn 357
changing reg in insn 359
changing reg in insn 360
changing reg in insn 358
changing reg in insn 359
changing reg in insn 391
changing reg in insn 392
changing reg in insn 399
changing reg in insn 400
changing reg in insn 407
changing reg in insn 408
changing reg in insn 418
changing reg in insn 419
changing reg in insn 426
changing reg in insn 424
changing reg in insn 422
changing reg in insn 421
changing reg in insn 420
changing reg in insn 427
changing reg in insn 425
changing reg in insn 424
changing reg in insn 423
changing reg in insn 422
changing reg in insn 421
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 429
changing reg in insn 431
changing reg in insn 432
changing reg in insn 430
changing reg in insn 431
changing reg in insn 433
changing reg in insn 434
changing reg in insn 441
changing reg in insn 439
changing reg in insn 437
changing reg in insn 436
changing reg in insn 435
changing reg in insn 442
changing reg in insn 440
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 436
changing reg in insn 438
changing reg in insn 439
changing reg in insn 440
changing reg in insn 441
changing reg in insn 443
changing reg in insn 444
changing reg in insn 446
changing reg in insn 447
changing reg in insn 445
changing reg in insn 446
changing reg in insn 449
changing reg in insn 450
changing reg in insn 448
changing reg in insn 449
changing reg in insn 452
changing reg in insn 453
changing reg in insn 451
changing reg in insn 452
changing reg in insn 454
changing reg in insn 455
changing reg in insn 462
changing reg in insn 460
changing reg in insn 458
changing reg in insn 457
changing reg in insn 456
changing reg in insn 463
changing reg in insn 461
changing reg in insn 460
changing reg in insn 459
changing reg in insn 458
changing reg in insn 457
changing reg in insn 459
changing reg in insn 460
changing reg in insn 461
changing reg in insn 462
changing reg in insn 464
changing reg in insn 465
changing reg in insn 467
changing reg in insn 468
changing reg in insn 466
changing reg in insn 467
changing reg in insn 469
changing reg in insn 470
changing reg in insn 471
changing reg in insn 472
changing reg in insn 479
changing reg in insn 477
changing reg in insn 475
changing reg in insn 474
changing reg in insn 473
changing reg in insn 480
changing reg in insn 478
changing reg in insn 477
changing reg in insn 476
changing reg in insn 475
changing reg in insn 474
changing reg in insn 476
changing reg in insn 477
changing reg in insn 478
changing reg in insn 479
changing reg in insn 481
changing reg in insn 482
changing reg in insn 484
changing reg in insn 485
changing reg in insn 483
changing reg in insn 484
changing reg in insn 486
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 490
changing reg in insn 491
changing reg in insn 492
changing reg in insn 493
changing reg in insn 500
changing reg in insn 498
changing reg in insn 496
changing reg in insn 495
changing reg in insn 494
changing reg in insn 501
changing reg in insn 499
changing reg in insn 498
changing reg in insn 497
changing reg in insn 496
changing reg in insn 495
changing reg in insn 497
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 502
changing reg in insn 503
changing reg in insn 505
changing reg in insn 506
changing reg in insn 504
changing reg in insn 505
changing reg in insn 507
changing reg in insn 508
changing reg in insn 509
changing reg in insn 510
changing reg in insn 517
changing reg in insn 515
changing reg in insn 513
changing reg in insn 512
changing reg in insn 511
changing reg in insn 518
changing reg in insn 516
changing reg in insn 515
changing reg in insn 514
changing reg in insn 513
changing reg in insn 512
changing reg in insn 514
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 519
changing reg in insn 520
changing reg in insn 522
changing reg in insn 523
changing reg in insn 521
changing reg in insn 522
changing reg in insn 524
changing reg in insn 525
changing reg in insn 526
changing reg in insn 527
changing reg in insn 528
changing reg in insn 529
changing reg in insn 530
changing reg in insn 531
changing reg in insn 538
changing reg in insn 536
changing reg in insn 534
changing reg in insn 533
changing reg in insn 532
changing reg in insn 539
changing reg in insn 537
changing reg in insn 536
changing reg in insn 535
changing reg in insn 534
changing reg in insn 533
changing reg in insn 535
changing reg in insn 536
changing reg in insn 537
changing reg in insn 538
changing reg in insn 540
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 542
changing reg in insn 543
changing reg in insn 545
changing reg in insn 546
changing reg in insn 547
changing reg in insn 548
changing reg in insn 555
changing reg in insn 553
changing reg in insn 551
changing reg in insn 550
changing reg in insn 549
changing reg in insn 556
changing reg in insn 554
changing reg in insn 553
changing reg in insn 552
changing reg in insn 551
changing reg in insn 550
changing reg in insn 552
changing reg in insn 553
changing reg in insn 554
changing reg in insn 555
changing reg in insn 557
changing reg in insn 558
changing reg in insn 560
changing reg in insn 561
changing reg in insn 559
changing reg in insn 560
changing reg in insn 562
changing reg in insn 563
changing reg in insn 564
changing reg in insn 565
changing reg in insn 566
changing reg in insn 567
changing reg in insn 588
changing reg in insn 589
changing reg in insn 596
changing reg in insn 597
changing reg in insn 602
changing reg in insn 603
changing reg in insn 605
changing reg in insn 609
changing reg in insn 619
changing reg in insn 608
changing reg in insn 609
changing reg in insn 611
changing reg in insn 614
changing reg in insn 612
changing reg in insn 614
changing reg in insn 610
changing reg in insn 611
changing reg in insn 618
changing reg in insn 616
changing reg in insn 614
changing reg in insn 613
changing reg in insn 612
changing reg in insn 619
changing reg in insn 617
changing reg in insn 616
changing reg in insn 615
changing reg in insn 614
changing reg in insn 613
changing reg in insn 615
changing reg in insn 616
changing reg in insn 617
changing reg in insn 618
changing reg in insn 619
changing reg in insn 620
changing reg in insn 621
changing reg in insn 622
changing reg in insn 624
changing reg in insn 628
changing reg in insn 638
changing reg in insn 627
changing reg in insn 628
changing reg in insn 630
changing reg in insn 633
changing reg in insn 631
changing reg in insn 633
changing reg in insn 629
changing reg in insn 630
changing reg in insn 637
changing reg in insn 635
changing reg in insn 633
changing reg in insn 632
changing reg in insn 631
changing reg in insn 638
changing reg in insn 636
changing reg in insn 635
changing reg in insn 634
changing reg in insn 633
changing reg in insn 632
changing reg in insn 634
changing reg in insn 635
changing reg in insn 636
changing reg in insn 637
changing reg in insn 638
changing reg in insn 639
changing reg in insn 654
changing reg in insn 655
changing reg in insn 659
changing reg in insn 660
changing reg in insn 662
changing reg in insn 668
changing reg in insn 669
changing reg in insn 671
changing reg in insn 673
changing reg in insn 674
changing reg in insn 684
changing reg in insn 686
changing reg in insn 685
changing reg in insn 683
changing reg in insn 684
changing reg in insn 687
changing reg in insn 688
changing reg in insn 689
changing reg in insn 690
changing reg in insn 693
changing reg in insn 694
changing reg in insn 700
changing reg in insn 701
changing reg in insn 705
changing reg in insn 706
changing reg in insn 708
changing reg in insn 709
changing reg in insn 710
changing reg in insn 711
changing reg in insn 715
changing reg in insn 716
changing reg in insn 718
changing reg in insn 719
changing reg in insn 717
changing reg in insn 718
changing reg in insn 734
changing reg in insn 735
changing reg in insn 741
changing reg in insn 742
changing reg in insn 748
changing reg in insn 749
changing reg in insn 754
changing reg in insn 755
changing reg in insn 757
changing reg in insn 758
changing reg in insn 760
changing reg in insn 761
changing reg in insn 759
changing reg in insn 760
changing reg in insn 762
changing reg in insn 763
changing reg in insn 766
changing reg in insn 767
changing reg in insn 788
changing reg in insn 789
changing reg in insn 796
changing reg in insn 797
changing reg in insn 804
changing reg in insn 805
changing reg in insn 811
changing reg in insn 821
changing reg in insn 810
changing reg in insn 811
changing reg in insn 813
changing reg in insn 816
changing reg in insn 814
changing reg in insn 816
changing reg in insn 812
changing reg in insn 813
changing reg in insn 820
changing reg in insn 818
changing reg in insn 816
changing reg in insn 815
changing reg in insn 814
changing reg in insn 821
changing reg in insn 819
changing reg in insn 818
changing reg in insn 817
changing reg in insn 816
changing reg in insn 815
changing reg in insn 817
changing reg in insn 818
changing reg in insn 819
changing reg in insn 820
changing reg in insn 821
changing reg in insn 822
changing reg in insn 823
changing reg in insn 827
changing reg in insn 828
changing reg in insn 830
changing reg in insn 840
changing reg in insn 829
changing reg in insn 830
changing reg in insn 832
changing reg in insn 835
changing reg in insn 833
changing reg in insn 835
changing reg in insn 831
changing reg in insn 832
changing reg in insn 839
changing reg in insn 837
changing reg in insn 835
changing reg in insn 834
changing reg in insn 833
changing reg in insn 840
changing reg in insn 838
changing reg in insn 837
changing reg in insn 836
changing reg in insn 835
changing reg in insn 834
changing reg in insn 836
changing reg in insn 837
changing reg in insn 838
changing reg in insn 839
changing reg in insn 840
changing reg in insn 841
changing reg in insn 842
changing reg in insn 844
changing reg in insn 845
changing reg in insn 846
changing reg in insn 847
changing reg in insn 851
changing reg in insn 861
changing reg in insn 850
changing reg in insn 851
changing reg in insn 853
changing reg in insn 856
changing reg in insn 854
changing reg in insn 856
changing reg in insn 852
changing reg in insn 853
changing reg in insn 860
changing reg in insn 858
changing reg in insn 856
changing reg in insn 855
changing reg in insn 854
changing reg in insn 861
changing reg in insn 859
changing reg in insn 858
changing reg in insn 857
changing reg in insn 856
changing reg in insn 855
changing reg in insn 857
changing reg in insn 858
changing reg in insn 859
changing reg in insn 860
changing reg in insn 861
changing reg in insn 862
changing reg in insn 863
changing reg in insn 867
changing reg in insn 868
changing reg in insn 870
changing reg in insn 880
changing reg in insn 869
changing reg in insn 870
changing reg in insn 872
changing reg in insn 875
changing reg in insn 873
changing reg in insn 875
changing reg in insn 871
changing reg in insn 872
changing reg in insn 879
changing reg in insn 877
changing reg in insn 875
changing reg in insn 874
changing reg in insn 873
changing reg in insn 880
changing reg in insn 878
changing reg in insn 877
changing reg in insn 876
changing reg in insn 875
changing reg in insn 874
changing reg in insn 876
changing reg in insn 877
changing reg in insn 878
changing reg in insn 879
changing reg in insn 880
changing reg in insn 881
changing reg in insn 882
changing reg in insn 884
changing reg in insn 885
changing reg in insn 886
changing reg in insn 887
changing reg in insn 891
changing reg in insn 892
changing reg in insn 899
changing reg in insn 897
changing reg in insn 895
changing reg in insn 894
changing reg in insn 893
changing reg in insn 900
changing reg in insn 898
changing reg in insn 897
changing reg in insn 896
changing reg in insn 895
changing reg in insn 894
changing reg in insn 896
changing reg in insn 897
changing reg in insn 898
changing reg in insn 899
changing reg in insn 901
changing reg in insn 902
changing reg in insn 904
changing reg in insn 905
changing reg in insn 903
changing reg in insn 904
changing reg in insn 906
changing reg in insn 907
changing reg in insn 933
changing reg in insn 934
changing reg in insn 940
changing reg in insn 941
changing reg in insn 947
changing reg in insn 948
changing reg in insn 958
changing reg in insn 959
changing reg in insn 966
changing reg in insn 964
changing reg in insn 962
changing reg in insn 961
changing reg in insn 960
changing reg in insn 967
changing reg in insn 965
changing reg in insn 964
changing reg in insn 963
changing reg in insn 962
changing reg in insn 961
changing reg in insn 963
changing reg in insn 964
changing reg in insn 965
changing reg in insn 966
changing reg in insn 968
changing reg in insn 969
changing reg in insn 971
changing reg in insn 972
changing reg in insn 970
changing reg in insn 971
changing reg in insn 973
changing reg in insn 974
changing reg in insn 976
changing reg in insn 977
changing reg in insn 979
changing reg in insn 980
changing reg in insn 978
changing reg in insn 979
changing reg in insn 982
changing reg in insn 983
changing reg in insn 981
changing reg in insn 982
changing reg in insn 985
changing reg in insn 986
changing reg in insn 984
changing reg in insn 985
changing reg in insn 987
changing reg in insn 988
changing reg in insn 995
changing reg in insn 993
changing reg in insn 991
changing reg in insn 990
changing reg in insn 989
changing reg in insn 996
changing reg in insn 994
changing reg in insn 993
changing reg in insn 992
changing reg in insn 991
changing reg in insn 990
changing reg in insn 992
changing reg in insn 993
changing reg in insn 994
changing reg in insn 995
changing reg in insn 997
changing reg in insn 998
changing reg in insn 1000
changing reg in insn 1001
changing reg in insn 999
changing reg in insn 1000
changing reg in insn 1002
changing reg in insn 1003
changing reg in insn 1004
changing reg in insn 1005
changing reg in insn 1007
changing reg in insn 1008
changing reg in insn 1010
changing reg in insn 1011
changing reg in insn 1009
changing reg in insn 1010
changing reg in insn 1012
changing reg in insn 1013
changing reg in insn 1014
changing reg in insn 1015
changing reg in insn 1016
changing reg in insn 1017
changing reg in insn 1018
changing reg in insn 1019
changing reg in insn 1026
changing reg in insn 1024
changing reg in insn 1022
changing reg in insn 1021
changing reg in insn 1020
changing reg in insn 1027
changing reg in insn 1025
changing reg in insn 1024
changing reg in insn 1023
changing reg in insn 1022
changing reg in insn 1021
changing reg in insn 1023
changing reg in insn 1024
changing reg in insn 1025
changing reg in insn 1026
changing reg in insn 1028
changing reg in insn 1029
changing reg in insn 1031
changing reg in insn 1032
changing reg in insn 1030
changing reg in insn 1031
changing reg in insn 1033
changing reg in insn 1034
changing reg in insn 1035
changing reg in insn 1036
changing reg in insn 1038
changing reg in insn 1039
changing reg in insn 1041
changing reg in insn 1042
changing reg in insn 1040
changing reg in insn 1041
changing reg in insn 1043
changing reg in insn 1044
changing reg in insn 1045
changing reg in insn 1046
changing reg in insn 1047
changing reg in insn 1048
changing reg in insn 1049
changing reg in insn 1050
changing reg in insn 1057
changing reg in insn 1055
changing reg in insn 1053
changing reg in insn 1052
changing reg in insn 1051
changing reg in insn 1058
changing reg in insn 1056
changing reg in insn 1055
changing reg in insn 1054
changing reg in insn 1053
changing reg in insn 1052
changing reg in insn 1054
changing reg in insn 1055
changing reg in insn 1056
changing reg in insn 1057
changing reg in insn 1059
changing reg in insn 1060
changing reg in insn 1062
changing reg in insn 1063
changing reg in insn 1061
changing reg in insn 1062
changing reg in insn 1064
changing reg in insn 1065
changing reg in insn 1066
changing reg in insn 1067
changing reg in insn 1069
changing reg in insn 1070
changing reg in insn 1072
changing reg in insn 1073
changing reg in insn 1071
changing reg in insn 1072
changing reg in insn 1074
changing reg in insn 1075
changing reg in insn 1076
changing reg in insn 1077
changing reg in insn 1078
changing reg in insn 1079
changing reg in insn 1104
changing reg in insn 1105
changing reg in insn 1109
changing reg in insn 1110
changing reg in insn 21
changing reg in insn 1123
deleting insn with uid = 321.
deleting insn with uid = 323.
deleting insn with uid = 361.
deleting insn with uid = 363.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 158.
verify found no changes in insn with uid = 180.
verify found no changes in insn with uid = 212.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 270.
verify found no changes in insn with uid = 325.
verify found no changes in insn with uid = 365.
verify found no changes in insn with uid = 371.
verify found no changes in insn with uid = 373.
verify found no changes in insn with uid = 714.
verify found no changes in insn with uid = 1112.
verify found no changes in insn with uid = 1125.


int read_csi_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision3* (*)[100], Precision4* (*)[100], Precision4* (*)[32], int*, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={570d,584u} r1={165d,173u,64e} r2={48d,30u,4e} r3={7d,6u} r4={36d,18u} r5={37d,19u} r6={1d,396u} r7={1d,108u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r17={305d,35u} r18={18d} r19={18d} r20={1d,1u,56e} r21={19d} r22={19d} r23={19d} r24={19d} r25={19d} r26={19d} r27={19d} r28={19d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={19d,1u} r38={19d,1u} r39={18d} r40={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} 
;;    total ref usage 3865{2369d,1372u,124e} in 962{944 regular + 18 call} insns.
(note 1 0 22 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 369 370 371 372 373 374
(note 22 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 22 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80088 [0xfffffffffffec728])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80104 [0xfffffffffffec718])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])
        (reg/f:DI 0 ax [369])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])
        (reg/f:DI 0 ax [370])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])
        (reg/f:DI 0 ax [371])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 final_data+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])
        (reg/f:DI 0 ax [372])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80168 [0xfffffffffffec6d8])) [0 pe_table+0 S8 A64])
        (reg/f:DI 0 ax [373])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])
        (reg/f:DI 0 ax [374])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(note 20 19 21 2 NOTE_INSN_FUNCTION_BEG)
(insn 21 20 24 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.6698+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [706])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:112 986 {stack_tls_protect_set_di}
     (nil))
(insn 24 21 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:114 90 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 actual_number_pe+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:114 90 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 init_precision4.lo+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(insn 27 26 1099 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:120 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              85 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 375
(code_label 1099 27 28 3 66 "" [1 uses])
(note 28 1099 29 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 3 (set (reg/f:DI 0 ax [375])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80088 [0xfffffffffffec728])) [0 fid+0 S8 A64])) fmtext_o.cpp:120 89 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 0 ax [orig:87 D.6677 ] [87])
        (mem:SI (reg/f:DI 0 ax [375]) [0 *fid_59(D)+0 S4 A32])) fmtext_o.cpp:120 90 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.6677 ] [88])
                (plus:SI (reg:SI 0 ax [orig:87 D.6677 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:120 217 {*addsi_1}
     (nil))
(insn 32 31 33 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.6677 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:120 7 {*cmpsi_1}
     (nil))
(jump_insn 33 32 34 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1102)
            (pc))) fmtext_o.cpp:120 612 {*jcc_1}
     (nil)
 -> 1102)
;;  succ:       86
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 376 377 378 379
(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 4 (set (reg:SI 0 ax [376])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:122 90 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 1 dx [orig:89 D.6678 ] [89])
        (sign_extend:DI (reg:SI 0 ax [376]))) fmtext_o.cpp:122 142 {*extendsidi2_rex64}
     (nil))
(insn 37 36 38 4 (set (reg:DI 0 ax [377])
        (reg:DI 1 dx [orig:89 D.6678 ] [89])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 0 ax [377])
                (ashift:DI (reg:DI 0 ax [377])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 512 {*ashldi3_1}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 0 ax [377])
                (plus:DI (reg:DI 0 ax [377])
                    (reg:DI 1 dx [orig:89 D.6678 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 D.6678 ] [89])
            (const_int 9 [0x9]))
        (nil)))
(insn 40 39 41 4 (parallel [
            (set (reg:DI 0 ax [378])
                (ashift:DI (reg:DI 0 ax [377])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 512 {*ashldi3_1}
     (nil))
(insn 41 40 42 4 (set (reg:DI 0 ax [377])
        (reg:DI 0 ax [378])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 1 dx [orig:90 D.6678 ] [90])
        (reg:DI 0 ax [377])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6679 ] [91])
                (plus:DI (reg/f:DI 0 ax [379])
                    (reg:DI 1 dx [orig:90 D.6678 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80080 [0xfffffffffffec730])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6678 ] [90]))
        (nil)))
(insn 45 44 46 4 (set (reg:SI 0 ax [orig:92 D.6677 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:91 D.6679 ] [91])
                (const_int 20 [0x14])) [0 _65->file_type+0 S4 A32])) fmtext_o.cpp:122 90 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.6677 ] [92])
            (const_int 0 [0]))) fmtext_o.cpp:122 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 47 46 48 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1096)
            (pc))) fmtext_o.cpp:122 612 {*jcc_1}
     (nil)
 -> 1096)
;;  succ:       5 (FALLTHRU)
;;              85
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 97 98 99 100 380 381 382 383 384 385 386 387
(note 48 47 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 5 (set (reg:SI 0 ax [380])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:DI 0 ax [orig:93 D.6678 ] [93])
        (sign_extend:DI (reg:SI 0 ax [380]))) fmtext_o.cpp:124 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 5 (parallel [
            (set (reg:DI 1 dx [orig:94 D.6678 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6678 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 512 {*ashldi3_1}
     (nil))
(insn 52 51 53 5 (set (reg/f:DI 0 ax [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 53 52 54 5 (parallel [
            (set (reg/f:DI 3 bx [orig:95 D.6680 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 D.6678 ] [94])
                    (reg/f:DI 0 ax [381])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.6678 ] [94]))
        (nil)))
(insn 54 53 55 5 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 55 54 1183 5 (set (reg:DI 0 ax [382])
        (sign_extend:DI (reg:SI 0 ax [383]))) fmtext_o.cpp:124 142 {*extendsidi2_rex64}
     (nil))
(insn 1183 55 56 5 (set (reg:DI 0 ax [384])
        (reg:DI 0 ax [382])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 56 1183 1184 5 (parallel [
            (set (reg:DI 0 ax [384])
                (ashift:DI (reg:DI 0 ax [384])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 512 {*ashldi3_1}
     (nil))
(insn 1184 56 57 5 (set (reg:DI 1 dx [384])
        (reg:DI 0 ax [384])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 57 1184 58 5 (set (reg/f:DI 0 ax [385])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80104 [0xfffffffffffec718])) [0 file+0 S8 A64])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 58 57 59 5 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.6681 ] [96])
                (plus:DI (reg/f:DI 0 ax [385])
                    (reg:DI 1 dx [384])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80088 [0xfffffffffffec728])) [0 file+0 S8 A64])
            (reg:DI 1 dx [384]))
        (nil)))
(insn 59 58 60 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f93b22b13f0 *.LC15>)) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 60 59 61 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 D.6681 ] [96])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(call_insn 61 60 62 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f93b2574510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:124 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 62 61 63 5 (set (reg/f:DI 0 ax [orig:97 D.6682 ] [97])
        (reg:DI 0 ax)) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 63 62 64 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:95 D.6680 ] [95]) [0 *_70+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.6682 ] [97])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 64 63 65 5 (set (reg:SI 0 ax [386])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:126 90 {*movsi_internal}
     (nil))
(insn 65 64 66 5 (set (reg:DI 0 ax [orig:98 D.6678 ] [98])
        (sign_extend:DI (reg:SI 0 ax [386]))) fmtext_o.cpp:126 142 {*extendsidi2_rex64}
     (nil))
(insn 66 65 67 5 (parallel [
            (set (reg:DI 1 dx [orig:99 D.6678 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 D.6678 ] [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:126 512 {*ashldi3_1}
     (nil))
(insn 67 66 68 5 (set (reg/f:DI 0 ax [387])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])) fmtext_o.cpp:126 89 {*movdi_internal}
     (nil))
(insn 68 67 69 5 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.6680 ] [100])
                (plus:DI (reg/f:DI 0 ax [387])
                    (reg:DI 1 dx [orig:99 D.6678 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:126 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.6678 ] [99]))
        (nil)))
(insn 69 68 70 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:100 D.6680 ] [100])
            (const_int 0 [0]))) fmtext_o.cpp:126 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 70 69 71 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) fmtext_o.cpp:126 612 {*jcc_1}
     (nil)
 -> 77)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 71 70 72 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f93b22b1480 *.LC16>)) fmtext_o.cpp:127 89 {*movdi_internal}
     (nil))
(call_insn 73 72 74 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:127 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 74 73 75 6 (set (reg:SI 5 di)
        (const_int 4 [0x4])) fmtext_o.cpp:128 90 {*movsi_internal}
     (nil))
(call_insn 75 74 76 6 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f93b27d2ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:128 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 76 75 77)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 102 103 104 105 106 107 388 389 390
(code_label 77 76 78 7 15 "" [1 uses])
(note 78 77 79 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 7 (set (reg:SI 0 ax [388])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:133 90 {*movsi_internal}
     (nil))
(insn 80 79 81 7 (set (reg:DI 0 ax [orig:101 D.6678 ] [101])
        (sign_extend:DI (reg:SI 0 ax [388]))) fmtext_o.cpp:133 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 7 (parallel [
            (set (reg:DI 1 dx [orig:102 D.6678 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.6678 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:133 512 {*ashldi3_1}
     (nil))
(insn 82 81 83 7 (set (reg/f:DI 0 ax [389])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 83 82 84 7 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.6680 ] [103])
                (plus:DI (reg/f:DI 0 ax [389])
                    (reg:DI 1 dx [orig:102 D.6678 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:133 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.6678 ] [102]))
        (nil)))
(insn 84 83 85 7 (set (reg/f:DI 1 dx [orig:104 D.6682 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6680 ] [103]) [0 *_82+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 85 84 86 7 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 86 85 87 7 (set (reg/f:DI 0 ax [orig:105 D.6683 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [390]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 87 86 88 7 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:104 D.6682 ] [104])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 88 87 89 7 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 89 88 90 7 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 90 89 91 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 D.6683 ] [105])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(call_insn 91 90 92 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:133 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 92 91 93 7 (set (reg:DI 0 ax [orig:106 D.6678 ] [106])
        (reg:DI 0 ax)) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 93 92 94 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:106 D.6678 ] [106])
            (const_int 1 [0x1]))) fmtext_o.cpp:133 8 {*cmpdi_1}
     (nil))
(insn 94 93 95 7 (set (reg:QI 0 ax [orig:107 D.6684 ] [107])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:133 607 {*setcc_qi}
     (nil))
(insn 95 94 96 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:107 D.6684 ] [107])
            (const_int 0 [0]))) fmtext_o.cpp:133 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 96 95 97 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) fmtext_o.cpp:133 612 {*jcc_1}
     (nil)
 -> 103)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 97 96 98 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f93b22b1510 *.LC17>)) fmtext_o.cpp:134 89 {*movdi_internal}
     (nil))
(call_insn 99 98 100 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:134 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 100 99 101 8 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:135 90 {*movsi_internal}
     (nil))
(call_insn 101 100 102 8 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f93b27d2ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:135 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 102 101 103)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 108 391 392
(code_label 103 102 104 9 16 "" [1 uses])
(note 104 103 105 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 9 (set (reg/f:DI 0 ax [391])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:139 89 {*movdi_internal}
     (nil))
(insn 106 105 107 9 (set (reg/f:DI 0 ax [orig:108 D.6683 ] [108])
        (mem/f:DI (reg/f:DI 0 ax [391]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:139 89 {*movdi_internal}
     (nil))
(insn 107 106 108 9 (set (reg:SI 0 ax [392])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:108 D.6683 ] [108])
                (const_int 8 [0x8])) [0 _90->np.number+0 S4 A32])) fmtext_o.cpp:139 90 {*movsi_internal}
     (nil))
(insn 108 107 109 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [392])) fmtext_o.cpp:139 90 {*movsi_internal}
     (nil))
(insn 109 108 249 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:143 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              19 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 393
(code_label 249 109 110 10 23 "" [1 uses])
(note 110 249 111 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 10 (set (reg/f:DI 0 ax [393])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 112 111 113 10 (set (reg/f:DI 0 ax [orig:109 D.6683 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [393]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 113 112 114 10 (set (reg:SI 0 ax [orig:110 D.6677 ] [110])
        (mem/j:SI (reg/f:DI 0 ax [orig:109 D.6683 ] [109]) [0 _93->nblocks.number+0 S4 A32])) fmtext_o.cpp:143 90 {*movsi_internal}
     (nil))
(insn 114 113 115 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:110 D.6677 ] [110])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:143 7 {*cmpsi_1}
     (nil))
(jump_insn 115 114 116 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 252)
            (pc))) fmtext_o.cpp:143 612 {*jcc_1}
     (nil)
 -> 252)
;;  succ:       20
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 116 115 117 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 243 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:145 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              18 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 394
(code_label 243 117 118 12 22 "" [1 uses])
(note 118 243 119 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 12 (set (reg/f:DI 0 ax [394])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:145 89 {*movdi_internal}
     (nil))
(insn 120 119 121 12 (set (reg/f:DI 0 ax [orig:111 D.6683 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [394]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:145 89 {*movdi_internal}
     (nil))
(insn 121 120 122 12 (set (reg:SI 0 ax [orig:112 D.6677 ] [112])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:111 D.6683 ] [111])
                (const_int 4 [0x4])) [0 _96->ntraces.number+0 S4 A32])) fmtext_o.cpp:145 90 {*movsi_internal}
     (nil))
(insn 122 121 123 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:112 D.6677 ] [112])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32]))) fmtext_o.cpp:145 7 {*cmpsi_1}
     (nil))
(jump_insn 123 122 124 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 246)
            (pc))) fmtext_o.cpp:145 612 {*jcc_1}
     (nil)
 -> 246)
;;  succ:       19
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 114 395
(note 124 123 125 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 13 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 126 125 127 13 (set (reg/f:DI 0 ax [orig:113 D.6683 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [395]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 127 126 128 13 (set (reg:HI 0 ax [orig:114 D.6685 ] [114])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:113 D.6683 ] [113])
                (const_int 26 [0x1a])) [0 _98->status.number+0 S2 A16])) fmtext_o.cpp:148 92 {*movhi_internal}
     (nil))
(insn 128 127 129 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:114 D.6685 ] [114])
            (const_int 69 [0x45]))) fmtext_o.cpp:148 6 {*cmphi_1}
     (nil))
(jump_insn 129 128 130 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 140)
            (pc))) fmtext_o.cpp:148 612 {*jcc_1}
     (nil)
 -> 140)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 118 119 396 397
(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 14 (set (reg:SI 0 ax [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:148 90 {*movsi_internal}
     (nil))
(insn 132 131 133 14 (set (reg:DI 0 ax [orig:115 D.6678 ] [115])
        (sign_extend:DI (reg:SI 0 ax [396]))) fmtext_o.cpp:148 142 {*extendsidi2_rex64}
     (nil))
(insn 133 132 134 14 (parallel [
            (set (reg:DI 1 dx [orig:116 D.6678 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.6678 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:148 512 {*ashldi3_1}
     (nil))
(insn 134 133 135 14 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 135 134 136 14 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6686 ] [117])
                (plus:DI (reg/f:DI 0 ax [397])
                    (reg:DI 1 dx [orig:116 D.6678 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:148 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.6678 ] [116]))
        (nil)))
(insn 136 135 137 14 (set (reg/f:DI 0 ax [orig:118 D.6683 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [orig:117 D.6686 ] [117]) [0 *_102+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 137 136 138 14 (set (reg:HI 0 ax [orig:119 D.6685 ] [119])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:118 D.6683 ] [118])
                (const_int 26 [0x1a])) [0 _103->status.number+0 S2 A16])) fmtext_o.cpp:148 92 {*movhi_internal}
     (nil))
(insn 138 137 139 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:119 D.6685 ] [119])
            (const_int 2073 [0x819]))) fmtext_o.cpp:148 6 {*cmphi_1}
     (nil))
(jump_insn 139 138 140 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 188)
            (pc))) fmtext_o.cpp:148 612 {*jcc_1}
     (nil)
 -> 188)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 134 135 136 137 138 139 140 141 142 143 144 145 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415
(code_label 140 139 141 15 19 "" [1 uses])
(note 141 140 142 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 15 (set (reg:SI 0 ax [398])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 143 142 144 15 (set (reg:DI 1 dx [orig:134 D.6678 ] [134])
        (sign_extend:DI (reg:SI 0 ax [398]))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 15 (set (reg:DI 0 ax [399])
        (reg:DI 1 dx [orig:134 D.6678 ] [134])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 145 144 146 15 (parallel [
            (set (reg:DI 0 ax [399])
                (ashift:DI (reg:DI 0 ax [399])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 512 {*ashldi3_1}
     (nil))
(insn 146 145 147 15 (parallel [
            (set (reg:DI 0 ax [399])
                (plus:DI (reg:DI 0 ax [399])
                    (reg:DI 1 dx [orig:134 D.6678 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:134 D.6678 ] [134])
            (const_int 5 [0x5]))
        (nil)))
(insn 147 146 148 15 (parallel [
            (set (reg:DI 1 dx [400])
                (ashift:DI (reg:DI 0 ax [399])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 512 {*ashldi3_1}
     (nil))
(insn 148 147 149 15 (parallel [
            (set (reg:DI 0 ax [399])
                (plus:DI (reg:DI 0 ax [399])
                    (reg:DI 1 dx [400])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 218 {*adddi_1}
     (nil))
(insn 149 148 150 15 (parallel [
            (set (reg:DI 0 ax [401])
                (ashift:DI (reg:DI 0 ax [399])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 512 {*ashldi3_1}
     (nil))
(insn 150 149 151 15 (set (reg:DI 0 ax [399])
        (reg:DI 0 ax [401])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 151 150 152 15 (set (reg:DI 1 dx [orig:135 D.6678 ] [135])
        (reg:DI 0 ax [399])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 152 151 153 15 (set (reg/f:DI 0 ax [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 153 152 154 15 (parallel [
            (set (reg/f:DI 3 bx [orig:136 D.6687 ] [136])
                (plus:DI (reg:DI 1 dx [orig:135 D.6678 ] [135])
                    (reg/f:DI 0 ax [402])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.6678 ] [135]))
        (nil)))
(insn 154 153 155 15 (set (reg:SI 0 ax [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 155 154 156 15 (set (reg:DI 0 ax [orig:137 D.6678 ] [137])
        (sign_extend:DI (reg:SI 0 ax [403]))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (nil))
(insn 156 155 157 15 (parallel [
            (set (reg:DI 0 ax [orig:138 D.6678 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:137 D.6678 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 512 {*ashldi3_1}
     (nil))
(insn 157 156 158 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:138 D.6678 ] [138])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(call_insn 158 157 159 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:149 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 159 158 160 15 (set (reg/f:DI 0 ax [404])
        (reg:DI 0 ax)) fmtext_o.cpp:149 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [404])
        (nil)))
(insn 160 159 161 15 (set (reg/f:DI 1 dx [orig:139 D.6688 ] [139])
        (reg/f:DI 0 ax [404])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 161 160 162 15 (set (reg:SI 0 ax [406])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 162 161 163 15 (set (reg:DI 0 ax [405])
        (sign_extend:DI (reg:SI 0 ax [406]))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 15 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [405])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:136 D.6687 ] [136])) [0 *_127 S8 A64])
        (reg/f:DI 1 dx [orig:139 D.6688 ] [139])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 164 163 165 15 (set (reg:SI 0 ax [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 165 164 166 15 (set (reg:DI 1 dx [orig:140 D.6678 ] [140])
        (sign_extend:DI (reg:SI 0 ax [407]))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 15 (set (reg:DI 0 ax [408])
        (reg:DI 1 dx [orig:140 D.6678 ] [140])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 167 166 168 15 (parallel [
            (set (reg:DI 0 ax [408])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 512 {*ashldi3_1}
     (nil))
(insn 168 167 169 15 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg:DI 0 ax [408])
                    (reg:DI 1 dx [orig:140 D.6678 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:140 D.6678 ] [140])
            (const_int 5 [0x5]))
        (nil)))
(insn 169 168 170 15 (parallel [
            (set (reg:DI 1 dx [409])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 512 {*ashldi3_1}
     (nil))
(insn 170 169 171 15 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg:DI 0 ax [408])
                    (reg:DI 1 dx [409])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 218 {*adddi_1}
     (nil))
(insn 171 170 172 15 (parallel [
            (set (reg:DI 0 ax [410])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 512 {*ashldi3_1}
     (nil))
(insn 172 171 173 15 (set (reg:DI 0 ax [408])
        (reg:DI 0 ax [410])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 173 172 174 15 (set (reg:DI 1 dx [orig:141 D.6678 ] [141])
        (reg:DI 0 ax [408])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 174 173 175 15 (set (reg/f:DI 0 ax [411])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 175 174 176 15 (parallel [
            (set (reg/f:DI 3 bx [orig:142 D.6689 ] [142])
                (plus:DI (reg:DI 1 dx [orig:141 D.6678 ] [141])
                    (reg/f:DI 0 ax [411])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:141 D.6678 ] [141]))
        (nil)))
(insn 176 175 177 15 (set (reg:SI 0 ax [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 177 176 178 15 (set (reg:DI 0 ax [orig:143 D.6678 ] [143])
        (sign_extend:DI (reg:SI 0 ax [412]))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 15 (parallel [
            (set (reg:DI 0 ax [orig:144 D.6678 ] [144])
                (ashift:DI (reg:DI 0 ax [orig:143 D.6678 ] [143])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 512 {*ashldi3_1}
     (nil))
(insn 179 178 180 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:144 D.6678 ] [144])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(call_insn 180 179 181 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:150 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 181 180 182 15 (set (reg/f:DI 0 ax [413])
        (reg:DI 0 ax)) fmtext_o.cpp:150 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [413])
        (nil)))
(insn 182 181 183 15 (set (reg/f:DI 1 dx [orig:145 D.6688 ] [145])
        (reg/f:DI 0 ax [413])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 183 182 184 15 (set (reg:SI 0 ax [415])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 184 183 185 15 (set (reg:DI 0 ax [414])
        (sign_extend:DI (reg:SI 0 ax [415]))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (nil))
(insn 185 184 1132 15 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [414])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:142 D.6689 ] [142])) [0 *_135 S8 A64])
        (reg/f:DI 1 dx [orig:145 D.6688 ] [145])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(jump_insn 1132 185 1133 15 (set (pc)
        (label_ref 240)) fmtext_o.cpp:150 654 {jump}
     (nil)
 -> 240)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1133 1132 188)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 416
(code_label 188 1133 189 16 20 "" [1 uses])
(note 189 188 190 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 190 189 191 16 (set (reg/f:DI 0 ax [416])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:151 89 {*movdi_internal}
     (nil))
(insn 191 190 192 16 (set (reg/f:DI 0 ax [orig:120 D.6683 ] [120])
        (mem/f:DI (reg/f:DI 0 ax [416]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:151 89 {*movdi_internal}
     (nil))
(insn 192 191 193 16 (set (reg:HI 0 ax [orig:121 D.6685 ] [121])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:120 D.6683 ] [120])
                (const_int 26 [0x1a])) [0 _105->status.number+0 S2 A16])) fmtext_o.cpp:151 92 {*movhi_internal}
     (nil))
(insn 193 192 194 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:121 D.6685 ] [121])
            (const_int 73 [0x49]))) fmtext_o.cpp:151 6 {*cmphi_1}
     (nil))
(jump_insn 194 193 195 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) fmtext_o.cpp:151 612 {*jcc_1}
     (nil)
 -> 240)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 123 124 125 126 127 128 129 130 131 132 133 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434
(note 195 194 196 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 17 (set (reg:SI 0 ax [417])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 197 196 198 17 (set (reg:DI 1 dx [orig:122 D.6678 ] [122])
        (sign_extend:DI (reg:SI 0 ax [417]))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 17 (set (reg:DI 0 ax [418])
        (reg:DI 1 dx [orig:122 D.6678 ] [122])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 199 198 200 17 (parallel [
            (set (reg:DI 0 ax [418])
                (ashift:DI (reg:DI 0 ax [418])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 512 {*ashldi3_1}
     (nil))
(insn 200 199 201 17 (parallel [
            (set (reg:DI 0 ax [418])
                (plus:DI (reg:DI 0 ax [418])
                    (reg:DI 1 dx [orig:122 D.6678 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:122 D.6678 ] [122])
            (const_int 5 [0x5]))
        (nil)))
(insn 201 200 202 17 (parallel [
            (set (reg:DI 1 dx [419])
                (ashift:DI (reg:DI 0 ax [418])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 512 {*ashldi3_1}
     (nil))
(insn 202 201 203 17 (parallel [
            (set (reg:DI 0 ax [418])
                (plus:DI (reg:DI 0 ax [418])
                    (reg:DI 1 dx [419])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 218 {*adddi_1}
     (nil))
(insn 203 202 204 17 (parallel [
            (set (reg:DI 0 ax [420])
                (ashift:DI (reg:DI 0 ax [418])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 512 {*ashldi3_1}
     (nil))
(insn 204 203 205 17 (set (reg:DI 0 ax [418])
        (reg:DI 0 ax [420])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 205 204 206 17 (set (reg:DI 1 dx [orig:123 D.6678 ] [123])
        (reg:DI 0 ax [418])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 206 205 207 17 (set (reg/f:DI 0 ax [421])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 207 206 208 17 (parallel [
            (set (reg/f:DI 3 bx [orig:124 D.6687 ] [124])
                (plus:DI (reg:DI 1 dx [orig:123 D.6678 ] [123])
                    (reg/f:DI 0 ax [421])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.6678 ] [123]))
        (nil)))
(insn 208 207 209 17 (set (reg:SI 0 ax [422])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 209 208 210 17 (set (reg:DI 0 ax [orig:125 D.6678 ] [125])
        (sign_extend:DI (reg:SI 0 ax [422]))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 210 209 211 17 (parallel [
            (set (reg:DI 0 ax [orig:126 D.6678 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.6678 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 512 {*ashldi3_1}
     (nil))
(insn 211 210 212 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:126 D.6678 ] [126])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn 212 211 213 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:152 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 213 212 214 17 (set (reg/f:DI 0 ax [423])
        (reg:DI 0 ax)) fmtext_o.cpp:152 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [423])
        (nil)))
(insn 214 213 215 17 (set (reg/f:DI 1 dx [orig:127 D.6688 ] [127])
        (reg/f:DI 0 ax [423])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 215 214 216 17 (set (reg:SI 0 ax [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 216 215 217 17 (set (reg:DI 0 ax [424])
        (sign_extend:DI (reg:SI 0 ax [425]))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 217 216 218 17 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [424])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:124 D.6687 ] [124])) [0 *_110 S8 A64])
        (reg/f:DI 1 dx [orig:127 D.6688 ] [127])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 218 217 219 17 (set (reg:SI 0 ax [426])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 219 218 220 17 (set (reg:DI 1 dx [orig:128 D.6678 ] [128])
        (sign_extend:DI (reg:SI 0 ax [426]))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (nil))
(insn 220 219 221 17 (set (reg:DI 0 ax [427])
        (reg:DI 1 dx [orig:128 D.6678 ] [128])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 221 220 222 17 (parallel [
            (set (reg:DI 0 ax [427])
                (ashift:DI (reg:DI 0 ax [427])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 512 {*ashldi3_1}
     (nil))
(insn 222 221 223 17 (parallel [
            (set (reg:DI 0 ax [427])
                (plus:DI (reg:DI 0 ax [427])
                    (reg:DI 1 dx [orig:128 D.6678 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:128 D.6678 ] [128])
            (const_int 5 [0x5]))
        (nil)))
(insn 223 222 224 17 (parallel [
            (set (reg:DI 1 dx [428])
                (ashift:DI (reg:DI 0 ax [427])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 512 {*ashldi3_1}
     (nil))
(insn 224 223 225 17 (parallel [
            (set (reg:DI 0 ax [427])
                (plus:DI (reg:DI 0 ax [427])
                    (reg:DI 1 dx [428])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 218 {*adddi_1}
     (nil))
(insn 225 224 226 17 (parallel [
            (set (reg:DI 0 ax [429])
                (ashift:DI (reg:DI 0 ax [427])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 512 {*ashldi3_1}
     (nil))
(insn 226 225 227 17 (set (reg:DI 0 ax [427])
        (reg:DI 0 ax [429])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 227 226 228 17 (set (reg:DI 1 dx [orig:129 D.6678 ] [129])
        (reg:DI 0 ax [427])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 228 227 229 17 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 229 228 230 17 (parallel [
            (set (reg/f:DI 3 bx [orig:130 D.6689 ] [130])
                (plus:DI (reg:DI 1 dx [orig:129 D.6678 ] [129])
                    (reg/f:DI 0 ax [430])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.6678 ] [129]))
        (nil)))
(insn 230 229 231 17 (set (reg:SI 0 ax [431])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 231 230 232 17 (set (reg:DI 0 ax [orig:131 D.6678 ] [131])
        (sign_extend:DI (reg:SI 0 ax [431]))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 17 (parallel [
            (set (reg:DI 0 ax [orig:132 D.6678 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:131 D.6678 ] [131])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 512 {*ashldi3_1}
     (nil))
(insn 233 232 234 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:132 D.6678 ] [132])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(call_insn 234 233 235 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:153 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 235 234 236 17 (set (reg/f:DI 0 ax [432])
        (reg:DI 0 ax)) fmtext_o.cpp:153 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [432])
        (nil)))
(insn 236 235 237 17 (set (reg/f:DI 1 dx [orig:133 D.6688 ] [133])
        (reg/f:DI 0 ax [432])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 237 236 238 17 (set (reg:SI 0 ax [434])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 238 237 239 17 (set (reg:DI 0 ax [433])
        (sign_extend:DI (reg:SI 0 ax [434]))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (nil))
(insn 239 238 240 17 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [433])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:130 D.6689 ] [130])) [0 *_119 S8 A64])
        (reg/f:DI 1 dx [orig:133 D.6688 ] [133])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              16
;;              15 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 240 239 241 18 21 "" [2 uses])
(note 241 240 242 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 1134 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:145 217 {*addsi_1}
     (nil))
(jump_insn 1134 242 1135 18 (set (pc)
        (label_ref 243)) fmtext_o.cpp:145 654 {jump}
     (nil)
 -> 243)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1135 1134 246)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 246 1135 247 19 18 "" [1 uses])
(note 247 246 248 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 1136 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:143 217 {*addsi_1}
     (nil))
(jump_insn 1136 248 1137 19 (set (pc)
        (label_ref 249)) fmtext_o.cpp:143 654 {jump}
     (nil)
 -> 249)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1137 1136 252)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 252 1137 253 20 17 "" [1 uses])
(note 253 252 254 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 384 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:161 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              31 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 435
(code_label 384 254 255 21 31 "" [1 uses])
(note 255 384 256 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 21 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 257 256 258 21 (set (reg/f:DI 0 ax [orig:146 D.6683 ] [146])
        (mem/f:DI (reg/f:DI 0 ax [435]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 258 257 259 21 (set (reg:SI 0 ax [orig:147 D.6677 ] [147])
        (mem/j:SI (reg/f:DI 0 ax [orig:146 D.6683 ] [146]) [0 _144->nblocks.number+0 S4 A32])) fmtext_o.cpp:161 90 {*movsi_internal}
     (nil))
(insn 259 258 260 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:147 D.6677 ] [147])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:161 7 {*cmpsi_1}
     (nil))
(jump_insn 260 259 261 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 387)
            (pc))) fmtext_o.cpp:161 612 {*jcc_1}
     (nil)
 -> 387)
;;  succ:       32
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 148 149 436 437
(note 261 260 262 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 262 261 263 22 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 263 262 264 22 (set (reg/f:DI 1 dx [orig:148 D.6682 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [436]) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 264 263 265 22 (set (reg/f:DI 0 ax [437])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 block_header+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 265 264 266 22 (set (reg/f:DI 0 ax [orig:149 D.6690 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [437]) [0 *block_header_147(D)+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 266 265 267 22 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:148 D.6682 ] [148])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 267 266 268 22 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 268 267 269 22 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 269 268 270 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:149 D.6690 ] [149])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(call_insn 270 269 271 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:163 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 271 270 378 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:166 90 {*movsi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;;              30 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 438
(code_label 378 271 272 23 30 "" [1 uses])
(note 272 378 273 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 273 272 274 23 (set (reg/f:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:166 89 {*movdi_internal}
     (nil))
(insn 274 273 275 23 (set (reg/f:DI 0 ax [orig:150 D.6683 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [438]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:166 89 {*movdi_internal}
     (nil))
(insn 275 274 276 23 (set (reg:SI 0 ax [orig:151 D.6677 ] [151])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:150 D.6683 ] [150])
                (const_int 4 [0x4])) [0 _151->ntraces.number+0 S4 A32])) fmtext_o.cpp:166 90 {*movsi_internal}
     (nil))
(insn 276 275 277 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:151 D.6677 ] [151])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32]))) fmtext_o.cpp:166 7 {*cmpsi_1}
     (nil))
(jump_insn 277 276 278 23 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 381)
            (pc))) fmtext_o.cpp:166 612 {*jcc_1}
     (nil)
 -> 381)
;;  succ:       31
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 439
(note 278 277 279 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 280 24 (set (reg/f:DI 0 ax [439])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 280 279 281 24 (set (reg/f:DI 0 ax [orig:152 D.6683 ] [152])
        (mem/f:DI (reg/f:DI 0 ax [439]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 281 280 282 24 (set (reg:HI 0 ax [orig:153 D.6685 ] [153])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:152 D.6683 ] [152])
                (const_int 26 [0x1a])) [0 _153->status.number+0 S2 A16])) fmtext_o.cpp:168 92 {*movhi_internal}
     (nil))
(insn 282 281 283 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:153 D.6685 ] [153])
            (const_int 69 [0x45]))) fmtext_o.cpp:168 6 {*cmphi_1}
     (nil))
(jump_insn 283 282 284 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) fmtext_o.cpp:168 612 {*jcc_1}
     (nil)
 -> 294)
;;  succ:       26
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 158 440 441
(note 284 283 285 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 25 (set (reg:SI 0 ax [440])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:168 90 {*movsi_internal}
     (nil))
(insn 286 285 287 25 (set (reg:DI 0 ax [orig:154 D.6678 ] [154])
        (sign_extend:DI (reg:SI 0 ax [440]))) fmtext_o.cpp:168 142 {*extendsidi2_rex64}
     (nil))
(insn 287 286 288 25 (parallel [
            (set (reg:DI 1 dx [orig:155 D.6678 ] [155])
                (ashift:DI (reg:DI 0 ax [orig:154 D.6678 ] [154])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:168 512 {*ashldi3_1}
     (nil))
(insn 288 287 289 25 (set (reg/f:DI 0 ax [441])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 289 288 290 25 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.6686 ] [156])
                (plus:DI (reg/f:DI 0 ax [441])
                    (reg:DI 1 dx [orig:155 D.6678 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:168 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.6678 ] [155]))
        (nil)))
(insn 290 289 291 25 (set (reg/f:DI 0 ax [orig:157 D.6683 ] [157])
        (mem/f:DI (reg/f:DI 0 ax [orig:156 D.6686 ] [156]) [0 *_157+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 291 290 292 25 (set (reg:HI 0 ax [orig:158 D.6685 ] [158])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:157 D.6683 ] [157])
                (const_int 26 [0x1a])) [0 _158->status.number+0 S2 A16])) fmtext_o.cpp:168 92 {*movhi_internal}
     (nil))
(insn 292 291 293 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:158 D.6685 ] [158])
            (const_int 2073 [0x819]))) fmtext_o.cpp:168 6 {*cmphi_1}
     (nil))
(jump_insn 293 292 294 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 328)
            (pc))) fmtext_o.cpp:168 612 {*jcc_1}
     (nil)
 -> 328)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 172 173 174 175 176 177 178 179 180 181 182 442 443 444 445 446 447 448 449 450 451
(code_label 294 293 295 26 26 "" [1 uses])
(note 295 294 296 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 296 295 297 26 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 297 296 298 26 (set (reg/f:DI 2 cx [orig:172 D.6682 ] [172])
        (mem/f:DI (reg/f:DI 0 ax [442]) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 298 297 299 26 (set (reg/f:DI 0 ax [443])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 299 298 300 26 (set (reg/f:DI 0 ax [orig:173 D.6683 ] [173])
        (mem/f:DI (reg/f:DI 0 ax [443]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 300 299 301 26 (set (reg:SI 1 dx [orig:174 D.6677 ] [174])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:173 D.6683 ] [173])
                (const_int 8 [0x8])) [0 _177->np.number+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 301 300 302 26 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 302 301 303 26 (set (reg/f:DI 0 ax [orig:175 D.6683 ] [175])
        (mem/f:DI (reg/f:DI 0 ax [444]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 303 302 304 26 (set (reg:SI 0 ax [orig:176 D.6677 ] [176])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:175 D.6683 ] [175])
                (const_int 12 [0xc])) [0 _179->ebytes.number+0 S4 A32])) fmtext_o.cpp:170 90 {*movsi_internal}
     (nil))
(insn 304 303 305 26 (parallel [
            (set (reg:SI 0 ax [orig:177 D.6677 ] [177])
                (mult:SI (reg:SI 0 ax [orig:176 D.6677 ] [176])
                    (reg:SI 1 dx [orig:174 D.6677 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 305 {*mulsi3_1}
     (nil))
(insn 305 304 306 26 (set (reg:DI 4 si [orig:178 D.6678 ] [178])
        (sign_extend:DI (reg:SI 0 ax [orig:177 D.6677 ] [177]))) fmtext_o.cpp:169 142 {*extendsidi2_rex64}
     (nil))
(insn 306 305 307 26 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 307 306 308 26 (set (reg:DI 1 dx [orig:179 D.6678 ] [179])
        (sign_extend:DI (reg:SI 0 ax [445]))) fmtext_o.cpp:169 142 {*extendsidi2_rex64}
     (nil))
(insn 308 307 309 26 (set (reg:DI 0 ax [446])
        (reg:DI 1 dx [orig:179 D.6678 ] [179])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 309 308 310 26 (parallel [
            (set (reg:DI 0 ax [446])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 512 {*ashldi3_1}
     (nil))
(insn 310 309 311 26 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg:DI 0 ax [446])
                    (reg:DI 1 dx [orig:179 D.6678 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:179 D.6678 ] [179])
            (const_int 5 [0x5]))
        (nil)))
(insn 311 310 312 26 (parallel [
            (set (reg:DI 1 dx [447])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 512 {*ashldi3_1}
     (nil))
(insn 312 311 313 26 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg:DI 0 ax [446])
                    (reg:DI 1 dx [447])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 218 {*adddi_1}
     (nil))
(insn 313 312 314 26 (parallel [
            (set (reg:DI 0 ax [448])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 512 {*ashldi3_1}
     (nil))
(insn 314 313 315 26 (set (reg:DI 0 ax [446])
        (reg:DI 0 ax [448])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 315 314 316 26 (set (reg:DI 1 dx [orig:180 D.6678 ] [180])
        (reg:DI 0 ax [446])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 316 315 317 26 (set (reg/f:DI 0 ax [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 317 316 318 26 (parallel [
            (set (reg/f:DI 1 dx [orig:181 D.6687 ] [181])
                (plus:DI (reg:DI 1 dx [orig:180 D.6678 ] [180])
                    (reg/f:DI 0 ax [449])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:180 D.6678 ] [180]))
        (nil)))
(insn 318 317 319 26 (set (reg:SI 0 ax [451])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 319 318 320 26 (set (reg:DI 0 ax [450])
        (sign_extend:DI (reg:SI 0 ax [451]))) fmtext_o.cpp:169 142 {*extendsidi2_rex64}
     (nil))
(insn 320 319 322 26 (set (reg/f:DI 0 ax [orig:182 D.6691 ] [182])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [450])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:181 D.6687 ] [181])) [0 *_185 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 322 320 324 26 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 324 322 325 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:182 D.6691 ] [182])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(call_insn 325 324 1138 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:170 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 1138 325 1139 26 (set (pc)
        (label_ref 375)) fmtext_o.cpp:170 654 {jump}
     (nil)
 -> 375)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1139 1138 328)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159 160 452
(code_label 328 1139 329 27 27 "" [1 uses])
(note 329 328 330 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 330 329 331 27 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:171 89 {*movdi_internal}
     (nil))
(insn 331 330 332 27 (set (reg/f:DI 0 ax [orig:159 D.6683 ] [159])
        (mem/f:DI (reg/f:DI 0 ax [452]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:171 89 {*movdi_internal}
     (nil))
(insn 332 331 333 27 (set (reg:HI 0 ax [orig:160 D.6685 ] [160])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:159 D.6683 ] [159])
                (const_int 26 [0x1a])) [0 _160->status.number+0 S2 A16])) fmtext_o.cpp:171 92 {*movhi_internal}
     (nil))
(insn 333 332 334 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:160 D.6685 ] [160])
            (const_int 73 [0x49]))) fmtext_o.cpp:171 6 {*cmphi_1}
     (nil))
(jump_insn 334 333 335 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 368)
            (pc))) fmtext_o.cpp:171 612 {*jcc_1}
     (nil)
 -> 368)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 161 162 163 164 165 166 167 168 169 170 171 453 454 455 456 457 458 459 460 461 462
(note 335 334 336 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 336 335 337 28 (set (reg/f:DI 0 ax [453])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 337 336 338 28 (set (reg/f:DI 2 cx [orig:161 D.6682 ] [161])
        (mem/f:DI (reg/f:DI 0 ax [453]) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 338 337 339 28 (set (reg/f:DI 0 ax [454])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 339 338 340 28 (set (reg/f:DI 0 ax [orig:162 D.6683 ] [162])
        (mem/f:DI (reg/f:DI 0 ax [454]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 340 339 341 28 (set (reg:SI 1 dx [orig:163 D.6677 ] [163])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:162 D.6683 ] [162])
                (const_int 8 [0x8])) [0 _163->np.number+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 341 340 342 28 (set (reg/f:DI 0 ax [455])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 342 341 343 28 (set (reg/f:DI 0 ax [orig:164 D.6683 ] [164])
        (mem/f:DI (reg/f:DI 0 ax [455]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 343 342 344 28 (set (reg:SI 0 ax [orig:165 D.6677 ] [165])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:164 D.6683 ] [164])
                (const_int 12 [0xc])) [0 _165->ebytes.number+0 S4 A32])) fmtext_o.cpp:173 90 {*movsi_internal}
     (nil))
(insn 344 343 345 28 (parallel [
            (set (reg:SI 0 ax [orig:166 D.6677 ] [166])
                (mult:SI (reg:SI 0 ax [orig:165 D.6677 ] [165])
                    (reg:SI 1 dx [orig:163 D.6677 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 305 {*mulsi3_1}
     (nil))
(insn 345 344 346 28 (set (reg:DI 4 si [orig:167 D.6678 ] [167])
        (sign_extend:DI (reg:SI 0 ax [orig:166 D.6677 ] [166]))) fmtext_o.cpp:172 142 {*extendsidi2_rex64}
     (nil))
(insn 346 345 347 28 (set (reg:SI 0 ax [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 347 346 348 28 (set (reg:DI 1 dx [orig:168 D.6678 ] [168])
        (sign_extend:DI (reg:SI 0 ax [456]))) fmtext_o.cpp:172 142 {*extendsidi2_rex64}
     (nil))
(insn 348 347 349 28 (set (reg:DI 0 ax [457])
        (reg:DI 1 dx [orig:168 D.6678 ] [168])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 349 348 350 28 (parallel [
            (set (reg:DI 0 ax [457])
                (ashift:DI (reg:DI 0 ax [457])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 512 {*ashldi3_1}
     (nil))
(insn 350 349 351 28 (parallel [
            (set (reg:DI 0 ax [457])
                (plus:DI (reg:DI 0 ax [457])
                    (reg:DI 1 dx [orig:168 D.6678 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:168 D.6678 ] [168])
            (const_int 5 [0x5]))
        (nil)))
(insn 351 350 352 28 (parallel [
            (set (reg:DI 1 dx [458])
                (ashift:DI (reg:DI 0 ax [457])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 512 {*ashldi3_1}
     (nil))
(insn 352 351 353 28 (parallel [
            (set (reg:DI 0 ax [457])
                (plus:DI (reg:DI 0 ax [457])
                    (reg:DI 1 dx [458])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 218 {*adddi_1}
     (nil))
(insn 353 352 354 28 (parallel [
            (set (reg:DI 0 ax [459])
                (ashift:DI (reg:DI 0 ax [457])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 512 {*ashldi3_1}
     (nil))
(insn 354 353 355 28 (set (reg:DI 0 ax [457])
        (reg:DI 0 ax [459])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 355 354 356 28 (set (reg:DI 1 dx [orig:169 D.6678 ] [169])
        (reg:DI 0 ax [457])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 356 355 357 28 (set (reg/f:DI 0 ax [460])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 357 356 358 28 (parallel [
            (set (reg/f:DI 1 dx [orig:170 D.6687 ] [170])
                (plus:DI (reg:DI 1 dx [orig:169 D.6678 ] [169])
                    (reg/f:DI 0 ax [460])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:169 D.6678 ] [169]))
        (nil)))
(insn 358 357 359 28 (set (reg:SI 0 ax [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 359 358 360 28 (set (reg:DI 0 ax [461])
        (sign_extend:DI (reg:SI 0 ax [462]))) fmtext_o.cpp:172 142 {*extendsidi2_rex64}
     (nil))
(insn 360 359 362 28 (set (reg/f:DI 0 ax [orig:171 D.6691 ] [171])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [461])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:170 D.6687 ] [170])) [0 *_171 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 362 360 364 28 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 364 362 365 28 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:171 D.6691 ] [171])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(call_insn 365 364 1140 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:173 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 1140 365 1141 28 (set (pc)
        (label_ref 375)) 654 {jump}
     (nil)
 -> 375)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1141 1140 368)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 368 1141 369 29 29 "" [1 uses])
(note 369 368 370 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 370 369 371 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f93b22b15a0 *.LC18>)) fmtext_o.cpp:175 89 {*movdi_internal}
     (nil))
(call_insn 371 370 372 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:175 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 372 371 373 29 (set (reg:SI 5 di)
        (const_int 6 [0x6])) fmtext_o.cpp:176 90 {*movsi_internal}
     (nil))
(call_insn 373 372 374 29 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f93b27d2ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:176 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 374 373 375)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 [100.0%] 
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 375 374 376 30 28 "" [2 uses])
(note 376 375 377 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 1142 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:166 217 {*addsi_1}
     (nil))
(jump_insn 1142 377 1143 30 (set (pc)
        (label_ref 378)) fmtext_o.cpp:166 654 {jump}
     (nil)
 -> 378)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1143 1142 381)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 381 1143 382 31 25 "" [1 uses])
(note 382 381 383 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 1144 31 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:161 217 {*addsi_1}
     (nil))
(jump_insn 1144 383 1145 31 (set (pc)
        (label_ref 384)) fmtext_o.cpp:161 654 {jump}
     (nil)
 -> 384)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1145 1144 387)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 387 1145 388 32 24 "" [1 uses])
(note 388 387 389 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 389 388 581 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:183 90 {*movsi_internal}
     (nil))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;;              40 [100.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 183 184 463
(code_label 581 389 390 33 37 "" [1 uses])
(note 390 581 391 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 391 390 392 33 (set (reg/f:DI 0 ax [463])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:183 89 {*movdi_internal}
     (nil))
(insn 392 391 393 33 (set (reg/f:DI 0 ax [orig:183 D.6683 ] [183])
        (mem/f:DI (reg/f:DI 0 ax [463]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:183 89 {*movdi_internal}
     (nil))
(insn 393 392 394 33 (set (reg:SI 0 ax [orig:184 D.6677 ] [184])
        (mem/j:SI (reg/f:DI 0 ax [orig:183 D.6683 ] [183]) [0 _191->nblocks.number+0 S4 A32])) fmtext_o.cpp:183 90 {*movsi_internal}
     (nil))
(insn 394 393 395 33 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:184 D.6677 ] [184])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:183 7 {*cmpsi_1}
     (nil))
(jump_insn 395 394 396 33 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 584)
            (pc))) fmtext_o.cpp:183 612 {*jcc_1}
     (nil)
 -> 584)
;;  succ:       41
;;              34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 396 395 397 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 397 396 575 34 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              39 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 185 186 464
(code_label 575 397 398 35 36 "" [1 uses])
(note 398 575 399 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 399 398 400 35 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 400 399 401 35 (set (reg/f:DI 0 ax [orig:185 D.6683 ] [185])
        (mem/f:DI (reg/f:DI 0 ax [464]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 401 400 402 35 (set (reg:SI 0 ax [orig:186 D.6677 ] [186])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:185 D.6683 ] [185])
                (const_int 4 [0x4])) [0 _194->ntraces.number+0 S4 A32])) fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
(insn 402 401 403 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:186 D.6677 ] [186])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32]))) fmtext_o.cpp:185 7 {*cmpsi_1}
     (nil))
(jump_insn 403 402 404 35 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) fmtext_o.cpp:185 612 {*jcc_1}
     (nil)
 -> 578)
;;  succ:       40
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 404 403 405 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 405 404 569 36 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;;              38 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 187 188 189 190 191 192 193 465
(code_label 569 405 406 37 35 "" [1 uses])
(note 406 569 407 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 37 (set (reg/f:DI 0 ax [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:187 89 {*movdi_internal}
     (nil))
(insn 408 407 409 37 (set (reg/f:DI 0 ax [orig:187 D.6683 ] [187])
        (mem/f:DI (reg/f:DI 0 ax [465]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:187 89 {*movdi_internal}
     (nil))
(insn 409 408 410 37 (set (reg:SI 0 ax [orig:188 D.6677 ] [188])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:187 D.6683 ] [187])
                (const_int 8 [0x8])) [0 _197->np.number+0 S4 A32])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 410 409 411 37 (set (reg:DI 0 ax [orig:189 D.6678 ] [189])
        (sign_extend:DI (reg:SI 0 ax [orig:188 D.6677 ] [188]))) fmtext_o.cpp:187 142 {*extendsidi2_rex64}
     (nil))
(insn 411 410 412 37 (set (reg:SI 1 dx [orig:190 D.6692 ] [190])
        (reg:SI 0 ax [orig:189 D.6678 ] [189])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 412 411 413 37 (set (reg:SI 0 ax [orig:191 D.6692 ] [191])
        (const_int 8 [0x8])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 413 412 414 37 (parallel [
            (set (reg:SI 0 ax [orig:192 D.6692 ] [192])
                (mult:SI (reg:SI 0 ax [orig:191 D.6692 ] [191])
                    (reg:SI 1 dx [orig:190 D.6692 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:187 305 {*mulsi3_1}
     (nil))
(insn 414 413 415 37 (set (reg:SI 0 ax [orig:193 D.6677 ] [193])
        (reg:SI 0 ax [orig:192 D.6692 ] [192])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 415 414 416 37 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:193 D.6677 ] [193])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32]))) fmtext_o.cpp:187 7 {*cmpsi_1}
     (nil))
(jump_insn 416 415 417 37 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 572)
            (pc))) fmtext_o.cpp:187 612 {*jcc_1}
     (nil)
 -> 572)
;;  succ:       39
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537
(note 417 416 418 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 419 38 (set (reg:SI 0 ax [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 419 418 420 38 (set (reg:DI 1 dx [orig:194 D.6678 ] [194])
        (sign_extend:DI (reg:SI 0 ax [466]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 420 419 421 38 (set (reg:DI 0 ax [467])
        (reg:DI 1 dx [orig:194 D.6678 ] [194])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 421 420 422 38 (parallel [
            (set (reg:DI 0 ax [467])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (nil))
(insn 422 421 423 38 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg:DI 0 ax [467])
                    (reg:DI 1 dx [orig:194 D.6678 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:194 D.6678 ] [194])
            (const_int 5 [0x5]))
        (nil)))
(insn 423 422 424 38 (parallel [
            (set (reg:DI 1 dx [468])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (nil))
(insn 424 423 425 38 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg:DI 0 ax [467])
                    (reg:DI 1 dx [468])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (nil))
(insn 425 424 426 38 (parallel [
            (set (reg:DI 0 ax [469])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (nil))
(insn 426 425 427 38 (set (reg:DI 0 ax [467])
        (reg:DI 0 ax [469])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 427 426 428 38 (set (reg:DI 1 dx [orig:195 D.6678 ] [195])
        (reg:DI 0 ax [467])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 428 427 429 38 (set (reg/f:DI 0 ax [470])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 429 428 430 38 (parallel [
            (set (reg/f:DI 1 dx [orig:196 D.6689 ] [196])
                (plus:DI (reg:DI 1 dx [orig:195 D.6678 ] [195])
                    (reg/f:DI 0 ax [470])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:195 D.6678 ] [195]))
        (nil)))
(insn 430 429 431 38 (set (reg:SI 0 ax [472])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 431 430 432 38 (set (reg:DI 0 ax [471])
        (sign_extend:DI (reg:SI 0 ax [472]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 432 431 433 38 (set (reg/f:DI 2 cx [orig:197 D.6693 ] [197])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [471])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:196 D.6689 ] [196])) [0 *_206 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 433 432 434 38 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 434 433 435 38 (set (reg:DI 1 dx [orig:198 D.6678 ] [198])
        (sign_extend:DI (reg:SI 0 ax [473]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 435 434 436 38 (set (reg:DI 0 ax [474])
        (reg:DI 1 dx [orig:198 D.6678 ] [198])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 436 435 437 38 (parallel [
            (set (reg:DI 0 ax [474])
                (ashift:DI (reg:DI 0 ax [474])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (nil))
(insn 437 436 438 38 (parallel [
            (set (reg:DI 0 ax [474])
                (plus:DI (reg:DI 0 ax [474])
                    (reg:DI 1 dx [orig:198 D.6678 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:198 D.6678 ] [198])
            (const_int 5 [0x5]))
        (nil)))
(insn 438 437 439 38 (parallel [
            (set (reg:DI 1 dx [475])
                (ashift:DI (reg:DI 0 ax [474])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (nil))
(insn 439 438 440 38 (parallel [
            (set (reg:DI 0 ax [474])
                (plus:DI (reg:DI 0 ax [474])
                    (reg:DI 1 dx [475])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (nil))
(insn 440 439 441 38 (parallel [
            (set (reg:DI 0 ax [476])
                (ashift:DI (reg:DI 0 ax [474])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (nil))
(insn 441 440 442 38 (set (reg:DI 0 ax [474])
        (reg:DI 0 ax [476])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 442 441 443 38 (set (reg:DI 1 dx [orig:199 D.6678 ] [199])
        (reg:DI 0 ax [474])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 443 442 444 38 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 444 443 445 38 (parallel [
            (set (reg/f:DI 1 dx [orig:200 D.6687 ] [200])
                (plus:DI (reg:DI 1 dx [orig:199 D.6678 ] [199])
                    (reg/f:DI 0 ax [477])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:199 D.6678 ] [199]))
        (nil)))
(insn 445 444 446 38 (set (reg:SI 0 ax [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 446 445 447 38 (set (reg:DI 0 ax [478])
        (sign_extend:DI (reg:SI 0 ax [479]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 447 446 448 38 (set (reg/f:DI 1 dx [orig:201 D.6691 ] [201])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [478])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:200 D.6687 ] [200])) [0 *_210 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 448 447 449 38 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 449 448 450 38 (set (reg:DI 0 ax [480])
        (sign_extend:DI (reg:SI 0 ax [481]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 450 449 451 38 (set (reg:QI 1 dx [orig:202 D.6694 ] [202])
        (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:201 D.6691 ] [201])
                (reg:DI 0 ax [480])) [0 _211->character S1 A8])) fmtext_o.cpp:189 93 {*movqi_internal}
     (nil))
(insn 451 450 452 38 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 452 451 453 38 (set (reg:DI 0 ax [482])
        (sign_extend:DI (reg:SI 0 ax [483]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 453 452 454 38 (set (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:197 D.6693 ] [197])
                (reg:DI 0 ax [482])) [0 _207->character S1 A8])
        (reg:QI 1 dx [orig:202 D.6694 ] [202])) fmtext_o.cpp:189 93 {*movqi_internal}
     (nil))
(insn 454 453 455 38 (set (reg:SI 0 ax [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 455 454 456 38 (set (reg:DI 1 dx [orig:203 D.6678 ] [203])
        (sign_extend:DI (reg:SI 0 ax [484]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 456 455 457 38 (set (reg:DI 0 ax [485])
        (reg:DI 1 dx [orig:203 D.6678 ] [203])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 457 456 458 38 (parallel [
            (set (reg:DI 0 ax [485])
                (ashift:DI (reg:DI 0 ax [485])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 458 457 459 38 (parallel [
            (set (reg:DI 0 ax [485])
                (plus:DI (reg:DI 0 ax [485])
                    (reg:DI 1 dx [orig:203 D.6678 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:203 D.6678 ] [203])
            (const_int 5 [0x5]))
        (nil)))
(insn 459 458 460 38 (parallel [
            (set (reg:DI 1 dx [486])
                (ashift:DI (reg:DI 0 ax [485])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 460 459 461 38 (parallel [
            (set (reg:DI 0 ax [485])
                (plus:DI (reg:DI 0 ax [485])
                    (reg:DI 1 dx [486])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (nil))
(insn 461 460 462 38 (parallel [
            (set (reg:DI 0 ax [487])
                (ashift:DI (reg:DI 0 ax [485])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 462 461 463 38 (set (reg:DI 0 ax [485])
        (reg:DI 0 ax [487])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 463 462 464 38 (set (reg:DI 1 dx [orig:204 D.6678 ] [204])
        (reg:DI 0 ax [485])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 464 463 465 38 (set (reg/f:DI 0 ax [488])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 465 464 466 38 (parallel [
            (set (reg/f:DI 1 dx [orig:205 D.6689 ] [205])
                (plus:DI (reg:DI 1 dx [orig:204 D.6678 ] [204])
                    (reg/f:DI 0 ax [488])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:204 D.6678 ] [204]))
        (nil)))
(insn 466 465 467 38 (set (reg:SI 0 ax [490])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 467 466 468 38 (set (reg:DI 0 ax [489])
        (sign_extend:DI (reg:SI 0 ax [490]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 468 467 469 38 (set (reg/f:DI 2 cx [orig:206 D.6693 ] [206])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [489])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:205 D.6689 ] [205])) [0 *_216 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 469 468 470 38 (set (reg:SI 0 ax [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 470 469 471 38 (parallel [
            (set (reg:SI 4 si [orig:207 D.6677 ] [207])
                (plus:SI (reg:SI 0 ax [491])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 471 470 472 38 (set (reg:SI 0 ax [492])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 472 471 473 38 (set (reg:DI 1 dx [orig:208 D.6678 ] [208])
        (sign_extend:DI (reg:SI 0 ax [492]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 473 472 474 38 (set (reg:DI 0 ax [493])
        (reg:DI 1 dx [orig:208 D.6678 ] [208])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 474 473 475 38 (parallel [
            (set (reg:DI 0 ax [493])
                (ashift:DI (reg:DI 0 ax [493])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 475 474 476 38 (parallel [
            (set (reg:DI 0 ax [493])
                (plus:DI (reg:DI 0 ax [493])
                    (reg:DI 1 dx [orig:208 D.6678 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:208 D.6678 ] [208])
            (const_int 5 [0x5]))
        (nil)))
(insn 476 475 477 38 (parallel [
            (set (reg:DI 1 dx [494])
                (ashift:DI (reg:DI 0 ax [493])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 477 476 478 38 (parallel [
            (set (reg:DI 0 ax [493])
                (plus:DI (reg:DI 0 ax [493])
                    (reg:DI 1 dx [494])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (nil))
(insn 478 477 479 38 (parallel [
            (set (reg:DI 0 ax [495])
                (ashift:DI (reg:DI 0 ax [493])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 479 478 480 38 (set (reg:DI 0 ax [493])
        (reg:DI 0 ax [495])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 480 479 481 38 (set (reg:DI 1 dx [orig:209 D.6678 ] [209])
        (reg:DI 0 ax [493])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 481 480 482 38 (set (reg/f:DI 0 ax [496])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 482 481 483 38 (parallel [
            (set (reg/f:DI 1 dx [orig:210 D.6687 ] [210])
                (plus:DI (reg:DI 1 dx [orig:209 D.6678 ] [209])
                    (reg/f:DI 0 ax [496])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:209 D.6678 ] [209]))
        (nil)))
(insn 483 482 484 38 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 484 483 485 38 (set (reg:DI 0 ax [497])
        (sign_extend:DI (reg:SI 0 ax [498]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 485 484 486 38 (set (reg/f:DI 1 dx [orig:211 D.6691 ] [211])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [497])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:210 D.6687 ] [210])) [0 *_221 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 486 485 487 38 (set (reg:SI 0 ax [499])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 487 486 488 38 (parallel [
            (set (reg:SI 0 ax [orig:212 D.6677 ] [212])
                (plus:SI (reg:SI 0 ax [499])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 488 487 489 38 (set (reg:DI 0 ax [500])
        (sign_extend:DI (reg:SI 0 ax [orig:212 D.6677 ] [212]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 489 488 490 38 (set (reg:QI 1 dx [orig:213 D.6694 ] [213])
        (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:211 D.6691 ] [211])
                (reg:DI 0 ax [500])) [0 _222->character S1 A8])) fmtext_o.cpp:190 93 {*movqi_internal}
     (nil))
(insn 490 489 491 38 (set (reg:DI 0 ax [501])
        (sign_extend:DI (reg:SI 4 si [orig:207 D.6677 ] [207]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 491 490 492 38 (set (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:206 D.6693 ] [206])
                (reg:DI 0 ax [501])) [0 _217->character S1 A8])
        (reg:QI 1 dx [orig:213 D.6694 ] [213])) fmtext_o.cpp:190 93 {*movqi_internal}
     (nil))
(insn 492 491 493 38 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 493 492 494 38 (set (reg:DI 1 dx [orig:214 D.6678 ] [214])
        (sign_extend:DI (reg:SI 0 ax [502]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 494 493 495 38 (set (reg:DI 0 ax [503])
        (reg:DI 1 dx [orig:214 D.6678 ] [214])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 495 494 496 38 (parallel [
            (set (reg:DI 0 ax [503])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (nil))
(insn 496 495 497 38 (parallel [
            (set (reg:DI 0 ax [503])
                (plus:DI (reg:DI 0 ax [503])
                    (reg:DI 1 dx [orig:214 D.6678 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:214 D.6678 ] [214])
            (const_int 5 [0x5]))
        (nil)))
(insn 497 496 498 38 (parallel [
            (set (reg:DI 1 dx [504])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (nil))
(insn 498 497 499 38 (parallel [
            (set (reg:DI 0 ax [503])
                (plus:DI (reg:DI 0 ax [503])
                    (reg:DI 1 dx [504])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (nil))
(insn 499 498 500 38 (parallel [
            (set (reg:DI 0 ax [505])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (nil))
(insn 500 499 501 38 (set (reg:DI 0 ax [503])
        (reg:DI 0 ax [505])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 501 500 502 38 (set (reg:DI 1 dx [orig:215 D.6678 ] [215])
        (reg:DI 0 ax [503])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 502 501 503 38 (set (reg/f:DI 0 ax [506])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 503 502 504 38 (parallel [
            (set (reg/f:DI 1 dx [orig:216 D.6689 ] [216])
                (plus:DI (reg:DI 1 dx [orig:215 D.6678 ] [215])
                    (reg/f:DI 0 ax [506])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:215 D.6678 ] [215]))
        (nil)))
(insn 504 503 505 38 (set (reg:SI 0 ax [508])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 505 504 506 38 (set (reg:DI 0 ax [507])
        (sign_extend:DI (reg:SI 0 ax [508]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 506 505 507 38 (set (reg/f:DI 2 cx [orig:217 D.6693 ] [217])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [507])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:216 D.6689 ] [216])) [0 *_228 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 507 506 508 38 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 508 507 509 38 (parallel [
            (set (reg:SI 4 si [orig:218 D.6677 ] [218])
                (plus:SI (reg:SI 0 ax [509])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 509 508 510 38 (set (reg:SI 0 ax [510])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 510 509 511 38 (set (reg:DI 1 dx [orig:219 D.6678 ] [219])
        (sign_extend:DI (reg:SI 0 ax [510]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 511 510 512 38 (set (reg:DI 0 ax [511])
        (reg:DI 1 dx [orig:219 D.6678 ] [219])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 512 511 513 38 (parallel [
            (set (reg:DI 0 ax [511])
                (ashift:DI (reg:DI 0 ax [511])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (nil))
(insn 513 512 514 38 (parallel [
            (set (reg:DI 0 ax [511])
                (plus:DI (reg:DI 0 ax [511])
                    (reg:DI 1 dx [orig:219 D.6678 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:219 D.6678 ] [219])
            (const_int 5 [0x5]))
        (nil)))
(insn 514 513 515 38 (parallel [
            (set (reg:DI 1 dx [512])
                (ashift:DI (reg:DI 0 ax [511])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (nil))
(insn 515 514 516 38 (parallel [
            (set (reg:DI 0 ax [511])
                (plus:DI (reg:DI 0 ax [511])
                    (reg:DI 1 dx [512])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (nil))
(insn 516 515 517 38 (parallel [
            (set (reg:DI 0 ax [513])
                (ashift:DI (reg:DI 0 ax [511])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (nil))
(insn 517 516 518 38 (set (reg:DI 0 ax [511])
        (reg:DI 0 ax [513])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 518 517 519 38 (set (reg:DI 1 dx [orig:220 D.6678 ] [220])
        (reg:DI 0 ax [511])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 519 518 520 38 (set (reg/f:DI 0 ax [514])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 520 519 521 38 (parallel [
            (set (reg/f:DI 1 dx [orig:221 D.6687 ] [221])
                (plus:DI (reg:DI 1 dx [orig:220 D.6678 ] [220])
                    (reg/f:DI 0 ax [514])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:220 D.6678 ] [220]))
        (nil)))
(insn 521 520 522 38 (set (reg:SI 0 ax [516])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 522 521 523 38 (set (reg:DI 0 ax [515])
        (sign_extend:DI (reg:SI 0 ax [516]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 523 522 524 38 (set (reg/f:DI 1 dx [orig:222 D.6691 ] [222])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [515])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:221 D.6687 ] [221])) [0 *_233 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 524 523 525 38 (set (reg:SI 0 ax [517])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 525 524 526 38 (parallel [
            (set (reg:SI 0 ax [orig:223 D.6677 ] [223])
                (plus:SI (reg:SI 0 ax [517])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 526 525 527 38 (set (reg:DI 0 ax [518])
        (sign_extend:DI (reg:SI 0 ax [orig:223 D.6677 ] [223]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 527 526 528 38 (set (reg:QI 1 dx [orig:224 D.6694 ] [224])
        (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:222 D.6691 ] [222])
                (reg:DI 0 ax [518])) [0 _234->character S1 A8])) fmtext_o.cpp:191 93 {*movqi_internal}
     (nil))
(insn 528 527 529 38 (set (reg:DI 0 ax [519])
        (sign_extend:DI (reg:SI 4 si [orig:218 D.6677 ] [218]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 529 528 530 38 (set (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:217 D.6693 ] [217])
                (reg:DI 0 ax [519])) [0 _229->character S1 A8])
        (reg:QI 1 dx [orig:224 D.6694 ] [224])) fmtext_o.cpp:191 93 {*movqi_internal}
     (nil))
(insn 530 529 531 38 (set (reg:SI 0 ax [520])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 531 530 532 38 (set (reg:DI 1 dx [orig:225 D.6678 ] [225])
        (sign_extend:DI (reg:SI 0 ax [520]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 532 531 533 38 (set (reg:DI 0 ax [521])
        (reg:DI 1 dx [orig:225 D.6678 ] [225])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 533 532 534 38 (parallel [
            (set (reg:DI 0 ax [521])
                (ashift:DI (reg:DI 0 ax [521])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (nil))
(insn 534 533 535 38 (parallel [
            (set (reg:DI 0 ax [521])
                (plus:DI (reg:DI 0 ax [521])
                    (reg:DI 1 dx [orig:225 D.6678 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:225 D.6678 ] [225])
            (const_int 5 [0x5]))
        (nil)))
(insn 535 534 536 38 (parallel [
            (set (reg:DI 1 dx [522])
                (ashift:DI (reg:DI 0 ax [521])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (nil))
(insn 536 535 537 38 (parallel [
            (set (reg:DI 0 ax [521])
                (plus:DI (reg:DI 0 ax [521])
                    (reg:DI 1 dx [522])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (nil))
(insn 537 536 538 38 (parallel [
            (set (reg:DI 0 ax [523])
                (ashift:DI (reg:DI 0 ax [521])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (nil))
(insn 538 537 539 38 (set (reg:DI 0 ax [521])
        (reg:DI 0 ax [523])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 539 538 540 38 (set (reg:DI 1 dx [orig:226 D.6678 ] [226])
        (reg:DI 0 ax [521])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 540 539 541 38 (set (reg/f:DI 0 ax [524])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 541 540 542 38 (parallel [
            (set (reg/f:DI 1 dx [orig:227 D.6689 ] [227])
                (plus:DI (reg:DI 1 dx [orig:226 D.6678 ] [226])
                    (reg/f:DI 0 ax [524])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:226 D.6678 ] [226]))
        (nil)))
(insn 542 541 543 38 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 543 542 544 38 (set (reg:DI 0 ax [525])
        (sign_extend:DI (reg:SI 0 ax [526]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 544 543 545 38 (set (reg/f:DI 2 cx [orig:228 D.6693 ] [228])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [525])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:227 D.6689 ] [227])) [0 *_240 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 545 544 546 38 (set (reg:SI 0 ax [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 546 545 547 38 (parallel [
            (set (reg:SI 4 si [orig:229 D.6677 ] [229])
                (plus:SI (reg:SI 0 ax [527])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 547 546 548 38 (set (reg:SI 0 ax [528])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 548 547 549 38 (set (reg:DI 1 dx [orig:230 D.6678 ] [230])
        (sign_extend:DI (reg:SI 0 ax [528]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 549 548 550 38 (set (reg:DI 0 ax [529])
        (reg:DI 1 dx [orig:230 D.6678 ] [230])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 550 549 551 38 (parallel [
            (set (reg:DI 0 ax [529])
                (ashift:DI (reg:DI 0 ax [529])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (nil))
(insn 551 550 552 38 (parallel [
            (set (reg:DI 0 ax [529])
                (plus:DI (reg:DI 0 ax [529])
                    (reg:DI 1 dx [orig:230 D.6678 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:230 D.6678 ] [230])
            (const_int 5 [0x5]))
        (nil)))
(insn 552 551 553 38 (parallel [
            (set (reg:DI 1 dx [530])
                (ashift:DI (reg:DI 0 ax [529])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (nil))
(insn 553 552 554 38 (parallel [
            (set (reg:DI 0 ax [529])
                (plus:DI (reg:DI 0 ax [529])
                    (reg:DI 1 dx [530])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (nil))
(insn 554 553 555 38 (parallel [
            (set (reg:DI 0 ax [531])
                (ashift:DI (reg:DI 0 ax [529])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (nil))
(insn 555 554 556 38 (set (reg:DI 0 ax [529])
        (reg:DI 0 ax [531])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 556 555 557 38 (set (reg:DI 1 dx [orig:231 D.6678 ] [231])
        (reg:DI 0 ax [529])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 557 556 558 38 (set (reg/f:DI 0 ax [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 558 557 559 38 (parallel [
            (set (reg/f:DI 1 dx [orig:232 D.6687 ] [232])
                (plus:DI (reg:DI 1 dx [orig:231 D.6678 ] [231])
                    (reg/f:DI 0 ax [532])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:231 D.6678 ] [231]))
        (nil)))
(insn 559 558 560 38 (set (reg:SI 0 ax [534])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 560 559 561 38 (set (reg:DI 0 ax [533])
        (sign_extend:DI (reg:SI 0 ax [534]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 561 560 562 38 (set (reg/f:DI 1 dx [orig:233 D.6691 ] [233])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [533])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:232 D.6687 ] [232])) [0 *_245 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 562 561 563 38 (set (reg:SI 0 ax [535])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 563 562 564 38 (parallel [
            (set (reg:SI 0 ax [orig:234 D.6677 ] [234])
                (plus:SI (reg:SI 0 ax [535])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 564 563 565 38 (set (reg:DI 0 ax [536])
        (sign_extend:DI (reg:SI 0 ax [orig:234 D.6677 ] [234]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 565 564 566 38 (set (reg:QI 1 dx [orig:235 D.6694 ] [235])
        (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:233 D.6691 ] [233])
                (reg:DI 0 ax [536])) [0 _246->character S1 A8])) fmtext_o.cpp:192 93 {*movqi_internal}
     (nil))
(insn 566 565 567 38 (set (reg:DI 0 ax [537])
        (sign_extend:DI (reg:SI 4 si [orig:229 D.6677 ] [229]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 567 566 568 38 (set (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:228 D.6693 ] [228])
                (reg:DI 0 ax [537])) [0 _241->character S1 A8])
        (reg:QI 1 dx [orig:235 D.6694 ] [235])) fmtext_o.cpp:192 93 {*movqi_internal}
     (nil))
(insn 568 567 1146 38 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:187 217 {*addsi_1}
     (nil))
(jump_insn 1146 568 1147 38 (set (pc)
        (label_ref 569)) fmtext_o.cpp:187 654 {jump}
     (nil)
 -> 569)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1147 1146 572)
;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 572 1147 573 39 34 "" [1 uses])
(note 573 572 574 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 574 573 1148 39 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:185 217 {*addsi_1}
     (nil))
(jump_insn 1148 574 1149 39 (set (pc)
        (label_ref 575)) fmtext_o.cpp:185 654 {jump}
     (nil)
 -> 575)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1149 1148 578)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 578 1149 579 40 33 "" [1 uses])
(note 579 578 580 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 1150 40 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:183 217 {*addsi_1}
     (nil))
(jump_insn 1150 580 1151 40 (set (pc)
        (label_ref 581)) fmtext_o.cpp:183 654 {jump}
     (nil)
 -> 581)
;;  succ:       33 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1151 1150 584)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 584 1151 585 41 32 "" [1 uses])
(note 585 584 586 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 586 585 647 41 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:202 90 {*movsi_internal}
     (nil))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;;              46 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236 237 538
(code_label 647 586 587 42 41 "" [1 uses])
(note 587 647 588 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 588 587 589 42 (set (reg/f:DI 0 ax [538])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:202 89 {*movdi_internal}
     (nil))
(insn 589 588 590 42 (set (reg/f:DI 0 ax [orig:236 D.6683 ] [236])
        (mem/f:DI (reg/f:DI 0 ax [538]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:202 89 {*movdi_internal}
     (nil))
(insn 590 589 591 42 (set (reg:SI 0 ax [orig:237 D.6677 ] [237])
        (mem/j:SI (reg/f:DI 0 ax [orig:236 D.6683 ] [236]) [0 _254->nblocks.number+0 S4 A32])) fmtext_o.cpp:202 90 {*movsi_internal}
     (nil))
(insn 591 590 592 42 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:237 D.6677 ] [237])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:202 7 {*cmpsi_1}
     (nil))
(jump_insn 592 591 593 42 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 650)
            (pc))) fmtext_o.cpp:202 612 {*jcc_1}
     (nil)
 -> 650)
;;  succ:       47
;;              43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 593 592 594 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 594 593 641 43 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:204 90 {*movsi_internal}
     (nil))
;;  succ:       44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;;              45 [100.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 239 539
(code_label 641 594 595 44 40 "" [1 uses])
(note 595 641 596 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 596 595 597 44 (set (reg/f:DI 0 ax [539])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:204 89 {*movdi_internal}
     (nil))
(insn 597 596 598 44 (set (reg/f:DI 0 ax [orig:238 D.6683 ] [238])
        (mem/f:DI (reg/f:DI 0 ax [539]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:204 89 {*movdi_internal}
     (nil))
(insn 598 597 599 44 (set (reg:SI 0 ax [orig:239 D.6677 ] [239])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:238 D.6683 ] [238])
                (const_int 4 [0x4])) [0 _257->ntraces.number+0 S4 A32])) fmtext_o.cpp:204 90 {*movsi_internal}
     (nil))
(insn 599 598 600 44 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:239 D.6677 ] [239])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32]))) fmtext_o.cpp:204 7 {*cmpsi_1}
     (nil))
(jump_insn 600 599 601 44 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 644)
            (pc))) fmtext_o.cpp:204 612 {*jcc_1}
     (nil)
 -> 644)
;;  succ:       46
;;              45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 240 241 242 243 244 245 246 247 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559
(note 601 600 602 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 602 601 603 45 (set (reg:SI 0 ax [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 603 602 604 45 (set (reg:DI 0 ax [orig:240 D.6678 ] [240])
        (sign_extend:DI (reg:SI 0 ax [540]))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (nil))
(insn 604 603 605 45 (parallel [
            (set (reg:DI 1 dx [orig:241 D.6678 ] [241])
                (ashift:DI (reg:DI 0 ax [orig:240 D.6678 ] [240])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 512 {*ashldi3_1}
     (nil))
(insn 605 604 606 45 (set (reg/f:DI 0 ax [541])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80168 [0xfffffffffffec6d8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:206 89 {*movdi_internal}
     (nil))
(insn 606 605 607 45 (parallel [
            (set (reg/f:DI 0 ax [orig:242 D.6695 ] [242])
                (plus:DI (reg/f:DI 0 ax [541])
                    (reg:DI 1 dx [orig:241 D.6678 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:241 D.6678 ] [241]))
        (nil)))
(insn 607 606 608 45 (set (reg:SI 2 cx [orig:243 D.6677 ] [243])
        (mem:SI (reg/f:DI 0 ax [orig:242 D.6695 ] [242]) [0 *_262+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 608 607 609 45 (set (reg:SI 0 ax [543])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 609 608 610 45 (set (reg:DI 4 si [542])
        (sign_extend:DI (reg:SI 0 ax [543]))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (nil))
(insn 610 609 611 45 (set (reg:SI 0 ax [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 611 610 612 45 (set (reg:DI 1 dx [544])
        (sign_extend:DI (reg:SI 0 ax [545]))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (nil))
(insn 612 611 613 45 (set (reg:DI 0 ax [546])
        (reg:DI 1 dx [544])) fmtext_o.cpp:206 89 {*movdi_internal}
     (nil))
(insn 613 612 614 45 (parallel [
            (set (reg:DI 0 ax [546])
                (ashift:DI (reg:DI 0 ax [546])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 512 {*ashldi3_1}
     (nil))
(insn 614 613 615 45 (parallel [
            (set (reg:DI 0 ax [546])
                (plus:DI (reg:DI 0 ax [546])
                    (reg:DI 1 dx [544])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [544])
            (const_int 5 [0x5]))
        (nil)))
(insn 615 614 616 45 (parallel [
            (set (reg:DI 1 dx [547])
                (ashift:DI (reg:DI 0 ax [546])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 512 {*ashldi3_1}
     (nil))
(insn 616 615 617 45 (parallel [
            (set (reg:DI 0 ax [546])
                (plus:DI (reg:DI 0 ax [546])
                    (reg:DI 1 dx [547])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 218 {*adddi_1}
     (nil))
(insn 617 616 618 45 (parallel [
            (set (reg:DI 0 ax [548])
                (ashift:DI (reg:DI 0 ax [546])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 512 {*ashldi3_1}
     (nil))
(insn 618 617 619 45 (set (reg:DI 0 ax [546])
        (reg:DI 0 ax [548])) fmtext_o.cpp:206 89 {*movdi_internal}
     (nil))
(insn 619 618 620 45 (parallel [
            (set (reg:DI 0 ax [549])
                (plus:DI (reg:DI 0 ax [546])
                    (reg:DI 4 si [542])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 218 {*adddi_1}
     (nil))
(insn 620 619 621 45 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [549])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80032 [0xfffffffffffec760])) [0 pe_index[i_5][j_15].index_r+0 S4 A64])
        (reg:SI 2 cx [orig:243 D.6677 ] [243])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 621 620 622 45 (set (reg:SI 0 ax [550])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 622 621 623 45 (set (reg:DI 0 ax [orig:244 D.6678 ] [244])
        (sign_extend:DI (reg:SI 0 ax [550]))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (nil))
(insn 623 622 624 45 (parallel [
            (set (reg:DI 1 dx [orig:245 D.6678 ] [245])
                (ashift:DI (reg:DI 0 ax [orig:244 D.6678 ] [244])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 512 {*ashldi3_1}
     (nil))
(insn 624 623 625 45 (set (reg/f:DI 0 ax [551])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80168 [0xfffffffffffec6d8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:207 89 {*movdi_internal}
     (nil))
(insn 625 624 626 45 (parallel [
            (set (reg/f:DI 0 ax [orig:246 D.6695 ] [246])
                (plus:DI (reg/f:DI 0 ax [551])
                    (reg:DI 1 dx [orig:245 D.6678 ] [245])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:245 D.6678 ] [245]))
        (nil)))
(insn 626 625 627 45 (set (reg:SI 2 cx [orig:247 D.6677 ] [247])
        (mem:SI (reg/f:DI 0 ax [orig:246 D.6695 ] [246]) [0 *_267+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 627 626 628 45 (set (reg:SI 0 ax [553])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 628 627 629 45 (set (reg:DI 4 si [552])
        (sign_extend:DI (reg:SI 0 ax [553]))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (nil))
(insn 629 628 630 45 (set (reg:SI 0 ax [555])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 630 629 631 45 (set (reg:DI 1 dx [554])
        (sign_extend:DI (reg:SI 0 ax [555]))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (nil))
(insn 631 630 632 45 (set (reg:DI 0 ax [556])
        (reg:DI 1 dx [554])) fmtext_o.cpp:207 89 {*movdi_internal}
     (nil))
(insn 632 631 633 45 (parallel [
            (set (reg:DI 0 ax [556])
                (ashift:DI (reg:DI 0 ax [556])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 512 {*ashldi3_1}
     (nil))
(insn 633 632 634 45 (parallel [
            (set (reg:DI 0 ax [556])
                (plus:DI (reg:DI 0 ax [556])
                    (reg:DI 1 dx [554])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [554])
            (const_int 5 [0x5]))
        (nil)))
(insn 634 633 635 45 (parallel [
            (set (reg:DI 1 dx [557])
                (ashift:DI (reg:DI 0 ax [556])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 512 {*ashldi3_1}
     (nil))
(insn 635 634 636 45 (parallel [
            (set (reg:DI 0 ax [556])
                (plus:DI (reg:DI 0 ax [556])
                    (reg:DI 1 dx [557])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 218 {*adddi_1}
     (nil))
(insn 636 635 637 45 (parallel [
            (set (reg:DI 0 ax [558])
                (ashift:DI (reg:DI 0 ax [556])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 512 {*ashldi3_1}
     (nil))
(insn 637 636 638 45 (set (reg:DI 0 ax [556])
        (reg:DI 0 ax [558])) fmtext_o.cpp:207 89 {*movdi_internal}
     (nil))
(insn 638 637 639 45 (parallel [
            (set (reg:DI 0 ax [559])
                (plus:DI (reg:DI 0 ax [556])
                    (reg:DI 4 si [552])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 218 {*adddi_1}
     (nil))
(insn 639 638 640 45 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [559])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80028 [0xfffffffffffec764])) [0 pe_index[i_5][j_15].index_c+0 S4 A32])
        (reg:SI 2 cx [orig:247 D.6677 ] [247])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 640 639 1152 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:204 217 {*addsi_1}
     (nil))
(jump_insn 1152 640 1153 45 (set (pc)
        (label_ref 641)) fmtext_o.cpp:204 654 {jump}
     (nil)
 -> 641)
;;  succ:       44 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1153 1152 644)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 644 1153 645 46 39 "" [1 uses])
(note 645 644 646 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 646 645 1154 46 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:202 217 {*addsi_1}
     (nil))
(jump_insn 1154 646 1155 46 (set (pc)
        (label_ref 647)) fmtext_o.cpp:202 654 {jump}
     (nil)
 -> 647)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1155 1154 650)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 650 1155 651 47 38 "" [1 uses])
(note 651 650 652 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 652 651 678 47 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:214 90 {*movsi_internal}
     (nil))
;;  succ:       48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;;              51 [100.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 248 560
(code_label 678 652 653 48 44 "" [1 uses])
(note 653 678 654 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 654 653 655 48 (set (reg/f:DI 0 ax [560])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:214 89 {*movdi_internal}
     (nil))
(insn 655 654 656 48 (set (reg:SI 0 ax [orig:248 D.6677 ] [248])
        (mem/j:SI (reg/f:DI 0 ax [560]) [0 pe_info_273(D)->number_pe+0 S4 A32])) fmtext_o.cpp:214 90 {*movsi_internal}
     (nil))
(insn 656 655 657 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:248 D.6677 ] [248])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:214 7 {*cmpsi_1}
     (nil))
(jump_insn 657 656 658 48 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 681)
            (pc))) fmtext_o.cpp:214 612 {*jcc_1}
     (nil)
 -> 681)
;;  succ:       52
;;              49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 249 250 251 252 561 562
(note 658 657 659 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 659 658 660 49 (set (reg:SI 0 ax [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:216 90 {*movsi_internal}
     (nil))
(insn 660 659 661 49 (set (reg:DI 0 ax [orig:249 D.6678 ] [249])
        (sign_extend:DI (reg:SI 0 ax [561]))) fmtext_o.cpp:216 142 {*extendsidi2_rex64}
     (nil))
(insn 661 660 662 49 (parallel [
            (set (reg:DI 1 dx [orig:250 D.6678 ] [250])
                (ashift:DI (reg:DI 0 ax [orig:249 D.6678 ] [249])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:216 512 {*ashldi3_1}
     (nil))
(insn 662 661 663 49 (set (reg/f:DI 0 ax [562])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80168 [0xfffffffffffec6d8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:216 89 {*movdi_internal}
     (nil))
(insn 663 662 664 49 (parallel [
            (set (reg/f:DI 0 ax [orig:251 D.6695 ] [251])
                (plus:DI (reg/f:DI 0 ax [562])
                    (reg:DI 1 dx [orig:250 D.6678 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:216 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:250 D.6678 ] [250]))
        (nil)))
(insn 664 663 665 49 (set (reg:SI 0 ax [orig:252 D.6677 ] [252])
        (mem:SI (reg/f:DI 0 ax [orig:251 D.6695 ] [251]) [0 *_277+0 S4 A32])) fmtext_o.cpp:216 90 {*movsi_internal}
     (nil))
(insn 665 664 666 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:252 D.6677 ] [252])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32]))) fmtext_o.cpp:216 7 {*cmpsi_1}
     (nil))
(jump_insn 666 665 667 49 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 675)
            (pc))) fmtext_o.cpp:216 612 {*jcc_1}
     (nil)
 -> 675)
;;  succ:       50 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 253 254 255 563 564 565
(note 667 666 668 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 668 667 669 50 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:217 90 {*movsi_internal}
     (nil))
(insn 669 668 670 50 (set (reg:DI 0 ax [orig:253 D.6678 ] [253])
        (sign_extend:DI (reg:SI 0 ax [563]))) fmtext_o.cpp:217 142 {*extendsidi2_rex64}
     (nil))
(insn 670 669 671 50 (parallel [
            (set (reg:DI 1 dx [orig:254 D.6678 ] [254])
                (ashift:DI (reg:DI 0 ax [orig:253 D.6678 ] [253])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:217 512 {*ashldi3_1}
     (nil))
(insn 671 670 672 50 (set (reg/f:DI 0 ax [564])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80168 [0xfffffffffffec6d8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:217 89 {*movdi_internal}
     (nil))
(insn 672 671 673 50 (parallel [
            (set (reg/f:DI 0 ax [orig:255 D.6695 ] [255])
                (plus:DI (reg/f:DI 0 ax [564])
                    (reg:DI 1 dx [orig:254 D.6678 ] [254])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:217 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:254 D.6678 ] [254]))
        (nil)))
(insn 673 672 674 50 (set (reg:SI 0 ax [565])
        (mem:SI (reg/f:DI 0 ax [orig:255 D.6695 ] [255]) [0 *_281+0 S4 A32])) fmtext_o.cpp:217 90 {*movsi_internal}
     (nil))
(insn 674 673 675 50 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])
        (reg:SI 0 ax [565])) fmtext_o.cpp:217 90 {*movsi_internal}
     (nil))
;;  succ:       51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;;              50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 675 674 676 51 43 "" [1 uses])
(note 676 675 677 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 677 676 1156 51 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:214 217 {*addsi_1}
     (nil))
(jump_insn 1156 677 1157 51 (set (pc)
        (label_ref 678)) fmtext_o.cpp:214 654 {jump}
     (nil)
 -> 678)
;;  succ:       48 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1157 1156 681)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 256 566 567 568 569
(code_label 681 1157 682 52 42 "" [1 uses])
(note 682 681 683 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 683 682 684 52 (set (reg:SI 0 ax [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:221 90 {*movsi_internal}
     (nil))
(insn 684 683 685 52 (parallel [
            (set (reg:SI 0 ax [566])
                (ashiftrt:SI (reg:SI 0 ax [567])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 538 {ashrsi3_cvt}
     (expr_list:REG_EQUAL (ashiftrt:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
            (const_int 31 [0x1f]))
        (nil)))
(insn 685 684 686 52 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])
                (xor:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])
                    (reg:SI 0 ax [566])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 400 {*xorsi_1}
     (nil))
(insn 686 685 687 52 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])
                (minus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])
                    (reg:SI 0 ax [566])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 260 {*subsi_1}
     (nil))
(insn 687 686 688 52 (set (reg:SI 0 ax [568])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:222 90 {*movsi_internal}
     (nil))
(insn 688 687 689 52 (parallel [
            (set (reg:SI 1 dx [orig:256 D.6677 ] [256])
                (ashift:SI (reg:SI 0 ax [568])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:222 511 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 689 688 690 52 (set (reg/f:DI 0 ax [569])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:222 89 {*movdi_internal}
     (nil))
(insn 690 689 691 52 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [569])
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])
        (reg:SI 1 dx [orig:256 D.6677 ] [256])) fmtext_o.cpp:222 90 {*movsi_internal}
     (nil))
(insn 691 690 727 52 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:227 90 {*movsi_internal}
     (nil))
;;  succ:       53 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;;              57 [100.0%] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 257 570
(code_label 727 691 692 53 48 "" [1 uses])
(note 692 727 693 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 693 692 694 53 (set (reg/f:DI 0 ax [570])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:227 89 {*movdi_internal}
     (nil))
(insn 694 693 695 53 (set (reg:SI 0 ax [orig:257 D.6677 ] [257])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [570])
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:227 90 {*movsi_internal}
     (nil))
(insn 695 694 696 53 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:257 D.6677 ] [257])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:227 7 {*cmpsi_1}
     (nil))
(jump_insn 696 695 697 53 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 730)
            (pc))) fmtext_o.cpp:227 612 {*jcc_1}
     (nil)
 -> 730)
;;  succ:       58
;;              54 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 697 696 698 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 698 697 721 54 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:229 90 {*movsi_internal}
     (nil))
;;  succ:       55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;;              56 [100.0%] 
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 258 571
(code_label 721 698 699 55 47 "" [1 uses])
(note 699 721 700 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 700 699 701 55 (set (reg/f:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:229 89 {*movdi_internal}
     (nil))
(insn 701 700 702 55 (set (reg:SI 0 ax [orig:258 D.6677 ] [258])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [571])
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:229 90 {*movsi_internal}
     (nil))
(insn 702 701 703 55 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:258 D.6677 ] [258])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32]))) fmtext_o.cpp:229 7 {*cmpsi_1}
     (nil))
(jump_insn 703 702 704 55 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 724)
            (pc))) fmtext_o.cpp:229 612 {*jcc_1}
     (nil)
 -> 724)
;;  succ:       57
;;              56 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 259 260 261 262 263 264 572 573 574 575 576 577
(note 704 703 705 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 705 704 706 56 (set (reg:SI 0 ax [572])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 706 705 1185 56 (set (reg:DI 0 ax [orig:259 D.6678 ] [259])
        (sign_extend:DI (reg:SI 0 ax [572]))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 1185 706 707 56 (set (reg:DI 0 ax [orig:260 D.6678 ] [260])
        (reg:DI 0 ax [orig:259 D.6678 ] [259])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 707 1185 1186 56 (parallel [
            (set (reg:DI 0 ax [orig:260 D.6678 ] [260])
                (ashift:DI (reg:DI 0 ax [orig:260 D.6678 ] [260])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 512 {*ashldi3_1}
     (nil))
(insn 1186 707 708 56 (set (reg:DI 1 dx [orig:260 D.6678 ] [260])
        (reg:DI 0 ax [orig:260 D.6678 ] [260])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 708 1186 709 56 (set (reg/f:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 709 708 710 56 (parallel [
            (set (reg/f:DI 3 bx [orig:261 D.6696 ] [261])
                (plus:DI (reg:DI 1 dx [orig:260 D.6678 ] [260])
                    (reg/f:DI 0 ax [573])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
            (reg:DI 1 dx [orig:260 D.6678 ] [260]))
        (nil)))
(insn 710 709 711 56 (set (reg:SI 0 ax [574])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 711 710 712 56 (set (reg:DI 0 ax [orig:262 D.6678 ] [262])
        (sign_extend:DI (reg:SI 0 ax [574]))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 712 711 713 56 (parallel [
            (set (reg:DI 0 ax [orig:263 D.6678 ] [263])
                (ashift:DI (reg:DI 0 ax [orig:262 D.6678 ] [262])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 512 {*ashldi3_1}
     (nil))
(insn 713 712 714 56 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:263 D.6678 ] [263])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(call_insn 714 713 715 56 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:230 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 715 714 716 56 (set (reg/f:DI 0 ax [575])
        (reg:DI 0 ax)) fmtext_o.cpp:230 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [575])
        (nil)))
(insn 716 715 717 56 (set (reg/f:DI 1 dx [orig:264 D.6688 ] [264])
        (reg/f:DI 0 ax [575])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 717 716 718 56 (set (reg:SI 0 ax [577])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 718 717 719 56 (set (reg:DI 0 ax [576])
        (sign_extend:DI (reg:SI 0 ax [577]))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 719 718 720 56 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [576])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:261 D.6696 ] [261])) [0 *_294 S8 A64])
        (reg/f:DI 1 dx [orig:264 D.6688 ] [264])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 720 719 1158 56 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:229 217 {*addsi_1}
     (nil))
(jump_insn 1158 720 1159 56 (set (pc)
        (label_ref 721)) fmtext_o.cpp:229 654 {jump}
     (nil)
 -> 721)
;;  succ:       55 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1159 1158 724)
;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 724 1159 725 57 46 "" [1 uses])
(note 725 724 726 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 726 725 1160 57 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:227 217 {*addsi_1}
     (nil))
(jump_insn 1160 726 1161 57 (set (pc)
        (label_ref 727)) fmtext_o.cpp:227 654 {jump}
     (nil)
 -> 727)
;;  succ:       53 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1161 1160 730)
;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 730 1161 731 58 45 "" [1 uses])
(note 731 730 732 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 732 731 781 58 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:236 90 {*movsi_internal}
     (nil))
;;  succ:       59 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;;              66 [100.0%] 
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 265 578
(code_label 781 732 733 59 54 "" [1 uses])
(note 733 781 734 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 734 733 735 59 (set (reg/f:DI 0 ax [578])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:236 89 {*movdi_internal}
     (nil))
(insn 735 734 736 59 (set (reg:SI 0 ax [orig:265 D.6677 ] [265])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [578])
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:236 90 {*movsi_internal}
     (nil))
(insn 736 735 737 59 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:265 D.6677 ] [265])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:236 7 {*cmpsi_1}
     (nil))
(jump_insn 737 736 738 59 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 784)
            (pc))) fmtext_o.cpp:236 612 {*jcc_1}
     (nil)
 -> 784)
;;  succ:       67
;;              60 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 738 737 739 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 739 738 775 60 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:238 90 {*movsi_internal}
     (nil))
;;  succ:       61 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;;              65 [100.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 266 579
(code_label 775 739 740 61 53 "" [1 uses])
(note 740 775 741 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 741 740 742 61 (set (reg/f:DI 0 ax [579])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:238 89 {*movdi_internal}
     (nil))
(insn 742 741 743 61 (set (reg:SI 0 ax [orig:266 D.6677 ] [266])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [579])
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:238 90 {*movsi_internal}
     (nil))
(insn 743 742 744 61 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:266 D.6677 ] [266])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32]))) fmtext_o.cpp:238 7 {*cmpsi_1}
     (nil))
(jump_insn 744 743 745 61 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 778)
            (pc))) fmtext_o.cpp:238 612 {*jcc_1}
     (nil)
 -> 778)
;;  succ:       66
;;              62 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 745 744 746 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 746 745 769 62 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:240 90 {*movsi_internal}
     (nil))
;;  succ:       63 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62 (FALLTHRU)
;;              64 [100.0%] 
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 267 268 580
(code_label 769 746 747 63 52 "" [1 uses])
(note 747 769 748 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 748 747 749 63 (set (reg/f:DI 0 ax [580])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 749 748 750 63 (set (reg/f:DI 0 ax [orig:267 D.6683 ] [267])
        (mem/f:DI (reg/f:DI 0 ax [580]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 750 749 751 63 (set (reg:SI 0 ax [orig:268 D.6677 ] [268])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:267 D.6683 ] [267])
                (const_int 8 [0x8])) [0 _307->np.number+0 S4 A32])) fmtext_o.cpp:240 90 {*movsi_internal}
     (nil))
(insn 751 750 752 63 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:268 D.6677 ] [268])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32]))) fmtext_o.cpp:240 7 {*cmpsi_1}
     (nil))
(jump_insn 752 751 753 63 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 772)
            (pc))) fmtext_o.cpp:240 612 {*jcc_1}
     (nil)
 -> 772)
;;  succ:       65
;;              64 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 269 270 271 272 273 274 275 581 582 583 584 585 586
(note 753 752 754 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 754 753 755 64 (set (reg:SI 0 ax [581])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 755 754 1187 64 (set (reg:DI 0 ax [orig:269 D.6678 ] [269])
        (sign_extend:DI (reg:SI 0 ax [581]))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 1187 755 756 64 (set (reg:DI 0 ax [orig:270 D.6678 ] [270])
        (reg:DI 0 ax [orig:269 D.6678 ] [269])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 756 1187 1188 64 (parallel [
            (set (reg:DI 0 ax [orig:270 D.6678 ] [270])
                (ashift:DI (reg:DI 0 ax [orig:270 D.6678 ] [270])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 512 {*ashldi3_1}
     (nil))
(insn 1188 756 757 64 (set (reg:DI 1 dx [orig:270 D.6678 ] [270])
        (reg:DI 0 ax [orig:270 D.6678 ] [270])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 757 1188 758 64 (set (reg/f:DI 0 ax [582])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 758 757 759 64 (parallel [
            (set (reg/f:DI 1 dx [orig:271 D.6696 ] [271])
                (plus:DI (reg:DI 1 dx [orig:270 D.6678 ] [270])
                    (reg/f:DI 0 ax [582])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
            (reg:DI 1 dx [orig:270 D.6678 ] [270]))
        (nil)))
(insn 759 758 760 64 (set (reg:SI 0 ax [584])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 760 759 761 64 (set (reg:DI 0 ax [583])
        (sign_extend:DI (reg:SI 0 ax [584]))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 761 760 762 64 (set (reg/f:DI 0 ax [orig:272 D.6693 ] [272])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [583])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:271 D.6696 ] [271])) [0 *_311 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 762 761 763 64 (set (reg:SI 1 dx [585])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 763 762 764 64 (set (reg:DI 1 dx [orig:273 D.6678 ] [273])
        (sign_extend:DI (reg:SI 1 dx [585]))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 764 763 765 64 (parallel [
            (set (reg:DI 1 dx [orig:274 D.6678 ] [274])
                (ashift:DI (reg:DI 1 dx [orig:273 D.6678 ] [273])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 512 {*ashldi3_1}
     (nil))
(insn 765 764 766 64 (parallel [
            (set (reg/f:DI 1 dx [orig:275 D.6693 ] [275])
                (plus:DI (reg:DI 1 dx [orig:274 D.6678 ] [274])
                    (reg/f:DI 0 ax [orig:272 D.6693 ] [272])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 218 {*adddi_1}
     (nil))
(insn 766 765 767 64 (set (reg:DI 0 ax [586])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 init_precision4+0 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 767 766 768 64 (set (mem:DI (reg/f:DI 1 dx [orig:275 D.6693 ] [275]) [0 *_315+0 S8 A64])
        (reg:DI 0 ax [586])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 768 767 1162 64 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:240 217 {*addsi_1}
     (nil))
(jump_insn 1162 768 1163 64 (set (pc)
        (label_ref 769)) fmtext_o.cpp:240 654 {jump}
     (nil)
 -> 769)
;;  succ:       63 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1163 1162 772)
;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 772 1163 773 65 51 "" [1 uses])
(note 773 772 774 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 774 773 1164 65 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:238 217 {*addsi_1}
     (nil))
(jump_insn 1164 774 1165 65 (set (pc)
        (label_ref 775)) fmtext_o.cpp:238 654 {jump}
     (nil)
 -> 775)
;;  succ:       61 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1165 1164 778)
;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 778 1165 779 66 50 "" [1 uses])
(note 779 778 780 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 780 779 1166 66 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:236 217 {*addsi_1}
     (nil))
(jump_insn 1166 780 1167 66 (set (pc)
        (label_ref 781)) fmtext_o.cpp:236 654 {jump}
     (nil)
 -> 781)
;;  succ:       59 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1167 1166 784)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 784 1167 785 67 49 "" [1 uses])
(note 785 784 786 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 786 785 926 67 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
;;  succ:       68 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;;              75 [100.0%] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 276 277 587
(code_label 926 786 787 68 60 "" [1 uses])
(note 787 926 788 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 788 787 789 68 (set (reg/f:DI 0 ax [587])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 789 788 790 68 (set (reg/f:DI 0 ax [orig:276 D.6683 ] [276])
        (mem/f:DI (reg/f:DI 0 ax [587]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 790 789 791 68 (set (reg:SI 0 ax [orig:277 D.6677 ] [277])
        (mem/j:SI (reg/f:DI 0 ax [orig:276 D.6683 ] [276]) [0 _321->nblocks.number+0 S4 A32])) fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
(insn 791 790 792 68 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:277 D.6677 ] [277])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:249 7 {*cmpsi_1}
     (nil))
(jump_insn 792 791 793 68 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 929)
            (pc))) fmtext_o.cpp:249 612 {*jcc_1}
     (nil)
 -> 929)
;;  succ:       76
;;              69 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 793 792 794 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 794 793 920 69 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:251 90 {*movsi_internal}
     (nil))
;;  succ:       70 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69 (FALLTHRU)
;;              74 [100.0%] 
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 278 279 588
(code_label 920 794 795 70 59 "" [1 uses])
(note 795 920 796 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 796 795 797 70 (set (reg/f:DI 0 ax [588])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 797 796 798 70 (set (reg/f:DI 0 ax [orig:278 D.6683 ] [278])
        (mem/f:DI (reg/f:DI 0 ax [588]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 798 797 799 70 (set (reg:SI 0 ax [orig:279 D.6677 ] [279])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:278 D.6683 ] [278])
                (const_int 4 [0x4])) [0 _324->ntraces.number+0 S4 A32])) fmtext_o.cpp:251 90 {*movsi_internal}
     (nil))
(insn 799 798 800 70 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:279 D.6677 ] [279])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32]))) fmtext_o.cpp:251 7 {*cmpsi_1}
     (nil))
(jump_insn 800 799 801 70 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 923)
            (pc))) fmtext_o.cpp:251 612 {*jcc_1}
     (nil)
 -> 923)
;;  succ:       75
;;              71 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 801 800 802 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 802 801 914 71 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:253 90 {*movsi_internal}
     (nil))
;;  succ:       72 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71 (FALLTHRU)
;;              73 [100.0%] 
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 280 281 589
(code_label 914 802 803 72 58 "" [1 uses])
(note 803 914 804 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 804 803 805 72 (set (reg/f:DI 0 ax [589])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 805 804 806 72 (set (reg/f:DI 0 ax [orig:280 D.6683 ] [280])
        (mem/f:DI (reg/f:DI 0 ax [589]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 806 805 807 72 (set (reg:SI 0 ax [orig:281 D.6677 ] [281])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:280 D.6683 ] [280])
                (const_int 8 [0x8])) [0 _327->np.number+0 S4 A32])) fmtext_o.cpp:253 90 {*movsi_internal}
     (nil))
(insn 807 806 808 72 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:281 D.6677 ] [281])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32]))) fmtext_o.cpp:253 7 {*cmpsi_1}
     (nil))
(jump_insn 808 807 809 72 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 917)
            (pc))) fmtext_o.cpp:253 612 {*jcc_1}
     (nil)
 -> 917)
;;  succ:       74
;;              73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639
(note 809 808 810 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 810 809 811 73 (set (reg:SI 0 ax [591])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 811 810 812 73 (set (reg:DI 2 cx [590])
        (sign_extend:DI (reg:SI 0 ax [591]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 812 811 813 73 (set (reg:SI 0 ax [593])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 813 812 814 73 (set (reg:DI 1 dx [592])
        (sign_extend:DI (reg:SI 0 ax [593]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 814 813 815 73 (set (reg:DI 0 ax [594])
        (reg:DI 1 dx [592])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 815 814 816 73 (parallel [
            (set (reg:DI 0 ax [594])
                (ashift:DI (reg:DI 0 ax [594])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 816 815 817 73 (parallel [
            (set (reg:DI 0 ax [594])
                (plus:DI (reg:DI 0 ax [594])
                    (reg:DI 1 dx [592])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [592])
            (const_int 5 [0x5]))
        (nil)))
(insn 817 816 818 73 (parallel [
            (set (reg:DI 1 dx [595])
                (ashift:DI (reg:DI 0 ax [594])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 818 817 819 73 (parallel [
            (set (reg:DI 0 ax [594])
                (plus:DI (reg:DI 0 ax [594])
                    (reg:DI 1 dx [595])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (nil))
(insn 819 818 820 73 (parallel [
            (set (reg:DI 0 ax [596])
                (ashift:DI (reg:DI 0 ax [594])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 820 819 821 73 (set (reg:DI 0 ax [594])
        (reg:DI 0 ax [596])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 821 820 822 73 (parallel [
            (set (reg:DI 0 ax [597])
                (plus:DI (reg:DI 0 ax [594])
                    (reg:DI 2 cx [590])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (nil))
(insn 822 821 823 73 (set (reg:SI 1 dx [orig:282 D.6677 ] [282])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [597])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80032 [0xfffffffffffec760])) [0 pe_index[i_9][j_18].index_r+0 S4 A64])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 823 822 824 73 (set (reg:SI 0 ax [598])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 824 823 825 73 (parallel [
            (set (reg:SI 0 ax [orig:283 D.6677 ] [283])
                (plus:SI (reg:SI 0 ax [598])
                    (reg:SI 1 dx [orig:282 D.6677 ] [282])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:282 D.6677 ] [282])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))
        (nil)))
(insn 825 824 1189 73 (set (reg:DI 0 ax [orig:284 D.6678 ] [284])
        (sign_extend:DI (reg:SI 0 ax [orig:283 D.6677 ] [283]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 1189 825 826 73 (set (reg:DI 0 ax [orig:285 D.6678 ] [285])
        (reg:DI 0 ax [orig:284 D.6678 ] [284])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 826 1189 1190 73 (parallel [
            (set (reg:DI 0 ax [orig:285 D.6678 ] [285])
                (ashift:DI (reg:DI 0 ax [orig:285 D.6678 ] [285])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 1190 826 827 73 (set (reg:DI 1 dx [orig:285 D.6678 ] [285])
        (reg:DI 0 ax [orig:285 D.6678 ] [285])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 827 1190 828 73 (set (reg/f:DI 0 ax [599])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 828 827 829 73 (parallel [
            (set (reg/f:DI 2 cx [orig:286 D.6696 ] [286])
                (plus:DI (reg:DI 1 dx [orig:285 D.6678 ] [285])
                    (reg/f:DI 0 ax [599])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
            (reg:DI 1 dx [orig:285 D.6678 ] [285]))
        (nil)))
(insn 829 828 830 73 (set (reg:SI 0 ax [601])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 830 829 831 73 (set (reg:DI 4 si [600])
        (sign_extend:DI (reg:SI 0 ax [601]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 831 830 832 73 (set (reg:SI 0 ax [603])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 832 831 833 73 (set (reg:DI 1 dx [602])
        (sign_extend:DI (reg:SI 0 ax [603]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 833 832 834 73 (set (reg:DI 0 ax [604])
        (reg:DI 1 dx [602])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 834 833 835 73 (parallel [
            (set (reg:DI 0 ax [604])
                (ashift:DI (reg:DI 0 ax [604])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 835 834 836 73 (parallel [
            (set (reg:DI 0 ax [604])
                (plus:DI (reg:DI 0 ax [604])
                    (reg:DI 1 dx [602])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [602])
            (const_int 5 [0x5]))
        (nil)))
(insn 836 835 837 73 (parallel [
            (set (reg:DI 1 dx [605])
                (ashift:DI (reg:DI 0 ax [604])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 837 836 838 73 (parallel [
            (set (reg:DI 0 ax [604])
                (plus:DI (reg:DI 0 ax [604])
                    (reg:DI 1 dx [605])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (nil))
(insn 838 837 839 73 (parallel [
            (set (reg:DI 0 ax [606])
                (ashift:DI (reg:DI 0 ax [604])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 839 838 840 73 (set (reg:DI 0 ax [604])
        (reg:DI 0 ax [606])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 840 839 841 73 (parallel [
            (set (reg:DI 0 ax [607])
                (plus:DI (reg:DI 0 ax [604])
                    (reg:DI 4 si [600])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (nil))
(insn 841 840 842 73 (set (reg:SI 1 dx [orig:287 D.6677 ] [287])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [607])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80028 [0xfffffffffffec764])) [0 pe_index[i_9][j_18].index_c+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 842 841 843 73 (set (reg:SI 0 ax [608])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 843 842 844 73 (parallel [
            (set (reg:SI 0 ax [orig:288 D.6677 ] [288])
                (plus:SI (reg:SI 0 ax [608])
                    (reg:SI 1 dx [orig:287 D.6677 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:287 D.6677 ] [287])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))
        (nil)))
(insn 844 843 845 73 (set (reg:DI 0 ax [609])
        (sign_extend:DI (reg:SI 0 ax [orig:288 D.6677 ] [288]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 845 844 846 73 (set (reg/f:DI 0 ax [orig:289 D.6693 ] [289])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [609])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:286 D.6696 ] [286])) [0 *_333 S8 A64])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 846 845 847 73 (set (reg:SI 1 dx [610])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 847 846 848 73 (set (reg:DI 1 dx [orig:290 D.6678 ] [290])
        (sign_extend:DI (reg:SI 1 dx [610]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 848 847 849 73 (parallel [
            (set (reg:DI 1 dx [orig:291 D.6678 ] [291])
                (ashift:DI (reg:DI 1 dx [orig:290 D.6678 ] [290])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (nil))
(insn 849 848 850 73 (parallel [
            (set (reg/f:DI 2 cx [orig:292 D.6693 ] [292])
                (plus:DI (reg/f:DI 0 ax [orig:289 D.6693 ] [289])
                    (reg:DI 1 dx [orig:291 D.6678 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (nil))
(insn 850 849 851 73 (set (reg:SI 0 ax [612])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 851 850 852 73 (set (reg:DI 4 si [611])
        (sign_extend:DI (reg:SI 0 ax [612]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 852 851 853 73 (set (reg:SI 0 ax [614])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 853 852 854 73 (set (reg:DI 1 dx [613])
        (sign_extend:DI (reg:SI 0 ax [614]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 854 853 855 73 (set (reg:DI 0 ax [615])
        (reg:DI 1 dx [613])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 855 854 856 73 (parallel [
            (set (reg:DI 0 ax [615])
                (ashift:DI (reg:DI 0 ax [615])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 856 855 857 73 (parallel [
            (set (reg:DI 0 ax [615])
                (plus:DI (reg:DI 0 ax [615])
                    (reg:DI 1 dx [613])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [613])
            (const_int 5 [0x5]))
        (nil)))
(insn 857 856 858 73 (parallel [
            (set (reg:DI 1 dx [616])
                (ashift:DI (reg:DI 0 ax [615])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 858 857 859 73 (parallel [
            (set (reg:DI 0 ax [615])
                (plus:DI (reg:DI 0 ax [615])
                    (reg:DI 1 dx [616])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (nil))
(insn 859 858 860 73 (parallel [
            (set (reg:DI 0 ax [617])
                (ashift:DI (reg:DI 0 ax [615])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 860 859 861 73 (set (reg:DI 0 ax [615])
        (reg:DI 0 ax [617])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 861 860 862 73 (parallel [
            (set (reg:DI 0 ax [618])
                (plus:DI (reg:DI 0 ax [615])
                    (reg:DI 4 si [611])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (nil))
(insn 862 861 863 73 (set (reg:SI 1 dx [orig:293 D.6677 ] [293])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [618])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80032 [0xfffffffffffec760])) [0 pe_index[i_9][j_18].index_r+0 S4 A64])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 863 862 864 73 (set (reg:SI 0 ax [619])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 864 863 865 73 (parallel [
            (set (reg:SI 0 ax [orig:294 D.6677 ] [294])
                (plus:SI (reg:SI 0 ax [619])
                    (reg:SI 1 dx [orig:293 D.6677 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:293 D.6677 ] [293])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))
        (nil)))
(insn 865 864 1191 73 (set (reg:DI 0 ax [orig:295 D.6678 ] [295])
        (sign_extend:DI (reg:SI 0 ax [orig:294 D.6677 ] [294]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 1191 865 866 73 (set (reg:DI 0 ax [orig:296 D.6678 ] [296])
        (reg:DI 0 ax [orig:295 D.6678 ] [295])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 866 1191 1192 73 (parallel [
            (set (reg:DI 0 ax [orig:296 D.6678 ] [296])
                (ashift:DI (reg:DI 0 ax [orig:296 D.6678 ] [296])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 1192 866 867 73 (set (reg:DI 1 dx [orig:296 D.6678 ] [296])
        (reg:DI 0 ax [orig:296 D.6678 ] [296])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 867 1192 868 73 (set (reg/f:DI 0 ax [620])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 868 867 869 73 (parallel [
            (set (reg/f:DI 4 si [orig:297 D.6696 ] [297])
                (plus:DI (reg:DI 1 dx [orig:296 D.6678 ] [296])
                    (reg/f:DI 0 ax [620])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
            (reg:DI 1 dx [orig:296 D.6678 ] [296]))
        (nil)))
(insn 869 868 870 73 (set (reg:SI 0 ax [622])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 870 869 871 73 (set (reg:DI 5 di [621])
        (sign_extend:DI (reg:SI 0 ax [622]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 871 870 872 73 (set (reg:SI 0 ax [624])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 872 871 873 73 (set (reg:DI 1 dx [623])
        (sign_extend:DI (reg:SI 0 ax [624]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 873 872 874 73 (set (reg:DI 0 ax [625])
        (reg:DI 1 dx [623])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 874 873 875 73 (parallel [
            (set (reg:DI 0 ax [625])
                (ashift:DI (reg:DI 0 ax [625])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 875 874 876 73 (parallel [
            (set (reg:DI 0 ax [625])
                (plus:DI (reg:DI 0 ax [625])
                    (reg:DI 1 dx [623])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [623])
            (const_int 5 [0x5]))
        (nil)))
(insn 876 875 877 73 (parallel [
            (set (reg:DI 1 dx [626])
                (ashift:DI (reg:DI 0 ax [625])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 877 876 878 73 (parallel [
            (set (reg:DI 0 ax [625])
                (plus:DI (reg:DI 0 ax [625])
                    (reg:DI 1 dx [626])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (nil))
(insn 878 877 879 73 (parallel [
            (set (reg:DI 0 ax [627])
                (ashift:DI (reg:DI 0 ax [625])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 879 878 880 73 (set (reg:DI 0 ax [625])
        (reg:DI 0 ax [627])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 880 879 881 73 (parallel [
            (set (reg:DI 0 ax [628])
                (plus:DI (reg:DI 0 ax [625])
                    (reg:DI 5 di [621])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (nil))
(insn 881 880 882 73 (set (reg:SI 1 dx [orig:298 D.6677 ] [298])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [628])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80028 [0xfffffffffffec764])) [0 pe_index[i_9][j_18].index_c+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 882 881 883 73 (set (reg:SI 0 ax [629])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80060 [0xfffffffffffec744])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 883 882 884 73 (parallel [
            (set (reg:SI 0 ax [orig:299 D.6677 ] [299])
                (plus:SI (reg:SI 0 ax [629])
                    (reg:SI 1 dx [orig:298 D.6677 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:298 D.6677 ] [298])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))
        (nil)))
(insn 884 883 885 73 (set (reg:DI 0 ax [630])
        (sign_extend:DI (reg:SI 0 ax [orig:299 D.6677 ] [299]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 885 884 886 73 (set (reg/f:DI 0 ax [orig:300 D.6693 ] [300])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [630])
                    (const_int 8 [0x8]))
                (reg/f:DI 4 si [orig:297 D.6696 ] [297])) [0 *_344 S8 A64])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 886 885 887 73 (set (reg:SI 1 dx [631])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 887 886 888 73 (set (reg:DI 1 dx [orig:301 D.6678 ] [301])
        (sign_extend:DI (reg:SI 1 dx [631]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 888 887 889 73 (parallel [
            (set (reg:DI 1 dx [orig:302 D.6678 ] [302])
                (ashift:DI (reg:DI 1 dx [orig:301 D.6678 ] [301])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (nil))
(insn 889 888 890 73 (parallel [
            (set (reg/f:DI 0 ax [orig:303 D.6693 ] [303])
                (plus:DI (reg/f:DI 0 ax [orig:300 D.6693 ] [300])
                    (reg:DI 1 dx [orig:302 D.6678 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (nil))
(insn 890 889 891 73 (set (reg:DI 4 si [orig:304 D.6697 ] [304])
        (mem/j:DI (reg/f:DI 0 ax [orig:303 D.6693 ] [303]) [0 _350->lo+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 891 890 892 73 (set (reg:SI 0 ax [632])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 892 891 893 73 (set (reg:DI 1 dx [orig:305 D.6678 ] [305])
        (sign_extend:DI (reg:SI 0 ax [632]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 893 892 894 73 (set (reg:DI 0 ax [633])
        (reg:DI 1 dx [orig:305 D.6678 ] [305])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 894 893 895 73 (parallel [
            (set (reg:DI 0 ax [633])
                (ashift:DI (reg:DI 0 ax [633])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (nil))
(insn 895 894 896 73 (parallel [
            (set (reg:DI 0 ax [633])
                (plus:DI (reg:DI 0 ax [633])
                    (reg:DI 1 dx [orig:305 D.6678 ] [305])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:305 D.6678 ] [305])
            (const_int 5 [0x5]))
        (nil)))
(insn 896 895 897 73 (parallel [
            (set (reg:DI 1 dx [634])
                (ashift:DI (reg:DI 0 ax [633])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (nil))
(insn 897 896 898 73 (parallel [
            (set (reg:DI 0 ax [633])
                (plus:DI (reg:DI 0 ax [633])
                    (reg:DI 1 dx [634])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (nil))
(insn 898 897 899 73 (parallel [
            (set (reg:DI 0 ax [635])
                (ashift:DI (reg:DI 0 ax [633])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (nil))
(insn 899 898 900 73 (set (reg:DI 0 ax [633])
        (reg:DI 0 ax [635])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 900 899 901 73 (set (reg:DI 1 dx [orig:306 D.6678 ] [306])
        (reg:DI 0 ax [633])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 901 900 902 73 (set (reg/f:DI 0 ax [636])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 902 901 903 73 (parallel [
            (set (reg/f:DI 1 dx [orig:307 D.6689 ] [307])
                (plus:DI (reg:DI 1 dx [orig:306 D.6678 ] [306])
                    (reg/f:DI 0 ax [636])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:306 D.6678 ] [306]))
        (nil)))
(insn 903 902 904 73 (set (reg:SI 0 ax [638])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 904 903 905 73 (set (reg:DI 0 ax [637])
        (sign_extend:DI (reg:SI 0 ax [638]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 905 904 906 73 (set (reg/f:DI 0 ax [orig:308 D.6693 ] [308])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [637])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:307 D.6689 ] [307])) [0 *_354 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 906 905 907 73 (set (reg:SI 1 dx [639])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 907 906 908 73 (set (reg:DI 1 dx [orig:309 D.6678 ] [309])
        (sign_extend:DI (reg:SI 1 dx [639]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 908 907 909 73 (parallel [
            (set (reg:DI 1 dx [orig:310 D.6678 ] [310])
                (ashift:DI (reg:DI 1 dx [orig:309 D.6678 ] [309])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (nil))
(insn 909 908 910 73 (parallel [
            (set (reg/f:DI 0 ax [orig:311 D.6693 ] [311])
                (plus:DI (reg/f:DI 0 ax [orig:308 D.6693 ] [308])
                    (reg:DI 1 dx [orig:310 D.6678 ] [310])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (nil))
(insn 910 909 911 73 (set (reg:DI 0 ax [orig:312 D.6697 ] [312])
        (mem/j:DI (reg/f:DI 0 ax [orig:311 D.6693 ] [311]) [0 _358->lo+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 911 910 912 73 (parallel [
            (set (reg:DI 0 ax [orig:313 D.6697 ] [313])
                (plus:DI (reg:DI 0 ax [orig:312 D.6697 ] [312])
                    (reg:DI 4 si [orig:304 D.6697 ] [304])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (nil))
(insn 912 911 913 73 (set (mem/j:DI (reg/f:DI 2 cx [orig:292 D.6693 ] [292]) [0 _339->lo+0 S8 A64])
        (reg:DI 0 ax [orig:313 D.6697 ] [313])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 913 912 1168 73 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:253 217 {*addsi_1}
     (nil))
(jump_insn 1168 913 1169 73 (set (pc)
        (label_ref 914)) fmtext_o.cpp:253 654 {jump}
     (nil)
 -> 914)
;;  succ:       72 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1169 1168 917)
;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 917 1169 918 74 57 "" [1 uses])
(note 918 917 919 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 919 918 1170 74 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:251 217 {*addsi_1}
     (nil))
(jump_insn 1170 919 1171 74 (set (pc)
        (label_ref 920)) fmtext_o.cpp:251 654 {jump}
     (nil)
 -> 920)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1171 1170 923)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 923 1171 924 75 56 "" [1 uses])
(note 924 923 925 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 925 924 1172 75 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:249 217 {*addsi_1}
     (nil))
(jump_insn 1172 925 1173 75 (set (pc)
        (label_ref 926)) fmtext_o.cpp:249 654 {jump}
     (nil)
 -> 926)
;;  succ:       68 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1173 1172 929)
;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 929 1173 930 76 55 "" [1 uses])
(note 930 929 931 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 931 930 1093 76 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
;;  succ:       77 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (FALLTHRU)
;;              84 [100.0%] 
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 314 640
(code_label 1093 931 932 77 65 "" [1 uses])
(note 932 1093 933 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 933 932 934 77 (set (reg/f:DI 0 ax [640])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 934 933 935 77 (set (reg:SI 0 ax [orig:314 D.6677 ] [314])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [640])
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
(insn 935 934 936 77 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:314 D.6677 ] [314])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32]))) fmtext_o.cpp:265 7 {*cmpsi_1}
     (nil))
(jump_insn 936 935 937 77 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1096)
            (pc))) fmtext_o.cpp:265 612 {*jcc_1}
     (nil)
 -> 1096)
;;  succ:       85
;;              78 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77 (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 937 936 938 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 938 937 1087 78 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
;;  succ:       79 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;;              83 [100.0%] 
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 315 641
(code_label 1087 938 939 79 64 "" [1 uses])
(note 939 1087 940 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 940 939 941 79 (set (reg/f:DI 0 ax [641])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80176 [0xfffffffffffec6d0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:267 89 {*movdi_internal}
     (nil))
(insn 941 940 942 79 (set (reg:SI 0 ax [orig:315 D.6677 ] [315])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [641])
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
(insn 942 941 943 79 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:315 D.6677 ] [315])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32]))) fmtext_o.cpp:267 7 {*cmpsi_1}
     (nil))
(jump_insn 943 942 944 79 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1090)
            (pc))) fmtext_o.cpp:267 612 {*jcc_1}
     (nil)
 -> 1090)
;;  succ:       84
;;              80 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 944 943 945 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 945 944 1081 80 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
;;  succ:       81 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;;              82 [100.0%] 
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 316 317 318 319 320 321 322 642
(code_label 1081 945 946 81 63 "" [1 uses])
(note 946 1081 947 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 947 946 948 81 (set (reg/f:DI 0 ax [642])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 main_header+0 S8 A64])) fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 948 947 949 81 (set (reg/f:DI 0 ax [orig:316 D.6683 ] [316])
        (mem/f:DI (reg/f:DI 0 ax [642]) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 949 948 950 81 (set (reg:SI 0 ax [orig:317 D.6677 ] [317])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:316 D.6683 ] [316])
                (const_int 8 [0x8])) [0 _370->np.number+0 S4 A32])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 950 949 951 81 (set (reg:DI 0 ax [orig:318 D.6678 ] [318])
        (sign_extend:DI (reg:SI 0 ax [orig:317 D.6677 ] [317]))) fmtext_o.cpp:269 142 {*extendsidi2_rex64}
     (nil))
(insn 951 950 952 81 (set (reg:SI 1 dx [orig:319 D.6692 ] [319])
        (reg:SI 0 ax [orig:318 D.6678 ] [318])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 952 951 953 81 (set (reg:SI 0 ax [orig:320 D.6692 ] [320])
        (const_int 8 [0x8])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 953 952 954 81 (parallel [
            (set (reg:SI 0 ax [orig:321 D.6692 ] [321])
                (mult:SI (reg:SI 0 ax [orig:320 D.6692 ] [320])
                    (reg:SI 1 dx [orig:319 D.6692 ] [319])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:269 305 {*mulsi3_1}
     (nil))
(insn 954 953 955 81 (set (reg:SI 0 ax [orig:322 D.6677 ] [322])
        (reg:SI 0 ax [orig:321 D.6692 ] [321])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 955 954 956 81 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:322 D.6677 ] [322])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32]))) fmtext_o.cpp:269 7 {*cmpsi_1}
     (nil))
(jump_insn 956 955 957 81 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1084)
            (pc))) fmtext_o.cpp:269 612 {*jcc_1}
     (nil)
 -> 1084)
;;  succ:       83
;;              82 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81 (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702
(note 957 956 958 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 958 957 959 82 (set (reg:SI 0 ax [643])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 959 958 960 82 (set (reg:DI 1 dx [orig:323 D.6678 ] [323])
        (sign_extend:DI (reg:SI 0 ax [643]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 960 959 961 82 (set (reg:DI 0 ax [644])
        (reg:DI 1 dx [orig:323 D.6678 ] [323])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 961 960 962 82 (parallel [
            (set (reg:DI 0 ax [644])
                (ashift:DI (reg:DI 0 ax [644])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 512 {*ashldi3_1}
     (nil))
(insn 962 961 963 82 (parallel [
            (set (reg:DI 0 ax [644])
                (plus:DI (reg:DI 0 ax [644])
                    (reg:DI 1 dx [orig:323 D.6678 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:323 D.6678 ] [323])
            (const_int 5 [0x5]))
        (nil)))
(insn 963 962 964 82 (parallel [
            (set (reg:DI 1 dx [645])
                (ashift:DI (reg:DI 0 ax [644])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 512 {*ashldi3_1}
     (nil))
(insn 964 963 965 82 (parallel [
            (set (reg:DI 0 ax [644])
                (plus:DI (reg:DI 0 ax [644])
                    (reg:DI 1 dx [645])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 218 {*adddi_1}
     (nil))
(insn 965 964 966 82 (parallel [
            (set (reg:DI 0 ax [646])
                (ashift:DI (reg:DI 0 ax [644])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 512 {*ashldi3_1}
     (nil))
(insn 966 965 967 82 (set (reg:DI 0 ax [644])
        (reg:DI 0 ax [646])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 967 966 968 82 (set (reg:DI 1 dx [orig:324 D.6678 ] [324])
        (reg:DI 0 ax [644])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 968 967 969 82 (set (reg/f:DI 0 ax [647])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 969 968 970 82 (parallel [
            (set (reg/f:DI 1 dx [orig:325 D.6689 ] [325])
                (plus:DI (reg:DI 1 dx [orig:324 D.6678 ] [324])
                    (reg/f:DI 0 ax [647])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:324 D.6678 ] [324]))
        (nil)))
(insn 970 969 971 82 (set (reg:SI 0 ax [649])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 971 970 972 82 (set (reg:DI 0 ax [648])
        (sign_extend:DI (reg:SI 0 ax [649]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 972 971 973 82 (set (reg/f:DI 1 dx [orig:326 D.6693 ] [326])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [648])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:325 D.6689 ] [325])) [0 *_379 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 973 972 974 82 (set (reg:SI 0 ax [650])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 974 973 1193 82 (set (reg:DI 0 ax [orig:327 D.6678 ] [327])
        (sign_extend:DI (reg:SI 0 ax [650]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 1193 974 975 82 (set (reg:DI 0 ax [orig:328 D.6678 ] [328])
        (reg:DI 0 ax [orig:327 D.6678 ] [327])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 975 1193 1194 82 (parallel [
            (set (reg:DI 0 ax [orig:328 D.6678 ] [328])
                (ashift:DI (reg:DI 0 ax [orig:328 D.6678 ] [328])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 512 {*ashldi3_1}
     (nil))
(insn 1194 975 976 82 (set (reg:DI 2 cx [orig:328 D.6678 ] [328])
        (reg:DI 0 ax [orig:328 D.6678 ] [328])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 976 1194 977 82 (set (reg/f:DI 0 ax [651])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 977 976 978 82 (parallel [
            (set (reg/f:DI 2 cx [orig:329 D.6696 ] [329])
                (plus:DI (reg:DI 2 cx [orig:328 D.6678 ] [328])
                    (reg/f:DI 0 ax [651])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
            (reg:DI 2 cx [orig:328 D.6678 ] [328]))
        (nil)))
(insn 978 977 979 82 (set (reg:SI 0 ax [653])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 979 978 980 82 (set (reg:DI 0 ax [652])
        (sign_extend:DI (reg:SI 0 ax [653]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 980 979 981 82 (set (reg/f:DI 2 cx [orig:330 D.6693 ] [330])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [652])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:329 D.6696 ] [329])) [0 *_383 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 981 980 982 82 (set (reg:SI 0 ax [655])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 982 981 983 82 (set (reg:DI 0 ax [654])
        (sign_extend:DI (reg:SI 0 ax [655]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 983 982 984 82 (set (reg:QI 2 cx [orig:331 D.6694 ] [331])
        (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:330 D.6693 ] [330])
                (reg:DI 0 ax [654])) [0 _384->character S1 A8])) fmtext_o.cpp:271 93 {*movqi_internal}
     (nil))
(insn 984 983 985 82 (set (reg:SI 0 ax [657])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 985 984 986 82 (set (reg:DI 0 ax [656])
        (sign_extend:DI (reg:SI 0 ax [657]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 986 985 987 82 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:326 D.6693 ] [326])
                (reg:DI 0 ax [656])) [0 _380->character S1 A8])
        (reg:QI 2 cx [orig:331 D.6694 ] [331])) fmtext_o.cpp:271 93 {*movqi_internal}
     (nil))
(insn 987 986 988 82 (set (reg:SI 0 ax [658])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 988 987 989 82 (set (reg:DI 1 dx [orig:332 D.6678 ] [332])
        (sign_extend:DI (reg:SI 0 ax [658]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 989 988 990 82 (set (reg:DI 0 ax [659])
        (reg:DI 1 dx [orig:332 D.6678 ] [332])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 990 989 991 82 (parallel [
            (set (reg:DI 0 ax [659])
                (ashift:DI (reg:DI 0 ax [659])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 512 {*ashldi3_1}
     (nil))
(insn 991 990 992 82 (parallel [
            (set (reg:DI 0 ax [659])
                (plus:DI (reg:DI 0 ax [659])
                    (reg:DI 1 dx [orig:332 D.6678 ] [332])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:332 D.6678 ] [332])
            (const_int 5 [0x5]))
        (nil)))
(insn 992 991 993 82 (parallel [
            (set (reg:DI 1 dx [660])
                (ashift:DI (reg:DI 0 ax [659])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 512 {*ashldi3_1}
     (nil))
(insn 993 992 994 82 (parallel [
            (set (reg:DI 0 ax [659])
                (plus:DI (reg:DI 0 ax [659])
                    (reg:DI 1 dx [660])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 218 {*adddi_1}
     (nil))
(insn 994 993 995 82 (parallel [
            (set (reg:DI 0 ax [661])
                (ashift:DI (reg:DI 0 ax [659])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 512 {*ashldi3_1}
     (nil))
(insn 995 994 996 82 (set (reg:DI 0 ax [659])
        (reg:DI 0 ax [661])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 996 995 997 82 (set (reg:DI 1 dx [orig:333 D.6678 ] [333])
        (reg:DI 0 ax [659])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 997 996 998 82 (set (reg/f:DI 0 ax [662])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 998 997 999 82 (parallel [
            (set (reg/f:DI 1 dx [orig:334 D.6689 ] [334])
                (plus:DI (reg:DI 1 dx [orig:333 D.6678 ] [333])
                    (reg/f:DI 0 ax [662])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:333 D.6678 ] [333]))
        (nil)))
(insn 999 998 1000 82 (set (reg:SI 0 ax [664])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1000 999 1001 82 (set (reg:DI 0 ax [663])
        (sign_extend:DI (reg:SI 0 ax [664]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 1001 1000 1002 82 (set (reg/f:DI 1 dx [orig:335 D.6693 ] [335])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [663])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:334 D.6689 ] [334])) [0 *_389 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1002 1001 1003 82 (set (reg:SI 0 ax [665])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1003 1002 1004 82 (parallel [
            (set (reg:SI 4 si [orig:336 D.6677 ] [336])
                (plus:SI (reg:SI 0 ax [665])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1004 1003 1005 82 (set (reg:SI 0 ax [666])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1005 1004 1195 82 (set (reg:DI 0 ax [orig:337 D.6678 ] [337])
        (sign_extend:DI (reg:SI 0 ax [666]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 1195 1005 1006 82 (set (reg:DI 0 ax [orig:338 D.6678 ] [338])
        (reg:DI 0 ax [orig:337 D.6678 ] [337])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1006 1195 1196 82 (parallel [
            (set (reg:DI 0 ax [orig:338 D.6678 ] [338])
                (ashift:DI (reg:DI 0 ax [orig:338 D.6678 ] [338])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 512 {*ashldi3_1}
     (nil))
(insn 1196 1006 1007 82 (set (reg:DI 2 cx [orig:338 D.6678 ] [338])
        (reg:DI 0 ax [orig:338 D.6678 ] [338])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1007 1196 1008 82 (set (reg/f:DI 0 ax [667])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1008 1007 1009 82 (parallel [
            (set (reg/f:DI 2 cx [orig:339 D.6696 ] [339])
                (plus:DI (reg:DI 2 cx [orig:338 D.6678 ] [338])
                    (reg/f:DI 0 ax [667])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
            (reg:DI 2 cx [orig:338 D.6678 ] [338]))
        (nil)))
(insn 1009 1008 1010 82 (set (reg:SI 0 ax [669])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1010 1009 1011 82 (set (reg:DI 0 ax [668])
        (sign_extend:DI (reg:SI 0 ax [669]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 1011 1010 1012 82 (set (reg/f:DI 2 cx [orig:340 D.6693 ] [340])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [668])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:339 D.6696 ] [339])) [0 *_394 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1012 1011 1013 82 (set (reg:SI 0 ax [670])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1013 1012 1014 82 (parallel [
            (set (reg:SI 0 ax [orig:341 D.6677 ] [341])
                (plus:SI (reg:SI 0 ax [670])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1014 1013 1015 82 (set (reg:DI 0 ax [671])
        (sign_extend:DI (reg:SI 0 ax [orig:341 D.6677 ] [341]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 1015 1014 1016 82 (set (reg:QI 2 cx [orig:342 D.6694 ] [342])
        (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:340 D.6693 ] [340])
                (reg:DI 0 ax [671])) [0 _395->character S1 A8])) fmtext_o.cpp:272 93 {*movqi_internal}
     (nil))
(insn 1016 1015 1017 82 (set (reg:DI 0 ax [672])
        (sign_extend:DI (reg:SI 4 si [orig:336 D.6677 ] [336]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 1017 1016 1018 82 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:335 D.6693 ] [335])
                (reg:DI 0 ax [672])) [0 _390->character S1 A8])
        (reg:QI 2 cx [orig:342 D.6694 ] [342])) fmtext_o.cpp:272 93 {*movqi_internal}
     (nil))
(insn 1018 1017 1019 82 (set (reg:SI 0 ax [673])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1019 1018 1020 82 (set (reg:DI 1 dx [orig:343 D.6678 ] [343])
        (sign_extend:DI (reg:SI 0 ax [673]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1020 1019 1021 82 (set (reg:DI 0 ax [674])
        (reg:DI 1 dx [orig:343 D.6678 ] [343])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1021 1020 1022 82 (parallel [
            (set (reg:DI 0 ax [674])
                (ashift:DI (reg:DI 0 ax [674])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 512 {*ashldi3_1}
     (nil))
(insn 1022 1021 1023 82 (parallel [
            (set (reg:DI 0 ax [674])
                (plus:DI (reg:DI 0 ax [674])
                    (reg:DI 1 dx [orig:343 D.6678 ] [343])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:343 D.6678 ] [343])
            (const_int 5 [0x5]))
        (nil)))
(insn 1023 1022 1024 82 (parallel [
            (set (reg:DI 1 dx [675])
                (ashift:DI (reg:DI 0 ax [674])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 512 {*ashldi3_1}
     (nil))
(insn 1024 1023 1025 82 (parallel [
            (set (reg:DI 0 ax [674])
                (plus:DI (reg:DI 0 ax [674])
                    (reg:DI 1 dx [675])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 218 {*adddi_1}
     (nil))
(insn 1025 1024 1026 82 (parallel [
            (set (reg:DI 0 ax [676])
                (ashift:DI (reg:DI 0 ax [674])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 512 {*ashldi3_1}
     (nil))
(insn 1026 1025 1027 82 (set (reg:DI 0 ax [674])
        (reg:DI 0 ax [676])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1027 1026 1028 82 (set (reg:DI 1 dx [orig:344 D.6678 ] [344])
        (reg:DI 0 ax [674])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1028 1027 1029 82 (set (reg/f:DI 0 ax [677])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1029 1028 1030 82 (parallel [
            (set (reg/f:DI 1 dx [orig:345 D.6689 ] [345])
                (plus:DI (reg:DI 1 dx [orig:344 D.6678 ] [344])
                    (reg/f:DI 0 ax [677])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:344 D.6678 ] [344]))
        (nil)))
(insn 1030 1029 1031 82 (set (reg:SI 0 ax [679])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1031 1030 1032 82 (set (reg:DI 0 ax [678])
        (sign_extend:DI (reg:SI 0 ax [679]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1032 1031 1033 82 (set (reg/f:DI 1 dx [orig:346 D.6693 ] [346])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [678])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:345 D.6689 ] [345])) [0 *_401 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1033 1032 1034 82 (set (reg:SI 0 ax [680])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1034 1033 1035 82 (parallel [
            (set (reg:SI 4 si [orig:347 D.6677 ] [347])
                (plus:SI (reg:SI 0 ax [680])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 1035 1034 1036 82 (set (reg:SI 0 ax [681])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1036 1035 1197 82 (set (reg:DI 0 ax [orig:348 D.6678 ] [348])
        (sign_extend:DI (reg:SI 0 ax [681]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1197 1036 1037 82 (set (reg:DI 0 ax [orig:349 D.6678 ] [349])
        (reg:DI 0 ax [orig:348 D.6678 ] [348])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1037 1197 1198 82 (parallel [
            (set (reg:DI 0 ax [orig:349 D.6678 ] [349])
                (ashift:DI (reg:DI 0 ax [orig:349 D.6678 ] [349])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 512 {*ashldi3_1}
     (nil))
(insn 1198 1037 1038 82 (set (reg:DI 2 cx [orig:349 D.6678 ] [349])
        (reg:DI 0 ax [orig:349 D.6678 ] [349])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1038 1198 1039 82 (set (reg/f:DI 0 ax [682])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1039 1038 1040 82 (parallel [
            (set (reg/f:DI 2 cx [orig:350 D.6696 ] [350])
                (plus:DI (reg:DI 2 cx [orig:349 D.6678 ] [349])
                    (reg/f:DI 0 ax [682])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
            (reg:DI 2 cx [orig:349 D.6678 ] [349]))
        (nil)))
(insn 1040 1039 1041 82 (set (reg:SI 0 ax [684])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1041 1040 1042 82 (set (reg:DI 0 ax [683])
        (sign_extend:DI (reg:SI 0 ax [684]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1042 1041 1043 82 (set (reg/f:DI 2 cx [orig:351 D.6693 ] [351])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [683])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:350 D.6696 ] [350])) [0 *_406 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1043 1042 1044 82 (set (reg:SI 0 ax [685])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1044 1043 1045 82 (parallel [
            (set (reg:SI 0 ax [orig:352 D.6677 ] [352])
                (plus:SI (reg:SI 0 ax [685])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 1045 1044 1046 82 (set (reg:DI 0 ax [686])
        (sign_extend:DI (reg:SI 0 ax [orig:352 D.6677 ] [352]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1046 1045 1047 82 (set (reg:QI 2 cx [orig:353 D.6694 ] [353])
        (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:351 D.6693 ] [351])
                (reg:DI 0 ax [686])) [0 _407->character S1 A8])) fmtext_o.cpp:273 93 {*movqi_internal}
     (nil))
(insn 1047 1046 1048 82 (set (reg:DI 0 ax [687])
        (sign_extend:DI (reg:SI 4 si [orig:347 D.6677 ] [347]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1048 1047 1049 82 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:346 D.6693 ] [346])
                (reg:DI 0 ax [687])) [0 _402->character S1 A8])
        (reg:QI 2 cx [orig:353 D.6694 ] [353])) fmtext_o.cpp:273 93 {*movqi_internal}
     (nil))
(insn 1049 1048 1050 82 (set (reg:SI 0 ax [688])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1050 1049 1051 82 (set (reg:DI 1 dx [orig:354 D.6678 ] [354])
        (sign_extend:DI (reg:SI 0 ax [688]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1051 1050 1052 82 (set (reg:DI 0 ax [689])
        (reg:DI 1 dx [orig:354 D.6678 ] [354])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1052 1051 1053 82 (parallel [
            (set (reg:DI 0 ax [689])
                (ashift:DI (reg:DI 0 ax [689])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 512 {*ashldi3_1}
     (nil))
(insn 1053 1052 1054 82 (parallel [
            (set (reg:DI 0 ax [689])
                (plus:DI (reg:DI 0 ax [689])
                    (reg:DI 1 dx [orig:354 D.6678 ] [354])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:354 D.6678 ] [354])
            (const_int 5 [0x5]))
        (nil)))
(insn 1054 1053 1055 82 (parallel [
            (set (reg:DI 1 dx [690])
                (ashift:DI (reg:DI 0 ax [689])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 512 {*ashldi3_1}
     (nil))
(insn 1055 1054 1056 82 (parallel [
            (set (reg:DI 0 ax [689])
                (plus:DI (reg:DI 0 ax [689])
                    (reg:DI 1 dx [690])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 218 {*adddi_1}
     (nil))
(insn 1056 1055 1057 82 (parallel [
            (set (reg:DI 0 ax [691])
                (ashift:DI (reg:DI 0 ax [689])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 512 {*ashldi3_1}
     (nil))
(insn 1057 1056 1058 82 (set (reg:DI 0 ax [689])
        (reg:DI 0 ax [691])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1058 1057 1059 82 (set (reg:DI 1 dx [orig:355 D.6678 ] [355])
        (reg:DI 0 ax [689])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1059 1058 1060 82 (set (reg/f:DI 0 ax [692])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1060 1059 1061 82 (parallel [
            (set (reg/f:DI 1 dx [orig:356 D.6689 ] [356])
                (plus:DI (reg:DI 1 dx [orig:355 D.6678 ] [355])
                    (reg/f:DI 0 ax [692])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:355 D.6678 ] [355]))
        (nil)))
(insn 1061 1060 1062 82 (set (reg:SI 0 ax [694])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1062 1061 1063 82 (set (reg:DI 0 ax [693])
        (sign_extend:DI (reg:SI 0 ax [694]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1063 1062 1064 82 (set (reg/f:DI 1 dx [orig:357 D.6693 ] [357])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [693])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:356 D.6689 ] [356])) [0 *_413 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1064 1063 1065 82 (set (reg:SI 0 ax [695])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1065 1064 1066 82 (parallel [
            (set (reg:SI 4 si [orig:358 D.6677 ] [358])
                (plus:SI (reg:SI 0 ax [695])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 1066 1065 1067 82 (set (reg:SI 0 ax [696])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1067 1066 1199 82 (set (reg:DI 0 ax [orig:359 D.6678 ] [359])
        (sign_extend:DI (reg:SI 0 ax [696]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1199 1067 1068 82 (set (reg:DI 0 ax [orig:360 D.6678 ] [360])
        (reg:DI 0 ax [orig:359 D.6678 ] [359])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1068 1199 1200 82 (parallel [
            (set (reg:DI 0 ax [orig:360 D.6678 ] [360])
                (ashift:DI (reg:DI 0 ax [orig:360 D.6678 ] [360])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 512 {*ashldi3_1}
     (nil))
(insn 1200 1068 1069 82 (set (reg:DI 2 cx [orig:360 D.6678 ] [360])
        (reg:DI 0 ax [orig:360 D.6678 ] [360])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1069 1200 1070 82 (set (reg/f:DI 0 ax [697])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1070 1069 1071 82 (parallel [
            (set (reg/f:DI 2 cx [orig:361 D.6696 ] [361])
                (plus:DI (reg:DI 2 cx [orig:360 D.6678 ] [360])
                    (reg/f:DI 0 ax [697])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
            (reg:DI 2 cx [orig:360 D.6678 ] [360]))
        (nil)))
(insn 1071 1070 1072 82 (set (reg:SI 0 ax [699])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1072 1071 1073 82 (set (reg:DI 0 ax [698])
        (sign_extend:DI (reg:SI 0 ax [699]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1073 1072 1074 82 (set (reg/f:DI 2 cx [orig:362 D.6693 ] [362])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [698])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:361 D.6696 ] [361])) [0 *_418 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1074 1073 1075 82 (set (reg:SI 0 ax [700])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1075 1074 1076 82 (parallel [
            (set (reg:SI 0 ax [orig:363 D.6677 ] [363])
                (plus:SI (reg:SI 0 ax [700])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 1076 1075 1077 82 (set (reg:DI 0 ax [701])
        (sign_extend:DI (reg:SI 0 ax [orig:363 D.6677 ] [363]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1077 1076 1078 82 (set (reg:QI 2 cx [orig:364 D.6694 ] [364])
        (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:362 D.6693 ] [362])
                (reg:DI 0 ax [701])) [0 _419->character S1 A8])) fmtext_o.cpp:274 93 {*movqi_internal}
     (nil))
(insn 1078 1077 1079 82 (set (reg:DI 0 ax [702])
        (sign_extend:DI (reg:SI 4 si [orig:358 D.6677 ] [358]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1079 1078 1080 82 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:357 D.6693 ] [357])
                (reg:DI 0 ax [702])) [0 _414->character S1 A8])
        (reg:QI 2 cx [orig:364 D.6694 ] [364])) fmtext_o.cpp:274 93 {*movqi_internal}
     (nil))
(insn 1080 1079 1174 82 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80064 [0xfffffffffffec740])) [0 k+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:269 217 {*addsi_1}
     (nil))
(jump_insn 1174 1080 1175 82 (set (pc)
        (label_ref 1081)) fmtext_o.cpp:269 654 {jump}
     (nil)
 -> 1081)
;;  succ:       81 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1175 1174 1084)
;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1084 1175 1085 83 62 "" [1 uses])
(note 1085 1084 1086 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1086 1085 1176 83 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80068 [0xfffffffffffec73c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:267 217 {*addsi_1}
     (nil))
(jump_insn 1176 1086 1177 83 (set (pc)
        (label_ref 1087)) fmtext_o.cpp:267 654 {jump}
     (nil)
 -> 1087)
;;  succ:       79 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1177 1176 1090)
;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1090 1177 1091 84 61 "" [1 uses])
(note 1091 1090 1092 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1092 1091 1178 84 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:265 217 {*addsi_1}
     (nil))
(jump_insn 1178 1092 1179 84 (set (pc)
        (label_ref 1093)) fmtext_o.cpp:265 654 {jump}
     (nil)
 -> 1093)
;;  succ:       77 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1179 1178 1096)
;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              77
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1096 1179 1097 85 14 "" [2 uses])
(note 1097 1096 1098 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 1098 1097 1180 85 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80072 [0xfffffffffffec738])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:120 217 {*addsi_1}
     (nil))
(jump_insn 1180 1098 1181 85 (set (pc)
        (label_ref 1099)) fmtext_o.cpp:120 654 {jump}
     (nil)
 -> 1099)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1181 1180 1102)
;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 365 703
(code_label 1102 1181 1103 86 13 "" [1 uses])
(note 1103 1102 1104 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 1104 1103 1105 86 (set (reg/f:DI 0 ax [703])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])) fmtext_o.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1105 1104 1106 86 (set (reg/f:DI 0 ax [orig:365 D.6682 ] [365])
        (mem/f:DI (reg/f:DI 0 ax [703]) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1106 1105 1107 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:365 D.6682 ] [365])
            (const_int 0 [0]))) fmtext_o.cpp:284 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1107 1106 1108 86 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1113)
            (pc))) fmtext_o.cpp:284 612 {*jcc_1}
     (nil)
 -> 1113)
;;  succ:       87 (FALLTHRU)
;;              88
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86 (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 366 704
(note 1108 1107 1109 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 1109 1108 1110 87 (set (reg/f:DI 0 ax [704])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 in_file+0 S8 A64])) fmtext_o.cpp:285 89 {*movdi_internal}
     (nil))
(insn 1110 1109 1111 87 (set (reg/f:DI 0 ax [orig:366 D.6682 ] [366])
        (mem/f:DI (reg/f:DI 0 ax [704]) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:285 89 {*movdi_internal}
     (nil))
(insn 1111 1110 1112 87 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:366 D.6682 ] [366])) fmtext_o.cpp:285 89 {*movdi_internal}
     (nil))
(call_insn 1112 1111 1113 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f93b25741b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:285 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       88 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86
;;              87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 367 368
(code_label 1113 1112 1114 88 67 "" [1 uses])
(note 1114 1113 1115 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 1115 1114 1118 88 (set (reg:SI 0 ax [orig:367 D.6677 ] [367])
        (const_int 1 [0x1])) fmtext_o.cpp:288 90 {*movsi_internal}
     (nil))
(insn 1118 1115 1122 88 (set (reg:SI 0 ax [orig:368 <retval> ] [368])
        (reg:SI 0 ax [orig:367 D.6677 ] [367])) fmtext_o.cpp:288 90 {*movsi_internal}
     (nil))
(insn 1122 1118 1123 88 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:368 <retval> ] [368])) fmtext_o.cpp:290 90 {*movsi_internal}
     (nil))
(insn 1123 1122 1124 88 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.6698+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [707]))
        ]) fmtext_o.cpp:290 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1124 1123 1130 88 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1127)
            (pc))) fmtext_o.cpp:290 612 {*jcc_1}
     (nil)
 -> 1127)
;;  succ:       90
;;              89 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88 (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1130 1124 1125 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(call_insn 1125 1130 1126 89 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f93b26b3af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:290 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1126 1125 1127)
;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1127 1126 1131 90 69 "" [1 uses])
(note 1131 1127 1128 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 1128 1131 1182 90 (use (reg/i:SI 0 ax)) fmtext_o.cpp:290 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1182 1128 0 NOTE_INSN_DELETED)

;; Function void write_csi_data(char*, Precision4* (*)[100], Data_file_header**, Data_block_header**, PE_info*) (_Z14write_csi_dataPcPA100_P10Precision4PP16Data_file_headerPP17Data_block_headerP7PE_info, funcdef_no=4, decl_uid=5427, cgraph_uid=4, symbol_order=4)

      Creating newreg=165
Removing SCRATCH in insn #8 (nop 2)
rescanning insn with uid = 8.
      Creating newreg=166
Removing SCRATCH in insn #170 (nop 3)
rescanning insn with uid = 170.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r165
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 50:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=167 from oldreg=101, assigning class GENERAL_REGS to r167
   58: {r167:SI=r167:SI-r138:SI;clobber flags:CC;}
      REG_DEAD r140:SI
      REG_DEAD r138:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  190: r167:SI=r140:SI
    Inserting insn reload after:
  191: r101:SI=r167:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 63:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 64:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 67:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 68:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 85:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 93:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 97:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 102:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 103:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 119
	 Choosing alt 2 in insn 119:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 142:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 148:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rBwBz {*call_value}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r166
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 15
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 13
   Insn 172: point = 0
  BB 14
  BB 12
   Insn 171: point = 0
   Insn 170: point = 0
  BB 15
   Insn 188: point = 1
  BB 11
   Insn 166: point = 1
   Insn 165: point = 1
   Insn 164: point = 2
  BB 3
   Insn 178: point = 3
   Insn 27: point = 3
   Insn 26: point = 3
   Insn 25: point = 3
   Insn 24: point = 3
   Insn 23: point = 4
  BB 10
   Insn 162: point = 5
   Insn 161: point = 5
   Insn 160: point = 5
   Insn 159: point = 5
   Insn 158: point = 6
   Insn 157: point = 7
   Insn 156: point = 8
   Insn 155: point = 9
   Insn 154: point = 9
  BB 5
   Insn 83: point = 9
   Insn 82: point = 9
   Insn 81: point = 10
   Insn 80: point = 12
  BB 9
   Insn 182: point = 13
   Insn 148: point = 13
  BB 7
   Insn 111: point = 13
   Insn 110: point = 13
   Insn 109: point = 14
   Insn 108: point = 16
  BB 8
   Insn 180: point = 17
   Insn 142: point = 17
   Insn 141: point = 17
   Insn 140: point = 17
   Insn 139: point = 18
   Insn 138: point = 19
   Insn 137: point = 19
   Insn 136: point = 20
   Insn 135: point = 21
   Insn 134: point = 23
   Insn 133: point = 25
   Insn 132: point = 26
   Insn 131: point = 28
   Insn 130: point = 29
   Insn 129: point = 31
   Insn 128: point = 33
   Insn 127: point = 35
   Insn 126: point = 36
   Insn 125: point = 37
   Insn 124: point = 38
   Insn 123: point = 38
   Insn 122: point = 39
   Insn 121: point = 41
   Insn 120: point = 42
   Insn 119: point = 44
   Insn 118: point = 46
   Insn 117: point = 48
   Insn 116: point = 50
   Insn 115: point = 51
   Insn 114: point = 53
   Insn 113: point = 55
  BB 6
   Insn 106: point = 56
   Insn 105: point = 56
   Insn 104: point = 56
   Insn 103: point = 57
   Insn 102: point = 57
   Insn 101: point = 57
   Insn 100: point = 58
   Insn 99: point = 59
   Insn 98: point = 61
   Insn 97: point = 62
   Insn 96: point = 63
   Insn 95: point = 64
   Insn 94: point = 66
   Insn 93: point = 67
   Insn 92: point = 68
   Insn 91: point = 69
   Insn 90: point = 71
   Insn 89: point = 72
   Insn 88: point = 73
   Insn 87: point = 75
   Insn 86: point = 77
   Insn 85: point = 79
  BB 4
   Insn 78: point = 80
   Insn 77: point = 80
   Insn 76: point = 80
   Insn 75: point = 80
   Insn 74: point = 81
   Insn 73: point = 81
   Insn 72: point = 81
   Insn 71: point = 82
   Insn 70: point = 83
   Insn 69: point = 85
   Insn 68: point = 86
   Insn 67: point = 87
   Insn 66: point = 88
   Insn 65: point = 90
   Insn 64: point = 91
   Insn 63: point = 92
   Insn 62: point = 93
   Insn 61: point = 95
   Insn 60: point = 96
   Insn 59: point = 97
   Insn 191: point = 99
	Hard reg 0 is preferable by r167 with profit 1
   Insn 58: point = 101
   Insn 190: point = 102
	Hard reg 0 is preferable by r167 with profit 1
	Hard reg 4 is preferable by r167 with profit 1
   Insn 57: point = 104
   Insn 56: point = 105
   Insn 55: point = 107
   Insn 54: point = 109
   Insn 53: point = 111
   Insn 52: point = 113
   Insn 51: point = 115
   Insn 50: point = 116
   Insn 49: point = 118
   Insn 48: point = 120
   Insn 47: point = 122
   Insn 46: point = 123
   Insn 45: point = 125
   Insn 44: point = 127
   Insn 43: point = 128
   Insn 42: point = 130
   Insn 41: point = 131
   Insn 40: point = 132
   Insn 39: point = 134
   Insn 38: point = 135
   Insn 37: point = 137
   Insn 36: point = 138
   Insn 35: point = 139
   Insn 34: point = 141
   Insn 33: point = 142
   Insn 32: point = 144
  BB 2
   Insn 21: point = 145
   Insn 20: point = 145
   Insn 19: point = 146
   Insn 18: point = 147
   Insn 17: point = 147
   Insn 16: point = 148
   Insn 15: point = 149
   Insn 14: point = 149
   Insn 13: point = 150
   Insn 12: point = 150
   Insn 11: point = 151
   Insn 8: point = 151
   Insn 6: point = 153
   Insn 5: point = 153
   Insn 4: point = 153
   Insn 3: point = 153
   Insn 2: point = 153
 r87: [147..148]
 r88: [145..146]
 r89: [138..142]
 r90: [138..139]
 r91: [131..135]
 r92: [131..132]
 r93: [96..128]
 r94: [124..125]
 r95: [117..123]
 r96: [119..120]
 r97: [117..118]
 r98: [98..116]
 r99: [112..113]
 r100: [110..111]
 r101: [98..99]
 r102: [96..97]
 r103: [91..93]
 r104: [86..88]
 r105: [80..83]
 r106: [9..10]
 r107: [78..79]
 r108: [76..77]
 r109: [74..75]
 r110: [72..73]
 r111: [67..69]
 r112: [67..68]
 r113: [62..64]
 r114: [62..63]
 r115: [56..59]
 r116: [13..14]
 r117: [52..53]
 r118: [45..51]
 r119: [47..48]
 r120: [45..46]
 r121: [43..44]
 r122: [18..42]
 r123: [37..39]
 r124: [27..29]
 r125: [22..26]
 r126: [17..21]
 r127: [5..8]
 r128: [149..150]
 r129: [3..4]
 r130: [143..144]
 r131: [140..141]
 r132: [136..137]
 r133: [133..134]
 r134: [129..130]
 r135: [126..127]
 r136: [121..122]
 r137: [114..115]
 r138: [108..109] [101..105]
 r139: [106..107]
 r140: [103..104]
 r141: [94..95]
 r142: [91..92]
 r143: [89..90]
 r144: [86..87]
 r145: [84..85]
 r146: [81..82]
 r147: [11..12]
 r148: [70..71]
 r149: [65..66]
 r150: [60..61]
 r151: [57..58]
 r152: [15..16]
 r153: [54..55]
 r154: [49..50]
 r155: [40..41]
 r156: [34..38] [30..31]
 r157: [35..36]
 r158: [32..33]
 r159: [27..28]
 r160: [22..23]
 r161: [24..25]
 r162: [19..20]
 r163: [6..7]
 r164: [1..2]
 r165: [151..152]
 r166: [0..0]
 r167: [100..102]
Compressing live ranges: from 153 to 127 - 83%
Ranges after the compression:
 r87: [121..122]
 r88: [119..120]
 r89: [113..116]
 r90: [113..114]
 r91: [107..110]
 r92: [107..108]
 r93: [77..104]
 r94: [101..102]
 r95: [95..100]
 r96: [97..98]
 r97: [95..96]
 r98: [79..94]
 r99: [91..92]
 r100: [89..90]
 r101: [79..80]
 r102: [77..78]
 r103: [73..74]
 r104: [69..70]
 r105: [65..66]
 r106: [7..8]
 r107: [63..64]
 r108: [61..62]
 r109: [59..60]
 r110: [57..58]
 r111: [53..54]
 r112: [53..54]
 r113: [49..50]
 r114: [49..50]
 r115: [45..46]
 r116: [11..12]
 r117: [41..42]
 r118: [35..40]
 r119: [37..38]
 r120: [35..36]
 r121: [33..34]
 r122: [15..32]
 r123: [29..30]
 r124: [21..22]
 r125: [17..20]
 r126: [15..16]
 r127: [5..6]
 r128: [123..124]
 r129: [3..4]
 r130: [117..118]
 r131: [115..116]
 r132: [111..112]
 r133: [109..110]
 r134: [105..106]
 r135: [103..104]
 r136: [99..100]
 r137: [93..94]
 r138: [87..88] [81..84]
 r139: [85..86]
 r140: [83..84]
 r141: [75..76]
 r142: [73..74]
 r143: [71..72]
 r144: [69..70]
 r145: [67..68]
 r146: [65..66]
 r147: [9..10]
 r148: [55..56]
 r149: [51..52]
 r150: [47..48]
 r151: [45..46]
 r152: [13..14]
 r153: [43..44]
 r154: [39..40]
 r155: [31..32]
 r156: [27..30] [23..24]
 r157: [27..28]
 r158: [25..26]
 r159: [21..22]
 r160: [17..18]
 r161: [19..20]
 r162: [15..16]
 r163: [5..6]
 r164: [1..2]
 r165: [125..126]
 r166: [0..0]
 r167: [81..82]

********** Assignment #1: **********

	 Assigning to 167 (cl=GENERAL_REGS, orig=101, freq=3, tfirst=167, tfreq=3)...
	   Assign 4 to reload r167 (freq=3)
	 Assigning to 165 (cl=INDEX_REGS, orig=165, freq=1, tfirst=165, tfreq=1)...
	   Assign 0 to reload r165 (freq=1)
	 Assigning to 166 (cl=INDEX_REGS, orig=166, freq=1, tfirst=166, tfreq=1)...
	   Assign 0 to reload r166 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 33
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 60
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 50
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 64
changing reg in insn 66
changing reg in insn 68
changing reg in insn 70
changing reg in insn 75
changing reg in insn 81
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 97
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 104
changing reg in insn 109
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 139
changing reg in insn 122
changing reg in insn 125
changing reg in insn 123
changing reg in insn 125
changing reg in insn 130
changing reg in insn 132
changing reg in insn 132
changing reg in insn 132
changing reg in insn 135
changing reg in insn 135
changing reg in insn 140
changing reg in insn 156
changing reg in insn 159
changing reg in insn 12
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 54
changing reg in insn 58
changing reg in insn 57
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 80
changing reg in insn 81
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 108
changing reg in insn 109
changing reg in insn 113
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 121
changing reg in insn 122
changing reg in insn 129
changing reg in insn 127
changing reg in insn 125
changing reg in insn 124
changing reg in insn 123
changing reg in insn 130
changing reg in insn 128
changing reg in insn 127
changing reg in insn 126
changing reg in insn 125
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 157
changing reg in insn 158
changing reg in insn 164
changing reg in insn 165
changing reg in insn 8
changing reg in insn 170
deleting insn with uid = 16.
deleting insn with uid = 54.
deleting insn with uid = 56.
deleting insn with uid = 190.
deleting insn with uid = 86.
deleting insn with uid = 88.
deleting insn with uid = 129.
deleting insn with uid = 139.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 172.


void write_csi_data(char*, Precision4* (*)[100], Data_file_header**, Data_block_header**, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 37[r8]
;;  ref usage 	r0={68d,60u} r1={29d,21u,2e} r2={15d,6u} r4={18d,9u} r5={18d,9u} r6={1d,67u} r7={1d,24u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={31d,6u} r18={9d} r19={9d} r20={1d,1u,1e} r21={12d,2u} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d,1u} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} 
;;    total ref usage 997{788d,206u,3e} in 143{134 regular + 9 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 128
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])
        (reg:DI 4 si [ csi_final ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])
        (reg:DI 37 r8 [ pe_info ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(note 7 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 7 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6716+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [165])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:294 986 {stack_tls_protect_set_di}
     (nil))
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:296 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f93b2309090 *.LC19>)) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [128])) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(call_insn 15 14 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f93b2574510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:300 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 15 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 D.6705 ] [87])) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:300 4 {*cmpdi_ccno_1}
     (nil))
(insn 19 18 20 2 (set (reg:QI 0 ax [orig:88 D.6706 ] [88])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:300 607 {*setcc_qi}
     (nil))
(insn 20 19 21 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.6706 ] [88])
            (const_int 0 [0]))) fmtext_o.cpp:300 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) fmtext_o.cpp:300 612 {*jcc_1}
     (nil)
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 129
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:302 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [129])) fmtext_o.cpp:302 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f93b2296120 *.LC1>)) fmtext_o.cpp:302 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:302 93 {*movqi_internal}
     (nil))
(call_insn 27 26 178 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f93b27b65e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:302 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 178 27 179 3 (set (pc)
        (label_ref:DI 187)) fmtext_o.cpp:369 654 {jump}
     (nil)
 -> 187)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 179 178 30)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146
(code_label 30 179 31 4 71 "" [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 0 ax [orig:89 D.6707 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [130]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg/f:DI 1 dx [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:SI 1 dx [orig:90 D.6708 ] [90])
        (mem/j:SI (plus:DI (reg/f:DI 1 dx [131])
                (const_int 8 [0x8])) [0 pe_info_17(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:306 90 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (mem/j:SI (reg/f:DI 0 ax [orig:89 D.6707 ] [89]) [0 _16->nblocks.number+0 S4 A32])
        (reg:SI 1 dx [orig:90 D.6708 ] [90])) fmtext_o.cpp:306 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg/f:DI 0 ax [orig:91 D.6707 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [132]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 1 dx [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:SI 1 dx [orig:92 D.6708 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 1 dx [133])
                (const_int 8 [0x8])) [0 pe_info_17(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:307 90 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:91 D.6707 ] [91])
                (const_int 4 [0x4])) [0 _20->ntraces.number+0 S4 A32])
        (reg:SI 1 dx [orig:92 D.6708 ] [92])) fmtext_o.cpp:307 90 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 1 dx [orig:93 D.6707 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [134]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [orig:94 D.6707 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [135]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SI 2 cx [orig:95 D.6708 ] [95])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:94 D.6707 ] [94])
                (const_int 4 [0x4])) [0 _24->ntraces.number+0 S4 A32])) fmtext_o.cpp:308 90 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [orig:96 D.6707 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [136]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:SI 0 ax [orig:97 D.6708 ] [97])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:96 D.6707 ] [96])
                (const_int 16 [0x10])) [0 _26->tbytes.number+0 S4 A32])) fmtext_o.cpp:308 90 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (parallel [
            (set (reg:SI 2 cx [orig:98 D.6708 ] [98])
                (mult:SI (reg:SI 2 cx [orig:95 D.6708 ] [95])
                    (reg:SI 0 ax [orig:97 D.6708 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:308 305 {*mulsi3_1}
     (nil))
(insn 51 50 52 4 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:309 89 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg/f:DI 0 ax [orig:99 D.6707 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [137]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:309 89 {*movdi_internal}
     (nil))
(insn 53 52 55 4 (set (reg:SI 0 ax [orig:100 D.6708 ] [100])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:99 D.6707 ] [99])
                (const_int 28 [0x1c])) [0 _29->spare1.number+0 S4 A32])) fmtext_o.cpp:309 90 {*movsi_internal}
     (nil))
(insn 55 53 57 4 (parallel [
            (set (reg:SI 0 ax [139])
                (ashift:SI (reg:SI 0 ax [138])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 511 {*ashlsi3_1}
     (nil))
(insn 57 55 58 4 (parallel [
            (set (reg:SI 4 si [140])
                (ashift:SI (reg:SI 0 ax [138])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 511 {*ashlsi3_1}
     (nil))
(insn 58 57 191 4 (parallel [
            (set (reg:SI 4 si [orig:101 D.6708 ] [101])
                (minus:SI (reg:SI 4 si [orig:101 D.6708 ] [101])
                    (reg:SI 0 ax [138])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 260 {*subsi_1}
     (nil))
(insn 191 58 59 4 (set (reg:SI 0 ax [orig:101 D.6708 ] [101])
        (reg:SI 4 si [orig:101 D.6708 ] [101])) fmtext_o.cpp:309 90 {*movsi_internal}
     (nil))
(insn 59 191 60 4 (parallel [
            (set (reg:SI 0 ax [orig:102 D.6708 ] [102])
                (plus:SI (reg:SI 0 ax [orig:101 D.6708 ] [101])
                    (reg:SI 2 cx [orig:98 D.6708 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 217 {*addsi_1}
     (nil))
(insn 60 59 61 4 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:93 D.6707 ] [93])
                (const_int 20 [0x14])) [0 _23->bbytes.number+0 S4 A32])
        (reg:SI 0 ax [orig:102 D.6708 ] [102])) fmtext_o.cpp:309 90 {*movsi_internal}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:326 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg/f:DI 0 ax [orig:103 D.6709 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [141]) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:326 89 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:SF 21 xmm0 [142])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S4 A32])) fmtext_o.cpp:326 129 {*movsf_internal}
     (nil))
(insn 64 63 65 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:103 D.6709 ] [103])
                (const_int 20 [0x14])) [0 _35->lvl.number+0 S4 A32])
        (reg:SF 21 xmm0 [142])) fmtext_o.cpp:326 129 {*movsf_internal}
     (nil))
(insn 65 64 66 4 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:327 89 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [orig:104 D.6709 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [143]) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:327 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:SF 21 xmm0 [144])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S4 A32])) fmtext_o.cpp:327 129 {*movsf_internal}
     (nil))
(insn 68 67 69 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:104 D.6709 ] [104])
                (const_int 24 [0x18])) [0 _37->tlt.number+0 S4 A32])
        (reg:SF 21 xmm0 [144])) fmtext_o.cpp:327 129 {*movsf_internal}
     (nil))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (reg/f:DI 0 ax [orig:105 D.6707 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [145]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg:DI 1 dx [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 2 cx)
        (reg:DI 1 dx [146])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 D.6707 ] [105])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(call_insn 76 75 77 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f93b27b60d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:339 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 77 76 78 4 (set (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_short_variable.number+0 S2 A64])
        (const_int 0 [0])) fmtext_o.cpp:343 92 {*movhi_internal}
     (nil))
(insn 78 77 149 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:345 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              9 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 147
(code_label 149 78 79 5 76 "" [1 uses])
(note 79 149 80 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 5 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:345 89 {*movdi_internal}
     (nil))
(insn 81 80 82 5 (set (reg:SI 0 ax [orig:106 D.6708 ] [106])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [147])
                (const_int 8 [0x8])) [0 pe_info_17(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:345 90 {*movsi_internal}
     (nil))
(insn 82 81 83 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:106 D.6708 ] [106])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32]))) fmtext_o.cpp:345 7 {*cmpsi_1}
     (nil))
(jump_insn 83 82 84 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 152)
            (pc))) fmtext_o.cpp:345 612 {*jcc_1}
     (nil)
 -> 152)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 108 109 110 111 112 113 114 115 148 149 150 151
(note 84 83 85 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 87 6 (set (reg:HI 0 ax [orig:107 D.6710 ] [107])
        (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_short_variable.number+0 S2 A64])) fmtext_o.cpp:347 92 {*movhi_internal}
     (nil))
(insn 87 85 89 6 (parallel [
            (set (reg:HI 0 ax [orig:109 D.6711 ] [109])
                (plus:HI (reg:HI 0 ax [orig:108 D.6711 ] [108])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:347 220 {*addhi_1}
     (nil))
(insn 89 87 90 6 (set (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_short_variable.number+0 S2 A64])
        (reg:HI 0 ax [orig:110 D.6710 ] [110])) fmtext_o.cpp:347 92 {*movhi_internal}
     (nil))
(insn 90 89 91 6 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:349 89 {*movdi_internal}
     (nil))
(insn 91 90 92 6 (set (reg/f:DI 0 ax [orig:111 D.6709 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [148]) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:349 89 {*movdi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:QI 1 dx [orig:112 D.6712 ] [112])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_short_variable.character+0 S1 A64])) fmtext_o.cpp:349 93 {*movqi_internal}
     (nil))
(insn 93 92 94 6 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:111 D.6709 ] [111])
                (const_int 4 [0x4])) [0 _49->index.character+0 S1 A32])
        (reg:QI 1 dx [orig:112 D.6712 ] [112])) fmtext_o.cpp:349 93 {*movqi_internal}
     (nil))
(insn 94 93 95 6 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:350 89 {*movdi_internal}
     (nil))
(insn 95 94 96 6 (set (reg/f:DI 0 ax [orig:113 D.6709 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [149]) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:350 89 {*movdi_internal}
     (nil))
(insn 96 95 97 6 (set (reg:QI 1 dx [orig:114 D.6712 ] [114])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -15 [0xfffffffffffffff1])) [0 temp_short_variable.character+1 S1 A8])) fmtext_o.cpp:350 93 {*movqi_internal}
     (nil))
(insn 97 96 98 6 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:113 D.6709 ] [113])
                (const_int 5 [0x5])) [0 _52->index.character+1 S1 A8])
        (reg:QI 1 dx [orig:114 D.6712 ] [114])) fmtext_o.cpp:350 93 {*movqi_internal}
     (nil))
(insn 98 97 99 6 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 0 ax [orig:115 D.6709 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [150]) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 100 99 101 6 (set (reg:DI 1 dx [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 101 100 102 6 (set (reg:DI 2 cx)
        (reg:DI 1 dx [151])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 102 101 103 6 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 103 102 104 6 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 104 103 105 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:115 D.6709 ] [115])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(call_insn 105 104 106 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f93b27b60d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:352 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 106 105 143 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:354 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              8 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 152
(code_label 143 106 107 7 75 "" [1 uses])
(note 107 143 108 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 7 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:354 89 {*movdi_internal}
     (nil))
(insn 109 108 110 7 (set (reg:SI 0 ax [orig:116 D.6708 ] [116])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [152])
                (const_int 8 [0x8])) [0 pe_info_17(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:354 90 {*movsi_internal}
     (nil))
(insn 110 109 111 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:116 D.6708 ] [116])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32]))) fmtext_o.cpp:354 7 {*cmpsi_1}
     (nil))
(jump_insn 111 110 112 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) fmtext_o.cpp:354 612 {*jcc_1}
     (nil)
 -> 146)
;;  succ:       9
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 118 119 120 121 122 123 124 125 126 153 154 155 156 157 158 159 160 161 162
(note 112 111 113 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 8 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 114 113 115 8 (set (reg/f:DI 0 ax [orig:117 D.6707 ] [117])
        (mem/f:DI (reg/f:DI 0 ax [153]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 115 114 116 8 (set (reg:SI 1 dx [orig:118 D.6708 ] [118])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:117 D.6707 ] [117])
                (const_int 8 [0x8])) [0 _59->np.number+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 116 115 117 8 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 117 116 118 8 (set (reg/f:DI 0 ax [orig:119 D.6707 ] [119])
        (mem/f:DI (reg/f:DI 0 ax [154]) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 118 117 119 8 (set (reg:SI 0 ax [orig:120 D.6708 ] [120])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:119 D.6707 ] [119])
                (const_int 12 [0xc])) [0 _61->ebytes.number+0 S4 A32])) fmtext_o.cpp:357 90 {*movsi_internal}
     (nil))
(insn 119 118 120 8 (parallel [
            (set (reg:SI 0 ax [orig:121 D.6708 ] [121])
                (mult:SI (reg:SI 0 ax [orig:120 D.6708 ] [120])
                    (reg:SI 1 dx [orig:118 D.6708 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 305 {*mulsi3_1}
     (nil))
(insn 120 119 121 8 (set (reg:DI 4 si [orig:122 D.6713 ] [122])
        (sign_extend:DI (reg:SI 0 ax [orig:121 D.6708 ] [121]))) fmtext_o.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 8 (set (reg:SI 0 ax [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 122 121 123 8 (set (reg:DI 1 dx [orig:123 D.6713 ] [123])
        (sign_extend:DI (reg:SI 0 ax [155]))) fmtext_o.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 123 122 124 8 (set (reg:DI 0 ax [156])
        (reg:DI 1 dx [orig:123 D.6713 ] [123])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 124 123 125 8 (parallel [
            (set (reg:DI 0 ax [156])
                (ashift:DI (reg:DI 0 ax [156])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 512 {*ashldi3_1}
     (nil))
(insn 125 124 126 8 (parallel [
            (set (reg:DI 0 ax [156])
                (plus:DI (reg:DI 0 ax [156])
                    (reg:DI 1 dx [orig:123 D.6713 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:123 D.6713 ] [123])
            (const_int 5 [0x5]))
        (nil)))
(insn 126 125 127 8 (parallel [
            (set (reg:DI 1 dx [157])
                (ashift:DI (reg:DI 0 ax [156])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 512 {*ashldi3_1}
     (nil))
(insn 127 126 128 8 (parallel [
            (set (reg:DI 0 ax [156])
                (plus:DI (reg:DI 0 ax [156])
                    (reg:DI 1 dx [157])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 218 {*adddi_1}
     (nil))
(insn 128 127 130 8 (parallel [
            (set (reg:DI 0 ax [158])
                (ashift:DI (reg:DI 0 ax [156])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 512 {*ashldi3_1}
     (nil))
(insn 130 128 131 8 (set (reg:DI 1 dx [orig:124 D.6713 ] [124])
        (reg:DI 0 ax [156])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 131 130 132 8 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 132 131 133 8 (parallel [
            (set (reg/f:DI 1 dx [orig:125 D.6714 ] [125])
                (plus:DI (reg:DI 1 dx [orig:124 D.6713 ] [124])
                    (reg/f:DI 0 ax [159])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.6713 ] [124]))
        (nil)))
(insn 133 132 134 8 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 134 133 135 8 (set (reg:DI 0 ax [160])
        (sign_extend:DI (reg:SI 0 ax [161]))) fmtext_o.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 8 (set (reg/f:DI 0 ax [orig:126 D.6715 ] [126])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [160])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:125 D.6714 ] [125])) [0 *_68 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:DI 1 dx [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 137 136 138 8 (set (reg:DI 2 cx)
        (reg:DI 1 dx [162])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 138 137 140 8 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 140 138 141 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:126 D.6715 ] [126])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(call_insn 141 140 142 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f93b27b60d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:357 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 142 141 180 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:354 217 {*addsi_1}
     (nil))
(jump_insn 180 142 181 8 (set (pc)
        (label_ref 143)) fmtext_o.cpp:354 654 {jump}
     (nil)
 -> 143)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 146)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 146 181 147 9 74 "" [1 uses])
(note 147 146 148 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 182 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:345 217 {*addsi_1}
     (nil))
(jump_insn 182 148 183 9 (set (pc)
        (label_ref 149)) fmtext_o.cpp:345 654 {jump}
     (nil)
 -> 149)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 183 182 152)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 127 163
(code_label 152 183 153 10 73 "" [1 uses])
(note 153 152 154 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 154 153 155 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f93b2309120 *.LC21>)) fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(call_insn/i 155 154 156 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f93b2635bd0 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:361 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 156 155 157 10 (set (reg:SI 1 dx [orig:127 D.6708 ] [127])
        (reg:SI 0 ax)) fmtext_o.cpp:361 90 {*movsi_internal}
     (nil))
(insn 157 156 158 10 (set (reg:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 158 157 159 10 (set (reg:DI 4 si)
        (reg:DI 0 ax [163])) fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 159 158 160 10 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:127 D.6708 ] [127])) fmtext_o.cpp:361 90 {*movsi_internal}
     (nil))
(call_insn 160 159 161 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_putc") [flags 0x41]  <function_decl 0x7f93b250fd80 _IO_putc>) [0 _IO_putc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:361 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 161 160 162 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:364 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 162 161 163 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 187)
            (pc))) fmtext_o.cpp:364 612 {*jcc_1}
     (nil)
 -> 187)
;;  succ:       11 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 164
(note 163 162 164 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 11 (set (reg:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:365 89 {*movdi_internal}
     (nil))
(insn 165 164 166 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [164])) fmtext_o.cpp:365 89 {*movdi_internal}
     (nil))
(call_insn 166 165 187 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f93b25741b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:365 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 12, flags: (NEW, RTL, MODIFIED)
;;  pred:       10
;;              3 [100.0%] 
;;              11 [100.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 187 166 186 15 78 "" [2 uses])
(note 186 187 188 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 188 186 169 15 (const_int 0 [0]) fmtext_o.cpp:369 684 {nop}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 169 188 175 12 70 "" [0 uses])
(note 175 169 170 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 170 175 171 12 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6716+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [166]))
        ]) fmtext_o.cpp:369 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 171 170 176 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) fmtext_o.cpp:369 612 {*jcc_1}
     (nil)
 -> 174)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 176 171 172 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(call_insn 172 176 173 13 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f93b26b3af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:369 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 173 172 174)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 174 173 177 14 77 "" [1 uses])
(note 177 174 189 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 189 177 0 NOTE_INSN_DELETED)

;; Function int read_nmr_text(char*, float**, Header*, float**, int) (_Z13read_nmr_textPcPPfP6HeaderS1_i, funcdef_no=5, decl_uid=5404, cgraph_uid=5, symbol_order=5)

      Creating newreg=251
Removing SCRATCH in insn #8 (nop 2)
rescanning insn with uid = 8.
      Creating newreg=252
Removing SCRATCH in insn #391 (nop 3)
rescanning insn with uid = 391.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r251
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 38:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 79:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 80:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 87:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 110:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 115:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 121:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 135:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 136:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 143:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 149:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 152:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 157:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 164:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 166:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 171:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 177:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 185:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 191:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 192:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 205:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 206:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 208:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 213:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 221:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 237:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 244:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 251
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 252:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 254:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 259:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 268
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 269:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 274
	 Choosing alt 0 in insn 274:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 275:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 277:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 281:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 291:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=253 from oldreg=226, assigning class GENERAL_REGS to r253
  291: {r253:SI=r253:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  409: r253:SI=r133:SI
    Inserting insn reload after:
  410: r226:SI=r253:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 292
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 298:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 299:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 306:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 308
	 Choosing alt 0 in insn 308:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 309:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 311:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 313
	 Choosing alt 0 in insn 313:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 314:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 316:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 318:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 320:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 326:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 330:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=254 from oldreg=236, assigning class GENERAL_REGS to r254
  330: {r254:SI=r254:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  411: r254:SI=r142:SI
    Inserting insn reload after:
  412: r236:SI=r254:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 331
	 Choosing alt 0 in insn 331:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 334:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 337:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 338:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 345:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 347
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 351:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=255 from oldreg=244, assigning class GENERAL_REGS to r255
  351: {r255:SI=r255:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  413: r255:SI=r148:SI
    Inserting insn reload after:
  414: r244:SI=r255:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 352
	 Choosing alt 0 in insn 352:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 355:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 358
	 Choosing alt 0 in insn 358:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 361:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 363:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 365:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 367:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 376:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r252
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19

********** Pseudo live ranges #1: **********

  BB 18
   Insn 393: point = 0
  BB 19
   Insn 396: point = 0
  BB 17
   Insn 392: point = 0
   Insn 391: point = 0
   Insn 390: point = 1
   Insn 386: point = 2
  BB 3
   Insn 400: point = 5
   Insn 26: point = 5
   Insn 25: point = 6
   Insn 24: point = 6
   Insn 23: point = 6
   Insn 22: point = 6
   Insn 21: point = 7
  BB 16
   Insn 381: point = 8
  BB 15
   Insn 378: point = 9
   Insn 377: point = 9
   Insn 376: point = 10
  BB 14
   Insn 374: point = 11
   Insn 373: point = 11
  BB 12
   Insn 335: point = 11
   Insn 334: point = 11
   Insn 333: point = 12
   Insn 332: point = 14
   Insn 331: point = 16
   Insn 412: point = 18
	Hard reg 1 is preferable by r254 with profit 1
   Insn 330: point = 20
   Insn 411: point = 20
   Insn 329: point = 21
   Insn 328: point = 23
  BB 13
   Insn 406: point = 24
   Insn 367: point = 24
   Insn 366: point = 24
   Insn 365: point = 24
   Insn 364: point = 24
   Insn 363: point = 25
   Insn 362: point = 25
   Insn 361: point = 26
   Insn 360: point = 27
   Insn 359: point = 29
   Insn 358: point = 31
   Insn 357: point = 33
   Insn 356: point = 35
   Insn 355: point = 36
   Insn 354: point = 38
   Insn 353: point = 40
   Insn 352: point = 42
   Insn 414: point = 44
	Hard reg 2 is preferable by r255 with profit 1
   Insn 351: point = 46
   Insn 413: point = 46
   Insn 350: point = 47
   Insn 349: point = 49
   Insn 348: point = 50
   Insn 347: point = 52
   Insn 346: point = 54
   Insn 345: point = 55
   Insn 344: point = 57
   Insn 343: point = 59
   Insn 342: point = 60
   Insn 341: point = 60
   Insn 340: point = 61
   Insn 339: point = 61
   Insn 338: point = 62
   Insn 337: point = 63
  BB 11
   Insn 326: point = 64
  BB 9
   Insn 296: point = 64
   Insn 295: point = 64
   Insn 294: point = 65
   Insn 293: point = 67
   Insn 292: point = 69
   Insn 410: point = 71
	Hard reg 1 is preferable by r253 with profit 1
   Insn 291: point = 73
   Insn 409: point = 73
   Insn 290: point = 74
   Insn 289: point = 76
  BB 10
   Insn 404: point = 77
   Insn 320: point = 77
   Insn 319: point = 77
   Insn 318: point = 77
   Insn 317: point = 77
   Insn 316: point = 78
   Insn 315: point = 78
   Insn 314: point = 79
   Insn 313: point = 80
   Insn 312: point = 82
   Insn 311: point = 84
   Insn 310: point = 86
   Insn 309: point = 87
   Insn 308: point = 89
   Insn 307: point = 91
   Insn 306: point = 92
   Insn 305: point = 94
   Insn 304: point = 96
   Insn 303: point = 97
   Insn 302: point = 97
   Insn 301: point = 98
   Insn 300: point = 98
   Insn 299: point = 99
   Insn 298: point = 100
  BB 8
   Insn 287: point = 101
  BB 6
   Insn 234: point = 101
   Insn 233: point = 101
   Insn 232: point = 102
   Insn 231: point = 104
  BB 7
   Insn 402: point = 105
   Insn 281: point = 105
   Insn 280: point = 105
   Insn 279: point = 105
   Insn 278: point = 105
   Insn 277: point = 106
   Insn 276: point = 106
   Insn 275: point = 107
   Insn 274: point = 108
   Insn 273: point = 110
   Insn 272: point = 112
   Insn 271: point = 114
   Insn 270: point = 116
   Insn 269: point = 117
   Insn 268: point = 119
   Insn 267: point = 121
   Insn 266: point = 122
   Insn 265: point = 124
   Insn 264: point = 126
   Insn 263: point = 127
   Insn 262: point = 127
   Insn 261: point = 128
   Insn 260: point = 128
   Insn 259: point = 129
   Insn 258: point = 130
   Insn 257: point = 131
   Insn 256: point = 131
   Insn 255: point = 131
   Insn 254: point = 132
   Insn 253: point = 132
   Insn 252: point = 133
   Insn 251: point = 134
   Insn 250: point = 136
   Insn 249: point = 138
   Insn 248: point = 140
   Insn 247: point = 141
   Insn 246: point = 143
   Insn 245: point = 145
   Insn 244: point = 146
   Insn 243: point = 148
   Insn 242: point = 150
   Insn 241: point = 151
   Insn 240: point = 151
   Insn 239: point = 152
   Insn 238: point = 152
   Insn 237: point = 153
   Insn 236: point = 154
  BB 5
   Insn 229: point = 155
  BB 4
   Insn 227: point = 155
   Insn 226: point = 155
   Insn 225: point = 156
   Insn 224: point = 157
   Insn 223: point = 157
   Insn 222: point = 158
   Insn 221: point = 158
   Insn 220: point = 158
   Insn 219: point = 160
   Insn 218: point = 161
   Insn 217: point = 161
   Insn 216: point = 162
   Insn 215: point = 162
   Insn 214: point = 163
   Insn 213: point = 164
   Insn 212: point = 166
   Insn 211: point = 167
   Insn 210: point = 167
   Insn 209: point = 167
   Insn 208: point = 168
   Insn 207: point = 168
   Insn 206: point = 169
   Insn 205: point = 170
   Insn 204: point = 172
   Insn 203: point = 173
   Insn 202: point = 173
   Insn 201: point = 174
   Insn 200: point = 174
   Insn 199: point = 175
   Insn 198: point = 176
   Insn 197: point = 177
   Insn 196: point = 177
   Insn 195: point = 177
   Insn 194: point = 178
   Insn 193: point = 178
   Insn 192: point = 179
   Insn 191: point = 180
   Insn 190: point = 182
   Insn 189: point = 183
   Insn 188: point = 183
   Insn 187: point = 184
   Insn 186: point = 184
   Insn 185: point = 185
   Insn 184: point = 186
   Insn 183: point = 187
   Insn 182: point = 187
   Insn 181: point = 187
   Insn 180: point = 188
   Insn 179: point = 188
   Insn 178: point = 189
   Insn 177: point = 190
   Insn 176: point = 192
   Insn 175: point = 193
   Insn 174: point = 193
   Insn 173: point = 194
   Insn 172: point = 194
   Insn 171: point = 195
   Insn 170: point = 196
   Insn 169: point = 197
   Insn 168: point = 197
   Insn 167: point = 197
   Insn 166: point = 198
   Insn 165: point = 198
   Insn 164: point = 199
   Insn 163: point = 200
   Insn 162: point = 202
   Insn 161: point = 203
   Insn 160: point = 203
   Insn 159: point = 204
   Insn 158: point = 204
   Insn 157: point = 205
   Insn 156: point = 206
   Insn 155: point = 207
   Insn 154: point = 207
   Insn 153: point = 207
   Insn 152: point = 208
   Insn 151: point = 208
   Insn 150: point = 209
   Insn 149: point = 210
   Insn 148: point = 212
   Insn 147: point = 213
   Insn 146: point = 213
   Insn 145: point = 214
   Insn 144: point = 214
   Insn 143: point = 215
   Insn 142: point = 216
   Insn 141: point = 217
   Insn 140: point = 217
   Insn 139: point = 217
   Insn 138: point = 218
   Insn 137: point = 218
   Insn 136: point = 219
   Insn 135: point = 220
   Insn 134: point = 222
   Insn 133: point = 223
   Insn 132: point = 223
   Insn 131: point = 224
   Insn 130: point = 224
   Insn 129: point = 225
   Insn 128: point = 226
   Insn 127: point = 227
   Insn 126: point = 227
   Insn 125: point = 227
   Insn 124: point = 228
   Insn 123: point = 228
   Insn 122: point = 229
   Insn 121: point = 230
   Insn 120: point = 232
   Insn 119: point = 233
   Insn 118: point = 233
   Insn 117: point = 234
   Insn 116: point = 234
   Insn 115: point = 235
   Insn 114: point = 236
   Insn 113: point = 237
   Insn 112: point = 237
   Insn 111: point = 237
   Insn 110: point = 238
   Insn 109: point = 238
   Insn 108: point = 239
   Insn 107: point = 240
   Insn 106: point = 242
   Insn 105: point = 243
   Insn 104: point = 243
   Insn 103: point = 244
   Insn 102: point = 244
   Insn 101: point = 245
   Insn 100: point = 246
   Insn 99: point = 247
   Insn 98: point = 247
   Insn 97: point = 247
   Insn 96: point = 248
   Insn 95: point = 248
   Insn 94: point = 249
   Insn 93: point = 250
   Insn 92: point = 252
   Insn 91: point = 253
   Insn 90: point = 253
   Insn 89: point = 254
   Insn 88: point = 254
   Insn 87: point = 255
   Insn 86: point = 256
   Insn 85: point = 257
   Insn 84: point = 257
   Insn 83: point = 257
   Insn 82: point = 258
   Insn 81: point = 258
   Insn 80: point = 259
   Insn 79: point = 260
   Insn 78: point = 262
   Insn 77: point = 263
   Insn 76: point = 263
   Insn 75: point = 264
   Insn 74: point = 264
   Insn 73: point = 265
   Insn 72: point = 266
   Insn 71: point = 267
   Insn 70: point = 268
   Insn 69: point = 270
   Insn 68: point = 271
   Insn 67: point = 271
   Insn 66: point = 272
   Insn 65: point = 274
   Insn 64: point = 276
   Insn 63: point = 278
   Insn 62: point = 279
   Insn 61: point = 281
   Insn 60: point = 282
   Insn 59: point = 284
   Insn 58: point = 286
   Insn 57: point = 287
   Insn 56: point = 288
   Insn 55: point = 290
   Insn 54: point = 291
   Insn 53: point = 291
   Insn 52: point = 292
   Insn 51: point = 294
   Insn 50: point = 296
   Insn 49: point = 298
   Insn 48: point = 299
   Insn 47: point = 301
   Insn 46: point = 302
   Insn 45: point = 304
   Insn 44: point = 306
   Insn 43: point = 307
   Insn 42: point = 307
   Insn 41: point = 307
   Insn 40: point = 308
   Insn 39: point = 308
   Insn 38: point = 309
   Insn 37: point = 310
   Insn 36: point = 311
   Insn 35: point = 311
   Insn 34: point = 312
   Insn 33: point = 312
   Insn 32: point = 313
   Insn 31: point = 314
  BB 2
   Insn 19: point = 315
   Insn 18: point = 315
   Insn 17: point = 315
   Insn 16: point = 316
   Insn 15: point = 317
   Insn 14: point = 317
   Insn 13: point = 318
   Insn 12: point = 318
   Insn 11: point = 319
   Insn 8: point = 319
   Insn 6: point = 321
   Insn 5: point = 321
   Insn 4: point = 321
   Insn 3: point = 321
   Insn 2: point = 321
 r87: [8..8] [3..5]
 r88: [315..316]
 r89: [308..310]
 r90: [303..304]
 r91: [300..302]
 r92: [287..299]
 r93: [295..296]
 r94: [293..294]
 r95: [291..292]
 r96: [287..288]
 r97: [283..284]
 r98: [280..282]
 r99: [267..279]
 r100: [275..276]
 r101: [273..274]
 r102: [271..272]
 r103: [267..268]
 r104: [258..260]
 r105: [248..250]
 r106: [238..240]
 r107: [228..230]
 r108: [218..220]
 r109: [208..210]
 r110: [198..200]
 r111: [188..190]
 r112: [178..180]
 r113: [168..170]
 r114: [161..164]
 r115: [157..158]
 r116: [155..156]
 r117: [101..102]
 r118: [147..148]
 r119: [144..146]
 r120: [142..143]
 r121: [135..141]
 r122: [137..138]
 r123: [135..136]
 r124: [132..134]
 r125: [123..124]
 r126: [120..122]
 r127: [118..119]
 r128: [109..117]
 r129: [113..114]
 r130: [111..112]
 r131: [109..110]
 r132: [106..108]
 r133: [70..74]
 r134: [64..65]
 r135: [93..94]
 r136: [90..92]
 r137: [88..89]
 r138: [81..87]
 r139: [83..84]
 r140: [81..82]
 r141: [78..80]
 r142: [17..21]
 r143: [11..12]
 r144: [56..57]
 r145: [53..55]
 r146: [51..52]
 r147: [28..50]
 r148: [43..47]
 r149: [37..38]
 r150: [32..36]
 r151: [32..33]
 r152: [30..31]
 r153: [28..29]
 r154: [25..27]
 r155: [1..2]
 r156: [317..318]
 r157: [6..7]
 r158: [312..314]
 r159: [311..313]
 r160: [307..309]
 r161: [305..306]
 r162: [300..301]
 r163: [297..298]
 r164: [289..290]
 r165: [285..286]
 r166: [280..281]
 r167: [277..278]
 r168: [269..270]
 r169: [264..266]
 r170: [263..265]
 r171: [261..262]
 r172: [257..259]
 r173: [254..256]
 r174: [253..255]
 r175: [251..252]
 r176: [247..249]
 r177: [244..246]
 r178: [243..245]
 r179: [241..242]
 r180: [237..239]
 r181: [234..236]
 r182: [233..235]
 r183: [231..232]
 r184: [227..229]
 r185: [224..226]
 r186: [223..225]
 r187: [221..222]
 r188: [217..219]
 r189: [214..216]
 r190: [213..215]
 r191: [211..212]
 r192: [207..209]
 r193: [204..206]
 r194: [203..205]
 r195: [201..202]
 r196: [197..199]
 r197: [194..196]
 r198: [193..195]
 r199: [191..192]
 r200: [187..189]
 r201: [184..186]
 r202: [183..185]
 r203: [181..182]
 r204: [177..179]
 r205: [174..176]
 r206: [173..175]
 r207: [171..172]
 r208: [167..169]
 r209: [165..166]
 r210: [162..163]
 r211: [159..160]
 r212: [103..104]
 r213: [152..154]
 r214: [151..153]
 r215: [149..150]
 r216: [144..145]
 r217: [139..140]
 r218: [131..133]
 r219: [128..130]
 r220: [127..129]
 r221: [125..126]
 r222: [120..121]
 r223: [115..116]
 r224: [105..107]
 r225: [75..76]
 r226: [70..71]
 r227: [68..69]
 r228: [66..67]
 r229: [98..100]
 r230: [97..99]
 r231: [95..96]
 r232: [90..91]
 r233: [85..86]
 r234: [77..79]
 r235: [22..23]
 r236: [17..18]
 r237: [15..16]
 r238: [13..14]
 r239: [61..63]
 r240: [60..62]
 r241: [58..59]
 r242: [53..54]
 r243: [48..49]
 r244: [43..44]
 r245: [41..42]
 r246: [39..40]
 r247: [34..35]
 r248: [24..26]
 r249: [9..10]
 r251: [319..320]
 r252: [0..0]
 r253: [72..73]
 r254: [19..20]
 r255: [45..46]
Compressing live ranges: from 321 to 242 - 75%
Ranges after the compression:
 r87: [7..7] [3..4]
 r88: [236..237]
 r89: [232..233]
 r90: [228..229]
 r91: [226..227]
 r92: [214..225]
 r93: [222..223]
 r94: [220..221]
 r95: [218..219]
 r96: [214..215]
 r97: [210..211]
 r98: [208..209]
 r99: [196..207]
 r100: [204..205]
 r101: [202..203]
 r102: [200..201]
 r103: [196..197]
 r104: [190..191]
 r105: [184..185]
 r106: [178..179]
 r107: [172..173]
 r108: [166..167]
 r109: [160..161]
 r110: [154..155]
 r111: [148..149]
 r112: [142..143]
 r113: [136..137]
 r114: [132..133]
 r115: [128..129]
 r116: [126..127]
 r117: [84..85]
 r118: [120..121]
 r119: [118..119]
 r120: [116..117]
 r121: [110..115]
 r122: [112..113]
 r123: [110..111]
 r124: [108..109]
 r125: [102..103]
 r126: [100..101]
 r127: [98..99]
 r128: [90..97]
 r129: [94..95]
 r130: [92..93]
 r131: [90..91]
 r132: [88..89]
 r133: [60..63]
 r134: [54..55]
 r135: [78..79]
 r136: [76..77]
 r137: [74..75]
 r138: [68..73]
 r139: [70..71]
 r140: [68..69]
 r141: [66..67]
 r142: [16..19]
 r143: [10..11]
 r144: [48..49]
 r145: [46..47]
 r146: [44..45]
 r147: [24..43]
 r148: [38..41]
 r149: [32..33]
 r150: [28..31]
 r151: [28..29]
 r152: [26..27]
 r153: [24..25]
 r154: [22..23]
 r155: [1..2]
 r156: [238..239]
 r157: [5..6]
 r158: [234..235]
 r159: [234..235]
 r160: [232..233]
 r161: [230..231]
 r162: [226..227]
 r163: [224..225]
 r164: [216..217]
 r165: [212..213]
 r166: [208..209]
 r167: [206..207]
 r168: [198..199]
 r169: [194..195]
 r170: [194..195]
 r171: [192..193]
 r172: [190..191]
 r173: [188..189]
 r174: [188..189]
 r175: [186..187]
 r176: [184..185]
 r177: [182..183]
 r178: [182..183]
 r179: [180..181]
 r180: [178..179]
 r181: [176..177]
 r182: [176..177]
 r183: [174..175]
 r184: [172..173]
 r185: [170..171]
 r186: [170..171]
 r187: [168..169]
 r188: [166..167]
 r189: [164..165]
 r190: [164..165]
 r191: [162..163]
 r192: [160..161]
 r193: [158..159]
 r194: [158..159]
 r195: [156..157]
 r196: [154..155]
 r197: [152..153]
 r198: [152..153]
 r199: [150..151]
 r200: [148..149]
 r201: [146..147]
 r202: [146..147]
 r203: [144..145]
 r204: [142..143]
 r205: [140..141]
 r206: [140..141]
 r207: [138..139]
 r208: [136..137]
 r209: [134..135]
 r210: [132..133]
 r211: [130..131]
 r212: [86..87]
 r213: [124..125]
 r214: [124..125]
 r215: [122..123]
 r216: [118..119]
 r217: [114..115]
 r218: [108..109]
 r219: [106..107]
 r220: [106..107]
 r221: [104..105]
 r222: [100..101]
 r223: [96..97]
 r224: [88..89]
 r225: [64..65]
 r226: [60..61]
 r227: [58..59]
 r228: [56..57]
 r229: [82..83]
 r230: [82..83]
 r231: [80..81]
 r232: [76..77]
 r233: [72..73]
 r234: [66..67]
 r235: [20..21]
 r236: [16..17]
 r237: [14..15]
 r238: [12..13]
 r239: [52..53]
 r240: [52..53]
 r241: [50..51]
 r242: [46..47]
 r243: [42..43]
 r244: [38..39]
 r245: [36..37]
 r246: [34..35]
 r247: [30..31]
 r248: [22..23]
 r249: [8..9]
 r251: [240..241]
 r252: [0..0]
 r253: [62..63]
 r254: [18..19]
 r255: [40..41]

********** Assignment #1: **********

	 Assigning to 253 (cl=GENERAL_REGS, orig=226, freq=3, tfirst=253, tfreq=3)...
	   Assign 1 to reload r253 (freq=3)
	 Assigning to 254 (cl=GENERAL_REGS, orig=236, freq=3, tfirst=254, tfreq=3)...
	   Assign 1 to reload r254 (freq=3)
	 Assigning to 255 (cl=GENERAL_REGS, orig=244, freq=3, tfirst=255, tfreq=3)...
	   Assign 2 to reload r255 (freq=3)
	 Assigning to 251 (cl=INDEX_REGS, orig=251, freq=1, tfirst=251, tfreq=1)...
	   Assign 0 to reload r251 (freq=1)
	 Assigning to 252 (cl=INDEX_REGS, orig=252, freq=1, tfirst=252, tfreq=1)...
	   Assign 3 to reload r252 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 381
changing reg in insn 26
changing reg in insn 386
changing reg in insn 16
changing reg in insn 17
changing reg in insn 37
changing reg in insn 39
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 48
changing reg in insn 57
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 62
changing reg in insn 71
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 79
changing reg in insn 81
changing reg in insn 93
changing reg in insn 95
changing reg in insn 107
changing reg in insn 109
changing reg in insn 121
changing reg in insn 123
changing reg in insn 135
changing reg in insn 137
changing reg in insn 149
changing reg in insn 151
changing reg in insn 163
changing reg in insn 165
changing reg in insn 177
changing reg in insn 179
changing reg in insn 191
changing reg in insn 193
changing reg in insn 205
changing reg in insn 207
changing reg in insn 213
changing reg in insn 217
changing reg in insn 220
changing reg in insn 223
changing reg in insn 225
changing reg in insn 226
changing reg in insn 232
changing reg in insn 233
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 253
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 290
changing reg in insn 294
changing reg in insn 295
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 315
changing reg in insn 329
changing reg in insn 333
changing reg in insn 334
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 347
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 360
changing reg in insn 350
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 357
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 362
changing reg in insn 386
changing reg in insn 390
changing reg in insn 12
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 31
changing reg in insn 33
changing reg in insn 32
changing reg in insn 35
changing reg in insn 38
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 74
changing reg in insn 73
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 86
changing reg in insn 88
changing reg in insn 87
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 100
changing reg in insn 102
changing reg in insn 101
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 114
changing reg in insn 116
changing reg in insn 115
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 128
changing reg in insn 130
changing reg in insn 129
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 139
changing reg in insn 142
changing reg in insn 144
changing reg in insn 143
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 153
changing reg in insn 156
changing reg in insn 158
changing reg in insn 157
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 170
changing reg in insn 172
changing reg in insn 171
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 181
changing reg in insn 184
changing reg in insn 186
changing reg in insn 185
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 195
changing reg in insn 198
changing reg in insn 200
changing reg in insn 199
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 219
changing reg in insn 220
changing reg in insn 231
changing reg in insn 232
changing reg in insn 236
changing reg in insn 238
changing reg in insn 237
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 245
changing reg in insn 248
changing reg in insn 249
changing reg in insn 252
changing reg in insn 255
changing reg in insn 258
changing reg in insn 260
changing reg in insn 259
changing reg in insn 262
changing reg in insn 264
changing reg in insn 265
changing reg in insn 267
changing reg in insn 270
changing reg in insn 271
changing reg in insn 275
changing reg in insn 278
changing reg in insn 289
changing reg in insn 290
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 294
changing reg in insn 298
changing reg in insn 300
changing reg in insn 299
changing reg in insn 302
changing reg in insn 304
changing reg in insn 305
changing reg in insn 307
changing reg in insn 310
changing reg in insn 311
changing reg in insn 314
changing reg in insn 317
changing reg in insn 328
changing reg in insn 329
changing reg in insn 331
changing reg in insn 332
changing reg in insn 332
changing reg in insn 333
changing reg in insn 337
changing reg in insn 339
changing reg in insn 338
changing reg in insn 341
changing reg in insn 343
changing reg in insn 344
changing reg in insn 346
changing reg in insn 349
changing reg in insn 350
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 354
changing reg in insn 356
changing reg in insn 357
changing reg in insn 361
changing reg in insn 364
changing reg in insn 376
changing reg in insn 377
changing reg in insn 8
changing reg in insn 391
deleting insn with uid = 33.
deleting insn with uid = 39.
deleting insn with uid = 74.
deleting insn with uid = 81.
deleting insn with uid = 88.
deleting insn with uid = 95.
deleting insn with uid = 102.
deleting insn with uid = 109.
deleting insn with uid = 116.
deleting insn with uid = 123.
deleting insn with uid = 130.
deleting insn with uid = 137.
deleting insn with uid = 144.
deleting insn with uid = 151.
deleting insn with uid = 158.
deleting insn with uid = 165.
deleting insn with uid = 172.
deleting insn with uid = 179.
deleting insn with uid = 186.
deleting insn with uid = 193.
deleting insn with uid = 200.
deleting insn with uid = 207.
deleting insn with uid = 238.
deleting insn with uid = 253.
deleting insn with uid = 260.
deleting insn with uid = 276.
deleting insn with uid = 410.
deleting insn with uid = 300.
deleting insn with uid = 315.
deleting insn with uid = 412.
deleting insn with uid = 339.
deleting insn with uid = 414.
deleting insn with uid = 362.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 161.
verify found no changes in insn with uid = 169.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 211.
verify found no changes in insn with uid = 218.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 241.
verify found no changes in insn with uid = 257.
verify found no changes in insn with uid = 263.
verify found no changes in insn with uid = 280.
verify found no changes in insn with uid = 303.
verify found no changes in insn with uid = 319.
verify found no changes in insn with uid = 342.
verify found no changes in insn with uid = 366.
verify found no changes in insn with uid = 378.
verify found no changes in insn with uid = 393.


int read_nmr_text(char*, float**, Header*, float**, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={167d,134u} r1={92d,54u,6e} r2={43d,5u} r3={3d,2u} r4={73d,35u} r5={76d,38u} r6={1d,126u} r7={1d,57u} r8={38d} r9={38d} r10={38d} r11={38d} r12={38d} r13={38d} r14={38d} r15={38d} r17={124d,7u} r18={38d} r19={38d} r20={1d,1u,18e} r21={39d} r22={39d} r23={39d} r24={39d} r25={39d} r26={39d} r27={39d} r28={39d} r29={38d} r30={38d} r31={38d} r32={38d} r33={38d} r34={38d} r35={38d} r36={38d} r37={39d,1u} r38={39d} r39={38d} r40={38d} r45={38d} r46={38d} r47={38d} r48={38d} r49={38d} r50={38d} r51={38d} r52={38d} r53={38d} r54={38d} r55={38d} r56={38d} r57={38d} r58={38d} r59={38d} r60={38d} r61={38d} r62={38d} r63={38d} r64={38d} r65={38d} r66={38d} r67={38d} r68={38d} r69={38d} r70={38d} r71={38d} r72={38d} r73={38d} r74={38d} r75={38d} r76={38d} r77={38d} r78={38d} r79={38d} r80={38d} 
;;    total ref usage 3583{3099d,460u,24e} in 330{292 regular + 38 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 156
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 filename+0 S8 A64])
        (reg:DI 5 di [ filename ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])
        (reg:DI 4 si [ out_data ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])
        (reg:DI 1 dx [ header ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 scratch_data+0 S8 A64])
        (reg:DI 2 cx [ scratch_data ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])
        (reg:SI 37 r8 [ fn ])) fmtext_o.cpp:374 90 {*movsi_internal}
     (nil))
(note 7 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 7 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.6729+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [251])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:374 986 {stack_tls_protect_set_di}
     (nil))
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:376 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 filename+0 S8 A64])) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f93b2317360 *.LC22>)) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [156])) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f93b2574510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:382 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:88 D.6720 ] [88])
        (reg:DI 0 ax)) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.6720 ] [88])) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:385 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) fmtext_o.cpp:385 612 {*jcc_1}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 157
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 filename+0 S8 A64])) fmtext_o.cpp:386 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [157])) fmtext_o.cpp:386 89 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f93b23173f0 *.LC23>)) fmtext_o.cpp:386 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:386 93 {*movqi_internal}
     (nil))
(call_insn 25 24 26 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f93b27b65e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:386 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 26 25 400 3 (set (reg:SI 0 ax [orig:87 D.6719 ] [87])
        (const_int 0 [0])) fmtext_o.cpp:387 90 {*movsi_internal}
     (nil))
(jump_insn 400 26 401 3 (set (pc)
        (label_ref 384)) fmtext_o.cpp:387 654 {jump}
     (nil)
 -> 384)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 401 400 29)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211
(code_label 29 401 30 4 80 "" [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:DI 1 dx [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:390 89 {*movdi_internal}
     (nil))
(insn 32 31 34 4 (parallel [
            (set (reg:DI 0 ax [159])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:390 218 {*adddi_1}
     (nil))
(insn 34 32 35 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:390 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [159])) fmtext_o.cpp:390 89 {*movdi_internal}
     (nil))
(call_insn 36 35 37 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:390 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 37 36 38 4 (set (reg/f:DI 1 dx [orig:89 D.6721 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:391 89 {*movdi_internal}
     (nil))
(insn 38 37 40 4 (parallel [
            (set (reg:DI 0 ax [160])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:391 218 {*adddi_1}
     (nil))
(insn 40 38 41 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f93b2317480 *.LC24>)) fmtext_o.cpp:391 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [160])) fmtext_o.cpp:391 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:391 93 {*movqi_internal}
     (nil))
(call_insn 43 42 44 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:391 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 44 43 45 4 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 0 ax [orig:90 D.6722 ] [90])
        (sign_extend:DI (reg:SI 0 ax [161]))) fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 1 dx [orig:91 D.6722 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.6722 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 512 {*ashldi3_1}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 3 bx [orig:92 D.6723 ] [92])
                (plus:DI (reg:DI 1 dx [orig:91 D.6722 ] [91])
                    (reg/f:DI 0 ax [162])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.6722 ] [91]))
        (nil)))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:SI 0 ax [orig:93 D.6719 ] [93])
        (mem/j:SI (reg/f:DI 0 ax [163]) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 0 ax [orig:94 D.6722 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.6719 ] [93]))) fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 0 ax [orig:95 D.6722 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.6722 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 512 {*ashldi3_1}
     (nil))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:95 D.6722 ] [95])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(call_insn 54 53 55 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:393 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 55 54 56 4 (set (reg/f:DI 0 ax [164])
        (reg:DI 0 ax)) fmtext_o.cpp:393 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [164])
        (nil)))
(insn 56 55 57 4 (set (reg/f:DI 0 ax [orig:96 D.6724 ] [96])
        (reg/f:DI 0 ax [164])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:92 D.6723 ] [92]) [0 *_28+0 S8 A64])
        (reg/f:DI 0 ax [orig:96 D.6724 ] [96])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (set (reg:SI 0 ax [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:394 90 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DI 0 ax [orig:97 D.6722 ] [97])
        (sign_extend:DI (reg:SI 0 ax [165]))) fmtext_o.cpp:394 142 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 1 dx [orig:98 D.6722 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.6722 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 512 {*ashldi3_1}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 scratch_data+0 S8 A64])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg/f:DI 3 bx [orig:99 D.6723 ] [99])
                (plus:DI (reg:DI 1 dx [orig:98 D.6722 ] [98])
                    (reg/f:DI 0 ax [166])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -144 [0xffffffffffffff70])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.6722 ] [98]))
        (nil)))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SI 0 ax [orig:100 D.6719 ] [100])
        (mem/j:SI (reg/f:DI 0 ax [167]) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:394 90 {*movsi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:DI 0 ax [orig:101 D.6722 ] [101])
        (sign_extend:DI (reg:SI 0 ax [orig:100 D.6719 ] [100]))) fmtext_o.cpp:394 142 {*extendsidi2_rex64}
     (nil))
(insn 66 65 67 4 (parallel [
            (set (reg:DI 0 ax [orig:102 D.6722 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.6722 ] [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 512 {*ashldi3_1}
     (nil))
(insn 67 66 68 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:102 D.6722 ] [102])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(call_insn 68 67 69 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:394 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [168])
        (reg:DI 0 ax)) fmtext_o.cpp:394 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [168])
        (nil)))
(insn 70 69 71 4 (set (reg/f:DI 0 ax [orig:103 D.6724 ] [103])
        (reg/f:DI 0 ax [168])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:99 D.6723 ] [99]) [0 *_38+0 S8 A64])
        (reg/f:DI 0 ax [orig:103 D.6724 ] [103])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 1 dx [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:396 89 {*movdi_internal}
     (nil))
(insn 73 72 75 4 (parallel [
            (set (reg:DI 0 ax [170])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:396 218 {*adddi_1}
     (nil))
(insn 75 73 76 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:396 90 {*movsi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [170])) fmtext_o.cpp:396 89 {*movdi_internal}
     (nil))
(call_insn 77 76 78 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:396 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:397 89 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (parallel [
            (set (reg/f:DI 1 dx [orig:104 D.6721 ] [104])
                (plus:DI (reg/f:DI 0 ax [171])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:397 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 80 79 82 4 (parallel [
            (set (reg:DI 0 ax [172])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:397 218 {*adddi_1}
     (nil))
(insn 82 80 83 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f93b2317480 *.LC24>)) fmtext_o.cpp:397 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [172])) fmtext_o.cpp:397 89 {*movdi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:397 93 {*movqi_internal}
     (nil))
(call_insn 85 84 86 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:397 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 86 85 87 4 (set (reg:DI 1 dx [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:399 89 {*movdi_internal}
     (nil))
(insn 87 86 89 4 (parallel [
            (set (reg:DI 0 ax [174])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:399 218 {*adddi_1}
     (nil))
(insn 89 87 90 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:399 90 {*movsi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [174])) fmtext_o.cpp:399 89 {*movdi_internal}
     (nil))
(call_insn 91 90 92 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:399 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 92 91 93 4 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:400 89 {*movdi_internal}
     (nil))
(insn 93 92 94 4 (parallel [
            (set (reg/f:DI 1 dx [orig:105 D.6725 ] [105])
                (plus:DI (reg/f:DI 0 ax [175])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:400 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 94 93 96 4 (parallel [
            (set (reg:DI 0 ax [176])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:400 218 {*adddi_1}
     (nil))
(insn 96 94 97 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f93b2317510 *.LC25>)) fmtext_o.cpp:400 89 {*movdi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [176])) fmtext_o.cpp:400 89 {*movdi_internal}
     (nil))
(insn 98 97 99 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:400 93 {*movqi_internal}
     (nil))
(call_insn 99 98 100 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:400 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 100 99 101 4 (set (reg:DI 1 dx [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:402 89 {*movdi_internal}
     (nil))
(insn 101 100 103 4 (parallel [
            (set (reg:DI 0 ax [178])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:402 218 {*adddi_1}
     (nil))
(insn 103 101 104 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:402 90 {*movsi_internal}
     (nil))
(insn 104 103 105 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [178])) fmtext_o.cpp:402 89 {*movdi_internal}
     (nil))
(call_insn 105 104 106 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:402 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 106 105 107 4 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:403 89 {*movdi_internal}
     (nil))
(insn 107 106 108 4 (parallel [
            (set (reg/f:DI 1 dx [orig:106 D.6726 ] [106])
                (plus:DI (reg/f:DI 0 ax [179])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:403 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 108 107 110 4 (parallel [
            (set (reg:DI 0 ax [180])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:403 218 {*adddi_1}
     (nil))
(insn 110 108 111 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f93b23175a0 *.LC26>)) fmtext_o.cpp:403 89 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [180])) fmtext_o.cpp:403 89 {*movdi_internal}
     (nil))
(insn 112 111 113 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:403 93 {*movqi_internal}
     (nil))
(call_insn 113 112 114 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:403 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 114 113 115 4 (set (reg:DI 1 dx [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:405 89 {*movdi_internal}
     (nil))
(insn 115 114 117 4 (parallel [
            (set (reg:DI 0 ax [182])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:405 218 {*adddi_1}
     (nil))
(insn 117 115 118 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:405 90 {*movsi_internal}
     (nil))
(insn 118 117 119 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [182])) fmtext_o.cpp:405 89 {*movdi_internal}
     (nil))
(call_insn 119 118 120 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:405 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 120 119 121 4 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:406 89 {*movdi_internal}
     (nil))
(insn 121 120 122 4 (parallel [
            (set (reg/f:DI 1 dx [orig:107 D.6721 ] [107])
                (plus:DI (reg/f:DI 0 ax [183])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:406 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 122 121 124 4 (parallel [
            (set (reg:DI 0 ax [184])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:406 218 {*adddi_1}
     (nil))
(insn 124 122 125 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f93b2317480 *.LC24>)) fmtext_o.cpp:406 89 {*movdi_internal}
     (nil))
(insn 125 124 126 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [184])) fmtext_o.cpp:406 89 {*movdi_internal}
     (nil))
(insn 126 125 127 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:406 93 {*movqi_internal}
     (nil))
(call_insn 127 126 128 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:406 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 128 127 129 4 (set (reg:DI 1 dx [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 129 128 131 4 (parallel [
            (set (reg:DI 0 ax [186])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:408 218 {*adddi_1}
     (nil))
(insn 131 129 132 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:408 90 {*movsi_internal}
     (nil))
(insn 132 131 133 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [186])) fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(call_insn 133 132 134 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:408 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 134 133 135 4 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 135 134 136 4 (parallel [
            (set (reg/f:DI 1 dx [orig:108 D.6727 ] [108])
                (plus:DI (reg/f:DI 0 ax [187])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:409 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 28 [0x1c]))
        (nil)))
(insn 136 135 138 4 (parallel [
            (set (reg:DI 0 ax [188])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:409 218 {*adddi_1}
     (nil))
(insn 138 136 139 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f93b2317480 *.LC24>)) fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 139 138 140 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [188])) fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 140 139 141 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:409 93 {*movqi_internal}
     (nil))
(call_insn 141 140 142 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:409 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 142 141 143 4 (set (reg:DI 1 dx [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 143 142 145 4 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:411 218 {*adddi_1}
     (nil))
(insn 145 143 146 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:411 90 {*movsi_internal}
     (nil))
(insn 146 145 147 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(call_insn 147 146 148 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:411 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 148 147 149 4 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 149 148 150 4 (parallel [
            (set (reg/f:DI 1 dx [orig:109 D.6727 ] [109])
                (plus:DI (reg/f:DI 0 ax [191])
                    (const_int 108 [0x6c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:412 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 108 [0x6c]))
        (nil)))
(insn 150 149 152 4 (parallel [
            (set (reg:DI 0 ax [192])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:412 218 {*adddi_1}
     (nil))
(insn 152 150 153 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f93b2317630 *.LC27>)) fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 153 152 154 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [192])) fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 154 153 155 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:412 93 {*movqi_internal}
     (nil))
(call_insn 155 154 156 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:412 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 156 155 157 4 (set (reg:DI 1 dx [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 157 156 159 4 (parallel [
            (set (reg:DI 0 ax [194])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:414 218 {*adddi_1}
     (nil))
(insn 159 157 160 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:414 90 {*movsi_internal}
     (nil))
(insn 160 159 161 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [194])) fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(call_insn 161 160 162 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:414 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 162 161 163 4 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 163 162 164 4 (parallel [
            (set (reg/f:DI 1 dx [orig:110 D.6727 ] [110])
                (plus:DI (reg/f:DI 0 ax [195])
                    (const_int 188 [0xbc])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:415 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 188 [0xbc]))
        (nil)))
(insn 164 163 166 4 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:415 218 {*adddi_1}
     (nil))
(insn 166 164 167 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f93b2317630 *.LC27>)) fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 167 166 168 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [196])) fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 168 167 169 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:415 93 {*movqi_internal}
     (nil))
(call_insn 169 168 170 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:415 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 170 169 171 4 (set (reg:DI 1 dx [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:417 89 {*movdi_internal}
     (nil))
(insn 171 170 173 4 (parallel [
            (set (reg:DI 0 ax [198])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:417 218 {*adddi_1}
     (nil))
(insn 173 171 174 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:417 90 {*movsi_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [198])) fmtext_o.cpp:417 89 {*movdi_internal}
     (nil))
(call_insn 175 174 176 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:417 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 176 175 177 4 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 177 176 178 4 (parallel [
            (set (reg/f:DI 1 dx [orig:111 D.6727 ] [111])
                (plus:DI (reg/f:DI 0 ax [199])
                    (const_int 268 [0x10c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:418 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 268 [0x10c]))
        (nil)))
(insn 178 177 180 4 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:418 218 {*adddi_1}
     (nil))
(insn 180 178 181 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f93b2317630 *.LC27>)) fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 181 180 182 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 182 181 183 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:418 93 {*movqi_internal}
     (nil))
(call_insn 183 182 184 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:418 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 184 183 185 4 (set (reg:DI 1 dx [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:420 89 {*movdi_internal}
     (nil))
(insn 185 184 187 4 (parallel [
            (set (reg:DI 0 ax [202])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:420 218 {*adddi_1}
     (nil))
(insn 187 185 188 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:420 90 {*movsi_internal}
     (nil))
(insn 188 187 189 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [202])) fmtext_o.cpp:420 89 {*movdi_internal}
     (nil))
(call_insn 189 188 190 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:420 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 190 189 191 4 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:421 89 {*movdi_internal}
     (nil))
(insn 191 190 192 4 (parallel [
            (set (reg/f:DI 1 dx [orig:112 D.6727 ] [112])
                (plus:DI (reg/f:DI 0 ax [203])
                    (const_int 348 [0x15c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:421 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 348 [0x15c]))
        (nil)))
(insn 192 191 194 4 (parallel [
            (set (reg:DI 0 ax [204])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:421 218 {*adddi_1}
     (nil))
(insn 194 192 195 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f93b2317630 *.LC27>)) fmtext_o.cpp:421 89 {*movdi_internal}
     (nil))
(insn 195 194 196 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [204])) fmtext_o.cpp:421 89 {*movdi_internal}
     (nil))
(insn 196 195 197 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:421 93 {*movqi_internal}
     (nil))
(call_insn 197 196 198 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:421 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 198 197 199 4 (set (reg:DI 1 dx [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:423 89 {*movdi_internal}
     (nil))
(insn 199 198 201 4 (parallel [
            (set (reg:DI 0 ax [206])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:423 218 {*adddi_1}
     (nil))
(insn 201 199 202 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:423 90 {*movsi_internal}
     (nil))
(insn 202 201 203 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [206])) fmtext_o.cpp:423 89 {*movdi_internal}
     (nil))
(call_insn 203 202 204 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:423 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 204 203 205 4 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:424 89 {*movdi_internal}
     (nil))
(insn 205 204 206 4 (parallel [
            (set (reg/f:DI 1 dx [orig:113 D.6725 ] [113])
                (plus:DI (reg/f:DI 0 ax [207])
                    (const_int 428 [0x1ac])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:424 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 428 [0x1ac]))
        (nil)))
(insn 206 205 208 4 (parallel [
            (set (reg:DI 0 ax [208])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:424 218 {*adddi_1}
     (nil))
(insn 208 206 209 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f93b2317510 *.LC25>)) fmtext_o.cpp:424 89 {*movdi_internal}
     (nil))
(insn 209 208 210 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [208])) fmtext_o.cpp:424 89 {*movdi_internal}
     (nil))
(insn 210 209 211 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:424 93 {*movqi_internal}
     (nil))
(call_insn 211 210 212 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:424 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 212 211 213 4 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(insn 213 212 214 4 (parallel [
            (set (reg/f:DI 2 cx [orig:114 D.6727 ] [114])
                (plus:DI (reg/f:DI 0 ax [209])
                    (const_int 432 [0x1b0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:426 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 432 [0x1b0]))
        (nil)))
(insn 214 213 215 4 (set (reg:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(insn 215 214 216 4 (set (reg:DI 1 dx)
        (reg:DI 0 ax [210])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(insn 216 215 217 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:426 90 {*movsi_internal}
     (nil))
(insn 217 216 218 4 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:114 D.6727 ] [114])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(call_insn 218 217 219 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:426 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 219 218 220 4 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 220 219 221 4 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.6727 ] [115])
                (plus:DI (reg/f:DI 0 ax [211])
                    (const_int 348 [0x15c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:428 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 348 [0x15c]))
        (nil)))
(insn 221 220 222 4 (set (reg:DI 1 dx)
        (const_int 3 [0x3])) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 222 221 223 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f93b23176c0 *.LC28>)) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 223 222 224 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:115 D.6727 ] [115])) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(call_insn/i 224 223 225 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strncmp") [flags 0x41]  <function_decl 0x7f93b27ad870 strncmp>) [0 __builtin_strncmp S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:428 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 225 224 226 4 (set (reg:SI 0 ax [orig:116 D.6719 ] [116])
        (reg:SI 0 ax)) fmtext_o.cpp:428 90 {*movsi_internal}
     (nil))
(insn 226 225 227 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:116 D.6719 ] [116])
            (const_int 0 [0]))) fmtext_o.cpp:428 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 227 226 228 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) fmtext_o.cpp:428 612 {*jcc_1}
     (nil)
 -> 285)
;;  succ:       5 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 228 227 229 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 282 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:429 90 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 212
(code_label 282 229 230 6 84 "" [1 uses])
(note 230 282 231 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 231 230 232 6 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 232 231 233 6 (set (reg:SI 0 ax [orig:117 D.6719 ] [117])
        (mem/j:SI (reg/f:DI 0 ax [212]) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:429 90 {*movsi_internal}
     (nil))
(insn 233 232 234 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:117 D.6719 ] [117])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32]))) fmtext_o.cpp:429 7 {*cmpsi_1}
     (nil))
(jump_insn 234 233 235 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 371)
            (pc))) fmtext_o.cpp:429 612 {*jcc_1}
     (nil)
 -> 371)
;;  succ:       14
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 213 214 215 216 217 218 219 220 221 222 223 224
(note 235 234 236 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 7 (set (reg:DI 1 dx [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:430 89 {*movdi_internal}
     (nil))
(insn 237 236 239 7 (parallel [
            (set (reg:DI 0 ax [214])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:430 218 {*adddi_1}
     (nil))
(insn 239 237 240 7 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:430 90 {*movsi_internal}
     (nil))
(insn 240 239 241 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [214])) fmtext_o.cpp:430 89 {*movdi_internal}
     (nil))
(call_insn 241 240 242 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:430 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 242 241 243 7 (set (reg:SI 0 ax [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:431 90 {*movsi_internal}
     (nil))
(insn 243 242 244 7 (set (reg:DI 0 ax [orig:118 D.6722 ] [118])
        (sign_extend:DI (reg:SI 0 ax [215]))) fmtext_o.cpp:431 142 {*extendsidi2_rex64}
     (nil))
(insn 244 243 245 7 (parallel [
            (set (reg:DI 1 dx [orig:119 D.6722 ] [119])
                (ashift:DI (reg:DI 0 ax [orig:118 D.6722 ] [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 512 {*ashldi3_1}
     (nil))
(insn 245 244 246 7 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 246 245 247 7 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.6723 ] [120])
                (plus:DI (reg/f:DI 0 ax [216])
                    (reg:DI 1 dx [orig:119 D.6722 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:119 D.6722 ] [119]))
        (nil)))
(insn 247 246 248 7 (set (reg/f:DI 0 ax [orig:121 D.6725 ] [121])
        (mem/f:DI (reg/f:DI 0 ax [orig:120 D.6723 ] [120]) [0 *_84+0 S8 A64])) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 248 247 249 7 (set (reg:SI 1 dx [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])) fmtext_o.cpp:431 90 {*movsi_internal}
     (nil))
(insn 249 248 250 7 (set (reg:DI 1 dx [orig:122 D.6722 ] [122])
        (sign_extend:DI (reg:SI 1 dx [217]))) fmtext_o.cpp:431 142 {*extendsidi2_rex64}
     (nil))
(insn 250 249 251 7 (parallel [
            (set (reg:DI 1 dx [orig:123 D.6722 ] [123])
                (ashift:DI (reg:DI 1 dx [orig:122 D.6722 ] [122])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 512 {*ashldi3_1}
     (nil))
(insn 251 250 252 7 (parallel [
            (set (reg/f:DI 1 dx [orig:124 D.6725 ] [124])
                (plus:DI (reg:DI 1 dx [orig:123 D.6722 ] [123])
                    (reg/f:DI 0 ax [orig:121 D.6725 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 218 {*adddi_1}
     (nil))
(insn 252 251 254 7 (parallel [
            (set (reg:DI 0 ax [218])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 218 {*adddi_1}
     (nil))
(insn 254 252 255 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f93b2317510 *.LC25>)) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 255 254 256 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [218])) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 256 255 257 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:431 93 {*movqi_internal}
     (nil))
(call_insn 257 256 258 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:431 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 258 257 259 7 (set (reg:DI 1 dx [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:432 89 {*movdi_internal}
     (nil))
(insn 259 258 261 7 (parallel [
            (set (reg:DI 0 ax [220])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:432 218 {*adddi_1}
     (nil))
(insn 261 259 262 7 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:432 90 {*movsi_internal}
     (nil))
(insn 262 261 263 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [220])) fmtext_o.cpp:432 89 {*movdi_internal}
     (nil))
(call_insn 263 262 264 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:432 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 264 263 265 7 (set (reg:SI 0 ax [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:433 90 {*movsi_internal}
     (nil))
(insn 265 264 266 7 (set (reg:DI 0 ax [orig:125 D.6722 ] [125])
        (sign_extend:DI (reg:SI 0 ax [221]))) fmtext_o.cpp:433 142 {*extendsidi2_rex64}
     (nil))
(insn 266 265 267 7 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6722 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.6722 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 512 {*ashldi3_1}
     (nil))
(insn 267 266 268 7 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 268 267 269 7 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.6723 ] [127])
                (plus:DI (reg/f:DI 0 ax [222])
                    (reg:DI 1 dx [orig:126 D.6722 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6722 ] [126]))
        (nil)))
(insn 269 268 270 7 (set (reg/f:DI 0 ax [orig:128 D.6725 ] [128])
        (mem/f:DI (reg/f:DI 0 ax [orig:127 D.6723 ] [127]) [0 *_93+0 S8 A64])) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 270 269 271 7 (set (reg:SI 1 dx [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])) fmtext_o.cpp:433 90 {*movsi_internal}
     (nil))
(insn 271 270 272 7 (set (reg:DI 1 dx [orig:129 D.6728 ] [129])
        (sign_extend:DI (reg:SI 1 dx [223]))) fmtext_o.cpp:433 142 {*extendsidi2_rex64}
     (nil))
(insn 272 271 273 7 (parallel [
            (set (reg:DI 1 dx [orig:130 D.6728 ] [130])
                (plus:DI (reg:DI 1 dx [orig:129 D.6728 ] [129])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 218 {*adddi_1}
     (nil))
(insn 273 272 274 7 (parallel [
            (set (reg:DI 1 dx [orig:131 D.6728 ] [131])
                (ashift:DI (reg:DI 1 dx [orig:130 D.6728 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 512 {*ashldi3_1}
     (nil))
(insn 274 273 275 7 (parallel [
            (set (reg/f:DI 1 dx [orig:132 D.6725 ] [132])
                (plus:DI (reg:DI 1 dx [orig:131 D.6728 ] [131])
                    (reg/f:DI 0 ax [orig:128 D.6725 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 218 {*adddi_1}
     (nil))
(insn 275 274 277 7 (parallel [
            (set (reg:DI 0 ax [224])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 218 {*adddi_1}
     (nil))
(insn 277 275 278 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f93b2317510 *.LC25>)) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 278 277 279 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [224])) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 279 278 280 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:433 93 {*movqi_internal}
     (nil))
(call_insn 280 279 281 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:433 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 281 280 402 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:429 217 {*addsi_1}
     (nil))
(jump_insn 402 281 403 7 (set (pc)
        (label_ref 282)) fmtext_o.cpp:429 654 {jump}
     (nil)
 -> 282)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 403 402 285)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 285 403 286 8 82 "" [1 uses])
(note 286 285 287 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 321 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              10 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 225 226 227 228
(code_label 321 287 288 9 86 "" [1 uses])
(note 288 321 289 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 289 288 290 9 (set (reg/f:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 290 289 409 9 (set (reg:SI 0 ax [orig:133 D.6719 ] [133])
        (mem/j:SI (reg/f:DI 0 ax [225]) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(insn 409 290 291 9 (set (reg:SI 1 dx [226])
        (reg:SI 0 ax [orig:133 D.6719 ] [133])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(insn 291 409 292 9 (parallel [
            (set (reg:SI 1 dx [226])
                (lshiftrt:SI (reg:SI 1 dx [226])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 544 {*lshrsi3_1}
     (nil))
(insn 292 291 293 9 (parallel [
            (set (reg:SI 0 ax [227])
                (plus:SI (reg:SI 0 ax [orig:133 D.6719 ] [133])
                    (reg:SI 1 dx [226])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 217 {*addsi_1}
     (nil))
(insn 293 292 294 9 (parallel [
            (set (reg:SI 0 ax [228])
                (ashiftrt:SI (reg:SI 0 ax [227])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 545 {*ashrsi3_1}
     (nil))
(insn 294 293 295 9 (set (reg:SI 0 ax [orig:134 D.6719 ] [134])
        (reg:SI 0 ax [228])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(insn 295 294 296 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:134 D.6719 ] [134])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32]))) fmtext_o.cpp:437 7 {*cmpsi_1}
     (nil))
(jump_insn 296 295 297 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 324)
            (pc))) fmtext_o.cpp:437 612 {*jcc_1}
     (nil)
 -> 324)
;;  succ:       11
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 135 136 137 138 139 140 141 229 230 231 232 233 234
(note 297 296 298 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 10 (set (reg:DI 1 dx [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 299 298 301 10 (parallel [
            (set (reg:DI 0 ax [230])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:438 218 {*adddi_1}
     (nil))
(insn 301 299 302 10 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
(insn 302 301 303 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [230])) fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(call_insn 303 302 304 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:438 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 304 303 305 10 (set (reg:SI 0 ax [231])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 305 304 306 10 (set (reg:DI 0 ax [orig:135 D.6722 ] [135])
        (sign_extend:DI (reg:SI 0 ax [231]))) fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 306 305 307 10 (parallel [
            (set (reg:DI 1 dx [orig:136 D.6722 ] [136])
                (ashift:DI (reg:DI 0 ax [orig:135 D.6722 ] [135])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 512 {*ashldi3_1}
     (nil))
(insn 307 306 308 10 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 308 307 309 10 (parallel [
            (set (reg/f:DI 0 ax [orig:137 D.6723 ] [137])
                (plus:DI (reg/f:DI 0 ax [232])
                    (reg:DI 1 dx [orig:136 D.6722 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:136 D.6722 ] [136]))
        (nil)))
(insn 309 308 310 10 (set (reg/f:DI 0 ax [orig:138 D.6725 ] [138])
        (mem/f:DI (reg/f:DI 0 ax [orig:137 D.6723 ] [137]) [0 *_107+0 S8 A64])) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 310 309 311 10 (set (reg:SI 1 dx [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])) fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 311 310 312 10 (set (reg:DI 1 dx [orig:139 D.6722 ] [139])
        (sign_extend:DI (reg:SI 1 dx [233]))) fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 312 311 313 10 (parallel [
            (set (reg:DI 1 dx [orig:140 D.6722 ] [140])
                (ashift:DI (reg:DI 1 dx [orig:139 D.6722 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 512 {*ashldi3_1}
     (nil))
(insn 313 312 314 10 (parallel [
            (set (reg/f:DI 1 dx [orig:141 D.6725 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 D.6722 ] [140])
                    (reg/f:DI 0 ax [orig:138 D.6725 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 218 {*adddi_1}
     (nil))
(insn 314 313 316 10 (parallel [
            (set (reg:DI 0 ax [234])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 218 {*adddi_1}
     (nil))
(insn 316 314 317 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f93b2317510 *.LC25>)) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 317 316 318 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [234])) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 318 317 319 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:439 93 {*movqi_internal}
     (nil))
(call_insn 319 318 320 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:439 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 320 319 404 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 217 {*addsi_1}
     (nil))
(jump_insn 404 320 405 10 (set (pc)
        (label_ref 321)) fmtext_o.cpp:437 654 {jump}
     (nil)
 -> 321)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 405 404 324)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 324 405 325 11 85 "" [1 uses])
(note 325 324 326 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 368 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              13 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 235 236 237 238
(code_label 368 326 327 12 87 "" [1 uses])
(note 327 368 328 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 328 327 329 12 (set (reg/f:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:441 89 {*movdi_internal}
     (nil))
(insn 329 328 411 12 (set (reg:SI 0 ax [orig:142 D.6719 ] [142])
        (mem/j:SI (reg/f:DI 0 ax [235]) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
(insn 411 329 330 12 (set (reg:SI 1 dx [236])
        (reg:SI 0 ax [orig:142 D.6719 ] [142])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
(insn 330 411 331 12 (parallel [
            (set (reg:SI 1 dx [236])
                (lshiftrt:SI (reg:SI 1 dx [236])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 544 {*lshrsi3_1}
     (nil))
(insn 331 330 332 12 (parallel [
            (set (reg:SI 0 ax [237])
                (plus:SI (reg:SI 0 ax [orig:142 D.6719 ] [142])
                    (reg:SI 1 dx [236])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 217 {*addsi_1}
     (nil))
(insn 332 331 333 12 (parallel [
            (set (reg:SI 0 ax [238])
                (ashiftrt:SI (reg:SI 0 ax [237])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 545 {*ashrsi3_1}
     (nil))
(insn 333 332 334 12 (set (reg:SI 0 ax [orig:143 D.6719 ] [143])
        (reg:SI 0 ax [238])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
(insn 334 333 335 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:143 D.6719 ] [143])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32]))) fmtext_o.cpp:441 7 {*cmpsi_1}
     (nil))
(jump_insn 335 334 336 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 371)
            (pc))) fmtext_o.cpp:441 612 {*jcc_1}
     (nil)
 -> 371)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144 145 146 147 148 149 150 151 152 153 154 239 240 241 242 243 244 245 246 247 248
(note 336 335 337 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 337 336 338 13 (set (reg:DI 1 dx [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:442 89 {*movdi_internal}
     (nil))
(insn 338 337 340 13 (parallel [
            (set (reg:DI 0 ax [240])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:442 218 {*adddi_1}
     (nil))
(insn 340 338 341 13 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:442 90 {*movsi_internal}
     (nil))
(insn 341 340 342 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [240])) fmtext_o.cpp:442 89 {*movdi_internal}
     (nil))
(call_insn 342 341 343 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:442 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 343 342 344 13 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 344 343 345 13 (set (reg:DI 0 ax [orig:144 D.6722 ] [144])
        (sign_extend:DI (reg:SI 0 ax [241]))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (nil))
(insn 345 344 346 13 (parallel [
            (set (reg:DI 1 dx [orig:145 D.6722 ] [145])
                (ashift:DI (reg:DI 0 ax [orig:144 D.6722 ] [144])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 512 {*ashldi3_1}
     (nil))
(insn 346 345 347 13 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 347 346 348 13 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.6723 ] [146])
                (plus:DI (reg/f:DI 0 ax [242])
                    (reg:DI 1 dx [orig:145 D.6722 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:145 D.6722 ] [145]))
        (nil)))
(insn 348 347 349 13 (set (reg/f:DI 1 dx [orig:147 D.6725 ] [147])
        (mem/f:DI (reg/f:DI 0 ax [orig:146 D.6723 ] [146]) [0 *_120+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 349 348 350 13 (set (reg/f:DI 0 ax [243])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 350 349 413 13 (set (reg:SI 0 ax [orig:148 D.6719 ] [148])
        (mem/j:SI (reg/f:DI 0 ax [243]) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 413 350 351 13 (set (reg:SI 2 cx [244])
        (reg:SI 0 ax [orig:148 D.6719 ] [148])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 351 413 352 13 (parallel [
            (set (reg:SI 2 cx [244])
                (lshiftrt:SI (reg:SI 2 cx [244])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 544 {*lshrsi3_1}
     (nil))
(insn 352 351 353 13 (parallel [
            (set (reg:SI 0 ax [245])
                (plus:SI (reg:SI 0 ax [orig:148 D.6719 ] [148])
                    (reg:SI 2 cx [244])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 217 {*addsi_1}
     (nil))
(insn 353 352 354 13 (parallel [
            (set (reg:SI 0 ax [246])
                (ashiftrt:SI (reg:SI 0 ax [245])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 545 {*ashrsi3_1}
     (nil))
(insn 354 353 355 13 (set (reg:SI 0 ax [orig:149 D.6719 ] [149])
        (reg:SI 0 ax [246])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 355 354 356 13 (set (reg:DI 2 cx [orig:150 D.6728 ] [150])
        (sign_extend:DI (reg:SI 0 ax [orig:149 D.6719 ] [149]))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (nil))
(insn 356 355 357 13 (set (reg:SI 0 ax [247])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 357 356 358 13 (set (reg:DI 0 ax [orig:151 D.6728 ] [151])
        (sign_extend:DI (reg:SI 0 ax [247]))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (nil))
(insn 358 357 359 13 (parallel [
            (set (reg:DI 0 ax [orig:152 D.6728 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 D.6728 ] [151])
                    (reg:DI 2 cx [orig:150 D.6728 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 218 {*adddi_1}
     (nil))
(insn 359 358 360 13 (parallel [
            (set (reg:DI 0 ax [orig:153 D.6728 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 D.6728 ] [152])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 512 {*ashldi3_1}
     (nil))
(insn 360 359 361 13 (parallel [
            (set (reg/f:DI 1 dx [orig:154 D.6725 ] [154])
                (plus:DI (reg/f:DI 1 dx [orig:147 D.6725 ] [147])
                    (reg:DI 0 ax [orig:153 D.6728 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 218 {*adddi_1}
     (nil))
(insn 361 360 363 13 (parallel [
            (set (reg:DI 0 ax [248])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 218 {*adddi_1}
     (nil))
(insn 363 361 364 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f93b2317510 *.LC25>)) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 364 363 365 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [248])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 365 364 366 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:443 93 {*movqi_internal}
     (nil))
(call_insn 366 365 367 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:443 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 367 366 406 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 217 {*addsi_1}
     (nil))
(jump_insn 406 367 407 13 (set (pc)
        (label_ref 368)) fmtext_o.cpp:441 654 {jump}
     (nil)
 -> 368)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 407 406 371)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 371 407 372 14 83 "" [2 uses])
(note 372 371 373 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 373 372 374 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:447 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 374 373 375 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 379)
            (pc))) fmtext_o.cpp:447 612 {*jcc_1}
     (nil)
 -> 379)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 249
(note 375 374 376 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 376 375 377 15 (set (reg:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:448 89 {*movdi_internal}
     (nil))
(insn 377 376 378 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [249])) fmtext_o.cpp:448 89 {*movdi_internal}
     (nil))
(call_insn 378 377 379 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f93b25741b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:448 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 379 378 380 16 88 "" [1 uses])
(note 380 379 381 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 384 16 (set (reg:SI 0 ax [orig:87 D.6719 ] [87])
        (const_int 1 [0x1])) fmtext_o.cpp:451 90 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              3 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 155
(code_label 384 381 385 17 89 "" [1 uses])
(note 385 384 386 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 390 17 (set (reg:SI 0 ax [orig:155 <retval> ] [155])
        (reg:SI 0 ax [orig:87 D.6719 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 390 386 391 17 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:155 <retval> ] [155])) fmtext_o.cpp:452 90 {*movsi_internal}
     (nil))
(insn 391 390 392 17 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.6729+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [252]))
        ]) fmtext_o.cpp:452 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 392 391 398 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 395)
            (pc))) fmtext_o.cpp:452 612 {*jcc_1}
     (nil)
 -> 395)
;;  succ:       19
;;              18 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 398 392 393 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(call_insn 393 398 394 18 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f93b26b3af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:452 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 394 393 395)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 395 394 399 19 90 "" [1 uses])
(note 399 395 396 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 396 399 408 19 (use (reg/i:SI 0 ax)) fmtext_o.cpp:452 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 408 396 0 NOTE_INSN_DELETED)

;; Function int read_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Endian_Check*) (_Z9read_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSI_P12Endian_Check, funcdef_no=6, decl_uid=5398, cgraph_uid=6, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 40:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=579 from oldreg=429, assigning class GENERAL_REGS to r579
   40: {r579:DI=r579:DI<<0x8;clobber flags:CC;}
      REG_DEAD r427:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  813: r579:DI=r427:DI
    Inserting insn reload after:
  814: r429:DI=r579:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 47:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 90:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 110:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 120:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 133:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 143:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 151
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 153:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) rm  (1) rn {*cmphi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 166:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 172:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 183:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 197:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 208:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 209:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 213:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 219:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 232:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 238:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 242:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 255
	 Choosing alt 0 in insn 255:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 256:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 258:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 265
	 Choosing alt 0 in insn 265:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 266:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 271:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 273:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 288:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 291:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 292:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 301:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 311
	 Choosing alt 0 in insn 311:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 312:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 320:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 323:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 328:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 329:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 330
	 Choosing alt 0 in insn 330:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 331:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 339:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 342:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 343:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 344
	 Choosing alt 0 in insn 344:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 345:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 350
	 Choosing alt 0 in insn 350:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 353:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 354:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 359:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 375
	 Choosing alt 0 in insn 375:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 376:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 377:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 383:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 385
	 Choosing alt 0 in insn 385:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 389:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 390:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 391
	 Choosing alt 0 in insn 391:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 398
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 399:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 401
	 Choosing alt 2 in insn 401:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 402:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 407
	 Choosing alt 0 in insn 407:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 410:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 420:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 421:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 422
	 Choosing alt 0 in insn 422:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 423:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 424:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 430:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 432
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 433:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 434:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 440:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 442
	 Choosing alt 0 in insn 442:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 443:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 444:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 452:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 453
	 Choosing alt 0 in insn 453:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 457:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 458:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 459
	 Choosing alt 0 in insn 459:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 464:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 466
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 467:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 469
	 Choosing alt 2 in insn 469:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 470:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 473:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 475
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 476:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 478:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 486:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 493:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 495:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 500:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 504:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 506
	 Choosing alt 0 in insn 506:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 507:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 512
	 Choosing alt 2 in insn 512:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 514:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 519:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 520:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 521
	 Choosing alt 0 in insn 521:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 522:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 525:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 529:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 530
	 Choosing alt 0 in insn 530:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 531:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 534
	 Choosing alt 0 in insn 534:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 535:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 536:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 539:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 540:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 541
	 Choosing alt 0 in insn 541:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 542:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 545:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 546
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 549:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 550:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 551
	 Choosing alt 0 in insn 551:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 552:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 554:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 555:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 557:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 558:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 561:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 563
	 Choosing alt 0 in insn 563:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 564:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 566:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 567:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 568
	 Choosing alt 0 in insn 568:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 571:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 572:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 573
	 Choosing alt 0 in insn 573:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 574:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 576:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 577:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 579:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 580:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 583:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 584:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 585
	 Choosing alt 0 in insn 585:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 586:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 588:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 589:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 590
	 Choosing alt 0 in insn 590:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 593:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 595
	 Choosing alt 0 in insn 595:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 598:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 599:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 601:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 602:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 603:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 609:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 611:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 613:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 614:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 615
	 Choosing alt 0 in insn 615:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 616:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 617:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 621
	 Choosing alt 2 in insn 621:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 623:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 628:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 629:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 630
	 Choosing alt 0 in insn 630:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 631:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 637:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 638:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 639
	 Choosing alt 0 in insn 639:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 640:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 641:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 642:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 643:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 645:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 646:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 649:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 650:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 651
	 Choosing alt 0 in insn 651:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 652:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 654:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 655:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 656
	 Choosing alt 0 in insn 656:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 657:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 660:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 661
	 Choosing alt 0 in insn 661:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 663:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 664:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 665:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 667:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 668:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 671:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 672:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 673
	 Choosing alt 0 in insn 673:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 674:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 675:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 676:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 677:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 678
	 Choosing alt 0 in insn 678:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 681:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 682:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 683
	 Choosing alt 0 in insn 683:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 684:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 685:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 686:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 687:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 688:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 689:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 690:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 693:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 694:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 695
	 Choosing alt 0 in insn 695:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 696:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 698:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 699:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 700
	 Choosing alt 0 in insn 700:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 703:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 704:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 705
	 Choosing alt 0 in insn 705:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 706:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 707:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 709
	 Choosing alt 0 in insn 709:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 710:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 711:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 712:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 719:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 720:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 721:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 722
	 Choosing alt 0 in insn 722:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 723:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 725:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 728:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 729:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 730:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 731:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 732
	 Choosing alt 0 in insn 732:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 733:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 734:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 735:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 736:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 738:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 742:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 744:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 745
	 Choosing alt 0 in insn 745:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 746:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 748:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 749:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 750
	 Choosing alt 0 in insn 750:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 752:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 753:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 754:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 755
	 Choosing alt 0 in insn 755:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 756:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 758:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 760:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 761:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 762:  (0) =r  (1) rm {extendhidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 763:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 764:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 770:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 776:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54

********** Pseudo live ranges #1: **********

  BB 6
   Insn 60: point = 0
   Insn 59: point = 0
   Insn 58: point = 0
   Insn 57: point = 0
  BB 9
   Insn 93: point = 0
   Insn 92: point = 0
   Insn 91: point = 0
   Insn 90: point = 0
  BB 11
   Insn 123: point = 0
   Insn 122: point = 0
   Insn 121: point = 0
   Insn 120: point = 0
  BB 41
   Insn 489: point = 0
   Insn 488: point = 0
   Insn 487: point = 0
   Insn 486: point = 0
  BB 54
   Insn 784: point = 0
   Insn 783: point = 0
   Insn 779: point = 1
   Insn 776: point = 3
  BB 3
   Insn 17: point = 4
   Insn 16: point = 4
   Insn 15: point = 5
   Insn 14: point = 7
   Insn 13: point = 9
  BB 53
   Insn 810: point = 10
   Insn 770: point = 10
  BB 51
   Insn 739: point = 10
   Insn 738: point = 10
  BB 52
   Insn 808: point = 10
   Insn 764: point = 10
   Insn 763: point = 10
   Insn 762: point = 11
   Insn 761: point = 13
   Insn 760: point = 15
   Insn 759: point = 17
   Insn 758: point = 19
   Insn 757: point = 21
   Insn 756: point = 22
   Insn 755: point = 24
   Insn 754: point = 26
   Insn 753: point = 27
   Insn 752: point = 29
   Insn 751: point = 31
   Insn 750: point = 32
   Insn 749: point = 34
   Insn 748: point = 36
   Insn 747: point = 38
   Insn 746: point = 39
   Insn 745: point = 41
   Insn 744: point = 43
   Insn 743: point = 44
   Insn 742: point = 46
   Insn 741: point = 48
  BB 50
   Insn 736: point = 49
   Insn 735: point = 50
   Insn 734: point = 52
   Insn 733: point = 54
   Insn 732: point = 56
   Insn 731: point = 58
   Insn 730: point = 59
   Insn 729: point = 61
   Insn 728: point = 63
  BB 49
   Insn 726: point = 64
   Insn 725: point = 64
   Insn 724: point = 65
   Insn 723: point = 67
   Insn 722: point = 69
   Insn 721: point = 71
   Insn 720: point = 72
   Insn 719: point = 74
   Insn 718: point = 76
  BB 47
   Insn 624: point = 77
   Insn 623: point = 77
   Insn 622: point = 78
   Insn 621: point = 80
   Insn 620: point = 82
   Insn 619: point = 83
   Insn 618: point = 85
   Insn 617: point = 87
   Insn 616: point = 89
   Insn 615: point = 91
   Insn 614: point = 93
   Insn 613: point = 94
   Insn 612: point = 96
   Insn 611: point = 98
  BB 48
   Insn 806: point = 99
   Insn 712: point = 99
   Insn 711: point = 99
   Insn 710: point = 100
   Insn 709: point = 102
   Insn 708: point = 104
   Insn 707: point = 106
   Insn 706: point = 107
   Insn 705: point = 109
   Insn 704: point = 111
   Insn 703: point = 112
   Insn 702: point = 114
   Insn 701: point = 116
   Insn 700: point = 117
   Insn 699: point = 119
   Insn 698: point = 121
   Insn 697: point = 123
   Insn 696: point = 124
   Insn 695: point = 126
   Insn 694: point = 128
   Insn 693: point = 129
   Insn 692: point = 131
   Insn 691: point = 133
   Insn 690: point = 134
   Insn 689: point = 135
   Insn 688: point = 137
   Insn 687: point = 139
   Insn 686: point = 141
   Insn 685: point = 143
   Insn 684: point = 144
   Insn 683: point = 146
   Insn 682: point = 148
   Insn 681: point = 149
   Insn 680: point = 151
   Insn 679: point = 153
   Insn 678: point = 154
   Insn 677: point = 156
   Insn 676: point = 158
   Insn 675: point = 160
   Insn 674: point = 161
   Insn 673: point = 163
   Insn 672: point = 165
   Insn 671: point = 166
   Insn 670: point = 168
   Insn 669: point = 170
   Insn 668: point = 171
   Insn 667: point = 172
   Insn 666: point = 174
   Insn 665: point = 176
   Insn 664: point = 178
   Insn 663: point = 180
   Insn 662: point = 181
   Insn 661: point = 183
   Insn 660: point = 185
   Insn 659: point = 186
   Insn 658: point = 188
   Insn 657: point = 190
   Insn 656: point = 191
   Insn 655: point = 193
   Insn 654: point = 195
   Insn 653: point = 197
   Insn 652: point = 198
   Insn 651: point = 200
   Insn 650: point = 202
   Insn 649: point = 203
   Insn 648: point = 205
   Insn 647: point = 207
   Insn 646: point = 208
   Insn 645: point = 209
   Insn 644: point = 211
   Insn 643: point = 213
   Insn 642: point = 215
   Insn 641: point = 217
   Insn 640: point = 218
   Insn 639: point = 220
   Insn 638: point = 222
   Insn 637: point = 223
   Insn 636: point = 225
   Insn 635: point = 227
   Insn 634: point = 228
   Insn 633: point = 230
   Insn 632: point = 232
   Insn 631: point = 233
   Insn 630: point = 235
   Insn 629: point = 237
   Insn 628: point = 238
   Insn 627: point = 240
   Insn 626: point = 242
  BB 46
   Insn 609: point = 243
  BB 44
   Insn 515: point = 243
   Insn 514: point = 243
   Insn 513: point = 244
   Insn 512: point = 246
   Insn 511: point = 248
   Insn 510: point = 249
   Insn 509: point = 251
   Insn 508: point = 253
   Insn 507: point = 255
   Insn 506: point = 257
   Insn 505: point = 259
   Insn 504: point = 260
   Insn 503: point = 262
   Insn 502: point = 264
  BB 45
   Insn 804: point = 265
   Insn 603: point = 265
   Insn 602: point = 265
   Insn 601: point = 266
   Insn 600: point = 268
   Insn 599: point = 270
   Insn 598: point = 272
   Insn 597: point = 274
   Insn 596: point = 275
   Insn 595: point = 277
   Insn 594: point = 279
   Insn 593: point = 280
   Insn 592: point = 282
   Insn 591: point = 284
   Insn 590: point = 285
   Insn 589: point = 287
   Insn 588: point = 289
   Insn 587: point = 291
   Insn 586: point = 292
   Insn 585: point = 294
   Insn 584: point = 296
   Insn 583: point = 297
   Insn 582: point = 299
   Insn 581: point = 301
   Insn 580: point = 302
   Insn 579: point = 303
   Insn 578: point = 305
   Insn 577: point = 307
   Insn 576: point = 309
   Insn 575: point = 311
   Insn 574: point = 312
   Insn 573: point = 314
   Insn 572: point = 316
   Insn 571: point = 317
   Insn 570: point = 319
   Insn 569: point = 321
   Insn 568: point = 322
   Insn 567: point = 324
   Insn 566: point = 326
   Insn 565: point = 328
   Insn 564: point = 329
   Insn 563: point = 331
   Insn 562: point = 333
   Insn 561: point = 334
   Insn 560: point = 336
   Insn 559: point = 338
   Insn 558: point = 339
   Insn 557: point = 340
   Insn 556: point = 342
   Insn 555: point = 344
   Insn 554: point = 346
   Insn 553: point = 348
   Insn 552: point = 349
   Insn 551: point = 351
   Insn 550: point = 353
   Insn 549: point = 354
   Insn 548: point = 356
   Insn 547: point = 358
   Insn 546: point = 359
   Insn 545: point = 361
   Insn 544: point = 363
   Insn 543: point = 365
   Insn 542: point = 366
   Insn 541: point = 368
   Insn 540: point = 370
   Insn 539: point = 371
   Insn 538: point = 373
   Insn 537: point = 375
   Insn 536: point = 376
   Insn 535: point = 377
   Insn 534: point = 379
   Insn 533: point = 381
   Insn 532: point = 383
   Insn 531: point = 384
   Insn 530: point = 386
   Insn 529: point = 388
   Insn 528: point = 389
   Insn 527: point = 391
   Insn 526: point = 393
   Insn 525: point = 394
   Insn 524: point = 396
   Insn 523: point = 398
   Insn 522: point = 399
   Insn 521: point = 401
   Insn 520: point = 403
   Insn 519: point = 404
   Insn 518: point = 406
   Insn 517: point = 408
  BB 43
   Insn 500: point = 409
  BB 42
   Insn 498: point = 409
   Insn 497: point = 409
   Insn 496: point = 410
   Insn 495: point = 412
   Insn 494: point = 413
   Insn 493: point = 415
  BB 40
   Insn 802: point = 416
   Insn 481: point = 416
   Insn 480: point = 416
   Insn 479: point = 417
   Insn 478: point = 418
   Insn 477: point = 418
   Insn 476: point = 419
   Insn 475: point = 421
   Insn 474: point = 423
   Insn 473: point = 424
   Insn 472: point = 426
   Insn 471: point = 428
   Insn 470: point = 429
   Insn 469: point = 431
   Insn 468: point = 433
   Insn 467: point = 435
   Insn 466: point = 437
   Insn 465: point = 439
   Insn 464: point = 440
   Insn 463: point = 442
   Insn 462: point = 444
   Insn 461: point = 445
   Insn 460: point = 447
   Insn 459: point = 449
   Insn 458: point = 451
   Insn 457: point = 452
   Insn 456: point = 454
   Insn 455: point = 456
   Insn 454: point = 457
   Insn 453: point = 459
   Insn 452: point = 461
   Insn 451: point = 462
   Insn 450: point = 464
   Insn 449: point = 466
  BB 39
   Insn 446: point = 467
   Insn 445: point = 467
   Insn 444: point = 468
   Insn 443: point = 470
   Insn 442: point = 472
   Insn 441: point = 474
   Insn 440: point = 475
   Insn 439: point = 477
   Insn 438: point = 479
  BB 38
   Insn 436: point = 480
   Insn 435: point = 480
   Insn 434: point = 481
   Insn 433: point = 483
   Insn 432: point = 485
   Insn 431: point = 487
   Insn 430: point = 488
   Insn 429: point = 490
   Insn 428: point = 492
  BB 37
   Insn 426: point = 493
   Insn 425: point = 493
   Insn 424: point = 494
   Insn 423: point = 496
   Insn 422: point = 498
   Insn 421: point = 500
   Insn 420: point = 501
   Insn 419: point = 503
   Insn 418: point = 505
  BB 36
   Insn 800: point = 506
   Insn 413: point = 506
   Insn 412: point = 506
   Insn 411: point = 507
   Insn 410: point = 508
   Insn 409: point = 508
   Insn 408: point = 509
   Insn 407: point = 511
   Insn 406: point = 513
   Insn 405: point = 514
   Insn 404: point = 516
   Insn 403: point = 518
   Insn 402: point = 519
   Insn 401: point = 521
   Insn 400: point = 523
   Insn 399: point = 525
   Insn 398: point = 527
   Insn 397: point = 529
   Insn 396: point = 530
   Insn 395: point = 532
   Insn 394: point = 534
   Insn 393: point = 535
   Insn 392: point = 537
   Insn 391: point = 539
   Insn 390: point = 541
   Insn 389: point = 542
   Insn 388: point = 544
   Insn 387: point = 546
   Insn 386: point = 547
   Insn 385: point = 549
   Insn 384: point = 551
   Insn 383: point = 552
   Insn 382: point = 554
   Insn 381: point = 556
  BB 35
   Insn 379: point = 557
   Insn 378: point = 557
   Insn 377: point = 558
   Insn 376: point = 560
   Insn 375: point = 562
   Insn 374: point = 564
   Insn 373: point = 565
   Insn 372: point = 567
   Insn 371: point = 569
  BB 34
   Insn 368: point = 570
   Insn 367: point = 570
   Insn 366: point = 571
   Insn 365: point = 572
   Insn 364: point = 573
  BB 33
   Insn 362: point = 574
   Insn 361: point = 574
   Insn 360: point = 575
   Insn 359: point = 577
   Insn 358: point = 578
   Insn 357: point = 580
   Insn 356: point = 581
   Insn 355: point = 581
   Insn 354: point = 582
   Insn 353: point = 582
   Insn 352: point = 582
   Insn 351: point = 583
   Insn 350: point = 585
   Insn 349: point = 587
   Insn 348: point = 588
   Insn 347: point = 590
   Insn 346: point = 592
   Insn 345: point = 593
   Insn 344: point = 595
   Insn 343: point = 597
   Insn 342: point = 598
   Insn 341: point = 600
   Insn 340: point = 602
   Insn 339: point = 603
   Insn 338: point = 604
   Insn 337: point = 606
   Insn 336: point = 607
   Insn 335: point = 607
   Insn 334: point = 608
   Insn 333: point = 610
   Insn 332: point = 612
   Insn 331: point = 614
   Insn 330: point = 616
   Insn 329: point = 618
   Insn 328: point = 619
   Insn 327: point = 621
   Insn 326: point = 623
   Insn 325: point = 624
   Insn 324: point = 626
   Insn 323: point = 627
   Insn 322: point = 629
   Insn 321: point = 631
   Insn 320: point = 632
   Insn 319: point = 633
   Insn 318: point = 635
   Insn 317: point = 636
   Insn 316: point = 636
   Insn 315: point = 637
   Insn 314: point = 639
   Insn 313: point = 641
   Insn 312: point = 643
   Insn 311: point = 645
   Insn 310: point = 647
   Insn 309: point = 648
   Insn 308: point = 650
   Insn 307: point = 652
   Insn 306: point = 653
   Insn 305: point = 655
   Insn 304: point = 656
   Insn 303: point = 658
   Insn 302: point = 660
   Insn 301: point = 661
   Insn 300: point = 662
   Insn 299: point = 664
   Insn 298: point = 665
   Insn 297: point = 665
   Insn 296: point = 666
   Insn 295: point = 668
   Insn 294: point = 670
   Insn 293: point = 671
   Insn 292: point = 673
   Insn 291: point = 674
   Insn 290: point = 676
   Insn 289: point = 678
   Insn 288: point = 679
   Insn 287: point = 680
   Insn 286: point = 682
   Insn 285: point = 683
   Insn 284: point = 683
   Insn 283: point = 684
   Insn 282: point = 686
   Insn 281: point = 688
   Insn 280: point = 689
   Insn 279: point = 691
   Insn 278: point = 692
   Insn 277: point = 694
   Insn 276: point = 696
  BB 32
   Insn 273: point = 697
   Insn 272: point = 698
   Insn 271: point = 700
  BB 31
   Insn 269: point = 701
   Insn 268: point = 701
   Insn 267: point = 702
   Insn 266: point = 704
   Insn 265: point = 706
   Insn 264: point = 708
   Insn 263: point = 709
   Insn 262: point = 711
   Insn 261: point = 713
   Insn 260: point = 714
   Insn 259: point = 716
   Insn 258: point = 717
   Insn 257: point = 718
   Insn 256: point = 720
   Insn 255: point = 722
   Insn 254: point = 724
   Insn 253: point = 725
   Insn 252: point = 727
   Insn 251: point = 729
  BB 22
   Insn 792: point = 730
   Insn 198: point = 730
   Insn 197: point = 730
   Insn 196: point = 730
   Insn 195: point = 731
   Insn 194: point = 732
   Insn 193: point = 734
  BB 20
   Insn 790: point = 735
   Insn 184: point = 735
   Insn 183: point = 735
  BB 21
   Insn 190: point = 735
   Insn 189: point = 735
  BB 19
   Insn 181: point = 735
   Insn 180: point = 735
  BB 18
   Insn 788: point = 735
   Insn 173: point = 735
   Insn 172: point = 735
  BB 17
   Insn 786: point = 735
   Insn 167: point = 735
   Insn 166: point = 735
  BB 16
   Insn 164: point = 735
   Insn 163: point = 735
  BB 15
   Insn 161: point = 735
   Insn 160: point = 735
   Insn 159: point = 736
   Insn 158: point = 738
  BB 30
   Insn 248: point = 739
   Insn 247: point = 739
   Insn 246: point = 740
   Insn 245: point = 741
   Insn 244: point = 742
   Insn 243: point = 743
   Insn 242: point = 743
  BB 28
   Insn 798: point = 743
   Insn 233: point = 743
   Insn 232: point = 743
  BB 29
   Insn 239: point = 743
   Insn 238: point = 743
  BB 27
   Insn 230: point = 743
   Insn 229: point = 743
   Insn 228: point = 743
   Insn 227: point = 744
  BB 26
   Insn 796: point = 745
   Insn 220: point = 745
   Insn 219: point = 745
  BB 25
   Insn 794: point = 745
   Insn 214: point = 745
   Insn 213: point = 745
  BB 24
   Insn 211: point = 745
   Insn 210: point = 745
   Insn 209: point = 745
   Insn 208: point = 746
  BB 23
   Insn 206: point = 747
   Insn 205: point = 747
   Insn 204: point = 748
   Insn 203: point = 750
  BB 14
   Insn 155: point = 751
   Insn 154: point = 751
   Insn 153: point = 752
   Insn 152: point = 754
   Insn 151: point = 756
   Insn 150: point = 758
   Insn 149: point = 759
   Insn 148: point = 761
   Insn 147: point = 763
  BB 13
   Insn 145: point = 764
   Insn 144: point = 764
   Insn 143: point = 765
   Insn 142: point = 767
   Insn 141: point = 769
   Insn 140: point = 771
   Insn 139: point = 772
   Insn 138: point = 774
   Insn 137: point = 776
  BB 12
   Insn 135: point = 777
   Insn 134: point = 777
   Insn 133: point = 778
   Insn 132: point = 780
   Insn 131: point = 782
   Insn 130: point = 784
   Insn 129: point = 785
   Insn 128: point = 787
   Insn 127: point = 789
  BB 10
   Insn 118: point = 790
   Insn 117: point = 790
   Insn 116: point = 791
   Insn 115: point = 792
   Insn 114: point = 793
   Insn 113: point = 794
   Insn 112: point = 794
   Insn 111: point = 795
   Insn 110: point = 795
   Insn 109: point = 795
   Insn 108: point = 796
   Insn 107: point = 798
   Insn 106: point = 800
   Insn 105: point = 801
   Insn 104: point = 803
   Insn 103: point = 805
   Insn 102: point = 806
   Insn 101: point = 808
   Insn 100: point = 810
   Insn 99: point = 811
   Insn 98: point = 813
   Insn 97: point = 815
  BB 8
   Insn 88: point = 816
   Insn 87: point = 816
   Insn 86: point = 817
   Insn 85: point = 818
   Insn 84: point = 819
   Insn 83: point = 820
   Insn 82: point = 820
   Insn 81: point = 821
   Insn 80: point = 821
   Insn 79: point = 821
   Insn 78: point = 822
   Insn 77: point = 824
   Insn 76: point = 826
   Insn 75: point = 827
   Insn 74: point = 829
   Insn 73: point = 831
   Insn 72: point = 832
   Insn 71: point = 834
   Insn 70: point = 836
   Insn 69: point = 837
   Insn 68: point = 839
   Insn 67: point = 841
  BB 7
   Insn 65: point = 842
   Insn 64: point = 842
  BB 5
   Insn 55: point = 842
   Insn 54: point = 842
   Insn 53: point = 843
   Insn 52: point = 845
   Insn 51: point = 847
   Insn 50: point = 848
   Insn 49: point = 850
   Insn 48: point = 852
   Insn 47: point = 853
   Insn 46: point = 854
   Insn 45: point = 855
   Insn 44: point = 855
   Insn 43: point = 856
   Insn 42: point = 856
   Insn 41: point = 858
   Insn 814: point = 859
	Hard reg 1 is preferable by r579 with profit 1
   Insn 40: point = 861
   Insn 813: point = 861
	Hard reg 1 is preferable by r579 with profit 1
	Hard reg 0 is preferable by r579 with profit 1
   Insn 39: point = 863
   Insn 38: point = 865
   Insn 37: point = 866
   Insn 36: point = 868
   Insn 35: point = 869
   Insn 34: point = 871
   Insn 33: point = 873
  BB 4
   Insn 31: point = 874
   Insn 30: point = 874
   Insn 29: point = 875
   Insn 28: point = 877
   Insn 27: point = 879
   Insn 26: point = 880
   Insn 25: point = 882
   Insn 24: point = 884
   Insn 23: point = 886
   Insn 22: point = 887
   Insn 21: point = 887
   Insn 20: point = 888
   Insn 19: point = 890
  BB 2
   Insn 11: point = 891
   Insn 7: point = 891
   Insn 6: point = 891
   Insn 5: point = 891
   Insn 4: point = 891
   Insn 3: point = 891
   Insn 2: point = 891
 r87: [6..7]
 r88: [4..5]
 r89: [886..888]
 r90: [878..880]
 r91: [876..877]
 r92: [874..875]
 r93: [870..871]
 r94: [867..869]
 r95: [853..866]
 r96: [855..856]
 r97: [853..854]
 r98: [849..850]
 r99: [846..848]
 r100: [844..845]
 r101: [842..843]
 r102: [838..839]
 r103: [835..837]
 r104: [833..834]
 r105: [821..832]
 r106: [828..829]
 r107: [825..827]
 r108: [823..824]
 r109: [820..822]
 r110: [818..819]
 r111: [816..817]
 r112: [812..813]
 r113: [809..811]
 r114: [807..808]
 r115: [795..806]
 r116: [802..803]
 r117: [799..801]
 r118: [797..798]
 r119: [794..796]
 r120: [792..793]
 r121: [790..791]
 r122: [786..787]
 r123: [783..785]
 r124: [781..782]
 r125: [779..780]
 r126: [777..778]
 r127: [773..774]
 r128: [770..772]
 r129: [768..769]
 r130: [766..767]
 r131: [764..765]
 r132: [760..761]
 r133: [757..759]
 r134: [755..756]
 r135: [753..754]
 r136: [751..752]
 r137: [747..748]
 r138: [735..736]
 r139: [730..732]
 r140: [726..727]
 r141: [723..725]
 r142: [721..722]
 r143: [719..720]
 r144: [701..714]
 r145: [710..711]
 r146: [707..709]
 r147: [705..706]
 r148: [703..704]
 r149: [701..702]
 r150: [693..694]
 r151: [690..692]
 r152: [679..689]
 r153: [685..686]
 r154: [683..684]
 r155: [679..680]
 r156: [675..676]
 r157: [672..674]
 r158: [661..671]
 r159: [667..668]
 r160: [665..666]
 r161: [661..662]
 r162: [657..658]
 r163: [654..656]
 r164: [632..653]
 r165: [649..650]
 r166: [646..648]
 r167: [644..645]
 r168: [642..643]
 r169: [640..641]
 r170: [638..639]
 r171: [636..637]
 r172: [632..633]
 r173: [628..629]
 r174: [625..627]
 r175: [603..624]
 r176: [620..621]
 r177: [617..619]
 r178: [615..616]
 r179: [613..614]
 r180: [611..612]
 r181: [609..610]
 r182: [607..608]
 r183: [603..604]
 r184: [599..600]
 r185: [596..598]
 r186: [594..595]
 r187: [582..593]
 r188: [589..590]
 r189: [586..588]
 r190: [584..585]
 r191: [581..583]
 r192: [574..578]
 r193: [574..575]
 r194: [566..567]
 r195: [563..565]
 r196: [561..562]
 r197: [559..560]
 r198: [557..558]
 r199: [553..554]
 r200: [550..552]
 r201: [548..549]
 r202: [508..547]
 r203: [543..544]
 r204: [540..542]
 r205: [538..539]
 r206: [536..537]
 r207: [522..535]
 r208: [531..532]
 r209: [528..530]
 r210: [526..527]
 r211: [524..525]
 r212: [522..523]
 r213: [520..521]
 r214: [507..519]
 r215: [515..516]
 r216: [512..514]
 r217: [510..511]
 r218: [506..509]
 r219: [502..503]
 r220: [499..501]
 r221: [497..498]
 r222: [495..496]
 r223: [493..494]
 r224: [489..490]
 r225: [486..488]
 r226: [484..485]
 r227: [482..483]
 r228: [480..481]
 r229: [476..477]
 r230: [473..475]
 r231: [471..472]
 r232: [469..470]
 r233: [467..468]
 r234: [463..464]
 r235: [460..462]
 r236: [458..459]
 r237: [418..457]
 r238: [453..454]
 r239: [450..452]
 r240: [448..449]
 r241: [446..447]
 r242: [432..445]
 r243: [441..442]
 r244: [438..440]
 r245: [436..437]
 r246: [434..435]
 r247: [432..433]
 r248: [430..431]
 r249: [417..429]
 r250: [425..426]
 r251: [422..424]
 r252: [420..421]
 r253: [416..419]
 r254: [409..413]
 r255: [409..410]
 r256: [261..262]
 r257: [258..260]
 r258: [256..257]
 r259: [254..255]
 r260: [252..253]
 r261: [250..251]
 r262: [247..249]
 r263: [247..248]
 r264: [245..246]
 r265: [243..244]
 r266: [405..406]
 r267: [402..404]
 r268: [400..401]
 r269: [395..399]
 r270: [395..396]
 r271: [376..394]
 r272: [390..391]
 r273: [387..389]
 r274: [385..386]
 r275: [380..384]
 r276: [380..381]
 r277: [378..379]
 r278: [376..377]
 r279: [372..373]
 r280: [369..371]
 r281: [367..368]
 r282: [360..366]
 r283: [362..363]
 r284: [360..361]
 r285: [339..359]
 r286: [355..356]
 r287: [352..354]
 r288: [350..351]
 r289: [343..349]
 r290: [345..346]
 r291: [343..344]
 r292: [341..342]
 r293: [339..340]
 r294: [335..336]
 r295: [332..334]
 r296: [330..331]
 r297: [323..329]
 r298: [325..326]
 r299: [323..324]
 r300: [302..322]
 r301: [318..319]
 r302: [315..317]
 r303: [313..314]
 r304: [306..312]
 r305: [308..309]
 r306: [306..307]
 r307: [304..305]
 r308: [302..303]
 r309: [298..299]
 r310: [295..297]
 r311: [293..294]
 r312: [286..292]
 r313: [288..289]
 r314: [286..287]
 r315: [265..285]
 r316: [281..282]
 r317: [278..280]
 r318: [276..277]
 r319: [269..275]
 r320: [271..272]
 r321: [269..270]
 r322: [267..268]
 r323: [265..266]
 r324: [95..96]
 r325: [92..94]
 r326: [90..91]
 r327: [88..89]
 r328: [86..87]
 r329: [84..85]
 r330: [81..83]
 r331: [81..82]
 r332: [79..80]
 r333: [77..78]
 r334: [239..240]
 r335: [236..238]
 r336: [234..235]
 r337: [229..233]
 r338: [229..230]
 r339: [208..228]
 r340: [224..225]
 r341: [221..223]
 r342: [219..220]
 r343: [212..218]
 r344: [214..215]
 r345: [212..213]
 r346: [210..211]
 r347: [208..209]
 r348: [204..205]
 r349: [201..203]
 r350: [199..200]
 r351: [192..198]
 r352: [194..195]
 r353: [192..193]
 r354: [171..191]
 r355: [187..188]
 r356: [184..186]
 r357: [182..183]
 r358: [175..181]
 r359: [177..178]
 r360: [175..176]
 r361: [173..174]
 r362: [171..172]
 r363: [167..168]
 r364: [164..166]
 r365: [162..163]
 r366: [155..161]
 r367: [157..158]
 r368: [155..156]
 r369: [134..154]
 r370: [150..151]
 r371: [147..149]
 r372: [145..146]
 r373: [138..144]
 r374: [140..141]
 r375: [138..139]
 r376: [136..137]
 r377: [134..135]
 r378: [130..131]
 r379: [127..129]
 r380: [125..126]
 r381: [118..124]
 r382: [120..121]
 r383: [118..119]
 r384: [99..117]
 r385: [113..114]
 r386: [110..112]
 r387: [108..109]
 r388: [103..107]
 r389: [103..104]
 r390: [101..102]
 r391: [99..100]
 r392: [73..74]
 r393: [70..72]
 r394: [68..69]
 r395: [66..67]
 r396: [64..65]
 r397: [60..61]
 r398: [57..59]
 r399: [55..56]
 r400: [53..54]
 r401: [51..52]
 r402: [45..46]
 r403: [42..44]
 r404: [40..41]
 r405: [33..39]
 r406: [35..36]
 r407: [33..34]
 r408: [10..32]
 r409: [28..29]
 r410: [25..27]
 r411: [23..24]
 r412: [16..22]
 r413: [18..19]
 r414: [16..17]
 r415: [14..15]
 r416: [12..13]
 r417: [10..11]
 r418: [2..3]
 r419: [0..1]
 r420: [8..9]
 r421: [889..890]
 r422: [885..887] [881..882]
 r423: [883..884]
 r424: [878..879]
 r425: [872..873]
 r426: [867..868]
 r427: [862..863]
 r428: [864..865]
 r429: [857..859]
 r430: [857..858]
 r431: [851..852]
 r432: [846..847]
 r433: [840..841]
 r434: [835..836]
 r435: [830..831]
 r436: [825..826]
 r437: [814..815]
 r438: [809..810]
 r439: [804..805]
 r440: [799..800]
 r441: [788..789]
 r442: [783..784]
 r443: [775..776]
 r444: [770..771]
 r445: [762..763]
 r446: [757..758]
 r447: [737..738]
 r448: [733..734]
 r449: [730..731]
 r450: [749..750]
 r451: [745..746]
 r452: [743..744]
 r453: [740..742]
 r454: [739..741]
 r455: [728..729]
 r456: [723..724]
 r457: [717..718]
 r458: [715..716]
 r459: [712..713]
 r460: [707..708]
 r461: [699..700]
 r462: [697..698]
 r463: [695..696]
 r464: [690..691]
 r465: [687..688]
 r466: [681..682]
 r467: [677..678]
 r468: [672..673]
 r469: [669..670]
 r470: [663..664]
 r471: [659..660]
 r472: [654..655]
 r473: [651..652]
 r474: [646..647]
 r475: [634..635]
 r476: [630..631]
 r477: [625..626]
 r478: [622..623]
 r479: [617..618]
 r480: [605..606]
 r481: [601..602]
 r482: [596..597]
 r483: [591..592]
 r484: [586..587]
 r485: [579..580]
 r486: [576..577]
 r487: [571..573]
 r488: [570..572]
 r489: [568..569]
 r490: [563..564]
 r491: [555..556]
 r492: [550..551]
 r493: [545..546]
 r494: [540..541]
 r495: [533..534]
 r496: [528..529]
 r497: [517..518]
 r498: [512..513]
 r499: [504..505]
 r500: [499..500]
 r501: [491..492]
 r502: [486..487]
 r503: [478..479]
 r504: [473..474]
 r505: [465..466]
 r506: [460..461]
 r507: [455..456]
 r508: [450..451]
 r509: [443..444]
 r510: [438..439]
 r511: [427..428]
 r512: [422..423]
 r513: [414..415]
 r514: [411..412]
 r515: [263..264]
 r516: [258..259]
 r517: [407..408]
 r518: [402..403]
 r519: [397..398]
 r520: [392..393]
 r521: [387..388]
 r522: [382..383]
 r523: [374..375]
 r524: [369..370]
 r525: [364..365]
 r526: [357..358]
 r527: [352..353]
 r528: [347..348]
 r529: [337..338]
 r530: [332..333]
 r531: [327..328]
 r532: [320..321]
 r533: [315..316]
 r534: [310..311]
 r535: [300..301]
 r536: [295..296]
 r537: [290..291]
 r538: [283..284]
 r539: [278..279]
 r540: [273..274]
 r541: [97..98]
 r542: [92..93]
 r543: [241..242]
 r544: [236..237]
 r545: [231..232]
 r546: [226..227]
 r547: [221..222]
 r548: [216..217]
 r549: [206..207]
 r550: [201..202]
 r551: [196..197]
 r552: [189..190]
 r553: [184..185]
 r554: [179..180]
 r555: [169..170]
 r556: [164..165]
 r557: [159..160]
 r558: [152..153]
 r559: [147..148]
 r560: [142..143]
 r561: [132..133]
 r562: [127..128]
 r563: [122..123]
 r564: [115..116]
 r565: [110..111]
 r566: [105..106]
 r567: [75..76]
 r568: [70..71]
 r569: [62..63]
 r570: [57..58]
 r571: [49..50]
 r572: [47..48]
 r573: [42..43]
 r574: [37..38]
 r575: [30..31]
 r576: [25..26]
 r577: [20..21]
 r579: [860..861]
Compressing live ranges: from 891 to 776 - 87%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [772..773]
 r90: [766..767]
 r91: [764..765]
 r92: [762..763]
 r93: [758..759]
 r94: [756..757]
 r95: [744..755]
 r96: [746..747]
 r97: [744..745]
 r98: [740..741]
 r99: [738..739]
 r100: [736..737]
 r101: [734..735]
 r102: [730..731]
 r103: [728..729]
 r104: [726..727]
 r105: [716..725]
 r106: [722..723]
 r107: [720..721]
 r108: [718..719]
 r109: [716..717]
 r110: [714..715]
 r111: [712..713]
 r112: [708..709]
 r113: [706..707]
 r114: [704..705]
 r115: [694..703]
 r116: [700..701]
 r117: [698..699]
 r118: [696..697]
 r119: [694..695]
 r120: [692..693]
 r121: [690..691]
 r122: [686..687]
 r123: [684..685]
 r124: [682..683]
 r125: [680..681]
 r126: [678..679]
 r127: [674..675]
 r128: [672..673]
 r129: [670..671]
 r130: [668..669]
 r131: [666..667]
 r132: [662..663]
 r133: [660..661]
 r134: [658..659]
 r135: [656..657]
 r136: [654..655]
 r137: [650..651]
 r138: [640..641]
 r139: [636..637]
 r140: [632..633]
 r141: [630..631]
 r142: [628..629]
 r143: [626..627]
 r144: [610..621]
 r145: [618..619]
 r146: [616..617]
 r147: [614..615]
 r148: [612..613]
 r149: [610..611]
 r150: [602..603]
 r151: [600..601]
 r152: [590..599]
 r153: [596..597]
 r154: [594..595]
 r155: [590..591]
 r156: [586..587]
 r157: [584..585]
 r158: [574..583]
 r159: [580..581]
 r160: [578..579]
 r161: [574..575]
 r162: [570..571]
 r163: [568..569]
 r164: [548..567]
 r165: [564..565]
 r166: [562..563]
 r167: [560..561]
 r168: [558..559]
 r169: [556..557]
 r170: [554..555]
 r171: [552..553]
 r172: [548..549]
 r173: [544..545]
 r174: [542..543]
 r175: [522..541]
 r176: [538..539]
 r177: [536..537]
 r178: [534..535]
 r179: [532..533]
 r180: [530..531]
 r181: [528..529]
 r182: [526..527]
 r183: [522..523]
 r184: [518..519]
 r185: [516..517]
 r186: [514..515]
 r187: [504..513]
 r188: [510..511]
 r189: [508..509]
 r190: [506..507]
 r191: [504..505]
 r192: [498..501]
 r193: [498..499]
 r194: [492..493]
 r195: [490..491]
 r196: [488..489]
 r197: [486..487]
 r198: [484..485]
 r199: [480..481]
 r200: [478..479]
 r201: [476..477]
 r202: [442..475]
 r203: [472..473]
 r204: [470..471]
 r205: [468..469]
 r206: [466..467]
 r207: [454..465]
 r208: [462..463]
 r209: [460..461]
 r210: [458..459]
 r211: [456..457]
 r212: [454..455]
 r213: [452..453]
 r214: [442..451]
 r215: [448..449]
 r216: [446..447]
 r217: [444..445]
 r218: [442..443]
 r219: [438..439]
 r220: [436..437]
 r221: [434..435]
 r222: [432..433]
 r223: [430..431]
 r224: [426..427]
 r225: [424..425]
 r226: [422..423]
 r227: [420..421]
 r228: [418..419]
 r229: [414..415]
 r230: [412..413]
 r231: [410..411]
 r232: [408..409]
 r233: [406..407]
 r234: [402..403]
 r235: [400..401]
 r236: [398..399]
 r237: [364..397]
 r238: [394..395]
 r239: [392..393]
 r240: [390..391]
 r241: [388..389]
 r242: [376..387]
 r243: [384..385]
 r244: [382..383]
 r245: [380..381]
 r246: [378..379]
 r247: [376..377]
 r248: [374..375]
 r249: [364..373]
 r250: [370..371]
 r251: [368..369]
 r252: [366..367]
 r253: [364..365]
 r254: [358..361]
 r255: [358..359]
 r256: [230..231]
 r257: [228..229]
 r258: [226..227]
 r259: [224..225]
 r260: [222..223]
 r261: [220..221]
 r262: [218..219]
 r263: [218..219]
 r264: [216..217]
 r265: [214..215]
 r266: [354..355]
 r267: [352..353]
 r268: [350..351]
 r269: [346..349]
 r270: [346..347]
 r271: [330..345]
 r272: [342..343]
 r273: [340..341]
 r274: [338..339]
 r275: [334..337]
 r276: [334..335]
 r277: [332..333]
 r278: [330..331]
 r279: [326..327]
 r280: [324..325]
 r281: [322..323]
 r282: [316..321]
 r283: [318..319]
 r284: [316..317]
 r285: [298..315]
 r286: [312..313]
 r287: [310..311]
 r288: [308..309]
 r289: [302..307]
 r290: [304..305]
 r291: [302..303]
 r292: [300..301]
 r293: [298..299]
 r294: [294..295]
 r295: [292..293]
 r296: [290..291]
 r297: [284..289]
 r298: [286..287]
 r299: [284..285]
 r300: [266..283]
 r301: [280..281]
 r302: [278..279]
 r303: [276..277]
 r304: [270..275]
 r305: [272..273]
 r306: [270..271]
 r307: [268..269]
 r308: [266..267]
 r309: [262..263]
 r310: [260..261]
 r311: [258..259]
 r312: [252..257]
 r313: [254..255]
 r314: [252..253]
 r315: [234..251]
 r316: [248..249]
 r317: [246..247]
 r318: [244..245]
 r319: [238..243]
 r320: [240..241]
 r321: [238..239]
 r322: [236..237]
 r323: [234..235]
 r324: [86..87]
 r325: [84..85]
 r326: [82..83]
 r327: [80..81]
 r328: [78..79]
 r329: [76..77]
 r330: [74..75]
 r331: [74..75]
 r332: [72..73]
 r333: [70..71]
 r334: [210..211]
 r335: [208..209]
 r336: [206..207]
 r337: [202..205]
 r338: [202..203]
 r339: [184..201]
 r340: [198..199]
 r341: [196..197]
 r342: [194..195]
 r343: [188..193]
 r344: [190..191]
 r345: [188..189]
 r346: [186..187]
 r347: [184..185]
 r348: [180..181]
 r349: [178..179]
 r350: [176..177]
 r351: [170..175]
 r352: [172..173]
 r353: [170..171]
 r354: [152..169]
 r355: [166..167]
 r356: [164..165]
 r357: [162..163]
 r358: [156..161]
 r359: [158..159]
 r360: [156..157]
 r361: [154..155]
 r362: [152..153]
 r363: [148..149]
 r364: [146..147]
 r365: [144..145]
 r366: [138..143]
 r367: [140..141]
 r368: [138..139]
 r369: [120..137]
 r370: [134..135]
 r371: [132..133]
 r372: [130..131]
 r373: [124..129]
 r374: [126..127]
 r375: [124..125]
 r376: [122..123]
 r377: [120..121]
 r378: [116..117]
 r379: [114..115]
 r380: [112..113]
 r381: [106..111]
 r382: [108..109]
 r383: [106..107]
 r384: [90..105]
 r385: [102..103]
 r386: [100..101]
 r387: [98..99]
 r388: [94..97]
 r389: [94..95]
 r390: [92..93]
 r391: [90..91]
 r392: [66..67]
 r393: [64..65]
 r394: [62..63]
 r395: [60..61]
 r396: [58..59]
 r397: [54..55]
 r398: [52..53]
 r399: [50..51]
 r400: [48..49]
 r401: [46..47]
 r402: [40..41]
 r403: [38..39]
 r404: [36..37]
 r405: [30..35]
 r406: [32..33]
 r407: [30..31]
 r408: [10..29]
 r409: [26..27]
 r410: [24..25]
 r411: [22..23]
 r412: [16..21]
 r413: [18..19]
 r414: [16..17]
 r415: [14..15]
 r416: [12..13]
 r417: [10..11]
 r418: [2..3]
 r419: [0..1]
 r420: [8..9]
 r421: [774..775]
 r422: [772..773] [768..769]
 r423: [770..771]
 r424: [766..767]
 r425: [760..761]
 r426: [756..757]
 r427: [752..753]
 r428: [754..755]
 r429: [748..749]
 r430: [748..749]
 r431: [742..743]
 r432: [738..739]
 r433: [732..733]
 r434: [728..729]
 r435: [724..725]
 r436: [720..721]
 r437: [710..711]
 r438: [706..707]
 r439: [702..703]
 r440: [698..699]
 r441: [688..689]
 r442: [684..685]
 r443: [676..677]
 r444: [672..673]
 r445: [664..665]
 r446: [660..661]
 r447: [642..643]
 r448: [638..639]
 r449: [636..637]
 r450: [652..653]
 r451: [648..649]
 r452: [646..647]
 r453: [644..645]
 r454: [644..645]
 r455: [634..635]
 r456: [630..631]
 r457: [624..625]
 r458: [622..623]
 r459: [620..621]
 r460: [616..617]
 r461: [608..609]
 r462: [606..607]
 r463: [604..605]
 r464: [600..601]
 r465: [598..599]
 r466: [592..593]
 r467: [588..589]
 r468: [584..585]
 r469: [582..583]
 r470: [576..577]
 r471: [572..573]
 r472: [568..569]
 r473: [566..567]
 r474: [562..563]
 r475: [550..551]
 r476: [546..547]
 r477: [542..543]
 r478: [540..541]
 r479: [536..537]
 r480: [524..525]
 r481: [520..521]
 r482: [516..517]
 r483: [512..513]
 r484: [508..509]
 r485: [502..503]
 r486: [500..501]
 r487: [496..497]
 r488: [496..497]
 r489: [494..495]
 r490: [490..491]
 r491: [482..483]
 r492: [478..479]
 r493: [474..475]
 r494: [470..471]
 r495: [464..465]
 r496: [460..461]
 r497: [450..451]
 r498: [446..447]
 r499: [440..441]
 r500: [436..437]
 r501: [428..429]
 r502: [424..425]
 r503: [416..417]
 r504: [412..413]
 r505: [404..405]
 r506: [400..401]
 r507: [396..397]
 r508: [392..393]
 r509: [386..387]
 r510: [382..383]
 r511: [372..373]
 r512: [368..369]
 r513: [362..363]
 r514: [360..361]
 r515: [232..233]
 r516: [228..229]
 r517: [356..357]
 r518: [352..353]
 r519: [348..349]
 r520: [344..345]
 r521: [340..341]
 r522: [336..337]
 r523: [328..329]
 r524: [324..325]
 r525: [320..321]
 r526: [314..315]
 r527: [310..311]
 r528: [306..307]
 r529: [296..297]
 r530: [292..293]
 r531: [288..289]
 r532: [282..283]
 r533: [278..279]
 r534: [274..275]
 r535: [264..265]
 r536: [260..261]
 r537: [256..257]
 r538: [250..251]
 r539: [246..247]
 r540: [242..243]
 r541: [88..89]
 r542: [84..85]
 r543: [212..213]
 r544: [208..209]
 r545: [204..205]
 r546: [200..201]
 r547: [196..197]
 r548: [192..193]
 r549: [182..183]
 r550: [178..179]
 r551: [174..175]
 r552: [168..169]
 r553: [164..165]
 r554: [160..161]
 r555: [150..151]
 r556: [146..147]
 r557: [142..143]
 r558: [136..137]
 r559: [132..133]
 r560: [128..129]
 r561: [118..119]
 r562: [114..115]
 r563: [110..111]
 r564: [104..105]
 r565: [100..101]
 r566: [96..97]
 r567: [68..69]
 r568: [64..65]
 r569: [56..57]
 r570: [52..53]
 r571: [44..45]
 r572: [42..43]
 r573: [38..39]
 r574: [34..35]
 r575: [28..29]
 r576: [24..25]
 r577: [20..21]
 r579: [750..751]

********** Assignment #1: **********

	 Assigning to 579 (cl=GENERAL_REGS, orig=429, freq=3, tfirst=579, tfreq=3)...
	   Assign 0 to reload r579 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 23
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 37
changing reg in insn 47
changing reg in insn 42
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 79
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 109
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 204
changing reg in insn 205
changing reg in insn 159
changing reg in insn 160
changing reg in insn 194
changing reg in insn 196
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 257
changing reg in insn 260
changing reg in insn 268
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 265
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 280
changing reg in insn 280
changing reg in insn 280
changing reg in insn 288
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 284
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 293
changing reg in insn 293
changing reg in insn 293
changing reg in insn 301
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 300
changing reg in insn 301
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 306
changing reg in insn 306
changing reg in insn 306
changing reg in insn 320
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 314
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 316
changing reg in insn 319
changing reg in insn 320
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 325
changing reg in insn 325
changing reg in insn 325
changing reg in insn 339
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 330
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 332
changing reg in insn 332
changing reg in insn 333
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 338
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 342
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 352
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 350
changing reg in insn 350
changing reg in insn 351
changing reg in insn 351
changing reg in insn 355
changing reg in insn 358
changing reg in insn 361
changing reg in insn 360
changing reg in insn 361
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 378
changing reg in insn 382
changing reg in insn 383
changing reg in insn 383
changing reg in insn 385
changing reg in insn 385
changing reg in insn 386
changing reg in insn 386
changing reg in insn 409
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 391
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 398
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 400
changing reg in insn 400
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 411
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 408
changing reg in insn 412
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 422
changing reg in insn 422
changing reg in insn 423
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 425
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 435
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 442
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 445
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 453
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 477
changing reg in insn 456
changing reg in insn 457
changing reg in insn 457
changing reg in insn 459
changing reg in insn 459
changing reg in insn 460
changing reg in insn 460
changing reg in insn 461
changing reg in insn 461
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 466
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 468
changing reg in insn 469
changing reg in insn 470
changing reg in insn 470
changing reg in insn 479
changing reg in insn 472
changing reg in insn 473
changing reg in insn 473
changing reg in insn 475
changing reg in insn 475
changing reg in insn 476
changing reg in insn 476
changing reg in insn 480
changing reg in insn 494
changing reg in insn 497
changing reg in insn 496
changing reg in insn 497
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 506
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 508
changing reg in insn 508
changing reg in insn 509
changing reg in insn 509
changing reg in insn 510
changing reg in insn 511
changing reg in insn 512
changing reg in insn 513
changing reg in insn 513
changing reg in insn 514
changing reg in insn 518
changing reg in insn 519
changing reg in insn 519
changing reg in insn 521
changing reg in insn 521
changing reg in insn 522
changing reg in insn 522
changing reg in insn 525
changing reg in insn 524
changing reg in insn 525
changing reg in insn 525
changing reg in insn 536
changing reg in insn 527
changing reg in insn 528
changing reg in insn 528
changing reg in insn 530
changing reg in insn 530
changing reg in insn 531
changing reg in insn 531
changing reg in insn 533
changing reg in insn 534
changing reg in insn 535
changing reg in insn 535
changing reg in insn 536
changing reg in insn 538
changing reg in insn 539
changing reg in insn 539
changing reg in insn 541
changing reg in insn 541
changing reg in insn 542
changing reg in insn 542
changing reg in insn 544
changing reg in insn 545
changing reg in insn 545
changing reg in insn 546
changing reg in insn 558
changing reg in insn 548
changing reg in insn 549
changing reg in insn 549
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 552
changing reg in insn 556
changing reg in insn 554
changing reg in insn 555
changing reg in insn 555
changing reg in insn 556
changing reg in insn 556
changing reg in insn 557
changing reg in insn 557
changing reg in insn 558
changing reg in insn 560
changing reg in insn 561
changing reg in insn 561
changing reg in insn 563
changing reg in insn 563
changing reg in insn 564
changing reg in insn 564
changing reg in insn 566
changing reg in insn 567
changing reg in insn 567
changing reg in insn 568
changing reg in insn 580
changing reg in insn 570
changing reg in insn 571
changing reg in insn 571
changing reg in insn 573
changing reg in insn 573
changing reg in insn 574
changing reg in insn 574
changing reg in insn 578
changing reg in insn 576
changing reg in insn 577
changing reg in insn 577
changing reg in insn 578
changing reg in insn 578
changing reg in insn 579
changing reg in insn 579
changing reg in insn 580
changing reg in insn 582
changing reg in insn 583
changing reg in insn 583
changing reg in insn 585
changing reg in insn 585
changing reg in insn 586
changing reg in insn 586
changing reg in insn 588
changing reg in insn 589
changing reg in insn 589
changing reg in insn 590
changing reg in insn 602
changing reg in insn 592
changing reg in insn 593
changing reg in insn 593
changing reg in insn 595
changing reg in insn 595
changing reg in insn 596
changing reg in insn 596
changing reg in insn 600
changing reg in insn 598
changing reg in insn 599
changing reg in insn 599
changing reg in insn 600
changing reg in insn 600
changing reg in insn 601
changing reg in insn 601
changing reg in insn 602
changing reg in insn 612
changing reg in insn 613
changing reg in insn 613
changing reg in insn 615
changing reg in insn 615
changing reg in insn 616
changing reg in insn 616
changing reg in insn 617
changing reg in insn 617
changing reg in insn 618
changing reg in insn 618
changing reg in insn 619
changing reg in insn 620
changing reg in insn 621
changing reg in insn 622
changing reg in insn 622
changing reg in insn 623
changing reg in insn 627
changing reg in insn 628
changing reg in insn 628
changing reg in insn 630
changing reg in insn 630
changing reg in insn 631
changing reg in insn 631
changing reg in insn 634
changing reg in insn 633
changing reg in insn 634
changing reg in insn 634
changing reg in insn 646
changing reg in insn 636
changing reg in insn 637
changing reg in insn 637
changing reg in insn 639
changing reg in insn 639
changing reg in insn 640
changing reg in insn 640
changing reg in insn 644
changing reg in insn 642
changing reg in insn 643
changing reg in insn 643
changing reg in insn 644
changing reg in insn 644
changing reg in insn 645
changing reg in insn 645
changing reg in insn 646
changing reg in insn 648
changing reg in insn 649
changing reg in insn 649
changing reg in insn 651
changing reg in insn 651
changing reg in insn 652
changing reg in insn 652
changing reg in insn 654
changing reg in insn 655
changing reg in insn 655
changing reg in insn 656
changing reg in insn 668
changing reg in insn 658
changing reg in insn 659
changing reg in insn 659
changing reg in insn 661
changing reg in insn 661
changing reg in insn 662
changing reg in insn 662
changing reg in insn 666
changing reg in insn 664
changing reg in insn 665
changing reg in insn 665
changing reg in insn 666
changing reg in insn 666
changing reg in insn 667
changing reg in insn 667
changing reg in insn 668
changing reg in insn 670
changing reg in insn 671
changing reg in insn 671
changing reg in insn 673
changing reg in insn 673
changing reg in insn 674
changing reg in insn 674
changing reg in insn 676
changing reg in insn 677
changing reg in insn 677
changing reg in insn 678
changing reg in insn 690
changing reg in insn 680
changing reg in insn 681
changing reg in insn 681
changing reg in insn 683
changing reg in insn 683
changing reg in insn 684
changing reg in insn 684
changing reg in insn 688
changing reg in insn 686
changing reg in insn 687
changing reg in insn 687
changing reg in insn 688
changing reg in insn 688
changing reg in insn 689
changing reg in insn 689
changing reg in insn 690
changing reg in insn 692
changing reg in insn 693
changing reg in insn 693
changing reg in insn 695
changing reg in insn 695
changing reg in insn 696
changing reg in insn 696
changing reg in insn 698
changing reg in insn 699
changing reg in insn 699
changing reg in insn 700
changing reg in insn 711
changing reg in insn 702
changing reg in insn 703
changing reg in insn 703
changing reg in insn 705
changing reg in insn 705
changing reg in insn 706
changing reg in insn 706
changing reg in insn 708
changing reg in insn 709
changing reg in insn 710
changing reg in insn 710
changing reg in insn 711
changing reg in insn 719
changing reg in insn 720
changing reg in insn 720
changing reg in insn 722
changing reg in insn 722
changing reg in insn 723
changing reg in insn 723
changing reg in insn 724
changing reg in insn 724
changing reg in insn 725
changing reg in insn 729
changing reg in insn 730
changing reg in insn 730
changing reg in insn 732
changing reg in insn 732
changing reg in insn 733
changing reg in insn 733
changing reg in insn 734
changing reg in insn 734
changing reg in insn 735
changing reg in insn 742
changing reg in insn 743
changing reg in insn 743
changing reg in insn 745
changing reg in insn 745
changing reg in insn 746
changing reg in insn 746
changing reg in insn 748
changing reg in insn 749
changing reg in insn 749
changing reg in insn 750
changing reg in insn 763
changing reg in insn 752
changing reg in insn 753
changing reg in insn 753
changing reg in insn 755
changing reg in insn 755
changing reg in insn 756
changing reg in insn 756
changing reg in insn 760
changing reg in insn 758
changing reg in insn 759
changing reg in insn 759
changing reg in insn 760
changing reg in insn 760
changing reg in insn 761
changing reg in insn 761
changing reg in insn 762
changing reg in insn 762
changing reg in insn 763
changing reg in insn 776
changing reg in insn 779
changing reg in insn 779
changing reg in insn 783
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 23
changing reg in insn 22
changing reg in insn 21
changing reg in insn 26
changing reg in insn 24
changing reg in insn 23
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 41
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 158
changing reg in insn 159
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 203
changing reg in insn 204
changing reg in insn 208
changing reg in insn 209
changing reg in insn 227
changing reg in insn 228
changing reg in insn 244
changing reg in insn 246
changing reg in insn 245
changing reg in insn 247
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 257
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 264
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 276
changing reg in insn 277
changing reg in insn 279
changing reg in insn 280
changing reg in insn 281
changing reg in insn 282
changing reg in insn 286
changing reg in insn 287
changing reg in insn 289
changing reg in insn 290
changing reg in insn 292
changing reg in insn 293
changing reg in insn 294
changing reg in insn 295
changing reg in insn 299
changing reg in insn 300
changing reg in insn 302
changing reg in insn 303
changing reg in insn 305
changing reg in insn 306
changing reg in insn 307
changing reg in insn 308
changing reg in insn 310
changing reg in insn 318
changing reg in insn 319
changing reg in insn 321
changing reg in insn 322
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 329
changing reg in insn 337
changing reg in insn 338
changing reg in insn 340
changing reg in insn 341
changing reg in insn 343
changing reg in insn 346
changing reg in insn 347
changing reg in insn 349
changing reg in insn 357
changing reg in insn 358
changing reg in insn 359
changing reg in insn 360
changing reg in insn 364
changing reg in insn 366
changing reg in insn 365
changing reg in insn 367
changing reg in insn 371
changing reg in insn 372
changing reg in insn 374
changing reg in insn 381
changing reg in insn 382
changing reg in insn 384
changing reg in insn 387
changing reg in insn 388
changing reg in insn 390
changing reg in insn 394
changing reg in insn 395
changing reg in insn 397
changing reg in insn 403
changing reg in insn 404
changing reg in insn 406
changing reg in insn 418
changing reg in insn 419
changing reg in insn 421
changing reg in insn 428
changing reg in insn 429
changing reg in insn 431
changing reg in insn 438
changing reg in insn 439
changing reg in insn 441
changing reg in insn 449
changing reg in insn 450
changing reg in insn 452
changing reg in insn 455
changing reg in insn 456
changing reg in insn 458
changing reg in insn 462
changing reg in insn 463
changing reg in insn 465
changing reg in insn 471
changing reg in insn 472
changing reg in insn 474
changing reg in insn 493
changing reg in insn 494
changing reg in insn 495
changing reg in insn 496
changing reg in insn 502
changing reg in insn 503
changing reg in insn 505
changing reg in insn 517
changing reg in insn 518
changing reg in insn 520
changing reg in insn 523
changing reg in insn 524
changing reg in insn 526
changing reg in insn 527
changing reg in insn 529
changing reg in insn 532
changing reg in insn 533
changing reg in insn 537
changing reg in insn 538
changing reg in insn 540
changing reg in insn 543
changing reg in insn 544
changing reg in insn 547
changing reg in insn 548
changing reg in insn 550
changing reg in insn 553
changing reg in insn 554
changing reg in insn 559
changing reg in insn 560
changing reg in insn 562
changing reg in insn 565
changing reg in insn 566
changing reg in insn 569
changing reg in insn 570
changing reg in insn 572
changing reg in insn 575
changing reg in insn 576
changing reg in insn 581
changing reg in insn 582
changing reg in insn 584
changing reg in insn 587
changing reg in insn 588
changing reg in insn 591
changing reg in insn 592
changing reg in insn 594
changing reg in insn 597
changing reg in insn 598
changing reg in insn 611
changing reg in insn 612
changing reg in insn 614
changing reg in insn 626
changing reg in insn 627
changing reg in insn 629
changing reg in insn 632
changing reg in insn 633
changing reg in insn 635
changing reg in insn 636
changing reg in insn 638
changing reg in insn 641
changing reg in insn 642
changing reg in insn 647
changing reg in insn 648
changing reg in insn 650
changing reg in insn 653
changing reg in insn 654
changing reg in insn 657
changing reg in insn 658
changing reg in insn 660
changing reg in insn 663
changing reg in insn 664
changing reg in insn 669
changing reg in insn 670
changing reg in insn 672
changing reg in insn 675
changing reg in insn 676
changing reg in insn 679
changing reg in insn 680
changing reg in insn 682
changing reg in insn 685
changing reg in insn 686
changing reg in insn 691
changing reg in insn 692
changing reg in insn 694
changing reg in insn 697
changing reg in insn 698
changing reg in insn 701
changing reg in insn 702
changing reg in insn 704
changing reg in insn 707
changing reg in insn 708
changing reg in insn 718
changing reg in insn 719
changing reg in insn 721
changing reg in insn 728
changing reg in insn 729
changing reg in insn 731
changing reg in insn 735
changing reg in insn 736
changing reg in insn 741
changing reg in insn 742
changing reg in insn 744
changing reg in insn 747
changing reg in insn 748
changing reg in insn 751
changing reg in insn 752
changing reg in insn 754
changing reg in insn 757
changing reg in insn 758
deleting insn with uid = 411.
deleting insn with uid = 479.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 167.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 190.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 214.
verify found no changes in insn with uid = 220.
verify found no changes in insn with uid = 233.
verify found no changes in insn with uid = 239.
verify found no changes in insn with uid = 243.
verify found no changes in insn with uid = 248.
verify found no changes in insn with uid = 285.
verify found no changes in insn with uid = 298.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 336.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 368.
verify found no changes in insn with uid = 413.
verify found no changes in insn with uid = 481.
verify found no changes in insn with uid = 487.
verify found no changes in insn with uid = 489.


int read_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Endian_Check*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={395d,372u} r1={118d,89u,37e} r2={78d,48u,17e} r3={5d,5u} r4={41d,11u,2e} r5={61d,31u} r6={1d,230u} r7={1d,84u} r8={30d} r9={30d} r10={30d} r11={30d} r12={30d} r13={30d} r14={30d} r15={30d} r16={22e} r17={216d,28u} r18={30d} r19={30d} r20={1d,1u,33e} r21={31d} r22={31d} r23={31d} r24={31d} r25={31d} r26={31d} r27={31d} r28={31d} r29={30d} r30={30d} r31={30d} r32={30d} r33={30d} r34={30d} r35={30d} r36={30d} r37={31d,1u} r38={31d,1u} r39={30d} r40={30d} r45={30d} r46={30d} r47={30d} r48={30d} r49={30d} r50={30d} r51={30d} r52={30d} r53={30d} r54={30d} r55={30d} r56={30d} r57={30d} r58={30d} r59={30d} r60={30d} r61={30d} r62={30d} r63={30d} r64={30d} r65={30d} r66={30d} r67={30d} r68={30d} r69={30d} r70={30d} r71={30d} r72={30d} r73={30d} r74={30d} r75={30d} r76={30d} r77={30d} r78={30d} r79={30d} r80={30d} 
;;    total ref usage 3919{2907d,901u,111e} in 674{644 regular + 30 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 771 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:463 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              53 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 420
(code_label 771 11 12 3 121 "" [1 uses])
(note 12 771 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) fmtext_o.cpp:463 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:SI 0 ax [orig:87 D.6737 ] [87])
        (mem:SI (reg/f:DI 0 ax [420]) [0 *fid_22(D)+0 S4 A32])) fmtext_o.cpp:463 90 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.6737 ] [88])
                (plus:SI (reg:SI 0 ax [orig:87 D.6737 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:463 217 {*addsi_1}
     (nil))
(insn 16 15 17 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.6737 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))) fmtext_o.cpp:463 7 {*cmpsi_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 774)
            (pc))) fmtext_o.cpp:463 612 {*jcc_1}
     (nil)
 -> 774)
;;  succ:       54
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 421 422 423 424
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 1 dx [orig:89 D.6738 ] [89])
        (sign_extend:DI (reg:SI 0 ax [421]))) fmtext_o.cpp:464 142 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 4 (set (reg:DI 0 ax [422])
        (reg:DI 1 dx [orig:89 D.6738 ] [89])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg:DI 0 ax [422])
                (ashift:DI (reg:DI 0 ax [422])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 512 {*ashldi3_1}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 0 ax [422])
                (plus:DI (reg:DI 0 ax [422])
                    (reg:DI 1 dx [orig:89 D.6738 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 D.6738 ] [89])
            (const_int 9 [0x9]))
        (nil)))
(insn 24 23 25 4 (parallel [
            (set (reg:DI 0 ax [423])
                (ashift:DI (reg:DI 0 ax [422])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 512 {*ashldi3_1}
     (nil))
(insn 25 24 26 4 (set (reg:DI 0 ax [422])
        (reg:DI 0 ax [423])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 1 dx [orig:90 D.6738 ] [90])
        (reg:DI 0 ax [422])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6739 ] [91])
                (plus:DI (reg/f:DI 0 ax [424])
                    (reg:DI 1 dx [orig:90 D.6738 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6738 ] [90]))
        (nil)))
(insn 29 28 30 4 (set (reg:SI 0 ax [orig:92 D.6737 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:91 D.6739 ] [91])
                (const_int 20 [0x14])) [0 _28->file_type+0 S4 A32])) fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.6737 ] [92])
            (const_int 0 [0]))) fmtext_o.cpp:464 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 768)
            (pc))) fmtext_o.cpp:464 612 {*jcc_1}
     (nil)
 -> 768)
;;  succ:       5 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 97 98 99 100 101 425 426 427 428 429 430 431 432
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg:SI 0 ax [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:466 90 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 0 ax [orig:93 D.6738 ] [93])
        (sign_extend:DI (reg:SI 0 ax [425]))) fmtext_o.cpp:466 142 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 5 (parallel [
            (set (reg:DI 1 dx [orig:94 D.6738 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6738 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 512 {*ashldi3_1}
     (nil))
(insn 36 35 37 5 (set (reg/f:DI 0 ax [426])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (parallel [
            (set (reg/f:DI 3 bx [orig:95 D.6740 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 D.6738 ] [94])
                    (reg/f:DI 0 ax [426])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.6738 ] [94]))
        (nil)))
(insn 38 37 39 5 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:466 90 {*movsi_internal}
     (nil))
(insn 39 38 813 5 (set (reg:DI 0 ax [427])
        (sign_extend:DI (reg:SI 0 ax [428]))) fmtext_o.cpp:466 142 {*extendsidi2_rex64}
     (nil))
(insn 813 39 40 5 (set (reg:DI 0 ax [429])
        (reg:DI 0 ax [427])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 40 813 814 5 (parallel [
            (set (reg:DI 0 ax [429])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 512 {*ashldi3_1}
     (nil))
(insn 814 40 41 5 (set (reg:DI 1 dx [429])
        (reg:DI 0 ax [429])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 41 814 42 5 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 file+0 S8 A64])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.6741 ] [96])
                (plus:DI (reg/f:DI 0 ax [430])
                    (reg:DI 1 dx [429])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 file+0 S8 A64])
            (reg:DI 1 dx [429]))
        (nil)))
(insn 43 42 44 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f93b22b13f0 *.LC15>)) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 D.6741 ] [96])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(call_insn 45 44 46 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f93b2574510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:466 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 46 45 47 5 (set (reg/f:DI 0 ax [orig:97 D.6742 ] [97])
        (reg:DI 0 ax)) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:95 D.6740 ] [95]) [0 *_33+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.6742 ] [97])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:SI 0 ax [431])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:468 90 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 0 ax [orig:98 D.6738 ] [98])
        (sign_extend:DI (reg:SI 0 ax [431]))) fmtext_o.cpp:468 142 {*extendsidi2_rex64}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 1 dx [orig:99 D.6738 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 D.6738 ] [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:468 512 {*ashldi3_1}
     (nil))
(insn 51 50 52 5 (set (reg/f:DI 0 ax [432])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:468 89 {*movdi_internal}
     (nil))
(insn 52 51 53 5 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.6740 ] [100])
                (plus:DI (reg/f:DI 0 ax [432])
                    (reg:DI 1 dx [orig:99 D.6738 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:468 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.6738 ] [99]))
        (nil)))
(insn 53 52 54 5 (set (reg/f:DI 0 ax [orig:101 D.6742 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [orig:100 D.6740 ] [100]) [0 *_42+0 S8 A64])) fmtext_o.cpp:468 89 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:101 D.6742 ] [101])
            (const_int 0 [0]))) fmtext_o.cpp:468 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 55 54 56 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) fmtext_o.cpp:468 612 {*jcc_1}
     (nil)
 -> 62)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 56 55 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f93b22b1480 *.LC16>)) fmtext_o.cpp:469 89 {*movdi_internal}
     (nil))
(call_insn 58 57 59 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:469 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 59 58 60 6 (set (reg:SI 5 di)
        (const_int 4 [0x4])) fmtext_o.cpp:470 90 {*movsi_internal}
     (nil))
(call_insn 60 59 61 6 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f93b27d2ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:470 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 61 60 62)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 62 61 63 7 94 "" [1 uses])
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:473 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 65 64 66 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) fmtext_o.cpp:473 612 {*jcc_1}
     (nil)
 -> 95)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 103 104 105 106 107 108 109 110 111 433 434 435 436
(note 66 65 67 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 8 (set (reg:SI 0 ax [433])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:474 90 {*movsi_internal}
     (nil))
(insn 68 67 69 8 (set (reg:DI 0 ax [orig:102 D.6738 ] [102])
        (sign_extend:DI (reg:SI 0 ax [433]))) fmtext_o.cpp:474 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 8 (parallel [
            (set (reg:DI 1 dx [orig:103 D.6738 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6738 ] [102])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 8 (set (reg/f:DI 0 ax [434])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 71 70 72 8 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6740 ] [104])
                (plus:DI (reg/f:DI 0 ax [434])
                    (reg:DI 1 dx [orig:103 D.6738 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.6738 ] [103]))
        (nil)))
(insn 72 71 73 8 (set (reg/f:DI 1 dx [orig:105 D.6742 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [orig:104 D.6740 ] [104]) [0 *_46+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 73 72 74 8 (set (reg:SI 0 ax [435])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:474 90 {*movsi_internal}
     (nil))
(insn 74 73 75 8 (set (reg:DI 0 ax [orig:106 D.6738 ] [106])
        (sign_extend:DI (reg:SI 0 ax [435]))) fmtext_o.cpp:474 142 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 8 (parallel [
            (set (reg:DI 2 cx [orig:107 D.6738 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.6738 ] [106])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 512 {*ashldi3_1}
     (nil))
(insn 76 75 77 8 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 77 76 78 8 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.6743 ] [108])
                (plus:DI (reg/f:DI 0 ax [436])
                    (reg:DI 2 cx [orig:107 D.6738 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:107 D.6738 ] [107]))
        (nil)))
(insn 78 77 79 8 (set (reg/f:DI 0 ax [orig:109 D.6744 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [orig:108 D.6743 ] [108]) [0 *_51+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 79 78 80 8 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:105 D.6742 ] [105])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 80 79 81 8 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 81 80 82 8 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:109 D.6744 ] [109])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(call_insn 83 82 84 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:474 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 84 83 85 8 (set (reg:DI 0 ax [orig:110 D.6738 ] [110])
        (reg:DI 0 ax)) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 85 84 86 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:110 D.6738 ] [110])
            (const_int 1 [0x1]))) fmtext_o.cpp:474 8 {*cmpdi_1}
     (nil))
(insn 86 85 87 8 (set (reg:QI 0 ax [orig:111 D.6745 ] [111])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:474 607 {*setcc_qi}
     (nil))
(insn 87 86 88 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:111 D.6745 ] [111])
            (const_int 0 [0]))) fmtext_o.cpp:474 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 88 87 89 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) fmtext_o.cpp:474 612 {*jcc_1}
     (nil)
 -> 125)
;;  succ:       9 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 89 88 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f93b22b1510 *.LC17>)) fmtext_o.cpp:475 89 {*movdi_internal}
     (nil))
(call_insn 91 90 92 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:475 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 92 91 93 9 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:476 90 {*movsi_internal}
     (nil))
(call_insn 93 92 94 9 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f93b27d2ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:476 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 95)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 113 114 115 116 117 118 119 120 121 437 438 439 440
(code_label 95 94 96 10 95 "" [1 uses])
(note 96 95 97 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 10 (set (reg:SI 0 ax [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:479 90 {*movsi_internal}
     (nil))
(insn 98 97 99 10 (set (reg:DI 0 ax [orig:112 D.6738 ] [112])
        (sign_extend:DI (reg:SI 0 ax [437]))) fmtext_o.cpp:479 142 {*extendsidi2_rex64}
     (nil))
(insn 99 98 100 10 (parallel [
            (set (reg:DI 1 dx [orig:113 D.6738 ] [113])
                (ashift:DI (reg:DI 0 ax [orig:112 D.6738 ] [112])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 512 {*ashldi3_1}
     (nil))
(insn 100 99 101 10 (set (reg/f:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 101 100 102 10 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.6740 ] [114])
                (plus:DI (reg/f:DI 0 ax [438])
                    (reg:DI 1 dx [orig:113 D.6738 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:113 D.6738 ] [113]))
        (nil)))
(insn 102 101 103 10 (set (reg/f:DI 1 dx [orig:115 D.6742 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [orig:114 D.6740 ] [114]) [0 *_61+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:SI 0 ax [439])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:479 90 {*movsi_internal}
     (nil))
(insn 104 103 105 10 (set (reg:DI 0 ax [orig:116 D.6738 ] [116])
        (sign_extend:DI (reg:SI 0 ax [439]))) fmtext_o.cpp:479 142 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 10 (parallel [
            (set (reg:DI 2 cx [orig:117 D.6738 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 D.6738 ] [116])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 512 {*ashldi3_1}
     (nil))
(insn 106 105 107 10 (set (reg/f:DI 0 ax [440])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 107 106 108 10 (parallel [
            (set (reg/f:DI 0 ax [orig:118 D.6743 ] [118])
                (plus:DI (reg/f:DI 0 ax [440])
                    (reg:DI 2 cx [orig:117 D.6738 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:117 D.6738 ] [117]))
        (nil)))
(insn 108 107 109 10 (set (reg/f:DI 0 ax [orig:119 D.6744 ] [119])
        (mem/f:DI (reg/f:DI 0 ax [orig:118 D.6743 ] [118]) [0 *_65+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 109 108 110 10 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:115 D.6742 ] [115])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 110 109 111 10 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 111 110 112 10 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:119 D.6744 ] [119])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(call_insn 113 112 114 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:479 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 114 113 115 10 (set (reg:DI 0 ax [orig:120 D.6738 ] [120])
        (reg:DI 0 ax)) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:120 D.6738 ] [120])
            (const_int 1 [0x1]))) fmtext_o.cpp:479 8 {*cmpdi_1}
     (nil))
(insn 116 115 117 10 (set (reg:QI 0 ax [orig:121 D.6745 ] [121])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:479 607 {*setcc_qi}
     (nil))
(insn 117 116 118 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:121 D.6745 ] [121])
            (const_int 0 [0]))) fmtext_o.cpp:479 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 118 117 119 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) fmtext_o.cpp:479 612 {*jcc_1}
     (nil)
 -> 125)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 119 118 120 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f93b23383f0 *.LC29>)) fmtext_o.cpp:480 89 {*movdi_internal}
     (nil))
(call_insn 121 120 122 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:480 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 122 121 123 11 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:481 90 {*movsi_internal}
     (nil))
(call_insn 123 122 124 11 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f93b27d2ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:481 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 124 123 125)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123 124 125 126 441 442
(code_label 125 124 126 12 96 "" [2 uses])
(note 126 125 127 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 12 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:486 90 {*movsi_internal}
     (nil))
(insn 128 127 129 12 (set (reg:DI 0 ax [orig:122 D.6738 ] [122])
        (sign_extend:DI (reg:SI 0 ax [441]))) fmtext_o.cpp:486 142 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 12 (parallel [
            (set (reg:DI 1 dx [orig:123 D.6738 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:122 D.6738 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:486 512 {*ashldi3_1}
     (nil))
(insn 130 129 131 12 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:486 89 {*movdi_internal}
     (nil))
(insn 131 130 132 12 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.6743 ] [124])
                (plus:DI (reg/f:DI 0 ax [442])
                    (reg:DI 1 dx [orig:123 D.6738 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:486 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.6738 ] [123]))
        (nil)))
(insn 132 131 133 12 (set (reg/f:DI 0 ax [orig:125 D.6744 ] [125])
        (mem/f:DI (reg/f:DI 0 ax [orig:124 D.6743 ] [124]) [0 *_75+0 S8 A64])) fmtext_o.cpp:486 89 {*movdi_internal}
     (nil))
(insn 133 132 134 12 (set (reg:HI 0 ax [orig:126 D.6746 ] [126])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:125 D.6744 ] [125])
                (const_int 26 [0x1a])) [0 _76->status.number+0 S2 A16])) fmtext_o.cpp:486 92 {*movhi_internal}
     (nil))
(insn 134 133 135 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:126 D.6746 ] [126])
            (const_int 69 [0x45]))) fmtext_o.cpp:486 6 {*cmphi_1}
     (nil))
(jump_insn 135 134 136 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 156)
            (pc))) fmtext_o.cpp:486 612 {*jcc_1}
     (nil)
 -> 156)
;;  succ:       15
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 129 130 131 443 444
(note 136 135 137 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 138 13 (set (reg:SI 0 ax [443])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:487 90 {*movsi_internal}
     (nil))
(insn 138 137 139 13 (set (reg:DI 0 ax [orig:127 D.6738 ] [127])
        (sign_extend:DI (reg:SI 0 ax [443]))) fmtext_o.cpp:487 142 {*extendsidi2_rex64}
     (nil))
(insn 139 138 140 13 (parallel [
            (set (reg:DI 1 dx [orig:128 D.6738 ] [128])
                (ashift:DI (reg:DI 0 ax [orig:127 D.6738 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:487 512 {*ashldi3_1}
     (nil))
(insn 140 139 141 13 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:487 89 {*movdi_internal}
     (nil))
(insn 141 140 142 13 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.6743 ] [129])
                (plus:DI (reg/f:DI 0 ax [444])
                    (reg:DI 1 dx [orig:128 D.6738 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:487 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:128 D.6738 ] [128]))
        (nil)))
(insn 142 141 143 13 (set (reg/f:DI 0 ax [orig:130 D.6744 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [orig:129 D.6743 ] [129]) [0 *_80+0 S8 A64])) fmtext_o.cpp:487 89 {*movdi_internal}
     (nil))
(insn 143 142 144 13 (set (reg:HI 0 ax [orig:131 D.6746 ] [131])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:130 D.6744 ] [130])
                (const_int 26 [0x1a])) [0 _81->status.number+0 S2 A16])) fmtext_o.cpp:487 92 {*movhi_internal}
     (nil))
(insn 144 143 145 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:131 D.6746 ] [131])
            (const_int 73 [0x49]))) fmtext_o.cpp:486 6 {*cmphi_1}
     (nil))
(jump_insn 145 144 146 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 156)
            (pc))) fmtext_o.cpp:486 612 {*jcc_1}
     (nil)
 -> 156)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 133 134 135 136 445 446
(note 146 145 147 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 14 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:488 90 {*movsi_internal}
     (nil))
(insn 148 147 149 14 (set (reg:DI 0 ax [orig:132 D.6738 ] [132])
        (sign_extend:DI (reg:SI 0 ax [445]))) fmtext_o.cpp:488 142 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 14 (parallel [
            (set (reg:DI 1 dx [orig:133 D.6738 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6738 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:488 512 {*ashldi3_1}
     (nil))
(insn 150 149 151 14 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:488 89 {*movdi_internal}
     (nil))
(insn 151 150 152 14 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6743 ] [134])
                (plus:DI (reg/f:DI 0 ax [446])
                    (reg:DI 1 dx [orig:133 D.6738 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:488 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6738 ] [133]))
        (nil)))
(insn 152 151 153 14 (set (reg/f:DI 0 ax [orig:135 D.6744 ] [135])
        (mem/f:DI (reg/f:DI 0 ax [orig:134 D.6743 ] [134]) [0 *_85+0 S8 A64])) fmtext_o.cpp:488 89 {*movdi_internal}
     (nil))
(insn 153 152 154 14 (set (reg:HI 0 ax [orig:136 D.6746 ] [136])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:135 D.6744 ] [135])
                (const_int 26 [0x1a])) [0 _86->status.number+0 S2 A16])) fmtext_o.cpp:488 92 {*movhi_internal}
     (nil))
(insn 154 153 155 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:136 D.6746 ] [136])
            (const_int 2073 [0x819]))) fmtext_o.cpp:487 6 {*cmphi_1}
     (nil))
(jump_insn 155 154 156 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 201)
            (pc))) fmtext_o.cpp:487 612 {*jcc_1}
     (nil)
 -> 201)
;;  succ:       15 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 447
(code_label 156 155 157 15 97 "" [2 uses])
(note 157 156 158 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 159 15 (set (reg/f:DI 0 ax [447])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:490 89 {*movdi_internal}
     (nil))
(insn 159 158 160 15 (set (reg:SI 0 ax [orig:138 D.6737 ] [138])
        (mem/j:SI (reg/f:DI 0 ax [447]) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:490 90 {*movsi_internal}
     (nil))
(insn 160 159 161 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:138 D.6737 ] [138])
            (const_int 0 [0]))) fmtext_o.cpp:490 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 161 160 162 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) fmtext_o.cpp:490 612 {*jcc_1}
     (nil)
 -> 178)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 162 161 163 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:491 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 164 163 165 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 170)
            (pc))) fmtext_o.cpp:491 612 {*jcc_1}
     (nil)
 -> 170)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 165 164 166 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f93b2338480 *.LC30>)) fmtext_o.cpp:492 89 {*movdi_internal}
     (nil))
(call_insn 167 166 786 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:492 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 786 167 787 17 (set (pc)
        (label_ref 191)) 654 {jump}
     (nil)
 -> 191)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 787 786 170)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 170 787 171 18 100 "" [1 uses])
(note 171 170 172 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f93b2338510 *.LC31>)) fmtext_o.cpp:494 89 {*movdi_internal}
     (nil))
(call_insn 173 172 788 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:494 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 788 173 789 18 (set (pc)
        (label_ref 191)) 654 {jump}
     (nil)
 -> 191)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 789 788 178)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 178 789 179 19 99 "" [1 uses])
(note 179 178 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:496 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 181 180 182 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) fmtext_o.cpp:496 612 {*jcc_1}
     (nil)
 -> 187)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 182 181 183 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 183 182 184 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f93b23385a0 *.LC32>)) fmtext_o.cpp:497 89 {*movdi_internal}
     (nil))
(call_insn 184 183 790 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:497 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 790 184 791 20 (set (pc)
        (label_ref 191)) 654 {jump}
     (nil)
 -> 191)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 791 790 187)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 187 791 188 21 103 "" [1 uses])
(note 188 187 189 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f93b2338630 *.LC33>)) fmtext_o.cpp:499 89 {*movdi_internal}
     (nil))
(call_insn 190 189 191 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:499 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 [100.0%] 
;;              18 [100.0%] 
;;              21 (FALLTHRU)
;;              20 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 139 448 449
(code_label 191 190 192 22 102 "" [3 uses])
(note 192 191 193 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 193 192 194 22 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:501 89 {*movdi_internal}
     (nil))
(insn 194 193 195 22 (set (reg:SI 1 dx [orig:139 D.6737 ] [139])
        (mem/j:SI (reg/f:DI 0 ax [448]) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:501 90 {*movsi_internal}
     (nil))
(insn 195 194 196 22 (set (reg/f:DI 0 ax [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:501 89 {*movdi_internal}
     (nil))
(insn 196 195 197 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [449])
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])
        (reg:SI 1 dx [orig:139 D.6737 ] [139])) fmtext_o.cpp:501 90 {*movsi_internal}
     (nil))
(insn 197 196 198 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f93b23386c0 *.LC34>)) fmtext_o.cpp:502 89 {*movdi_internal}
     (nil))
(call_insn 198 197 792 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:502 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 792 198 793 22 (set (pc)
        (label_ref 249)) fmtext_o.cpp:502 654 {jump}
     (nil)
 -> 249)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 793 792 201)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 450
(code_label 201 793 202 23 98 "" [1 uses])
(note 202 201 203 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 23 (set (reg/f:DI 0 ax [450])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:504 89 {*movdi_internal}
     (nil))
(insn 204 203 205 23 (set (reg:SI 0 ax [orig:137 D.6737 ] [137])
        (mem/j:SI (reg/f:DI 0 ax [450]) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:504 90 {*movsi_internal}
     (nil))
(insn 205 204 206 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:137 D.6737 ] [137])
            (const_int 0 [0]))) fmtext_o.cpp:504 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 206 205 207 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 225)
            (pc))) fmtext_o.cpp:504 612 {*jcc_1}
     (nil)
 -> 225)
;;  succ:       24 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 451
(note 207 206 208 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 24 (set (reg/f:DI 0 ax [451])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:505 89 {*movdi_internal}
     (nil))
(insn 209 208 210 24 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [451])
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])
        (const_int 1 [0x1])) fmtext_o.cpp:505 90 {*movsi_internal}
     (nil))
(insn 210 209 211 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:506 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 211 210 212 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 217)
            (pc))) fmtext_o.cpp:506 612 {*jcc_1}
     (nil)
 -> 217)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 212 211 213 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 213 212 214 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f93b23385a0 *.LC32>)) fmtext_o.cpp:507 89 {*movdi_internal}
     (nil))
(call_insn 214 213 794 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:507 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 794 214 795 25 (set (pc)
        (label_ref 240)) 654 {jump}
     (nil)
 -> 240)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 795 794 217)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 217 795 218 26 106 "" [1 uses])
(note 218 217 219 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f93b2338630 *.LC33>)) fmtext_o.cpp:509 89 {*movdi_internal}
     (nil))
(call_insn 220 219 796 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:509 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 796 220 797 26 (set (pc)
        (label_ref 240)) 654 {jump}
     (nil)
 -> 240)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 797 796 225)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 452
(code_label 225 797 226 27 105 "" [1 uses])
(note 226 225 227 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 27 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:511 89 {*movdi_internal}
     (nil))
(insn 228 227 229 27 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [452])
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:511 90 {*movsi_internal}
     (nil))
(insn 229 228 230 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:512 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 230 229 231 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 236)
            (pc))) fmtext_o.cpp:512 612 {*jcc_1}
     (nil)
 -> 236)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 231 230 232 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 232 231 233 28 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f93b2338480 *.LC30>)) fmtext_o.cpp:513 89 {*movdi_internal}
     (nil))
(call_insn 233 232 798 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:513 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 798 233 799 28 (set (pc)
        (label_ref 240)) 654 {jump}
     (nil)
 -> 240)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 799 798 236)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 236 799 237 29 109 "" [1 uses])
(note 237 236 238 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f93b2338510 *.LC31>)) fmtext_o.cpp:515 89 {*movdi_internal}
     (nil))
(call_insn 239 238 240 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:515 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 [100.0%] 
;;              26 [100.0%] 
;;              29 (FALLTHRU)
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 453 454
(code_label 240 239 241 30 108 "" [3 uses])
(note 241 240 242 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 30 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f93b2338750 *.LC35>)) fmtext_o.cpp:517 89 {*movdi_internal}
     (nil))
(call_insn 243 242 244 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:517 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 244 243 245 30 (set (reg:SI 1 dx [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:518 90 {*movsi_internal}
     (nil))
(insn 245 244 246 30 (set (reg:DI 0 ax [454])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:518 89 {*movdi_internal}
     (nil))
(insn 246 245 247 30 (set (reg:SI 4 si)
        (reg:SI 1 dx [453])) fmtext_o.cpp:518 90 {*movsi_internal}
     (nil))
(insn 247 246 248 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [454])) fmtext_o.cpp:518 89 {*movdi_internal}
     (nil))
(call_insn 248 247 249 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16main_header_swapPP16Data_file_headeri") [flags 0x41]  <function_decl 0x7f93b26acd80 main_header_swap>) [0 main_header_swap S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:518 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;;              22 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 141 142 143 144 145 146 147 148 149 455 456 457 458 459 460
(code_label 249 248 250 31 104 "" [1 uses])
(note 250 249 251 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 31 (set (reg:SI 0 ax [455])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 252 251 253 31 (set (reg:DI 0 ax [orig:140 D.6738 ] [140])
        (sign_extend:DI (reg:SI 0 ax [455]))) fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 253 252 254 31 (parallel [
            (set (reg:DI 1 dx [orig:141 D.6738 ] [141])
                (ashift:DI (reg:DI 0 ax [orig:140 D.6738 ] [140])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:521 512 {*ashldi3_1}
     (nil))
(insn 254 253 255 31 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 255 254 256 31 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.6743 ] [142])
                (plus:DI (reg/f:DI 0 ax [456])
                    (reg:DI 1 dx [orig:141 D.6738 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:521 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:141 D.6738 ] [141]))
        (nil)))
(insn 256 255 257 31 (set (reg/f:DI 0 ax [orig:143 D.6744 ] [143])
        (mem/f:DI (reg/f:DI 0 ax [orig:142 D.6743 ] [142]) [0 *_108+0 S8 A64])) fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 257 256 258 31 (set (reg:SI 0 ax [457])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:143 D.6744 ] [143])
                (const_int 8 [0x8])) [0 _109->np.number+0 S4 A32])) fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 258 257 259 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [457])) fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 259 258 260 31 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (nil))
(insn 260 259 261 31 (set (reg:SI 1 dx [orig:144 D.6737 ] [144])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [458])
                (const_int 24 [0x18])) [0 preprocess_27(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (nil))
(insn 261 260 262 31 (set (reg:SI 0 ax [459])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (nil))
(insn 262 261 263 31 (set (reg:DI 0 ax [orig:145 D.6738 ] [145])
        (sign_extend:DI (reg:SI 0 ax [459]))) fmtext_o.cpp:524 142 {*extendsidi2_rex64}
     (nil))
(insn 263 262 264 31 (parallel [
            (set (reg:DI 2 cx [orig:146 D.6738 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.6738 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:524 512 {*ashldi3_1}
     (nil))
(insn 264 263 265 31 (set (reg/f:DI 0 ax [460])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (nil))
(insn 265 264 266 31 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6743 ] [147])
                (plus:DI (reg/f:DI 0 ax [460])
                    (reg:DI 2 cx [orig:146 D.6738 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:524 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:146 D.6738 ] [146]))
        (nil)))
(insn 266 265 267 31 (set (reg/f:DI 0 ax [orig:148 D.6744 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [orig:147 D.6743 ] [147]) [0 *_114+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (nil))
(insn 267 266 268 31 (set (reg:SI 0 ax [orig:149 D.6737 ] [149])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:148 D.6744 ] [148])
                (const_int 8 [0x8])) [0 _115->np.number+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (nil))
(insn 268 267 269 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:144 D.6737 ] [144])
            (reg:SI 0 ax [orig:149 D.6737 ] [149]))) fmtext_o.cpp:524 7 {*cmpsi_1}
     (nil))
(jump_insn 269 268 270 31 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 274)
            (pc))) fmtext_o.cpp:524 612 {*jcc_1}
     (nil)
 -> 274)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 461 462
(note 270 269 271 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 271 270 272 32 (set (reg/f:DI 0 ax [461])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:525 89 {*movdi_internal}
     (nil))
(insn 272 271 273 32 (set (reg:SI 0 ax [462])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [461])
                (const_int 24 [0x18])) [0 preprocess_27(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:525 90 {*movsi_internal}
     (nil))
(insn 273 272 274 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [462])) fmtext_o.cpp:525 90 {*movsi_internal}
     (nil))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486
(code_label 274 273 275 33 110 "" [1 uses])
(note 275 274 276 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 33 (set (reg:SI 0 ax [463])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:527 90 {*movsi_internal}
     (nil))
(insn 277 276 278 33 (set (reg:DI 0 ax [orig:150 D.6738 ] [150])
        (sign_extend:DI (reg:SI 0 ax [463]))) fmtext_o.cpp:527 142 {*extendsidi2_rex64}
     (nil))
(insn 278 277 279 33 (parallel [
            (set (reg:DI 1 dx [orig:151 D.6738 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.6738 ] [150])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 512 {*ashldi3_1}
     (nil))
(insn 279 278 280 33 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 out_data+0 S8 A64])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(insn 280 279 281 33 (parallel [
            (set (reg/f:DI 3 bx [orig:152 D.6747 ] [152])
                (plus:DI (reg:DI 1 dx [orig:151 D.6738 ] [151])
                    (reg/f:DI 0 ax [464])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.6738 ] [151]))
        (nil)))
(insn 281 280 282 33 (set (reg:SI 0 ax [465])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:527 90 {*movsi_internal}
     (nil))
(insn 282 281 283 33 (set (reg:DI 0 ax [orig:153 D.6738 ] [153])
        (sign_extend:DI (reg:SI 0 ax [465]))) fmtext_o.cpp:527 142 {*extendsidi2_rex64}
     (nil))
(insn 283 282 284 33 (parallel [
            (set (reg:DI 0 ax [orig:154 D.6738 ] [154])
                (ashift:DI (reg:DI 0 ax [orig:153 D.6738 ] [153])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 512 {*ashldi3_1}
     (nil))
(insn 284 283 285 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:154 D.6738 ] [154])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(call_insn 285 284 286 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:527 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 286 285 287 33 (set (reg/f:DI 0 ax [466])
        (reg:DI 0 ax)) fmtext_o.cpp:527 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [466])
        (nil)))
(insn 287 286 288 33 (set (reg/f:DI 0 ax [orig:155 D.6748 ] [155])
        (reg/f:DI 0 ax [466])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(insn 288 287 289 33 (set (mem/f:DI (reg/f:DI 3 bx [orig:152 D.6747 ] [152]) [0 *_121+0 S8 A64])
        (reg/f:DI 0 ax [orig:155 D.6748 ] [155])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(insn 289 288 290 33 (set (reg:SI 0 ax [467])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:528 90 {*movsi_internal}
     (nil))
(insn 290 289 291 33 (set (reg:DI 0 ax [orig:156 D.6738 ] [156])
        (sign_extend:DI (reg:SI 0 ax [467]))) fmtext_o.cpp:528 142 {*extendsidi2_rex64}
     (nil))
(insn 291 290 292 33 (parallel [
            (set (reg:DI 1 dx [orig:157 D.6738 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 D.6738 ] [156])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 512 {*ashldi3_1}
     (nil))
(insn 292 291 293 33 (set (reg/f:DI 0 ax [468])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 scratch_data+0 S8 A64])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(insn 293 292 294 33 (parallel [
            (set (reg/f:DI 3 bx [orig:158 D.6747 ] [158])
                (plus:DI (reg:DI 1 dx [orig:157 D.6738 ] [157])
                    (reg/f:DI 0 ax [468])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:157 D.6738 ] [157]))
        (nil)))
(insn 294 293 295 33 (set (reg:SI 0 ax [469])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:528 90 {*movsi_internal}
     (nil))
(insn 295 294 296 33 (set (reg:DI 0 ax [orig:159 D.6738 ] [159])
        (sign_extend:DI (reg:SI 0 ax [469]))) fmtext_o.cpp:528 142 {*extendsidi2_rex64}
     (nil))
(insn 296 295 297 33 (parallel [
            (set (reg:DI 0 ax [orig:160 D.6738 ] [160])
                (ashift:DI (reg:DI 0 ax [orig:159 D.6738 ] [159])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 512 {*ashldi3_1}
     (nil))
(insn 297 296 298 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:160 D.6738 ] [160])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(call_insn 298 297 299 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:528 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 299 298 300 33 (set (reg/f:DI 0 ax [470])
        (reg:DI 0 ax)) fmtext_o.cpp:528 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [470])
        (nil)))
(insn 300 299 301 33 (set (reg/f:DI 0 ax [orig:161 D.6748 ] [161])
        (reg/f:DI 0 ax [470])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(insn 301 300 302 33 (set (mem/f:DI (reg/f:DI 3 bx [orig:158 D.6747 ] [158]) [0 *_130+0 S8 A64])
        (reg/f:DI 0 ax [orig:161 D.6748 ] [161])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(insn 302 301 303 33 (set (reg:SI 0 ax [471])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (nil))
(insn 303 302 304 33 (set (reg:DI 0 ax [orig:162 D.6738 ] [162])
        (sign_extend:DI (reg:SI 0 ax [471]))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (nil))
(insn 304 303 305 33 (parallel [
            (set (reg:DI 1 dx [orig:163 D.6738 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:162 D.6738 ] [162])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 512 {*ashldi3_1}
     (nil))
(insn 305 304 306 33 (set (reg/f:DI 0 ax [472])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 306 305 307 33 (parallel [
            (set (reg/f:DI 3 bx [orig:164 D.6749 ] [164])
                (plus:DI (reg:DI 1 dx [orig:163 D.6738 ] [163])
                    (reg/f:DI 0 ax [472])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:163 D.6738 ] [163]))
        (nil)))
(insn 307 306 308 33 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (nil))
(insn 308 307 309 33 (set (reg:DI 0 ax [orig:165 D.6738 ] [165])
        (sign_extend:DI (reg:SI 0 ax [473]))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (nil))
(insn 309 308 310 33 (parallel [
            (set (reg:DI 1 dx [orig:166 D.6738 ] [166])
                (ashift:DI (reg:DI 0 ax [orig:165 D.6738 ] [165])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 512 {*ashldi3_1}
     (nil))
(insn 310 309 311 33 (set (reg/f:DI 0 ax [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 311 310 312 33 (parallel [
            (set (reg/f:DI 0 ax [orig:167 D.6743 ] [167])
                (plus:DI (reg/f:DI 0 ax [474])
                    (reg:DI 1 dx [orig:166 D.6738 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.6738 ] [166]))
        (nil)))
(insn 312 311 313 33 (set (reg/f:DI 0 ax [orig:168 D.6744 ] [168])
        (mem/f:DI (reg/f:DI 0 ax [orig:167 D.6743 ] [167]) [0 *_142+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 313 312 314 33 (set (reg:SI 0 ax [orig:169 D.6737 ] [169])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:168 D.6744 ] [168])
                (const_int 8 [0x8])) [0 _143->np.number+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (nil))
(insn 314 313 315 33 (set (reg:DI 0 ax [orig:170 D.6738 ] [170])
        (sign_extend:DI (reg:SI 0 ax [orig:169 D.6737 ] [169]))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (nil))
(insn 315 314 316 33 (parallel [
            (set (reg:DI 0 ax [orig:171 D.6738 ] [171])
                (ashift:DI (reg:DI 0 ax [orig:170 D.6738 ] [170])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 512 {*ashldi3_1}
     (nil))
(insn 316 315 317 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:171 D.6738 ] [171])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(call_insn 317 316 318 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:529 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 318 317 319 33 (set (reg/f:DI 0 ax [475])
        (reg:DI 0 ax)) fmtext_o.cpp:529 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [475])
        (nil)))
(insn 319 318 320 33 (set (reg/f:DI 0 ax [orig:172 D.6748 ] [172])
        (reg/f:DI 0 ax [475])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 320 319 321 33 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:164 D.6749 ] [164]) [0 _139->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:172 D.6748 ] [172])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 321 320 322 33 (set (reg:SI 0 ax [476])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (nil))
(insn 322 321 323 33 (set (reg:DI 0 ax [orig:173 D.6738 ] [173])
        (sign_extend:DI (reg:SI 0 ax [476]))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 33 (parallel [
            (set (reg:DI 1 dx [orig:174 D.6738 ] [174])
                (ashift:DI (reg:DI 0 ax [orig:173 D.6738 ] [173])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 512 {*ashldi3_1}
     (nil))
(insn 324 323 325 33 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 325 324 326 33 (parallel [
            (set (reg/f:DI 3 bx [orig:175 D.6750 ] [175])
                (plus:DI (reg:DI 1 dx [orig:174 D.6738 ] [174])
                    (reg/f:DI 0 ax [477])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:174 D.6738 ] [174]))
        (nil)))
(insn 326 325 327 33 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (nil))
(insn 327 326 328 33 (set (reg:DI 0 ax [orig:176 D.6738 ] [176])
        (sign_extend:DI (reg:SI 0 ax [478]))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 328 327 329 33 (parallel [
            (set (reg:DI 1 dx [orig:177 D.6738 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.6738 ] [176])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 512 {*ashldi3_1}
     (nil))
(insn 329 328 330 33 (set (reg/f:DI 0 ax [479])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 330 329 331 33 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.6743 ] [178])
                (plus:DI (reg/f:DI 0 ax [479])
                    (reg:DI 1 dx [orig:177 D.6738 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.6738 ] [177]))
        (nil)))
(insn 331 330 332 33 (set (reg/f:DI 0 ax [orig:179 D.6744 ] [179])
        (mem/f:DI (reg/f:DI 0 ax [orig:178 D.6743 ] [178]) [0 *_156+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 332 331 333 33 (set (reg:SI 0 ax [orig:180 D.6737 ] [180])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:179 D.6744 ] [179])
                (const_int 8 [0x8])) [0 _157->np.number+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (nil))
(insn 333 332 334 33 (set (reg:DI 0 ax [orig:181 D.6738 ] [181])
        (sign_extend:DI (reg:SI 0 ax [orig:180 D.6737 ] [180]))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 334 333 335 33 (parallel [
            (set (reg:DI 0 ax [orig:182 D.6738 ] [182])
                (ashift:DI (reg:DI 0 ax [orig:181 D.6738 ] [181])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 512 {*ashldi3_1}
     (nil))
(insn 335 334 336 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:182 D.6738 ] [182])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(call_insn 336 335 337 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f93b27e1a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:530 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 337 336 338 33 (set (reg/f:DI 0 ax [480])
        (reg:DI 0 ax)) fmtext_o.cpp:530 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [480])
        (nil)))
(insn 338 337 339 33 (set (reg/f:DI 0 ax [orig:183 D.6748 ] [183])
        (reg/f:DI 0 ax [480])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 339 338 340 33 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:175 D.6750 ] [175]) [0 _153->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:183 D.6748 ] [183])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 340 339 341 33 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:531 90 {*movsi_internal}
     (nil))
(insn 341 340 342 33 (set (reg:DI 0 ax [orig:184 D.6738 ] [184])
        (sign_extend:DI (reg:SI 0 ax [481]))) fmtext_o.cpp:531 142 {*extendsidi2_rex64}
     (nil))
(insn 342 341 343 33 (parallel [
            (set (reg:DI 1 dx [orig:185 D.6738 ] [185])
                (ashift:DI (reg:DI 0 ax [orig:184 D.6738 ] [184])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 512 {*ashldi3_1}
     (nil))
(insn 343 342 344 33 (set (reg/f:DI 0 ax [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 344 343 345 33 (parallel [
            (set (reg/f:DI 0 ax [orig:186 D.6740 ] [186])
                (plus:DI (reg/f:DI 0 ax [482])
                    (reg:DI 1 dx [orig:185 D.6738 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:185 D.6738 ] [185]))
        (nil)))
(insn 345 344 346 33 (set (reg/f:DI 1 dx [orig:187 D.6742 ] [187])
        (mem/f:DI (reg/f:DI 0 ax [orig:186 D.6740 ] [186]) [0 *_166+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 346 345 347 33 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:531 90 {*movsi_internal}
     (nil))
(insn 347 346 348 33 (set (reg:DI 0 ax [orig:188 D.6738 ] [188])
        (sign_extend:DI (reg:SI 0 ax [483]))) fmtext_o.cpp:531 142 {*extendsidi2_rex64}
     (nil))
(insn 348 347 349 33 (parallel [
            (set (reg:DI 2 cx [orig:189 D.6738 ] [189])
                (ashift:DI (reg:DI 0 ax [orig:188 D.6738 ] [188])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 512 {*ashldi3_1}
     (nil))
(insn 349 348 350 33 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 block_header+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 350 349 351 33 (parallel [
            (set (reg/f:DI 0 ax [orig:190 D.6751 ] [190])
                (plus:DI (reg/f:DI 0 ax [484])
                    (reg:DI 2 cx [orig:189 D.6738 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:189 D.6738 ] [189]))
        (nil)))
(insn 351 350 352 33 (set (reg/f:DI 0 ax [orig:191 D.6752 ] [191])
        (mem/f:DI (reg/f:DI 0 ax [orig:190 D.6751 ] [190]) [0 *_171+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 352 351 353 33 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:187 D.6742 ] [187])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 353 352 354 33 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 354 353 355 33 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 355 354 356 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:191 D.6752 ] [191])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(call_insn 356 355 357 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:531 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 357 356 358 33 (set (reg/f:DI 0 ax [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:534 89 {*movdi_internal}
     (nil))
(insn 358 357 359 33 (set (reg:SI 1 dx [orig:192 D.6737 ] [192])
        (mem/j:SI (reg/f:DI 0 ax [485]) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:534 90 {*movsi_internal}
     (nil))
(insn 359 358 360 33 (set (reg/f:DI 0 ax [486])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:534 89 {*movdi_internal}
     (nil))
(insn 360 359 361 33 (set (reg:SI 0 ax [orig:193 D.6737 ] [193])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [486])
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])) fmtext_o.cpp:534 90 {*movsi_internal}
     (nil))
(insn 361 360 362 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:192 D.6737 ] [192])
            (reg:SI 0 ax [orig:193 D.6737 ] [193]))) fmtext_o.cpp:534 7 {*cmpsi_1}
     (nil))
(jump_insn 362 361 363 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 369)
            (pc))) fmtext_o.cpp:534 612 {*jcc_1}
     (nil)
 -> 369)
;;  succ:       34 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 487 488
(note 363 362 364 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 364 363 365 34 (set (reg:SI 1 dx [487])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:535 90 {*movsi_internal}
     (nil))
(insn 365 364 366 34 (set (reg:DI 0 ax [488])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 block_header+0 S8 A64])) fmtext_o.cpp:535 89 {*movdi_internal}
     (nil))
(insn 366 365 367 34 (set (reg:SI 4 si)
        (reg:SI 1 dx [487])) fmtext_o.cpp:535 90 {*movsi_internal}
     (nil))
(insn 367 366 368 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [488])) fmtext_o.cpp:535 89 {*movdi_internal}
     (nil))
(call_insn 368 367 369 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z17block_header_swapPP17Data_block_headeri") [flags 0x41]  <function_decl 0x7f93b26ace58 block_header_swap>) [0 block_header_swap S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:535 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33
;;              34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 194 195 196 197 198 489 490
(code_label 369 368 370 35 111 "" [1 uses])
(note 370 369 371 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 371 370 372 35 (set (reg:SI 0 ax [489])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:546 90 {*movsi_internal}
     (nil))
(insn 372 371 373 35 (set (reg:DI 0 ax [orig:194 D.6738 ] [194])
        (sign_extend:DI (reg:SI 0 ax [489]))) fmtext_o.cpp:546 142 {*extendsidi2_rex64}
     (nil))
(insn 373 372 374 35 (parallel [
            (set (reg:DI 1 dx [orig:195 D.6738 ] [195])
                (ashift:DI (reg:DI 0 ax [orig:194 D.6738 ] [194])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:546 512 {*ashldi3_1}
     (nil))
(insn 374 373 375 35 (set (reg/f:DI 0 ax [490])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:546 89 {*movdi_internal}
     (nil))
(insn 375 374 376 35 (parallel [
            (set (reg/f:DI 0 ax [orig:196 D.6743 ] [196])
                (plus:DI (reg/f:DI 0 ax [490])
                    (reg:DI 1 dx [orig:195 D.6738 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:546 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:195 D.6738 ] [195]))
        (nil)))
(insn 376 375 377 35 (set (reg/f:DI 0 ax [orig:197 D.6744 ] [197])
        (mem/f:DI (reg/f:DI 0 ax [orig:196 D.6743 ] [196]) [0 *_179+0 S8 A64])) fmtext_o.cpp:546 89 {*movdi_internal}
     (nil))
(insn 377 376 378 35 (set (reg:HI 0 ax [orig:198 D.6746 ] [198])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:197 D.6744 ] [197])
                (const_int 26 [0x1a])) [0 _180->status.number+0 S2 A16])) fmtext_o.cpp:546 92 {*movhi_internal}
     (nil))
(insn 378 377 379 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:198 D.6746 ] [198])
            (const_int 69 [0x45]))) fmtext_o.cpp:546 6 {*cmphi_1}
     (nil))
(jump_insn 379 378 380 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 416)
            (pc))) fmtext_o.cpp:546 612 {*jcc_1}
     (nil)
 -> 416)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 491 492 493 494 495 496 497 498
(note 380 379 381 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 382 36 (set (reg:SI 0 ax [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:548 90 {*movsi_internal}
     (nil))
(insn 382 381 383 36 (set (reg:DI 0 ax [orig:199 D.6738 ] [199])
        (sign_extend:DI (reg:SI 0 ax [491]))) fmtext_o.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 383 382 384 36 (parallel [
            (set (reg:DI 1 dx [orig:200 D.6738 ] [200])
                (ashift:DI (reg:DI 0 ax [orig:199 D.6738 ] [199])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 512 {*ashldi3_1}
     (nil))
(insn 384 383 385 36 (set (reg/f:DI 0 ax [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 385 384 386 36 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.6740 ] [201])
                (plus:DI (reg/f:DI 0 ax [492])
                    (reg:DI 1 dx [orig:200 D.6738 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:200 D.6738 ] [200]))
        (nil)))
(insn 386 385 387 36 (set (reg/f:DI 1 dx [orig:202 D.6742 ] [202])
        (mem/f:DI (reg/f:DI 0 ax [orig:201 D.6740 ] [201]) [0 *_184+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 387 386 388 36 (set (reg:SI 0 ax [493])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 388 387 389 36 (set (reg:DI 0 ax [orig:203 D.6738 ] [203])
        (sign_extend:DI (reg:SI 0 ax [493]))) fmtext_o.cpp:547 142 {*extendsidi2_rex64}
     (nil))
(insn 389 388 390 36 (parallel [
            (set (reg:DI 2 cx [orig:204 D.6738 ] [204])
                (ashift:DI (reg:DI 0 ax [orig:203 D.6738 ] [203])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 512 {*ashldi3_1}
     (nil))
(insn 390 389 391 36 (set (reg/f:DI 0 ax [494])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 391 390 392 36 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.6743 ] [205])
                (plus:DI (reg/f:DI 0 ax [494])
                    (reg:DI 2 cx [orig:204 D.6738 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:204 D.6738 ] [204]))
        (nil)))
(insn 392 391 393 36 (set (reg/f:DI 0 ax [orig:206 D.6744 ] [206])
        (mem/f:DI (reg/f:DI 0 ax [orig:205 D.6743 ] [205]) [0 *_188+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 393 392 394 36 (set (reg:SI 2 cx [orig:207 D.6737 ] [207])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:206 D.6744 ] [206])
                (const_int 8 [0x8])) [0 _189->np.number+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 394 393 395 36 (set (reg:SI 0 ax [495])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:548 90 {*movsi_internal}
     (nil))
(insn 395 394 396 36 (set (reg:DI 0 ax [orig:208 D.6738 ] [208])
        (sign_extend:DI (reg:SI 0 ax [495]))) fmtext_o.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 396 395 397 36 (parallel [
            (set (reg:DI 4 si [orig:209 D.6738 ] [209])
                (ashift:DI (reg:DI 0 ax [orig:208 D.6738 ] [208])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 512 {*ashldi3_1}
     (nil))
(insn 397 396 398 36 (set (reg/f:DI 0 ax [496])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 398 397 399 36 (parallel [
            (set (reg/f:DI 0 ax [orig:210 D.6743 ] [210])
                (plus:DI (reg/f:DI 0 ax [496])
                    (reg:DI 4 si [orig:209 D.6738 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 4 si [orig:209 D.6738 ] [209]))
        (nil)))
(insn 399 398 400 36 (set (reg/f:DI 0 ax [orig:211 D.6744 ] [211])
        (mem/f:DI (reg/f:DI 0 ax [orig:210 D.6743 ] [210]) [0 *_193+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 400 399 401 36 (set (reg:SI 0 ax [orig:212 D.6737 ] [212])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:211 D.6744 ] [211])
                (const_int 12 [0xc])) [0 _194->ebytes.number+0 S4 A32])) fmtext_o.cpp:548 90 {*movsi_internal}
     (nil))
(insn 401 400 402 36 (parallel [
            (set (reg:SI 0 ax [orig:213 D.6737 ] [213])
                (mult:SI (reg:SI 0 ax [orig:212 D.6737 ] [212])
                    (reg:SI 2 cx [orig:207 D.6737 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 305 {*mulsi3_1}
     (nil))
(insn 402 401 403 36 (set (reg:DI 4 si [orig:214 D.6738 ] [214])
        (sign_extend:DI (reg:SI 0 ax [orig:213 D.6737 ] [213]))) fmtext_o.cpp:547 142 {*extendsidi2_rex64}
     (nil))
(insn 403 402 404 36 (set (reg:SI 0 ax [497])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 404 403 405 36 (set (reg:DI 0 ax [orig:215 D.6738 ] [215])
        (sign_extend:DI (reg:SI 0 ax [497]))) fmtext_o.cpp:547 142 {*extendsidi2_rex64}
     (nil))
(insn 405 404 406 36 (parallel [
            (set (reg:DI 2 cx [orig:216 D.6738 ] [216])
                (ashift:DI (reg:DI 0 ax [orig:215 D.6738 ] [215])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 512 {*ashldi3_1}
     (nil))
(insn 406 405 407 36 (set (reg/f:DI 0 ax [498])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 407 406 408 36 (parallel [
            (set (reg/f:DI 0 ax [orig:217 D.6749 ] [217])
                (plus:DI (reg/f:DI 0 ax [498])
                    (reg:DI 2 cx [orig:216 D.6738 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:216 D.6738 ] [216]))
        (nil)))
(insn 408 407 409 36 (set (reg/f:DI 0 ax [orig:218 D.6753 ] [218])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:217 D.6749 ] [217]) [0 _200->lo+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 409 408 410 36 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:202 D.6742 ] [202])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 410 409 412 36 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 412 410 413 36 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:218 D.6753 ] [218])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(call_insn 413 412 800 36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:548 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 800 413 801 36 (set (pc)
        (label_ref 491)) 654 {jump}
     (nil)
 -> 491)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 801 800 416)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 219 220 221 222 223 499 500
(code_label 416 801 417 37 112 "" [1 uses])
(note 417 416 418 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 419 37 (set (reg:SI 0 ax [499])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:549 90 {*movsi_internal}
     (nil))
(insn 419 418 420 37 (set (reg:DI 0 ax [orig:219 D.6738 ] [219])
        (sign_extend:DI (reg:SI 0 ax [499]))) fmtext_o.cpp:549 142 {*extendsidi2_rex64}
     (nil))
(insn 420 419 421 37 (parallel [
            (set (reg:DI 1 dx [orig:220 D.6738 ] [220])
                (ashift:DI (reg:DI 0 ax [orig:219 D.6738 ] [219])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 512 {*ashldi3_1}
     (nil))
(insn 421 420 422 37 (set (reg/f:DI 0 ax [500])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 422 421 423 37 (parallel [
            (set (reg/f:DI 0 ax [orig:221 D.6743 ] [221])
                (plus:DI (reg/f:DI 0 ax [500])
                    (reg:DI 1 dx [orig:220 D.6738 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:220 D.6738 ] [220]))
        (nil)))
(insn 423 422 424 37 (set (reg/f:DI 0 ax [orig:222 D.6744 ] [222])
        (mem/f:DI (reg/f:DI 0 ax [orig:221 D.6743 ] [221]) [0 *_205+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 424 423 425 37 (set (reg:HI 0 ax [orig:223 D.6746 ] [223])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:222 D.6744 ] [222])
                (const_int 26 [0x1a])) [0 _206->status.number+0 S2 A16])) fmtext_o.cpp:549 92 {*movhi_internal}
     (nil))
(insn 425 424 426 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:223 D.6746 ] [223])
            (const_int 73 [0x49]))) fmtext_o.cpp:549 6 {*cmphi_1}
     (nil))
(jump_insn 426 425 427 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 447)
            (pc))) fmtext_o.cpp:549 612 {*jcc_1}
     (nil)
 -> 447)
;;  succ:       40
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 225 226 227 228 501 502
(note 427 426 428 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 428 427 429 38 (set (reg:SI 0 ax [501])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:549 90 {*movsi_internal}
     (nil))
(insn 429 428 430 38 (set (reg:DI 0 ax [orig:224 D.6738 ] [224])
        (sign_extend:DI (reg:SI 0 ax [501]))) fmtext_o.cpp:549 142 {*extendsidi2_rex64}
     (nil))
(insn 430 429 431 38 (parallel [
            (set (reg:DI 1 dx [orig:225 D.6738 ] [225])
                (ashift:DI (reg:DI 0 ax [orig:224 D.6738 ] [224])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 512 {*ashldi3_1}
     (nil))
(insn 431 430 432 38 (set (reg/f:DI 0 ax [502])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 432 431 433 38 (parallel [
            (set (reg/f:DI 0 ax [orig:226 D.6743 ] [226])
                (plus:DI (reg/f:DI 0 ax [502])
                    (reg:DI 1 dx [orig:225 D.6738 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:225 D.6738 ] [225]))
        (nil)))
(insn 433 432 434 38 (set (reg/f:DI 0 ax [orig:227 D.6744 ] [227])
        (mem/f:DI (reg/f:DI 0 ax [orig:226 D.6743 ] [226]) [0 *_210+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 434 433 435 38 (set (reg:HI 0 ax [orig:228 D.6746 ] [228])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:227 D.6744 ] [227])
                (const_int 26 [0x1a])) [0 _211->status.number+0 S2 A16])) fmtext_o.cpp:549 92 {*movhi_internal}
     (nil))
(insn 435 434 436 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:228 D.6746 ] [228])
            (const_int 2073 [0x819]))) fmtext_o.cpp:549 6 {*cmphi_1}
     (nil))
(jump_insn 436 435 437 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 447)
            (pc))) fmtext_o.cpp:549 612 {*jcc_1}
     (nil)
 -> 447)
;;  succ:       40
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 229 230 231 232 233 503 504
(note 437 436 438 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 438 437 439 39 (set (reg:SI 0 ax [503])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:550 90 {*movsi_internal}
     (nil))
(insn 439 438 440 39 (set (reg:DI 0 ax [orig:229 D.6738 ] [229])
        (sign_extend:DI (reg:SI 0 ax [503]))) fmtext_o.cpp:550 142 {*extendsidi2_rex64}
     (nil))
(insn 440 439 441 39 (parallel [
            (set (reg:DI 1 dx [orig:230 D.6738 ] [230])
                (ashift:DI (reg:DI 0 ax [orig:229 D.6738 ] [229])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:550 512 {*ashldi3_1}
     (nil))
(insn 441 440 442 39 (set (reg/f:DI 0 ax [504])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:550 89 {*movdi_internal}
     (nil))
(insn 442 441 443 39 (parallel [
            (set (reg/f:DI 0 ax [orig:231 D.6743 ] [231])
                (plus:DI (reg/f:DI 0 ax [504])
                    (reg:DI 1 dx [orig:230 D.6738 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:550 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:230 D.6738 ] [230]))
        (nil)))
(insn 443 442 444 39 (set (reg/f:DI 0 ax [orig:232 D.6744 ] [232])
        (mem/f:DI (reg/f:DI 0 ax [orig:231 D.6743 ] [231]) [0 *_215+0 S8 A64])) fmtext_o.cpp:550 89 {*movdi_internal}
     (nil))
(insn 444 443 445 39 (set (reg:HI 0 ax [orig:233 D.6746 ] [233])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:232 D.6744 ] [232])
                (const_int 26 [0x1a])) [0 _216->status.number+0 S2 A16])) fmtext_o.cpp:550 92 {*movhi_internal}
     (nil))
(insn 445 444 446 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:233 D.6746 ] [233])
            (const_int 201 [0xc9]))) fmtext_o.cpp:550 6 {*cmphi_1}
     (nil))
(jump_insn 446 445 447 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 484)
            (pc))) fmtext_o.cpp:550 612 {*jcc_1}
     (nil)
 -> 484)
;;  succ:       40 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;;              38
;;              39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 505 506 507 508 509 510 511 512
(code_label 447 446 448 40 114 "" [2 uses])
(note 448 447 449 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 449 448 450 40 (set (reg:SI 0 ax [505])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:553 90 {*movsi_internal}
     (nil))
(insn 450 449 451 40 (set (reg:DI 0 ax [orig:234 D.6738 ] [234])
        (sign_extend:DI (reg:SI 0 ax [505]))) fmtext_o.cpp:553 142 {*extendsidi2_rex64}
     (nil))
(insn 451 450 452 40 (parallel [
            (set (reg:DI 1 dx [orig:235 D.6738 ] [235])
                (ashift:DI (reg:DI 0 ax [orig:234 D.6738 ] [234])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 512 {*ashldi3_1}
     (nil))
(insn 452 451 453 40 (set (reg/f:DI 0 ax [506])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 453 452 454 40 (parallel [
            (set (reg/f:DI 0 ax [orig:236 D.6740 ] [236])
                (plus:DI (reg/f:DI 0 ax [506])
                    (reg:DI 1 dx [orig:235 D.6738 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:235 D.6738 ] [235]))
        (nil)))
(insn 454 453 455 40 (set (reg/f:DI 1 dx [orig:237 D.6742 ] [237])
        (mem/f:DI (reg/f:DI 0 ax [orig:236 D.6740 ] [236]) [0 *_222+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 455 454 456 40 (set (reg:SI 0 ax [507])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 456 455 457 40 (set (reg:DI 0 ax [orig:238 D.6738 ] [238])
        (sign_extend:DI (reg:SI 0 ax [507]))) fmtext_o.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 457 456 458 40 (parallel [
            (set (reg:DI 2 cx [orig:239 D.6738 ] [239])
                (ashift:DI (reg:DI 0 ax [orig:238 D.6738 ] [238])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 512 {*ashldi3_1}
     (nil))
(insn 458 457 459 40 (set (reg/f:DI 0 ax [508])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 459 458 460 40 (parallel [
            (set (reg/f:DI 0 ax [orig:240 D.6743 ] [240])
                (plus:DI (reg/f:DI 0 ax [508])
                    (reg:DI 2 cx [orig:239 D.6738 ] [239])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:239 D.6738 ] [239]))
        (nil)))
(insn 460 459 461 40 (set (reg/f:DI 0 ax [orig:241 D.6744 ] [241])
        (mem/f:DI (reg/f:DI 0 ax [orig:240 D.6743 ] [240]) [0 *_226+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 461 460 462 40 (set (reg:SI 2 cx [orig:242 D.6737 ] [242])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:241 D.6744 ] [241])
                (const_int 8 [0x8])) [0 _227->np.number+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 462 461 463 40 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:553 90 {*movsi_internal}
     (nil))
(insn 463 462 464 40 (set (reg:DI 0 ax [orig:243 D.6738 ] [243])
        (sign_extend:DI (reg:SI 0 ax [509]))) fmtext_o.cpp:553 142 {*extendsidi2_rex64}
     (nil))
(insn 464 463 465 40 (parallel [
            (set (reg:DI 4 si [orig:244 D.6738 ] [244])
                (ashift:DI (reg:DI 0 ax [orig:243 D.6738 ] [243])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 512 {*ashldi3_1}
     (nil))
(insn 465 464 466 40 (set (reg/f:DI 0 ax [510])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 466 465 467 40 (parallel [
            (set (reg/f:DI 0 ax [orig:245 D.6743 ] [245])
                (plus:DI (reg/f:DI 0 ax [510])
                    (reg:DI 4 si [orig:244 D.6738 ] [244])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 4 si [orig:244 D.6738 ] [244]))
        (nil)))
(insn 467 466 468 40 (set (reg/f:DI 0 ax [orig:246 D.6744 ] [246])
        (mem/f:DI (reg/f:DI 0 ax [orig:245 D.6743 ] [245]) [0 *_231+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 468 467 469 40 (set (reg:SI 0 ax [orig:247 D.6737 ] [247])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:246 D.6744 ] [246])
                (const_int 12 [0xc])) [0 _232->ebytes.number+0 S4 A32])) fmtext_o.cpp:553 90 {*movsi_internal}
     (nil))
(insn 469 468 470 40 (parallel [
            (set (reg:SI 0 ax [orig:248 D.6737 ] [248])
                (mult:SI (reg:SI 0 ax [orig:247 D.6737 ] [247])
                    (reg:SI 2 cx [orig:242 D.6737 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 305 {*mulsi3_1}
     (nil))
(insn 470 469 471 40 (set (reg:DI 4 si [orig:249 D.6738 ] [249])
        (sign_extend:DI (reg:SI 0 ax [orig:248 D.6737 ] [248]))) fmtext_o.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 471 470 472 40 (set (reg:SI 0 ax [511])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 472 471 473 40 (set (reg:DI 0 ax [orig:250 D.6738 ] [250])
        (sign_extend:DI (reg:SI 0 ax [511]))) fmtext_o.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 473 472 474 40 (parallel [
            (set (reg:DI 2 cx [orig:251 D.6738 ] [251])
                (ashift:DI (reg:DI 0 ax [orig:250 D.6738 ] [250])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 512 {*ashldi3_1}
     (nil))
(insn 474 473 475 40 (set (reg/f:DI 0 ax [512])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 475 474 476 40 (parallel [
            (set (reg/f:DI 0 ax [orig:252 D.6749 ] [252])
                (plus:DI (reg/f:DI 0 ax [512])
                    (reg:DI 2 cx [orig:251 D.6738 ] [251])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:251 D.6738 ] [251]))
        (nil)))
(insn 476 475 477 40 (set (reg/f:DI 0 ax [orig:253 D.6754 ] [253])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:252 D.6749 ] [252]) [0 _238->fl+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 477 476 478 40 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:237 D.6742 ] [237])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 478 477 480 40 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 480 478 481 40 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:253 D.6754 ] [253])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(call_insn 481 480 802 40 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f93b2586360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:553 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 802 481 803 40 (set (pc)
        (label_ref 491)) fmtext_o.cpp:553 654 {jump}
     (nil)
 -> 491)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 803 802 484)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 484 803 485 41 115 "" [1 uses])
(note 485 484 486 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 486 485 487 41 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f93b22b15a0 *.LC18>)) fmtext_o.cpp:555 89 {*movdi_internal}
     (nil))
(call_insn 487 486 488 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f93b27b7000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:555 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 488 487 489 41 (set (reg:SI 5 di)
        (const_int 6 [0x6])) fmtext_o.cpp:556 90 {*movsi_internal}
     (nil))
(call_insn 489 488 490 41 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f93b27d2ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:556 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 490 489 491)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 [100.0%] 
;;              40 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 254 255 513 514
(code_label 491 490 492 42 113 "" [2 uses])
(note 492 491 493 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 493 492 494 42 (set (reg/f:DI 0 ax [513])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:560 89 {*movdi_internal}
     (nil))
(insn 494 493 495 42 (set (reg:SI 1 dx [orig:254 D.6737 ] [254])
        (mem/j:SI (reg/f:DI 0 ax [513]) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:560 90 {*movsi_internal}
     (nil))
(insn 495 494 496 42 (set (reg/f:DI 0 ax [514])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:560 89 {*movdi_internal}
     (nil))
(insn 496 495 497 42 (set (reg:SI 0 ax [orig:255 D.6737 ] [255])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [514])
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])) fmtext_o.cpp:560 90 {*movsi_internal}
     (nil))
(insn 497 496 498 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:254 D.6737 ] [254])
            (reg:SI 0 ax [orig:255 D.6737 ] [255]))) fmtext_o.cpp:560 7 {*cmpsi_1}
     (nil))
(jump_insn 498 497 499 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 607)
            (pc))) fmtext_o.cpp:560 612 {*jcc_1}
     (nil)
 -> 607)
;;  succ:       43 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 499 498 500 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 604 43 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
;;  succ:       44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;;              45 [100.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 256 257 258 259 260 261 262 263 264 265 515 516
(code_label 604 500 501 44 118 "" [1 uses])
(note 501 604 502 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 502 501 503 44 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 503 502 504 44 (set (reg:DI 0 ax [orig:256 D.6738 ] [256])
        (sign_extend:DI (reg:SI 0 ax [515]))) fmtext_o.cpp:562 142 {*extendsidi2_rex64}
     (nil))
(insn 504 503 505 44 (parallel [
            (set (reg:DI 1 dx [orig:257 D.6738 ] [257])
                (ashift:DI (reg:DI 0 ax [orig:256 D.6738 ] [256])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 512 {*ashldi3_1}
     (nil))
(insn 505 504 506 44 (set (reg/f:DI 0 ax [516])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:562 89 {*movdi_internal}
     (nil))
(insn 506 505 507 44 (parallel [
            (set (reg/f:DI 0 ax [orig:258 D.6743 ] [258])
                (plus:DI (reg/f:DI 0 ax [516])
                    (reg:DI 1 dx [orig:257 D.6738 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:257 D.6738 ] [257]))
        (nil)))
(insn 507 506 508 44 (set (reg/f:DI 0 ax [orig:259 D.6744 ] [259])
        (mem/f:DI (reg/f:DI 0 ax [orig:258 D.6743 ] [258]) [0 *_246+0 S8 A64])) fmtext_o.cpp:562 89 {*movdi_internal}
     (nil))
(insn 508 507 509 44 (set (reg:SI 0 ax [orig:260 D.6737 ] [260])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:259 D.6744 ] [259])
                (const_int 8 [0x8])) [0 _247->np.number+0 S4 A32])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 509 508 510 44 (set (reg:DI 0 ax [orig:261 D.6738 ] [261])
        (sign_extend:DI (reg:SI 0 ax [orig:260 D.6737 ] [260]))) fmtext_o.cpp:562 142 {*extendsidi2_rex64}
     (nil))
(insn 510 509 511 44 (set (reg:SI 1 dx [orig:262 D.6755 ] [262])
        (reg:SI 0 ax [orig:261 D.6738 ] [261])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 511 510 512 44 (set (reg:SI 0 ax [orig:263 D.6755 ] [263])
        (const_int 8 [0x8])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 512 511 513 44 (parallel [
            (set (reg:SI 0 ax [orig:264 D.6755 ] [264])
                (mult:SI (reg:SI 0 ax [orig:263 D.6755 ] [263])
                    (reg:SI 1 dx [orig:262 D.6755 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 305 {*mulsi3_1}
     (nil))
(insn 513 512 514 44 (set (reg:SI 0 ax [orig:265 D.6737 ] [265])
        (reg:SI 0 ax [orig:264 D.6755 ] [264])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 514 513 515 44 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:265 D.6737 ] [265])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) fmtext_o.cpp:562 7 {*cmpsi_1}
     (nil))
(jump_insn 515 514 516 44 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 716)
            (pc))) fmtext_o.cpp:562 612 {*jcc_1}
     (nil)
 -> 716)
;;  succ:       49
;;              45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540
(note 516 515 517 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 518 45 (set (reg:SI 0 ax [517])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 518 517 519 45 (set (reg:DI 0 ax [orig:266 D.6738 ] [266])
        (sign_extend:DI (reg:SI 0 ax [517]))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (nil))
(insn 519 518 520 45 (parallel [
            (set (reg:DI 1 dx [orig:267 D.6738 ] [267])
                (ashift:DI (reg:DI 0 ax [orig:266 D.6738 ] [266])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 512 {*ashldi3_1}
     (nil))
(insn 520 519 521 45 (set (reg/f:DI 0 ax [518])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 521 520 522 45 (parallel [
            (set (reg/f:DI 0 ax [orig:268 D.6750 ] [268])
                (plus:DI (reg/f:DI 0 ax [518])
                    (reg:DI 1 dx [orig:267 D.6738 ] [267])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:267 D.6738 ] [267]))
        (nil)))
(insn 522 521 523 45 (set (reg/f:DI 1 dx [orig:269 D.6756 ] [269])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:268 D.6750 ] [268]) [0 _256->character+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 523 522 524 45 (set (reg:SI 0 ax [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 524 523 525 45 (set (reg:DI 0 ax [orig:270 D.6757 ] [270])
        (sign_extend:DI (reg:SI 0 ax [519]))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (nil))
(insn 525 524 526 45 (parallel [
            (set (reg/f:DI 1 dx [orig:271 D.6756 ] [271])
                (plus:DI (reg/f:DI 1 dx [orig:269 D.6756 ] [269])
                    (reg:DI 0 ax [orig:270 D.6757 ] [270])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 218 {*adddi_1}
     (nil))
(insn 526 525 527 45 (set (reg:SI 0 ax [520])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 527 526 528 45 (set (reg:DI 0 ax [orig:272 D.6738 ] [272])
        (sign_extend:DI (reg:SI 0 ax [520]))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (nil))
(insn 528 527 529 45 (parallel [
            (set (reg:DI 2 cx [orig:273 D.6738 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:272 D.6738 ] [272])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 512 {*ashldi3_1}
     (nil))
(insn 529 528 530 45 (set (reg/f:DI 0 ax [521])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 530 529 531 45 (parallel [
            (set (reg/f:DI 0 ax [orig:274 D.6749 ] [274])
                (plus:DI (reg/f:DI 0 ax [521])
                    (reg:DI 2 cx [orig:273 D.6738 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:273 D.6738 ] [273]))
        (nil)))
(insn 531 530 532 45 (set (reg/f:DI 2 cx [orig:275 D.6756 ] [275])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:274 D.6749 ] [274]) [0 _262->character+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 532 531 533 45 (set (reg:SI 0 ax [522])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 533 532 534 45 (set (reg:DI 0 ax [orig:276 D.6757 ] [276])
        (sign_extend:DI (reg:SI 0 ax [522]))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (nil))
(insn 534 533 535 45 (parallel [
            (set (reg/f:DI 0 ax [orig:277 D.6756 ] [277])
                (plus:DI (reg:DI 0 ax [orig:276 D.6757 ] [276])
                    (reg/f:DI 2 cx [orig:275 D.6756 ] [275])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 218 {*adddi_1}
     (nil))
(insn 535 534 536 45 (set (reg:QI 0 ax [orig:278 D.6758 ] [278])
        (mem:QI (reg/f:DI 0 ax [orig:277 D.6756 ] [277]) [0 *_265+0 S1 A8])) fmtext_o.cpp:563 93 {*movqi_internal}
     (nil))
(insn 536 535 537 45 (set (mem:QI (reg/f:DI 1 dx [orig:271 D.6756 ] [271]) [0 *_259+0 S1 A8])
        (reg:QI 0 ax [orig:278 D.6758 ] [278])) fmtext_o.cpp:563 93 {*movqi_internal}
     (nil))
(insn 537 536 538 45 (set (reg:SI 0 ax [523])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 538 537 539 45 (set (reg:DI 0 ax [orig:279 D.6738 ] [279])
        (sign_extend:DI (reg:SI 0 ax [523]))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 539 538 540 45 (parallel [
            (set (reg:DI 1 dx [orig:280 D.6738 ] [280])
                (ashift:DI (reg:DI 0 ax [orig:279 D.6738 ] [279])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 512 {*ashldi3_1}
     (nil))
(insn 540 539 541 45 (set (reg/f:DI 0 ax [524])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 541 540 542 45 (parallel [
            (set (reg/f:DI 0 ax [orig:281 D.6750 ] [281])
                (plus:DI (reg/f:DI 0 ax [524])
                    (reg:DI 1 dx [orig:280 D.6738 ] [280])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:280 D.6738 ] [280]))
        (nil)))
(insn 542 541 543 45 (set (reg/f:DI 0 ax [orig:282 D.6756 ] [282])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:281 D.6750 ] [281]) [0 _270->character+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 543 542 544 45 (set (reg:SI 1 dx [525])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 544 543 545 45 (set (reg:DI 1 dx [orig:283 D.6757 ] [283])
        (sign_extend:DI (reg:SI 1 dx [525]))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 545 544 546 45 (parallel [
            (set (reg:DI 1 dx [orig:284 D.6757 ] [284])
                (plus:DI (reg:DI 1 dx [orig:283 D.6757 ] [283])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (nil))
(insn 546 545 547 45 (parallel [
            (set (reg/f:DI 1 dx [orig:285 D.6756 ] [285])
                (plus:DI (reg:DI 1 dx [orig:284 D.6757 ] [284])
                    (reg/f:DI 0 ax [orig:282 D.6756 ] [282])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (nil))
(insn 547 546 548 45 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 548 547 549 45 (set (reg:DI 0 ax [orig:286 D.6738 ] [286])
        (sign_extend:DI (reg:SI 0 ax [526]))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 549 548 550 45 (parallel [
            (set (reg:DI 2 cx [orig:287 D.6738 ] [287])
                (ashift:DI (reg:DI 0 ax [orig:286 D.6738 ] [286])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 512 {*ashldi3_1}
     (nil))
(insn 550 549 551 45 (set (reg/f:DI 0 ax [527])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 551 550 552 45 (parallel [
            (set (reg/f:DI 0 ax [orig:288 D.6749 ] [288])
                (plus:DI (reg/f:DI 0 ax [527])
                    (reg:DI 2 cx [orig:287 D.6738 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:287 D.6738 ] [287]))
        (nil)))
(insn 552 551 553 45 (set (reg/f:DI 0 ax [orig:289 D.6756 ] [289])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:288 D.6749 ] [288]) [0 _277->character+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 553 552 554 45 (set (reg:SI 2 cx [528])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 554 553 555 45 (set (reg:DI 2 cx [orig:290 D.6757 ] [290])
        (sign_extend:DI (reg:SI 2 cx [528]))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 555 554 556 45 (parallel [
            (set (reg:DI 2 cx [orig:291 D.6757 ] [291])
                (plus:DI (reg:DI 2 cx [orig:290 D.6757 ] [290])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (nil))
(insn 556 555 557 45 (parallel [
            (set (reg/f:DI 0 ax [orig:292 D.6756 ] [292])
                (plus:DI (reg/f:DI 0 ax [orig:289 D.6756 ] [289])
                    (reg:DI 2 cx [orig:291 D.6757 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (nil))
(insn 557 556 558 45 (set (reg:QI 0 ax [orig:293 D.6758 ] [293])
        (mem:QI (reg/f:DI 0 ax [orig:292 D.6756 ] [292]) [0 *_281+0 S1 A8])) fmtext_o.cpp:564 93 {*movqi_internal}
     (nil))
(insn 558 557 559 45 (set (mem:QI (reg/f:DI 1 dx [orig:285 D.6756 ] [285]) [0 *_274+0 S1 A8])
        (reg:QI 0 ax [orig:293 D.6758 ] [293])) fmtext_o.cpp:564 93 {*movqi_internal}
     (nil))
(insn 559 558 560 45 (set (reg:SI 0 ax [529])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 560 559 561 45 (set (reg:DI 0 ax [orig:294 D.6738 ] [294])
        (sign_extend:DI (reg:SI 0 ax [529]))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 561 560 562 45 (parallel [
            (set (reg:DI 1 dx [orig:295 D.6738 ] [295])
                (ashift:DI (reg:DI 0 ax [orig:294 D.6738 ] [294])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 512 {*ashldi3_1}
     (nil))
(insn 562 561 563 45 (set (reg/f:DI 0 ax [530])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 563 562 564 45 (parallel [
            (set (reg/f:DI 0 ax [orig:296 D.6750 ] [296])
                (plus:DI (reg/f:DI 0 ax [530])
                    (reg:DI 1 dx [orig:295 D.6738 ] [295])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:295 D.6738 ] [295]))
        (nil)))
(insn 564 563 565 45 (set (reg/f:DI 0 ax [orig:297 D.6756 ] [297])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:296 D.6750 ] [296]) [0 _286->character+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 565 564 566 45 (set (reg:SI 1 dx [531])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 566 565 567 45 (set (reg:DI 1 dx [orig:298 D.6757 ] [298])
        (sign_extend:DI (reg:SI 1 dx [531]))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 567 566 568 45 (parallel [
            (set (reg:DI 1 dx [orig:299 D.6757 ] [299])
                (plus:DI (reg:DI 1 dx [orig:298 D.6757 ] [298])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (nil))
(insn 568 567 569 45 (parallel [
            (set (reg/f:DI 1 dx [orig:300 D.6756 ] [300])
                (plus:DI (reg:DI 1 dx [orig:299 D.6757 ] [299])
                    (reg/f:DI 0 ax [orig:297 D.6756 ] [297])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (nil))
(insn 569 568 570 45 (set (reg:SI 0 ax [532])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 570 569 571 45 (set (reg:DI 0 ax [orig:301 D.6738 ] [301])
        (sign_extend:DI (reg:SI 0 ax [532]))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 571 570 572 45 (parallel [
            (set (reg:DI 2 cx [orig:302 D.6738 ] [302])
                (ashift:DI (reg:DI 0 ax [orig:301 D.6738 ] [301])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 512 {*ashldi3_1}
     (nil))
(insn 572 571 573 45 (set (reg/f:DI 0 ax [533])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 573 572 574 45 (parallel [
            (set (reg/f:DI 0 ax [orig:303 D.6749 ] [303])
                (plus:DI (reg/f:DI 0 ax [533])
                    (reg:DI 2 cx [orig:302 D.6738 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:302 D.6738 ] [302]))
        (nil)))
(insn 574 573 575 45 (set (reg/f:DI 0 ax [orig:304 D.6756 ] [304])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:303 D.6749 ] [303]) [0 _293->character+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 575 574 576 45 (set (reg:SI 2 cx [534])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 576 575 577 45 (set (reg:DI 2 cx [orig:305 D.6757 ] [305])
        (sign_extend:DI (reg:SI 2 cx [534]))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 577 576 578 45 (parallel [
            (set (reg:DI 2 cx [orig:306 D.6757 ] [306])
                (plus:DI (reg:DI 2 cx [orig:305 D.6757 ] [305])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (nil))
(insn 578 577 579 45 (parallel [
            (set (reg/f:DI 0 ax [orig:307 D.6756 ] [307])
                (plus:DI (reg/f:DI 0 ax [orig:304 D.6756 ] [304])
                    (reg:DI 2 cx [orig:306 D.6757 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (nil))
(insn 579 578 580 45 (set (reg:QI 0 ax [orig:308 D.6758 ] [308])
        (mem:QI (reg/f:DI 0 ax [orig:307 D.6756 ] [307]) [0 *_297+0 S1 A8])) fmtext_o.cpp:565 93 {*movqi_internal}
     (nil))
(insn 580 579 581 45 (set (mem:QI (reg/f:DI 1 dx [orig:300 D.6756 ] [300]) [0 *_290+0 S1 A8])
        (reg:QI 0 ax [orig:308 D.6758 ] [308])) fmtext_o.cpp:565 93 {*movqi_internal}
     (nil))
(insn 581 580 582 45 (set (reg:SI 0 ax [535])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 582 581 583 45 (set (reg:DI 0 ax [orig:309 D.6738 ] [309])
        (sign_extend:DI (reg:SI 0 ax [535]))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (nil))
(insn 583 582 584 45 (parallel [
            (set (reg:DI 1 dx [orig:310 D.6738 ] [310])
                (ashift:DI (reg:DI 0 ax [orig:309 D.6738 ] [309])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 512 {*ashldi3_1}
     (nil))
(insn 584 583 585 45 (set (reg/f:DI 0 ax [536])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 585 584 586 45 (parallel [
            (set (reg/f:DI 0 ax [orig:311 D.6750 ] [311])
                (plus:DI (reg/f:DI 0 ax [536])
                    (reg:DI 1 dx [orig:310 D.6738 ] [310])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:310 D.6738 ] [310]))
        (nil)))
(insn 586 585 587 45 (set (reg/f:DI 0 ax [orig:312 D.6756 ] [312])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:311 D.6750 ] [311]) [0 _302->character+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 587 586 588 45 (set (reg:SI 1 dx [537])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 588 587 589 45 (set (reg:DI 1 dx [orig:313 D.6757 ] [313])
        (sign_extend:DI (reg:SI 1 dx [537]))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (nil))
(insn 589 588 590 45 (parallel [
            (set (reg:DI 1 dx [orig:314 D.6757 ] [314])
                (plus:DI (reg:DI 1 dx [orig:313 D.6757 ] [313])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (nil))
(insn 590 589 591 45 (parallel [
            (set (reg/f:DI 1 dx [orig:315 D.6756 ] [315])
                (plus:DI (reg:DI 1 dx [orig:314 D.6757 ] [314])
                    (reg/f:DI 0 ax [orig:312 D.6756 ] [312])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (nil))
(insn 591 590 592 45 (set (reg:SI 0 ax [538])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 592 591 593 45 (set (reg:DI 0 ax [orig:316 D.6738 ] [316])
        (sign_extend:DI (reg:SI 0 ax [538]))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (nil))
(insn 593 592 594 45 (parallel [
            (set (reg:DI 2 cx [orig:317 D.6738 ] [317])
                (ashift:DI (reg:DI 0 ax [orig:316 D.6738 ] [316])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 512 {*ashldi3_1}
     (nil))
(insn 594 593 595 45 (set (reg/f:DI 0 ax [539])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 595 594 596 45 (parallel [
            (set (reg/f:DI 0 ax [orig:318 D.6749 ] [318])
                (plus:DI (reg/f:DI 0 ax [539])
                    (reg:DI 2 cx [orig:317 D.6738 ] [317])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:317 D.6738 ] [317]))
        (nil)))
(insn 596 595 597 45 (set (reg/f:DI 0 ax [orig:319 D.6756 ] [319])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:318 D.6749 ] [318]) [0 _309->character+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 597 596 598 45 (set (reg:SI 2 cx [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 598 597 599 45 (set (reg:DI 2 cx [orig:320 D.6757 ] [320])
        (sign_extend:DI (reg:SI 2 cx [540]))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (nil))
(insn 599 598 600 45 (parallel [
            (set (reg:DI 2 cx [orig:321 D.6757 ] [321])
                (plus:DI (reg:DI 2 cx [orig:320 D.6757 ] [320])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (nil))
(insn 600 599 601 45 (parallel [
            (set (reg/f:DI 0 ax [orig:322 D.6756 ] [322])
                (plus:DI (reg/f:DI 0 ax [orig:319 D.6756 ] [319])
                    (reg:DI 2 cx [orig:321 D.6757 ] [321])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (nil))
(insn 601 600 602 45 (set (reg:QI 0 ax [orig:323 D.6758 ] [323])
        (mem:QI (reg/f:DI 0 ax [orig:322 D.6756 ] [322]) [0 *_313+0 S1 A8])) fmtext_o.cpp:566 93 {*movqi_internal}
     (nil))
(insn 602 601 603 45 (set (mem:QI (reg/f:DI 1 dx [orig:315 D.6756 ] [315]) [0 *_306+0 S1 A8])
        (reg:QI 0 ax [orig:323 D.6758 ] [323])) fmtext_o.cpp:566 93 {*movqi_internal}
     (nil))
(insn 603 602 804 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 217 {*addsi_1}
     (nil))
(jump_insn 804 603 805 45 (set (pc)
        (label_ref 604)) fmtext_o.cpp:562 654 {jump}
     (nil)
 -> 604)
;;  succ:       44 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 805 804 607)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 607 805 608 46 116 "" [1 uses])
(note 608 607 609 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 609 608 713 46 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;;              48 [100.0%] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 324 325 326 327 328 329 330 331 332 333 541 542
(code_label 713 609 610 47 119 "" [1 uses])
(note 610 713 611 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 612 47 (set (reg:SI 0 ax [541])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 612 611 613 47 (set (reg:DI 0 ax [orig:324 D.6738 ] [324])
        (sign_extend:DI (reg:SI 0 ax [541]))) fmtext_o.cpp:569 142 {*extendsidi2_rex64}
     (nil))
(insn 613 612 614 47 (parallel [
            (set (reg:DI 1 dx [orig:325 D.6738 ] [325])
                (ashift:DI (reg:DI 0 ax [orig:324 D.6738 ] [324])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 512 {*ashldi3_1}
     (nil))
(insn 614 613 615 47 (set (reg/f:DI 0 ax [542])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:569 89 {*movdi_internal}
     (nil))
(insn 615 614 616 47 (parallel [
            (set (reg/f:DI 0 ax [orig:326 D.6743 ] [326])
                (plus:DI (reg/f:DI 0 ax [542])
                    (reg:DI 1 dx [orig:325 D.6738 ] [325])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:325 D.6738 ] [325]))
        (nil)))
(insn 616 615 617 47 (set (reg/f:DI 0 ax [orig:327 D.6744 ] [327])
        (mem/f:DI (reg/f:DI 0 ax [orig:326 D.6743 ] [326]) [0 *_320+0 S8 A64])) fmtext_o.cpp:569 89 {*movdi_internal}
     (nil))
(insn 617 616 618 47 (set (reg:SI 0 ax [orig:328 D.6737 ] [328])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:327 D.6744 ] [327])
                (const_int 8 [0x8])) [0 _321->np.number+0 S4 A32])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 618 617 619 47 (set (reg:DI 0 ax [orig:329 D.6738 ] [329])
        (sign_extend:DI (reg:SI 0 ax [orig:328 D.6737 ] [328]))) fmtext_o.cpp:569 142 {*extendsidi2_rex64}
     (nil))
(insn 619 618 620 47 (set (reg:SI 1 dx [orig:330 D.6755 ] [330])
        (reg:SI 0 ax [orig:329 D.6738 ] [329])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 620 619 621 47 (set (reg:SI 0 ax [orig:331 D.6755 ] [331])
        (const_int 8 [0x8])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 621 620 622 47 (parallel [
            (set (reg:SI 0 ax [orig:332 D.6755 ] [332])
                (mult:SI (reg:SI 0 ax [orig:331 D.6755 ] [331])
                    (reg:SI 1 dx [orig:330 D.6755 ] [330])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 305 {*mulsi3_1}
     (nil))
(insn 622 621 623 47 (set (reg:SI 0 ax [orig:333 D.6737 ] [333])
        (reg:SI 0 ax [orig:332 D.6755 ] [332])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 623 622 624 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:333 D.6737 ] [333])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) fmtext_o.cpp:569 7 {*cmpsi_1}
     (nil))
(jump_insn 624 623 625 47 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 716)
            (pc))) fmtext_o.cpp:569 612 {*jcc_1}
     (nil)
 -> 716)
;;  succ:       49
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566
(note 625 624 626 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 626 625 627 48 (set (reg:SI 0 ax [543])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 627 626 628 48 (set (reg:DI 0 ax [orig:334 D.6738 ] [334])
        (sign_extend:DI (reg:SI 0 ax [543]))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (nil))
(insn 628 627 629 48 (parallel [
            (set (reg:DI 1 dx [orig:335 D.6738 ] [335])
                (ashift:DI (reg:DI 0 ax [orig:334 D.6738 ] [334])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 512 {*ashldi3_1}
     (nil))
(insn 629 628 630 48 (set (reg/f:DI 0 ax [544])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 630 629 631 48 (parallel [
            (set (reg/f:DI 0 ax [orig:336 D.6750 ] [336])
                (plus:DI (reg/f:DI 0 ax [544])
                    (reg:DI 1 dx [orig:335 D.6738 ] [335])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:335 D.6738 ] [335]))
        (nil)))
(insn 631 630 632 48 (set (reg/f:DI 1 dx [orig:337 D.6756 ] [337])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:336 D.6750 ] [336]) [0 _330->character+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 632 631 633 48 (set (reg:SI 0 ax [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 633 632 634 48 (set (reg:DI 0 ax [orig:338 D.6757 ] [338])
        (sign_extend:DI (reg:SI 0 ax [545]))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (nil))
(insn 634 633 635 48 (parallel [
            (set (reg/f:DI 1 dx [orig:339 D.6756 ] [339])
                (plus:DI (reg/f:DI 1 dx [orig:337 D.6756 ] [337])
                    (reg:DI 0 ax [orig:338 D.6757 ] [338])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (nil))
(insn 635 634 636 48 (set (reg:SI 0 ax [546])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 636 635 637 48 (set (reg:DI 0 ax [orig:340 D.6738 ] [340])
        (sign_extend:DI (reg:SI 0 ax [546]))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (nil))
(insn 637 636 638 48 (parallel [
            (set (reg:DI 2 cx [orig:341 D.6738 ] [341])
                (ashift:DI (reg:DI 0 ax [orig:340 D.6738 ] [340])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 512 {*ashldi3_1}
     (nil))
(insn 638 637 639 48 (set (reg/f:DI 0 ax [547])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 639 638 640 48 (parallel [
            (set (reg/f:DI 0 ax [orig:342 D.6749 ] [342])
                (plus:DI (reg/f:DI 0 ax [547])
                    (reg:DI 2 cx [orig:341 D.6738 ] [341])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:341 D.6738 ] [341]))
        (nil)))
(insn 640 639 641 48 (set (reg/f:DI 0 ax [orig:343 D.6756 ] [343])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:342 D.6749 ] [342]) [0 _336->character+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 641 640 642 48 (set (reg:SI 2 cx [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 642 641 643 48 (set (reg:DI 2 cx [orig:344 D.6757 ] [344])
        (sign_extend:DI (reg:SI 2 cx [548]))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (nil))
(insn 643 642 644 48 (parallel [
            (set (reg:DI 2 cx [orig:345 D.6757 ] [345])
                (plus:DI (reg:DI 2 cx [orig:344 D.6757 ] [344])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (nil))
(insn 644 643 645 48 (parallel [
            (set (reg/f:DI 0 ax [orig:346 D.6756 ] [346])
                (plus:DI (reg/f:DI 0 ax [orig:343 D.6756 ] [343])
                    (reg:DI 2 cx [orig:345 D.6757 ] [345])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (nil))
(insn 645 644 646 48 (set (reg:QI 0 ax [orig:347 D.6758 ] [347])
        (mem:QI (reg/f:DI 0 ax [orig:346 D.6756 ] [346]) [0 *_340+0 S1 A8])) fmtext_o.cpp:570 93 {*movqi_internal}
     (nil))
(insn 646 645 647 48 (set (mem:QI (reg/f:DI 1 dx [orig:339 D.6756 ] [339]) [0 *_333+0 S1 A8])
        (reg:QI 0 ax [orig:347 D.6758 ] [347])) fmtext_o.cpp:570 93 {*movqi_internal}
     (nil))
(insn 647 646 648 48 (set (reg:SI 0 ax [549])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 648 647 649 48 (set (reg:DI 0 ax [orig:348 D.6738 ] [348])
        (sign_extend:DI (reg:SI 0 ax [549]))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 649 648 650 48 (parallel [
            (set (reg:DI 1 dx [orig:349 D.6738 ] [349])
                (ashift:DI (reg:DI 0 ax [orig:348 D.6738 ] [348])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 512 {*ashldi3_1}
     (nil))
(insn 650 649 651 48 (set (reg/f:DI 0 ax [550])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 651 650 652 48 (parallel [
            (set (reg/f:DI 0 ax [orig:350 D.6750 ] [350])
                (plus:DI (reg/f:DI 0 ax [550])
                    (reg:DI 1 dx [orig:349 D.6738 ] [349])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:349 D.6738 ] [349]))
        (nil)))
(insn 652 651 653 48 (set (reg/f:DI 0 ax [orig:351 D.6756 ] [351])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:350 D.6750 ] [350]) [0 _345->character+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 653 652 654 48 (set (reg:SI 1 dx [551])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 654 653 655 48 (set (reg:DI 1 dx [orig:352 D.6757 ] [352])
        (sign_extend:DI (reg:SI 1 dx [551]))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 655 654 656 48 (parallel [
            (set (reg:DI 1 dx [orig:353 D.6757 ] [353])
                (plus:DI (reg:DI 1 dx [orig:352 D.6757 ] [352])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (nil))
(insn 656 655 657 48 (parallel [
            (set (reg/f:DI 1 dx [orig:354 D.6756 ] [354])
                (plus:DI (reg:DI 1 dx [orig:353 D.6757 ] [353])
                    (reg/f:DI 0 ax [orig:351 D.6756 ] [351])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (nil))
(insn 657 656 658 48 (set (reg:SI 0 ax [552])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 658 657 659 48 (set (reg:DI 0 ax [orig:355 D.6738 ] [355])
        (sign_extend:DI (reg:SI 0 ax [552]))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 659 658 660 48 (parallel [
            (set (reg:DI 2 cx [orig:356 D.6738 ] [356])
                (ashift:DI (reg:DI 0 ax [orig:355 D.6738 ] [355])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 512 {*ashldi3_1}
     (nil))
(insn 660 659 661 48 (set (reg/f:DI 0 ax [553])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 661 660 662 48 (parallel [
            (set (reg/f:DI 0 ax [orig:357 D.6749 ] [357])
                (plus:DI (reg/f:DI 0 ax [553])
                    (reg:DI 2 cx [orig:356 D.6738 ] [356])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:356 D.6738 ] [356]))
        (nil)))
(insn 662 661 663 48 (set (reg/f:DI 0 ax [orig:358 D.6756 ] [358])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:357 D.6749 ] [357]) [0 _352->character+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 663 662 664 48 (set (reg:SI 2 cx [554])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 664 663 665 48 (set (reg:DI 2 cx [orig:359 D.6757 ] [359])
        (sign_extend:DI (reg:SI 2 cx [554]))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 665 664 666 48 (parallel [
            (set (reg:DI 2 cx [orig:360 D.6757 ] [360])
                (plus:DI (reg:DI 2 cx [orig:359 D.6757 ] [359])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (nil))
(insn 666 665 667 48 (parallel [
            (set (reg/f:DI 0 ax [orig:361 D.6756 ] [361])
                (plus:DI (reg/f:DI 0 ax [orig:358 D.6756 ] [358])
                    (reg:DI 2 cx [orig:360 D.6757 ] [360])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (nil))
(insn 667 666 668 48 (set (reg:QI 0 ax [orig:362 D.6758 ] [362])
        (mem:QI (reg/f:DI 0 ax [orig:361 D.6756 ] [361]) [0 *_356+0 S1 A8])) fmtext_o.cpp:571 93 {*movqi_internal}
     (nil))
(insn 668 667 669 48 (set (mem:QI (reg/f:DI 1 dx [orig:354 D.6756 ] [354]) [0 *_349+0 S1 A8])
        (reg:QI 0 ax [orig:362 D.6758 ] [362])) fmtext_o.cpp:571 93 {*movqi_internal}
     (nil))
(insn 669 668 670 48 (set (reg:SI 0 ax [555])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 670 669 671 48 (set (reg:DI 0 ax [orig:363 D.6738 ] [363])
        (sign_extend:DI (reg:SI 0 ax [555]))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (nil))
(insn 671 670 672 48 (parallel [
            (set (reg:DI 1 dx [orig:364 D.6738 ] [364])
                (ashift:DI (reg:DI 0 ax [orig:363 D.6738 ] [363])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 512 {*ashldi3_1}
     (nil))
(insn 672 671 673 48 (set (reg/f:DI 0 ax [556])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 673 672 674 48 (parallel [
            (set (reg/f:DI 0 ax [orig:365 D.6750 ] [365])
                (plus:DI (reg/f:DI 0 ax [556])
                    (reg:DI 1 dx [orig:364 D.6738 ] [364])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:364 D.6738 ] [364]))
        (nil)))
(insn 674 673 675 48 (set (reg/f:DI 0 ax [orig:366 D.6756 ] [366])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:365 D.6750 ] [365]) [0 _361->character+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 675 674 676 48 (set (reg:SI 1 dx [557])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 676 675 677 48 (set (reg:DI 1 dx [orig:367 D.6757 ] [367])
        (sign_extend:DI (reg:SI 1 dx [557]))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (nil))
(insn 677 676 678 48 (parallel [
            (set (reg:DI 1 dx [orig:368 D.6757 ] [368])
                (plus:DI (reg:DI 1 dx [orig:367 D.6757 ] [367])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (nil))
(insn 678 677 679 48 (parallel [
            (set (reg/f:DI 1 dx [orig:369 D.6756 ] [369])
                (plus:DI (reg:DI 1 dx [orig:368 D.6757 ] [368])
                    (reg/f:DI 0 ax [orig:366 D.6756 ] [366])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (nil))
(insn 679 678 680 48 (set (reg:SI 0 ax [558])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 680 679 681 48 (set (reg:DI 0 ax [orig:370 D.6738 ] [370])
        (sign_extend:DI (reg:SI 0 ax [558]))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (nil))
(insn 681 680 682 48 (parallel [
            (set (reg:DI 2 cx [orig:371 D.6738 ] [371])
                (ashift:DI (reg:DI 0 ax [orig:370 D.6738 ] [370])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 512 {*ashldi3_1}
     (nil))
(insn 682 681 683 48 (set (reg/f:DI 0 ax [559])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 683 682 684 48 (parallel [
            (set (reg/f:DI 0 ax [orig:372 D.6749 ] [372])
                (plus:DI (reg/f:DI 0 ax [559])
                    (reg:DI 2 cx [orig:371 D.6738 ] [371])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:371 D.6738 ] [371]))
        (nil)))
(insn 684 683 685 48 (set (reg/f:DI 0 ax [orig:373 D.6756 ] [373])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:372 D.6749 ] [372]) [0 _368->character+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 685 684 686 48 (set (reg:SI 2 cx [560])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 686 685 687 48 (set (reg:DI 2 cx [orig:374 D.6757 ] [374])
        (sign_extend:DI (reg:SI 2 cx [560]))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (nil))
(insn 687 686 688 48 (parallel [
            (set (reg:DI 2 cx [orig:375 D.6757 ] [375])
                (plus:DI (reg:DI 2 cx [orig:374 D.6757 ] [374])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (nil))
(insn 688 687 689 48 (parallel [
            (set (reg/f:DI 0 ax [orig:376 D.6756 ] [376])
                (plus:DI (reg/f:DI 0 ax [orig:373 D.6756 ] [373])
                    (reg:DI 2 cx [orig:375 D.6757 ] [375])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (nil))
(insn 689 688 690 48 (set (reg:QI 0 ax [orig:377 D.6758 ] [377])
        (mem:QI (reg/f:DI 0 ax [orig:376 D.6756 ] [376]) [0 *_372+0 S1 A8])) fmtext_o.cpp:572 93 {*movqi_internal}
     (nil))
(insn 690 689 691 48 (set (mem:QI (reg/f:DI 1 dx [orig:369 D.6756 ] [369]) [0 *_365+0 S1 A8])
        (reg:QI 0 ax [orig:377 D.6758 ] [377])) fmtext_o.cpp:572 93 {*movqi_internal}
     (nil))
(insn 691 690 692 48 (set (reg:SI 0 ax [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 692 691 693 48 (set (reg:DI 0 ax [orig:378 D.6738 ] [378])
        (sign_extend:DI (reg:SI 0 ax [561]))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (nil))
(insn 693 692 694 48 (parallel [
            (set (reg:DI 1 dx [orig:379 D.6738 ] [379])
                (ashift:DI (reg:DI 0 ax [orig:378 D.6738 ] [378])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 512 {*ashldi3_1}
     (nil))
(insn 694 693 695 48 (set (reg/f:DI 0 ax [562])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 695 694 696 48 (parallel [
            (set (reg/f:DI 0 ax [orig:380 D.6750 ] [380])
                (plus:DI (reg/f:DI 0 ax [562])
                    (reg:DI 1 dx [orig:379 D.6738 ] [379])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:379 D.6738 ] [379]))
        (nil)))
(insn 696 695 697 48 (set (reg/f:DI 0 ax [orig:381 D.6756 ] [381])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:380 D.6750 ] [380]) [0 _377->character+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 697 696 698 48 (set (reg:SI 1 dx [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 698 697 699 48 (set (reg:DI 1 dx [orig:382 D.6757 ] [382])
        (sign_extend:DI (reg:SI 1 dx [563]))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (nil))
(insn 699 698 700 48 (parallel [
            (set (reg:DI 1 dx [orig:383 D.6757 ] [383])
                (plus:DI (reg:DI 1 dx [orig:382 D.6757 ] [382])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (nil))
(insn 700 699 701 48 (parallel [
            (set (reg/f:DI 1 dx [orig:384 D.6756 ] [384])
                (plus:DI (reg:DI 1 dx [orig:383 D.6757 ] [383])
                    (reg/f:DI 0 ax [orig:381 D.6756 ] [381])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (nil))
(insn 701 700 702 48 (set (reg:SI 0 ax [564])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 702 701 703 48 (set (reg:DI 0 ax [orig:385 D.6738 ] [385])
        (sign_extend:DI (reg:SI 0 ax [564]))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (nil))
(insn 703 702 704 48 (parallel [
            (set (reg:DI 2 cx [orig:386 D.6738 ] [386])
                (ashift:DI (reg:DI 0 ax [orig:385 D.6738 ] [385])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 512 {*ashldi3_1}
     (nil))
(insn 704 703 705 48 (set (reg/f:DI 0 ax [565])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 705 704 706 48 (parallel [
            (set (reg/f:DI 0 ax [orig:387 D.6749 ] [387])
                (plus:DI (reg/f:DI 0 ax [565])
                    (reg:DI 2 cx [orig:386 D.6738 ] [386])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:386 D.6738 ] [386]))
        (nil)))
(insn 706 705 707 48 (set (reg/f:DI 2 cx [orig:388 D.6756 ] [388])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:387 D.6749 ] [387]) [0 _384->character+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 707 706 708 48 (set (reg:SI 0 ax [566])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 708 707 709 48 (set (reg:DI 0 ax [orig:389 D.6757 ] [389])
        (sign_extend:DI (reg:SI 0 ax [566]))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (nil))
(insn 709 708 710 48 (parallel [
            (set (reg/f:DI 0 ax [orig:390 D.6756 ] [390])
                (plus:DI (reg:DI 0 ax [orig:389 D.6757 ] [389])
                    (reg/f:DI 2 cx [orig:388 D.6756 ] [388])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (nil))
(insn 710 709 711 48 (set (reg:QI 0 ax [orig:391 D.6758 ] [391])
        (mem:QI (reg/f:DI 0 ax [orig:390 D.6756 ] [390]) [0 *_387+0 S1 A8])) fmtext_o.cpp:573 93 {*movqi_internal}
     (nil))
(insn 711 710 712 48 (set (mem:QI (reg/f:DI 1 dx [orig:384 D.6756 ] [384]) [0 *_381+0 S1 A8])
        (reg:QI 0 ax [orig:391 D.6758 ] [391])) fmtext_o.cpp:573 93 {*movqi_internal}
     (nil))
(insn 712 711 806 48 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 217 {*addsi_1}
     (nil))
(jump_insn 806 712 807 48 (set (pc)
        (label_ref 713)) fmtext_o.cpp:569 654 {jump}
     (nil)
 -> 713)
;;  succ:       47 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 807 806 716)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 392 393 394 395 396 567 568
(code_label 716 807 717 49 117 "" [2 uses])
(note 717 716 718 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 718 717 719 49 (set (reg:SI 0 ax [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 719 718 720 49 (set (reg:DI 0 ax [orig:392 D.6738 ] [392])
        (sign_extend:DI (reg:SI 0 ax [567]))) fmtext_o.cpp:580 142 {*extendsidi2_rex64}
     (nil))
(insn 720 719 721 49 (parallel [
            (set (reg:DI 1 dx [orig:393 D.6738 ] [393])
                (ashift:DI (reg:DI 0 ax [orig:392 D.6738 ] [392])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:580 512 {*ashldi3_1}
     (nil))
(insn 721 720 722 49 (set (reg/f:DI 0 ax [568])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:580 89 {*movdi_internal}
     (nil))
(insn 722 721 723 49 (parallel [
            (set (reg/f:DI 0 ax [orig:394 D.6743 ] [394])
                (plus:DI (reg/f:DI 0 ax [568])
                    (reg:DI 1 dx [orig:393 D.6738 ] [393])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:580 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:393 D.6738 ] [393]))
        (nil)))
(insn 723 722 724 49 (set (reg/f:DI 0 ax [orig:395 D.6744 ] [395])
        (mem/f:DI (reg/f:DI 0 ax [orig:394 D.6743 ] [394]) [0 *_393+0 S8 A64])) fmtext_o.cpp:580 89 {*movdi_internal}
     (nil))
(insn 724 723 725 49 (set (reg:SI 0 ax [orig:396 D.6737 ] [396])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:395 D.6744 ] [395])
                (const_int 12 [0xc])) [0 _394->ebytes.number+0 S4 A32])) fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 725 724 726 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:396 D.6737 ] [396])
            (const_int 2 [0x2]))) fmtext_o.cpp:580 7 {*cmpsi_1}
     (nil))
(jump_insn 726 725 727 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 768)
            (pc))) fmtext_o.cpp:580 612 {*jcc_1}
     (nil)
 -> 768)
;;  succ:       50 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 397 398 399 400 401 569 570 571
(note 727 726 728 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 728 727 729 50 (set (reg:SI 0 ax [569])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
(insn 729 728 730 50 (set (reg:DI 0 ax [orig:397 D.6738 ] [397])
        (sign_extend:DI (reg:SI 0 ax [569]))) fmtext_o.cpp:581 142 {*extendsidi2_rex64}
     (nil))
(insn 730 729 731 50 (parallel [
            (set (reg:DI 1 dx [orig:398 D.6738 ] [398])
                (ashift:DI (reg:DI 0 ax [orig:397 D.6738 ] [397])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 512 {*ashldi3_1}
     (nil))
(insn 731 730 732 50 (set (reg/f:DI 0 ax [570])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:581 89 {*movdi_internal}
     (nil))
(insn 732 731 733 50 (parallel [
            (set (reg/f:DI 0 ax [orig:399 D.6743 ] [399])
                (plus:DI (reg/f:DI 0 ax [570])
                    (reg:DI 1 dx [orig:398 D.6738 ] [398])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:398 D.6738 ] [398]))
        (nil)))
(insn 733 732 734 50 (set (reg/f:DI 0 ax [orig:400 D.6744 ] [400])
        (mem/f:DI (reg/f:DI 0 ax [orig:399 D.6743 ] [399]) [0 *_398+0 S8 A64])) fmtext_o.cpp:581 89 {*movdi_internal}
     (nil))
(insn 734 733 735 50 (set (reg:SI 0 ax [orig:401 D.6737 ] [401])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:400 D.6744 ] [400])
                (const_int 8 [0x8])) [0 _399->np.number+0 S4 A32])) fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
(insn 735 734 736 50 (parallel [
            (set (reg:SI 0 ax [571])
                (plus:SI (reg:SI 0 ax [orig:401 D.6737 ] [401])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 217 {*addsi_1}
     (nil))
(insn 736 735 765 50 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (reg:SI 0 ax [571])) fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
;;  succ:       51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;;              52 [100.0%] 
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 765 736 737 51 120 "" [1 uses])
(note 737 765 738 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 738 737 739 51 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:581 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 739 738 740 51 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 768)
            (pc))) fmtext_o.cpp:581 612 {*jcc_1}
     (nil)
 -> 768)
;;  succ:       53
;;              52 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 572 573 574 575 576 577
(note 740 739 741 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 741 740 742 52 (set (reg:SI 0 ax [572])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 742 741 743 52 (set (reg:DI 0 ax [orig:402 D.6738 ] [402])
        (sign_extend:DI (reg:SI 0 ax [572]))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 743 742 744 52 (parallel [
            (set (reg:DI 1 dx [orig:403 D.6738 ] [403])
                (ashift:DI (reg:DI 0 ax [orig:402 D.6738 ] [402])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 512 {*ashldi3_1}
     (nil))
(insn 744 743 745 52 (set (reg/f:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 745 744 746 52 (parallel [
            (set (reg/f:DI 0 ax [orig:404 D.6749 ] [404])
                (plus:DI (reg/f:DI 0 ax [573])
                    (reg:DI 1 dx [orig:403 D.6738 ] [403])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:403 D.6738 ] [403]))
        (nil)))
(insn 746 745 747 52 (set (reg/f:DI 0 ax [orig:405 D.6753 ] [405])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:404 D.6749 ] [404]) [0 _404->lo+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 747 746 748 52 (set (reg:SI 1 dx [574])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 748 747 749 52 (set (reg:DI 1 dx [orig:406 D.6738 ] [406])
        (sign_extend:DI (reg:SI 1 dx [574]))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 749 748 750 52 (parallel [
            (set (reg:DI 1 dx [orig:407 D.6738 ] [407])
                (ashift:DI (reg:DI 1 dx [orig:406 D.6738 ] [406])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 512 {*ashldi3_1}
     (nil))
(insn 750 749 751 52 (parallel [
            (set (reg/f:DI 1 dx [orig:408 D.6753 ] [408])
                (plus:DI (reg:DI 1 dx [orig:407 D.6738 ] [407])
                    (reg/f:DI 0 ax [orig:405 D.6753 ] [405])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 218 {*adddi_1}
     (nil))
(insn 751 750 752 52 (set (reg:SI 0 ax [575])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 752 751 753 52 (set (reg:DI 0 ax [orig:409 D.6738 ] [409])
        (sign_extend:DI (reg:SI 0 ax [575]))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 753 752 754 52 (parallel [
            (set (reg:DI 2 cx [orig:410 D.6738 ] [410])
                (ashift:DI (reg:DI 0 ax [orig:409 D.6738 ] [409])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 512 {*ashldi3_1}
     (nil))
(insn 754 753 755 52 (set (reg/f:DI 0 ax [576])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 755 754 756 52 (parallel [
            (set (reg/f:DI 0 ax [orig:411 D.6749 ] [411])
                (plus:DI (reg/f:DI 0 ax [576])
                    (reg:DI 2 cx [orig:410 D.6738 ] [410])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:410 D.6738 ] [410]))
        (nil)))
(insn 756 755 757 52 (set (reg/f:DI 0 ax [orig:412 D.6759 ] [412])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:411 D.6749 ] [411]) [0 _411->sh+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 757 756 758 52 (set (reg:SI 2 cx [577])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 758 757 759 52 (set (reg:DI 2 cx [orig:413 D.6738 ] [413])
        (sign_extend:DI (reg:SI 2 cx [577]))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 759 758 760 52 (parallel [
            (set (reg:DI 2 cx [orig:414 D.6738 ] [414])
                (ashift:DI (reg:DI 2 cx [orig:413 D.6738 ] [413])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 512 {*ashldi3_1}
     (nil))
(insn 760 759 761 52 (parallel [
            (set (reg/f:DI 0 ax [orig:415 D.6759 ] [415])
                (plus:DI (reg/f:DI 0 ax [orig:412 D.6759 ] [412])
                    (reg:DI 2 cx [orig:414 D.6738 ] [414])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 218 {*adddi_1}
     (nil))
(insn 761 760 762 52 (set (reg:HI 0 ax [orig:416 D.6746 ] [416])
        (mem:HI (reg/f:DI 0 ax [orig:415 D.6759 ] [415]) [0 *_415+0 S2 A16])) fmtext_o.cpp:582 92 {*movhi_internal}
     (nil))
(insn 762 761 763 52 (set (reg:DI 0 ax [orig:417 D.6760 ] [417])
        (sign_extend:DI (reg:HI 0 ax [orig:416 D.6746 ] [416]))) fmtext_o.cpp:582 145 {extendhidi2}
     (nil))
(insn 763 762 764 52 (set (mem:DI (reg/f:DI 1 dx [orig:408 D.6753 ] [408]) [0 *_408+0 S8 A64])
        (reg:DI 0 ax [orig:417 D.6760 ] [417])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 764 763 808 52 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 217 {*addsi_1}
     (nil))
(jump_insn 808 764 809 52 (set (pc)
        (label_ref 765)) fmtext_o.cpp:581 654 {jump}
     (nil)
 -> 765)
;;  succ:       51 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 809 808 768)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              51
;;              49
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 768 809 769 53 93 "" [3 uses])
(note 769 768 770 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 770 769 810 53 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:463 217 {*addsi_1}
     (nil))
(jump_insn 810 770 811 53 (set (pc)
        (label_ref 771)) fmtext_o.cpp:463 654 {jump}
     (nil)
 -> 771)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 811 810 774)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 418 419
(code_label 774 811 775 54 92 "" [1 uses])
(note 775 774 776 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 776 775 779 54 (set (reg:SI 0 ax [orig:418 D.6737 ] [418])
        (const_int 1 [0x1])) fmtext_o.cpp:588 90 {*movsi_internal}
     (nil))
(insn 779 776 783 54 (set (reg:SI 0 ax [orig:419 <retval> ] [419])
        (reg:SI 0 ax [orig:418 D.6737 ] [418])) fmtext_o.cpp:588 90 {*movsi_internal}
     (nil))
(insn 783 779 784 54 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:419 <retval> ] [419])) fmtext_o.cpp:590 90 {*movsi_internal}
     (nil))
(insn 784 783 812 54 (use (reg/i:SI 0 ax)) fmtext_o.cpp:590 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 812 784 0 NOTE_INSN_DELETED)

;; Function int read_PE_table(char*, int*, PE_info*) (_Z13read_PE_tablePcPiP7PE_info, funcdef_no=7, decl_uid=5421, cgraph_uid=7, symbol_order=7)

      Creating newreg=110
Removing SCRATCH in insn #6 (nop 2)
rescanning insn with uid = 6.
      Creating newreg=111
Removing SCRATCH in insn #91 (nop 3)
rescanning insn with uid = 91.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r110
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 57:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 63:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 70:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r111
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 11
   Insn 93: point = 0
  BB 12
   Insn 96: point = 0
  BB 10
   Insn 92: point = 0
   Insn 91: point = 0
   Insn 90: point = 1
   Insn 86: point = 2
  BB 3
   Insn 100: point = 5
   Insn 24: point = 5
   Insn 23: point = 6
   Insn 22: point = 6
   Insn 21: point = 6
   Insn 20: point = 6
   Insn 19: point = 7
  BB 9
   Insn 81: point = 8
  BB 8
   Insn 78: point = 9
   Insn 77: point = 9
   Insn 76: point = 10
  BB 7
   Insn 74: point = 11
   Insn 73: point = 11
   Insn 72: point = 11
   Insn 71: point = 12
   Insn 70: point = 13
   Insn 69: point = 15
  BB 5
   Insn 44: point = 16
   Insn 43: point = 16
   Insn 42: point = 17
   Insn 41: point = 18
   Insn 40: point = 19
   Insn 39: point = 20
   Insn 38: point = 20
   Insn 37: point = 21
  BB 6
   Insn 102: point = 22
   Insn 63: point = 22
   Insn 62: point = 22
   Insn 61: point = 22
   Insn 60: point = 22
   Insn 59: point = 23
   Insn 58: point = 23
   Insn 57: point = 24
   Insn 56: point = 25
   Insn 55: point = 27
   Insn 54: point = 28
   Insn 53: point = 30
   Insn 52: point = 32
   Insn 51: point = 33
   Insn 50: point = 33
   Insn 49: point = 34
   Insn 48: point = 34
   Insn 47: point = 35
   Insn 46: point = 36
  BB 4
   Insn 35: point = 37
   Insn 34: point = 37
   Insn 33: point = 37
   Insn 32: point = 38
   Insn 31: point = 38
   Insn 30: point = 39
   Insn 29: point = 40
  BB 2
   Insn 17: point = 41
   Insn 16: point = 41
   Insn 15: point = 41
   Insn 14: point = 42
   Insn 13: point = 43
   Insn 12: point = 43
   Insn 11: point = 44
   Insn 10: point = 44
   Insn 9: point = 45
   Insn 6: point = 45
   Insn 4: point = 47
   Insn 3: point = 47
   Insn 2: point = 47
 r87: [8..8] [3..5]
 r88: [41..42]
 r89: [18..19]
 r90: [16..17]
 r91: [29..30]
 r92: [26..28]
 r93: [23..25]
 r94: [11..13]
 r95: [1..2]
 r96: [43..44]
 r97: [6..7]
 r98: [38..40]
 r99: [37..39]
 r100: [20..21]
 r101: [34..36]
 r102: [33..35]
 r103: [31..32]
 r104: [26..27]
 r105: [22..24]
 r106: [14..15]
 r107: [11..12]
 r108: [9..10]
 r110: [45..46]
 r111: [0..0]
Compressing live ranges: from 47 to 38 - 80%
Ranges after the compression:
 r87: [7..7] [3..4]
 r88: [32..33]
 r89: [16..17]
 r90: [14..15]
 r91: [24..25]
 r92: [22..23]
 r93: [20..21]
 r94: [10..11]
 r95: [1..2]
 r96: [34..35]
 r97: [5..6]
 r98: [30..31]
 r99: [30..31]
 r100: [18..19]
 r101: [28..29]
 r102: [28..29]
 r103: [26..27]
 r104: [22..23]
 r105: [20..21]
 r106: [12..13]
 r107: [10..11]
 r108: [8..9]
 r110: [36..37]
 r111: [0..0]

********** Assignment #1: **********

	 Assigning to 110 (cl=INDEX_REGS, orig=110, freq=1, tfirst=110, tfreq=1)...
	   Assign 0 to reload r110 (freq=1)
	 Assigning to 111 (cl=INDEX_REGS, orig=111, freq=1, tfirst=111, tfreq=1)...
	   Assign 2 to reload r111 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 81
changing reg in insn 24
changing reg in insn 86
changing reg in insn 14
changing reg in insn 15
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 70
changing reg in insn 72
changing reg in insn 86
changing reg in insn 90
changing reg in insn 10
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 46
changing reg in insn 48
changing reg in insn 47
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 60
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 76
changing reg in insn 77
changing reg in insn 6
changing reg in insn 91
deleting insn with uid = 31.
deleting insn with uid = 48.
deleting insn with uid = 58.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 93.


int read_PE_table(char*, int*, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={31d,23u} r1={14d,6u,1e} r2={10d} r4={14d,6u} r5={16d,8u} r6={1d,37u} r7={1d,20u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={21d,5u} r18={8d} r19={8d} r20={1d,1u,2e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 756{647d,106u,3e} in 67{59 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 96
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])
        (reg:DI 5 di [ filename ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])
        (reg:DI 4 si [ pe_table ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 pe_info+0 S8 A64])
        (reg:DI 1 dx [ pe_info ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (nil))
(note 5 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 5 9 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6773+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [110])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:592 986 {stack_tls_protect_set_di}
     (nil))
(insn 9 6 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:594 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f93b2317360 *.LC22>)) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f93b2574510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:598 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [orig:88 D.6769 ] [88])
        (reg:DI 0 ax)) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.6769 ] [88])) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:600 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 17 16 18 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) fmtext_o.cpp:600 612 {*jcc_1}
     (nil)
 -> 27)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 97
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])) fmtext_o.cpp:601 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [97])) fmtext_o.cpp:601 89 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f93b23173f0 *.LC23>)) fmtext_o.cpp:601 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:601 93 {*movqi_internal}
     (nil))
(call_insn 23 22 24 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f93b27b65e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:601 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 24 23 100 3 (set (reg:SI 0 ax [orig:87 D.6768 ] [87])
        (const_int 0 [0])) fmtext_o.cpp:602 90 {*movsi_internal}
     (nil))
(jump_insn 100 24 101 3 (set (pc)
        (label_ref 84)) fmtext_o.cpp:602 654 {jump}
     (nil)
 -> 84)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 101 100 27)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 99
(code_label 27 101 28 4 124 "" [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:DI 1 dx [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 30 29 32 4 (parallel [
            (set (reg:DI 0 ax [99])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:605 218 {*adddi_1}
     (nil))
(insn 32 30 33 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:605 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:605 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 35 34 64 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:607 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 100
(code_label 64 35 36 5 127 "" [1 uses])
(note 36 64 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:609 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) fmtext_o.cpp:609 89 {*movdi_internal}
     (nil))
(call_insn 39 38 40 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x7f93b2586510 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:609 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 40 39 41 5 (set (reg:SI 0 ax [orig:89 D.6768 ] [89])
        (reg:SI 0 ax)) fmtext_o.cpp:609 90 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.6768 ] [89])
            (const_int 0 [0]))) fmtext_o.cpp:609 3 {*cmpsi_ccno_1}
     (nil))
(insn 42 41 43 5 (set (reg:QI 0 ax [orig:90 D.6770 ] [90])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:609 607 {*setcc_qi}
     (nil))
(insn 43 42 44 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 D.6770 ] [90])
            (const_int 0 [0]))) fmtext_o.cpp:609 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 44 43 45 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) fmtext_o.cpp:609 612 {*jcc_1}
     (nil)
 -> 67)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 101 102 103 104 105
(note 45 44 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 6 (set (reg:DI 1 dx [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 47 46 49 6 (parallel [
            (set (reg:DI 0 ax [102])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:610 218 {*adddi_1}
     (nil))
(insn 49 47 50 6 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:610 90 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(call_insn 51 50 52 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f93b257aaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:610 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 52 51 53 6 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:611 90 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:DI 0 ax [orig:91 D.6771 ] [91])
        (sign_extend:DI (reg:SI 0 ax [103]))) fmtext_o.cpp:611 142 {*extendsidi2_rex64}
     (nil))
(insn 54 53 55 6 (parallel [
            (set (reg:DI 1 dx [orig:92 D.6771 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.6771 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 512 {*ashldi3_1}
     (nil))
(insn 55 54 56 6 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:611 89 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg/f:DI 1 dx [orig:93 D.6772 ] [93])
                (plus:DI (reg:DI 1 dx [orig:92 D.6771 ] [92])
                    (reg/f:DI 0 ax [104])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.6771 ] [92]))
        (nil)))
(insn 57 56 59 6 (parallel [
            (set (reg:DI 0 ax [105])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 218 {*adddi_1}
     (nil))
(insn 59 57 60 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f93b236aea0 *.LC36>)) fmtext_o.cpp:611 89 {*movdi_internal}
     (nil))
(insn 60 59 61 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [105])) fmtext_o.cpp:611 89 {*movdi_internal}
     (nil))
(insn 61 60 62 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:611 93 {*movqi_internal}
     (nil))
(call_insn 62 61 63 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f93b27b7d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:611 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 63 62 102 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:612 217 {*addsi_1}
     (nil))
(jump_insn 102 63 103 6 (set (pc)
        (label_ref 64)) fmtext_o.cpp:609 654 {jump}
     (nil)
 -> 64)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 103 102 67)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 106 107
(code_label 67 103 68 7 126 "" [1 uses])
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:615 90 {*movsi_internal}
     (nil))
(insn 70 69 71 7 (parallel [
            (set (reg:SI 1 dx [orig:94 D.6768 ] [94])
                (plus:SI (reg:SI 0 ax [106])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:615 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 71 70 72 7 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 72 71 73 7 (set (mem/j:SI (reg/f:DI 0 ax [107]) [0 pe_info_28(D)->number_pe+0 S4 A32])
        (reg:SI 1 dx [orig:94 D.6768 ] [94])) fmtext_o.cpp:615 90 {*movsi_internal}
     (nil))
(insn 73 72 74 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 74 73 75 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) fmtext_o.cpp:618 612 {*jcc_1}
     (nil)
 -> 79)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108
(note 75 74 76 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 8 (set (reg:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:619 89 {*movdi_internal}
     (nil))
(insn 77 76 78 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [108])) fmtext_o.cpp:619 89 {*movdi_internal}
     (nil))
(call_insn 78 77 79 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f93b25741b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:619 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 79 78 80 9 128 "" [1 uses])
(note 80 79 81 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 84 9 (set (reg:SI 0 ax [orig:87 D.6768 ] [87])
        (const_int 1 [0x1])) fmtext_o.cpp:622 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 95
(code_label 84 81 85 10 129 "" [1 uses])
(note 85 84 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 90 10 (set (reg:SI 0 ax [orig:95 <retval> ] [95])
        (reg:SI 0 ax [orig:87 D.6768 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 90 86 91 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:95 <retval> ] [95])) fmtext_o.cpp:623 90 {*movsi_internal}
     (nil))
(insn 91 90 92 10 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6773+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [111]))
        ]) fmtext_o.cpp:623 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 92 91 98 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) fmtext_o.cpp:623 612 {*jcc_1}
     (nil)
 -> 95)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 98 92 93 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(call_insn 93 98 94 11 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f93b26b3af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:623 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 95)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 95 94 99 12 130 "" [1 uses])
(note 99 95 96 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 96 99 104 12 (use (reg/i:SI 0 ax)) fmtext_o.cpp:623 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 104 96 0 NOTE_INSN_DELETED)
