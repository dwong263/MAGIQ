
;; Function int read_procpar(Procpar_info*, char*) (_Z12read_procparP12Procpar_infoPc, funcdef_no=2, decl_uid=5386, cgraph_uid=2, symbol_order=2)

      Creating newreg=345
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
      Creating newreg=346
Removing SCRATCH in insn #1011 (nop 3)
rescanning insn with uid = 1011.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=50080, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=50064, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r345
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 60:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 61:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 62:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 66:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 90:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 97:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 102:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 103:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 107:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 115:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 143:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 151:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 155:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 156:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 160:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 162:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 172:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 180:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 201:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 202:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 206:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 207:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 208:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 211:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 213:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 218:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 219:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 224:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 225:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 233:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 247:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 254:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 255:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 259:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 260:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 261:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 264:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 267:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 272:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 273:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 279:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 287:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 292:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 301:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 308:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 309:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 313:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 314:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 315:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 318:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 319:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 321:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 326:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 327:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 333:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 341:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 355:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 362:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 363:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 367:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 368:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 369:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 372:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 374:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 377:  (0) r  (1) Yj {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 378:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 379:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 385:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 393:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 398:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 407:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 414:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 415:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 419:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 420:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 421:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 424:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 425:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 426:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 429:  (0) r  (1) Yj {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 431:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 436:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 437:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 445:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 459:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 466:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 467:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 471:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 472:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 473:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 476:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 477:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 478:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 484:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 489:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 490:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 498:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 512:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 519:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 520:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 524:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 525:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 526:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 529:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 531:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 536:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 537:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 542:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 543:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 550:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 551:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 556:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 562:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 565:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 572:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 573:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 577:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 578:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 579:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 582:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 584:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 589:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 590:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 595:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 596:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 603:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 604:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 606:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 609:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 611:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 618:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 625:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 626:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 628:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 630:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 631:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 632:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 635:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 636:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 637:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 639:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 641:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 642:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 643:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 648:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 649:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 656:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 657:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 659:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 661:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 667:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 671:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 678:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 679:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 683:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 684:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 685:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 688:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 689:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 690:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 696:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 701:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 702:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 704:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 709:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 710:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 715:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 719:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 720:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 724:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 725:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 731:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 732:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 734:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 736:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 737:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 738:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 739:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 741:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 742:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 743:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 745:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 748:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 749:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 754:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 755:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 762:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 763:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 765:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 767:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 768:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 770:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 772:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 774:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 777:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 778:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 779:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 780:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 784:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 785:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 789:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 790:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 791:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 794:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 795:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 796:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 798:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 800:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 801:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 802:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 807:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 808:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 810:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 812:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 815:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 816:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 820:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 821:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 823:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 825:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 826:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 827:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 830:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 831:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 832:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 833:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 837:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 838:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 840:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 842:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 843:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 844:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 845:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 847:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 848:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 849:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 851:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 853:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 854:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 855:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 860:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 861:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 863:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 865:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 868:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 869:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 871:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 873:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 874:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 876:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 878:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 879:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 880:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 883:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 884:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 885:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 886:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 890:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 891:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 893:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 895:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 896:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 897:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 898:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 900:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 901:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 902:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 904:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 906:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 907:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 908:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 913:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 914:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 916:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 918:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 921:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 922:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 924:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 926:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 927:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 929:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 931:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 932:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 933:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 936:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 937:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 938:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 939:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 943:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 944:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 946:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 948:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 949:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 950:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 951:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 953:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 954:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 955:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 957:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 959:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 960:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 961:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 964:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 965:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 967:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 970:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 972:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 974:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 975:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 976:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 979:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 980:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 981:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 982:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 990:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 993:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 994:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 995:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 997:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 998:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1000:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1003:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1011:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r346
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1013:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82

********** Pseudo live ranges #1: **********

  BB 3
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 23: point = 0
   Insn 22: point = 0
  BB 5
   Insn 47: point = 0
   Insn 46: point = 0
   Insn 45: point = 0
   Insn 44: point = 0
  BB 9
   Insn 93: point = 0
   Insn 92: point = 0
   Insn 91: point = 0
   Insn 90: point = 0
  BB 13
   Insn 146: point = 0
   Insn 145: point = 0
   Insn 144: point = 0
   Insn 143: point = 0
  BB 17
   Insn 197: point = 0
   Insn 196: point = 0
   Insn 195: point = 0
   Insn 194: point = 0
  BB 21
   Insn 250: point = 0
   Insn 249: point = 0
   Insn 248: point = 0
   Insn 247: point = 0
  BB 25
   Insn 304: point = 0
   Insn 303: point = 0
   Insn 302: point = 0
   Insn 301: point = 0
  BB 29
   Insn 358: point = 0
   Insn 357: point = 0
   Insn 356: point = 0
   Insn 355: point = 0
  BB 33
   Insn 410: point = 0
   Insn 409: point = 0
   Insn 408: point = 0
   Insn 407: point = 0
  BB 37
   Insn 462: point = 0
   Insn 461: point = 0
   Insn 460: point = 0
   Insn 459: point = 0
  BB 41
   Insn 515: point = 0
   Insn 514: point = 0
   Insn 513: point = 0
   Insn 512: point = 0
  BB 45
   Insn 568: point = 0
   Insn 567: point = 0
   Insn 566: point = 0
   Insn 565: point = 0
  BB 49
   Insn 621: point = 0
   Insn 620: point = 0
   Insn 619: point = 0
   Insn 618: point = 0
  BB 53
   Insn 674: point = 0
   Insn 673: point = 0
   Insn 672: point = 0
   Insn 671: point = 0
  BB 57
   Insn 727: point = 0
   Insn 726: point = 0
   Insn 725: point = 0
   Insn 724: point = 0
  BB 61
   Insn 780: point = 0
   Insn 779: point = 0
   Insn 778: point = 0
   Insn 777: point = 0
  BB 65
   Insn 833: point = 0
   Insn 832: point = 0
   Insn 831: point = 0
   Insn 830: point = 0
  BB 69
   Insn 886: point = 0
   Insn 885: point = 0
   Insn 884: point = 0
   Insn 883: point = 0
  BB 73
   Insn 939: point = 0
   Insn 938: point = 0
   Insn 937: point = 0
   Insn 936: point = 0
  BB 76
   Insn 982: point = 0
   Insn 981: point = 0
   Insn 980: point = 0
   Insn 979: point = 0
  BB 81
   Insn 1013: point = 0
  BB 82
   Insn 1016: point = 0
  BB 80
   Insn 1012: point = 0
   Insn 1011: point = 0
   Insn 1010: point = 1
   Insn 1006: point = 2
   Insn 1003: point = 4
  BB 79
   Insn 1000: point = 5
   Insn 999: point = 5
   Insn 998: point = 6
   Insn 997: point = 7
   Insn 996: point = 7
   Insn 995: point = 8
   Insn 994: point = 9
   Insn 993: point = 9
  BB 78
   Insn 991: point = 9
   Insn 990: point = 9
  BB 6
   Insn 58: point = 9
   Insn 57: point = 9
   Insn 56: point = 10
   Insn 55: point = 11
   Insn 54: point = 12
   Insn 53: point = 13
   Insn 52: point = 13
   Insn 51: point = 14
  BB 77
   Insn 1052: point = 15
  BB 75
   Insn 977: point = 15
   Insn 976: point = 15
   Insn 975: point = 16
   Insn 974: point = 17
   Insn 973: point = 18
   Insn 972: point = 19
   Insn 971: point = 19
   Insn 970: point = 20
   Insn 969: point = 21
   Insn 968: point = 21
   Insn 967: point = 22
   Insn 966: point = 22
   Insn 965: point = 23
   Insn 964: point = 24
  BB 70
   Insn 1050: point = 25
   Insn 908: point = 25
   Insn 907: point = 26
   Insn 906: point = 27
   Insn 905: point = 29
   Insn 904: point = 30
   Insn 903: point = 30
   Insn 902: point = 31
   Insn 901: point = 31
   Insn 900: point = 32
   Insn 899: point = 33
   Insn 898: point = 34
   Insn 897: point = 34
   Insn 896: point = 34
   Insn 895: point = 34
   Insn 894: point = 35
   Insn 893: point = 36
   Insn 892: point = 36
   Insn 891: point = 37
   Insn 890: point = 37
  BB 68
   Insn 881: point = 38
   Insn 880: point = 38
   Insn 879: point = 39
   Insn 878: point = 40
   Insn 877: point = 41
   Insn 876: point = 42
   Insn 875: point = 42
   Insn 874: point = 43
   Insn 873: point = 44
   Insn 872: point = 44
   Insn 871: point = 45
   Insn 870: point = 45
   Insn 869: point = 46
   Insn 868: point = 47
  BB 66
   Insn 1048: point = 48
   Insn 855: point = 48
   Insn 854: point = 49
   Insn 853: point = 50
   Insn 852: point = 52
   Insn 851: point = 53
   Insn 850: point = 53
   Insn 849: point = 54
   Insn 848: point = 54
   Insn 847: point = 55
   Insn 846: point = 56
   Insn 845: point = 57
   Insn 844: point = 57
   Insn 843: point = 57
   Insn 842: point = 57
   Insn 841: point = 58
   Insn 840: point = 59
   Insn 839: point = 59
   Insn 838: point = 60
   Insn 837: point = 60
  BB 64
   Insn 828: point = 61
   Insn 827: point = 61
   Insn 826: point = 62
   Insn 825: point = 63
   Insn 824: point = 64
   Insn 823: point = 65
   Insn 822: point = 65
   Insn 821: point = 66
   Insn 820: point = 67
   Insn 819: point = 67
   Insn 818: point = 68
   Insn 817: point = 68
   Insn 816: point = 69
   Insn 815: point = 70
  BB 62
   Insn 1046: point = 71
   Insn 802: point = 71
   Insn 801: point = 72
   Insn 800: point = 73
   Insn 799: point = 75
   Insn 798: point = 76
   Insn 797: point = 76
   Insn 796: point = 77
   Insn 795: point = 77
   Insn 794: point = 78
   Insn 793: point = 79
   Insn 792: point = 80
   Insn 791: point = 80
   Insn 790: point = 80
   Insn 789: point = 80
   Insn 788: point = 81
   Insn 787: point = 82
   Insn 786: point = 82
   Insn 785: point = 83
   Insn 784: point = 83
  BB 60
   Insn 775: point = 84
   Insn 774: point = 84
   Insn 773: point = 85
   Insn 772: point = 86
   Insn 771: point = 87
   Insn 770: point = 88
   Insn 769: point = 88
   Insn 768: point = 89
   Insn 767: point = 90
   Insn 766: point = 90
   Insn 765: point = 91
   Insn 764: point = 91
   Insn 763: point = 92
   Insn 762: point = 93
  BB 58
   Insn 1044: point = 94
   Insn 749: point = 94
   Insn 748: point = 95
   Insn 747: point = 96
   Insn 746: point = 98
   Insn 745: point = 99
   Insn 744: point = 99
   Insn 743: point = 100
   Insn 742: point = 100
   Insn 741: point = 101
   Insn 740: point = 102
   Insn 739: point = 103
   Insn 738: point = 103
   Insn 737: point = 103
   Insn 736: point = 103
   Insn 735: point = 104
   Insn 734: point = 105
   Insn 733: point = 105
   Insn 732: point = 106
   Insn 731: point = 106
  BB 56
   Insn 722: point = 107
   Insn 721: point = 107
   Insn 720: point = 108
   Insn 719: point = 109
   Insn 718: point = 110
   Insn 717: point = 111
   Insn 716: point = 111
   Insn 715: point = 112
   Insn 714: point = 113
   Insn 713: point = 113
   Insn 712: point = 114
   Insn 711: point = 114
   Insn 710: point = 115
   Insn 709: point = 116
  BB 54
   Insn 1042: point = 117
   Insn 696: point = 117
   Insn 695: point = 118
   Insn 694: point = 119
   Insn 693: point = 121
   Insn 692: point = 122
   Insn 691: point = 122
   Insn 690: point = 123
   Insn 689: point = 123
   Insn 688: point = 124
   Insn 687: point = 125
   Insn 686: point = 126
   Insn 685: point = 126
   Insn 684: point = 126
   Insn 683: point = 126
   Insn 682: point = 127
   Insn 681: point = 128
   Insn 680: point = 128
   Insn 679: point = 129
   Insn 678: point = 129
  BB 52
   Insn 669: point = 130
   Insn 668: point = 130
   Insn 667: point = 131
   Insn 666: point = 132
   Insn 665: point = 133
   Insn 664: point = 134
   Insn 663: point = 134
   Insn 662: point = 135
   Insn 661: point = 136
   Insn 660: point = 136
   Insn 659: point = 137
   Insn 658: point = 137
   Insn 657: point = 138
   Insn 656: point = 139
  BB 50
   Insn 1040: point = 140
   Insn 643: point = 140
   Insn 642: point = 141
   Insn 641: point = 142
   Insn 640: point = 144
   Insn 639: point = 145
   Insn 638: point = 145
   Insn 637: point = 146
   Insn 636: point = 146
   Insn 635: point = 147
   Insn 634: point = 148
   Insn 633: point = 149
   Insn 632: point = 149
   Insn 631: point = 149
   Insn 630: point = 149
   Insn 629: point = 150
   Insn 628: point = 151
   Insn 627: point = 151
   Insn 626: point = 152
   Insn 625: point = 152
  BB 48
   Insn 616: point = 153
   Insn 615: point = 153
   Insn 614: point = 154
   Insn 613: point = 155
   Insn 612: point = 156
   Insn 611: point = 157
   Insn 610: point = 157
   Insn 609: point = 158
   Insn 608: point = 159
   Insn 607: point = 159
   Insn 606: point = 160
   Insn 605: point = 160
   Insn 604: point = 161
   Insn 603: point = 162
  BB 46
   Insn 1038: point = 163
   Insn 590: point = 163
   Insn 589: point = 164
   Insn 588: point = 165
   Insn 587: point = 167
   Insn 586: point = 168
   Insn 585: point = 168
   Insn 584: point = 169
   Insn 583: point = 169
   Insn 582: point = 170
   Insn 581: point = 171
   Insn 580: point = 172
   Insn 579: point = 172
   Insn 578: point = 172
   Insn 577: point = 172
   Insn 576: point = 173
   Insn 575: point = 174
   Insn 574: point = 174
   Insn 573: point = 175
   Insn 572: point = 175
  BB 44
   Insn 563: point = 176
   Insn 562: point = 176
   Insn 561: point = 177
   Insn 560: point = 178
   Insn 559: point = 179
   Insn 558: point = 180
   Insn 557: point = 180
   Insn 556: point = 181
   Insn 555: point = 182
   Insn 554: point = 182
   Insn 553: point = 183
   Insn 552: point = 183
   Insn 551: point = 184
   Insn 550: point = 185
  BB 42
   Insn 1036: point = 186
   Insn 537: point = 186
   Insn 536: point = 187
   Insn 535: point = 188
   Insn 534: point = 190
   Insn 533: point = 191
   Insn 532: point = 191
   Insn 531: point = 192
   Insn 530: point = 192
   Insn 529: point = 193
   Insn 528: point = 194
   Insn 527: point = 195
   Insn 526: point = 195
   Insn 525: point = 195
   Insn 524: point = 195
   Insn 523: point = 196
   Insn 522: point = 197
   Insn 521: point = 197
   Insn 520: point = 198
   Insn 519: point = 198
  BB 40
   Insn 510: point = 199
   Insn 509: point = 199
   Insn 508: point = 200
   Insn 507: point = 201
   Insn 506: point = 202
   Insn 505: point = 203
   Insn 504: point = 203
   Insn 503: point = 204
   Insn 502: point = 205
   Insn 501: point = 205
   Insn 500: point = 206
   Insn 499: point = 206
   Insn 498: point = 207
   Insn 497: point = 208
  BB 38
   Insn 1034: point = 209
   Insn 484: point = 209
   Insn 483: point = 210
   Insn 482: point = 211
   Insn 481: point = 213
   Insn 480: point = 214
   Insn 479: point = 214
   Insn 478: point = 215
   Insn 477: point = 215
   Insn 476: point = 216
   Insn 475: point = 217
   Insn 474: point = 218
   Insn 473: point = 218
   Insn 472: point = 218
   Insn 471: point = 218
   Insn 470: point = 219
   Insn 469: point = 220
   Insn 468: point = 220
   Insn 467: point = 221
   Insn 466: point = 221
  BB 36
   Insn 457: point = 222
   Insn 456: point = 222
   Insn 455: point = 223
   Insn 454: point = 224
   Insn 453: point = 225
   Insn 452: point = 226
   Insn 451: point = 226
   Insn 450: point = 227
   Insn 449: point = 228
   Insn 448: point = 228
   Insn 447: point = 229
   Insn 446: point = 229
   Insn 445: point = 230
   Insn 444: point = 231
  BB 34
   Insn 1032: point = 232
   Insn 431: point = 232
   Insn 430: point = 233
   Insn 429: point = 234
   Insn 428: point = 235
   Insn 427: point = 235
   Insn 426: point = 236
   Insn 425: point = 236
   Insn 424: point = 237
   Insn 423: point = 238
   Insn 422: point = 239
   Insn 421: point = 239
   Insn 420: point = 239
   Insn 419: point = 239
   Insn 418: point = 240
   Insn 417: point = 241
   Insn 416: point = 241
   Insn 415: point = 242
   Insn 414: point = 242
  BB 32
   Insn 405: point = 243
   Insn 404: point = 243
   Insn 403: point = 244
   Insn 402: point = 245
   Insn 401: point = 246
   Insn 400: point = 247
   Insn 399: point = 247
   Insn 398: point = 248
   Insn 397: point = 249
   Insn 396: point = 249
   Insn 395: point = 250
   Insn 394: point = 250
   Insn 393: point = 251
   Insn 392: point = 252
  BB 30
   Insn 1030: point = 253
   Insn 379: point = 253
   Insn 378: point = 254
   Insn 377: point = 255
   Insn 376: point = 256
   Insn 375: point = 256
   Insn 374: point = 257
   Insn 373: point = 257
   Insn 372: point = 258
   Insn 371: point = 259
   Insn 370: point = 260
   Insn 369: point = 260
   Insn 368: point = 260
   Insn 367: point = 260
   Insn 366: point = 261
   Insn 365: point = 262
   Insn 364: point = 262
   Insn 363: point = 263
   Insn 362: point = 263
  BB 28
   Insn 353: point = 264
   Insn 352: point = 264
   Insn 351: point = 265
   Insn 350: point = 266
   Insn 349: point = 267
   Insn 348: point = 268
   Insn 347: point = 268
   Insn 346: point = 269
   Insn 345: point = 270
   Insn 344: point = 270
   Insn 343: point = 271
   Insn 342: point = 271
   Insn 341: point = 272
   Insn 340: point = 273
  BB 26
   Insn 1028: point = 274
   Insn 327: point = 274
   Insn 326: point = 275
   Insn 325: point = 276
   Insn 324: point = 278
   Insn 323: point = 279
   Insn 322: point = 279
   Insn 321: point = 280
   Insn 320: point = 280
   Insn 319: point = 280
   Insn 318: point = 281
   Insn 317: point = 282
   Insn 316: point = 283
   Insn 315: point = 283
   Insn 314: point = 283
   Insn 313: point = 283
   Insn 312: point = 284
   Insn 311: point = 285
   Insn 310: point = 285
   Insn 309: point = 286
   Insn 308: point = 286
  BB 24
   Insn 299: point = 287
   Insn 298: point = 287
   Insn 297: point = 288
   Insn 296: point = 289
   Insn 295: point = 290
   Insn 294: point = 291
   Insn 293: point = 291
   Insn 292: point = 292
   Insn 291: point = 293
   Insn 290: point = 293
   Insn 289: point = 294
   Insn 288: point = 294
   Insn 287: point = 295
   Insn 286: point = 296
  BB 22
   Insn 1026: point = 297
   Insn 273: point = 297
   Insn 272: point = 298
   Insn 271: point = 299
   Insn 270: point = 301
   Insn 269: point = 302
   Insn 268: point = 302
   Insn 267: point = 303
   Insn 266: point = 303
   Insn 265: point = 303
   Insn 264: point = 304
   Insn 263: point = 305
   Insn 262: point = 306
   Insn 261: point = 306
   Insn 260: point = 306
   Insn 259: point = 306
   Insn 258: point = 307
   Insn 257: point = 308
   Insn 256: point = 308
   Insn 255: point = 309
   Insn 254: point = 309
  BB 20
   Insn 245: point = 310
   Insn 244: point = 310
   Insn 243: point = 311
   Insn 242: point = 312
   Insn 241: point = 313
   Insn 240: point = 314
   Insn 239: point = 314
   Insn 238: point = 315
   Insn 237: point = 316
   Insn 236: point = 316
   Insn 235: point = 317
   Insn 234: point = 317
   Insn 233: point = 318
   Insn 232: point = 319
  BB 18
   Insn 1024: point = 320
   Insn 219: point = 320
   Insn 218: point = 321
   Insn 217: point = 322
   Insn 216: point = 324
   Insn 215: point = 325
   Insn 214: point = 325
   Insn 213: point = 326
   Insn 212: point = 326
   Insn 211: point = 327
   Insn 210: point = 328
   Insn 209: point = 329
   Insn 208: point = 329
   Insn 207: point = 329
   Insn 206: point = 329
   Insn 205: point = 330
   Insn 204: point = 331
   Insn 203: point = 331
   Insn 202: point = 332
   Insn 201: point = 332
  BB 16
   Insn 192: point = 333
   Insn 191: point = 333
   Insn 190: point = 334
   Insn 189: point = 335
   Insn 188: point = 336
   Insn 187: point = 337
   Insn 186: point = 337
   Insn 185: point = 338
   Insn 184: point = 339
   Insn 183: point = 339
   Insn 182: point = 340
   Insn 181: point = 340
   Insn 180: point = 341
   Insn 179: point = 342
  BB 14
   Insn 1022: point = 343
   Insn 166: point = 343
   Insn 165: point = 343
   Insn 164: point = 344
   Insn 163: point = 345
   Insn 162: point = 346
   Insn 161: point = 348
   Insn 160: point = 349
   Insn 159: point = 350
   Insn 158: point = 351
   Insn 157: point = 351
   Insn 156: point = 351
   Insn 155: point = 351
   Insn 154: point = 352
   Insn 153: point = 353
   Insn 152: point = 353
   Insn 151: point = 354
   Insn 150: point = 354
  BB 12
   Insn 141: point = 355
   Insn 140: point = 355
   Insn 139: point = 356
   Insn 138: point = 357
   Insn 137: point = 358
   Insn 136: point = 359
   Insn 135: point = 359
   Insn 134: point = 360
   Insn 133: point = 361
   Insn 132: point = 361
   Insn 131: point = 362
   Insn 130: point = 362
   Insn 129: point = 363
   Insn 128: point = 364
  BB 10
   Insn 1020: point = 365
   Insn 115: point = 365
   Insn 114: point = 366
   Insn 113: point = 367
   Insn 112: point = 369
   Insn 111: point = 370
   Insn 110: point = 370
   Insn 109: point = 371
   Insn 108: point = 371
   Insn 107: point = 372
   Insn 106: point = 373
   Insn 105: point = 374
   Insn 104: point = 374
   Insn 103: point = 374
   Insn 102: point = 374
   Insn 101: point = 375
   Insn 100: point = 376
   Insn 99: point = 376
   Insn 98: point = 377
   Insn 97: point = 377
  BB 8
   Insn 88: point = 378
   Insn 87: point = 378
   Insn 86: point = 379
   Insn 85: point = 380
   Insn 84: point = 381
   Insn 83: point = 382
   Insn 82: point = 382
   Insn 81: point = 383
   Insn 80: point = 384
   Insn 79: point = 384
   Insn 78: point = 385
   Insn 77: point = 385
   Insn 76: point = 386
   Insn 75: point = 387
  BB 74
   Insn 961: point = 388
   Insn 960: point = 389
   Insn 959: point = 390
   Insn 958: point = 392
   Insn 957: point = 393
   Insn 956: point = 393
   Insn 955: point = 394
   Insn 954: point = 394
   Insn 953: point = 395
   Insn 952: point = 396
   Insn 951: point = 397
   Insn 950: point = 397
   Insn 949: point = 397
   Insn 948: point = 397
   Insn 947: point = 398
   Insn 946: point = 399
   Insn 945: point = 399
   Insn 944: point = 400
   Insn 943: point = 400
  BB 72
   Insn 934: point = 401
   Insn 933: point = 401
   Insn 932: point = 402
   Insn 931: point = 403
   Insn 930: point = 404
   Insn 929: point = 405
   Insn 928: point = 405
   Insn 927: point = 406
   Insn 926: point = 407
   Insn 925: point = 407
   Insn 924: point = 408
   Insn 923: point = 408
   Insn 922: point = 409
   Insn 921: point = 410
  BB 71
   Insn 919: point = 411
   Insn 918: point = 411
   Insn 917: point = 412
   Insn 916: point = 413
   Insn 915: point = 413
   Insn 914: point = 414
   Insn 913: point = 414
  BB 67
   Insn 866: point = 415
   Insn 865: point = 415
   Insn 864: point = 416
   Insn 863: point = 417
   Insn 862: point = 417
   Insn 861: point = 418
   Insn 860: point = 418
  BB 63
   Insn 813: point = 419
   Insn 812: point = 419
   Insn 811: point = 420
   Insn 810: point = 421
   Insn 809: point = 421
   Insn 808: point = 422
   Insn 807: point = 422
  BB 59
   Insn 760: point = 423
   Insn 759: point = 423
   Insn 758: point = 424
   Insn 757: point = 425
   Insn 756: point = 425
   Insn 755: point = 426
   Insn 754: point = 426
  BB 55
   Insn 707: point = 427
   Insn 706: point = 427
   Insn 705: point = 428
   Insn 704: point = 429
   Insn 703: point = 429
   Insn 702: point = 430
   Insn 701: point = 430
  BB 51
   Insn 654: point = 431
   Insn 653: point = 431
   Insn 652: point = 432
   Insn 651: point = 433
   Insn 650: point = 433
   Insn 649: point = 434
   Insn 648: point = 434
  BB 47
   Insn 601: point = 435
   Insn 600: point = 435
   Insn 599: point = 436
   Insn 598: point = 437
   Insn 597: point = 437
   Insn 596: point = 438
   Insn 595: point = 438
  BB 43
   Insn 548: point = 439
   Insn 547: point = 439
   Insn 546: point = 440
   Insn 545: point = 441
   Insn 544: point = 441
   Insn 543: point = 442
   Insn 542: point = 442
  BB 39
   Insn 495: point = 443
   Insn 494: point = 443
   Insn 493: point = 444
   Insn 492: point = 445
   Insn 491: point = 445
   Insn 490: point = 446
   Insn 489: point = 446
  BB 35
   Insn 442: point = 447
   Insn 441: point = 447
   Insn 440: point = 448
   Insn 439: point = 449
   Insn 438: point = 449
   Insn 437: point = 450
   Insn 436: point = 450
  BB 31
   Insn 390: point = 451
   Insn 389: point = 451
   Insn 388: point = 452
   Insn 387: point = 453
   Insn 386: point = 453
   Insn 385: point = 454
   Insn 384: point = 454
  BB 27
   Insn 338: point = 455
   Insn 337: point = 455
   Insn 336: point = 456
   Insn 335: point = 457
   Insn 334: point = 457
   Insn 333: point = 458
   Insn 332: point = 458
  BB 23
   Insn 284: point = 459
   Insn 283: point = 459
   Insn 282: point = 460
   Insn 281: point = 461
   Insn 280: point = 461
   Insn 279: point = 462
   Insn 278: point = 462
  BB 19
   Insn 230: point = 463
   Insn 229: point = 463
   Insn 228: point = 464
   Insn 227: point = 465
   Insn 226: point = 465
   Insn 225: point = 466
   Insn 224: point = 466
  BB 15
   Insn 177: point = 467
   Insn 176: point = 467
   Insn 175: point = 468
   Insn 174: point = 469
   Insn 173: point = 469
   Insn 172: point = 470
   Insn 171: point = 470
  BB 11
   Insn 126: point = 471
   Insn 125: point = 471
   Insn 124: point = 472
   Insn 123: point = 473
   Insn 122: point = 473
   Insn 121: point = 474
   Insn 120: point = 474
  BB 7
   Insn 73: point = 475
   Insn 72: point = 475
   Insn 71: point = 476
   Insn 70: point = 477
   Insn 69: point = 477
   Insn 68: point = 478
   Insn 67: point = 478
   Insn 66: point = 479
   Insn 65: point = 480
   Insn 64: point = 481
   Insn 63: point = 481
   Insn 62: point = 482
   Insn 61: point = 482
   Insn 60: point = 483
  BB 4
   Insn 42: point = 483
   Insn 41: point = 483
   Insn 40: point = 484
   Insn 39: point = 485
   Insn 38: point = 486
   Insn 37: point = 487
   Insn 36: point = 487
   Insn 35: point = 488
   Insn 34: point = 489
   Insn 33: point = 489
   Insn 32: point = 490
   Insn 31: point = 490
   Insn 30: point = 491
   Insn 29: point = 492
  BB 2
   Insn 20: point = 493
   Insn 19: point = 493
   Insn 18: point = 493
   Insn 17: point = 494
   Insn 16: point = 495
   Insn 15: point = 495
   Insn 14: point = 496
   Insn 13: point = 496
   Insn 12: point = 497
   Insn 11: point = 497
   Insn 10: point = 498
   Insn 9: point = 499
   Insn 8: point = 499
   Insn 5: point = 499
   Insn 3: point = 501
   Insn 2: point = 501
 r87: [497..498]
 r88: [493..494]
 r89: [485..486]
 r90: [483..484]
 r91: [11..12]
 r92: [9..10]
 r93: [475..476]
 r94: [380..381]
 r95: [378..379]
 r96: [368..369]
 r97: [365..367]
 r98: [471..472]
 r99: [357..358]
 r100: [355..356]
 r101: [343..346]
 r102: [467..468]
 r103: [335..336]
 r104: [333..334]
 r105: [323..324]
 r106: [320..322]
 r107: [463..464]
 r108: [312..313]
 r109: [310..311]
 r110: [300..301]
 r111: [297..299]
 r112: [459..460]
 r113: [289..290]
 r114: [287..288]
 r115: [277..278]
 r116: [274..276]
 r117: [455..456]
 r118: [266..267]
 r119: [264..265]
 r120: [253..255]
 r121: [451..452]
 r122: [245..246]
 r123: [243..244]
 r124: [232..234]
 r125: [447..448]
 r126: [224..225]
 r127: [222..223]
 r128: [212..213]
 r129: [209..211]
 r130: [443..444]
 r131: [201..202]
 r132: [199..200]
 r133: [189..190]
 r134: [186..188]
 r135: [439..440]
 r136: [178..179]
 r137: [176..177]
 r138: [166..167]
 r139: [163..165]
 r140: [435..436]
 r141: [155..156]
 r142: [153..154]
 r143: [143..144]
 r144: [140..142]
 r145: [431..432]
 r146: [132..133]
 r147: [130..131]
 r148: [120..121]
 r149: [117..119]
 r150: [427..428]
 r151: [109..110]
 r152: [107..108]
 r153: [97..98]
 r154: [94..96]
 r155: [423..424]
 r156: [86..87]
 r157: [84..85]
 r158: [74..75]
 r159: [71..73]
 r160: [419..420]
 r161: [63..64]
 r162: [61..62]
 r163: [51..52]
 r164: [48..50]
 r165: [415..416]
 r166: [40..41]
 r167: [38..39]
 r168: [28..29]
 r169: [25..27]
 r170: [411..412]
 r171: [403..404]
 r172: [401..402]
 r173: [391..392]
 r174: [388..390]
 r175: [17..18]
 r176: [15..16]
 r177: [7..8]
 r178: [3..4]
 r179: [1..2]
 r180: [495..496]
 r181: [490..492]
 r182: [489..491]
 r183: [487..488]
 r184: [13..14]
 r185: [481..482]
 r186: [479..480]
 r187: [477..478]
 r188: [385..387]
 r189: [384..386]
 r190: [382..383]
 r191: [376..377]
 r192: [374..375]
 r193: [372..373]
 r194: [370..371]
 r195: [365..366]
 r196: [473..474]
 r197: [362..364]
 r198: [361..363]
 r199: [359..360]
 r200: [353..354]
 r201: [351..352]
 r202: [349..350]
 r203: [347..348]
 r204: [344..345]
 r205: [469..470]
 r206: [340..342]
 r207: [339..341]
 r208: [337..338]
 r209: [331..332]
 r210: [329..330]
 r211: [327..328]
 r212: [325..326]
 r213: [320..321]
 r214: [465..466]
 r215: [317..319]
 r216: [316..318]
 r217: [314..315]
 r218: [308..309]
 r219: [306..307]
 r220: [304..305]
 r221: [302..303]
 r222: [297..298]
 r223: [461..462]
 r224: [294..296]
 r225: [293..295]
 r226: [291..292]
 r227: [285..286]
 r228: [283..284]
 r229: [281..282]
 r230: [279..280]
 r231: [274..275]
 r232: [457..458]
 r233: [271..273]
 r234: [270..272]
 r235: [268..269]
 r236: [262..263]
 r237: [260..261]
 r238: [258..259]
 r239: [256..257]
 r240: [253..254]
 r241: [453..454]
 r242: [250..252]
 r243: [249..251]
 r244: [247..248]
 r245: [241..242]
 r246: [239..240]
 r247: [237..238]
 r248: [235..236]
 r249: [232..233]
 r250: [449..450]
 r251: [229..231]
 r252: [228..230]
 r253: [226..227]
 r254: [220..221]
 r255: [218..219]
 r256: [216..217]
 r257: [214..215]
 r258: [209..210]
 r259: [445..446]
 r260: [206..208]
 r261: [205..207]
 r262: [203..204]
 r263: [197..198]
 r264: [195..196]
 r265: [193..194]
 r266: [191..192]
 r267: [186..187]
 r268: [441..442]
 r269: [183..185]
 r270: [182..184]
 r271: [180..181]
 r272: [174..175]
 r273: [172..173]
 r274: [170..171]
 r275: [168..169]
 r276: [163..164]
 r277: [437..438]
 r278: [160..162]
 r279: [159..161]
 r280: [157..158]
 r281: [151..152]
 r282: [149..150]
 r283: [147..148]
 r284: [145..146]
 r285: [140..141]
 r286: [433..434]
 r287: [137..139]
 r288: [136..138]
 r289: [134..135]
 r290: [128..129]
 r291: [126..127]
 r292: [124..125]
 r293: [122..123]
 r294: [117..118]
 r295: [429..430]
 r296: [114..116]
 r297: [113..115]
 r298: [111..112]
 r299: [105..106]
 r300: [103..104]
 r301: [101..102]
 r302: [99..100]
 r303: [94..95]
 r304: [425..426]
 r305: [91..93]
 r306: [90..92]
 r307: [88..89]
 r308: [82..83]
 r309: [80..81]
 r310: [78..79]
 r311: [76..77]
 r312: [71..72]
 r313: [421..422]
 r314: [68..70]
 r315: [67..69]
 r316: [65..66]
 r317: [59..60]
 r318: [57..58]
 r319: [55..56]
 r320: [53..54]
 r321: [48..49]
 r322: [417..418]
 r323: [45..47]
 r324: [44..46]
 r325: [42..43]
 r326: [36..37]
 r327: [34..35]
 r328: [32..33]
 r329: [30..31]
 r330: [25..26]
 r331: [413..414]
 r332: [408..410]
 r333: [407..409]
 r334: [405..406]
 r335: [399..400]
 r336: [397..398]
 r337: [395..396]
 r338: [393..394]
 r339: [388..389]
 r340: [22..24]
 r341: [21..23]
 r342: [19..20]
 r343: [5..6]
 r345: [499..500]
 r346: [0..0]
Compressing live ranges: from 501 to 445 - 88%
Ranges after the compression:
 r87: [441..442]
 r88: [437..438]
 r89: [431..432]
 r90: [429..430]
 r91: [11..12]
 r92: [9..10]
 r93: [421..422]
 r94: [331..332]
 r95: [329..330]
 r96: [319..320]
 r97: [317..318]
 r98: [417..418]
 r99: [311..312]
 r100: [309..310]
 r101: [299..300]
 r102: [413..414]
 r103: [293..294]
 r104: [291..292]
 r105: [281..282]
 r106: [279..280]
 r107: [409..410]
 r108: [273..274]
 r109: [271..272]
 r110: [261..262]
 r111: [259..260]
 r112: [405..406]
 r113: [253..254]
 r114: [251..252]
 r115: [241..242]
 r116: [239..240]
 r117: [401..402]
 r118: [233..234]
 r119: [231..232]
 r120: [221..222]
 r121: [397..398]
 r122: [215..216]
 r123: [213..214]
 r124: [203..204]
 r125: [393..394]
 r126: [197..198]
 r127: [195..196]
 r128: [185..186]
 r129: [183..184]
 r130: [389..390]
 r131: [177..178]
 r132: [175..176]
 r133: [165..166]
 r134: [163..164]
 r135: [385..386]
 r136: [157..158]
 r137: [155..156]
 r138: [145..146]
 r139: [143..144]
 r140: [381..382]
 r141: [137..138]
 r142: [135..136]
 r143: [125..126]
 r144: [123..124]
 r145: [377..378]
 r146: [117..118]
 r147: [115..116]
 r148: [105..106]
 r149: [103..104]
 r150: [373..374]
 r151: [97..98]
 r152: [95..96]
 r153: [85..86]
 r154: [83..84]
 r155: [369..370]
 r156: [77..78]
 r157: [75..76]
 r158: [65..66]
 r159: [63..64]
 r160: [365..366]
 r161: [57..58]
 r162: [55..56]
 r163: [45..46]
 r164: [43..44]
 r165: [361..362]
 r166: [37..38]
 r167: [35..36]
 r168: [25..26]
 r169: [23..24]
 r170: [357..358]
 r171: [351..352]
 r172: [349..350]
 r173: [339..340]
 r174: [337..338]
 r175: [17..18]
 r176: [15..16]
 r177: [7..8]
 r178: [3..4]
 r179: [1..2]
 r180: [439..440]
 r181: [435..436]
 r182: [435..436]
 r183: [433..434]
 r184: [13..14]
 r185: [427..428]
 r186: [425..426]
 r187: [423..424]
 r188: [335..336]
 r189: [335..336]
 r190: [333..334]
 r191: [327..328]
 r192: [325..326]
 r193: [323..324]
 r194: [321..322]
 r195: [317..318]
 r196: [419..420]
 r197: [315..316]
 r198: [315..316]
 r199: [313..314]
 r200: [307..308]
 r201: [305..306]
 r202: [303..304]
 r203: [301..302]
 r204: [299..300]
 r205: [415..416]
 r206: [297..298]
 r207: [297..298]
 r208: [295..296]
 r209: [289..290]
 r210: [287..288]
 r211: [285..286]
 r212: [283..284]
 r213: [279..280]
 r214: [411..412]
 r215: [277..278]
 r216: [277..278]
 r217: [275..276]
 r218: [269..270]
 r219: [267..268]
 r220: [265..266]
 r221: [263..264]
 r222: [259..260]
 r223: [407..408]
 r224: [257..258]
 r225: [257..258]
 r226: [255..256]
 r227: [249..250]
 r228: [247..248]
 r229: [245..246]
 r230: [243..244]
 r231: [239..240]
 r232: [403..404]
 r233: [237..238]
 r234: [237..238]
 r235: [235..236]
 r236: [229..230]
 r237: [227..228]
 r238: [225..226]
 r239: [223..224]
 r240: [221..222]
 r241: [399..400]
 r242: [219..220]
 r243: [219..220]
 r244: [217..218]
 r245: [211..212]
 r246: [209..210]
 r247: [207..208]
 r248: [205..206]
 r249: [203..204]
 r250: [395..396]
 r251: [201..202]
 r252: [201..202]
 r253: [199..200]
 r254: [193..194]
 r255: [191..192]
 r256: [189..190]
 r257: [187..188]
 r258: [183..184]
 r259: [391..392]
 r260: [181..182]
 r261: [181..182]
 r262: [179..180]
 r263: [173..174]
 r264: [171..172]
 r265: [169..170]
 r266: [167..168]
 r267: [163..164]
 r268: [387..388]
 r269: [161..162]
 r270: [161..162]
 r271: [159..160]
 r272: [153..154]
 r273: [151..152]
 r274: [149..150]
 r275: [147..148]
 r276: [143..144]
 r277: [383..384]
 r278: [141..142]
 r279: [141..142]
 r280: [139..140]
 r281: [133..134]
 r282: [131..132]
 r283: [129..130]
 r284: [127..128]
 r285: [123..124]
 r286: [379..380]
 r287: [121..122]
 r288: [121..122]
 r289: [119..120]
 r290: [113..114]
 r291: [111..112]
 r292: [109..110]
 r293: [107..108]
 r294: [103..104]
 r295: [375..376]
 r296: [101..102]
 r297: [101..102]
 r298: [99..100]
 r299: [93..94]
 r300: [91..92]
 r301: [89..90]
 r302: [87..88]
 r303: [83..84]
 r304: [371..372]
 r305: [81..82]
 r306: [81..82]
 r307: [79..80]
 r308: [73..74]
 r309: [71..72]
 r310: [69..70]
 r311: [67..68]
 r312: [63..64]
 r313: [367..368]
 r314: [61..62]
 r315: [61..62]
 r316: [59..60]
 r317: [53..54]
 r318: [51..52]
 r319: [49..50]
 r320: [47..48]
 r321: [43..44]
 r322: [363..364]
 r323: [41..42]
 r324: [41..42]
 r325: [39..40]
 r326: [33..34]
 r327: [31..32]
 r328: [29..30]
 r329: [27..28]
 r330: [23..24]
 r331: [359..360]
 r332: [355..356]
 r333: [355..356]
 r334: [353..354]
 r335: [347..348]
 r336: [345..346]
 r337: [343..344]
 r338: [341..342]
 r339: [337..338]
 r340: [21..22]
 r341: [21..22]
 r342: [19..20]
 r343: [5..6]
 r345: [443..444]
 r346: [0..0]

********** Assignment #1: **********

	 Assigning to 345 (cl=INDEX_REGS, orig=345, freq=1, tfirst=345, tfreq=1)...
	   Assign 0 to reload r345 (freq=1)
	 Assigning to 346 (cl=INDEX_REGS, orig=346, freq=1, tfirst=346, tfreq=1)...
	   Assign 2 to reload r346 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=50080, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=50064, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 71
changing reg in insn 72
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 124
changing reg in insn 125
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 162
changing reg in insn 165
changing reg in insn 175
changing reg in insn 176
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 219
changing reg in insn 228
changing reg in insn 229
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 244
changing reg in insn 270
changing reg in insn 271
changing reg in insn 273
changing reg in insn 282
changing reg in insn 283
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 324
changing reg in insn 325
changing reg in insn 327
changing reg in insn 336
changing reg in insn 337
changing reg in insn 349
changing reg in insn 350
changing reg in insn 351
changing reg in insn 352
changing reg in insn 377
changing reg in insn 379
changing reg in insn 388
changing reg in insn 389
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 429
changing reg in insn 431
changing reg in insn 440
changing reg in insn 441
changing reg in insn 453
changing reg in insn 454
changing reg in insn 455
changing reg in insn 456
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 484
changing reg in insn 493
changing reg in insn 494
changing reg in insn 506
changing reg in insn 507
changing reg in insn 508
changing reg in insn 509
changing reg in insn 534
changing reg in insn 535
changing reg in insn 535
changing reg in insn 537
changing reg in insn 546
changing reg in insn 547
changing reg in insn 559
changing reg in insn 560
changing reg in insn 561
changing reg in insn 562
changing reg in insn 587
changing reg in insn 588
changing reg in insn 588
changing reg in insn 590
changing reg in insn 599
changing reg in insn 600
changing reg in insn 612
changing reg in insn 613
changing reg in insn 614
changing reg in insn 615
changing reg in insn 640
changing reg in insn 641
changing reg in insn 641
changing reg in insn 643
changing reg in insn 652
changing reg in insn 653
changing reg in insn 665
changing reg in insn 666
changing reg in insn 667
changing reg in insn 668
changing reg in insn 693
changing reg in insn 694
changing reg in insn 694
changing reg in insn 696
changing reg in insn 705
changing reg in insn 706
changing reg in insn 718
changing reg in insn 719
changing reg in insn 720
changing reg in insn 721
changing reg in insn 746
changing reg in insn 747
changing reg in insn 747
changing reg in insn 749
changing reg in insn 758
changing reg in insn 759
changing reg in insn 771
changing reg in insn 772
changing reg in insn 773
changing reg in insn 774
changing reg in insn 799
changing reg in insn 800
changing reg in insn 800
changing reg in insn 802
changing reg in insn 811
changing reg in insn 812
changing reg in insn 824
changing reg in insn 825
changing reg in insn 826
changing reg in insn 827
changing reg in insn 852
changing reg in insn 853
changing reg in insn 853
changing reg in insn 855
changing reg in insn 864
changing reg in insn 865
changing reg in insn 877
changing reg in insn 878
changing reg in insn 879
changing reg in insn 880
changing reg in insn 905
changing reg in insn 906
changing reg in insn 906
changing reg in insn 908
changing reg in insn 917
changing reg in insn 918
changing reg in insn 930
changing reg in insn 931
changing reg in insn 932
changing reg in insn 933
changing reg in insn 958
changing reg in insn 959
changing reg in insn 959
changing reg in insn 961
changing reg in insn 973
changing reg in insn 974
changing reg in insn 975
changing reg in insn 976
changing reg in insn 995
changing reg in insn 996
changing reg in insn 1003
changing reg in insn 1006
changing reg in insn 1006
changing reg in insn 1010
changing reg in insn 13
changing reg in insn 15
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 51
changing reg in insn 52
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 75
changing reg in insn 77
changing reg in insn 76
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 97
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 120
changing reg in insn 122
changing reg in insn 128
changing reg in insn 130
changing reg in insn 129
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 150
changing reg in insn 152
changing reg in insn 154
changing reg in insn 155
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 171
changing reg in insn 173
changing reg in insn 179
changing reg in insn 181
changing reg in insn 180
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 201
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 218
changing reg in insn 219
changing reg in insn 224
changing reg in insn 226
changing reg in insn 232
changing reg in insn 234
changing reg in insn 233
changing reg in insn 236
changing reg in insn 238
changing reg in insn 239
changing reg in insn 254
changing reg in insn 256
changing reg in insn 258
changing reg in insn 259
changing reg in insn 263
changing reg in insn 264
changing reg in insn 265
changing reg in insn 268
changing reg in insn 272
changing reg in insn 273
changing reg in insn 278
changing reg in insn 280
changing reg in insn 286
changing reg in insn 288
changing reg in insn 287
changing reg in insn 290
changing reg in insn 292
changing reg in insn 293
changing reg in insn 308
changing reg in insn 310
changing reg in insn 312
changing reg in insn 313
changing reg in insn 317
changing reg in insn 318
changing reg in insn 319
changing reg in insn 322
changing reg in insn 326
changing reg in insn 327
changing reg in insn 332
changing reg in insn 334
changing reg in insn 340
changing reg in insn 342
changing reg in insn 341
changing reg in insn 344
changing reg in insn 346
changing reg in insn 347
changing reg in insn 362
changing reg in insn 364
changing reg in insn 366
changing reg in insn 367
changing reg in insn 371
changing reg in insn 372
changing reg in insn 373
changing reg in insn 375
changing reg in insn 378
changing reg in insn 379
changing reg in insn 384
changing reg in insn 386
changing reg in insn 392
changing reg in insn 394
changing reg in insn 393
changing reg in insn 396
changing reg in insn 398
changing reg in insn 399
changing reg in insn 414
changing reg in insn 416
changing reg in insn 418
changing reg in insn 419
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 430
changing reg in insn 431
changing reg in insn 436
changing reg in insn 438
changing reg in insn 444
changing reg in insn 446
changing reg in insn 445
changing reg in insn 448
changing reg in insn 450
changing reg in insn 451
changing reg in insn 466
changing reg in insn 468
changing reg in insn 470
changing reg in insn 471
changing reg in insn 475
changing reg in insn 476
changing reg in insn 477
changing reg in insn 479
changing reg in insn 483
changing reg in insn 484
changing reg in insn 489
changing reg in insn 491
changing reg in insn 497
changing reg in insn 499
changing reg in insn 498
changing reg in insn 501
changing reg in insn 503
changing reg in insn 504
changing reg in insn 519
changing reg in insn 521
changing reg in insn 523
changing reg in insn 524
changing reg in insn 528
changing reg in insn 529
changing reg in insn 530
changing reg in insn 532
changing reg in insn 536
changing reg in insn 537
changing reg in insn 542
changing reg in insn 544
changing reg in insn 550
changing reg in insn 552
changing reg in insn 551
changing reg in insn 554
changing reg in insn 556
changing reg in insn 557
changing reg in insn 572
changing reg in insn 574
changing reg in insn 576
changing reg in insn 577
changing reg in insn 581
changing reg in insn 582
changing reg in insn 583
changing reg in insn 585
changing reg in insn 589
changing reg in insn 590
changing reg in insn 595
changing reg in insn 597
changing reg in insn 603
changing reg in insn 605
changing reg in insn 604
changing reg in insn 607
changing reg in insn 609
changing reg in insn 610
changing reg in insn 625
changing reg in insn 627
changing reg in insn 629
changing reg in insn 630
changing reg in insn 634
changing reg in insn 635
changing reg in insn 636
changing reg in insn 638
changing reg in insn 642
changing reg in insn 643
changing reg in insn 648
changing reg in insn 650
changing reg in insn 656
changing reg in insn 658
changing reg in insn 657
changing reg in insn 660
changing reg in insn 662
changing reg in insn 663
changing reg in insn 678
changing reg in insn 680
changing reg in insn 682
changing reg in insn 683
changing reg in insn 687
changing reg in insn 688
changing reg in insn 689
changing reg in insn 691
changing reg in insn 695
changing reg in insn 696
changing reg in insn 701
changing reg in insn 703
changing reg in insn 709
changing reg in insn 711
changing reg in insn 710
changing reg in insn 713
changing reg in insn 715
changing reg in insn 716
changing reg in insn 731
changing reg in insn 733
changing reg in insn 735
changing reg in insn 736
changing reg in insn 740
changing reg in insn 741
changing reg in insn 742
changing reg in insn 744
changing reg in insn 748
changing reg in insn 749
changing reg in insn 754
changing reg in insn 756
changing reg in insn 762
changing reg in insn 764
changing reg in insn 763
changing reg in insn 766
changing reg in insn 768
changing reg in insn 769
changing reg in insn 784
changing reg in insn 786
changing reg in insn 788
changing reg in insn 789
changing reg in insn 793
changing reg in insn 794
changing reg in insn 795
changing reg in insn 797
changing reg in insn 801
changing reg in insn 802
changing reg in insn 807
changing reg in insn 809
changing reg in insn 815
changing reg in insn 817
changing reg in insn 816
changing reg in insn 819
changing reg in insn 821
changing reg in insn 822
changing reg in insn 837
changing reg in insn 839
changing reg in insn 841
changing reg in insn 842
changing reg in insn 846
changing reg in insn 847
changing reg in insn 848
changing reg in insn 850
changing reg in insn 854
changing reg in insn 855
changing reg in insn 860
changing reg in insn 862
changing reg in insn 868
changing reg in insn 870
changing reg in insn 869
changing reg in insn 872
changing reg in insn 874
changing reg in insn 875
changing reg in insn 890
changing reg in insn 892
changing reg in insn 894
changing reg in insn 895
changing reg in insn 899
changing reg in insn 900
changing reg in insn 901
changing reg in insn 903
changing reg in insn 907
changing reg in insn 908
changing reg in insn 913
changing reg in insn 915
changing reg in insn 921
changing reg in insn 923
changing reg in insn 922
changing reg in insn 925
changing reg in insn 927
changing reg in insn 928
changing reg in insn 943
changing reg in insn 945
changing reg in insn 947
changing reg in insn 948
changing reg in insn 952
changing reg in insn 953
changing reg in insn 954
changing reg in insn 956
changing reg in insn 960
changing reg in insn 961
changing reg in insn 964
changing reg in insn 966
changing reg in insn 965
changing reg in insn 968
changing reg in insn 970
changing reg in insn 971
changing reg in insn 998
changing reg in insn 999
changing reg in insn 5
changing reg in insn 1011
deleting insn with uid = 31.
deleting insn with uid = 77.
deleting insn with uid = 112.
deleting insn with uid = 130.
deleting insn with uid = 181.
deleting insn with uid = 216.
deleting insn with uid = 234.
deleting insn with uid = 288.
deleting insn with uid = 342.
deleting insn with uid = 394.
deleting insn with uid = 446.
deleting insn with uid = 481.
deleting insn with uid = 499.
deleting insn with uid = 534.
deleting insn with uid = 552.
deleting insn with uid = 587.
deleting insn with uid = 605.
deleting insn with uid = 640.
deleting insn with uid = 658.
deleting insn with uid = 693.
deleting insn with uid = 711.
deleting insn with uid = 746.
deleting insn with uid = 764.
deleting insn with uid = 799.
deleting insn with uid = 817.
deleting insn with uid = 852.
deleting insn with uid = 870.
deleting insn with uid = 905.
deleting insn with uid = 923.
deleting insn with uid = 958.
deleting insn with uid = 966.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 144.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 153.
verify found no changes in insn with uid = 158.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 174.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 204.
verify found no changes in insn with uid = 209.
verify found no changes in insn with uid = 215.
verify found no changes in insn with uid = 227.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 240.
verify found no changes in insn with uid = 248.
verify found no changes in insn with uid = 250.
verify found no changes in insn with uid = 257.
verify found no changes in insn with uid = 262.
verify found no changes in insn with uid = 269.
verify found no changes in insn with uid = 281.
verify found no changes in insn with uid = 291.
verify found no changes in insn with uid = 294.
verify found no changes in insn with uid = 302.
verify found no changes in insn with uid = 304.
verify found no changes in insn with uid = 311.
verify found no changes in insn with uid = 316.
verify found no changes in insn with uid = 323.
verify found no changes in insn with uid = 335.
verify found no changes in insn with uid = 345.
verify found no changes in insn with uid = 348.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 358.
verify found no changes in insn with uid = 365.
verify found no changes in insn with uid = 370.
verify found no changes in insn with uid = 376.
verify found no changes in insn with uid = 387.
verify found no changes in insn with uid = 397.
verify found no changes in insn with uid = 400.
verify found no changes in insn with uid = 408.
verify found no changes in insn with uid = 410.
verify found no changes in insn with uid = 417.
verify found no changes in insn with uid = 422.
verify found no changes in insn with uid = 428.
verify found no changes in insn with uid = 439.
verify found no changes in insn with uid = 449.
verify found no changes in insn with uid = 452.
verify found no changes in insn with uid = 460.
verify found no changes in insn with uid = 462.
verify found no changes in insn with uid = 469.
verify found no changes in insn with uid = 474.
verify found no changes in insn with uid = 480.
verify found no changes in insn with uid = 492.
verify found no changes in insn with uid = 502.
verify found no changes in insn with uid = 505.
verify found no changes in insn with uid = 513.
verify found no changes in insn with uid = 515.
verify found no changes in insn with uid = 522.
verify found no changes in insn with uid = 527.
verify found no changes in insn with uid = 533.
verify found no changes in insn with uid = 545.
verify found no changes in insn with uid = 555.
verify found no changes in insn with uid = 558.
verify found no changes in insn with uid = 566.
verify found no changes in insn with uid = 568.
verify found no changes in insn with uid = 575.
verify found no changes in insn with uid = 580.
verify found no changes in insn with uid = 586.
verify found no changes in insn with uid = 598.
verify found no changes in insn with uid = 608.
verify found no changes in insn with uid = 611.
verify found no changes in insn with uid = 619.
verify found no changes in insn with uid = 621.
verify found no changes in insn with uid = 628.
verify found no changes in insn with uid = 633.
verify found no changes in insn with uid = 639.
verify found no changes in insn with uid = 651.
verify found no changes in insn with uid = 661.
verify found no changes in insn with uid = 664.
verify found no changes in insn with uid = 672.
verify found no changes in insn with uid = 674.
verify found no changes in insn with uid = 681.
verify found no changes in insn with uid = 686.
verify found no changes in insn with uid = 692.
verify found no changes in insn with uid = 704.
verify found no changes in insn with uid = 714.
verify found no changes in insn with uid = 717.
verify found no changes in insn with uid = 725.
verify found no changes in insn with uid = 727.
verify found no changes in insn with uid = 734.
verify found no changes in insn with uid = 739.
verify found no changes in insn with uid = 745.
verify found no changes in insn with uid = 757.
verify found no changes in insn with uid = 767.
verify found no changes in insn with uid = 770.
verify found no changes in insn with uid = 778.
verify found no changes in insn with uid = 780.
verify found no changes in insn with uid = 787.
verify found no changes in insn with uid = 792.
verify found no changes in insn with uid = 798.
verify found no changes in insn with uid = 810.
verify found no changes in insn with uid = 820.
verify found no changes in insn with uid = 823.
verify found no changes in insn with uid = 831.
verify found no changes in insn with uid = 833.
verify found no changes in insn with uid = 840.
verify found no changes in insn with uid = 845.
verify found no changes in insn with uid = 851.
verify found no changes in insn with uid = 863.
verify found no changes in insn with uid = 873.
verify found no changes in insn with uid = 876.
verify found no changes in insn with uid = 884.
verify found no changes in insn with uid = 886.
verify found no changes in insn with uid = 893.
verify found no changes in insn with uid = 898.
verify found no changes in insn with uid = 904.
verify found no changes in insn with uid = 916.
verify found no changes in insn with uid = 926.
verify found no changes in insn with uid = 929.
verify found no changes in insn with uid = 937.
verify found no changes in insn with uid = 939.
verify found no changes in insn with uid = 946.
verify found no changes in insn with uid = 951.
verify found no changes in insn with uid = 957.
verify found no changes in insn with uid = 969.
verify found no changes in insn with uid = 972.
verify found no changes in insn with uid = 980.
verify found no changes in insn with uid = 982.
verify found no changes in insn with uid = 994.
verify found no changes in insn with uid = 997.
verify found no changes in insn with uid = 1000.
verify found no changes in insn with uid = 1013.


int read_procpar(Procpar_info*, char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={365d,286u} r1={180d,26u} r2={155d} r4={243d,90u} r5={306d,153u} r6={1d,259u} r7={1d,235u} r8={153d} r9={153d} r10={153d} r11={153d} r12={153d} r13={153d} r14={153d} r15={153d} r17={253d,60u} r18={153d} r19={153d} r20={1d,1u,1e} r21={166d,26u} r22={154d} r23={154d} r24={154d} r25={154d} r26={154d} r27={154d} r28={154d} r29={153d} r30={153d} r31={153d} r32={153d} r33={153d} r34={153d} r35={153d} r36={153d} r37={154d} r38={154d} r39={153d} r40={153d} r45={153d} r46={153d} r47={153d} r48={153d} r49={153d} r50={153d} r51={153d} r52={153d} r53={153d} r54={153d} r55={153d} r56={153d} r57={153d} r58={153d} r59={153d} r60={153d} r61={153d} r62={153d} r63={153d} r64={153d} r65={153d} r66={153d} r67={153d} r68={153d} r69={153d} r70={153d} r71={153d} r72={153d} r73={153d} r74={153d} r75={153d} r76={153d} r77={153d} r78={153d} r79={153d} r80={153d} 
;;    total ref usage 12762{11625d,1136u,1e} in 820{667 regular + 153 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 180
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])
        (reg:DI 5 di [ procpar_info ])) read_procpar.cpp:20 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50064 [0xffffffffffff3c70])) [0 procpar_string+0 S8 A64])
        (reg:DI 4 si [ procpar_string ])) read_procpar.cpp:20 89 {*movdi_internal}
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.5711+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [345])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:20 986 {stack_tls_protect_set_di}
     (nil))
(insn 8 5 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])
        (const_int 0 [0])) read_procpar.cpp:22 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (const_int 0 [0])) read_procpar.cpp:25 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [orig:87 D.5702 ] [87])
        (const_int 5000 [0x1388])) read_procpar.cpp:28 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [orig:87 D.5702 ] [87])) read_procpar.cpp:28 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -50036 [0xffffffffffff3c8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) read_procpar.cpp:31 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50064 [0xffffffffffff3c70])) [0 procpar_string+0 S8 A64])) read_procpar.cpp:34 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f52d1bd5360 *.LC0>)) read_procpar.cpp:34 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [180])) read_procpar.cpp:34 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f52d1e43510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:34 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [orig:88 D.5703 ] [88])
        (reg:DI 0 ax)) read_procpar.cpp:34 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.5703 ] [88])) read_procpar.cpp:34 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])
            (const_int 0 [0]))) read_procpar.cpp:35 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) read_procpar.cpp:35 612 {*jcc_1}
     (nil)
 -> 27)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f52d1bd53f0 *.LC1>)) read_procpar.cpp:36 89 {*movdi_internal}
     (nil))
(call_insn 23 22 24 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:36 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 3 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:37 90 {*movsi_internal}
     (nil))
(call_insn 25 24 26 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:37 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 26 25 27)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 181 182 183
(code_label 27 26 28 4 2 "" [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:DI 1 dx [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:41 89 {*movdi_internal}
     (nil))
(insn 30 29 32 4 (parallel [
            (set (reg:DI 0 ax [182])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:41 218 {*adddi_1}
     (nil))
(insn 32 30 33 4 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:41 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [182])) read_procpar.cpp:41 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:41 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 35 34 36 4 (set (reg:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:42 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [183])) read_procpar.cpp:42 89 {*movdi_internal}
     (nil))
(call_insn 37 36 38 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:42 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 38 37 39 4 (set (reg:SI 0 ax [orig:89 D.5704 ] [89])
        (reg:SI 0 ax)) read_procpar.cpp:42 90 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.5704 ] [89])
            (const_int 0 [0]))) read_procpar.cpp:42 3 {*cmpsi_ccno_1}
     (nil))
(insn 40 39 41 4 (set (reg:QI 0 ax [orig:90 D.5705 ] [90])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:42 607 {*setcc_qi}
     (nil))
(insn 41 40 42 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 D.5705 ] [90])
            (const_int 0 [0]))) read_procpar.cpp:42 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 42 41 43 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) read_procpar.cpp:42 612 {*jcc_1}
     (nil)
 -> 49)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:43 89 {*movdi_internal}
     (nil))
(call_insn 45 44 46 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:43 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 46 45 47 5 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:44 90 {*movsi_internal}
     (nil))
(call_insn 47 46 48 5 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:44 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 48 47 49)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              77 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 184
(code_label 49 48 50 6 3 "" [2 uses])
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:51 89 {*movdi_internal}
     (nil))
(insn 52 51 53 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [184])) read_procpar.cpp:51 89 {*movdi_internal}
     (nil))
(call_insn 53 52 54 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x7f52d1e55510 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:51 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 54 53 55 6 (set (reg:SI 0 ax [orig:91 D.5704 ] [91])
        (reg:SI 0 ax)) read_procpar.cpp:51 90 {*movsi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 D.5704 ] [91])
            (const_int 0 [0]))) read_procpar.cpp:51 3 {*cmpsi_ccno_1}
     (nil))
(insn 56 55 57 6 (set (reg:QI 0 ax [orig:92 D.5705 ] [92])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:51 607 {*setcc_qi}
     (nil))
(insn 57 56 58 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:92 D.5705 ] [92])
            (const_int 0 [0]))) read_procpar.cpp:51 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 58 57 59 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 988)
            (pc))) read_procpar.cpp:51 612 {*jcc_1}
     (nil)
 -> 988)
;;  succ:       7 (FALLTHRU)
;;              78
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 185 186 187
(note 59 58 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:57 217 {*addsi_1}
     (nil))
(insn 61 60 62 7 (parallel [
            (set (reg:DI 0 ax [185])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:65 218 {*adddi_1}
     (nil))
(insn 62 61 63 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f52d1bd5510 *.LC3>)) read_procpar.cpp:65 89 {*movdi_internal}
     (nil))
(insn 63 62 64 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [185])) read_procpar.cpp:65 89 {*movdi_internal}
     (nil))
(call_insn 64 63 65 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:65 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 65 64 66 7 (set (reg:DI 0 ax [186])
        (reg:DI 0 ax)) read_procpar.cpp:65 89 {*movdi_internal}
     (nil))
(insn 66 65 67 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [186])) read_procpar.cpp:65 89 {*movdi_internal}
     (nil))
(insn 67 66 68 7 (set (reg:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:80 89 {*movdi_internal}
     (nil))
(insn 68 67 69 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f52d1bd55a0 *.LC4>)) read_procpar.cpp:80 89 {*movdi_internal}
     (nil))
(insn 69 68 70 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [187])) read_procpar.cpp:80 89 {*movdi_internal}
     (nil))
(call_insn/i 70 69 71 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:80 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 71 70 72 7 (set (reg:SI 0 ax [orig:93 D.5704 ] [93])
        (reg:SI 0 ax)) read_procpar.cpp:80 90 {*movsi_internal}
     (nil))
(insn 72 71 73 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 D.5704 ] [93])
            (const_int 0 [0]))) read_procpar.cpp:80 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 73 72 74 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 118)
            (pc))) read_procpar.cpp:80 612 {*jcc_1}
     (nil)
 -> 118)
;;  succ:       8 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 188 189 190
(note 74 73 75 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 8 (set (reg:DI 1 dx [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:90 89 {*movdi_internal}
     (nil))
(insn 76 75 78 8 (parallel [
            (set (reg:DI 0 ax [189])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:90 218 {*adddi_1}
     (nil))
(insn 78 76 79 8 (set (reg:SI 4 si)
        (const_int 5000 [0x1388])) read_procpar.cpp:90 90 {*movsi_internal}
     (nil))
(insn 79 78 80 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [189])) read_procpar.cpp:90 89 {*movdi_internal}
     (nil))
(call_insn 80 79 81 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:90 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 81 80 82 8 (set (reg:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn 83 82 84 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:92 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 84 83 85 8 (set (reg:SI 0 ax [orig:94 D.5704 ] [94])
        (reg:SI 0 ax)) read_procpar.cpp:92 90 {*movsi_internal}
     (nil))
(insn 85 84 86 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:94 D.5704 ] [94])
            (const_int 0 [0]))) read_procpar.cpp:92 3 {*cmpsi_ccno_1}
     (nil))
(insn 86 85 87 8 (set (reg:QI 0 ax [orig:95 D.5705 ] [95])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:92 607 {*setcc_qi}
     (nil))
(insn 87 86 88 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:95 D.5705 ] [95])
            (const_int 0 [0]))) read_procpar.cpp:92 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 88 87 89 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) read_procpar.cpp:92 612 {*jcc_1}
     (nil)
 -> 95)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 89 88 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:93 89 {*movdi_internal}
     (nil))
(call_insn 91 90 92 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:93 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 92 91 93 9 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:94 90 {*movsi_internal}
     (nil))
(call_insn 93 92 94 9 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:94 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 95)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 191 192 193 194 195
(code_label 95 94 96 10 6 "" [1 uses])
(note 96 95 97 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 10 (parallel [
            (set (reg:DI 0 ax [191])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:106 218 {*adddi_1}
     (nil))
(insn 98 97 99 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 99 98 100 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [191])) read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn 100 99 101 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:106 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 101 100 102 10 (set (reg:DI 0 ax [192])
        (reg:DI 0 ax)) read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 102 101 103 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [192])) read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:110 89 {*movdi_internal}
     (nil))
(insn 104 103 105 10 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:110 89 {*movdi_internal}
     (nil))
(call_insn 105 104 106 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:110 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 106 105 107 10 (set (reg:DI 0 ax [193])
        (reg:DI 0 ax)) read_procpar.cpp:110 89 {*movdi_internal}
     (nil))
(insn 107 106 108 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [193])) read_procpar.cpp:110 89 {*movdi_internal}
     (nil))
(insn 108 107 109 10 (set (reg:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 109 108 110 10 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 110 109 111 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [194])) read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(call_insn 111 110 113 10 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:115 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 113 111 114 10 (set (reg:SF 21 xmm0 [orig:97 D.5707 ] [97])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:96 D.5706 ] [96]))) read_procpar.cpp:115 157 {*truncdfsf_fast_sse}
     (nil))
(insn 114 113 115 10 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 115 114 1020 10 (set (mem/j:SF (reg/f:DI 0 ax [195]) [0 procpar_info_38(D)->acquision_time+0 S4 A64])
        (reg:SF 21 xmm0 [orig:97 D.5707 ] [97])) read_procpar.cpp:115 129 {*movsf_internal}
     (nil))
(jump_insn 1020 115 1021 10 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1021 1020 118)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 196
(code_label 118 1021 119 11 5 "" [1 uses])
(note 119 118 120 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 11 (set (reg:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:122 89 {*movdi_internal}
     (nil))
(insn 121 120 122 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f52d1bd56c0 *.LC6>)) read_procpar.cpp:122 89 {*movdi_internal}
     (nil))
(insn 122 121 123 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [196])) read_procpar.cpp:122 89 {*movdi_internal}
     (nil))
(call_insn/i 123 122 124 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:122 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 124 123 125 11 (set (reg:SI 0 ax [orig:98 D.5704 ] [98])
        (reg:SI 0 ax)) read_procpar.cpp:122 90 {*movsi_internal}
     (nil))
(insn 125 124 126 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 D.5704 ] [98])
            (const_int 0 [0]))) read_procpar.cpp:122 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 126 125 127 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 169)
            (pc))) read_procpar.cpp:122 612 {*jcc_1}
     (nil)
 -> 169)
;;  succ:       12 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 197 198 199
(note 127 126 128 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 12 (set (reg:DI 1 dx [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:125 89 {*movdi_internal}
     (nil))
(insn 129 128 131 12 (parallel [
            (set (reg:DI 0 ax [198])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:125 218 {*adddi_1}
     (nil))
(insn 131 129 132 12 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:125 90 {*movsi_internal}
     (nil))
(insn 132 131 133 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [198])) read_procpar.cpp:125 89 {*movdi_internal}
     (nil))
(call_insn 133 132 134 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:125 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 134 133 135 12 (set (reg:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:126 89 {*movdi_internal}
     (nil))
(insn 135 134 136 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [199])) read_procpar.cpp:126 89 {*movdi_internal}
     (nil))
(call_insn 136 135 137 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:126 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 137 136 138 12 (set (reg:SI 0 ax [orig:99 D.5704 ] [99])
        (reg:SI 0 ax)) read_procpar.cpp:126 90 {*movsi_internal}
     (nil))
(insn 138 137 139 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:99 D.5704 ] [99])
            (const_int 0 [0]))) read_procpar.cpp:126 3 {*cmpsi_ccno_1}
     (nil))
(insn 139 138 140 12 (set (reg:QI 0 ax [orig:100 D.5705 ] [100])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:126 607 {*setcc_qi}
     (nil))
(insn 140 139 141 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:100 D.5705 ] [100])
            (const_int 0 [0]))) read_procpar.cpp:126 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 141 140 142 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) read_procpar.cpp:126 612 {*jcc_1}
     (nil)
 -> 148)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 142 141 143 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:127 89 {*movdi_internal}
     (nil))
(call_insn 144 143 145 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:127 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 145 144 146 13 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:128 90 {*movsi_internal}
     (nil))
(call_insn 146 145 147 13 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:128 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 147 146 148)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 200 201 202 203 204
(code_label 148 147 149 14 9 "" [1 uses])
(note 149 148 150 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 14 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:132 218 {*adddi_1}
     (nil))
(insn 151 150 152 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f52d1bd5750 *.LC7>)) read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 152 151 153 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(call_insn 153 152 154 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:132 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 154 153 155 14 (set (reg:DI 0 ax [201])
        (reg:DI 0 ax)) read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 155 154 156 14 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [201])) read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 156 155 157 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f52d1bd57e0 *.LC8>)) read_procpar.cpp:133 89 {*movdi_internal}
     (nil))
(insn 157 156 158 14 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:133 89 {*movdi_internal}
     (nil))
(call_insn 158 157 159 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:133 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 159 158 160 14 (set (reg:DI 0 ax [202])
        (reg:DI 0 ax)) read_procpar.cpp:133 89 {*movdi_internal}
     (nil))
(insn 160 159 161 14 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [202])) read_procpar.cpp:133 89 {*movdi_internal}
     (nil))
(insn 161 160 162 14 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:134 89 {*movdi_internal}
     (nil))
(insn 162 161 163 14 (parallel [
            (set (reg/f:DI 1 dx [orig:101 D.5708 ] [101])
                (plus:DI (reg/f:DI 0 ax [203])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:134 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 163 162 164 14 (set (reg:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:134 89 {*movdi_internal}
     (nil))
(insn 164 163 165 14 (set (reg:DI 4 si)
        (reg:DI 0 ax [204])) read_procpar.cpp:134 89 {*movdi_internal}
     (nil))
(insn 165 164 166 14 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:101 D.5708 ] [101])) read_procpar.cpp:134 89 {*movdi_internal}
     (nil))
(call_insn 166 165 1022 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f52d207a5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:134 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 1022 166 1023 14 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1023 1022 169)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 205
(code_label 169 1023 170 15 8 "" [1 uses])
(note 170 169 171 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 15 (set (reg:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(insn 172 171 173 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f52d1bd5870 *.LC9>)) read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(insn 173 172 174 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [205])) read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(call_insn/i 174 173 175 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:136 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 175 174 176 15 (set (reg:SI 0 ax [orig:102 D.5704 ] [102])
        (reg:SI 0 ax)) read_procpar.cpp:136 90 {*movsi_internal}
     (nil))
(insn 176 175 177 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:102 D.5704 ] [102])
            (const_int 0 [0]))) read_procpar.cpp:136 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 177 176 178 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) read_procpar.cpp:136 612 {*jcc_1}
     (nil)
 -> 222)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 104 206 207 208
(note 178 177 179 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 179 178 180 16 (set (reg:DI 1 dx [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(insn 180 179 182 16 (parallel [
            (set (reg:DI 0 ax [207])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:138 218 {*adddi_1}
     (nil))
(insn 182 180 183 16 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:138 90 {*movsi_internal}
     (nil))
(insn 183 182 184 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [207])) read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(call_insn 184 183 185 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:138 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 185 184 186 16 (set (reg:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(insn 186 185 187 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [208])) read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(call_insn 187 186 188 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:139 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 188 187 189 16 (set (reg:SI 0 ax [orig:103 D.5704 ] [103])
        (reg:SI 0 ax)) read_procpar.cpp:139 90 {*movsi_internal}
     (nil))
(insn 189 188 190 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:103 D.5704 ] [103])
            (const_int 0 [0]))) read_procpar.cpp:139 3 {*cmpsi_ccno_1}
     (nil))
(insn 190 189 191 16 (set (reg:QI 0 ax [orig:104 D.5705 ] [104])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:139 607 {*setcc_qi}
     (nil))
(insn 191 190 192 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:104 D.5705 ] [104])
            (const_int 0 [0]))) read_procpar.cpp:139 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 192 191 193 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 199)
            (pc))) read_procpar.cpp:139 612 {*jcc_1}
     (nil)
 -> 199)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 193 192 194 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:140 89 {*movdi_internal}
     (nil))
(call_insn 195 194 196 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:140 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 196 195 197 17 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:141 90 {*movsi_internal}
     (nil))
(call_insn 197 196 198 17 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:141 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 198 197 199)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105 106 209 210 211 212 213
(code_label 199 198 200 18 11 "" [1 uses])
(note 200 199 201 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 18 (parallel [
            (set (reg:DI 0 ax [209])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:145 218 {*adddi_1}
     (nil))
(insn 202 201 203 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 203 202 204 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [209])) read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(call_insn 204 203 205 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:145 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 205 204 206 18 (set (reg:DI 0 ax [210])
        (reg:DI 0 ax)) read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 206 205 207 18 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [210])) read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 207 206 208 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 208 207 209 18 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(call_insn 209 208 210 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:146 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 210 209 211 18 (set (reg:DI 0 ax [211])
        (reg:DI 0 ax)) read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 211 210 212 18 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [211])) read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 212 211 213 18 (set (reg:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:147 89 {*movdi_internal}
     (nil))
(insn 213 212 214 18 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:147 89 {*movdi_internal}
     (nil))
(insn 214 213 215 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [212])) read_procpar.cpp:147 89 {*movdi_internal}
     (nil))
(call_insn 215 214 217 18 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:147 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 217 215 218 18 (set (reg:SF 21 xmm0 [orig:106 D.5707 ] [106])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:105 D.5706 ] [105]))) read_procpar.cpp:147 157 {*truncdfsf_fast_sse}
     (nil))
(insn 218 217 219 18 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:147 89 {*movdi_internal}
     (nil))
(insn 219 218 1024 18 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [213])
                (const_int 292 [0x124])) [0 procpar_info_38(D)->filter+0 S4 A32])
        (reg:SF 21 xmm0 [orig:106 D.5707 ] [106])) read_procpar.cpp:147 129 {*movsf_internal}
     (nil))
(jump_insn 1024 219 1025 18 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1025 1024 222)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 214
(code_label 222 1025 223 19 10 "" [1 uses])
(note 223 222 224 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 19 (set (reg:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:149 89 {*movdi_internal}
     (nil))
(insn 225 224 226 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f52d1bd5900 *.LC10>)) read_procpar.cpp:149 89 {*movdi_internal}
     (nil))
(insn 226 225 227 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [214])) read_procpar.cpp:149 89 {*movdi_internal}
     (nil))
(call_insn/i 227 226 228 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:149 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 228 227 229 19 (set (reg:SI 0 ax [orig:107 D.5704 ] [107])
        (reg:SI 0 ax)) read_procpar.cpp:149 90 {*movsi_internal}
     (nil))
(insn 229 228 230 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:107 D.5704 ] [107])
            (const_int 0 [0]))) read_procpar.cpp:149 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 230 229 231 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 276)
            (pc))) read_procpar.cpp:149 612 {*jcc_1}
     (nil)
 -> 276)
;;  succ:       20 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108 109 215 216 217
(note 231 230 232 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 232 231 233 20 (set (reg:DI 1 dx [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:151 89 {*movdi_internal}
     (nil))
(insn 233 232 235 20 (parallel [
            (set (reg:DI 0 ax [216])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:151 218 {*adddi_1}
     (nil))
(insn 235 233 236 20 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:151 90 {*movsi_internal}
     (nil))
(insn 236 235 237 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [216])) read_procpar.cpp:151 89 {*movdi_internal}
     (nil))
(call_insn 237 236 238 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:151 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 238 237 239 20 (set (reg:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(insn 239 238 240 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [217])) read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn 240 239 241 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:152 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 241 240 242 20 (set (reg:SI 0 ax [orig:108 D.5704 ] [108])
        (reg:SI 0 ax)) read_procpar.cpp:152 90 {*movsi_internal}
     (nil))
(insn 242 241 243 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:108 D.5704 ] [108])
            (const_int 0 [0]))) read_procpar.cpp:152 3 {*cmpsi_ccno_1}
     (nil))
(insn 243 242 244 20 (set (reg:QI 0 ax [orig:109 D.5705 ] [109])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:152 607 {*setcc_qi}
     (nil))
(insn 244 243 245 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:109 D.5705 ] [109])
            (const_int 0 [0]))) read_procpar.cpp:152 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 245 244 246 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 252)
            (pc))) read_procpar.cpp:152 612 {*jcc_1}
     (nil)
 -> 252)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 246 245 247 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(call_insn 248 247 249 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:153 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 249 248 250 21 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:154 90 {*movsi_internal}
     (nil))
(call_insn 250 249 251 21 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:154 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 251 250 252)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 111 218 219 220 221 222
(code_label 252 251 253 22 13 "" [1 uses])
(note 253 252 254 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 22 (parallel [
            (set (reg:DI 0 ax [218])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:158 218 {*adddi_1}
     (nil))
(insn 255 254 256 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(insn 256 255 257 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [218])) read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(call_insn 257 256 258 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:158 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 258 257 259 22 (set (reg:DI 0 ax [219])
        (reg:DI 0 ax)) read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(insn 259 258 260 22 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [219])) read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(insn 260 259 261 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:159 89 {*movdi_internal}
     (nil))
(insn 261 260 262 22 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:159 89 {*movdi_internal}
     (nil))
(call_insn 262 261 263 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:159 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 263 262 264 22 (set (reg:DI 0 ax [220])
        (reg:DI 0 ax)) read_procpar.cpp:159 89 {*movdi_internal}
     (nil))
(insn 264 263 265 22 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [220])) read_procpar.cpp:159 89 {*movdi_internal}
     (nil))
(insn 265 264 266 22 (set (reg:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 266 265 267 22 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) read_procpar.cpp:160 90 {*movsi_internal}
     (nil))
(insn 267 266 268 22 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 268 267 269 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [221])) read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(call_insn 269 268 270 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f52d1f101b0 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:160 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 270 269 271 22 (set (reg:DI 0 ax [orig:110 D.5709 ] [110])
        (reg:DI 0 ax)) read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 271 270 272 22 (set (reg:SI 1 dx [orig:111 D.5704 ] [111])
        (reg:SI 0 ax [orig:110 D.5709 ] [110])) read_procpar.cpp:160 90 {*movsi_internal}
     (nil))
(insn 272 271 273 22 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 273 272 1026 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [222])
                (const_int 296 [0x128])) [0 procpar_info_38(D)->num_transients+0 S4 A64])
        (reg:SI 1 dx [orig:111 D.5704 ] [111])) read_procpar.cpp:160 90 {*movsi_internal}
     (nil))
(jump_insn 1026 273 1027 22 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1027 1026 276)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 223
(code_label 276 1027 277 23 12 "" [1 uses])
(note 277 276 278 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 279 23 (set (reg:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:162 89 {*movdi_internal}
     (nil))
(insn 279 278 280 23 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f52d1bd5990 *.LC11>)) read_procpar.cpp:162 89 {*movdi_internal}
     (nil))
(insn 280 279 281 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [223])) read_procpar.cpp:162 89 {*movdi_internal}
     (nil))
(call_insn/i 281 280 282 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:162 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 282 281 283 23 (set (reg:SI 0 ax [orig:112 D.5704 ] [112])
        (reg:SI 0 ax)) read_procpar.cpp:162 90 {*movsi_internal}
     (nil))
(insn 283 282 284 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:112 D.5704 ] [112])
            (const_int 0 [0]))) read_procpar.cpp:162 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 284 283 285 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 330)
            (pc))) read_procpar.cpp:162 612 {*jcc_1}
     (nil)
 -> 330)
;;  succ:       24 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 113 114 224 225 226
(note 285 284 286 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 286 285 287 24 (set (reg:DI 1 dx [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:164 89 {*movdi_internal}
     (nil))
(insn 287 286 289 24 (parallel [
            (set (reg:DI 0 ax [225])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:164 218 {*adddi_1}
     (nil))
(insn 289 287 290 24 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:164 90 {*movsi_internal}
     (nil))
(insn 290 289 291 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [225])) read_procpar.cpp:164 89 {*movdi_internal}
     (nil))
(call_insn 291 290 292 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:164 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 292 291 293 24 (set (reg:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(insn 293 292 294 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [226])) read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(call_insn 294 293 295 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:165 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 295 294 296 24 (set (reg:SI 0 ax [orig:113 D.5704 ] [113])
        (reg:SI 0 ax)) read_procpar.cpp:165 90 {*movsi_internal}
     (nil))
(insn 296 295 297 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:113 D.5704 ] [113])
            (const_int 0 [0]))) read_procpar.cpp:165 3 {*cmpsi_ccno_1}
     (nil))
(insn 297 296 298 24 (set (reg:QI 0 ax [orig:114 D.5705 ] [114])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:165 607 {*setcc_qi}
     (nil))
(insn 298 297 299 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:114 D.5705 ] [114])
            (const_int 0 [0]))) read_procpar.cpp:165 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 299 298 300 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 306)
            (pc))) read_procpar.cpp:165 612 {*jcc_1}
     (nil)
 -> 306)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 300 299 301 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 302 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:166 89 {*movdi_internal}
     (nil))
(call_insn 302 301 303 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:166 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 303 302 304 25 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:167 90 {*movsi_internal}
     (nil))
(call_insn 304 303 305 25 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:167 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 305 304 306)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 115 116 227 228 229 230 231
(code_label 306 305 307 26 15 "" [1 uses])
(note 307 306 308 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 308 307 309 26 (parallel [
            (set (reg:DI 0 ax [227])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:171 218 {*adddi_1}
     (nil))
(insn 309 308 310 26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:171 89 {*movdi_internal}
     (nil))
(insn 310 309 311 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [227])) read_procpar.cpp:171 89 {*movdi_internal}
     (nil))
(call_insn 311 310 312 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:171 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 312 311 313 26 (set (reg:DI 0 ax [228])
        (reg:DI 0 ax)) read_procpar.cpp:171 89 {*movdi_internal}
     (nil))
(insn 313 312 314 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [228])) read_procpar.cpp:171 89 {*movdi_internal}
     (nil))
(insn 314 313 315 26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(insn 315 314 316 26 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(call_insn 316 315 317 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:172 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 317 316 318 26 (set (reg:DI 0 ax [229])
        (reg:DI 0 ax)) read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(insn 318 317 319 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [229])) read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(insn 319 318 320 26 (set (reg:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:173 89 {*movdi_internal}
     (nil))
(insn 320 319 321 26 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) read_procpar.cpp:173 90 {*movsi_internal}
     (nil))
(insn 321 320 322 26 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:173 89 {*movdi_internal}
     (nil))
(insn 322 321 323 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [230])) read_procpar.cpp:173 89 {*movdi_internal}
     (nil))
(call_insn 323 322 324 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f52d1f101b0 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:173 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 324 323 325 26 (set (reg:DI 0 ax [orig:115 D.5709 ] [115])
        (reg:DI 0 ax)) read_procpar.cpp:173 89 {*movdi_internal}
     (nil))
(insn 325 324 326 26 (set (reg:SI 1 dx [orig:116 D.5704 ] [116])
        (reg:SI 0 ax [orig:115 D.5709 ] [115])) read_procpar.cpp:173 90 {*movsi_internal}
     (nil))
(insn 326 325 327 26 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:173 89 {*movdi_internal}
     (nil))
(insn 327 326 1028 26 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [231])
                (const_int 300 [0x12c])) [0 procpar_info_38(D)->num_points+0 S4 A32])
        (reg:SI 1 dx [orig:116 D.5704 ] [116])) read_procpar.cpp:173 90 {*movsi_internal}
     (nil))
(jump_insn 1028 327 1029 26 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1029 1028 330)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 232
(code_label 330 1029 331 27 14 "" [1 uses])
(note 331 330 332 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 332 331 333 27 (set (reg:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 333 332 334 27 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f52d1bd5a20 *.LC12>)) read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 334 333 335 27 (set (reg:DI 5 di)
        (reg:DI 0 ax [232])) read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(call_insn/i 335 334 336 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:175 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 336 335 337 27 (set (reg:SI 0 ax [orig:117 D.5704 ] [117])
        (reg:SI 0 ax)) read_procpar.cpp:175 90 {*movsi_internal}
     (nil))
(insn 337 336 338 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:117 D.5704 ] [117])
            (const_int 0 [0]))) read_procpar.cpp:175 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 338 337 339 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 382)
            (pc))) read_procpar.cpp:175 612 {*jcc_1}
     (nil)
 -> 382)
;;  succ:       28 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118 119 233 234 235
(note 339 338 340 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 340 339 341 28 (set (reg:DI 1 dx [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:177 89 {*movdi_internal}
     (nil))
(insn 341 340 343 28 (parallel [
            (set (reg:DI 0 ax [234])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:177 218 {*adddi_1}
     (nil))
(insn 343 341 344 28 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:177 90 {*movsi_internal}
     (nil))
(insn 344 343 345 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [234])) read_procpar.cpp:177 89 {*movdi_internal}
     (nil))
(call_insn 345 344 346 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:177 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 346 345 347 28 (set (reg:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:178 89 {*movdi_internal}
     (nil))
(insn 347 346 348 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [235])) read_procpar.cpp:178 89 {*movdi_internal}
     (nil))
(call_insn 348 347 349 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:178 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 349 348 350 28 (set (reg:SI 0 ax [orig:118 D.5704 ] [118])
        (reg:SI 0 ax)) read_procpar.cpp:178 90 {*movsi_internal}
     (nil))
(insn 350 349 351 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:118 D.5704 ] [118])
            (const_int 0 [0]))) read_procpar.cpp:178 3 {*cmpsi_ccno_1}
     (nil))
(insn 351 350 352 28 (set (reg:QI 0 ax [orig:119 D.5705 ] [119])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:178 607 {*setcc_qi}
     (nil))
(insn 352 351 353 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:119 D.5705 ] [119])
            (const_int 0 [0]))) read_procpar.cpp:178 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 353 352 354 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 360)
            (pc))) read_procpar.cpp:178 612 {*jcc_1}
     (nil)
 -> 360)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 354 353 355 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 356 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:179 89 {*movdi_internal}
     (nil))
(call_insn 356 355 357 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:179 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 357 356 358 29 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:180 90 {*movsi_internal}
     (nil))
(call_insn 358 357 359 29 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:180 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 359 358 360)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 120 236 237 238 239 240
(code_label 360 359 361 30 17 "" [1 uses])
(note 361 360 362 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 30 (parallel [
            (set (reg:DI 0 ax [236])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:184 218 {*adddi_1}
     (nil))
(insn 363 362 364 30 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 364 363 365 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [236])) read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(call_insn 365 364 366 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:184 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 366 365 367 30 (set (reg:DI 0 ax [237])
        (reg:DI 0 ax)) read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 367 366 368 30 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [237])) read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 368 367 369 30 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:185 89 {*movdi_internal}
     (nil))
(insn 369 368 370 30 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:185 89 {*movdi_internal}
     (nil))
(call_insn 370 369 371 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:185 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 371 370 372 30 (set (reg:DI 0 ax [238])
        (reg:DI 0 ax)) read_procpar.cpp:185 89 {*movdi_internal}
     (nil))
(insn 372 371 373 30 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [238])) read_procpar.cpp:185 89 {*movdi_internal}
     (nil))
(insn 373 372 374 30 (set (reg:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 374 373 375 30 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 375 374 376 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [239])) read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(call_insn 376 375 377 30 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:186 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 377 376 378 30 (set (reg:DF 1 dx [orig:120 D.5706 ] [120])
        (reg:DF 21 xmm0)) read_procpar.cpp:186 128 {*movdf_internal}
     (nil))
(insn 378 377 379 30 (set (reg/f:DI 0 ax [240])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 379 378 1030 30 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [240])
                (const_int 304 [0x130])) [0 procpar_info_38(D)->main_frequency+0 S8 A64])
        (reg:DF 1 dx [orig:120 D.5706 ] [120])) read_procpar.cpp:186 128 {*movdf_internal}
     (nil))
(jump_insn 1030 379 1031 30 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1031 1030 382)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 121 241
(code_label 382 1031 383 31 16 "" [1 uses])
(note 383 382 384 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 384 383 385 31 (set (reg:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:188 89 {*movdi_internal}
     (nil))
(insn 385 384 386 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f52d1bd5ab0 *.LC13>)) read_procpar.cpp:188 89 {*movdi_internal}
     (nil))
(insn 386 385 387 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [241])) read_procpar.cpp:188 89 {*movdi_internal}
     (nil))
(call_insn/i 387 386 388 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:188 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 388 387 389 31 (set (reg:SI 0 ax [orig:121 D.5704 ] [121])
        (reg:SI 0 ax)) read_procpar.cpp:188 90 {*movsi_internal}
     (nil))
(insn 389 388 390 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:121 D.5704 ] [121])
            (const_int 0 [0]))) read_procpar.cpp:188 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 390 389 391 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 434)
            (pc))) read_procpar.cpp:188 612 {*jcc_1}
     (nil)
 -> 434)
;;  succ:       32 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 123 242 243 244
(note 391 390 392 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 392 391 393 32 (set (reg:DI 1 dx [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:190 89 {*movdi_internal}
     (nil))
(insn 393 392 395 32 (parallel [
            (set (reg:DI 0 ax [243])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:190 218 {*adddi_1}
     (nil))
(insn 395 393 396 32 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:190 90 {*movsi_internal}
     (nil))
(insn 396 395 397 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [243])) read_procpar.cpp:190 89 {*movdi_internal}
     (nil))
(call_insn 397 396 398 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:190 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 398 397 399 32 (set (reg:DI 0 ax [244])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(insn 399 398 400 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [244])) read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(call_insn 400 399 401 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:191 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 401 400 402 32 (set (reg:SI 0 ax [orig:122 D.5704 ] [122])
        (reg:SI 0 ax)) read_procpar.cpp:191 90 {*movsi_internal}
     (nil))
(insn 402 401 403 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:122 D.5704 ] [122])
            (const_int 0 [0]))) read_procpar.cpp:191 3 {*cmpsi_ccno_1}
     (nil))
(insn 403 402 404 32 (set (reg:QI 0 ax [orig:123 D.5705 ] [123])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:191 607 {*setcc_qi}
     (nil))
(insn 404 403 405 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:123 D.5705 ] [123])
            (const_int 0 [0]))) read_procpar.cpp:191 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 405 404 406 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 412)
            (pc))) read_procpar.cpp:191 612 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 406 405 407 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 33 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:192 89 {*movdi_internal}
     (nil))
(call_insn 408 407 409 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:192 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 409 408 410 33 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:193 90 {*movsi_internal}
     (nil))
(call_insn 410 409 411 33 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:193 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 411 410 412)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 124 245 246 247 248 249
(code_label 412 411 413 34 19 "" [1 uses])
(note 413 412 414 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 414 413 415 34 (parallel [
            (set (reg:DI 0 ax [245])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:197 218 {*adddi_1}
     (nil))
(insn 415 414 416 34 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:197 89 {*movdi_internal}
     (nil))
(insn 416 415 417 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [245])) read_procpar.cpp:197 89 {*movdi_internal}
     (nil))
(call_insn 417 416 418 34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:197 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 418 417 419 34 (set (reg:DI 0 ax [246])
        (reg:DI 0 ax)) read_procpar.cpp:197 89 {*movdi_internal}
     (nil))
(insn 419 418 420 34 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [246])) read_procpar.cpp:197 89 {*movdi_internal}
     (nil))
(insn 420 419 421 34 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 421 420 422 34 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(call_insn 422 421 423 34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:198 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 423 422 424 34 (set (reg:DI 0 ax [247])
        (reg:DI 0 ax)) read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 424 423 425 34 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [247])) read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 425 424 426 34 (set (reg:DI 0 ax [248])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 426 425 427 34 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 427 426 428 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [248])) read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(call_insn 428 427 429 34 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:199 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 429 428 430 34 (set (reg:DF 1 dx [orig:124 D.5706 ] [124])
        (reg:DF 21 xmm0)) read_procpar.cpp:199 128 {*movdf_internal}
     (nil))
(insn 430 429 431 34 (set (reg/f:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 431 430 1032 34 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [249])
                (const_int 312 [0x138])) [0 procpar_info_38(D)->offset_frequency+0 S8 A64])
        (reg:DF 1 dx [orig:124 D.5706 ] [124])) read_procpar.cpp:199 128 {*movdf_internal}
     (nil))
(jump_insn 1032 431 1033 34 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1033 1032 434)
;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 125 250
(code_label 434 1033 435 35 18 "" [1 uses])
(note 435 434 436 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 436 435 437 35 (set (reg:DI 0 ax [250])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(insn 437 436 438 35 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f52d1bd5b40 *.LC14>)) read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(insn 438 437 439 35 (set (reg:DI 5 di)
        (reg:DI 0 ax [250])) read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(call_insn/i 439 438 440 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:201 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 440 439 441 35 (set (reg:SI 0 ax [orig:125 D.5704 ] [125])
        (reg:SI 0 ax)) read_procpar.cpp:201 90 {*movsi_internal}
     (nil))
(insn 441 440 442 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:125 D.5704 ] [125])
            (const_int 0 [0]))) read_procpar.cpp:201 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 442 441 443 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 487)
            (pc))) read_procpar.cpp:201 612 {*jcc_1}
     (nil)
 -> 487)
;;  succ:       36 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 126 127 251 252 253
(note 443 442 444 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 444 443 445 36 (set (reg:DI 1 dx [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(insn 445 444 447 36 (parallel [
            (set (reg:DI 0 ax [252])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:203 218 {*adddi_1}
     (nil))
(insn 447 445 448 36 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:203 90 {*movsi_internal}
     (nil))
(insn 448 447 449 36 (set (reg:DI 5 di)
        (reg:DI 0 ax [252])) read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(call_insn 449 448 450 36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:203 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 450 449 451 36 (set (reg:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(insn 451 450 452 36 (set (reg:DI 5 di)
        (reg:DI 0 ax [253])) read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(call_insn 452 451 453 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:204 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 453 452 454 36 (set (reg:SI 0 ax [orig:126 D.5704 ] [126])
        (reg:SI 0 ax)) read_procpar.cpp:204 90 {*movsi_internal}
     (nil))
(insn 454 453 455 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:126 D.5704 ] [126])
            (const_int 0 [0]))) read_procpar.cpp:204 3 {*cmpsi_ccno_1}
     (nil))
(insn 455 454 456 36 (set (reg:QI 0 ax [orig:127 D.5705 ] [127])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:204 607 {*setcc_qi}
     (nil))
(insn 456 455 457 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:127 D.5705 ] [127])
            (const_int 0 [0]))) read_procpar.cpp:204 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 457 456 458 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 464)
            (pc))) read_procpar.cpp:204 612 {*jcc_1}
     (nil)
 -> 464)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 458 457 459 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 459 458 460 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:205 89 {*movdi_internal}
     (nil))
(call_insn 460 459 461 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:205 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 461 460 462 37 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:206 90 {*movsi_internal}
     (nil))
(call_insn 462 461 463 37 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:206 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 463 462 464)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 128 129 254 255 256 257 258
(code_label 464 463 465 38 21 "" [1 uses])
(note 465 464 466 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 466 465 467 38 (parallel [
            (set (reg:DI 0 ax [254])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:210 218 {*adddi_1}
     (nil))
(insn 467 466 468 38 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:210 89 {*movdi_internal}
     (nil))
(insn 468 467 469 38 (set (reg:DI 5 di)
        (reg:DI 0 ax [254])) read_procpar.cpp:210 89 {*movdi_internal}
     (nil))
(call_insn 469 468 470 38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:210 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 470 469 471 38 (set (reg:DI 0 ax [255])
        (reg:DI 0 ax)) read_procpar.cpp:210 89 {*movdi_internal}
     (nil))
(insn 471 470 472 38 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [255])) read_procpar.cpp:210 89 {*movdi_internal}
     (nil))
(insn 472 471 473 38 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:211 89 {*movdi_internal}
     (nil))
(insn 473 472 474 38 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:211 89 {*movdi_internal}
     (nil))
(call_insn 474 473 475 38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:211 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 475 474 476 38 (set (reg:DI 0 ax [256])
        (reg:DI 0 ax)) read_procpar.cpp:211 89 {*movdi_internal}
     (nil))
(insn 476 475 477 38 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [256])) read_procpar.cpp:211 89 {*movdi_internal}
     (nil))
(insn 477 476 478 38 (set (reg:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:212 89 {*movdi_internal}
     (nil))
(insn 478 477 479 38 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:212 89 {*movdi_internal}
     (nil))
(insn 479 478 480 38 (set (reg:DI 5 di)
        (reg:DI 0 ax [257])) read_procpar.cpp:212 89 {*movdi_internal}
     (nil))
(call_insn 480 479 482 38 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:212 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 482 480 483 38 (set (reg:SF 21 xmm0 [orig:129 D.5707 ] [129])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:128 D.5706 ] [128]))) read_procpar.cpp:212 157 {*truncdfsf_fast_sse}
     (nil))
(insn 483 482 484 38 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:212 89 {*movdi_internal}
     (nil))
(insn 484 483 1034 38 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [258])
                (const_int 320 [0x140])) [0 procpar_info_38(D)->te+0 S4 A64])
        (reg:SF 21 xmm0 [orig:129 D.5707 ] [129])) read_procpar.cpp:212 129 {*movsf_internal}
     (nil))
(jump_insn 1034 484 1035 38 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1035 1034 487)
;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 130 259
(code_label 487 1035 488 39 20 "" [1 uses])
(note 488 487 489 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 489 488 490 39 (set (reg:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:214 89 {*movdi_internal}
     (nil))
(insn 490 489 491 39 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f52d1bd5bd0 *.LC15>)) read_procpar.cpp:214 89 {*movdi_internal}
     (nil))
(insn 491 490 492 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [259])) read_procpar.cpp:214 89 {*movdi_internal}
     (nil))
(call_insn/i 492 491 493 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:214 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 493 492 494 39 (set (reg:SI 0 ax [orig:130 D.5704 ] [130])
        (reg:SI 0 ax)) read_procpar.cpp:214 90 {*movsi_internal}
     (nil))
(insn 494 493 495 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:130 D.5704 ] [130])
            (const_int 0 [0]))) read_procpar.cpp:214 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 495 494 496 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 540)
            (pc))) read_procpar.cpp:214 612 {*jcc_1}
     (nil)
 -> 540)
;;  succ:       40 (FALLTHRU)
;;              43
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 131 132 260 261 262
(note 496 495 497 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 497 496 498 40 (set (reg:DI 1 dx [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(insn 498 497 500 40 (parallel [
            (set (reg:DI 0 ax [261])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:216 218 {*adddi_1}
     (nil))
(insn 500 498 501 40 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:216 90 {*movsi_internal}
     (nil))
(insn 501 500 502 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [261])) read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(call_insn 502 501 503 40 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:216 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 503 502 504 40 (set (reg:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:217 89 {*movdi_internal}
     (nil))
(insn 504 503 505 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [262])) read_procpar.cpp:217 89 {*movdi_internal}
     (nil))
(call_insn 505 504 506 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:217 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 506 505 507 40 (set (reg:SI 0 ax [orig:131 D.5704 ] [131])
        (reg:SI 0 ax)) read_procpar.cpp:217 90 {*movsi_internal}
     (nil))
(insn 507 506 508 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:131 D.5704 ] [131])
            (const_int 0 [0]))) read_procpar.cpp:217 3 {*cmpsi_ccno_1}
     (nil))
(insn 508 507 509 40 (set (reg:QI 0 ax [orig:132 D.5705 ] [132])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:217 607 {*setcc_qi}
     (nil))
(insn 509 508 510 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:132 D.5705 ] [132])
            (const_int 0 [0]))) read_procpar.cpp:217 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 510 509 511 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 517)
            (pc))) read_procpar.cpp:217 612 {*jcc_1}
     (nil)
 -> 517)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 511 510 512 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 512 511 513 41 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:218 89 {*movdi_internal}
     (nil))
(call_insn 513 512 514 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:218 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 514 513 515 41 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:219 90 {*movsi_internal}
     (nil))
(call_insn 515 514 516 41 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:219 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 516 515 517)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 133 134 263 264 265 266 267
(code_label 517 516 518 42 23 "" [1 uses])
(note 518 517 519 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 519 518 520 42 (parallel [
            (set (reg:DI 0 ax [263])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:223 218 {*adddi_1}
     (nil))
(insn 520 519 521 42 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 521 520 522 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [263])) read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(call_insn 522 521 523 42 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:223 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 523 522 524 42 (set (reg:DI 0 ax [264])
        (reg:DI 0 ax)) read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 524 523 525 42 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [264])) read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 525 524 526 42 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 526 525 527 42 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(call_insn 527 526 528 42 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:224 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 528 527 529 42 (set (reg:DI 0 ax [265])
        (reg:DI 0 ax)) read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 529 528 530 42 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [265])) read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 530 529 531 42 (set (reg:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:225 89 {*movdi_internal}
     (nil))
(insn 531 530 532 42 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:225 89 {*movdi_internal}
     (nil))
(insn 532 531 533 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [266])) read_procpar.cpp:225 89 {*movdi_internal}
     (nil))
(call_insn 533 532 535 42 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:225 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 535 533 536 42 (set (reg:SF 21 xmm0 [orig:134 D.5707 ] [134])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:133 D.5706 ] [133]))) read_procpar.cpp:225 157 {*truncdfsf_fast_sse}
     (nil))
(insn 536 535 537 42 (set (reg/f:DI 0 ax [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:225 89 {*movdi_internal}
     (nil))
(insn 537 536 1036 42 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [267])
                (const_int 324 [0x144])) [0 procpar_info_38(D)->tm+0 S4 A32])
        (reg:SF 21 xmm0 [orig:134 D.5707 ] [134])) read_procpar.cpp:225 129 {*movsf_internal}
     (nil))
(jump_insn 1036 537 1037 42 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1037 1036 540)
;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 135 268
(code_label 540 1037 541 43 22 "" [1 uses])
(note 541 540 542 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 542 541 543 43 (set (reg:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:227 89 {*movdi_internal}
     (nil))
(insn 543 542 544 43 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f52d1bd5c60 *.LC16>)) read_procpar.cpp:227 89 {*movdi_internal}
     (nil))
(insn 544 543 545 43 (set (reg:DI 5 di)
        (reg:DI 0 ax [268])) read_procpar.cpp:227 89 {*movdi_internal}
     (nil))
(call_insn/i 545 544 546 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:227 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 546 545 547 43 (set (reg:SI 0 ax [orig:135 D.5704 ] [135])
        (reg:SI 0 ax)) read_procpar.cpp:227 90 {*movsi_internal}
     (nil))
(insn 547 546 548 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:135 D.5704 ] [135])
            (const_int 0 [0]))) read_procpar.cpp:227 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 548 547 549 43 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 593)
            (pc))) read_procpar.cpp:227 612 {*jcc_1}
     (nil)
 -> 593)
;;  succ:       44 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 136 137 269 270 271
(note 549 548 550 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 550 549 551 44 (set (reg:DI 1 dx [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:229 89 {*movdi_internal}
     (nil))
(insn 551 550 553 44 (parallel [
            (set (reg:DI 0 ax [270])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:229 218 {*adddi_1}
     (nil))
(insn 553 551 554 44 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:229 90 {*movsi_internal}
     (nil))
(insn 554 553 555 44 (set (reg:DI 5 di)
        (reg:DI 0 ax [270])) read_procpar.cpp:229 89 {*movdi_internal}
     (nil))
(call_insn 555 554 556 44 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:229 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 556 555 557 44 (set (reg:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:230 89 {*movdi_internal}
     (nil))
(insn 557 556 558 44 (set (reg:DI 5 di)
        (reg:DI 0 ax [271])) read_procpar.cpp:230 89 {*movdi_internal}
     (nil))
(call_insn 558 557 559 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:230 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 559 558 560 44 (set (reg:SI 0 ax [orig:136 D.5704 ] [136])
        (reg:SI 0 ax)) read_procpar.cpp:230 90 {*movsi_internal}
     (nil))
(insn 560 559 561 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:136 D.5704 ] [136])
            (const_int 0 [0]))) read_procpar.cpp:230 3 {*cmpsi_ccno_1}
     (nil))
(insn 561 560 562 44 (set (reg:QI 0 ax [orig:137 D.5705 ] [137])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:230 607 {*setcc_qi}
     (nil))
(insn 562 561 563 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:137 D.5705 ] [137])
            (const_int 0 [0]))) read_procpar.cpp:230 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 563 562 564 44 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 570)
            (pc))) read_procpar.cpp:230 612 {*jcc_1}
     (nil)
 -> 570)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 564 563 565 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 565 564 566 45 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:231 89 {*movdi_internal}
     (nil))
(call_insn 566 565 567 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:231 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 567 566 568 45 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:232 90 {*movsi_internal}
     (nil))
(call_insn 568 567 569 45 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:232 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 569 568 570)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 138 139 272 273 274 275 276
(code_label 570 569 571 46 25 "" [1 uses])
(note 571 570 572 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 572 571 573 46 (parallel [
            (set (reg:DI 0 ax [272])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:236 218 {*adddi_1}
     (nil))
(insn 573 572 574 46 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:236 89 {*movdi_internal}
     (nil))
(insn 574 573 575 46 (set (reg:DI 5 di)
        (reg:DI 0 ax [272])) read_procpar.cpp:236 89 {*movdi_internal}
     (nil))
(call_insn 575 574 576 46 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:236 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 576 575 577 46 (set (reg:DI 0 ax [273])
        (reg:DI 0 ax)) read_procpar.cpp:236 89 {*movdi_internal}
     (nil))
(insn 577 576 578 46 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [273])) read_procpar.cpp:236 89 {*movdi_internal}
     (nil))
(insn 578 577 579 46 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:237 89 {*movdi_internal}
     (nil))
(insn 579 578 580 46 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:237 89 {*movdi_internal}
     (nil))
(call_insn 580 579 581 46 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:237 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 581 580 582 46 (set (reg:DI 0 ax [274])
        (reg:DI 0 ax)) read_procpar.cpp:237 89 {*movdi_internal}
     (nil))
(insn 582 581 583 46 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [274])) read_procpar.cpp:237 89 {*movdi_internal}
     (nil))
(insn 583 582 584 46 (set (reg:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:238 89 {*movdi_internal}
     (nil))
(insn 584 583 585 46 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:238 89 {*movdi_internal}
     (nil))
(insn 585 584 586 46 (set (reg:DI 5 di)
        (reg:DI 0 ax [275])) read_procpar.cpp:238 89 {*movdi_internal}
     (nil))
(call_insn 586 585 588 46 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:238 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 588 586 589 46 (set (reg:SF 21 xmm0 [orig:139 D.5707 ] [139])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:138 D.5706 ] [138]))) read_procpar.cpp:238 157 {*truncdfsf_fast_sse}
     (nil))
(insn 589 588 590 46 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:238 89 {*movdi_internal}
     (nil))
(insn 590 589 1038 46 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [276])
                (const_int 328 [0x148])) [0 procpar_info_38(D)->gain+0 S4 A64])
        (reg:SF 21 xmm0 [orig:139 D.5707 ] [139])) read_procpar.cpp:238 129 {*movsf_internal}
     (nil))
(jump_insn 1038 590 1039 46 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1039 1038 593)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 140 277
(code_label 593 1039 594 47 24 "" [1 uses])
(note 594 593 595 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 595 594 596 47 (set (reg:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:240 89 {*movdi_internal}
     (nil))
(insn 596 595 597 47 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f52d1bd5cf0 *.LC17>)) read_procpar.cpp:240 89 {*movdi_internal}
     (nil))
(insn 597 596 598 47 (set (reg:DI 5 di)
        (reg:DI 0 ax [277])) read_procpar.cpp:240 89 {*movdi_internal}
     (nil))
(call_insn/i 598 597 599 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:240 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 599 598 600 47 (set (reg:SI 0 ax [orig:140 D.5704 ] [140])
        (reg:SI 0 ax)) read_procpar.cpp:240 90 {*movsi_internal}
     (nil))
(insn 600 599 601 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:140 D.5704 ] [140])
            (const_int 0 [0]))) read_procpar.cpp:240 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 601 600 602 47 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 646)
            (pc))) read_procpar.cpp:240 612 {*jcc_1}
     (nil)
 -> 646)
;;  succ:       48 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 141 142 278 279 280
(note 602 601 603 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 603 602 604 48 (set (reg:DI 1 dx [278])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:242 89 {*movdi_internal}
     (nil))
(insn 604 603 606 48 (parallel [
            (set (reg:DI 0 ax [279])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:242 218 {*adddi_1}
     (nil))
(insn 606 604 607 48 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:242 90 {*movsi_internal}
     (nil))
(insn 607 606 608 48 (set (reg:DI 5 di)
        (reg:DI 0 ax [279])) read_procpar.cpp:242 89 {*movdi_internal}
     (nil))
(call_insn 608 607 609 48 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:242 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 609 608 610 48 (set (reg:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:243 89 {*movdi_internal}
     (nil))
(insn 610 609 611 48 (set (reg:DI 5 di)
        (reg:DI 0 ax [280])) read_procpar.cpp:243 89 {*movdi_internal}
     (nil))
(call_insn 611 610 612 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:243 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 612 611 613 48 (set (reg:SI 0 ax [orig:141 D.5704 ] [141])
        (reg:SI 0 ax)) read_procpar.cpp:243 90 {*movsi_internal}
     (nil))
(insn 613 612 614 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:141 D.5704 ] [141])
            (const_int 0 [0]))) read_procpar.cpp:243 3 {*cmpsi_ccno_1}
     (nil))
(insn 614 613 615 48 (set (reg:QI 0 ax [orig:142 D.5705 ] [142])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:243 607 {*setcc_qi}
     (nil))
(insn 615 614 616 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:142 D.5705 ] [142])
            (const_int 0 [0]))) read_procpar.cpp:243 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 616 615 617 48 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 623)
            (pc))) read_procpar.cpp:243 612 {*jcc_1}
     (nil)
 -> 623)
;;  succ:       49 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 617 616 618 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 618 617 619 49 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:244 89 {*movdi_internal}
     (nil))
(call_insn 619 618 620 49 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:244 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 620 619 621 49 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:245 90 {*movsi_internal}
     (nil))
(call_insn 621 620 622 49 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:245 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 622 621 623)
;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 143 144 281 282 283 284 285
(code_label 623 622 624 50 27 "" [1 uses])
(note 624 623 625 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 625 624 626 50 (parallel [
            (set (reg:DI 0 ax [281])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:249 218 {*adddi_1}
     (nil))
(insn 626 625 627 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:249 89 {*movdi_internal}
     (nil))
(insn 627 626 628 50 (set (reg:DI 5 di)
        (reg:DI 0 ax [281])) read_procpar.cpp:249 89 {*movdi_internal}
     (nil))
(call_insn 628 627 629 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:249 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 629 628 630 50 (set (reg:DI 0 ax [282])
        (reg:DI 0 ax)) read_procpar.cpp:249 89 {*movdi_internal}
     (nil))
(insn 630 629 631 50 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [282])) read_procpar.cpp:249 89 {*movdi_internal}
     (nil))
(insn 631 630 632 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(insn 632 631 633 50 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(call_insn 633 632 634 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:250 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 634 633 635 50 (set (reg:DI 0 ax [283])
        (reg:DI 0 ax)) read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(insn 635 634 636 50 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [283])) read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(insn 636 635 637 50 (set (reg:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(insn 637 636 638 50 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(insn 638 637 639 50 (set (reg:DI 5 di)
        (reg:DI 0 ax [284])) read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn 639 638 641 50 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:251 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 641 639 642 50 (set (reg:SF 21 xmm0 [orig:144 D.5707 ] [144])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:143 D.5706 ] [143]))) read_procpar.cpp:251 157 {*truncdfsf_fast_sse}
     (nil))
(insn 642 641 643 50 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(insn 643 642 1040 50 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [285])
                (const_int 332 [0x14c])) [0 procpar_info_38(D)->pos1+0 S4 A32])
        (reg:SF 21 xmm0 [orig:144 D.5707 ] [144])) read_procpar.cpp:251 129 {*movsf_internal}
     (nil))
(jump_insn 1040 643 1041 50 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1041 1040 646)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 145 286
(code_label 646 1041 647 51 26 "" [1 uses])
(note 647 646 648 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 648 647 649 51 (set (reg:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:253 89 {*movdi_internal}
     (nil))
(insn 649 648 650 51 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f52d1bd5d80 *.LC18>)) read_procpar.cpp:253 89 {*movdi_internal}
     (nil))
(insn 650 649 651 51 (set (reg:DI 5 di)
        (reg:DI 0 ax [286])) read_procpar.cpp:253 89 {*movdi_internal}
     (nil))
(call_insn/i 651 650 652 51 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:253 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 652 651 653 51 (set (reg:SI 0 ax [orig:145 D.5704 ] [145])
        (reg:SI 0 ax)) read_procpar.cpp:253 90 {*movsi_internal}
     (nil))
(insn 653 652 654 51 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:145 D.5704 ] [145])
            (const_int 0 [0]))) read_procpar.cpp:253 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 654 653 655 51 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 699)
            (pc))) read_procpar.cpp:253 612 {*jcc_1}
     (nil)
 -> 699)
;;  succ:       52 (FALLTHRU)
;;              55
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 146 147 287 288 289
(note 655 654 656 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 656 655 657 52 (set (reg:DI 1 dx [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:255 89 {*movdi_internal}
     (nil))
(insn 657 656 659 52 (parallel [
            (set (reg:DI 0 ax [288])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:255 218 {*adddi_1}
     (nil))
(insn 659 657 660 52 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:255 90 {*movsi_internal}
     (nil))
(insn 660 659 661 52 (set (reg:DI 5 di)
        (reg:DI 0 ax [288])) read_procpar.cpp:255 89 {*movdi_internal}
     (nil))
(call_insn 661 660 662 52 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:255 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 662 661 663 52 (set (reg:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:256 89 {*movdi_internal}
     (nil))
(insn 663 662 664 52 (set (reg:DI 5 di)
        (reg:DI 0 ax [289])) read_procpar.cpp:256 89 {*movdi_internal}
     (nil))
(call_insn 664 663 665 52 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:256 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 665 664 666 52 (set (reg:SI 0 ax [orig:146 D.5704 ] [146])
        (reg:SI 0 ax)) read_procpar.cpp:256 90 {*movsi_internal}
     (nil))
(insn 666 665 667 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:146 D.5704 ] [146])
            (const_int 0 [0]))) read_procpar.cpp:256 3 {*cmpsi_ccno_1}
     (nil))
(insn 667 666 668 52 (set (reg:QI 0 ax [orig:147 D.5705 ] [147])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:256 607 {*setcc_qi}
     (nil))
(insn 668 667 669 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:147 D.5705 ] [147])
            (const_int 0 [0]))) read_procpar.cpp:256 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 669 668 670 52 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 676)
            (pc))) read_procpar.cpp:256 612 {*jcc_1}
     (nil)
 -> 676)
;;  succ:       53 (FALLTHRU)
;;              54
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 670 669 671 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 671 670 672 53 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:257 89 {*movdi_internal}
     (nil))
(call_insn 672 671 673 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:257 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 673 672 674 53 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:258 90 {*movsi_internal}
     (nil))
(call_insn 674 673 675 53 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:258 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 675 674 676)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 148 149 290 291 292 293 294
(code_label 676 675 677 54 29 "" [1 uses])
(note 677 676 678 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 678 677 679 54 (parallel [
            (set (reg:DI 0 ax [290])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:262 218 {*adddi_1}
     (nil))
(insn 679 678 680 54 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:262 89 {*movdi_internal}
     (nil))
(insn 680 679 681 54 (set (reg:DI 5 di)
        (reg:DI 0 ax [290])) read_procpar.cpp:262 89 {*movdi_internal}
     (nil))
(call_insn 681 680 682 54 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:262 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 682 681 683 54 (set (reg:DI 0 ax [291])
        (reg:DI 0 ax)) read_procpar.cpp:262 89 {*movdi_internal}
     (nil))
(insn 683 682 684 54 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [291])) read_procpar.cpp:262 89 {*movdi_internal}
     (nil))
(insn 684 683 685 54 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:263 89 {*movdi_internal}
     (nil))
(insn 685 684 686 54 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:263 89 {*movdi_internal}
     (nil))
(call_insn 686 685 687 54 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:263 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 687 686 688 54 (set (reg:DI 0 ax [292])
        (reg:DI 0 ax)) read_procpar.cpp:263 89 {*movdi_internal}
     (nil))
(insn 688 687 689 54 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [292])) read_procpar.cpp:263 89 {*movdi_internal}
     (nil))
(insn 689 688 690 54 (set (reg:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 690 689 691 54 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 691 690 692 54 (set (reg:DI 5 di)
        (reg:DI 0 ax [293])) read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(call_insn 692 691 694 54 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:264 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 694 692 695 54 (set (reg:SF 21 xmm0 [orig:149 D.5707 ] [149])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:148 D.5706 ] [148]))) read_procpar.cpp:264 157 {*truncdfsf_fast_sse}
     (nil))
(insn 695 694 696 54 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 696 695 1042 54 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [294])
                (const_int 336 [0x150])) [0 procpar_info_38(D)->pos2+0 S4 A64])
        (reg:SF 21 xmm0 [orig:149 D.5707 ] [149])) read_procpar.cpp:264 129 {*movsf_internal}
     (nil))
(jump_insn 1042 696 1043 54 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1043 1042 699)
;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 150 295
(code_label 699 1043 700 55 28 "" [1 uses])
(note 700 699 701 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 701 700 702 55 (set (reg:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:266 89 {*movdi_internal}
     (nil))
(insn 702 701 703 55 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f52d1bd5e10 *.LC19>)) read_procpar.cpp:266 89 {*movdi_internal}
     (nil))
(insn 703 702 704 55 (set (reg:DI 5 di)
        (reg:DI 0 ax [295])) read_procpar.cpp:266 89 {*movdi_internal}
     (nil))
(call_insn/i 704 703 705 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:266 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 705 704 706 55 (set (reg:SI 0 ax [orig:150 D.5704 ] [150])
        (reg:SI 0 ax)) read_procpar.cpp:266 90 {*movsi_internal}
     (nil))
(insn 706 705 707 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:150 D.5704 ] [150])
            (const_int 0 [0]))) read_procpar.cpp:266 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 707 706 708 55 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 752)
            (pc))) read_procpar.cpp:266 612 {*jcc_1}
     (nil)
 -> 752)
;;  succ:       56 (FALLTHRU)
;;              59
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 151 152 296 297 298
(note 708 707 709 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 709 708 710 56 (set (reg:DI 1 dx [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:268 89 {*movdi_internal}
     (nil))
(insn 710 709 712 56 (parallel [
            (set (reg:DI 0 ax [297])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:268 218 {*adddi_1}
     (nil))
(insn 712 710 713 56 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:268 90 {*movsi_internal}
     (nil))
(insn 713 712 714 56 (set (reg:DI 5 di)
        (reg:DI 0 ax [297])) read_procpar.cpp:268 89 {*movdi_internal}
     (nil))
(call_insn 714 713 715 56 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:268 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 715 714 716 56 (set (reg:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:269 89 {*movdi_internal}
     (nil))
(insn 716 715 717 56 (set (reg:DI 5 di)
        (reg:DI 0 ax [298])) read_procpar.cpp:269 89 {*movdi_internal}
     (nil))
(call_insn 717 716 718 56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:269 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 718 717 719 56 (set (reg:SI 0 ax [orig:151 D.5704 ] [151])
        (reg:SI 0 ax)) read_procpar.cpp:269 90 {*movsi_internal}
     (nil))
(insn 719 718 720 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:151 D.5704 ] [151])
            (const_int 0 [0]))) read_procpar.cpp:269 3 {*cmpsi_ccno_1}
     (nil))
(insn 720 719 721 56 (set (reg:QI 0 ax [orig:152 D.5705 ] [152])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:269 607 {*setcc_qi}
     (nil))
(insn 721 720 722 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:152 D.5705 ] [152])
            (const_int 0 [0]))) read_procpar.cpp:269 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 722 721 723 56 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 729)
            (pc))) read_procpar.cpp:269 612 {*jcc_1}
     (nil)
 -> 729)
;;  succ:       57 (FALLTHRU)
;;              58
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 723 722 724 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 724 723 725 57 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:270 89 {*movdi_internal}
     (nil))
(call_insn 725 724 726 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:270 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 726 725 727 57 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:271 90 {*movsi_internal}
     (nil))
(call_insn 727 726 728 57 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:271 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 728 727 729)
;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 153 154 299 300 301 302 303
(code_label 729 728 730 58 31 "" [1 uses])
(note 730 729 731 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 731 730 732 58 (parallel [
            (set (reg:DI 0 ax [299])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:275 218 {*adddi_1}
     (nil))
(insn 732 731 733 58 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:275 89 {*movdi_internal}
     (nil))
(insn 733 732 734 58 (set (reg:DI 5 di)
        (reg:DI 0 ax [299])) read_procpar.cpp:275 89 {*movdi_internal}
     (nil))
(call_insn 734 733 735 58 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:275 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 735 734 736 58 (set (reg:DI 0 ax [300])
        (reg:DI 0 ax)) read_procpar.cpp:275 89 {*movdi_internal}
     (nil))
(insn 736 735 737 58 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [300])) read_procpar.cpp:275 89 {*movdi_internal}
     (nil))
(insn 737 736 738 58 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:276 89 {*movdi_internal}
     (nil))
(insn 738 737 739 58 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:276 89 {*movdi_internal}
     (nil))
(call_insn 739 738 740 58 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:276 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 740 739 741 58 (set (reg:DI 0 ax [301])
        (reg:DI 0 ax)) read_procpar.cpp:276 89 {*movdi_internal}
     (nil))
(insn 741 740 742 58 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [301])) read_procpar.cpp:276 89 {*movdi_internal}
     (nil))
(insn 742 741 743 58 (set (reg:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(insn 743 742 744 58 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(insn 744 743 745 58 (set (reg:DI 5 di)
        (reg:DI 0 ax [302])) read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(call_insn 745 744 747 58 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:277 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 747 745 748 58 (set (reg:SF 21 xmm0 [orig:154 D.5707 ] [154])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:153 D.5706 ] [153]))) read_procpar.cpp:277 157 {*truncdfsf_fast_sse}
     (nil))
(insn 748 747 749 58 (set (reg/f:DI 0 ax [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(insn 749 748 1044 58 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [303])
                (const_int 340 [0x154])) [0 procpar_info_38(D)->pos3+0 S4 A32])
        (reg:SF 21 xmm0 [orig:154 D.5707 ] [154])) read_procpar.cpp:277 129 {*movsf_internal}
     (nil))
(jump_insn 1044 749 1045 58 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1045 1044 752)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 155 304
(code_label 752 1045 753 59 30 "" [1 uses])
(note 753 752 754 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 754 753 755 59 (set (reg:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:279 89 {*movdi_internal}
     (nil))
(insn 755 754 756 59 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f52d1bd5ea0 *.LC20>)) read_procpar.cpp:279 89 {*movdi_internal}
     (nil))
(insn 756 755 757 59 (set (reg:DI 5 di)
        (reg:DI 0 ax [304])) read_procpar.cpp:279 89 {*movdi_internal}
     (nil))
(call_insn/i 757 756 758 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:279 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 758 757 759 59 (set (reg:SI 0 ax [orig:155 D.5704 ] [155])
        (reg:SI 0 ax)) read_procpar.cpp:279 90 {*movsi_internal}
     (nil))
(insn 759 758 760 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:155 D.5704 ] [155])
            (const_int 0 [0]))) read_procpar.cpp:279 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 760 759 761 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 805)
            (pc))) read_procpar.cpp:279 612 {*jcc_1}
     (nil)
 -> 805)
;;  succ:       60 (FALLTHRU)
;;              63
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 156 157 305 306 307
(note 761 760 762 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 762 761 763 60 (set (reg:DI 1 dx [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:281 89 {*movdi_internal}
     (nil))
(insn 763 762 765 60 (parallel [
            (set (reg:DI 0 ax [306])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:281 218 {*adddi_1}
     (nil))
(insn 765 763 766 60 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:281 90 {*movsi_internal}
     (nil))
(insn 766 765 767 60 (set (reg:DI 5 di)
        (reg:DI 0 ax [306])) read_procpar.cpp:281 89 {*movdi_internal}
     (nil))
(call_insn 767 766 768 60 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:281 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 768 767 769 60 (set (reg:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:282 89 {*movdi_internal}
     (nil))
(insn 769 768 770 60 (set (reg:DI 5 di)
        (reg:DI 0 ax [307])) read_procpar.cpp:282 89 {*movdi_internal}
     (nil))
(call_insn 770 769 771 60 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:282 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 771 770 772 60 (set (reg:SI 0 ax [orig:156 D.5704 ] [156])
        (reg:SI 0 ax)) read_procpar.cpp:282 90 {*movsi_internal}
     (nil))
(insn 772 771 773 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:156 D.5704 ] [156])
            (const_int 0 [0]))) read_procpar.cpp:282 3 {*cmpsi_ccno_1}
     (nil))
(insn 773 772 774 60 (set (reg:QI 0 ax [orig:157 D.5705 ] [157])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:282 607 {*setcc_qi}
     (nil))
(insn 774 773 775 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:157 D.5705 ] [157])
            (const_int 0 [0]))) read_procpar.cpp:282 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 775 774 776 60 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 782)
            (pc))) read_procpar.cpp:282 612 {*jcc_1}
     (nil)
 -> 782)
;;  succ:       61 (FALLTHRU)
;;              62
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 776 775 777 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 777 776 778 61 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:283 89 {*movdi_internal}
     (nil))
(call_insn 778 777 779 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:283 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 779 778 780 61 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:284 90 {*movsi_internal}
     (nil))
(call_insn 780 779 781 61 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:284 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 781 780 782)
;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 158 159 308 309 310 311 312
(code_label 782 781 783 62 33 "" [1 uses])
(note 783 782 784 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 784 783 785 62 (parallel [
            (set (reg:DI 0 ax [308])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:288 218 {*adddi_1}
     (nil))
(insn 785 784 786 62 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:288 89 {*movdi_internal}
     (nil))
(insn 786 785 787 62 (set (reg:DI 5 di)
        (reg:DI 0 ax [308])) read_procpar.cpp:288 89 {*movdi_internal}
     (nil))
(call_insn 787 786 788 62 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:288 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 788 787 789 62 (set (reg:DI 0 ax [309])
        (reg:DI 0 ax)) read_procpar.cpp:288 89 {*movdi_internal}
     (nil))
(insn 789 788 790 62 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [309])) read_procpar.cpp:288 89 {*movdi_internal}
     (nil))
(insn 790 789 791 62 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:289 89 {*movdi_internal}
     (nil))
(insn 791 790 792 62 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:289 89 {*movdi_internal}
     (nil))
(call_insn 792 791 793 62 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:289 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 793 792 794 62 (set (reg:DI 0 ax [310])
        (reg:DI 0 ax)) read_procpar.cpp:289 89 {*movdi_internal}
     (nil))
(insn 794 793 795 62 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [310])) read_procpar.cpp:289 89 {*movdi_internal}
     (nil))
(insn 795 794 796 62 (set (reg:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:290 89 {*movdi_internal}
     (nil))
(insn 796 795 797 62 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:290 89 {*movdi_internal}
     (nil))
(insn 797 796 798 62 (set (reg:DI 5 di)
        (reg:DI 0 ax [311])) read_procpar.cpp:290 89 {*movdi_internal}
     (nil))
(call_insn 798 797 800 62 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:290 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 800 798 801 62 (set (reg:SF 21 xmm0 [orig:159 D.5707 ] [159])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:158 D.5706 ] [158]))) read_procpar.cpp:290 157 {*truncdfsf_fast_sse}
     (nil))
(insn 801 800 802 62 (set (reg/f:DI 0 ax [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:290 89 {*movdi_internal}
     (nil))
(insn 802 801 1046 62 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [312])
                (const_int 344 [0x158])) [0 procpar_info_38(D)->vox1+0 S4 A64])
        (reg:SF 21 xmm0 [orig:159 D.5707 ] [159])) read_procpar.cpp:290 129 {*movsf_internal}
     (nil))
(jump_insn 1046 802 1047 62 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1047 1046 805)
;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 160 313
(code_label 805 1047 806 63 32 "" [1 uses])
(note 806 805 807 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 807 806 808 63 (set (reg:DI 0 ax [313])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:292 89 {*movdi_internal}
     (nil))
(insn 808 807 809 63 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f52d1bd5f30 *.LC21>)) read_procpar.cpp:292 89 {*movdi_internal}
     (nil))
(insn 809 808 810 63 (set (reg:DI 5 di)
        (reg:DI 0 ax [313])) read_procpar.cpp:292 89 {*movdi_internal}
     (nil))
(call_insn/i 810 809 811 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:292 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 811 810 812 63 (set (reg:SI 0 ax [orig:160 D.5704 ] [160])
        (reg:SI 0 ax)) read_procpar.cpp:292 90 {*movsi_internal}
     (nil))
(insn 812 811 813 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:160 D.5704 ] [160])
            (const_int 0 [0]))) read_procpar.cpp:292 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 813 812 814 63 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 858)
            (pc))) read_procpar.cpp:292 612 {*jcc_1}
     (nil)
 -> 858)
;;  succ:       64 (FALLTHRU)
;;              67
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 161 162 314 315 316
(note 814 813 815 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 815 814 816 64 (set (reg:DI 1 dx [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:294 89 {*movdi_internal}
     (nil))
(insn 816 815 818 64 (parallel [
            (set (reg:DI 0 ax [315])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:294 218 {*adddi_1}
     (nil))
(insn 818 816 819 64 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:294 90 {*movsi_internal}
     (nil))
(insn 819 818 820 64 (set (reg:DI 5 di)
        (reg:DI 0 ax [315])) read_procpar.cpp:294 89 {*movdi_internal}
     (nil))
(call_insn 820 819 821 64 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:294 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 821 820 822 64 (set (reg:DI 0 ax [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:295 89 {*movdi_internal}
     (nil))
(insn 822 821 823 64 (set (reg:DI 5 di)
        (reg:DI 0 ax [316])) read_procpar.cpp:295 89 {*movdi_internal}
     (nil))
(call_insn 823 822 824 64 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:295 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 824 823 825 64 (set (reg:SI 0 ax [orig:161 D.5704 ] [161])
        (reg:SI 0 ax)) read_procpar.cpp:295 90 {*movsi_internal}
     (nil))
(insn 825 824 826 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:161 D.5704 ] [161])
            (const_int 0 [0]))) read_procpar.cpp:295 3 {*cmpsi_ccno_1}
     (nil))
(insn 826 825 827 64 (set (reg:QI 0 ax [orig:162 D.5705 ] [162])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:295 607 {*setcc_qi}
     (nil))
(insn 827 826 828 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:162 D.5705 ] [162])
            (const_int 0 [0]))) read_procpar.cpp:295 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 828 827 829 64 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 835)
            (pc))) read_procpar.cpp:295 612 {*jcc_1}
     (nil)
 -> 835)
;;  succ:       65 (FALLTHRU)
;;              66
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 829 828 830 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 830 829 831 65 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:296 89 {*movdi_internal}
     (nil))
(call_insn 831 830 832 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:296 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 832 831 833 65 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:297 90 {*movsi_internal}
     (nil))
(call_insn 833 832 834 65 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:297 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 834 833 835)
;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 163 164 317 318 319 320 321
(code_label 835 834 836 66 35 "" [1 uses])
(note 836 835 837 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 837 836 838 66 (parallel [
            (set (reg:DI 0 ax [317])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:301 218 {*adddi_1}
     (nil))
(insn 838 837 839 66 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:301 89 {*movdi_internal}
     (nil))
(insn 839 838 840 66 (set (reg:DI 5 di)
        (reg:DI 0 ax [317])) read_procpar.cpp:301 89 {*movdi_internal}
     (nil))
(call_insn 840 839 841 66 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:301 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 841 840 842 66 (set (reg:DI 0 ax [318])
        (reg:DI 0 ax)) read_procpar.cpp:301 89 {*movdi_internal}
     (nil))
(insn 842 841 843 66 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [318])) read_procpar.cpp:301 89 {*movdi_internal}
     (nil))
(insn 843 842 844 66 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:302 89 {*movdi_internal}
     (nil))
(insn 844 843 845 66 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:302 89 {*movdi_internal}
     (nil))
(call_insn 845 844 846 66 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:302 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 846 845 847 66 (set (reg:DI 0 ax [319])
        (reg:DI 0 ax)) read_procpar.cpp:302 89 {*movdi_internal}
     (nil))
(insn 847 846 848 66 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [319])) read_procpar.cpp:302 89 {*movdi_internal}
     (nil))
(insn 848 847 849 66 (set (reg:DI 0 ax [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:303 89 {*movdi_internal}
     (nil))
(insn 849 848 850 66 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:303 89 {*movdi_internal}
     (nil))
(insn 850 849 851 66 (set (reg:DI 5 di)
        (reg:DI 0 ax [320])) read_procpar.cpp:303 89 {*movdi_internal}
     (nil))
(call_insn 851 850 853 66 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:303 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 853 851 854 66 (set (reg:SF 21 xmm0 [orig:164 D.5707 ] [164])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:163 D.5706 ] [163]))) read_procpar.cpp:303 157 {*truncdfsf_fast_sse}
     (nil))
(insn 854 853 855 66 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:303 89 {*movdi_internal}
     (nil))
(insn 855 854 1048 66 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [321])
                (const_int 348 [0x15c])) [0 procpar_info_38(D)->vox2+0 S4 A32])
        (reg:SF 21 xmm0 [orig:164 D.5707 ] [164])) read_procpar.cpp:303 129 {*movsf_internal}
     (nil))
(jump_insn 1048 855 1049 66 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1049 1048 858)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 165 322
(code_label 858 1049 859 67 34 "" [1 uses])
(note 859 858 860 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 860 859 861 67 (set (reg:DI 0 ax [322])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:305 89 {*movdi_internal}
     (nil))
(insn 861 860 862 67 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f52d1bfb000 *.LC22>)) read_procpar.cpp:305 89 {*movdi_internal}
     (nil))
(insn 862 861 863 67 (set (reg:DI 5 di)
        (reg:DI 0 ax [322])) read_procpar.cpp:305 89 {*movdi_internal}
     (nil))
(call_insn/i 863 862 864 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:305 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 864 863 865 67 (set (reg:SI 0 ax [orig:165 D.5704 ] [165])
        (reg:SI 0 ax)) read_procpar.cpp:305 90 {*movsi_internal}
     (nil))
(insn 865 864 866 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:165 D.5704 ] [165])
            (const_int 0 [0]))) read_procpar.cpp:305 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 866 865 867 67 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 911)
            (pc))) read_procpar.cpp:305 612 {*jcc_1}
     (nil)
 -> 911)
;;  succ:       68 (FALLTHRU)
;;              71
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 166 167 323 324 325
(note 867 866 868 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 868 867 869 68 (set (reg:DI 1 dx [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:307 89 {*movdi_internal}
     (nil))
(insn 869 868 871 68 (parallel [
            (set (reg:DI 0 ax [324])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:307 218 {*adddi_1}
     (nil))
(insn 871 869 872 68 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:307 90 {*movsi_internal}
     (nil))
(insn 872 871 873 68 (set (reg:DI 5 di)
        (reg:DI 0 ax [324])) read_procpar.cpp:307 89 {*movdi_internal}
     (nil))
(call_insn 873 872 874 68 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:307 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 874 873 875 68 (set (reg:DI 0 ax [325])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:308 89 {*movdi_internal}
     (nil))
(insn 875 874 876 68 (set (reg:DI 5 di)
        (reg:DI 0 ax [325])) read_procpar.cpp:308 89 {*movdi_internal}
     (nil))
(call_insn 876 875 877 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:308 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 877 876 878 68 (set (reg:SI 0 ax [orig:166 D.5704 ] [166])
        (reg:SI 0 ax)) read_procpar.cpp:308 90 {*movsi_internal}
     (nil))
(insn 878 877 879 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:166 D.5704 ] [166])
            (const_int 0 [0]))) read_procpar.cpp:308 3 {*cmpsi_ccno_1}
     (nil))
(insn 879 878 880 68 (set (reg:QI 0 ax [orig:167 D.5705 ] [167])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:308 607 {*setcc_qi}
     (nil))
(insn 880 879 881 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:167 D.5705 ] [167])
            (const_int 0 [0]))) read_procpar.cpp:308 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 881 880 882 68 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 888)
            (pc))) read_procpar.cpp:308 612 {*jcc_1}
     (nil)
 -> 888)
;;  succ:       69 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 882 881 883 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 883 882 884 69 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:309 89 {*movdi_internal}
     (nil))
(call_insn 884 883 885 69 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:309 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 885 884 886 69 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:310 90 {*movsi_internal}
     (nil))
(call_insn 886 885 887 69 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:310 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 887 886 888)
;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 168 169 326 327 328 329 330
(code_label 888 887 889 70 37 "" [1 uses])
(note 889 888 890 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 890 889 891 70 (parallel [
            (set (reg:DI 0 ax [326])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:314 218 {*adddi_1}
     (nil))
(insn 891 890 892 70 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:314 89 {*movdi_internal}
     (nil))
(insn 892 891 893 70 (set (reg:DI 5 di)
        (reg:DI 0 ax [326])) read_procpar.cpp:314 89 {*movdi_internal}
     (nil))
(call_insn 893 892 894 70 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:314 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 894 893 895 70 (set (reg:DI 0 ax [327])
        (reg:DI 0 ax)) read_procpar.cpp:314 89 {*movdi_internal}
     (nil))
(insn 895 894 896 70 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [327])) read_procpar.cpp:314 89 {*movdi_internal}
     (nil))
(insn 896 895 897 70 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:315 89 {*movdi_internal}
     (nil))
(insn 897 896 898 70 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:315 89 {*movdi_internal}
     (nil))
(call_insn 898 897 899 70 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:315 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 899 898 900 70 (set (reg:DI 0 ax [328])
        (reg:DI 0 ax)) read_procpar.cpp:315 89 {*movdi_internal}
     (nil))
(insn 900 899 901 70 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [328])) read_procpar.cpp:315 89 {*movdi_internal}
     (nil))
(insn 901 900 902 70 (set (reg:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:316 89 {*movdi_internal}
     (nil))
(insn 902 901 903 70 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:316 89 {*movdi_internal}
     (nil))
(insn 903 902 904 70 (set (reg:DI 5 di)
        (reg:DI 0 ax [329])) read_procpar.cpp:316 89 {*movdi_internal}
     (nil))
(call_insn 904 903 906 70 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:316 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 906 904 907 70 (set (reg:SF 21 xmm0 [orig:169 D.5707 ] [169])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:168 D.5706 ] [168]))) read_procpar.cpp:316 157 {*truncdfsf_fast_sse}
     (nil))
(insn 907 906 908 70 (set (reg/f:DI 0 ax [330])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:316 89 {*movdi_internal}
     (nil))
(insn 908 907 1050 70 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [330])
                (const_int 352 [0x160])) [0 procpar_info_38(D)->vox3+0 S4 A64])
        (reg:SF 21 xmm0 [orig:169 D.5707 ] [169])) read_procpar.cpp:316 129 {*movsf_internal}
     (nil))
(jump_insn 1050 908 1051 70 (set (pc)
        (label_ref 962)) 654 {jump}
     (nil)
 -> 962)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1051 1050 911)
;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 170 331
(code_label 911 1051 912 71 36 "" [1 uses])
(note 912 911 913 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 913 912 914 71 (set (reg:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:318 89 {*movdi_internal}
     (nil))
(insn 914 913 915 71 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f52d1bfb090 *.LC23>)) read_procpar.cpp:318 89 {*movdi_internal}
     (nil))
(insn 915 914 916 71 (set (reg:DI 5 di)
        (reg:DI 0 ax [331])) read_procpar.cpp:318 89 {*movdi_internal}
     (nil))
(call_insn/i 916 915 917 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f52d207a360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:318 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 917 916 918 71 (set (reg:SI 0 ax [orig:170 D.5704 ] [170])
        (reg:SI 0 ax)) read_procpar.cpp:318 90 {*movsi_internal}
     (nil))
(insn 918 917 919 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:170 D.5704 ] [170])
            (const_int 0 [0]))) read_procpar.cpp:318 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 919 918 920 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 962)
            (pc))) read_procpar.cpp:318 612 {*jcc_1}
     (nil)
 -> 962)
;;  succ:       72 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 171 172 332 333 334
(note 920 919 921 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 921 920 922 72 (set (reg:DI 1 dx [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:320 89 {*movdi_internal}
     (nil))
(insn 922 921 924 72 (parallel [
            (set (reg:DI 0 ax [333])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:320 218 {*adddi_1}
     (nil))
(insn 924 922 925 72 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:320 90 {*movsi_internal}
     (nil))
(insn 925 924 926 72 (set (reg:DI 5 di)
        (reg:DI 0 ax [333])) read_procpar.cpp:320 89 {*movdi_internal}
     (nil))
(call_insn 926 925 927 72 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:320 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 927 926 928 72 (set (reg:DI 0 ax [334])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:321 89 {*movdi_internal}
     (nil))
(insn 928 927 929 72 (set (reg:DI 5 di)
        (reg:DI 0 ax [334])) read_procpar.cpp:321 89 {*movdi_internal}
     (nil))
(call_insn 929 928 930 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:321 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 930 929 931 72 (set (reg:SI 0 ax [orig:171 D.5704 ] [171])
        (reg:SI 0 ax)) read_procpar.cpp:321 90 {*movsi_internal}
     (nil))
(insn 931 930 932 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:171 D.5704 ] [171])
            (const_int 0 [0]))) read_procpar.cpp:321 3 {*cmpsi_ccno_1}
     (nil))
(insn 932 931 933 72 (set (reg:QI 0 ax [orig:172 D.5705 ] [172])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:321 607 {*setcc_qi}
     (nil))
(insn 933 932 934 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:172 D.5705 ] [172])
            (const_int 0 [0]))) read_procpar.cpp:321 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 934 933 935 72 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 941)
            (pc))) read_procpar.cpp:321 612 {*jcc_1}
     (nil)
 -> 941)
;;  succ:       73 (FALLTHRU)
;;              74
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 935 934 936 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 936 935 937 73 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:322 89 {*movdi_internal}
     (nil))
(call_insn 937 936 938 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:322 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 938 937 939 73 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:323 90 {*movsi_internal}
     (nil))
(call_insn 939 938 940 73 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:323 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 940 939 941)
;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 173 174 335 336 337 338 339
(code_label 941 940 942 74 38 "" [1 uses])
(note 942 941 943 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 943 942 944 74 (parallel [
            (set (reg:DI 0 ax [335])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:327 218 {*adddi_1}
     (nil))
(insn 944 943 945 74 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:327 89 {*movdi_internal}
     (nil))
(insn 945 944 946 74 (set (reg:DI 5 di)
        (reg:DI 0 ax [335])) read_procpar.cpp:327 89 {*movdi_internal}
     (nil))
(call_insn 946 945 947 74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:327 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 947 946 948 74 (set (reg:DI 0 ax [336])
        (reg:DI 0 ax)) read_procpar.cpp:327 89 {*movdi_internal}
     (nil))
(insn 948 947 949 74 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [336])) read_procpar.cpp:327 89 {*movdi_internal}
     (nil))
(insn 949 948 950 74 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f52d1bd5630 *.LC5>)) read_procpar.cpp:328 89 {*movdi_internal}
     (nil))
(insn 950 949 951 74 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:328 89 {*movdi_internal}
     (nil))
(call_insn 951 950 952 74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f52d1eb7510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:328 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 952 951 953 74 (set (reg:DI 0 ax [337])
        (reg:DI 0 ax)) read_procpar.cpp:328 89 {*movdi_internal}
     (nil))
(insn 953 952 954 74 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [337])) read_procpar.cpp:328 89 {*movdi_internal}
     (nil))
(insn 954 953 955 74 (set (reg:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:329 89 {*movdi_internal}
     (nil))
(insn 955 954 956 74 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:329 89 {*movdi_internal}
     (nil))
(insn 956 955 957 74 (set (reg:DI 5 di)
        (reg:DI 0 ax [338])) read_procpar.cpp:329 89 {*movdi_internal}
     (nil))
(call_insn 957 956 959 74 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f52d1f03e58 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:329 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 959 957 960 74 (set (reg:SF 21 xmm0 [orig:174 D.5707 ] [174])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:173 D.5706 ] [173]))) read_procpar.cpp:329 157 {*truncdfsf_fast_sse}
     (nil))
(insn 960 959 961 74 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:329 89 {*movdi_internal}
     (nil))
(insn 961 960 962 74 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [339])
                (const_int 368 [0x170])) [0 procpar_info_38(D)->vtheta+0 S4 A64])
        (reg:SF 21 xmm0 [orig:174 D.5707 ] [174])) read_procpar.cpp:329 129 {*movsf_internal}
     (nil))
;;  succ:       75 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       74 (FALLTHRU)
;;              10 [100.0%] 
;;              14 [100.0%] 
;;              18 [100.0%] 
;;              22 [100.0%] 
;;              26 [100.0%] 
;;              30 [100.0%] 
;;              34 [100.0%] 
;;              38 [100.0%] 
;;              42 [100.0%] 
;;              46 [100.0%] 
;;              50 [100.0%] 
;;              54 [100.0%] 
;;              58 [100.0%] 
;;              62 [100.0%] 
;;              66 [100.0%] 
;;              71
;;              70 [100.0%] 
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 175 176 340 341 342
(code_label 962 961 963 75 7 "" [17 uses])
(note 963 962 964 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 964 963 965 75 (set (reg:DI 1 dx [340])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:339 89 {*movdi_internal}
     (nil))
(insn 965 964 967 75 (parallel [
            (set (reg:DI 0 ax [341])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:339 218 {*adddi_1}
     (nil))
(insn 967 965 968 75 (set (reg:SI 4 si)
        (const_int 5000 [0x1388])) read_procpar.cpp:339 90 {*movsi_internal}
     (nil))
(insn 968 967 969 75 (set (reg:DI 5 di)
        (reg:DI 0 ax [341])) read_procpar.cpp:339 89 {*movdi_internal}
     (nil))
(call_insn 969 968 970 75 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f52d1e49af8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:339 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 970 969 971 75 (set (reg:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:341 89 {*movdi_internal}
     (nil))
(insn 971 970 972 75 (set (reg:DI 5 di)
        (reg:DI 0 ax [342])) read_procpar.cpp:341 89 {*movdi_internal}
     (nil))
(call_insn 972 971 973 75 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f52d1e556c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:341 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 973 972 974 75 (set (reg:SI 0 ax [orig:175 D.5704 ] [175])
        (reg:SI 0 ax)) read_procpar.cpp:341 90 {*movsi_internal}
     (nil))
(insn 974 973 975 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:175 D.5704 ] [175])
            (const_int 0 [0]))) read_procpar.cpp:341 3 {*cmpsi_ccno_1}
     (nil))
(insn 975 974 976 75 (set (reg:QI 0 ax [orig:176 D.5705 ] [176])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:341 607 {*setcc_qi}
     (nil))
(insn 976 975 977 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:176 D.5705 ] [176])
            (const_int 0 [0]))) read_procpar.cpp:341 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 977 976 978 75 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 984)
            (pc))) read_procpar.cpp:341 612 {*jcc_1}
     (nil)
 -> 984)
;;  succ:       76 (FALLTHRU)
;;              77
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 978 977 979 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 979 978 980 76 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f52d1bd5480 *.LC2>)) read_procpar.cpp:342 89 {*movdi_internal}
     (nil))
(call_insn 980 979 981 76 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:342 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 981 980 982 76 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:343 90 {*movsi_internal}
     (nil))
(call_insn 982 981 983 76 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f52d20a1ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:343 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 983 982 984)
;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 984 983 985 77 39 "" [1 uses])
(note 985 984 1052 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1052 985 1053 77 (set (pc)
        (label_ref 49)) read_procpar.cpp:51 654 {jump}
     (nil)
 -> 49)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1053 1052 988)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 988 1053 989 78 4 "" [1 uses])
(note 989 988 990 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 990 989 991 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])
            (const_int 0 [0]))) read_procpar.cpp:354 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 991 990 992 78 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1001)
            (pc))) read_procpar.cpp:354 612 {*jcc_1}
     (nil)
 -> 1001)
;;  succ:       79 (FALLTHRU)
;;              80
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 177 343
(note 992 991 993 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 993 992 994 79 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f52d1bfb120 *.LC24>)) read_procpar.cpp:356 89 {*movdi_internal}
     (nil))
(call_insn 994 993 995 79 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f52d2086000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:356 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 995 994 996 79 (set (reg/f:DI 0 ax [orig:177 D.5710 ] [177])
        (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f52d1e41000 stdout>) [0 stdout+0 S8 A64])) read_procpar.cpp:357 89 {*movdi_internal}
     (nil))
(insn 996 995 997 79 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:177 D.5710 ] [177])) read_procpar.cpp:357 89 {*movdi_internal}
     (nil))
(call_insn 997 996 998 79 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fflush") [flags 0x41]  <function_decl 0x7f52d1e43288 fflush>) [0 fflush S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:357 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 998 997 999 79 (set (reg:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:358 89 {*movdi_internal}
     (nil))
(insn 999 998 1000 79 (set (reg:DI 5 di)
        (reg:DI 0 ax [343])) read_procpar.cpp:358 89 {*movdi_internal}
     (nil))
(call_insn 1000 999 1001 79 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f52d1e431b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:358 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       80 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78
;;              79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 178 179
(code_label 1001 1000 1002 80 40 "" [1 uses])
(note 1002 1001 1003 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 1003 1002 1006 80 (set (reg:SI 0 ax [orig:178 D.5704 ] [178])
        (const_int 2 [0x2])) read_procpar.cpp:364 90 {*movsi_internal}
     (nil))
(insn 1006 1003 1010 80 (set (reg:SI 0 ax [orig:179 <retval> ] [179])
        (reg:SI 0 ax [orig:178 D.5704 ] [178])) read_procpar.cpp:364 90 {*movsi_internal}
     (nil))
(insn 1010 1006 1011 80 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:179 <retval> ] [179])) read_procpar.cpp:365 90 {*movsi_internal}
     (nil))
(insn 1011 1010 1012 80 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.5711+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [346]))
        ]) read_procpar.cpp:365 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1012 1011 1018 80 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1015)
            (pc))) read_procpar.cpp:365 612 {*jcc_1}
     (nil)
 -> 1015)
;;  succ:       82
;;              81 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1018 1012 1013 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(call_insn 1013 1018 1014 81 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f52d1f81bd0 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) read_procpar.cpp:365 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1014 1013 1015)
;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1015 1014 1019 82 42 "" [1 uses])
(note 1019 1015 1016 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 1016 1019 1054 82 (use (reg/i:SI 0 ax)) read_procpar.cpp:365 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1054 1016 0 NOTE_INSN_DELETED)
