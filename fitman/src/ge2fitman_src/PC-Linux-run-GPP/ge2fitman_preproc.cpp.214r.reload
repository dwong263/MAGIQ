
;; Function int pre_process(int*, Preprocess*, Procpar_info*, float**, float**) (_Z11pre_processPiP10PreprocessP12Procpar_infoPPfS5_, funcdef_no=1020, decl_uid=23991, symbol_order=227)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 20:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 28:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 53:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 54:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 55:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 56:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 58:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 73:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 99:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 112:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 114
	 Choosing alt 0 in insn 114:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 0 in insn 115:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 118:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 119:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 120:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 127:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 128:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 131:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 154:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 164:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 165:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 166:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 167:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 168:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=414 from oldreg=297, assigning class SSE_REGS to r414
  168: r414:DF=r414:DF*r299:DF
      REG_DEAD r299:DF
      REG_DEAD r298:DF
    Inserting insn reload before:
  653: r414:DF=r298:DF
    Inserting insn reload after:
  654: r297:DF=r414:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 654:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 169:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 193
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 194:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 195:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 196:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=415 from oldreg=173, assigning class SSE_REGS to r415
  196: r415:SF=r415:SF*r308:SF
      REG_DEAD r308:SF
      REG_DEAD r172:SF
    Inserting insn reload before:
  655: r415:SF=r172:SF
    Inserting insn reload after:
  656: r173:SF=r415:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 656:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 197:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 201:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 209:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 219:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 220:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 221:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=416 from oldreg=311, assigning class SSE_REGS to r416
  221: r416:DF=r416:DF/r313:DF
      REG_DEAD r313:DF
      REG_DEAD r312:DF
    Inserting insn reload before:
  657: r416:DF=r312:DF
    Inserting insn reload after:
  658: r311:DF=r416:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 658:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 222:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 247:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 248:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 249:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=417 from oldreg=165, assigning class SSE_REGS to r417
  249: r417:SF=r417:SF/r322:SF
      REG_DEAD r322:SF
      REG_DEAD r164:SF
    Inserting insn reload before:
  659: r417:SF=r164:SF
    Inserting insn reload after:
  660: r165:SF=r417:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 660:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 250:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 254:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 262:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=418, assigning class NO_REGS to secondary r418
  263: r418:DF=r324:DF
      REG_DEAD r324:DF
    Inserting the sec. move after:
  661: xmm0:DF=r418:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 661:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 264:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 265:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 267:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 268:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 269:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 270:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 271:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=419 from oldreg=326, assigning class SSE_REGS to r419
  271: r419:DF=r419:DF*r328:DF
      REG_DEAD r328:DF
      REG_DEAD r327:DF
    Inserting insn reload before:
  662: r419:DF=r327:DF
    Inserting insn reload after:
  663: r326:DF=r419:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 663:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 272:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 284:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 296
	 Choosing alt 0 in insn 296:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 297:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 298:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 299:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=420 from oldreg=181, assigning class SSE_REGS to r420
  299: r420:SF=r420:SF*r337:SF
      REG_DEAD r337:SF
      REG_DEAD r180:SF
    Inserting insn reload before:
  664: r420:SF=r180:SF
    Inserting insn reload after:
  665: r181:SF=r420:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 665:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 300:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 304:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 322:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=421 from oldreg=186, assigning class GENERAL_REGS to r421
  322: {r421:DI=r421:DI<<0x9;clobber flags:CC;}
      REG_DEAD r185:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  666: r421:DI=r185:DI
    Inserting insn reload after:
  667: r186:DI=r421:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 323:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 327:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 329
	 Choosing alt 0 in insn 329:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 330:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 336:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 345:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 346
	 Choosing alt 0 in insn 346:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 353:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=422 from oldreg=197, assigning class GENERAL_REGS to r422
  353: {r422:DI=r422:DI<<0x9;clobber flags:CC;}
      REG_DEAD r196:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  668: r422:DI=r196:DI
    Inserting insn reload after:
  669: r197:DI=r422:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 354:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 358:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 359:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 360
	 Choosing alt 0 in insn 360:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 361:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 368:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 377:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 378
	 Choosing alt 0 in insn 378:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 385:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=423 from oldreg=208, assigning class GENERAL_REGS to r423
  385: {r423:DI=r423:DI<<0x9;clobber flags:CC;}
      REG_DEAD r207:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  670: r423:DI=r207:DI
    Inserting insn reload after:
  671: r208:DI=r423:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 390:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 392
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 398
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 399:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 406:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 412:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 421:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 423:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 425:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 426:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 434:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 439:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 440:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 442:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 443:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 445:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 462:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 463:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 464:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 467:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 469:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 470:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 480:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 485:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 495
	 Choosing alt 0 in insn 495:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 502:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=424 from oldreg=240, assigning class GENERAL_REGS to r424
  502: {r424:DI=r424:DI<<0x9;clobber flags:CC;}
      REG_DEAD r239:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  672: r424:DI=r239:DI
    Inserting insn reload after:
  673: r240:DI=r424:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 508:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 509
	 Choosing alt 0 in insn 509:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 510:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 516:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 522:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 526:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 527:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 530:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 534:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 535:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 536:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 537:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 540:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 544:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 549:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 550:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 551:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 556:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 557:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 558:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 559:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 560:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 570:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 575:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 584:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 585
	 Choosing alt 0 in insn 585:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 590:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 591:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 592:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 593:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 595:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 604:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 607:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 610:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50

********** Pseudo live ranges #1: **********

  BB 50
   Insn 621: point = 0
   Insn 620: point = 0
   Insn 616: point = 1
   Insn 613: point = 3
  BB 49
   Insn 611: point = 4
   Insn 610: point = 4
   Insn 608: point = 5
   Insn 607: point = 7
  BB 45
   Insn 650: point = 8
   Insn 570: point = 8
  BB 44
   Insn 567: point = 8
   Insn 566: point = 8
   Insn 565: point = 9
   Insn 564: point = 10
   Insn 563: point = 11
   Insn 562: point = 12
   Insn 561: point = 13
   Insn 560: point = 14
   Insn 559: point = 16
   Insn 558: point = 17
   Insn 557: point = 19
   Insn 556: point = 21
  BB 43
   Insn 553: point = 22
   Insn 552: point = 22
   Insn 551: point = 23
   Insn 550: point = 25
   Insn 549: point = 27
  BB 42
   Insn 547: point = 28
   Insn 546: point = 28
   Insn 545: point = 29
   Insn 544: point = 31
  BB 41
   Insn 542: point = 32
   Insn 541: point = 32
   Insn 540: point = 33
  BB 40
   Insn 539: point = 35
   Insn 538: point = 35
   Insn 537: point = 36
   Insn 536: point = 37
   Insn 535: point = 39
   Insn 534: point = 41
  BB 39
   Insn 532: point = 42
   Insn 531: point = 42
   Insn 530: point = 43
  BB 38
   Insn 529: point = 45
   Insn 528: point = 45
   Insn 527: point = 46
   Insn 526: point = 47
   Insn 525: point = 49
  BB 37
   Insn 523: point = 50
   Insn 522: point = 50
   Insn 520: point = 51
   Insn 519: point = 53
  BB 33
   Insn 648: point = 54
   Insn 480: point = 54
  BB 32
   Insn 477: point = 54
   Insn 476: point = 54
   Insn 475: point = 55
   Insn 474: point = 56
   Insn 473: point = 57
   Insn 472: point = 58
   Insn 471: point = 59
   Insn 470: point = 60
   Insn 469: point = 61
   Insn 468: point = 63
   Insn 467: point = 64
   Insn 466: point = 66
   Insn 465: point = 68
   Insn 464: point = 69
   Insn 463: point = 71
   Insn 462: point = 73
  BB 31
   Insn 460: point = 74
   Insn 459: point = 74
   Insn 458: point = 75
   Insn 457: point = 77
  BB 30
   Insn 454: point = 78
   Insn 453: point = 78
   Insn 452: point = 79
   Insn 451: point = 80
   Insn 450: point = 81
   Insn 449: point = 82
   Insn 448: point = 83
   Insn 447: point = 84
   Insn 446: point = 85
   Insn 445: point = 87
   Insn 444: point = 88
   Insn 443: point = 90
   Insn 442: point = 92
   Insn 441: point = 93
   Insn 440: point = 95
   Insn 439: point = 97
  BB 29
   Insn 437: point = 98
   Insn 436: point = 98
   Insn 435: point = 99
   Insn 434: point = 101
  BB 28
   Insn 431: point = 102
   Insn 430: point = 102
   Insn 429: point = 103
   Insn 428: point = 104
   Insn 427: point = 105
   Insn 426: point = 106
   Insn 425: point = 107
   Insn 424: point = 108
   Insn 423: point = 110
   Insn 422: point = 111
   Insn 421: point = 113
   Insn 420: point = 115
  BB 27
   Insn 418: point = 116
   Insn 417: point = 116
   Insn 416: point = 117
   Insn 415: point = 119
  BB 26
   Insn 413: point = 120
   Insn 412: point = 120
   Insn 410: point = 121
   Insn 409: point = 123
  BB 2
   Insn 634: point = 124
   Insn 10: point = 124
   Insn 6: point = 124
   Insn 5: point = 124
   Insn 4: point = 124
   Insn 3: point = 124
   Insn 2: point = 124
  BB 25
   Insn 406: point = 124
  BB 24
   Insn 403: point = 124
   Insn 402: point = 124
   Insn 401: point = 125
   Insn 400: point = 126
   Insn 399: point = 127
   Insn 398: point = 129
   Insn 397: point = 131
   Insn 396: point = 132
   Insn 395: point = 134
   Insn 394: point = 136
   Insn 393: point = 137
   Insn 392: point = 139
   Insn 391: point = 141
   Insn 390: point = 142
   Insn 389: point = 144
   Insn 388: point = 146
   Insn 387: point = 147
   Insn 386: point = 149
   Insn 671: point = 150
	Hard reg 1 is preferable by r423 with profit 1
   Insn 385: point = 152
   Insn 670: point = 152
	Hard reg 1 is preferable by r423 with profit 1
	Hard reg 0 is preferable by r423 with profit 1
   Insn 384: point = 154
   Insn 383: point = 156
  BB 23
   Insn 381: point = 157
   Insn 380: point = 157
   Insn 379: point = 158
   Insn 378: point = 160
   Insn 377: point = 162
   Insn 376: point = 163
   Insn 375: point = 165
   Insn 374: point = 167
   Insn 373: point = 169
   Insn 372: point = 170
   Insn 371: point = 170
   Insn 370: point = 170
   Insn 369: point = 170
   Insn 368: point = 171
   Insn 367: point = 173
  BB 22
   Insn 364: point = 174
   Insn 363: point = 174
   Insn 362: point = 175
   Insn 361: point = 176
   Insn 360: point = 178
   Insn 359: point = 180
   Insn 358: point = 181
   Insn 357: point = 183
   Insn 356: point = 185
   Insn 355: point = 186
   Insn 354: point = 188
   Insn 669: point = 189
	Hard reg 1 is preferable by r422 with profit 1
   Insn 353: point = 191
   Insn 668: point = 191
	Hard reg 1 is preferable by r422 with profit 1
	Hard reg 0 is preferable by r422 with profit 1
   Insn 352: point = 193
   Insn 351: point = 195
  BB 21
   Insn 349: point = 196
   Insn 348: point = 196
   Insn 347: point = 197
   Insn 346: point = 199
   Insn 345: point = 201
   Insn 344: point = 202
   Insn 343: point = 204
   Insn 342: point = 206
   Insn 341: point = 208
   Insn 340: point = 209
   Insn 339: point = 209
   Insn 338: point = 209
   Insn 337: point = 209
   Insn 336: point = 210
   Insn 335: point = 212
   Insn 334: point = 213
   Insn 333: point = 213
   Insn 332: point = 214
   Insn 331: point = 215
   Insn 330: point = 216
   Insn 329: point = 218
   Insn 328: point = 220
   Insn 327: point = 221
   Insn 326: point = 223
   Insn 325: point = 225
   Insn 324: point = 226
   Insn 323: point = 228
   Insn 667: point = 229
	Hard reg 2 is preferable by r421 with profit 1
   Insn 322: point = 231
   Insn 666: point = 231
	Hard reg 2 is preferable by r421 with profit 1
	Hard reg 0 is preferable by r421 with profit 1
   Insn 321: point = 233
   Insn 320: point = 235
   Insn 319: point = 236
   Insn 318: point = 238
   Insn 317: point = 239
   Insn 316: point = 241
   Insn 315: point = 243
   Insn 314: point = 245
   Insn 313: point = 246
   Insn 312: point = 246
   Insn 311: point = 246
   Insn 310: point = 246
   Insn 309: point = 247
   Insn 308: point = 249
  BB 20
   Insn 306: point = 250
   Insn 305: point = 250
   Insn 304: point = 251
  BB 18
   Insn 646: point = 252
  BB 13
   Insn 642: point = 252
  BB 12
   Insn 203: point = 252
   Insn 202: point = 252
   Insn 201: point = 253
  BB 10
   Insn 639: point = 254
  BB 11
   Insn 197: point = 254
   Insn 656: point = 255
	Hard reg 0 is preferable by r415 with profit 1
   Insn 196: point = 257
   Insn 655: point = 258
	Hard reg 0 is preferable by r415 with profit 1
	Hard reg 22 is preferable by r415 with profit 1
   Insn 195: point = 260
   Insn 194: point = 261
   Insn 193: point = 263
   Insn 192: point = 265
   Insn 191: point = 266
   Insn 190: point = 268
   Insn 189: point = 270
   Insn 188: point = 272
   Insn 187: point = 273
   Insn 186: point = 273
   Insn 185: point = 273
   Insn 184: point = 273
   Insn 183: point = 274
   Insn 182: point = 276
   Insn 181: point = 277
   Insn 180: point = 279
   Insn 179: point = 280
   Insn 178: point = 282
   Insn 177: point = 284
   Insn 176: point = 286
   Insn 175: point = 287
   Insn 174: point = 287
   Insn 173: point = 287
   Insn 172: point = 287
   Insn 171: point = 288
   Insn 170: point = 290
   Insn 169: point = 291
   Insn 654: point = 292
	Hard reg 0 is preferable by r414 with profit 1
   Insn 168: point = 294
   Insn 653: point = 295
	Hard reg 0 is preferable by r414 with profit 1
	Hard reg 22 is preferable by r414 with profit 1
   Insn 167: point = 297
   Insn 166: point = 298
   Insn 165: point = 299
   Insn 164: point = 300
  BB 17
   Insn 256: point = 301
   Insn 255: point = 301
   Insn 254: point = 302
  BB 15
   Insn 644: point = 303
  BB 16
   Insn 250: point = 303
   Insn 660: point = 304
	Hard reg 0 is preferable by r417 with profit 1
   Insn 249: point = 306
   Insn 659: point = 307
	Hard reg 0 is preferable by r417 with profit 1
	Hard reg 21 is preferable by r417 with profit 1
   Insn 248: point = 309
   Insn 247: point = 310
   Insn 246: point = 312
   Insn 245: point = 314
   Insn 244: point = 315
   Insn 243: point = 317
   Insn 242: point = 319
   Insn 241: point = 321
   Insn 240: point = 322
   Insn 239: point = 322
   Insn 238: point = 322
   Insn 237: point = 322
   Insn 236: point = 323
   Insn 235: point = 325
   Insn 234: point = 326
   Insn 233: point = 328
   Insn 232: point = 329
   Insn 231: point = 331
   Insn 230: point = 333
   Insn 229: point = 335
   Insn 228: point = 336
   Insn 227: point = 336
   Insn 226: point = 336
   Insn 225: point = 336
   Insn 224: point = 337
   Insn 223: point = 339
   Insn 222: point = 340
   Insn 658: point = 341
	Hard reg 0 is preferable by r416 with profit 1
   Insn 221: point = 343
   Insn 657: point = 344
	Hard reg 0 is preferable by r416 with profit 1
	Hard reg 21 is preferable by r416 with profit 1
   Insn 220: point = 346
   Insn 219: point = 347
  BB 14
   Insn 211: point = 348
   Insn 210: point = 348
   Insn 209: point = 349
  BB 9
   Insn 156: point = 350
   Insn 155: point = 350
   Insn 154: point = 351
  BB 8
   Insn 152: point = 352
   Insn 151: point = 352
   Insn 150: point = 353
   Insn 149: point = 355
   Insn 148: point = 357
   Insn 147: point = 358
   Insn 146: point = 360
   Insn 145: point = 362
   Insn 144: point = 364
   Insn 143: point = 365
   Insn 142: point = 365
   Insn 141: point = 365
   Insn 140: point = 365
   Insn 139: point = 366
   Insn 138: point = 368
  BB 7
   Insn 136: point = 369
   Insn 135: point = 369
  BB 3
   Insn 636: point = 369
   Insn 59: point = 369
   Insn 58: point = 369
   Insn 57: point = 370
   Insn 56: point = 371
   Insn 55: point = 372
   Insn 54: point = 373
   Insn 53: point = 374
   Insn 52: point = 375
   Insn 51: point = 375
   Insn 50: point = 376
   Insn 49: point = 378
   Insn 48: point = 380
   Insn 47: point = 382
   Insn 46: point = 384
   Insn 45: point = 386
   Insn 44: point = 388
   Insn 43: point = 390
   Insn 42: point = 391
   Insn 41: point = 393
   Insn 40: point = 395
   Insn 39: point = 396
   Insn 38: point = 398
   Insn 37: point = 400
   Insn 36: point = 402
   Insn 35: point = 404
   Insn 34: point = 406
   Insn 33: point = 407
   Insn 32: point = 409
   Insn 31: point = 411
   Insn 30: point = 412
   Insn 29: point = 414
   Insn 28: point = 416
   Insn 27: point = 418
   Insn 26: point = 420
   Insn 25: point = 422
   Insn 24: point = 423
   Insn 23: point = 425
   Insn 22: point = 427
   Insn 21: point = 428
   Insn 20: point = 430
   Insn 19: point = 432
   Insn 18: point = 434
   Insn 17: point = 436
   Insn 16: point = 437
   Insn 15: point = 439
   Insn 14: point = 441
  BB 6
   Insn 131: point = 442
  BB 5
   Insn 128: point = 442
   Insn 127: point = 443
  BB 4
   Insn 122: point = 444
   Insn 121: point = 444
   Insn 120: point = 445
   Insn 119: point = 446
   Insn 118: point = 447
   Insn 117: point = 448
   Insn 116: point = 448
   Insn 115: point = 449
   Insn 114: point = 451
   Insn 113: point = 453
   Insn 112: point = 455
   Insn 111: point = 457
   Insn 110: point = 459
   Insn 109: point = 461
   Insn 108: point = 463
   Insn 107: point = 465
   Insn 106: point = 466
   Insn 105: point = 468
   Insn 104: point = 470
   Insn 103: point = 471
   Insn 102: point = 473
   Insn 101: point = 475
   Insn 100: point = 476
   Insn 99: point = 478
   Insn 98: point = 480
   Insn 97: point = 482
   Insn 96: point = 484
   Insn 95: point = 486
   Insn 94: point = 488
   Insn 93: point = 489
   Insn 92: point = 491
   Insn 91: point = 493
   Insn 90: point = 494
   Insn 89: point = 496
   Insn 88: point = 498
   Insn 87: point = 499
   Insn 86: point = 501
   Insn 85: point = 503
   Insn 84: point = 505
   Insn 83: point = 507
   Insn 82: point = 509
   Insn 81: point = 511
   Insn 80: point = 512
   Insn 79: point = 514
   Insn 78: point = 516
   Insn 77: point = 517
   Insn 76: point = 519
   Insn 75: point = 521
   Insn 74: point = 522
   Insn 73: point = 524
   Insn 72: point = 526
   Insn 71: point = 528
   Insn 70: point = 530
   Insn 69: point = 532
   Insn 68: point = 533
   Insn 67: point = 535
   Insn 66: point = 537
   Insn 65: point = 538
   Insn 64: point = 540
   Insn 63: point = 542
  BB 19
   Insn 300: point = 543
   Insn 665: point = 544
	Hard reg 0 is preferable by r420 with profit 1
   Insn 299: point = 546
   Insn 664: point = 547
	Hard reg 0 is preferable by r420 with profit 1
	Hard reg 22 is preferable by r420 with profit 1
   Insn 298: point = 549
   Insn 297: point = 550
   Insn 296: point = 552
   Insn 295: point = 554
   Insn 294: point = 555
   Insn 293: point = 557
   Insn 292: point = 559
   Insn 291: point = 561
   Insn 290: point = 562
   Insn 289: point = 562
   Insn 288: point = 562
   Insn 287: point = 562
   Insn 286: point = 563
   Insn 285: point = 565
   Insn 284: point = 566
   Insn 283: point = 568
   Insn 282: point = 569
   Insn 281: point = 571
   Insn 280: point = 573
   Insn 279: point = 575
   Insn 278: point = 576
   Insn 277: point = 576
   Insn 276: point = 576
   Insn 275: point = 576
   Insn 274: point = 577
   Insn 273: point = 579
   Insn 272: point = 580
   Insn 663: point = 581
	Hard reg 0 is preferable by r419 with profit 1
   Insn 271: point = 583
   Insn 662: point = 584
	Hard reg 0 is preferable by r419 with profit 1
	Hard reg 22 is preferable by r419 with profit 1
   Insn 270: point = 586
   Insn 269: point = 587
   Insn 268: point = 588
   Insn 267: point = 589
   Insn 266: point = 590
   Insn 265: point = 590
   Insn 264: point = 590
   Insn 661: point = 590
	Hard reg 21 is preferable by r418 with profit 1
   Insn 263: point = 591
	Hard reg 21 is preferable by r418 with profit 1
	Hard reg 0 is preferable by r418 with profit 1
   Insn 262: point = 593
  BB 36
   Insn 516: point = 594
  BB 35
   Insn 513: point = 594
   Insn 512: point = 594
   Insn 511: point = 595
   Insn 510: point = 596
   Insn 509: point = 598
   Insn 508: point = 600
   Insn 507: point = 601
   Insn 506: point = 603
   Insn 505: point = 605
   Insn 504: point = 606
   Insn 503: point = 608
   Insn 673: point = 609
	Hard reg 1 is preferable by r424 with profit 1
   Insn 502: point = 611
   Insn 672: point = 611
	Hard reg 1 is preferable by r424 with profit 1
	Hard reg 0 is preferable by r424 with profit 1
   Insn 501: point = 613
   Insn 500: point = 615
  BB 34
   Insn 498: point = 616
   Insn 497: point = 616
   Insn 496: point = 617
   Insn 495: point = 619
   Insn 494: point = 621
   Insn 493: point = 622
   Insn 492: point = 624
   Insn 491: point = 626
   Insn 490: point = 628
   Insn 489: point = 629
   Insn 488: point = 629
   Insn 487: point = 629
   Insn 486: point = 629
   Insn 485: point = 630
   Insn 484: point = 632
  BB 48
   Insn 604: point = 633
  BB 47
   Insn 601: point = 633
   Insn 600: point = 633
   Insn 599: point = 634
   Insn 598: point = 635
   Insn 597: point = 636
   Insn 596: point = 637
   Insn 595: point = 638
   Insn 594: point = 639
   Insn 593: point = 641
   Insn 592: point = 642
   Insn 591: point = 644
   Insn 590: point = 646
  BB 46
   Insn 588: point = 647
   Insn 587: point = 647
   Insn 586: point = 648
   Insn 585: point = 650
   Insn 584: point = 652
   Insn 583: point = 653
   Insn 582: point = 655
   Insn 581: point = 657
   Insn 580: point = 659
   Insn 579: point = 660
   Insn 578: point = 660
   Insn 577: point = 660
   Insn 576: point = 660
   Insn 575: point = 661
   Insn 574: point = 663
 r83: [120..121]
 r84: [438..439]
 r85: [435..437]
 r86: [433..434]
 r87: [431..432]
 r88: [429..430]
 r89: [413..428]
 r90: [424..425]
 r91: [421..423]
 r92: [419..420]
 r93: [417..418]
 r94: [415..416]
 r95: [413..414]
 r96: [377..412]
 r97: [408..409]
 r98: [405..407]
 r99: [403..404]
 r100: [401..402]
 r101: [399..400]
 r102: [397..398]
 r103: [379..396]
 r104: [392..393]
 r105: [389..391]
 r106: [387..388]
 r107: [385..386]
 r108: [383..384]
 r109: [381..382]
 r110: [379..380]
 r111: [377..378]
 r112: [375..376]
 r113: [539..540]
 r114: [536..538]
 r115: [534..535]
 r116: [527..533]
 r117: [529..530]
 r118: [527..528]
 r119: [525..526]
 r120: [523..524]
 r121: [500..522]
 r122: [518..519]
 r123: [515..517]
 r124: [513..514]
 r125: [506..512]
 r126: [508..509]
 r127: [506..507]
 r128: [504..505]
 r129: [502..503]
 r130: [500..501]
 r131: [450..499]
 r132: [495..496]
 r133: [492..494]
 r134: [490..491]
 r135: [481..489]
 r136: [485..486]
 r137: [483..484]
 r138: [481..482]
 r139: [479..480]
 r140: [477..478]
 r141: [452..476]
 r142: [472..473]
 r143: [469..471]
 r144: [467..468]
 r145: [458..466]
 r146: [462..463]
 r147: [460..461]
 r148: [458..459]
 r149: [456..457]
 r150: [454..455]
 r151: [452..453]
 r152: [450..451]
 r153: [448..449]
 r154: [364..366]
 r155: [356..358]
 r156: [354..355]
 r157: [352..353]
 r158: [335..337]
 r159: [327..329]
 r160: [303..326]
 r161: [321..323]
 r162: [313..315]
 r163: [311..312]
 r164: [308..310]
 r165: [303..304]
 r166: [286..288]
 r167: [278..280]
 r168: [254..277]
 r169: [272..274]
 r170: [264..266]
 r171: [262..263]
 r172: [259..261]
 r173: [254..255]
 r174: [575..577]
 r175: [567..569]
 r176: [543..566]
 r177: [561..563]
 r178: [553..555]
 r179: [551..552]
 r180: [548..550]
 r181: [543..544]
 r182: [245..247]
 r183: [237..239]
 r184: [215..236]
 r185: [232..233]
 r186: [227..229]
 r187: [214..226]
 r188: [222..223]
 r189: [219..221]
 r190: [217..218]
 r191: [213..216]
 r192: [208..210]
 r193: [200..202]
 r194: [198..199]
 r195: [196..197]
 r196: [192..193]
 r197: [187..189]
 r198: [175..186]
 r199: [182..183]
 r200: [179..181]
 r201: [177..178]
 r202: [174..176]
 r203: [169..171]
 r204: [161..163]
 r205: [159..160]
 r206: [157..158]
 r207: [153..154]
 r208: [148..150]
 r209: [126..147]
 r210: [143..144]
 r211: [140..142]
 r212: [138..139]
 r213: [125..137]
 r214: [133..134]
 r215: [130..132]
 r216: [128..129]
 r217: [124..127]
 r218: [116..117]
 r219: [112..113]
 r220: [103..111]
 r221: [102..108]
 r222: [98..99]
 r223: [94..95]
 r224: [80..93]
 r225: [89..90]
 r226: [79..88]
 r227: [78..85]
 r228: [74..75]
 r229: [70..71]
 r230: [56..69]
 r231: [65..66]
 r232: [55..64]
 r233: [54..61]
 r234: [50..51]
 r235: [628..630]
 r236: [620..622]
 r237: [618..619]
 r238: [616..617]
 r239: [612..613]
 r240: [607..609]
 r241: [595..606]
 r242: [602..603]
 r243: [599..601]
 r244: [597..598]
 r245: [594..596]
 r246: [42..47]
 r247: [38..39]
 r248: [32..37]
 r249: [28..29]
 r250: [24..25]
 r251: [22..23]
 r252: [18..19]
 r253: [9..17]
 r254: [8..14]
 r255: [4..5]
 r256: [659..661]
 r257: [651..653]
 r258: [649..650]
 r259: [647..648]
 r260: [643..644]
 r261: [634..642]
 r262: [633..639]
 r263: [2..3]
 r264: [0..1]
 r265: [440..441]
 r266: [435..436]
 r267: [426..427]
 r268: [421..422]
 r269: [410..411]
 r270: [405..406]
 r271: [394..395]
 r272: [389..390]
 r273: [373..374]
 r274: [371..372]
 r275: [369..370]
 r276: [541..542]
 r277: [536..537]
 r278: [531..532]
 r279: [520..521]
 r280: [515..516]
 r281: [510..511]
 r282: [497..498]
 r283: [492..493]
 r284: [487..488]
 r285: [474..475]
 r286: [469..470]
 r287: [464..465]
 r288: [446..447]
 r289: [444..445]
 r290: [442..443]
 r291: [367..368]
 r292: [363..365] [359..360]
 r293: [361..362]
 r294: [356..357]
 r295: [350..351]
 r296: [299..300]
 r297: [291..292]
 r298: [296..298]
 r299: [294..297]
 r300: [289..290]
 r301: [285..287] [281..282]
 r302: [283..284]
 r303: [278..279]
 r304: [275..276]
 r305: [271..273] [267..268]
 r306: [269..270]
 r307: [264..265]
 r308: [257..260]
 r309: [252..253]
 r310: [348..349]
 r311: [340..341]
 r312: [345..347]
 r313: [343..346]
 r314: [338..339]
 r315: [334..336] [330..331]
 r316: [332..333]
 r317: [327..328]
 r318: [324..325]
 r319: [320..322] [316..317]
 r320: [318..319]
 r321: [313..314]
 r322: [306..309]
 r323: [301..302]
 r324: [592..593]
 r325: [588..589]
 r326: [580..581]
 r327: [585..587]
 r328: [583..586]
 r329: [578..579]
 r330: [574..576] [570..571]
 r331: [572..573]
 r332: [567..568]
 r333: [564..565]
 r334: [560..562] [556..557]
 r335: [558..559]
 r336: [553..554]
 r337: [546..549]
 r338: [250..251]
 r339: [248..249]
 r340: [244..246] [240..241]
 r341: [242..243]
 r342: [237..238]
 r343: [234..235]
 r344: [227..228]
 r345: [224..225]
 r346: [219..220]
 r347: [211..212]
 r348: [207..209] [203..204]
 r349: [205..206]
 r350: [200..201]
 r351: [194..195]
 r352: [187..188]
 r353: [184..185]
 r354: [179..180]
 r355: [172..173]
 r356: [168..170] [164..165]
 r357: [166..167]
 r358: [161..162]
 r359: [155..156]
 r360: [148..149]
 r361: [145..146]
 r362: [140..141]
 r363: [135..136]
 r364: [130..131]
 r365: [122..123]
 r366: [118..119]
 r367: [114..115]
 r368: [109..110]
 r369: [105..107]
 r370: [104..106]
 r371: [100..101]
 r372: [96..97]
 r373: [91..92]
 r374: [86..87]
 r375: [82..84]
 r376: [81..83]
 r377: [76..77]
 r378: [72..73]
 r379: [67..68]
 r380: [62..63]
 r381: [58..60]
 r382: [57..59]
 r383: [631..632]
 r384: [627..629] [623..624]
 r385: [625..626]
 r386: [620..621]
 r387: [614..615]
 r388: [607..608]
 r389: [604..605]
 r390: [599..600]
 r391: [52..53]
 r392: [48..49]
 r393: [45..46]
 r394: [42..43]
 r395: [40..41]
 r396: [35..36]
 r397: [32..33]
 r398: [30..31]
 r399: [26..27]
 r400: [20..21]
 r401: [15..16]
 r402: [11..13]
 r403: [10..12]
 r404: [662..663]
 r405: [658..660] [654..655]
 r406: [656..657]
 r407: [651..652]
 r408: [645..646]
 r409: [640..641]
 r410: [636..638]
 r411: [635..637]
 r412: [6..7]
 r414: [293..295]
 r415: [256..258]
 r416: [342..344]
 r417: [305..307]
 r418: [590..591]
 r419: [582..584]
 r420: [545..547]
 r421: [230..231]
 r422: [190..191]
 r423: [151..152]
 r424: [610..611]
Compressing live ranges: from 664 to 536 - 80%
Ranges after the compression:
 r83: [88..89]
 r84: [348..349]
 r85: [346..347]
 r86: [344..345]
 r87: [342..343]
 r88: [340..341]
 r89: [326..339]
 r90: [336..337]
 r91: [334..335]
 r92: [332..333]
 r93: [330..331]
 r94: [328..329]
 r95: [326..327]
 r96: [294..325]
 r97: [322..323]
 r98: [320..321]
 r99: [318..319]
 r100: [316..317]
 r101: [314..315]
 r102: [312..313]
 r103: [296..311]
 r104: [308..309]
 r105: [306..307]
 r106: [304..305]
 r107: [302..303]
 r108: [300..301]
 r109: [298..299]
 r110: [296..297]
 r111: [294..295]
 r112: [292..293]
 r113: [438..439]
 r114: [436..437]
 r115: [434..435]
 r116: [428..433]
 r117: [430..431]
 r118: [428..429]
 r119: [426..427]
 r120: [424..425]
 r121: [404..423]
 r122: [420..421]
 r123: [418..419]
 r124: [416..417]
 r125: [410..415]
 r126: [412..413]
 r127: [410..411]
 r128: [408..409]
 r129: [406..407]
 r130: [404..405]
 r131: [360..403]
 r132: [400..401]
 r133: [398..399]
 r134: [396..397]
 r135: [388..395]
 r136: [392..393]
 r137: [390..391]
 r138: [388..389]
 r139: [386..387]
 r140: [384..385]
 r141: [362..383]
 r142: [380..381]
 r143: [378..379]
 r144: [376..377]
 r145: [368..375]
 r146: [372..373]
 r147: [370..371]
 r148: [368..369]
 r149: [366..367]
 r150: [364..365]
 r151: [362..363]
 r152: [360..361]
 r153: [358..359]
 r154: [282..283]
 r155: [276..277]
 r156: [274..275]
 r157: [272..273]
 r158: [258..259]
 r159: [252..253]
 r160: [234..251]
 r161: [248..249]
 r162: [242..243]
 r163: [240..241]
 r164: [238..239]
 r165: [234..235]
 r166: [220..221]
 r167: [214..215]
 r168: [196..213]
 r169: [210..211]
 r170: [204..205]
 r171: [202..203]
 r172: [200..201]
 r173: [196..197]
 r174: [466..467]
 r175: [460..461]
 r176: [442..459]
 r177: [456..457]
 r178: [450..451]
 r179: [448..449]
 r180: [446..447]
 r181: [442..443]
 r182: [188..189]
 r183: [182..183]
 r184: [164..181]
 r185: [178..179]
 r186: [174..175]
 r187: [164..173]
 r188: [170..171]
 r189: [168..169]
 r190: [166..167]
 r191: [164..165]
 r192: [160..161]
 r193: [154..155]
 r194: [152..153]
 r195: [150..151]
 r196: [146..147]
 r197: [142..143]
 r198: [132..141]
 r199: [138..139]
 r200: [136..137]
 r201: [134..135]
 r202: [132..133]
 r203: [128..129]
 r204: [122..123]
 r205: [120..121]
 r206: [118..119]
 r207: [114..115]
 r208: [110..111]
 r209: [92..109]
 r210: [106..107]
 r211: [104..105]
 r212: [102..103]
 r213: [92..101]
 r214: [98..99]
 r215: [96..97]
 r216: [94..95]
 r217: [92..93]
 r218: [84..85]
 r219: [80..81]
 r220: [76..79]
 r221: [76..77]
 r222: [72..73]
 r223: [68..69]
 r224: [60..67]
 r225: [64..65]
 r226: [60..63]
 r227: [60..61]
 r228: [56..57]
 r229: [52..53]
 r230: [44..51]
 r231: [48..49]
 r232: [44..47]
 r233: [44..45]
 r234: [40..41]
 r235: [510..511]
 r236: [504..505]
 r237: [502..503]
 r238: [500..501]
 r239: [496..497]
 r240: [492..493]
 r241: [482..491]
 r242: [488..489]
 r243: [486..487]
 r244: [484..485]
 r245: [482..483]
 r246: [34..37]
 r247: [30..31]
 r248: [26..29]
 r249: [22..23]
 r250: [18..19]
 r251: [16..17]
 r252: [12..13]
 r253: [8..11]
 r254: [8..9]
 r255: [4..5]
 r256: [532..533]
 r257: [526..527]
 r258: [524..525]
 r259: [522..523]
 r260: [518..519]
 r261: [514..517]
 r262: [514..515]
 r263: [2..3]
 r264: [0..1]
 r265: [350..351]
 r266: [346..347]
 r267: [338..339]
 r268: [334..335]
 r269: [324..325]
 r270: [320..321]
 r271: [310..311]
 r272: [306..307]
 r273: [290..291]
 r274: [288..289]
 r275: [286..287]
 r276: [440..441]
 r277: [436..437]
 r278: [432..433]
 r279: [422..423]
 r280: [418..419]
 r281: [414..415]
 r282: [402..403]
 r283: [398..399]
 r284: [394..395]
 r285: [382..383]
 r286: [378..379]
 r287: [374..375]
 r288: [356..357]
 r289: [354..355]
 r290: [352..353]
 r291: [284..285]
 r292: [282..283] [278..279]
 r293: [280..281]
 r294: [276..277]
 r295: [270..271]
 r296: [230..231]
 r297: [224..225]
 r298: [228..229]
 r299: [226..229]
 r300: [222..223]
 r301: [220..221] [216..217]
 r302: [218..219]
 r303: [214..215]
 r304: [212..213]
 r305: [210..211] [206..207]
 r306: [208..209]
 r307: [204..205]
 r308: [198..201]
 r309: [194..195]
 r310: [268..269]
 r311: [262..263]
 r312: [266..267]
 r313: [264..267]
 r314: [260..261]
 r315: [258..259] [254..255]
 r316: [256..257]
 r317: [252..253]
 r318: [250..251]
 r319: [248..249] [244..245]
 r320: [246..247]
 r321: [242..243]
 r322: [236..239]
 r323: [232..233]
 r324: [480..481]
 r325: [476..477]
 r326: [470..471]
 r327: [474..475]
 r328: [472..475]
 r329: [468..469]
 r330: [466..467] [462..463]
 r331: [464..465]
 r332: [460..461]
 r333: [458..459]
 r334: [456..457] [452..453]
 r335: [454..455]
 r336: [450..451]
 r337: [444..447]
 r338: [192..193]
 r339: [190..191]
 r340: [188..189] [184..185]
 r341: [186..187]
 r342: [182..183]
 r343: [180..181]
 r344: [174..175]
 r345: [172..173]
 r346: [168..169]
 r347: [162..163]
 r348: [160..161] [156..157]
 r349: [158..159]
 r350: [154..155]
 r351: [148..149]
 r352: [142..143]
 r353: [140..141]
 r354: [136..137]
 r355: [130..131]
 r356: [128..129] [124..125]
 r357: [126..127]
 r358: [122..123]
 r359: [116..117]
 r360: [110..111]
 r361: [108..109]
 r362: [104..105]
 r363: [100..101]
 r364: [96..97]
 r365: [90..91]
 r366: [86..87]
 r367: [82..83]
 r368: [78..79]
 r369: [76..77]
 r370: [76..77]
 r371: [74..75]
 r372: [70..71]
 r373: [66..67]
 r374: [62..63]
 r375: [60..61]
 r376: [60..61]
 r377: [58..59]
 r378: [54..55]
 r379: [50..51]
 r380: [46..47]
 r381: [44..45]
 r382: [44..45]
 r383: [512..513]
 r384: [510..511] [506..507]
 r385: [508..509]
 r386: [504..505]
 r387: [498..499]
 r388: [492..493]
 r389: [490..491]
 r390: [486..487]
 r391: [42..43]
 r392: [38..39]
 r393: [36..37]
 r394: [34..35]
 r395: [32..33]
 r396: [28..29]
 r397: [26..27]
 r398: [24..25]
 r399: [20..21]
 r400: [14..15]
 r401: [10..11]
 r402: [8..9]
 r403: [8..9]
 r404: [534..535]
 r405: [532..533] [528..529]
 r406: [530..531]
 r407: [526..527]
 r408: [520..521]
 r409: [516..517]
 r410: [514..515]
 r411: [514..515]
 r412: [6..7]
 r414: [226..227]
 r415: [198..199]
 r416: [264..265]
 r417: [236..237]
 r418: [478..479]
 r419: [472..473]
 r420: [444..445]
 r421: [176..177]
 r422: [144..145]
 r423: [112..113]
 r424: [494..495]

********** Assignment #1: **********

	 Assigning to 421 (cl=GENERAL_REGS, orig=186, freq=3, tfirst=421, tfreq=3)...
	   Assign 0 to reload r421 (freq=3)
	 Assigning to 422 (cl=GENERAL_REGS, orig=197, freq=3, tfirst=422, tfreq=3)...
	   Assign 0 to reload r422 (freq=3)
	 Assigning to 423 (cl=GENERAL_REGS, orig=208, freq=3, tfirst=423, tfreq=3)...
	   Assign 0 to reload r423 (freq=3)
	 Assigning to 424 (cl=GENERAL_REGS, orig=240, freq=3, tfirst=424, tfreq=3)...
	   Assign 0 to reload r424 (freq=3)
	 Assigning to 414 (cl=SSE_REGS, orig=297, freq=3, tfirst=414, tfreq=3)...
	   Assign 22 to reload r414 (freq=3)
	 Assigning to 415 (cl=SSE_REGS, orig=173, freq=3, tfirst=415, tfreq=3)...
	   Assign 22 to reload r415 (freq=3)
	 Assigning to 416 (cl=SSE_REGS, orig=311, freq=3, tfirst=416, tfreq=3)...
	   Assign 21 to reload r416 (freq=3)
	 Assigning to 417 (cl=SSE_REGS, orig=165, freq=3, tfirst=417, tfreq=3)...
	   Assign 21 to reload r417 (freq=3)
	 Assigning to 419 (cl=SSE_REGS, orig=326, freq=3, tfirst=419, tfreq=3)...
	   Assign 22 to reload r419 (freq=3)
	 Assigning to 420 (cl=SSE_REGS, orig=181, freq=3, tfirst=420, tfreq=3)...
	   Assign 22 to reload r420 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 8):	 418
Changing spilled pseudos to memory in insn #263
Changing spilled pseudos to memory in insn #661
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 11 for insn #661
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 661:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 263:  (0) ?m  (1) rC {*movdf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 410
changing reg in insn 412
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 30
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 72
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 87
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 84
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 98
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 111
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 139
changing reg in insn 144
changing reg in insn 142
changing reg in insn 140
changing reg in insn 144
changing reg in insn 142
changing reg in insn 147
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 224
changing reg in insn 229
changing reg in insn 227
changing reg in insn 225
changing reg in insn 229
changing reg in insn 227
changing reg in insn 232
changing reg in insn 234
changing reg in insn 234
changing reg in insn 234
changing reg in insn 250
changing reg in insn 236
changing reg in insn 241
changing reg in insn 239
changing reg in insn 237
changing reg in insn 241
changing reg in insn 239
changing reg in insn 244
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 250
changing reg in insn 171
changing reg in insn 176
changing reg in insn 174
changing reg in insn 172
changing reg in insn 176
changing reg in insn 174
changing reg in insn 179
changing reg in insn 181
changing reg in insn 181
changing reg in insn 181
changing reg in insn 197
changing reg in insn 183
changing reg in insn 188
changing reg in insn 186
changing reg in insn 184
changing reg in insn 188
changing reg in insn 186
changing reg in insn 191
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 197
changing reg in insn 274
changing reg in insn 279
changing reg in insn 277
changing reg in insn 275
changing reg in insn 279
changing reg in insn 277
changing reg in insn 282
changing reg in insn 284
changing reg in insn 284
changing reg in insn 284
changing reg in insn 300
changing reg in insn 286
changing reg in insn 291
changing reg in insn 289
changing reg in insn 287
changing reg in insn 291
changing reg in insn 289
changing reg in insn 294
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 300
changing reg in insn 309
changing reg in insn 314
changing reg in insn 312
changing reg in insn 310
changing reg in insn 314
changing reg in insn 312
changing reg in insn 317
changing reg in insn 319
changing reg in insn 319
changing reg in insn 319
changing reg in insn 331
changing reg in insn 321
changing reg in insn 324
changing reg in insn 324
changing reg in insn 324
changing reg in insn 332
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 329
changing reg in insn 329
changing reg in insn 330
changing reg in insn 330
changing reg in insn 333
changing reg in insn 336
changing reg in insn 341
changing reg in insn 339
changing reg in insn 337
changing reg in insn 341
changing reg in insn 339
changing reg in insn 344
changing reg in insn 346
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 348
changing reg in insn 352
changing reg in insn 355
changing reg in insn 355
changing reg in insn 355
changing reg in insn 362
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 360
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 363
changing reg in insn 368
changing reg in insn 373
changing reg in insn 371
changing reg in insn 369
changing reg in insn 373
changing reg in insn 371
changing reg in insn 376
changing reg in insn 378
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 380
changing reg in insn 384
changing reg in insn 387
changing reg in insn 387
changing reg in insn 387
changing reg in insn 400
changing reg in insn 389
changing reg in insn 390
changing reg in insn 390
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 401
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 398
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 402
changing reg in insn 416
changing reg in insn 417
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 429
changing reg in insn 424
changing reg in insn 430
changing reg in insn 435
changing reg in insn 436
changing reg in insn 440
changing reg in insn 441
changing reg in insn 441
changing reg in insn 451
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 452
changing reg in insn 446
changing reg in insn 453
changing reg in insn 458
changing reg in insn 459
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 474
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 475
changing reg in insn 469
changing reg in insn 476
changing reg in insn 520
changing reg in insn 522
changing reg in insn 485
changing reg in insn 490
changing reg in insn 488
changing reg in insn 486
changing reg in insn 490
changing reg in insn 488
changing reg in insn 493
changing reg in insn 495
changing reg in insn 495
changing reg in insn 496
changing reg in insn 496
changing reg in insn 497
changing reg in insn 501
changing reg in insn 504
changing reg in insn 504
changing reg in insn 504
changing reg in insn 511
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 509
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 512
changing reg in insn 526
changing reg in insn 531
changing reg in insn 528
changing reg in insn 535
changing reg in insn 536
changing reg in insn 536
changing reg in insn 541
changing reg in insn 538
changing reg in insn 545
changing reg in insn 546
changing reg in insn 550
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 557
changing reg in insn 558
changing reg in insn 558
changing reg in insn 565
changing reg in insn 560
changing reg in insn 566
changing reg in insn 608
changing reg in insn 610
changing reg in insn 575
changing reg in insn 580
changing reg in insn 578
changing reg in insn 576
changing reg in insn 580
changing reg in insn 578
changing reg in insn 583
changing reg in insn 585
changing reg in insn 585
changing reg in insn 586
changing reg in insn 586
changing reg in insn 587
changing reg in insn 591
changing reg in insn 592
changing reg in insn 592
changing reg in insn 599
changing reg in insn 594
changing reg in insn 600
changing reg in insn 613
changing reg in insn 616
changing reg in insn 616
changing reg in insn 620
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 127
changing reg in insn 128
changing reg in insn 138
changing reg in insn 139
changing reg in insn 146
changing reg in insn 144
changing reg in insn 143
changing reg in insn 142
changing reg in insn 141
changing reg in insn 140
changing reg in insn 147
changing reg in insn 145
changing reg in insn 144
changing reg in insn 143
changing reg in insn 142
changing reg in insn 141
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 154
changing reg in insn 155
changing reg in insn 164
changing reg in insn 165
changing reg in insn 169
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 178
changing reg in insn 176
changing reg in insn 175
changing reg in insn 174
changing reg in insn 173
changing reg in insn 172
changing reg in insn 179
changing reg in insn 177
changing reg in insn 176
changing reg in insn 175
changing reg in insn 174
changing reg in insn 173
changing reg in insn 177
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 190
changing reg in insn 188
changing reg in insn 187
changing reg in insn 186
changing reg in insn 185
changing reg in insn 184
changing reg in insn 191
changing reg in insn 189
changing reg in insn 188
changing reg in insn 187
changing reg in insn 186
changing reg in insn 185
changing reg in insn 189
changing reg in insn 190
changing reg in insn 192
changing reg in insn 195
changing reg in insn 196
changing reg in insn 201
changing reg in insn 202
changing reg in insn 209
changing reg in insn 210
changing reg in insn 222
changing reg in insn 219
changing reg in insn 220
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 231
changing reg in insn 229
changing reg in insn 228
changing reg in insn 227
changing reg in insn 226
changing reg in insn 225
changing reg in insn 232
changing reg in insn 230
changing reg in insn 229
changing reg in insn 228
changing reg in insn 227
changing reg in insn 226
changing reg in insn 230
changing reg in insn 231
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 243
changing reg in insn 241
changing reg in insn 240
changing reg in insn 239
changing reg in insn 238
changing reg in insn 237
changing reg in insn 244
changing reg in insn 242
changing reg in insn 241
changing reg in insn 240
changing reg in insn 239
changing reg in insn 238
changing reg in insn 242
changing reg in insn 243
changing reg in insn 245
changing reg in insn 248
changing reg in insn 249
changing reg in insn 254
changing reg in insn 255
changing reg in insn 262
changing reg in insn 263
changing reg in insn 267
changing reg in insn 268
changing reg in insn 272
changing reg in insn 269
changing reg in insn 270
changing reg in insn 271
changing reg in insn 273
changing reg in insn 274
changing reg in insn 281
changing reg in insn 279
changing reg in insn 278
changing reg in insn 277
changing reg in insn 276
changing reg in insn 275
changing reg in insn 282
changing reg in insn 280
changing reg in insn 279
changing reg in insn 278
changing reg in insn 277
changing reg in insn 276
changing reg in insn 280
changing reg in insn 281
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 286
changing reg in insn 293
changing reg in insn 291
changing reg in insn 290
changing reg in insn 289
changing reg in insn 288
changing reg in insn 287
changing reg in insn 294
changing reg in insn 292
changing reg in insn 291
changing reg in insn 290
changing reg in insn 289
changing reg in insn 288
changing reg in insn 292
changing reg in insn 293
changing reg in insn 295
changing reg in insn 298
changing reg in insn 299
changing reg in insn 304
changing reg in insn 305
changing reg in insn 308
changing reg in insn 309
changing reg in insn 316
changing reg in insn 314
changing reg in insn 313
changing reg in insn 312
changing reg in insn 311
changing reg in insn 310
changing reg in insn 317
changing reg in insn 315
changing reg in insn 314
changing reg in insn 313
changing reg in insn 312
changing reg in insn 311
changing reg in insn 315
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 328
changing reg in insn 335
changing reg in insn 336
changing reg in insn 343
changing reg in insn 341
changing reg in insn 340
changing reg in insn 339
changing reg in insn 338
changing reg in insn 337
changing reg in insn 344
changing reg in insn 342
changing reg in insn 341
changing reg in insn 340
changing reg in insn 339
changing reg in insn 338
changing reg in insn 342
changing reg in insn 343
changing reg in insn 345
changing reg in insn 351
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 356
changing reg in insn 357
changing reg in insn 359
changing reg in insn 367
changing reg in insn 368
changing reg in insn 375
changing reg in insn 373
changing reg in insn 372
changing reg in insn 371
changing reg in insn 370
changing reg in insn 369
changing reg in insn 376
changing reg in insn 374
changing reg in insn 373
changing reg in insn 372
changing reg in insn 371
changing reg in insn 370
changing reg in insn 374
changing reg in insn 375
changing reg in insn 377
changing reg in insn 383
changing reg in insn 384
changing reg in insn 386
changing reg in insn 387
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 394
changing reg in insn 395
changing reg in insn 397
changing reg in insn 409
changing reg in insn 410
changing reg in insn 415
changing reg in insn 416
changing reg in insn 420
changing reg in insn 421
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 426
changing reg in insn 428
changing reg in insn 434
changing reg in insn 435
changing reg in insn 439
changing reg in insn 440
changing reg in insn 442
changing reg in insn 443
changing reg in insn 445
changing reg in insn 446
changing reg in insn 447
changing reg in insn 449
changing reg in insn 448
changing reg in insn 450
changing reg in insn 457
changing reg in insn 458
changing reg in insn 462
changing reg in insn 463
changing reg in insn 465
changing reg in insn 466
changing reg in insn 468
changing reg in insn 469
changing reg in insn 470
changing reg in insn 472
changing reg in insn 471
changing reg in insn 473
changing reg in insn 484
changing reg in insn 485
changing reg in insn 492
changing reg in insn 490
changing reg in insn 489
changing reg in insn 488
changing reg in insn 487
changing reg in insn 486
changing reg in insn 493
changing reg in insn 491
changing reg in insn 490
changing reg in insn 489
changing reg in insn 488
changing reg in insn 487
changing reg in insn 491
changing reg in insn 492
changing reg in insn 494
changing reg in insn 500
changing reg in insn 501
changing reg in insn 503
changing reg in insn 504
changing reg in insn 505
changing reg in insn 506
changing reg in insn 508
changing reg in insn 519
changing reg in insn 520
changing reg in insn 525
changing reg in insn 526
changing reg in insn 527
changing reg in insn 528
changing reg in insn 530
changing reg in insn 531
changing reg in insn 534
changing reg in insn 535
changing reg in insn 537
changing reg in insn 538
changing reg in insn 540
changing reg in insn 541
changing reg in insn 544
changing reg in insn 545
changing reg in insn 549
changing reg in insn 550
changing reg in insn 556
changing reg in insn 557
changing reg in insn 559
changing reg in insn 560
changing reg in insn 561
changing reg in insn 563
changing reg in insn 562
changing reg in insn 564
changing reg in insn 574
changing reg in insn 575
changing reg in insn 582
changing reg in insn 580
changing reg in insn 579
changing reg in insn 578
changing reg in insn 577
changing reg in insn 576
changing reg in insn 583
changing reg in insn 581
changing reg in insn 580
changing reg in insn 579
changing reg in insn 578
changing reg in insn 577
changing reg in insn 581
changing reg in insn 582
changing reg in insn 584
changing reg in insn 590
changing reg in insn 591
changing reg in insn 593
changing reg in insn 594
changing reg in insn 595
changing reg in insn 597
changing reg in insn 596
changing reg in insn 598
changing reg in insn 607
changing reg in insn 608
deleting insn with uid = 51.
deleting insn with uid = 116.
deleting insn with uid = 653.
deleting insn with uid = 655.
deleting insn with uid = 657.
deleting insn with uid = 659.
deleting insn with uid = 662.
deleting insn with uid = 664.
deleting insn with uid = 331.
deleting insn with uid = 400.
deleting insn with uid = 427.
deleting insn with uid = 428.
deleting insn with uid = 429.
deleting insn with uid = 450.
deleting insn with uid = 451.
deleting insn with uid = 452.
deleting insn with uid = 473.
deleting insn with uid = 474.
deleting insn with uid = 475.
deleting insn with uid = 563.
deleting insn with uid = 564.
deleting insn with uid = 565.
deleting insn with uid = 597.
deleting insn with uid = 598.
deleting insn with uid = 599.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 266.
verify found no changes in insn with uid = 334.
verify found no changes in insn with uid = 364.
verify found no changes in insn with uid = 403.
verify found no changes in insn with uid = 431.
verify found no changes in insn with uid = 454.
verify found no changes in insn with uid = 477.
verify found no changes in insn with uid = 513.
verify found no changes in insn with uid = 567.
verify found no changes in insn with uid = 601.


int pre_process(int*, Preprocess*, Procpar_info*, float**, float**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 37[r8]
;;  ref usage 	r0={286d,274u} r1={71d,83u,47e} r2={27d,15u,4e} r4={24d,12u,2e} r5={25d,13u} r6={1d,190u} r7={1d,62u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={167d,24u} r18={12d} r19={12d} r20={1d,1u,38e} r21={46d,37u} r22={31d,18u} r23={15d,2u} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={15d,3u} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} 
;;    total ref usage 2237{1412d,734u,91e} in 519{507 regular + 12 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
        (reg:DI 2 cx [ out_data ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
        (reg:DI 37 r8 [ scratch_data ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 634 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:30 90 {*movsi_internal}
     (nil))
(jump_insn 634 10 635 2 (set (pc)
        (label_ref 407)) ge2fitman_preproc.cpp:30 636 {jump}
     (nil)
 -> 407)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 635 634 411)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 265 266 267 268 269 270 271 272 273 274 275
(code_label 411 635 13 3 19 "" [1 uses])
(note 13 411 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:38 90 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 0 ax [orig:84 D.25574 ] [84])
        (sign_extend:DI (reg:SI 0 ax [265]))) ge2fitman_preproc.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 1 dx [orig:85 D.25574 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 D.25574 ] [84])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:38 497 {*ashldi3_1}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.25575 ] [86])
                (plus:DI (reg/f:DI 0 ax [266])
                    (reg:DI 1 dx [orig:85 D.25574 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:38 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.25574 ] [85]))
        (nil)))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [orig:87 D.25576 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [orig:86 D.25575 ] [86]) [0 *_17+0 S8 A64])) ge2fitman_preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SF 21 xmm0 [orig:88 D.25577 ] [88])
        (mem:SF (reg/f:DI 0 ax [orig:87 D.25576 ] [87]) [0 *_18+0 S4 A32])) ge2fitman_preproc.cpp:38 129 {*movsf_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DF 22 xmm1 [orig:89 D.25578 ] [89])
        (float_extend:DF (reg:SF 21 xmm0 [orig:88 D.25577 ] [88]))) ge2fitman_preproc.cpp:38 152 {*extendsfdf2_sse}
     (nil))
(insn 22 21 23 3 (set (reg:SI 0 ax [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:38 90 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 0 ax [orig:90 D.25574 ] [90])
        (sign_extend:DI (reg:SI 0 ax [267]))) ge2fitman_preproc.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg:DI 1 dx [orig:91 D.25574 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.25574 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:38 497 {*ashldi3_1}
     (nil))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.25575 ] [92])
                (plus:DI (reg/f:DI 0 ax [268])
                    (reg:DI 1 dx [orig:91 D.25574 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:38 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.25574 ] [91]))
        (nil)))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [orig:93 D.25576 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:92 D.25575 ] [92]) [0 *_23+0 S8 A64])) ge2fitman_preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:SF 21 xmm0 [orig:94 D.25577 ] [94])
        (mem:SF (reg/f:DI 0 ax [orig:93 D.25576 ] [93]) [0 *_24+0 S4 A32])) ge2fitman_preproc.cpp:38 129 {*movsf_internal}
     (nil))
(insn 29 28 30 3 (set (reg:DF 21 xmm0 [orig:95 D.25578 ] [95])
        (float_extend:DF (reg:SF 21 xmm0 [orig:94 D.25577 ] [94]))) ge2fitman_preproc.cpp:38 152 {*extendsfdf2_sse}
     (nil))
(insn 30 29 31 3 (set (reg:DF 22 xmm1 [orig:96 D.25578 ] [96])
        (mult:DF (reg:DF 22 xmm1 [orig:89 D.25578 ] [89])
            (reg:DF 21 xmm0 [orig:95 D.25578 ] [95]))) ge2fitman_preproc.cpp:38 776 {*fop_df_comm_sse}
     (nil))
(insn 31 30 32 3 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:39 90 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DI 0 ax [orig:97 D.25574 ] [97])
        (sign_extend:DI (reg:SI 0 ax [269]))) ge2fitman_preproc.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 33 32 34 3 (parallel [
            (set (reg:DI 1 dx [orig:98 D.25574 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.25574 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 497 {*ashldi3_1}
     (nil))
(insn 34 33 35 3 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:39 89 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.25575 ] [99])
                (plus:DI (reg/f:DI 0 ax [270])
                    (reg:DI 1 dx [orig:98 D.25574 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.25574 ] [98]))
        (nil)))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [orig:100 D.25576 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 D.25575 ] [99]) [0 *_30+0 S8 A64])) ge2fitman_preproc.cpp:39 89 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.25576 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.25576 ] [100])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 221 {*adddi_1}
     (nil))
(insn 38 37 39 3 (set (reg:SF 21 xmm0 [orig:102 D.25577 ] [102])
        (mem:SF (reg/f:DI 0 ax [orig:101 D.25576 ] [101]) [0 *_32+0 S4 A32])) ge2fitman_preproc.cpp:39 129 {*movsf_internal}
     (nil))
(insn 39 38 40 3 (set (reg:DF 23 xmm2 [orig:103 D.25578 ] [103])
        (float_extend:DF (reg:SF 21 xmm0 [orig:102 D.25577 ] [102]))) ge2fitman_preproc.cpp:39 152 {*extendsfdf2_sse}
     (nil))
(insn 40 39 41 3 (set (reg:SI 0 ax [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:39 90 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 0 ax [orig:104 D.25574 ] [104])
        (sign_extend:DI (reg:SI 0 ax [271]))) ge2fitman_preproc.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 3 (parallel [
            (set (reg:DI 1 dx [orig:105 D.25574 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 D.25574 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 497 {*ashldi3_1}
     (nil))
(insn 43 42 44 3 (set (reg/f:DI 0 ax [272])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:39 89 {*movdi_internal}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 0 ax [orig:106 D.25575 ] [106])
                (plus:DI (reg/f:DI 0 ax [272])
                    (reg:DI 1 dx [orig:105 D.25574 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:105 D.25574 ] [105]))
        (nil)))
(insn 45 44 46 3 (set (reg/f:DI 0 ax [orig:107 D.25576 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 D.25575 ] [106]) [0 *_37+0 S8 A64])) ge2fitman_preproc.cpp:39 89 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.25576 ] [108])
                (plus:DI (reg/f:DI 0 ax [orig:107 D.25576 ] [107])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 221 {*adddi_1}
     (nil))
(insn 47 46 48 3 (set (reg:SF 21 xmm0 [orig:109 D.25577 ] [109])
        (mem:SF (reg/f:DI 0 ax [orig:108 D.25576 ] [108]) [0 *_39+0 S4 A32])) ge2fitman_preproc.cpp:39 129 {*movsf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DF 21 xmm0 [orig:110 D.25578 ] [110])
        (float_extend:DF (reg:SF 21 xmm0 [orig:109 D.25577 ] [109]))) ge2fitman_preproc.cpp:39 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 3 (set (reg:DF 21 xmm0 [orig:111 D.25578 ] [111])
        (mult:DF (reg:DF 21 xmm0 [orig:110 D.25578 ] [110])
            (reg:DF 23 xmm2 [orig:103 D.25578 ] [103]))) ge2fitman_preproc.cpp:39 776 {*fop_df_comm_sse}
     (nil))
(insn 50 49 52 3 (set (reg:DF 21 xmm0 [orig:112 D.25578 ] [112])
        (plus:DF (reg:DF 21 xmm0 [orig:111 D.25578 ] [111])
            (reg:DF 22 xmm1 [orig:96 D.25578 ] [96]))) ge2fitman_preproc.cpp:39 776 {*fop_df_comm_sse}
     (nil))
(call_insn 52 50 53 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:39 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 53 52 54 3 (set (reg:DF 0 ax [273])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:39 128 {*movdf_internal}
     (nil))
(insn 54 53 55 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])
        (reg:DF 0 ax [273])) ge2fitman_preproc.cpp:39 128 {*movdf_internal}
     (nil))
(insn 55 54 56 3 (set (reg:DF 0 ax [274])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) ge2fitman_preproc.cpp:40 128 {*movdf_internal}
     (nil))
(insn 56 55 57 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [274])) ge2fitman_preproc.cpp:40 128 {*movdf_internal}
     (nil))
(insn 57 56 58 3 (set (reg:DF 0 ax [275])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:42 128 {*movdf_internal}
     (nil))
(insn 58 57 59 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [275])) ge2fitman_preproc.cpp:42 128 {*movdf_internal}
     (nil))
(insn 59 58 636 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
        (const_int 2 [0x2])) ge2fitman_preproc.cpp:46 90 {*movsi_internal}
     (nil))
(jump_insn 636 59 637 3 (set (pc)
        (label_ref 132)) ge2fitman_preproc.cpp:46 636 {jump}
     (nil)
 -> 132)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 637 636 134)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 276 277 278 279 280 281 282 283 284 285 286 287 288 289
(code_label 134 637 62 4 6 "" [1 uses])
(note 62 134 63 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 4 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:51 90 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DI 0 ax [orig:113 D.25574 ] [113])
        (sign_extend:DI (reg:SI 0 ax [276]))) ge2fitman_preproc.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg:DI 1 dx [orig:114 D.25574 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.25574 ] [113])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:51 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.25575 ] [115])
                (plus:DI (reg/f:DI 0 ax [277])
                    (reg:DI 1 dx [orig:114 D.25574 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.25574 ] [114]))
        (nil)))
(insn 68 67 69 4 (set (reg/f:DI 0 ax [orig:116 D.25576 ] [116])
        (mem/f:DI (reg/f:DI 0 ax [orig:115 D.25575 ] [115]) [0 *_50+0 S8 A64])) ge2fitman_preproc.cpp:51 89 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:SI 1 dx [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) ge2fitman_preproc.cpp:51 90 {*movsi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:DI 1 dx [orig:117 D.25574 ] [117])
        (sign_extend:DI (reg:SI 1 dx [278]))) ge2fitman_preproc.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg:DI 1 dx [orig:118 D.25574 ] [118])
                (ashift:DI (reg:DI 1 dx [orig:117 D.25574 ] [117])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 497 {*ashldi3_1}
     (nil))
(insn 72 71 73 4 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.25576 ] [119])
                (plus:DI (reg/f:DI 0 ax [orig:116 D.25576 ] [116])
                    (reg:DI 1 dx [orig:118 D.25574 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 221 {*adddi_1}
     (nil))
(insn 73 72 74 4 (set (reg:SF 21 xmm0 [orig:120 D.25577 ] [120])
        (mem:SF (reg/f:DI 0 ax [orig:119 D.25576 ] [119]) [0 *_54+0 S4 A32])) ge2fitman_preproc.cpp:51 129 {*movsf_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DF 22 xmm1 [orig:121 D.25578 ] [121])
        (float_extend:DF (reg:SF 21 xmm0 [orig:120 D.25577 ] [120]))) ge2fitman_preproc.cpp:51 152 {*extendsfdf2_sse}
     (nil))
(insn 75 74 76 4 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:51 90 {*movsi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 0 ax [orig:122 D.25574 ] [122])
        (sign_extend:DI (reg:SI 0 ax [279]))) ge2fitman_preproc.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg:DI 1 dx [orig:123 D.25574 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:122 D.25574 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 497 {*ashldi3_1}
     (nil))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:51 89 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.25575 ] [124])
                (plus:DI (reg/f:DI 0 ax [280])
                    (reg:DI 1 dx [orig:123 D.25574 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.25574 ] [123]))
        (nil)))
(insn 80 79 81 4 (set (reg/f:DI 0 ax [orig:125 D.25576 ] [125])
        (mem/f:DI (reg/f:DI 0 ax [orig:124 D.25575 ] [124]) [0 *_59+0 S8 A64])) ge2fitman_preproc.cpp:51 89 {*movdi_internal}
     (nil))
(insn 81 80 82 4 (set (reg:SI 1 dx [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) ge2fitman_preproc.cpp:51 90 {*movsi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:DI 1 dx [orig:126 D.25574 ] [126])
        (sign_extend:DI (reg:SI 1 dx [281]))) ge2fitman_preproc.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 83 82 84 4 (parallel [
            (set (reg:DI 1 dx [orig:127 D.25574 ] [127])
                (ashift:DI (reg:DI 1 dx [orig:126 D.25574 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 497 {*ashldi3_1}
     (nil))
(insn 84 83 85 4 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.25576 ] [128])
                (plus:DI (reg/f:DI 0 ax [orig:125 D.25576 ] [125])
                    (reg:DI 1 dx [orig:127 D.25574 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 221 {*adddi_1}
     (nil))
(insn 85 84 86 4 (set (reg:SF 21 xmm0 [orig:129 D.25577 ] [129])
        (mem:SF (reg/f:DI 0 ax [orig:128 D.25576 ] [128]) [0 *_63+0 S4 A32])) ge2fitman_preproc.cpp:51 129 {*movsf_internal}
     (nil))
(insn 86 85 87 4 (set (reg:DF 21 xmm0 [orig:130 D.25578 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.25577 ] [129]))) ge2fitman_preproc.cpp:51 152 {*extendsfdf2_sse}
     (nil))
(insn 87 86 88 4 (set (reg:DF 22 xmm1 [orig:131 D.25578 ] [131])
        (mult:DF (reg:DF 22 xmm1 [orig:121 D.25578 ] [121])
            (reg:DF 21 xmm0 [orig:130 D.25578 ] [130]))) ge2fitman_preproc.cpp:51 776 {*fop_df_comm_sse}
     (nil))
(insn 88 87 89 4 (set (reg:SI 0 ax [282])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 89 88 90 4 (set (reg:DI 0 ax [orig:132 D.25574 ] [132])
        (sign_extend:DI (reg:SI 0 ax [282]))) ge2fitman_preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 90 89 91 4 (parallel [
            (set (reg:DI 1 dx [orig:133 D.25574 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.25574 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 497 {*ashldi3_1}
     (nil))
(insn 91 90 92 4 (set (reg/f:DI 0 ax [283])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 92 91 93 4 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.25575 ] [134])
                (plus:DI (reg/f:DI 0 ax [283])
                    (reg:DI 1 dx [orig:133 D.25574 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.25574 ] [133]))
        (nil)))
(insn 93 92 94 4 (set (reg/f:DI 0 ax [orig:135 D.25576 ] [135])
        (mem/f:DI (reg/f:DI 0 ax [orig:134 D.25575 ] [134]) [0 *_69+0 S8 A64])) ge2fitman_preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 94 93 95 4 (set (reg:SI 1 dx [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) ge2fitman_preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 95 94 96 4 (set (reg:DI 1 dx [orig:136 D.25579 ] [136])
        (sign_extend:DI (reg:SI 1 dx [284]))) ge2fitman_preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 4 (parallel [
            (set (reg:DI 1 dx [orig:137 D.25579 ] [137])
                (plus:DI (reg:DI 1 dx [orig:136 D.25579 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 221 {*adddi_1}
     (nil))
(insn 97 96 98 4 (parallel [
            (set (reg:DI 1 dx [orig:138 D.25579 ] [138])
                (ashift:DI (reg:DI 1 dx [orig:137 D.25579 ] [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 497 {*ashldi3_1}
     (nil))
(insn 98 97 99 4 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.25576 ] [139])
                (plus:DI (reg/f:DI 0 ax [orig:135 D.25576 ] [135])
                    (reg:DI 1 dx [orig:138 D.25579 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 221 {*adddi_1}
     (nil))
(insn 99 98 100 4 (set (reg:SF 21 xmm0 [orig:140 D.25577 ] [140])
        (mem:SF (reg/f:DI 0 ax [orig:139 D.25576 ] [139]) [0 *_74+0 S4 A32])) ge2fitman_preproc.cpp:52 129 {*movsf_internal}
     (nil))
(insn 100 99 101 4 (set (reg:DF 23 xmm2 [orig:141 D.25578 ] [141])
        (float_extend:DF (reg:SF 21 xmm0 [orig:140 D.25577 ] [140]))) ge2fitman_preproc.cpp:52 152 {*extendsfdf2_sse}
     (nil))
(insn 101 100 102 4 (set (reg:SI 0 ax [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 102 101 103 4 (set (reg:DI 0 ax [orig:142 D.25574 ] [142])
        (sign_extend:DI (reg:SI 0 ax [285]))) ge2fitman_preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 103 102 104 4 (parallel [
            (set (reg:DI 1 dx [orig:143 D.25574 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.25574 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 497 {*ashldi3_1}
     (nil))
(insn 104 103 105 4 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 105 104 106 4 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.25575 ] [144])
                (plus:DI (reg/f:DI 0 ax [286])
                    (reg:DI 1 dx [orig:143 D.25574 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.25574 ] [143]))
        (nil)))
(insn 106 105 107 4 (set (reg/f:DI 0 ax [orig:145 D.25576 ] [145])
        (mem/f:DI (reg/f:DI 0 ax [orig:144 D.25575 ] [144]) [0 *_79+0 S8 A64])) ge2fitman_preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 107 106 108 4 (set (reg:SI 1 dx [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) ge2fitman_preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 108 107 109 4 (set (reg:DI 1 dx [orig:146 D.25579 ] [146])
        (sign_extend:DI (reg:SI 1 dx [287]))) ge2fitman_preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 4 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25579 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 D.25579 ] [146])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 221 {*adddi_1}
     (nil))
(insn 110 109 111 4 (parallel [
            (set (reg:DI 1 dx [orig:148 D.25579 ] [148])
                (ashift:DI (reg:DI 1 dx [orig:147 D.25579 ] [147])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 497 {*ashldi3_1}
     (nil))
(insn 111 110 112 4 (parallel [
            (set (reg/f:DI 0 ax [orig:149 D.25576 ] [149])
                (plus:DI (reg/f:DI 0 ax [orig:145 D.25576 ] [145])
                    (reg:DI 1 dx [orig:148 D.25579 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 221 {*adddi_1}
     (nil))
(insn 112 111 113 4 (set (reg:SF 21 xmm0 [orig:150 D.25577 ] [150])
        (mem:SF (reg/f:DI 0 ax [orig:149 D.25576 ] [149]) [0 *_84+0 S4 A32])) ge2fitman_preproc.cpp:52 129 {*movsf_internal}
     (nil))
(insn 113 112 114 4 (set (reg:DF 21 xmm0 [orig:151 D.25578 ] [151])
        (float_extend:DF (reg:SF 21 xmm0 [orig:150 D.25577 ] [150]))) ge2fitman_preproc.cpp:52 152 {*extendsfdf2_sse}
     (nil))
(insn 114 113 115 4 (set (reg:DF 21 xmm0 [orig:152 D.25578 ] [152])
        (mult:DF (reg:DF 21 xmm0 [orig:151 D.25578 ] [151])
            (reg:DF 23 xmm2 [orig:141 D.25578 ] [141]))) ge2fitman_preproc.cpp:52 776 {*fop_df_comm_sse}
     (nil))
(insn 115 114 117 4 (set (reg:DF 21 xmm0 [orig:153 D.25578 ] [153])
        (plus:DF (reg:DF 21 xmm0 [orig:152 D.25578 ] [152])
            (reg:DF 22 xmm1 [orig:131 D.25578 ] [131]))) ge2fitman_preproc.cpp:52 776 {*fop_df_comm_sse}
     (nil))
(call_insn 117 115 118 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:52 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 118 117 119 4 (set (reg:DF 0 ax [288])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:52 128 {*movdf_internal}
     (nil))
(insn 119 118 120 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])
        (reg:DF 0 ax [288])) ge2fitman_preproc.cpp:52 128 {*movdf_internal}
     (nil))
(insn 120 119 121 4 (set (reg:DF 21 xmm0 [289])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) ge2fitman_preproc.cpp:53 128 {*movdf_internal}
     (nil))
(insn 121 120 122 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [289])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) ge2fitman_preproc.cpp:53 56 {*cmpiudf_sse}
     (nil))
(jump_insn 122 121 126 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 129)
            (pc))) ge2fitman_preproc.cpp:53 596 {*jcc_1}
     (nil)
 -> 129)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 290
(note 126 122 127 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 5 (set (reg:DF 0 ax [290])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) ge2fitman_preproc.cpp:54 128 {*movdf_internal}
     (nil))
(insn 128 127 129 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [290])) ge2fitman_preproc.cpp:54 128 {*movdf_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 129 128 130 6 4 "" [1 uses])
(note 130 129 131 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:46 220 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 132 131 133 7 3 "" [1 uses])
(note 133 132 135 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 135 133 136 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
            (const_int 48 [0x30]))) ge2fitman_preproc.cpp:46 7 {*cmpsi_1}
     (nil))
(jump_insn 136 135 137 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 134)
            (pc))) ge2fitman_preproc.cpp:46 596 {*jcc_1}
     (nil)
 -> 134)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 291 292 293 294
(note 137 136 138 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 138 137 139 8 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:58 90 {*movsi_internal}
     (nil))
(insn 139 138 140 8 (set (reg:DI 1 dx [orig:154 D.25574 ] [154])
        (sign_extend:DI (reg:SI 0 ax [291]))) ge2fitman_preproc.cpp:58 142 {*extendsidi2_rex64}
     (nil))
(insn 140 139 141 8 (set (reg:DI 0 ax [292])
        (reg:DI 1 dx [orig:154 D.25574 ] [154])) ge2fitman_preproc.cpp:58 89 {*movdi_internal}
     (nil))
(insn 141 140 142 8 (parallel [
            (set (reg:DI 0 ax [292])
                (ashift:DI (reg:DI 0 ax [292])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 497 {*ashldi3_1}
     (nil))
(insn 142 141 143 8 (parallel [
            (set (reg:DI 0 ax [292])
                (plus:DI (reg:DI 0 ax [292])
                    (reg:DI 1 dx [orig:154 D.25574 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:154 D.25574 ] [154])
            (const_int 9 [0x9]))
        (nil)))
(insn 143 142 144 8 (parallel [
            (set (reg:DI 0 ax [292])
                (ashift:DI (reg:DI 0 ax [292])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 497 {*ashldi3_1}
     (nil))
(insn 144 143 145 8 (parallel [
            (set (reg:DI 0 ax [292])
                (plus:DI (reg:DI 0 ax [292])
                    (reg:DI 1 dx [orig:154 D.25574 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:154 D.25574 ] [154])
            (const_int 19 [0x13]))
        (nil)))
(insn 145 144 146 8 (parallel [
            (set (reg:DI 0 ax [293])
                (ashift:DI (reg:DI 0 ax [292])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 497 {*ashldi3_1}
     (nil))
(insn 146 145 147 8 (set (reg:DI 0 ax [292])
        (reg:DI 0 ax [293])) ge2fitman_preproc.cpp:58 89 {*movdi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:DI 1 dx [orig:155 D.25574 ] [155])
        (reg:DI 0 ax [292])) ge2fitman_preproc.cpp:58 89 {*movdi_internal}
     (nil))
(insn 148 147 149 8 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:58 89 {*movdi_internal}
     (nil))
(insn 149 148 150 8 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.25580 ] [156])
                (plus:DI (reg/f:DI 0 ax [294])
                    (reg:DI 1 dx [orig:155 D.25574 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.25574 ] [155]))
        (nil)))
(insn 150 149 151 8 (set (reg:SI 0 ax [orig:157 D.25573 ] [157])
        (mem/j:SI (reg/f:DI 0 ax [orig:156 D.25580 ] [156]) [0 _95->fid_scale+0 S4 A32])) ge2fitman_preproc.cpp:58 90 {*movsi_internal}
     (nil))
(insn 151 150 152 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:157 D.25573 ] [157])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:58 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 152 151 153 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 257)
            (pc))) ge2fitman_preproc.cpp:58 596 {*jcc_1}
     (nil)
 -> 257)
;;  succ:       9 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 295
(note 153 152 154 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 154 153 155 9 (set (reg:DF 21 xmm0 [295])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:63 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 155 154 156 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [295])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) ge2fitman_preproc.cpp:63 56 {*cmpiudf_sse}
     (nil))
(jump_insn 156 155 160 9 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 638)
            (pc))) ge2fitman_preproc.cpp:63 596 {*jcc_1}
     (nil)
 -> 638)
;;  succ:       10 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 160 156 639 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 639 160 640 10 (set (pc)
        (label_ref 198)) ge2fitman_preproc.cpp:64 636 {jump}
     (nil)
 -> 198)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 640 639 200)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 167 168 169 170 171 172 173 296 297 298 299 300 301 302 303 304 305 306 307 308
(code_label 200 640 163 11 11 "" [1 uses])
(note 163 200 164 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 11 (set (reg:DF 0 ax [296])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:71 128 {*movdf_internal}
     (nil))
(insn 165 164 166 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [296])) ge2fitman_preproc.cpp:71 128 {*movdf_internal}
     (nil))
(insn 166 165 167 11 (set (reg:DF 22 xmm1 [298])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:73 128 {*movdf_internal}
     (nil))
(insn 167 166 168 11 (set (reg:DF 21 xmm0 [299])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:73 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 168 167 654 11 (set (reg:DF 22 xmm1 [297])
        (mult:DF (reg:DF 22 xmm1 [297])
            (reg:DF 21 xmm0 [299]))) ge2fitman_preproc.cpp:73 776 {*fop_df_comm_sse}
     (nil))
(insn 654 168 169 11 (set (reg:DF 0 ax [297])
        (reg:DF 22 xmm1 [297])) ge2fitman_preproc.cpp:73 128 {*movdf_internal}
     (nil))
(insn 169 654 170 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [297])) ge2fitman_preproc.cpp:73 128 {*movdf_internal}
     (nil))
(insn 170 169 171 11 (set (reg:SI 0 ax [300])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:74 90 {*movsi_internal}
     (nil))
(insn 171 170 172 11 (set (reg:DI 1 dx [orig:166 D.25574 ] [166])
        (sign_extend:DI (reg:SI 0 ax [300]))) ge2fitman_preproc.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 172 171 173 11 (set (reg:DI 0 ax [301])
        (reg:DI 1 dx [orig:166 D.25574 ] [166])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 173 172 174 11 (parallel [
            (set (reg:DI 0 ax [301])
                (ashift:DI (reg:DI 0 ax [301])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 497 {*ashldi3_1}
     (nil))
(insn 174 173 175 11 (parallel [
            (set (reg:DI 0 ax [301])
                (plus:DI (reg:DI 0 ax [301])
                    (reg:DI 1 dx [orig:166 D.25574 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:166 D.25574 ] [166])
            (const_int 9 [0x9]))
        (nil)))
(insn 175 174 176 11 (parallel [
            (set (reg:DI 0 ax [301])
                (ashift:DI (reg:DI 0 ax [301])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 497 {*ashldi3_1}
     (nil))
(insn 176 175 177 11 (parallel [
            (set (reg:DI 0 ax [301])
                (plus:DI (reg:DI 0 ax [301])
                    (reg:DI 1 dx [orig:166 D.25574 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:166 D.25574 ] [166])
            (const_int 19 [0x13]))
        (nil)))
(insn 177 176 178 11 (parallel [
            (set (reg:DI 0 ax [302])
                (ashift:DI (reg:DI 0 ax [301])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 497 {*ashldi3_1}
     (nil))
(insn 178 177 179 11 (set (reg:DI 0 ax [301])
        (reg:DI 0 ax [302])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 179 178 180 11 (set (reg:DI 1 dx [orig:167 D.25574 ] [167])
        (reg:DI 0 ax [301])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 180 179 181 11 (set (reg/f:DI 0 ax [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 181 180 182 11 (parallel [
            (set (reg/f:DI 2 cx [orig:168 D.25580 ] [168])
                (plus:DI (reg:DI 1 dx [orig:167 D.25574 ] [167])
                    (reg/f:DI 0 ax [303])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:167 D.25574 ] [167]))
        (nil)))
(insn 182 181 183 11 (set (reg:SI 0 ax [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:74 90 {*movsi_internal}
     (nil))
(insn 183 182 184 11 (set (reg:DI 1 dx [orig:169 D.25574 ] [169])
        (sign_extend:DI (reg:SI 0 ax [304]))) ge2fitman_preproc.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 184 183 185 11 (set (reg:DI 0 ax [305])
        (reg:DI 1 dx [orig:169 D.25574 ] [169])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 185 184 186 11 (parallel [
            (set (reg:DI 0 ax [305])
                (ashift:DI (reg:DI 0 ax [305])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 497 {*ashldi3_1}
     (nil))
(insn 186 185 187 11 (parallel [
            (set (reg:DI 0 ax [305])
                (plus:DI (reg:DI 0 ax [305])
                    (reg:DI 1 dx [orig:169 D.25574 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:169 D.25574 ] [169])
            (const_int 9 [0x9]))
        (nil)))
(insn 187 186 188 11 (parallel [
            (set (reg:DI 0 ax [305])
                (ashift:DI (reg:DI 0 ax [305])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 497 {*ashldi3_1}
     (nil))
(insn 188 187 189 11 (parallel [
            (set (reg:DI 0 ax [305])
                (plus:DI (reg:DI 0 ax [305])
                    (reg:DI 1 dx [orig:169 D.25574 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:169 D.25574 ] [169])
            (const_int 19 [0x13]))
        (nil)))
(insn 189 188 190 11 (parallel [
            (set (reg:DI 0 ax [306])
                (ashift:DI (reg:DI 0 ax [305])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 497 {*ashldi3_1}
     (nil))
(insn 190 189 191 11 (set (reg:DI 0 ax [305])
        (reg:DI 0 ax [306])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 191 190 192 11 (set (reg:DI 1 dx [orig:170 D.25574 ] [170])
        (reg:DI 0 ax [305])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 192 191 193 11 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 193 192 194 11 (parallel [
            (set (reg/f:DI 0 ax [orig:171 D.25580 ] [171])
                (plus:DI (reg/f:DI 0 ax [307])
                    (reg:DI 1 dx [orig:170 D.25574 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:170 D.25574 ] [170]))
        (nil)))
(insn 194 193 195 11 (set (reg:SF 22 xmm1 [orig:172 D.25577 ] [172])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:171 D.25580 ] [171])
                (const_int 4 [0x4])) [0 _113->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:74 129 {*movsf_internal}
     (nil))
(insn 195 194 196 11 (set (reg:SF 21 xmm0 [308])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:74 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 196 195 656 11 (set (reg:SF 22 xmm1 [orig:173 D.25577 ] [173])
        (mult:SF (reg:SF 22 xmm1 [orig:173 D.25577 ] [173])
            (reg:SF 21 xmm0 [308]))) ge2fitman_preproc.cpp:74 775 {*fop_sf_comm_sse}
     (nil))
(insn 656 196 197 11 (set (reg:SF 0 ax [orig:173 D.25577 ] [173])
        (reg:SF 22 xmm1 [orig:173 D.25577 ] [173])) ge2fitman_preproc.cpp:74 129 {*movsf_internal}
     (nil))
(insn 197 656 198 11 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:168 D.25580 ] [168])
                (const_int 4 [0x4])) [0 _110->scale_factor+0 S4 A32])
        (reg:SF 0 ax [orig:173 D.25577 ] [173])) ge2fitman_preproc.cpp:74 129 {*movsf_internal}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 309
(code_label 198 197 199 12 10 "" [1 uses])
(note 199 198 201 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 201 199 202 12 (set (reg:DF 21 xmm0 [309])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:64 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 202 201 203 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [309])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) ge2fitman_preproc.cpp:64 56 {*cmpiudf_sse}
     (nil))
(jump_insn 203 202 641 12 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 200)
            (pc))) ge2fitman_preproc.cpp:64 596 {*jcc_1}
     (nil)
 -> 200)
;;  succ:       11
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 641 203 642 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(jump_insn 642 641 643 13 (set (pc)
        (label_ref 257)) 636 {jump}
     (nil)
 -> 257)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 643 642 638)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 310
(code_label 638 643 208 14 35 "" [1 uses])
(note 208 638 209 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 210 14 (set (reg:DF 21 xmm0 [310])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:76 128 {*movdf_internal}
     (nil))
(insn 210 209 211 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [310])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64]))) ge2fitman_preproc.cpp:76 56 {*cmpiudf_sse}
     (nil))
(jump_insn 211 210 215 14 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 257)
            (pc))) ge2fitman_preproc.cpp:76 596 {*jcc_1}
     (nil)
 -> 257)
;;  succ:       15 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 215 211 644 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(jump_insn 644 215 645 15 (set (pc)
        (label_ref 251)) ge2fitman_preproc.cpp:77 636 {jump}
     (nil)
 -> 251)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 645 644 253)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 160 161 162 163 164 165 311 312 313 314 315 316 317 318 319 320 321 322
(code_label 253 645 218 16 14 "" [1 uses])
(note 218 253 219 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 16 (set (reg:DF 21 xmm0 [312])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:78 128 {*movdf_internal}
     (nil))
(insn 220 219 221 16 (set (reg:DF 22 xmm1 [313])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:78 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 221 220 658 16 (set (reg:DF 21 xmm0 [311])
        (div:DF (reg:DF 21 xmm0 [311])
            (reg:DF 22 xmm1 [313]))) ge2fitman_preproc.cpp:78 783 {*fop_df_1_sse}
     (nil))
(insn 658 221 222 16 (set (reg:DF 0 ax [311])
        (reg:DF 21 xmm0 [311])) ge2fitman_preproc.cpp:78 128 {*movdf_internal}
     (nil))
(insn 222 658 223 16 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [311])) ge2fitman_preproc.cpp:78 128 {*movdf_internal}
     (nil))
(insn 223 222 224 16 (set (reg:SI 0 ax [314])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:79 90 {*movsi_internal}
     (nil))
(insn 224 223 225 16 (set (reg:DI 1 dx [orig:158 D.25574 ] [158])
        (sign_extend:DI (reg:SI 0 ax [314]))) ge2fitman_preproc.cpp:79 142 {*extendsidi2_rex64}
     (nil))
(insn 225 224 226 16 (set (reg:DI 0 ax [315])
        (reg:DI 1 dx [orig:158 D.25574 ] [158])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 226 225 227 16 (parallel [
            (set (reg:DI 0 ax [315])
                (ashift:DI (reg:DI 0 ax [315])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 227 226 228 16 (parallel [
            (set (reg:DI 0 ax [315])
                (plus:DI (reg:DI 0 ax [315])
                    (reg:DI 1 dx [orig:158 D.25574 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:158 D.25574 ] [158])
            (const_int 9 [0x9]))
        (nil)))
(insn 228 227 229 16 (parallel [
            (set (reg:DI 0 ax [315])
                (ashift:DI (reg:DI 0 ax [315])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 229 228 230 16 (parallel [
            (set (reg:DI 0 ax [315])
                (plus:DI (reg:DI 0 ax [315])
                    (reg:DI 1 dx [orig:158 D.25574 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:158 D.25574 ] [158])
            (const_int 19 [0x13]))
        (nil)))
(insn 230 229 231 16 (parallel [
            (set (reg:DI 0 ax [316])
                (ashift:DI (reg:DI 0 ax [315])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 231 230 232 16 (set (reg:DI 0 ax [315])
        (reg:DI 0 ax [316])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 232 231 233 16 (set (reg:DI 1 dx [orig:159 D.25574 ] [159])
        (reg:DI 0 ax [315])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 233 232 234 16 (set (reg/f:DI 0 ax [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 234 233 235 16 (parallel [
            (set (reg/f:DI 2 cx [orig:160 D.25580 ] [160])
                (plus:DI (reg:DI 1 dx [orig:159 D.25574 ] [159])
                    (reg/f:DI 0 ax [317])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.25574 ] [159]))
        (nil)))
(insn 235 234 236 16 (set (reg:SI 0 ax [318])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:79 90 {*movsi_internal}
     (nil))
(insn 236 235 237 16 (set (reg:DI 1 dx [orig:161 D.25574 ] [161])
        (sign_extend:DI (reg:SI 0 ax [318]))) ge2fitman_preproc.cpp:79 142 {*extendsidi2_rex64}
     (nil))
(insn 237 236 238 16 (set (reg:DI 0 ax [319])
        (reg:DI 1 dx [orig:161 D.25574 ] [161])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 238 237 239 16 (parallel [
            (set (reg:DI 0 ax [319])
                (ashift:DI (reg:DI 0 ax [319])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 239 238 240 16 (parallel [
            (set (reg:DI 0 ax [319])
                (plus:DI (reg:DI 0 ax [319])
                    (reg:DI 1 dx [orig:161 D.25574 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:161 D.25574 ] [161])
            (const_int 9 [0x9]))
        (nil)))
(insn 240 239 241 16 (parallel [
            (set (reg:DI 0 ax [319])
                (ashift:DI (reg:DI 0 ax [319])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 241 240 242 16 (parallel [
            (set (reg:DI 0 ax [319])
                (plus:DI (reg:DI 0 ax [319])
                    (reg:DI 1 dx [orig:161 D.25574 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:161 D.25574 ] [161])
            (const_int 19 [0x13]))
        (nil)))
(insn 242 241 243 16 (parallel [
            (set (reg:DI 0 ax [320])
                (ashift:DI (reg:DI 0 ax [319])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 243 242 244 16 (set (reg:DI 0 ax [319])
        (reg:DI 0 ax [320])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 244 243 245 16 (set (reg:DI 1 dx [orig:162 D.25574 ] [162])
        (reg:DI 0 ax [319])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 245 244 246 16 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 246 245 247 16 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.25580 ] [163])
                (plus:DI (reg/f:DI 0 ax [321])
                    (reg:DI 1 dx [orig:162 D.25574 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.25574 ] [162]))
        (nil)))
(insn 247 246 248 16 (set (reg:SF 21 xmm0 [orig:164 D.25577 ] [164])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:163 D.25580 ] [163])
                (const_int 4 [0x4])) [0 _103->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:79 129 {*movsf_internal}
     (nil))
(insn 248 247 249 16 (set (reg:SF 22 xmm1 [322])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:79 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 249 248 660 16 (set (reg:SF 21 xmm0 [orig:165 D.25577 ] [165])
        (div:SF (reg:SF 21 xmm0 [orig:165 D.25577 ] [165])
            (reg:SF 22 xmm1 [322]))) ge2fitman_preproc.cpp:79 782 {*fop_sf_1_sse}
     (nil))
(insn 660 249 250 16 (set (reg:SF 0 ax [orig:165 D.25577 ] [165])
        (reg:SF 21 xmm0 [orig:165 D.25577 ] [165])) ge2fitman_preproc.cpp:79 129 {*movsf_internal}
     (nil))
(insn 250 660 251 16 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:160 D.25580 ] [160])
                (const_int 4 [0x4])) [0 _100->scale_factor+0 S4 A32])
        (reg:SF 0 ax [orig:165 D.25577 ] [165])) ge2fitman_preproc.cpp:79 129 {*movsf_internal}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              15 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 323
(code_label 251 250 252 17 13 "" [1 uses])
(note 252 251 254 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 254 252 255 17 (set (reg:DF 21 xmm0 [323])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:77 128 {*movdf_internal}
     (nil))
(insn 255 254 256 17 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [323])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64]))) ge2fitman_preproc.cpp:77 56 {*cmpiudf_sse}
     (nil))
(jump_insn 256 255 257 17 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 253)
            (pc))) ge2fitman_preproc.cpp:77 596 {*jcc_1}
     (nil)
 -> 253)
;;  succ:       16
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              14
;;              17 (FALLTHRU)
;;              13 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 257 256 258 18 7 "" [3 uses])
(note 258 257 646 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(jump_insn 646 258 647 18 (set (pc)
        (label_ref 301)) ge2fitman_preproc.cpp:88 636 {jump}
     (nil)
 -> 301)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 647 646 303)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 174 175 176 177 178 179 180 181 324 325 326 327 328 329 330 331 332 333 334 335 336 337
(code_label 303 647 261 19 16 "" [1 uses])
(note 261 303 262 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 262 261 263 19 (set (reg:DF 0 ax [324])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:92 128 {*movdf_internal}
     (nil))
(insn 263 262 661 19 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A64])
        (reg:DF 0 ax [324])) ge2fitman_preproc.cpp:92 128 {*movdf_internal}
     (nil))
(insn 661 263 264 19 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A64])) ge2fitman_preproc.cpp:92 128 {*movdf_internal}
     (nil))
(insn 264 661 265 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b4e61e28e40 *.LC4>)) ge2fitman_preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 265 264 266 19 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:92 93 {*movqi_internal}
     (nil))
(call_insn 266 265 267 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b4e607aae00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:92 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 21 xmm0))
                (nil)))))
(insn 267 266 268 19 (set (reg:DF 0 ax [325])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:95 128 {*movdf_internal}
     (nil))
(insn 268 267 269 19 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [325])) ge2fitman_preproc.cpp:95 128 {*movdf_internal}
     (nil))
(insn 269 268 270 19 (set (reg:DF 22 xmm1 [327])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:97 128 {*movdf_internal}
     (nil))
(insn 270 269 271 19 (set (reg:DF 21 xmm0 [328])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:97 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 271 270 663 19 (set (reg:DF 22 xmm1 [326])
        (mult:DF (reg:DF 22 xmm1 [326])
            (reg:DF 21 xmm0 [328]))) ge2fitman_preproc.cpp:97 776 {*fop_df_comm_sse}
     (nil))
(insn 663 271 272 19 (set (reg:DF 0 ax [326])
        (reg:DF 22 xmm1 [326])) ge2fitman_preproc.cpp:97 128 {*movdf_internal}
     (nil))
(insn 272 663 273 19 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [326])) ge2fitman_preproc.cpp:97 128 {*movdf_internal}
     (nil))
(insn 273 272 274 19 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:98 90 {*movsi_internal}
     (nil))
(insn 274 273 275 19 (set (reg:DI 1 dx [orig:174 D.25574 ] [174])
        (sign_extend:DI (reg:SI 0 ax [329]))) ge2fitman_preproc.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 275 274 276 19 (set (reg:DI 0 ax [330])
        (reg:DI 1 dx [orig:174 D.25574 ] [174])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 276 275 277 19 (parallel [
            (set (reg:DI 0 ax [330])
                (ashift:DI (reg:DI 0 ax [330])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 497 {*ashldi3_1}
     (nil))
(insn 277 276 278 19 (parallel [
            (set (reg:DI 0 ax [330])
                (plus:DI (reg:DI 0 ax [330])
                    (reg:DI 1 dx [orig:174 D.25574 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:174 D.25574 ] [174])
            (const_int 9 [0x9]))
        (nil)))
(insn 278 277 279 19 (parallel [
            (set (reg:DI 0 ax [330])
                (ashift:DI (reg:DI 0 ax [330])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 497 {*ashldi3_1}
     (nil))
(insn 279 278 280 19 (parallel [
            (set (reg:DI 0 ax [330])
                (plus:DI (reg:DI 0 ax [330])
                    (reg:DI 1 dx [orig:174 D.25574 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:174 D.25574 ] [174])
            (const_int 19 [0x13]))
        (nil)))
(insn 280 279 281 19 (parallel [
            (set (reg:DI 0 ax [331])
                (ashift:DI (reg:DI 0 ax [330])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 497 {*ashldi3_1}
     (nil))
(insn 281 280 282 19 (set (reg:DI 0 ax [330])
        (reg:DI 0 ax [331])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 282 281 283 19 (set (reg:DI 1 dx [orig:175 D.25574 ] [175])
        (reg:DI 0 ax [330])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 283 282 284 19 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 284 283 285 19 (parallel [
            (set (reg/f:DI 2 cx [orig:176 D.25580 ] [176])
                (plus:DI (reg:DI 1 dx [orig:175 D.25574 ] [175])
                    (reg/f:DI 0 ax [332])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.25574 ] [175]))
        (nil)))
(insn 285 284 286 19 (set (reg:SI 0 ax [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:98 90 {*movsi_internal}
     (nil))
(insn 286 285 287 19 (set (reg:DI 1 dx [orig:177 D.25574 ] [177])
        (sign_extend:DI (reg:SI 0 ax [333]))) ge2fitman_preproc.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 287 286 288 19 (set (reg:DI 0 ax [334])
        (reg:DI 1 dx [orig:177 D.25574 ] [177])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 288 287 289 19 (parallel [
            (set (reg:DI 0 ax [334])
                (ashift:DI (reg:DI 0 ax [334])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 497 {*ashldi3_1}
     (nil))
(insn 289 288 290 19 (parallel [
            (set (reg:DI 0 ax [334])
                (plus:DI (reg:DI 0 ax [334])
                    (reg:DI 1 dx [orig:177 D.25574 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:177 D.25574 ] [177])
            (const_int 9 [0x9]))
        (nil)))
(insn 290 289 291 19 (parallel [
            (set (reg:DI 0 ax [334])
                (ashift:DI (reg:DI 0 ax [334])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 497 {*ashldi3_1}
     (nil))
(insn 291 290 292 19 (parallel [
            (set (reg:DI 0 ax [334])
                (plus:DI (reg:DI 0 ax [334])
                    (reg:DI 1 dx [orig:177 D.25574 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:177 D.25574 ] [177])
            (const_int 19 [0x13]))
        (nil)))
(insn 292 291 293 19 (parallel [
            (set (reg:DI 0 ax [335])
                (ashift:DI (reg:DI 0 ax [334])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 497 {*ashldi3_1}
     (nil))
(insn 293 292 294 19 (set (reg:DI 0 ax [334])
        (reg:DI 0 ax [335])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 294 293 295 19 (set (reg:DI 1 dx [orig:178 D.25574 ] [178])
        (reg:DI 0 ax [334])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 295 294 296 19 (set (reg/f:DI 0 ax [336])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 296 295 297 19 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.25580 ] [179])
                (plus:DI (reg/f:DI 0 ax [336])
                    (reg:DI 1 dx [orig:178 D.25574 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:178 D.25574 ] [178]))
        (nil)))
(insn 297 296 298 19 (set (reg:SF 22 xmm1 [orig:180 D.25577 ] [180])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:179 D.25580 ] [179])
                (const_int 4 [0x4])) [0 _123->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:98 129 {*movsf_internal}
     (nil))
(insn 298 297 299 19 (set (reg:SF 21 xmm0 [337])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:98 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 299 298 665 19 (set (reg:SF 22 xmm1 [orig:181 D.25577 ] [181])
        (mult:SF (reg:SF 22 xmm1 [orig:181 D.25577 ] [181])
            (reg:SF 21 xmm0 [337]))) ge2fitman_preproc.cpp:98 775 {*fop_sf_comm_sse}
     (nil))
(insn 665 299 300 19 (set (reg:SF 0 ax [orig:181 D.25577 ] [181])
        (reg:SF 22 xmm1 [orig:181 D.25577 ] [181])) ge2fitman_preproc.cpp:98 129 {*movsf_internal}
     (nil))
(insn 300 665 301 19 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:176 D.25580 ] [176])
                (const_int 4 [0x4])) [0 _120->scale_factor+0 S4 A32])
        (reg:SF 0 ax [orig:181 D.25577 ] [181])) ge2fitman_preproc.cpp:98 129 {*movsf_internal}
     (nil))
;;  succ:       20 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU,DFS_BACK)
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 338
(code_label 301 300 302 20 15 "" [1 uses])
(note 302 301 304 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 304 302 305 20 (set (reg:DF 21 xmm0 [338])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:88 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 305 304 306 20 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [338])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) ge2fitman_preproc.cpp:88 56 {*cmpiudf_sse}
     (nil))
(jump_insn 306 305 307 20 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 303)
            (pc))) ge2fitman_preproc.cpp:88 596 {*jcc_1}
     (nil)
 -> 303)
;;  succ:       19
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 182 183 184 185 186 187 188 189 190 191 192 193 194 195 339 340 341 342 343 344 345 346 347 348 349 350
(note 307 306 308 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 308 307 309 21 (set (reg:SI 0 ax [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:101 90 {*movsi_internal}
     (nil))
(insn 309 308 310 21 (set (reg:DI 1 dx [orig:182 D.25574 ] [182])
        (sign_extend:DI (reg:SI 0 ax [339]))) ge2fitman_preproc.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 310 309 311 21 (set (reg:DI 0 ax [340])
        (reg:DI 1 dx [orig:182 D.25574 ] [182])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 311 310 312 21 (parallel [
            (set (reg:DI 0 ax [340])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 497 {*ashldi3_1}
     (nil))
(insn 312 311 313 21 (parallel [
            (set (reg:DI 0 ax [340])
                (plus:DI (reg:DI 0 ax [340])
                    (reg:DI 1 dx [orig:182 D.25574 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:182 D.25574 ] [182])
            (const_int 9 [0x9]))
        (nil)))
(insn 313 312 314 21 (parallel [
            (set (reg:DI 0 ax [340])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 497 {*ashldi3_1}
     (nil))
(insn 314 313 315 21 (parallel [
            (set (reg:DI 0 ax [340])
                (plus:DI (reg:DI 0 ax [340])
                    (reg:DI 1 dx [orig:182 D.25574 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:182 D.25574 ] [182])
            (const_int 19 [0x13]))
        (nil)))
(insn 315 314 316 21 (parallel [
            (set (reg:DI 0 ax [341])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 497 {*ashldi3_1}
     (nil))
(insn 316 315 317 21 (set (reg:DI 0 ax [340])
        (reg:DI 0 ax [341])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 317 316 318 21 (set (reg:DI 1 dx [orig:183 D.25574 ] [183])
        (reg:DI 0 ax [340])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 318 317 319 21 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 319 318 320 21 (parallel [
            (set (reg/f:DI 1 dx [orig:184 D.25580 ] [184])
                (plus:DI (reg:DI 1 dx [orig:183 D.25574 ] [183])
                    (reg/f:DI 0 ax [342])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:183 D.25574 ] [183]))
        (nil)))
(insn 320 319 321 21 (set (reg:SI 0 ax [343])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:101 90 {*movsi_internal}
     (nil))
(insn 321 320 666 21 (set (reg:DI 0 ax [orig:185 D.25574 ] [185])
        (sign_extend:DI (reg:SI 0 ax [343]))) ge2fitman_preproc.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 666 321 322 21 (set (reg:DI 0 ax [orig:186 D.25574 ] [186])
        (reg:DI 0 ax [orig:185 D.25574 ] [185])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 322 666 667 21 (parallel [
            (set (reg:DI 0 ax [orig:186 D.25574 ] [186])
                (ashift:DI (reg:DI 0 ax [orig:186 D.25574 ] [186])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 497 {*ashldi3_1}
     (nil))
(insn 667 322 323 21 (set (reg:DI 2 cx [orig:186 D.25574 ] [186])
        (reg:DI 0 ax [orig:186 D.25574 ] [186])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 323 667 324 21 (set (reg/f:DI 0 ax [344])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 324 323 325 21 (parallel [
            (set (reg/f:DI 2 cx [orig:187 D.25581 ] [187])
                (plus:DI (reg:DI 2 cx [orig:186 D.25574 ] [186])
                    (reg/f:DI 0 ax [344])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 2 cx [orig:186 D.25574 ] [186]))
        (nil)))
(insn 325 324 326 21 (set (reg:SI 0 ax [345])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:101 90 {*movsi_internal}
     (nil))
(insn 326 325 327 21 (set (reg:DI 0 ax [orig:188 D.25574 ] [188])
        (sign_extend:DI (reg:SI 0 ax [345]))) ge2fitman_preproc.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 327 326 328 21 (parallel [
            (set (reg:DI 4 si [orig:189 D.25574 ] [189])
                (ashift:DI (reg:DI 0 ax [orig:188 D.25574 ] [188])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 497 {*ashldi3_1}
     (nil))
(insn 328 327 329 21 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 329 328 330 21 (parallel [
            (set (reg/f:DI 0 ax [orig:190 D.25575 ] [190])
                (plus:DI (reg/f:DI 0 ax [346])
                    (reg:DI 4 si [orig:189 D.25574 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 4 si [orig:189 D.25574 ] [189]))
        (nil)))
(insn 330 329 332 21 (set (reg/f:DI 0 ax [orig:191 D.25576 ] [191])
        (mem/f:DI (reg/f:DI 0 ax [orig:190 D.25575 ] [190]) [0 *_135+0 S8 A64])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 332 330 333 21 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:187 D.25581 ] [187])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 333 332 334 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:191 D.25576 ] [191])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(call_insn 334 333 335 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5scalePfP12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b4e61d48c00 scale>) [0 scale S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:101 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 335 334 336 21 (set (reg:SI 0 ax [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:105 90 {*movsi_internal}
     (nil))
(insn 336 335 337 21 (set (reg:DI 1 dx [orig:192 D.25574 ] [192])
        (sign_extend:DI (reg:SI 0 ax [347]))) ge2fitman_preproc.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 337 336 338 21 (set (reg:DI 0 ax [348])
        (reg:DI 1 dx [orig:192 D.25574 ] [192])) ge2fitman_preproc.cpp:105 89 {*movdi_internal}
     (nil))
(insn 338 337 339 21 (parallel [
            (set (reg:DI 0 ax [348])
                (ashift:DI (reg:DI 0 ax [348])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 497 {*ashldi3_1}
     (nil))
(insn 339 338 340 21 (parallel [
            (set (reg:DI 0 ax [348])
                (plus:DI (reg:DI 0 ax [348])
                    (reg:DI 1 dx [orig:192 D.25574 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:192 D.25574 ] [192])
            (const_int 9 [0x9]))
        (nil)))
(insn 340 339 341 21 (parallel [
            (set (reg:DI 0 ax [348])
                (ashift:DI (reg:DI 0 ax [348])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 497 {*ashldi3_1}
     (nil))
(insn 341 340 342 21 (parallel [
            (set (reg:DI 0 ax [348])
                (plus:DI (reg:DI 0 ax [348])
                    (reg:DI 1 dx [orig:192 D.25574 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:192 D.25574 ] [192])
            (const_int 19 [0x13]))
        (nil)))
(insn 342 341 343 21 (parallel [
            (set (reg:DI 0 ax [349])
                (ashift:DI (reg:DI 0 ax [348])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 497 {*ashldi3_1}
     (nil))
(insn 343 342 344 21 (set (reg:DI 0 ax [348])
        (reg:DI 0 ax [349])) ge2fitman_preproc.cpp:105 89 {*movdi_internal}
     (nil))
(insn 344 343 345 21 (set (reg:DI 1 dx [orig:193 D.25574 ] [193])
        (reg:DI 0 ax [348])) ge2fitman_preproc.cpp:105 89 {*movdi_internal}
     (nil))
(insn 345 344 346 21 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:105 89 {*movdi_internal}
     (nil))
(insn 346 345 347 21 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.25580 ] [194])
                (plus:DI (reg/f:DI 0 ax [350])
                    (reg:DI 1 dx [orig:193 D.25574 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:193 D.25574 ] [193]))
        (nil)))
(insn 347 346 348 21 (set (reg:SI 0 ax [orig:195 D.25573 ] [195])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:194 D.25580 ] [194])
                (const_int 16 [0x10])) [0 _139->bc+0 S4 A32])) ge2fitman_preproc.cpp:105 90 {*movsi_internal}
     (nil))
(insn 348 347 349 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:195 D.25573 ] [195])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:105 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 349 348 350 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 365)
            (pc))) ge2fitman_preproc.cpp:105 596 {*jcc_1}
     (nil)
 -> 365)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 196 197 198 199 200 201 202 351 352 353 354
(note 350 349 351 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 352 22 (set (reg:SI 0 ax [351])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:106 90 {*movsi_internal}
     (nil))
(insn 352 351 668 22 (set (reg:DI 0 ax [orig:196 D.25574 ] [196])
        (sign_extend:DI (reg:SI 0 ax [351]))) ge2fitman_preproc.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 668 352 353 22 (set (reg:DI 0 ax [orig:197 D.25574 ] [197])
        (reg:DI 0 ax [orig:196 D.25574 ] [196])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 353 668 669 22 (parallel [
            (set (reg:DI 0 ax [orig:197 D.25574 ] [197])
                (ashift:DI (reg:DI 0 ax [orig:197 D.25574 ] [197])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:106 497 {*ashldi3_1}
     (nil))
(insn 669 353 354 22 (set (reg:DI 1 dx [orig:197 D.25574 ] [197])
        (reg:DI 0 ax [orig:197 D.25574 ] [197])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 354 669 355 22 (set (reg/f:DI 0 ax [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 355 354 356 22 (parallel [
            (set (reg/f:DI 1 dx [orig:198 D.25581 ] [198])
                (plus:DI (reg:DI 1 dx [orig:197 D.25574 ] [197])
                    (reg/f:DI 0 ax [352])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:106 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:197 D.25574 ] [197]))
        (nil)))
(insn 356 355 357 22 (set (reg:SI 0 ax [353])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:106 90 {*movsi_internal}
     (nil))
(insn 357 356 358 22 (set (reg:DI 0 ax [orig:199 D.25574 ] [199])
        (sign_extend:DI (reg:SI 0 ax [353]))) ge2fitman_preproc.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 358 357 359 22 (parallel [
            (set (reg:DI 2 cx [orig:200 D.25574 ] [200])
                (ashift:DI (reg:DI 0 ax [orig:199 D.25574 ] [199])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:106 497 {*ashldi3_1}
     (nil))
(insn 359 358 360 22 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 360 359 361 22 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.25575 ] [201])
                (plus:DI (reg/f:DI 0 ax [354])
                    (reg:DI 2 cx [orig:200 D.25574 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:106 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:200 D.25574 ] [200]))
        (nil)))
(insn 361 360 362 22 (set (reg/f:DI 0 ax [orig:202 D.25576 ] [202])
        (mem/f:DI (reg/f:DI 0 ax [orig:201 D.25575 ] [201]) [0 *_146+0 S8 A64])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 362 361 363 22 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:198 D.25581 ] [198])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 363 362 364 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:202 D.25576 ] [202])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn 364 363 365 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16baseline_correctPfP12Procpar_info") [flags 0x3]  <function_decl 0x2b4e61d6e300 baseline_correct>) [0 baseline_correct S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:106 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 203 204 205 206 355 356 357 358
(code_label 365 364 366 23 17 "" [1 uses])
(note 366 365 367 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 367 366 368 23 (set (reg:SI 0 ax [355])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:111 90 {*movsi_internal}
     (nil))
(insn 368 367 369 23 (set (reg:DI 1 dx [orig:203 D.25574 ] [203])
        (sign_extend:DI (reg:SI 0 ax [355]))) ge2fitman_preproc.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 23 (set (reg:DI 0 ax [356])
        (reg:DI 1 dx [orig:203 D.25574 ] [203])) ge2fitman_preproc.cpp:111 89 {*movdi_internal}
     (nil))
(insn 370 369 371 23 (parallel [
            (set (reg:DI 0 ax [356])
                (ashift:DI (reg:DI 0 ax [356])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 497 {*ashldi3_1}
     (nil))
(insn 371 370 372 23 (parallel [
            (set (reg:DI 0 ax [356])
                (plus:DI (reg:DI 0 ax [356])
                    (reg:DI 1 dx [orig:203 D.25574 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:203 D.25574 ] [203])
            (const_int 9 [0x9]))
        (nil)))
(insn 372 371 373 23 (parallel [
            (set (reg:DI 0 ax [356])
                (ashift:DI (reg:DI 0 ax [356])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 497 {*ashldi3_1}
     (nil))
(insn 373 372 374 23 (parallel [
            (set (reg:DI 0 ax [356])
                (plus:DI (reg:DI 0 ax [356])
                    (reg:DI 1 dx [orig:203 D.25574 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:203 D.25574 ] [203])
            (const_int 19 [0x13]))
        (nil)))
(insn 374 373 375 23 (parallel [
            (set (reg:DI 0 ax [357])
                (ashift:DI (reg:DI 0 ax [356])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 497 {*ashldi3_1}
     (nil))
(insn 375 374 376 23 (set (reg:DI 0 ax [356])
        (reg:DI 0 ax [357])) ge2fitman_preproc.cpp:111 89 {*movdi_internal}
     (nil))
(insn 376 375 377 23 (set (reg:DI 1 dx [orig:204 D.25574 ] [204])
        (reg:DI 0 ax [356])) ge2fitman_preproc.cpp:111 89 {*movdi_internal}
     (nil))
(insn 377 376 378 23 (set (reg/f:DI 0 ax [358])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:111 89 {*movdi_internal}
     (nil))
(insn 378 377 379 23 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.25580 ] [205])
                (plus:DI (reg/f:DI 0 ax [358])
                    (reg:DI 1 dx [orig:204 D.25574 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:204 D.25574 ] [204]))
        (nil)))
(insn 379 378 380 23 (set (reg:SI 0 ax [orig:206 D.25573 ] [206])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:205 D.25580 ] [205])
                (const_int 32 [0x20])) [0 _150->max_normalize+0 S4 A32])) ge2fitman_preproc.cpp:111 90 {*movsi_internal}
     (nil))
(insn 380 379 381 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:206 D.25573 ] [206])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:111 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 381 380 382 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 404)
            (pc))) ge2fitman_preproc.cpp:111 596 {*jcc_1}
     (nil)
 -> 404)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 207 208 209 210 211 212 213 214 215 216 217 359 360 361 362 363 364
(note 382 381 383 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 384 24 (set (reg:SI 0 ax [359])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 384 383 670 24 (set (reg:DI 0 ax [orig:207 D.25574 ] [207])
        (sign_extend:DI (reg:SI 0 ax [359]))) ge2fitman_preproc.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 670 384 385 24 (set (reg:DI 0 ax [orig:208 D.25574 ] [208])
        (reg:DI 0 ax [orig:207 D.25574 ] [207])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 385 670 671 24 (parallel [
            (set (reg:DI 0 ax [orig:208 D.25574 ] [208])
                (ashift:DI (reg:DI 0 ax [orig:208 D.25574 ] [208])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 497 {*ashldi3_1}
     (nil))
(insn 671 385 386 24 (set (reg:DI 1 dx [orig:208 D.25574 ] [208])
        (reg:DI 0 ax [orig:208 D.25574 ] [208])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 386 671 387 24 (set (reg/f:DI 0 ax [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 387 386 388 24 (parallel [
            (set (reg/f:DI 1 dx [orig:209 D.25581 ] [209])
                (plus:DI (reg:DI 1 dx [orig:208 D.25574 ] [208])
                    (reg/f:DI 0 ax [360])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:208 D.25574 ] [208]))
        (nil)))
(insn 388 387 389 24 (set (reg:SI 0 ax [361])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 389 388 390 24 (set (reg:DI 0 ax [orig:210 D.25574 ] [210])
        (sign_extend:DI (reg:SI 0 ax [361]))) ge2fitman_preproc.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 390 389 391 24 (parallel [
            (set (reg:DI 2 cx [orig:211 D.25574 ] [211])
                (ashift:DI (reg:DI 0 ax [orig:210 D.25574 ] [210])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 497 {*ashldi3_1}
     (nil))
(insn 391 390 392 24 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 392 391 393 24 (parallel [
            (set (reg/f:DI 0 ax [orig:212 D.25575 ] [212])
                (plus:DI (reg/f:DI 0 ax [362])
                    (reg:DI 2 cx [orig:211 D.25574 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (reg:DI 2 cx [orig:211 D.25574 ] [211]))
        (nil)))
(insn 393 392 394 24 (set (reg/f:DI 2 cx [orig:213 D.25576 ] [213])
        (mem/f:DI (reg/f:DI 0 ax [orig:212 D.25575 ] [212]) [0 *_158+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 394 393 395 24 (set (reg:SI 0 ax [363])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 395 394 396 24 (set (reg:DI 0 ax [orig:214 D.25574 ] [214])
        (sign_extend:DI (reg:SI 0 ax [363]))) ge2fitman_preproc.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 396 395 397 24 (parallel [
            (set (reg:DI 4 si [orig:215 D.25574 ] [215])
                (ashift:DI (reg:DI 0 ax [orig:214 D.25574 ] [214])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 497 {*ashldi3_1}
     (nil))
(insn 397 396 398 24 (set (reg/f:DI 0 ax [364])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 398 397 399 24 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.25575 ] [216])
                (plus:DI (reg/f:DI 0 ax [364])
                    (reg:DI 4 si [orig:215 D.25574 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 4 si [orig:215 D.25574 ] [215]))
        (nil)))
(insn 399 398 401 24 (set (reg/f:DI 0 ax [orig:217 D.25576 ] [217])
        (mem/f:DI (reg/f:DI 0 ax [orig:216 D.25575 ] [216]) [0 *_162+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 401 399 402 24 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:213 D.25576 ] [213])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 402 401 403 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:217 D.25576 ] [217])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(call_insn 403 402 404 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9normalizePfS_P12Procpar_info") [flags 0x3]  <function_decl 0x2b4e61d48d00 normalize>) [0 normalize S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:112 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 404 403 405 25 18 "" [1 uses])
(note 405 404 406 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 25 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:30 220 {*addsi_1}
     (nil))
;;  succ:       26 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 365
(code_label 407 406 408 26 2 "" [1 uses])
(note 408 407 409 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 409 408 410 26 (set (reg/f:DI 0 ax [365])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) ge2fitman_preproc.cpp:30 89 {*movdi_internal}
     (nil))
(insn 410 409 412 26 (set (reg:SI 0 ax [orig:83 D.25573 ] [83])
        (mem:SI (reg/f:DI 0 ax [365]) [0 *fid_12(D)+0 S4 A32])) ge2fitman_preproc.cpp:30 90 {*movsi_internal}
     (nil))
(insn 412 410 413 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.25573 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:30 7 {*cmpsi_1}
     (nil))
(jump_insn 413 412 414 26 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 411)
            (pc))) ge2fitman_preproc.cpp:30 596 {*jcc_1}
     (nil)
 -> 411)
;;  succ:       3
;;              27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 218 366
(note 414 413 415 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 415 414 416 27 (set (reg/f:DI 0 ax [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:119 89 {*movdi_internal}
     (nil))
(insn 416 415 417 27 (set (reg:SI 0 ax [orig:218 D.25573 ] [218])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [366])
                (const_int 12 [0xc])) [0 preprocess_94(D)->pre_ecc+0 S4 A32])) ge2fitman_preproc.cpp:119 90 {*movsi_internal}
     (nil))
(insn 417 416 418 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:218 D.25573 ] [218])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:119 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 418 417 419 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 432)
            (pc))) ge2fitman_preproc.cpp:119 596 {*jcc_1}
     (nil)
 -> 432)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 219 220 221 367 368 369 370
(note 419 418 420 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 420 419 421 28 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 421 420 422 28 (parallel [
            (set (reg/f:DI 0 ax [orig:219 D.25575 ] [219])
                (plus:DI (reg/f:DI 0 ax [367])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:121 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 422 421 423 28 (set (reg/f:DI 4 si [orig:220 D.25576 ] [220])
        (mem/f:DI (reg/f:DI 0 ax [orig:219 D.25575 ] [219]) [0 *_166+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 423 422 424 28 (set (reg/f:DI 0 ax [368])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 424 423 425 28 (set (reg/f:DI 0 ax [orig:221 D.25576 ] [221])
        (mem/f:DI (reg/f:DI 0 ax [368]) [0 *out_data_16(D)+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 425 424 426 28 (set (reg:DI 2 cx [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 426 425 430 28 (set (reg:DI 1 dx [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 430 426 431 28 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:221 D.25576 ] [221])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(call_insn 431 430 432 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z14ecc_correctionPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b4e61d48e00 ecc_correction>) [0 ecc_correction S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:121 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;;              28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 222 371
(code_label 432 431 433 29 20 "" [1 uses])
(note 433 432 434 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 434 433 435 29 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:125 89 {*movdi_internal}
     (nil))
(insn 435 434 436 29 (set (reg:SI 0 ax [orig:222 D.25573 ] [222])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [371])
                (const_int 36 [0x24])) [0 preprocess_94(D)->pre_quality+0 S4 A32])) ge2fitman_preproc.cpp:125 90 {*movsi_internal}
     (nil))
(insn 436 435 437 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:222 D.25573 ] [222])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:125 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 437 436 438 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 455)
            (pc))) ge2fitman_preproc.cpp:125 596 {*jcc_1}
     (nil)
 -> 455)
;;  succ:       30 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 223 224 225 226 227 372 373 374 375 376
(note 438 437 439 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 439 438 440 30 (set (reg/f:DI 0 ax [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 440 439 441 30 (parallel [
            (set (reg/f:DI 0 ax [orig:223 D.25575 ] [223])
                (plus:DI (reg/f:DI 0 ax [372])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:127 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 441 440 442 30 (set (reg/f:DI 1 dx [orig:224 D.25576 ] [224])
        (mem/f:DI (reg/f:DI 0 ax [orig:223 D.25575 ] [223]) [0 *_170+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 442 441 443 30 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 443 442 444 30 (parallel [
            (set (reg/f:DI 0 ax [orig:225 D.25575 ] [225])
                (plus:DI (reg/f:DI 0 ax [373])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:127 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 444 443 445 30 (set (reg/f:DI 4 si [orig:226 D.25576 ] [226])
        (mem/f:DI (reg/f:DI 0 ax [orig:225 D.25575 ] [225]) [0 *_172+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 445 444 446 30 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 446 445 447 30 (set (reg/f:DI 0 ax [orig:227 D.25576 ] [227])
        (mem/f:DI (reg/f:DI 0 ax [374]) [0 *out_data_16(D)+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 447 446 448 30 (set (reg:DI 5 di [375])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 448 447 449 30 (set (reg:DI 2 cx [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 449 448 453 30 (set (reg:DI 37 r8)
        (reg:DI 5 di [375])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 453 449 454 30 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:227 D.25576 ] [227])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(call_insn 454 453 455 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z7qualityPfS_S_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b4e61d48f00 quality>) [0 quality S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:127 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29
;;              30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 228 377
(code_label 455 454 456 31 21 "" [1 uses])
(note 456 455 457 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 457 456 458 31 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 458 457 459 31 (set (reg:SI 0 ax [orig:228 D.25573 ] [228])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [377])
                (const_int 40 [0x28])) [0 preprocess_94(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:131 90 {*movsi_internal}
     (nil))
(insn 459 458 460 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:228 D.25573 ] [228])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:131 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 460 459 461 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) ge2fitman_preproc.cpp:131 596 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 229 230 231 232 233 378 379 380 381 382
(note 461 460 462 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 462 461 463 32 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 463 462 464 32 (parallel [
            (set (reg/f:DI 0 ax [orig:229 D.25575 ] [229])
                (plus:DI (reg/f:DI 0 ax [378])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:133 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 464 463 465 32 (set (reg/f:DI 1 dx [orig:230 D.25576 ] [230])
        (mem/f:DI (reg/f:DI 0 ax [orig:229 D.25575 ] [229]) [0 *_176+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 465 464 466 32 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 466 465 467 32 (parallel [
            (set (reg/f:DI 0 ax [orig:231 D.25575 ] [231])
                (plus:DI (reg/f:DI 0 ax [379])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:133 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 467 466 468 32 (set (reg/f:DI 4 si [orig:232 D.25576 ] [232])
        (mem/f:DI (reg/f:DI 0 ax [orig:231 D.25575 ] [231]) [0 *_178+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 468 467 469 32 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 469 468 470 32 (set (reg/f:DI 0 ax [orig:233 D.25576 ] [233])
        (mem/f:DI (reg/f:DI 0 ax [380]) [0 *out_data_16(D)+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 470 469 471 32 (set (reg:DI 5 di [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 471 470 472 32 (set (reg:DI 2 cx [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 472 471 476 32 (set (reg:DI 37 r8)
        (reg:DI 5 di [381])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 476 472 477 32 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:233 D.25576 ] [233])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(call_insn 477 476 478 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5queccPfS_S_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b4e61d6e000 quecc>) [0 quecc S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:133 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 478 477 479 33 22 "" [1 uses])
(note 479 478 480 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 648 33 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:139 90 {*movsi_internal}
     (nil))
(jump_insn 648 480 649 33 (set (pc)
        (label_ref 517)) ge2fitman_preproc.cpp:139 636 {jump}
     (nil)
 -> 517)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 649 648 521)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 235 236 237 238 383 384 385 386
(code_label 521 649 483 34 25 "" [1 uses])
(note 483 521 484 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 484 483 485 34 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:141 90 {*movsi_internal}
     (nil))
(insn 485 484 486 34 (set (reg:DI 1 dx [orig:235 D.25574 ] [235])
        (sign_extend:DI (reg:SI 0 ax [383]))) ge2fitman_preproc.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 486 485 487 34 (set (reg:DI 0 ax [384])
        (reg:DI 1 dx [orig:235 D.25574 ] [235])) ge2fitman_preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 487 486 488 34 (parallel [
            (set (reg:DI 0 ax [384])
                (ashift:DI (reg:DI 0 ax [384])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 497 {*ashldi3_1}
     (nil))
(insn 488 487 489 34 (parallel [
            (set (reg:DI 0 ax [384])
                (plus:DI (reg:DI 0 ax [384])
                    (reg:DI 1 dx [orig:235 D.25574 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:235 D.25574 ] [235])
            (const_int 9 [0x9]))
        (nil)))
(insn 489 488 490 34 (parallel [
            (set (reg:DI 0 ax [384])
                (ashift:DI (reg:DI 0 ax [384])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 497 {*ashldi3_1}
     (nil))
(insn 490 489 491 34 (parallel [
            (set (reg:DI 0 ax [384])
                (plus:DI (reg:DI 0 ax [384])
                    (reg:DI 1 dx [orig:235 D.25574 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:235 D.25574 ] [235])
            (const_int 19 [0x13]))
        (nil)))
(insn 491 490 492 34 (parallel [
            (set (reg:DI 0 ax [385])
                (ashift:DI (reg:DI 0 ax [384])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 497 {*ashldi3_1}
     (nil))
(insn 492 491 493 34 (set (reg:DI 0 ax [384])
        (reg:DI 0 ax [385])) ge2fitman_preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 493 492 494 34 (set (reg:DI 1 dx [orig:236 D.25574 ] [236])
        (reg:DI 0 ax [384])) ge2fitman_preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 494 493 495 34 (set (reg/f:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 495 494 496 34 (parallel [
            (set (reg/f:DI 0 ax [orig:237 D.25580 ] [237])
                (plus:DI (reg/f:DI 0 ax [386])
                    (reg:DI 1 dx [orig:236 D.25574 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:236 D.25574 ] [236]))
        (nil)))
(insn 496 495 497 34 (set (reg:SI 0 ax [orig:238 D.25573 ] [238])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:237 D.25580 ] [237])
                (const_int 68 [0x44])) [0 _185->tilt+0 S4 A32])) ge2fitman_preproc.cpp:141 90 {*movsi_internal}
     (nil))
(insn 497 496 498 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:238 D.25573 ] [238])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:141 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 498 497 499 34 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 514)
            (pc))) ge2fitman_preproc.cpp:141 596 {*jcc_1}
     (nil)
 -> 514)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 239 240 241 242 243 244 245 387 388 389 390
(note 499 498 500 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 35 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:143 90 {*movsi_internal}
     (nil))
(insn 501 500 672 35 (set (reg:DI 0 ax [orig:239 D.25574 ] [239])
        (sign_extend:DI (reg:SI 0 ax [387]))) ge2fitman_preproc.cpp:143 142 {*extendsidi2_rex64}
     (nil))
(insn 672 501 502 35 (set (reg:DI 0 ax [orig:240 D.25574 ] [240])
        (reg:DI 0 ax [orig:239 D.25574 ] [239])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 502 672 673 35 (parallel [
            (set (reg:DI 0 ax [orig:240 D.25574 ] [240])
                (ashift:DI (reg:DI 0 ax [orig:240 D.25574 ] [240])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:143 497 {*ashldi3_1}
     (nil))
(insn 673 502 503 35 (set (reg:DI 1 dx [orig:240 D.25574 ] [240])
        (reg:DI 0 ax [orig:240 D.25574 ] [240])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 503 673 504 35 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 504 503 505 35 (parallel [
            (set (reg/f:DI 1 dx [orig:241 D.25581 ] [241])
                (plus:DI (reg:DI 1 dx [orig:240 D.25574 ] [240])
                    (reg/f:DI 0 ax [388])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:143 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:240 D.25574 ] [240]))
        (nil)))
(insn 505 504 506 35 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:143 90 {*movsi_internal}
     (nil))
(insn 506 505 507 35 (set (reg:DI 0 ax [orig:242 D.25574 ] [242])
        (sign_extend:DI (reg:SI 0 ax [389]))) ge2fitman_preproc.cpp:143 142 {*extendsidi2_rex64}
     (nil))
(insn 507 506 508 35 (parallel [
            (set (reg:DI 2 cx [orig:243 D.25574 ] [243])
                (ashift:DI (reg:DI 0 ax [orig:242 D.25574 ] [242])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:143 497 {*ashldi3_1}
     (nil))
(insn 508 507 509 35 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 509 508 510 35 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.25575 ] [244])
                (plus:DI (reg/f:DI 0 ax [390])
                    (reg:DI 2 cx [orig:243 D.25574 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:143 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:243 D.25574 ] [243]))
        (nil)))
(insn 510 509 511 35 (set (reg/f:DI 0 ax [orig:245 D.25576 ] [245])
        (mem/f:DI (reg/f:DI 0 ax [orig:244 D.25575 ] [244]) [0 *_192+0 S8 A64])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 511 510 512 35 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:241 D.25581 ] [241])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 512 511 513 35 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:245 D.25576 ] [245])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(call_insn 513 512 514 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16baseline_correctPfP12Procpar_info") [flags 0x3]  <function_decl 0x2b4e61d6e300 baseline_correct>) [0 baseline_correct S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:143 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;;              35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 514 513 515 36 24 "" [1 uses])
(note 515 514 516 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 516 515 517 36 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:139 220 {*addsi_1}
     (nil))
;;  succ:       37 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU,DFS_BACK)
;;              33 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 234 391
(code_label 517 516 518 37 23 "" [1 uses])
(note 518 517 519 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 519 518 520 37 (set (reg/f:DI 0 ax [391])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) ge2fitman_preproc.cpp:139 89 {*movdi_internal}
     (nil))
(insn 520 519 522 37 (set (reg:SI 0 ax [orig:234 D.25573 ] [234])
        (mem:SI (reg/f:DI 0 ax [391]) [0 *fid_12(D)+0 S4 A32])) ge2fitman_preproc.cpp:139 90 {*movsi_internal}
     (nil))
(insn 522 520 523 37 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:234 D.25573 ] [234])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:139 7 {*cmpsi_1}
     (nil))
(jump_insn 523 522 524 37 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 521)
            (pc))) ge2fitman_preproc.cpp:139 596 {*jcc_1}
     (nil)
 -> 521)
;;  succ:       34
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 246 392 393
(note 524 523 525 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 525 524 526 38 (set (reg/f:DI 0 ax [392])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:150 89 {*movdi_internal}
     (nil))
(insn 526 525 527 38 (set (reg:SF 21 xmm0 [orig:246 D.25577 ] [246])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [392])
                (const_int 28 [0x1c])) [0 preprocess_94(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (nil))
(insn 527 526 528 38 (set (reg:SF 22 xmm1 [393])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 528 527 529 38 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:246 D.25577 ] [246])
            (reg:SF 22 xmm1 [393]))) ge2fitman_preproc.cpp:150 55 {*cmpiusf_sse}
     (nil))
(jump_insn 529 528 629 38 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 596 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       44
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 246

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 246
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 246
;; lr  def 	 17 [flags] 394
(note 629 529 530 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 530 629 531 39 (set (reg:SF 22 xmm1 [394])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 531 530 532 39 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:246 D.25577 ] [246])
            (reg:SF 22 xmm1 [394]))) ge2fitman_preproc.cpp:150 55 {*cmpiusf_sse}
     (nil))
(jump_insn 532 531 533 39 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 596 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       44
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 247 248 395 396
(note 533 532 534 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 40 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:150 89 {*movdi_internal}
     (nil))
(insn 535 534 536 40 (parallel [
            (set (reg/f:DI 0 ax [orig:247 D.25580 ] [247])
                (plus:DI (reg/f:DI 0 ax [395])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:150 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 536 535 537 40 (set (reg:SF 21 xmm0 [orig:248 D.25577 ] [248])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:247 D.25580 ] [247])
                (const_int 28 [0x1c])) [0 _196->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (nil))
(insn 537 536 538 40 (set (reg:SF 22 xmm1 [396])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 538 537 539 40 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:248 D.25577 ] [248])
            (reg:SF 22 xmm1 [396]))) ge2fitman_preproc.cpp:150 55 {*cmpiusf_sse}
     (nil))
(jump_insn 539 538 630 40 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 596 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       44
;;              41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 248

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 248
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 248
;; lr  def 	 17 [flags] 397
(note 630 539 540 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 540 630 541 41 (set (reg:SF 22 xmm1 [397])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 541 540 542 41 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:248 D.25577 ] [248])
            (reg:SF 22 xmm1 [397]))) ge2fitman_preproc.cpp:150 55 {*cmpiusf_sse}
     (nil))
(jump_insn 542 541 543 41 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 596 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       44
;;              42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 249 398
(note 543 542 544 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 544 543 545 42 (set (reg/f:DI 0 ax [398])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:151 89 {*movdi_internal}
     (nil))
(insn 545 544 546 42 (set (reg:SI 0 ax [orig:249 D.25573 ] [249])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [398])
                (const_int 52 [0x34])) [0 preprocess_94(D)->pre_quecc_if+0 S4 A32])) ge2fitman_preproc.cpp:151 90 {*movsi_internal}
     (nil))
(insn 546 545 547 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:249 D.25573 ] [249])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:150 7 {*cmpsi_1}
     (nil))
(jump_insn 547 546 548 42 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 596 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       44
;;              43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 250 251 399
(note 548 547 549 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 549 548 550 43 (set (reg/f:DI 0 ax [399])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:151 89 {*movdi_internal}
     (nil))
(insn 550 549 551 43 (parallel [
            (set (reg/f:DI 0 ax [orig:250 D.25580 ] [250])
                (plus:DI (reg/f:DI 0 ax [399])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:151 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 551 550 552 43 (set (reg:SI 0 ax [orig:251 D.25573 ] [251])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:250 D.25580 ] [250])
                (const_int 52 [0x34])) [0 _199->pre_quecc_if+0 S4 A32])) ge2fitman_preproc.cpp:151 90 {*movsi_internal}
     (nil))
(insn 552 551 553 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:251 D.25573 ] [251])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:151 7 {*cmpsi_1}
     (nil))
(jump_insn 553 552 554 43 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 568)
            (pc))) ge2fitman_preproc.cpp:151 596 {*jcc_1}
     (nil)
 -> 568)
;;  succ:       44 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;;              41
;;              42
;;              43 (FALLTHRU)
;;              38
;;              40
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 252 253 254 400 401 402 403
(code_label 554 553 555 44 26 "" [5 uses])
(note 555 554 556 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 556 555 557 44 (set (reg/f:DI 0 ax [400])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 557 556 558 44 (parallel [
            (set (reg/f:DI 0 ax [orig:252 D.25575 ] [252])
                (plus:DI (reg/f:DI 0 ax [400])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:153 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 558 557 559 44 (set (reg/f:DI 4 si [orig:253 D.25576 ] [253])
        (mem/f:DI (reg/f:DI 0 ax [orig:252 D.25575 ] [252]) [0 *_201+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 559 558 560 44 (set (reg/f:DI 0 ax [401])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 560 559 561 44 (set (reg/f:DI 0 ax [orig:254 D.25576 ] [254])
        (mem/f:DI (reg/f:DI 0 ax [401]) [0 *out_data_16(D)+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 561 560 562 44 (set (reg:DI 2 cx [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 562 561 566 44 (set (reg:DI 1 dx [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 566 562 567 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:254 D.25576 ] [254])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(call_insn 567 566 568 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6filterPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b4e61d6e200 filter>) [0 filter S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:153 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;;              44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 568 567 569 45 27 "" [1 uses])
(note 569 568 570 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 570 569 650 45 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:158 90 {*movsi_internal}
     (nil))
(jump_insn 650 570 651 45 (set (pc)
        (label_ref 605)) ge2fitman_preproc.cpp:158 636 {jump}
     (nil)
 -> 605)
;;  succ:       49 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 651 650 609)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 256 257 258 259 404 405 406 407
(code_label 609 651 573 46 30 "" [1 uses])
(note 573 609 574 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 574 573 575 46 (set (reg:SI 0 ax [404])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:159 90 {*movsi_internal}
     (nil))
(insn 575 574 576 46 (set (reg:DI 1 dx [orig:256 D.25574 ] [256])
        (sign_extend:DI (reg:SI 0 ax [404]))) ge2fitman_preproc.cpp:159 142 {*extendsidi2_rex64}
     (nil))
(insn 576 575 577 46 (set (reg:DI 0 ax [405])
        (reg:DI 1 dx [orig:256 D.25574 ] [256])) ge2fitman_preproc.cpp:159 89 {*movdi_internal}
     (nil))
(insn 577 576 578 46 (parallel [
            (set (reg:DI 0 ax [405])
                (ashift:DI (reg:DI 0 ax [405])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 497 {*ashldi3_1}
     (nil))
(insn 578 577 579 46 (parallel [
            (set (reg:DI 0 ax [405])
                (plus:DI (reg:DI 0 ax [405])
                    (reg:DI 1 dx [orig:256 D.25574 ] [256])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:256 D.25574 ] [256])
            (const_int 9 [0x9]))
        (nil)))
(insn 579 578 580 46 (parallel [
            (set (reg:DI 0 ax [405])
                (ashift:DI (reg:DI 0 ax [405])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 497 {*ashldi3_1}
     (nil))
(insn 580 579 581 46 (parallel [
            (set (reg:DI 0 ax [405])
                (plus:DI (reg:DI 0 ax [405])
                    (reg:DI 1 dx [orig:256 D.25574 ] [256])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:256 D.25574 ] [256])
            (const_int 19 [0x13]))
        (nil)))
(insn 581 580 582 46 (parallel [
            (set (reg:DI 0 ax [406])
                (ashift:DI (reg:DI 0 ax [405])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 497 {*ashldi3_1}
     (nil))
(insn 582 581 583 46 (set (reg:DI 0 ax [405])
        (reg:DI 0 ax [406])) ge2fitman_preproc.cpp:159 89 {*movdi_internal}
     (nil))
(insn 583 582 584 46 (set (reg:DI 1 dx [orig:257 D.25574 ] [257])
        (reg:DI 0 ax [405])) ge2fitman_preproc.cpp:159 89 {*movdi_internal}
     (nil))
(insn 584 583 585 46 (set (reg/f:DI 0 ax [407])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:159 89 {*movdi_internal}
     (nil))
(insn 585 584 586 46 (parallel [
            (set (reg/f:DI 0 ax [orig:258 D.25580 ] [258])
                (plus:DI (reg/f:DI 0 ax [407])
                    (reg:DI 1 dx [orig:257 D.25574 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:257 D.25574 ] [257]))
        (nil)))
(insn 586 585 587 46 (set (reg:SI 0 ax [orig:259 D.25573 ] [259])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:258 D.25580 ] [258])
                (const_int 24 [0x18])) [0 _208->data_zero_fill+0 S4 A32])) ge2fitman_preproc.cpp:159 90 {*movsi_internal}
     (nil))
(insn 587 586 588 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:259 D.25573 ] [259])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:159 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 588 587 589 46 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 602)
            (pc))) ge2fitman_preproc.cpp:159 596 {*jcc_1}
     (nil)
 -> 602)
;;  succ:       47 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 260 261 262 408 409 410 411
(note 589 588 590 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 590 589 591 47 (set (reg/f:DI 0 ax [408])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 591 590 592 47 (parallel [
            (set (reg/f:DI 0 ax [orig:260 D.25575 ] [260])
                (plus:DI (reg/f:DI 0 ax [408])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:160 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 592 591 593 47 (set (reg/f:DI 4 si [orig:261 D.25576 ] [261])
        (mem/f:DI (reg/f:DI 0 ax [orig:260 D.25575 ] [260]) [0 *_210+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 593 592 594 47 (set (reg/f:DI 0 ax [409])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 594 593 595 47 (set (reg/f:DI 0 ax [orig:262 D.25576 ] [262])
        (mem/f:DI (reg/f:DI 0 ax [409]) [0 *out_data_16(D)+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 595 594 596 47 (set (reg:DI 2 cx [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 596 595 600 47 (set (reg:DI 1 dx [411])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 600 596 601 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:262 D.25576 ] [262])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(call_insn 601 600 602 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9zero_fillPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b4e61d6e100 zero_fill>) [0 zero_fill S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:160 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;;              47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 602 601 603 48 29 "" [1 uses])
(note 603 602 604 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 604 603 605 48 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:158 220 {*addsi_1}
     (nil))
;;  succ:       49 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU,DFS_BACK)
;;              45 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 255 412
(code_label 605 604 606 49 28 "" [1 uses])
(note 606 605 607 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 607 606 608 49 (set (reg/f:DI 0 ax [412])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) ge2fitman_preproc.cpp:158 89 {*movdi_internal}
     (nil))
(insn 608 607 610 49 (set (reg:SI 0 ax [orig:255 D.25573 ] [255])
        (mem:SI (reg/f:DI 0 ax [412]) [0 *fid_12(D)+0 S4 A32])) ge2fitman_preproc.cpp:158 90 {*movsi_internal}
     (nil))
(insn 610 608 611 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:255 D.25573 ] [255])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:158 7 {*cmpsi_1}
     (nil))
(jump_insn 611 610 612 49 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 609)
            (pc))) ge2fitman_preproc.cpp:158 596 {*jcc_1}
     (nil)
 -> 609)
;;  succ:       46
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 263 264
(note 612 611 613 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 613 612 616 50 (set (reg:SI 0 ax [orig:263 D.25573 ] [263])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:164 90 {*movsi_internal}
     (nil))
(insn 616 613 620 50 (set (reg:SI 0 ax [orig:264 <retval> ] [264])
        (reg:SI 0 ax [orig:263 D.25573 ] [263])) ge2fitman_preproc.cpp:164 90 {*movsi_internal}
     (nil))
(insn 620 616 621 50 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:264 <retval> ] [264])) ge2fitman_preproc.cpp:165 90 {*movsi_internal}
     (nil))
(insn 621 620 652 50 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:165 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 652 621 0 NOTE_INSN_DELETED)

;; Function int scale(float*, Procpar_info*, Preprocess*) (_Z5scalePfP12Procpar_infoP10Preprocess, funcdef_no=1021, decl_uid=23995, symbol_order=228)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 25:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 27:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 28:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=316 from oldreg=93, assigning class SSE_REGS to r316
   28: r316:SF=r316:SF*r92:SF
      REG_DEAD r92:SF
      REG_DEAD r91:SF
    Inserting insn reload before:
  360: r316:SF=r91:SF
    Inserting insn reload after:
  361: r93:SF=r316:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 361:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 42:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 44:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 45:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=317 from oldreg=104, assigning class SSE_REGS to r317
   45: r317:SF=r317:SF*r103:SF
      REG_DEAD r103:SF
      REG_DEAD r102:SF
    Inserting insn reload before:
  362: r317:SF=r102:SF
    Inserting insn reload after:
  363: r104:SF=r317:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 363:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 51
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 52:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 56:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 69:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 72:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) x  (1) xm {*cmpiusf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 90:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=318 from oldreg=260, assigning class SSE_REGS to r318
   90: r318:SF=r318:SF*r121:SF
      REG_DEAD r121:SF
      REG_DEAD r120:SF
    Inserting insn reload before:
  364: r318:SF=r120:SF
    Inserting insn reload after:
  365: r260:SF=r318:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 365:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 95:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 98:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 102:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 105:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 110:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 113:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 135
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 136:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 142
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 145:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 146:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 149:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 150:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 154:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=319 from oldreg=156, assigning class SSE_REGS to r319
  154: r319:SF=float_trunc(r155:DF)
      REG_DEAD r155:DF
    Inserting insn reload after:
  366: r156:SF=r319:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 366:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 170
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 171:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 172:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 173:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=320 from oldreg=165, assigning class SSE_REGS to r320
  173: r320:SF=r320:SF*r280:SF
      REG_DEAD r280:SF
      REG_DEAD r164:SF
    Inserting insn reload before:
  367: r320:SF=r164:SF
    Inserting insn reload after:
  368: r165:SF=r320:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 368:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 174:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 189:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 202:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 203:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 206:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) x  (1) xm {*cmpiusf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 218
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 219:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 223:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 224:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=321 from oldreg=293, assigning class SSE_REGS to r321
  224: r321:SF=r321:SF*r184:SF
      REG_DEAD r184:SF
      REG_DEAD r183:SF
    Inserting insn reload before:
  369: r321:SF=r183:SF
    Inserting insn reload after:
  370: r293:SF=r321:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 370:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 225:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 230:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 232
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 233:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 237:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 240:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 245:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 248:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 253:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 262:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 270:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 271:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 272
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 273:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 276:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 278:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 280
	 Choosing alt 0 in insn 280:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 281:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 282:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 283:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 285
	 Choosing alt 0 in insn 285:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 287:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 292:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=322 from oldreg=223, assigning class SSE_REGS to r322
  292: r322:SF=float_trunc(r222:DF)
      REG_DEAD r222:DF
    Inserting insn reload after:
  371: r223:SF=r322:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 371:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 293:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 300:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 301:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 306:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 308:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 309:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 310
	 Choosing alt 0 in insn 310:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 311:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 312:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 313:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=323 from oldreg=234, assigning class SSE_REGS to r323
  313: r323:SF=r323:SF*r313:SF
      REG_DEAD r313:SF
      REG_DEAD r233:SF
    Inserting insn reload before:
  372: r323:SF=r233:SF
    Inserting insn reload after:
  373: r234:SF=r323:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 373:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 314:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 319:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 322:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 326:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21

********** Pseudo live ranges #1: **********

  BB 21
   Insn 337: point = 0
   Insn 336: point = 0
   Insn 332: point = 1
   Insn 329: point = 3
  BB 20
   Insn 327: point = 4
   Insn 326: point = 4
   Insn 324: point = 5
   Insn 323: point = 7
   Insn 322: point = 9
  BB 2
   Insn 353: point = 10
   Insn 11: point = 10
   Insn 10: point = 10
   Insn 9: point = 11
   Insn 8: point = 12
   Insn 4: point = 12
   Insn 3: point = 12
   Insn 2: point = 12
  BB 19
   Insn 319: point = 12
  BB 17
   Insn 357: point = 12
   Insn 293: point = 12
   Insn 371: point = 13
	Hard reg 0 is preferable by r322 with profit 1
   Insn 292: point = 15
   Insn 291: point = 17
   Insn 290: point = 18
   Insn 289: point = 18
   Insn 288: point = 19
   Insn 287: point = 21
   Insn 286: point = 22
   Insn 285: point = 24
   Insn 284: point = 26
   Insn 283: point = 28
   Insn 282: point = 29
   Insn 281: point = 31
   Insn 280: point = 33
   Insn 279: point = 35
   Insn 278: point = 36
   Insn 277: point = 38
   Insn 276: point = 40
   Insn 275: point = 42
   Insn 274: point = 44
   Insn 273: point = 45
   Insn 272: point = 47
   Insn 271: point = 49
   Insn 270: point = 50
   Insn 269: point = 52
   Insn 268: point = 54
   Insn 267: point = 56
   Insn 266: point = 58
   Insn 265: point = 59
   Insn 264: point = 61
   Insn 263: point = 62
   Insn 262: point = 64
   Insn 261: point = 66
   Insn 260: point = 68
  BB 18
   Insn 314: point = 69
   Insn 373: point = 70
	Hard reg 0 is preferable by r323 with profit 1
   Insn 313: point = 72
   Insn 372: point = 73
	Hard reg 0 is preferable by r323 with profit 1
	Hard reg 22 is preferable by r323 with profit 1
   Insn 312: point = 75
   Insn 311: point = 76
   Insn 310: point = 78
   Insn 309: point = 80
   Insn 308: point = 81
   Insn 307: point = 83
   Insn 306: point = 85
   Insn 305: point = 87
   Insn 304: point = 89
   Insn 303: point = 90
   Insn 302: point = 92
   Insn 301: point = 93
   Insn 300: point = 95
   Insn 299: point = 97
   Insn 298: point = 99
  BB 16
   Insn 258: point = 100
   Insn 257: point = 100
   Insn 256: point = 101
   Insn 255: point = 103
   Insn 254: point = 105
   Insn 253: point = 106
   Insn 252: point = 108
  BB 15
   Insn 250: point = 109
   Insn 249: point = 109
   Insn 248: point = 110
   Insn 247: point = 112
   Insn 246: point = 113
   Insn 245: point = 114
   Insn 244: point = 115
  BB 14
   Insn 242: point = 116
   Insn 241: point = 116
   Insn 240: point = 117
   Insn 239: point = 119
   Insn 238: point = 120
   Insn 237: point = 121
   Insn 236: point = 122
   Insn 235: point = 124
   Insn 234: point = 126
   Insn 233: point = 127
   Insn 232: point = 129
   Insn 231: point = 131
   Insn 230: point = 132
   Insn 229: point = 134
   Insn 228: point = 136
   Insn 227: point = 138
   Insn 226: point = 140
   Insn 225: point = 141
   Insn 370: point = 142
	Hard reg 0 is preferable by r321 with profit 1
   Insn 224: point = 144
   Insn 369: point = 145
	Hard reg 0 is preferable by r321 with profit 1
	Hard reg 21 is preferable by r321 with profit 1
   Insn 223: point = 147
   Insn 222: point = 149
   Insn 221: point = 150
   Insn 220: point = 152
   Insn 219: point = 153
   Insn 218: point = 155
   Insn 217: point = 157
   Insn 216: point = 158
   Insn 215: point = 160
   Insn 214: point = 162
   Insn 213: point = 164
  BB 13
   Insn 208: point = 165
   Insn 207: point = 165
   Insn 206: point = 166
  BB 12
   Insn 205: point = 168
   Insn 204: point = 168
   Insn 203: point = 169
   Insn 202: point = 170
   Insn 201: point = 172
   Insn 200: point = 174
   Insn 199: point = 175
   Insn 198: point = 177
   Insn 197: point = 179
   Insn 196: point = 181
  BB 11
   Insn 191: point = 182
   Insn 190: point = 182
   Insn 189: point = 183
   Insn 188: point = 184
   Insn 187: point = 186
   Insn 186: point = 188
   Insn 185: point = 189
   Insn 184: point = 191
   Insn 183: point = 193
   Insn 182: point = 194
   Insn 181: point = 196
   Insn 180: point = 198
   Insn 179: point = 200
  BB 9
   Insn 355: point = 201
   Insn 155: point = 201
   Insn 366: point = 202
	Hard reg 0 is preferable by r319 with profit 1
   Insn 154: point = 204
   Insn 153: point = 206
   Insn 152: point = 207
   Insn 151: point = 207
   Insn 150: point = 208
   Insn 149: point = 210
   Insn 148: point = 211
   Insn 147: point = 213
   Insn 146: point = 215
   Insn 145: point = 217
   Insn 144: point = 218
   Insn 143: point = 220
   Insn 142: point = 222
   Insn 141: point = 224
   Insn 140: point = 225
   Insn 139: point = 227
   Insn 138: point = 229
   Insn 137: point = 231
   Insn 136: point = 232
   Insn 135: point = 234
   Insn 134: point = 236
   Insn 133: point = 237
   Insn 132: point = 239
   Insn 131: point = 241
   Insn 130: point = 243
   Insn 129: point = 244
   Insn 128: point = 246
   Insn 127: point = 247
   Insn 126: point = 249
   Insn 125: point = 251
  BB 10
   Insn 174: point = 252
   Insn 368: point = 253
	Hard reg 0 is preferable by r320 with profit 1
   Insn 173: point = 255
   Insn 367: point = 256
	Hard reg 0 is preferable by r320 with profit 1
	Hard reg 22 is preferable by r320 with profit 1
   Insn 172: point = 258
   Insn 171: point = 259
   Insn 170: point = 261
   Insn 169: point = 263
   Insn 168: point = 264
   Insn 167: point = 266
   Insn 166: point = 268
   Insn 165: point = 270
   Insn 164: point = 271
   Insn 163: point = 273
   Insn 162: point = 274
   Insn 161: point = 276
   Insn 160: point = 278
  BB 8
   Insn 123: point = 279
   Insn 122: point = 279
   Insn 121: point = 280
   Insn 120: point = 282
   Insn 119: point = 284
   Insn 118: point = 285
   Insn 117: point = 287
  BB 7
   Insn 115: point = 288
   Insn 114: point = 288
   Insn 113: point = 289
   Insn 112: point = 291
   Insn 111: point = 292
   Insn 110: point = 293
   Insn 109: point = 294
  BB 6
   Insn 107: point = 295
   Insn 106: point = 295
   Insn 105: point = 296
   Insn 104: point = 298
   Insn 103: point = 299
   Insn 102: point = 300
   Insn 101: point = 301
   Insn 100: point = 303
   Insn 99: point = 305
   Insn 98: point = 306
   Insn 97: point = 308
   Insn 96: point = 310
   Insn 95: point = 311
   Insn 94: point = 313
   Insn 93: point = 315
   Insn 92: point = 317
   Insn 91: point = 318
   Insn 365: point = 319
	Hard reg 0 is preferable by r318 with profit 1
   Insn 90: point = 321
   Insn 364: point = 322
	Hard reg 0 is preferable by r318 with profit 1
	Hard reg 21 is preferable by r318 with profit 1
   Insn 89: point = 324
   Insn 88: point = 326
   Insn 87: point = 327
   Insn 86: point = 329
   Insn 85: point = 330
   Insn 84: point = 332
   Insn 83: point = 334
   Insn 82: point = 335
   Insn 81: point = 337
   Insn 80: point = 339
   Insn 79: point = 341
  BB 5
   Insn 74: point = 342
   Insn 73: point = 342
   Insn 72: point = 343
  BB 4
   Insn 71: point = 345
   Insn 70: point = 345
   Insn 69: point = 346
   Insn 68: point = 347
   Insn 67: point = 349
   Insn 66: point = 351
   Insn 65: point = 352
   Insn 64: point = 354
   Insn 63: point = 356
  BB 3
   Insn 58: point = 357
   Insn 57: point = 357
   Insn 56: point = 358
   Insn 55: point = 359
   Insn 54: point = 361
   Insn 53: point = 363
   Insn 52: point = 364
   Insn 51: point = 366
   Insn 50: point = 368
   Insn 49: point = 369
   Insn 48: point = 371
   Insn 47: point = 373
   Insn 46: point = 374
   Insn 363: point = 375
	Hard reg 0 is preferable by r317 with profit 1
   Insn 45: point = 377
   Insn 362: point = 378
	Hard reg 0 is preferable by r317 with profit 1
	Hard reg 22 is preferable by r317 with profit 1
   Insn 44: point = 380
   Insn 43: point = 382
   Insn 42: point = 383
   Insn 41: point = 385
   Insn 40: point = 387
   Insn 39: point = 388
   Insn 38: point = 390
   Insn 37: point = 392
   Insn 36: point = 394
   Insn 35: point = 395
   Insn 34: point = 397
   Insn 33: point = 398
   Insn 32: point = 400
   Insn 31: point = 402
   Insn 30: point = 404
   Insn 29: point = 405
   Insn 361: point = 406
	Hard reg 0 is preferable by r316 with profit 1
   Insn 28: point = 408
   Insn 360: point = 409
	Hard reg 0 is preferable by r316 with profit 1
	Hard reg 22 is preferable by r316 with profit 1
   Insn 27: point = 411
   Insn 26: point = 413
   Insn 25: point = 414
   Insn 24: point = 416
   Insn 23: point = 418
   Insn 22: point = 419
   Insn 21: point = 421
   Insn 20: point = 423
   Insn 19: point = 424
   Insn 18: point = 426
   Insn 17: point = 427
   Insn 16: point = 429
   Insn 15: point = 431
 r83: [6..7]
 r84: [4..5]
 r85: [428..429]
 r86: [425..427]
 r87: [405..424]
 r88: [420..421]
 r89: [417..419]
 r90: [415..416]
 r91: [410..414]
 r92: [408..411]
 r93: [405..406]
 r94: [401..402]
 r95: [399..400]
 r96: [396..398]
 r97: [374..395]
 r98: [391..392]
 r99: [389..390]
 r100: [386..388]
 r101: [384..385]
 r102: [379..383]
 r103: [377..380]
 r104: [374..375]
 r105: [370..371]
 r106: [367..369]
 r107: [365..366]
 r108: [362..364]
 r109: [360..361]
 r110: [357..359]
 r111: [353..354]
 r112: [350..352]
 r113: [348..349]
 r114: [342..347]
 r115: [338..339]
 r116: [336..337]
 r117: [333..335]
 r118: [331..332]
 r119: [328..330]
 r120: [323..327]
 r121: [321..324]
 r122: [314..315]
 r123: [312..313]
 r124: [309..311]
 r125: [307..308]
 r126: [304..306]
 r127: [302..303]
 r128: [299..301]
 r129: [297..298]
 r130: [295..296]
 r131: [292..294]
 r132: [290..291]
 r133: [288..289]
 r134: [279..285]
 r135: [281..282]
 r136: [279..280]
 r137: [248..249]
 r138: [245..247]
 r139: [201..244]
 r140: [240..241]
 r141: [238..239]
 r142: [235..237]
 r143: [233..234]
 r144: [219..232]
 r145: [228..229]
 r146: [226..227]
 r147: [223..225]
 r148: [221..222]
 r149: [219..220]
 r150: [214..218]
 r151: [214..215]
 r152: [212..213]
 r153: [209..211]
 r154: [207..208]
 r155: [205..206]
 r156: [201..202]
 r157: [275..276]
 r158: [272..274]
 r159: [252..271]
 r160: [267..268]
 r161: [265..266]
 r162: [262..264]
 r163: [260..261]
 r164: [257..259]
 r165: [252..253]
 r166: [197..198]
 r167: [195..196]
 r168: [192..194]
 r169: [190..191]
 r170: [187..189]
 r171: [185..186]
 r172: [182..184]
 r173: [178..179]
 r174: [176..177]
 r175: [173..175]
 r176: [171..172]
 r177: [165..170]
 r178: [161..162]
 r179: [159..160]
 r180: [156..158]
 r181: [154..155]
 r182: [151..153]
 r183: [146..150]
 r184: [144..147]
 r185: [137..138]
 r186: [135..136]
 r187: [133..134]
 r188: [130..132]
 r189: [128..129]
 r190: [125..127]
 r191: [123..124]
 r192: [120..122]
 r193: [118..119]
 r194: [116..117]
 r195: [113..115]
 r196: [111..112]
 r197: [109..110]
 r198: [100..106]
 r199: [102..103]
 r200: [100..101]
 r201: [65..66]
 r202: [63..64]
 r203: [60..62]
 r204: [12..59]
 r205: [55..56]
 r206: [53..54]
 r207: [51..52]
 r208: [48..50]
 r209: [46..47]
 r210: [30..45]
 r211: [41..42]
 r212: [39..40]
 r213: [37..38]
 r214: [34..36]
 r215: [32..33]
 r216: [30..31]
 r217: [25..29]
 r218: [25..26]
 r219: [23..24]
 r220: [20..22]
 r221: [18..19]
 r222: [16..17]
 r223: [12..13]
 r224: [96..97]
 r225: [94..95]
 r226: [91..93]
 r227: [69..90]
 r228: [86..87]
 r229: [84..85]
 r230: [82..83]
 r231: [79..81]
 r232: [77..78]
 r233: [74..76]
 r234: [69..70]
 r235: [2..3]
 r236: [0..1]
 r237: [10..11]
 r238: [430..431]
 r239: [425..426]
 r240: [422..423]
 r241: [417..418]
 r242: [412..413]
 r243: [403..404]
 r244: [396..397]
 r245: [393..394]
 r246: [386..387]
 r247: [381..382]
 r248: [372..373]
 r249: [367..368]
 r250: [362..363]
 r251: [357..358]
 r252: [355..356]
 r253: [350..351]
 r254: [345..346]
 r255: [342..343]
 r256: [340..341]
 r257: [333..334]
 r258: [328..329]
 r259: [325..326]
 r260: [318..319]
 r261: [316..317]
 r262: [309..310]
 r263: [304..305]
 r264: [299..300]
 r265: [292..293]
 r266: [286..287]
 r267: [283..284]
 r268: [250..251]
 r269: [245..246]
 r270: [242..243]
 r271: [235..236]
 r272: [230..231]
 r273: [223..224]
 r274: [216..217]
 r275: [209..210]
 r276: [277..278]
 r277: [272..273]
 r278: [269..270]
 r279: [262..263]
 r280: [255..258]
 r281: [199..200]
 r282: [192..193]
 r283: [187..188]
 r284: [182..183]
 r285: [180..181]
 r286: [173..174]
 r287: [168..169]
 r288: [165..166]
 r289: [163..164]
 r290: [156..157]
 r291: [151..152]
 r292: [148..149]
 r293: [141..142]
 r294: [139..140]
 r295: [130..131]
 r296: [125..126]
 r297: [120..121]
 r298: [113..114]
 r299: [107..108]
 r300: [104..105]
 r301: [67..68]
 r302: [60..61]
 r303: [57..58]
 r304: [48..49]
 r305: [43..44]
 r306: [34..35]
 r307: [27..28]
 r308: [20..21]
 r309: [98..99]
 r310: [91..92]
 r311: [88..89]
 r312: [79..80]
 r313: [72..75]
 r314: [8..9]
 r316: [407..409]
 r317: [376..378]
 r318: [320..322]
 r319: [203..204]
 r320: [254..256]
 r321: [143..145]
 r322: [14..15]
 r323: [71..73]
Compressing live ranges: from 432 to 368 - 85%
Ranges after the compression:
 r83: [6..7]
 r84: [4..5]
 r85: [364..365]
 r86: [362..363]
 r87: [346..361]
 r88: [358..359]
 r89: [356..357]
 r90: [354..355]
 r91: [350..353]
 r92: [348..351]
 r93: [346..347]
 r94: [342..343]
 r95: [340..341]
 r96: [338..339]
 r97: [320..337]
 r98: [334..335]
 r99: [332..333]
 r100: [330..331]
 r101: [328..329]
 r102: [324..327]
 r103: [322..325]
 r104: [320..321]
 r105: [316..317]
 r106: [314..315]
 r107: [312..313]
 r108: [310..311]
 r109: [308..309]
 r110: [306..307]
 r111: [302..303]
 r112: [300..301]
 r113: [298..299]
 r114: [294..297]
 r115: [290..291]
 r116: [288..289]
 r117: [286..287]
 r118: [284..285]
 r119: [282..283]
 r120: [278..281]
 r121: [276..279]
 r122: [270..271]
 r123: [268..269]
 r124: [266..267]
 r125: [264..265]
 r126: [262..263]
 r127: [260..261]
 r128: [258..259]
 r129: [256..257]
 r130: [254..255]
 r131: [252..253]
 r132: [250..251]
 r133: [248..249]
 r134: [240..245]
 r135: [242..243]
 r136: [240..241]
 r137: [214..215]
 r138: [212..213]
 r139: [174..211]
 r140: [208..209]
 r141: [206..207]
 r142: [204..205]
 r143: [202..203]
 r144: [190..201]
 r145: [198..199]
 r146: [196..197]
 r147: [194..195]
 r148: [192..193]
 r149: [190..191]
 r150: [186..189]
 r151: [186..187]
 r152: [184..185]
 r153: [182..183]
 r154: [180..181]
 r155: [178..179]
 r156: [174..175]
 r157: [236..237]
 r158: [234..235]
 r159: [218..233]
 r160: [230..231]
 r161: [228..229]
 r162: [226..227]
 r163: [224..225]
 r164: [222..223]
 r165: [218..219]
 r166: [170..171]
 r167: [168..169]
 r168: [166..167]
 r169: [164..165]
 r170: [162..163]
 r171: [160..161]
 r172: [158..159]
 r173: [154..155]
 r174: [152..153]
 r175: [150..151]
 r176: [148..149]
 r177: [144..147]
 r178: [140..141]
 r179: [138..139]
 r180: [136..137]
 r181: [134..135]
 r182: [132..133]
 r183: [128..131]
 r184: [126..129]
 r185: [120..121]
 r186: [118..119]
 r187: [116..117]
 r188: [114..115]
 r189: [112..113]
 r190: [110..111]
 r191: [108..109]
 r192: [106..107]
 r193: [104..105]
 r194: [102..103]
 r195: [100..101]
 r196: [98..99]
 r197: [96..97]
 r198: [88..93]
 r199: [90..91]
 r200: [88..89]
 r201: [58..59]
 r202: [56..57]
 r203: [54..55]
 r204: [12..53]
 r205: [50..51]
 r206: [48..49]
 r207: [46..47]
 r208: [44..45]
 r209: [42..43]
 r210: [28..41]
 r211: [38..39]
 r212: [36..37]
 r213: [34..35]
 r214: [32..33]
 r215: [30..31]
 r216: [28..29]
 r217: [24..27]
 r218: [24..25]
 r219: [22..23]
 r220: [20..21]
 r221: [18..19]
 r222: [16..17]
 r223: [12..13]
 r224: [84..85]
 r225: [82..83]
 r226: [80..81]
 r227: [62..79]
 r228: [76..77]
 r229: [74..75]
 r230: [72..73]
 r231: [70..71]
 r232: [68..69]
 r233: [66..67]
 r234: [62..63]
 r235: [2..3]
 r236: [0..1]
 r237: [10..11]
 r238: [366..367]
 r239: [362..363]
 r240: [360..361]
 r241: [356..357]
 r242: [352..353]
 r243: [344..345]
 r244: [338..339]
 r245: [336..337]
 r246: [330..331]
 r247: [326..327]
 r248: [318..319]
 r249: [314..315]
 r250: [310..311]
 r251: [306..307]
 r252: [304..305]
 r253: [300..301]
 r254: [296..297]
 r255: [294..295]
 r256: [292..293]
 r257: [286..287]
 r258: [282..283]
 r259: [280..281]
 r260: [274..275]
 r261: [272..273]
 r262: [266..267]
 r263: [262..263]
 r264: [258..259]
 r265: [252..253]
 r266: [246..247]
 r267: [244..245]
 r268: [216..217]
 r269: [212..213]
 r270: [210..211]
 r271: [204..205]
 r272: [200..201]
 r273: [194..195]
 r274: [188..189]
 r275: [182..183]
 r276: [238..239]
 r277: [234..235]
 r278: [232..233]
 r279: [226..227]
 r280: [220..223]
 r281: [172..173]
 r282: [166..167]
 r283: [162..163]
 r284: [158..159]
 r285: [156..157]
 r286: [150..151]
 r287: [146..147]
 r288: [144..145]
 r289: [142..143]
 r290: [136..137]
 r291: [132..133]
 r292: [130..131]
 r293: [124..125]
 r294: [122..123]
 r295: [114..115]
 r296: [110..111]
 r297: [106..107]
 r298: [100..101]
 r299: [94..95]
 r300: [92..93]
 r301: [60..61]
 r302: [54..55]
 r303: [52..53]
 r304: [44..45]
 r305: [40..41]
 r306: [32..33]
 r307: [26..27]
 r308: [20..21]
 r309: [86..87]
 r310: [80..81]
 r311: [78..79]
 r312: [70..71]
 r313: [64..67]
 r314: [8..9]
 r316: [348..349]
 r317: [322..323]
 r318: [276..277]
 r319: [176..177]
 r320: [220..221]
 r321: [126..127]
 r322: [14..15]
 r323: [64..65]

********** Assignment #1: **********

	 Assigning to 316 (cl=SSE_REGS, orig=93, freq=3, tfirst=316, tfreq=3)...
	   Assign 22 to reload r316 (freq=3)
	 Assigning to 317 (cl=SSE_REGS, orig=104, freq=3, tfirst=317, tfreq=3)...
	   Assign 22 to reload r317 (freq=3)
	 Assigning to 318 (cl=SSE_REGS, orig=260, freq=3, tfirst=318, tfreq=3)...
	   Assign 21 to reload r318 (freq=3)
	 Assigning to 320 (cl=SSE_REGS, orig=165, freq=3, tfirst=320, tfreq=3)...
	   Assign 22 to reload r320 (freq=3)
	 Assigning to 321 (cl=SSE_REGS, orig=293, freq=3, tfirst=321, tfreq=3)...
	   Assign 21 to reload r321 (freq=3)
	 Assigning to 323 (cl=SSE_REGS, orig=234, freq=3, tfirst=323, tfreq=3)...
	   Assign 22 to reload r323 (freq=3)
	 Assigning to 319 (cl=SSE_REGS, orig=156, freq=2, tfirst=319, tfreq=2)...
	   Assign 23 to reload r319 (freq=2)
	 Assigning to 322 (cl=SSE_REGS, orig=223, freq=2, tfirst=322, tfreq=2)...
	   Assign 24 to reload r322 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 326
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 19
changing reg in insn 19
changing reg in insn 29
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 35
changing reg in insn 46
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 73
changing reg in insn 70
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 118
changing reg in insn 122
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 129
changing reg in insn 129
changing reg in insn 129
changing reg in insn 155
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 144
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 164
changing reg in insn 174
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 174
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 187
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 190
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 207
changing reg in insn 204
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 216
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 221
changing reg in insn 221
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 235
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 249
changing reg in insn 253
changing reg in insn 257
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 257
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 265
changing reg in insn 265
changing reg in insn 265
changing reg in insn 293
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 282
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 280
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 284
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 303
changing reg in insn 303
changing reg in insn 303
changing reg in insn 314
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 310
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 314
changing reg in insn 329
changing reg in insn 332
changing reg in insn 332
changing reg in insn 336
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 110
changing reg in insn 111
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 141
changing reg in insn 145
changing reg in insn 146
changing reg in insn 149
changing reg in insn 150
changing reg in insn 160
changing reg in insn 161
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 169
changing reg in insn 172
changing reg in insn 173
changing reg in insn 179
changing reg in insn 180
changing reg in insn 183
changing reg in insn 186
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 196
changing reg in insn 197
changing reg in insn 200
changing reg in insn 203
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 213
changing reg in insn 214
changing reg in insn 217
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 231
changing reg in insn 234
changing reg in insn 235
changing reg in insn 237
changing reg in insn 238
changing reg in insn 245
changing reg in insn 246
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 260
changing reg in insn 261
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 267
changing reg in insn 271
changing reg in insn 274
changing reg in insn 275
changing reg in insn 279
changing reg in insn 283
changing reg in insn 284
changing reg in insn 287
changing reg in insn 288
changing reg in insn 298
changing reg in insn 299
changing reg in insn 302
changing reg in insn 303
changing reg in insn 304
changing reg in insn 305
changing reg in insn 309
changing reg in insn 312
changing reg in insn 313
changing reg in insn 322
changing reg in insn 323
deleting insn with uid = 360.
deleting insn with uid = 362.
deleting insn with uid = 364.
deleting insn with uid = 151.
deleting insn with uid = 153.
deleting insn with uid = 367.
deleting insn with uid = 369.
deleting insn with uid = 289.
deleting insn with uid = 291.
deleting insn with uid = 372.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 290.


int scale(float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3]
;;  ref usage 	r0={140d,138u} r1={27d,25u,18e} r2={7d,4u,4e} r3={2d,2u} r4={3d,1u} r5={3d,1u} r6={1d,91u} r7={1d,23u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={99d,17u} r18={2d} r19={2d} r20={1d,1u,24e} r21={41d,42u} r22={35d,32u,6e} r23={4d,1u} r24={4d,1u} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 921{490d,379u,52e} in 290{288 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 237
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) ge2fitman_preproc.cpp:170 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])
        (reg:DI 4 si [ procpar_info ])) ge2fitman_preproc.cpp:170 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])
        (reg:DI 1 dx [ preprocess ])) ge2fitman_preproc.cpp:170 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:172 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 0 ax [237])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:173 129 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 half+0 S4 A32])
        (reg:SF 0 ax [237])) ge2fitman_preproc.cpp:173 129 {*movsf_internal}
     (nil))
(insn 11 10 353 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:175 90 {*movsi_internal}
     (nil))
(jump_insn 353 11 354 2 (set (pc)
        (label_ref 320)) ge2fitman_preproc.cpp:175 636 {jump}
     (nil)
 -> 320)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 354 353 325)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 238 239 240 241 242 243 244 245 246 247 248 249 250 251
(code_label 325 354 14 3 48 "" [1 uses])
(note 14 325 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 0 ax [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 0 ax [orig:85 D.25585 ] [85])
        (sign_extend:DI (reg:SI 0 ax [238]))) ge2fitman_preproc.cpp:177 142 {*extendsidi2_rex64}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 1 dx [orig:86 D.25585 ] [86])
                (ashift:DI (reg:DI 0 ax [orig:85 D.25585 ] [85])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:177 497 {*ashldi3_1}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg/f:DI 1 dx [orig:87 D.25586 ] [87])
                (plus:DI (reg:DI 1 dx [orig:86 D.25585 ] [86])
                    (reg/f:DI 0 ax [239])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:177 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.25585 ] [86]))
        (nil)))
(insn 20 19 21 3 (set (reg:SI 0 ax [240])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 0 ax [orig:88 D.25585 ] [88])
        (sign_extend:DI (reg:SI 0 ax [240]))) ge2fitman_preproc.cpp:177 142 {*extendsidi2_rex64}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:DI 2 cx [orig:89 D.25585 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.25585 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:177 497 {*ashldi3_1}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.25586 ] [90])
                (plus:DI (reg/f:DI 0 ax [241])
                    (reg:DI 2 cx [orig:89 D.25585 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:177 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:89 D.25585 ] [89]))
        (nil)))
(insn 25 24 26 3 (set (reg:SF 22 xmm1 [orig:91 D.25587 ] [91])
        (mem:SF (reg/f:DI 0 ax [orig:90 D.25586 ] [90]) [0 *_14+0 S4 A32])) ge2fitman_preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 26 25 27 3 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:SF 21 xmm0 [orig:92 D.25587 ] [92])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [242])
                (const_int 4 [0x4])) [0 preprocess_16(D)->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 28 27 361 3 (set (reg:SF 22 xmm1 [orig:93 D.25587 ] [93])
        (mult:SF (reg:SF 22 xmm1 [orig:93 D.25587 ] [93])
            (reg:SF 21 xmm0 [orig:92 D.25587 ] [92]))) ge2fitman_preproc.cpp:177 775 {*fop_sf_comm_sse}
     (nil))
(insn 361 28 29 3 (set (reg:SF 0 ax [orig:93 D.25587 ] [93])
        (reg:SF 22 xmm1 [orig:93 D.25587 ] [93])) ge2fitman_preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 29 361 30 3 (set (mem:SF (reg/f:DI 1 dx [orig:87 D.25586 ] [87]) [0 *_11+0 S4 A32])
        (reg:SF 0 ax [orig:93 D.25587 ] [93])) ge2fitman_preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:178 90 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:DI 0 ax [orig:94 D.25588 ] [94])
        (sign_extend:DI (reg:SI 0 ax [243]))) ge2fitman_preproc.cpp:178 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:DI 0 ax [orig:95 D.25588 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 D.25588 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 221 {*adddi_1}
     (nil))
(insn 33 32 34 3 (parallel [
            (set (reg:DI 1 dx [orig:96 D.25588 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.25588 ] [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 497 {*ashldi3_1}
     (nil))
(insn 34 33 35 3 (set (reg/f:DI 0 ax [244])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:178 89 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg/f:DI 1 dx [orig:97 D.25586 ] [97])
                (plus:DI (reg:DI 1 dx [orig:96 D.25588 ] [96])
                    (reg/f:DI 0 ax [244])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.25588 ] [96]))
        (nil)))
(insn 36 35 37 3 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:178 90 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:DI 0 ax [orig:98 D.25588 ] [98])
        (sign_extend:DI (reg:SI 0 ax [245]))) ge2fitman_preproc.cpp:178 142 {*extendsidi2_rex64}
     (nil))
(insn 38 37 39 3 (parallel [
            (set (reg:DI 0 ax [orig:99 D.25588 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 D.25588 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 221 {*adddi_1}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg:DI 2 cx [orig:100 D.25588 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 D.25588 ] [99])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 497 {*ashldi3_1}
     (nil))
(insn 40 39 41 3 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:178 89 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.25586 ] [101])
                (plus:DI (reg/f:DI 0 ax [246])
                    (reg:DI 2 cx [orig:100 D.25588 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:100 D.25588 ] [100]))
        (nil)))
(insn 42 41 43 3 (set (reg:SF 22 xmm1 [orig:102 D.25587 ] [102])
        (mem:SF (reg/f:DI 0 ax [orig:101 D.25586 ] [101]) [0 *_26+0 S4 A32])) ge2fitman_preproc.cpp:178 129 {*movsf_internal}
     (nil))
(insn 43 42 44 3 (set (reg/f:DI 0 ax [247])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:178 89 {*movdi_internal}
     (nil))
(insn 44 43 45 3 (set (reg:SF 21 xmm0 [orig:103 D.25587 ] [103])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [247])
                (const_int 4 [0x4])) [0 preprocess_16(D)->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:178 129 {*movsf_internal}
     (nil))
(insn 45 44 363 3 (set (reg:SF 22 xmm1 [orig:104 D.25587 ] [104])
        (mult:SF (reg:SF 22 xmm1 [orig:104 D.25587 ] [104])
            (reg:SF 21 xmm0 [orig:103 D.25587 ] [103]))) ge2fitman_preproc.cpp:178 775 {*fop_sf_comm_sse}
     (nil))
(insn 363 45 46 3 (set (reg:SF 0 ax [orig:104 D.25587 ] [104])
        (reg:SF 22 xmm1 [orig:104 D.25587 ] [104])) ge2fitman_preproc.cpp:178 129 {*movsf_internal}
     (nil))
(insn 46 363 47 3 (set (mem:SF (reg/f:DI 1 dx [orig:97 D.25586 ] [97]) [0 *_22+0 S4 A32])
        (reg:SF 0 ax [orig:104 D.25587 ] [104])) ge2fitman_preproc.cpp:178 129 {*movsf_internal}
     (nil))
(insn 47 46 48 3 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:180 90 {*movsi_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DI 0 ax [orig:105 D.25585 ] [105])
        (sign_extend:DI (reg:SI 0 ax [248]))) ge2fitman_preproc.cpp:180 142 {*extendsidi2_rex64}
     (nil))
(insn 49 48 50 3 (parallel [
            (set (reg:DI 1 dx [orig:106 D.25585 ] [106])
                (ashift:DI (reg:DI 0 ax [orig:105 D.25585 ] [105])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 497 {*ashldi3_1}
     (nil))
(insn 50 49 51 3 (set (reg/f:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:180 89 {*movdi_internal}
     (nil))
(insn 51 50 52 3 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.25586 ] [107])
                (plus:DI (reg/f:DI 0 ax [249])
                    (reg:DI 1 dx [orig:106 D.25585 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:106 D.25585 ] [106]))
        (nil)))
(insn 52 51 53 3 (set (reg:SF 22 xmm1 [orig:108 D.25587 ] [108])
        (mem:SF (reg/f:DI 0 ax [orig:107 D.25586 ] [107]) [0 *_32+0 S4 A32])) ge2fitman_preproc.cpp:180 129 {*movsf_internal}
     (nil))
(insn 53 52 54 3 (set (reg:V4SF 21 xmm0 [250])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:180 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 54 53 55 3 (parallel [
            (set (reg:SF 21 xmm0 [orig:109 D.25587 ] [109])
                (abs:SF (reg:SF 22 xmm1 [orig:108 D.25587 ] [108])))
            (use (reg:V4SF 21 xmm0 [250]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:108 D.25587 ] [108]))
        (nil)))
(insn 55 54 56 3 (set (reg:DF 21 xmm0 [orig:110 D.25589 ] [110])
        (float_extend:DF (reg:SF 21 xmm0 [orig:109 D.25587 ] [109]))) ge2fitman_preproc.cpp:180 152 {*extendsfdf2_sse}
     (nil))
(insn 56 55 57 3 (set (reg:DF 22 xmm1 [251])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:180 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 57 56 58 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [251])
            (reg:DF 21 xmm0 [orig:110 D.25589 ] [110]))) ge2fitman_preproc.cpp:180 56 {*cmpiudf_sse}
     (nil))
(jump_insn 58 57 62 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 177)
            (pc))) ge2fitman_preproc.cpp:180 596 {*jcc_1}
     (nil)
 -> 177)
;;  succ:       4 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113 114 252 253 254
(note 62 58 63 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 4 (set (reg:SI 0 ax [252])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:180 90 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DI 0 ax [orig:111 D.25585 ] [111])
        (sign_extend:DI (reg:SI 0 ax [252]))) ge2fitman_preproc.cpp:180 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg:DI 1 dx [orig:112 D.25585 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:111 D.25585 ] [111])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:180 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.25586 ] [113])
                (plus:DI (reg/f:DI 0 ax [253])
                    (reg:DI 1 dx [orig:112 D.25585 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.25585 ] [112]))
        (nil)))
(insn 68 67 69 4 (set (reg:SF 21 xmm0 [orig:114 D.25587 ] [114])
        (mem:SF (reg/f:DI 0 ax [orig:113 D.25586 ] [113]) [0 *_38+0 S4 A32])) ge2fitman_preproc.cpp:180 129 {*movsf_internal}
     (nil))
(insn 69 68 70 4 (set (reg:SF 22 xmm1 [254])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:180 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 70 69 71 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:114 D.25587 ] [114])
            (reg:SF 22 xmm1 [254]))) ge2fitman_preproc.cpp:180 55 {*cmpiusf_sse}
     (nil))
(jump_insn 71 70 341 4 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 350)
            (pc))) ge2fitman_preproc.cpp:180 596 {*jcc_1}
     (nil)
 -> 350)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114
;; lr  def 	 17 [flags] 255
(note 341 71 72 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 72 341 73 5 (set (reg:SF 22 xmm1 [255])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:180 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 73 72 74 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:114 D.25587 ] [114])
            (reg:SF 22 xmm1 [255]))) ge2fitman_preproc.cpp:180 55 {*cmpiusf_sse}
     (nil))
(jump_insn 74 73 350 5 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 177)
            (pc))) ge2fitman_preproc.cpp:180 596 {*jcc_1}
     (nil)
 -> 177)
;;  succ:       6 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 256 257 258 259 260 261 262 263 264
(code_label 350 74 78 6 51 "" [1 uses])
(note 78 350 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 6 (set (reg:SI 0 ax [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:181 90 {*movsi_internal}
     (nil))
(insn 80 79 81 6 (set (reg:DI 0 ax [orig:115 D.25588 ] [115])
        (sign_extend:DI (reg:SI 0 ax [256]))) ge2fitman_preproc.cpp:181 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 6 (parallel [
            (set (reg:DI 0 ax [orig:116 D.25588 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 D.25588 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:181 221 {*adddi_1}
     (nil))
(insn 82 81 83 6 (parallel [
            (set (reg:DI 1 dx [orig:117 D.25588 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 D.25588 ] [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:181 497 {*ashldi3_1}
     (nil))
(insn 83 82 84 6 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:181 89 {*movdi_internal}
     (nil))
(insn 84 83 85 6 (parallel [
            (set (reg/f:DI 0 ax [orig:118 D.25586 ] [118])
                (plus:DI (reg/f:DI 0 ax [257])
                    (reg:DI 1 dx [orig:117 D.25588 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:181 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:117 D.25588 ] [117]))
        (nil)))
(insn 85 84 86 6 (set (reg:SF 22 xmm1 [orig:119 D.25587 ] [119])
        (mem:SF (reg/f:DI 0 ax [orig:118 D.25586 ] [118]) [0 *_43+0 S4 A32])) ge2fitman_preproc.cpp:181 129 {*movsf_internal}
     (nil))
(insn 86 85 87 6 (set (reg:V4SF 21 xmm0 [258])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:181 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 87 86 88 6 (parallel [
            (set (reg:SF 21 xmm0 [orig:120 D.25587 ] [120])
                (abs:SF (reg:SF 22 xmm1 [orig:119 D.25587 ] [119])))
            (use (reg:V4SF 21 xmm0 [258]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:181 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:119 D.25587 ] [119]))
        (nil)))
(insn 88 87 89 6 (set (reg/f:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:181 89 {*movdi_internal}
     (nil))
(insn 89 88 90 6 (set (reg:SF 22 xmm1 [orig:121 D.25587 ] [121])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [259])
                (const_int 4 [0x4])) [0 preprocess_16(D)->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:181 129 {*movsf_internal}
     (nil))
(insn 90 89 365 6 (set (reg:SF 21 xmm0 [260])
        (mult:SF (reg:SF 21 xmm0 [260])
            (reg:SF 22 xmm1 [orig:121 D.25587 ] [121]))) ge2fitman_preproc.cpp:181 775 {*fop_sf_comm_sse}
     (nil))
(insn 365 90 91 6 (set (reg:SF 0 ax [260])
        (reg:SF 21 xmm0 [260])) ge2fitman_preproc.cpp:181 129 {*movsf_internal}
     (nil))
(insn 91 365 92 6 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])
        (reg:SF 0 ax [260])) ge2fitman_preproc.cpp:181 129 {*movsf_internal}
     (nil))
(insn 92 91 93 6 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:183 90 {*movsi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:DI 0 ax [orig:122 D.25585 ] [122])
        (sign_extend:DI (reg:SI 0 ax [261]))) ge2fitman_preproc.cpp:183 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg:DI 0 ax [orig:123 D.25585 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:122 D.25585 ] [122])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 497 {*ashldi3_1}
     (nil))
(insn 95 94 96 6 (parallel [
            (set (reg:DI 1 dx [orig:124 D.25588 ] [124])
                (plus:DI (reg:DI 0 ax [orig:123 D.25585 ] [123])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 221 {*adddi_1}
     (nil))
(insn 96 95 97 6 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:183 89 {*movdi_internal}
     (nil))
(insn 97 96 98 6 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.25586 ] [125])
                (plus:DI (reg/f:DI 0 ax [262])
                    (reg:DI 1 dx [orig:124 D.25588 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.25588 ] [124]))
        (nil)))
(insn 98 97 99 6 (set (reg:SF 22 xmm1 [orig:126 D.25587 ] [126])
        (mem:SF (reg/f:DI 0 ax [orig:125 D.25586 ] [125]) [0 *_51+0 S4 A32])) ge2fitman_preproc.cpp:183 129 {*movsf_internal}
     (nil))
(insn 99 98 100 6 (set (reg:V4SF 21 xmm0 [263])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:183 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 100 99 101 6 (parallel [
            (set (reg:SF 21 xmm0 [orig:127 D.25587 ] [127])
                (abs:SF (reg:SF 22 xmm1 [orig:126 D.25587 ] [126])))
            (use (reg:V4SF 21 xmm0 [263]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:126 D.25587 ] [126]))
        (nil)))
(insn 101 100 102 6 (set (reg:DF 21 xmm0 [orig:128 D.25589 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.25587 ] [127]))) ge2fitman_preproc.cpp:183 152 {*extendsfdf2_sse}
     (nil))
(insn 102 101 103 6 (set (reg:DF 22 xmm1 [264])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:183 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 103 102 104 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [264])
            (reg:DF 21 xmm0 [orig:128 D.25589 ] [128]))) ge2fitman_preproc.cpp:183 56 {*cmpiudf_sse}
     (nil))
(insn 104 103 105 6 (set (reg:QI 0 ax [orig:129 D.25590 ] [129])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) ge2fitman_preproc.cpp:183 592 {*setcc_qi}
     (nil))
(insn 105 104 106 6 (parallel [
            (set (reg:QI 0 ax [orig:130 D.25590 ] [130])
                (xor:QI (reg:QI 0 ax [orig:129 D.25590 ] [129])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 395 {*xorqi_1}
     (nil))
(insn 106 105 107 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:130 D.25590 ] [130])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:183 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 107 106 108 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) ge2fitman_preproc.cpp:183 596 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 132 133 265
(note 108 107 109 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 7 (set (reg:DF 21 xmm0 [orig:131 D.25589 ] [131])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) ge2fitman_preproc.cpp:183 152 {*extendsfdf2_sse}
     (nil))
(insn 110 109 111 7 (set (reg:DF 22 xmm1 [265])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:183 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 111 110 112 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [265])
            (reg:DF 21 xmm0 [orig:131 D.25589 ] [131]))) ge2fitman_preproc.cpp:183 56 {*cmpiudf_sse}
     (nil))
(insn 112 111 113 7 (set (reg:QI 0 ax [orig:132 D.25590 ] [132])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) ge2fitman_preproc.cpp:183 592 {*setcc_qi}
     (nil))
(insn 113 112 114 7 (parallel [
            (set (reg:QI 0 ax [orig:133 D.25590 ] [133])
                (xor:QI (reg:QI 0 ax [orig:132 D.25590 ] [132])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 395 {*xorqi_1}
     (nil))
(insn 114 113 115 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:133 D.25590 ] [133])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:183 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 115 114 116 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) ge2fitman_preproc.cpp:183 596 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134 135 136 266 267
(note 116 115 117 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 8 (set (reg:SI 0 ax [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:183 90 {*movsi_internal}
     (nil))
(insn 118 117 119 8 (parallel [
            (set (reg:SI 1 dx [orig:134 D.25584 ] [134])
                (plus:SI (reg:SI 0 ax [266])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 119 118 120 8 (set (reg/f:DI 0 ax [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:183 89 {*movdi_internal}
     (nil))
(insn 120 119 121 8 (set (reg:SI 0 ax [orig:135 D.25584 ] [135])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [267])
                (const_int 324 [0x144])) [0 procpar_info_5(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:183 90 {*movsi_internal}
     (nil))
(insn 121 120 122 8 (parallel [
            (set (reg:SI 0 ax [orig:136 D.25584 ] [136])
                (ashift:SI (reg:SI 0 ax [orig:135 D.25584 ] [135])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 496 {*ashlsi3_1}
     (nil))
(insn 122 121 123 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:134 D.25584 ] [134])
            (reg:SI 0 ax [orig:136 D.25584 ] [136]))) ge2fitman_preproc.cpp:183 7 {*cmpsi_1}
     (nil))
(jump_insn 123 122 124 8 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) ge2fitman_preproc.cpp:183 596 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 268 269 270 271 272 273 274 275
(note 124 123 125 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 9 (set (reg:SI 0 ax [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:185 90 {*movsi_internal}
     (nil))
(insn 126 125 127 9 (set (reg:DI 0 ax [orig:137 D.25585 ] [137])
        (sign_extend:DI (reg:SI 0 ax [268]))) ge2fitman_preproc.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 127 126 128 9 (parallel [
            (set (reg:DI 1 dx [orig:138 D.25585 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:137 D.25585 ] [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 497 {*ashldi3_1}
     (nil))
(insn 128 127 129 9 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:185 89 {*movdi_internal}
     (nil))
(insn 129 128 130 9 (parallel [
            (set (reg/f:DI 3 bx [orig:139 D.25586 ] [139])
                (plus:DI (reg:DI 1 dx [orig:138 D.25585 ] [138])
                    (reg/f:DI 0 ax [269])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:138 D.25585 ] [138]))
        (nil)))
(insn 130 129 131 9 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:185 90 {*movsi_internal}
     (nil))
(insn 131 130 132 9 (set (reg:DI 0 ax [orig:140 D.25585 ] [140])
        (sign_extend:DI (reg:SI 0 ax [270]))) ge2fitman_preproc.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 132 131 133 9 (parallel [
            (set (reg:DI 0 ax [orig:141 D.25585 ] [141])
                (ashift:DI (reg:DI 0 ax [orig:140 D.25585 ] [140])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 497 {*ashldi3_1}
     (nil))
(insn 133 132 134 9 (parallel [
            (set (reg:DI 1 dx [orig:142 D.25588 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 D.25585 ] [141])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 221 {*adddi_1}
     (nil))
(insn 134 133 135 9 (set (reg/f:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:185 89 {*movdi_internal}
     (nil))
(insn 135 134 136 9 (parallel [
            (set (reg/f:DI 0 ax [orig:143 D.25586 ] [143])
                (plus:DI (reg/f:DI 0 ax [271])
                    (reg:DI 1 dx [orig:142 D.25588 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:142 D.25588 ] [142]))
        (nil)))
(insn 136 135 137 9 (set (reg:SF 22 xmm1 [orig:144 D.25587 ] [144])
        (mem:SF (reg/f:DI 0 ax [orig:143 D.25586 ] [143]) [0 *_69+0 S4 A32])) ge2fitman_preproc.cpp:185 129 {*movsf_internal}
     (nil))
(insn 137 136 138 9 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:185 90 {*movsi_internal}
     (nil))
(insn 138 137 139 9 (set (reg:DI 0 ax [orig:145 D.25585 ] [145])
        (sign_extend:DI (reg:SI 0 ax [272]))) ge2fitman_preproc.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 139 138 140 9 (parallel [
            (set (reg:DI 0 ax [orig:146 D.25585 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.25585 ] [145])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 497 {*ashldi3_1}
     (nil))
(insn 140 139 141 9 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25588 ] [147])
                (plus:DI (reg:DI 0 ax [orig:146 D.25585 ] [146])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 221 {*adddi_1}
     (nil))
(insn 141 140 142 9 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:185 89 {*movdi_internal}
     (nil))
(insn 142 141 143 9 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.25586 ] [148])
                (plus:DI (reg/f:DI 0 ax [273])
                    (reg:DI 1 dx [orig:147 D.25588 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.25588 ] [147]))
        (nil)))
(insn 143 142 144 9 (set (reg:SF 21 xmm0 [orig:149 D.25587 ] [149])
        (mem:SF (reg/f:DI 0 ax [orig:148 D.25586 ] [148]) [0 *_74+0 S4 A32])) ge2fitman_preproc.cpp:185 129 {*movsf_internal}
     (nil))
(insn 144 143 145 9 (set (reg:SF 22 xmm1 [orig:150 D.25587 ] [150])
        (mult:SF (reg:SF 22 xmm1 [orig:144 D.25587 ] [144])
            (reg:SF 21 xmm0 [orig:149 D.25587 ] [149]))) ge2fitman_preproc.cpp:185 775 {*fop_sf_comm_sse}
     (nil))
(insn 145 144 146 9 (set (reg:SF 21 xmm0 [274])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])) ge2fitman_preproc.cpp:186 129 {*movsf_internal}
     (nil))
(insn 146 145 147 9 (set (reg:SF 21 xmm0 [orig:151 D.25587 ] [151])
        (mult:SF (reg:SF 21 xmm0 [274])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) ge2fitman_preproc.cpp:186 775 {*fop_sf_comm_sse}
     (nil))
(insn 147 146 148 9 (set (reg:SF 21 xmm0 [orig:152 D.25587 ] [152])
        (plus:SF (reg:SF 21 xmm0 [orig:151 D.25587 ] [151])
            (reg:SF 22 xmm1 [orig:150 D.25587 ] [150]))) ge2fitman_preproc.cpp:185 775 {*fop_sf_comm_sse}
     (nil))
(insn 148 147 149 9 (set (reg:DF 21 xmm0 [orig:153 D.25589 ] [153])
        (float_extend:DF (reg:SF 21 xmm0 [orig:152 D.25587 ] [152]))) ge2fitman_preproc.cpp:186 152 {*extendsfdf2_sse}
     (nil))
(insn 149 148 150 9 (set (reg:DF 22 xmm1 [275])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:186 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 150 149 152 9 (set (reg:DF 21 xmm0 [orig:154 D.25589 ] [154])
        (mult:DF (reg:DF 21 xmm0 [orig:153 D.25589 ] [153])
            (reg:DF 22 xmm1 [275]))) ge2fitman_preproc.cpp:186 776 {*fop_df_comm_sse}
     (nil))
(call_insn 152 150 154 9 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:186 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 154 152 366 9 (set (reg:SF 23 xmm2 [orig:156 D.25587 ] [156])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:155 D.25589 ] [155]))) ge2fitman_preproc.cpp:186 157 {*truncdfsf_fast_sse}
     (nil))
(insn 366 154 155 9 (set (reg:SF 0 ax [orig:156 D.25587 ] [156])
        (reg:SF 23 xmm2 [orig:156 D.25587 ] [156])) ge2fitman_preproc.cpp:186 129 {*movsf_internal}
     (nil))
(insn 155 366 355 9 (set (mem:SF (reg/f:DI 3 bx [orig:139 D.25586 ] [139]) [0 *_65+0 S4 A32])
        (reg:SF 0 ax [orig:156 D.25587 ] [156])) ge2fitman_preproc.cpp:186 129 {*movsf_internal}
     (nil))
(jump_insn 355 155 356 9 (set (pc)
        (label_ref 177)) ge2fitman_preproc.cpp:186 636 {jump}
     (nil)
 -> 177)
;;  succ:       11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 356 355 158)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 160 161 162 163 164 165 276 277 278 279 280
(code_label 158 356 159 10 41 "" [3 uses])
(note 159 158 160 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 10 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:188 90 {*movsi_internal}
     (nil))
(insn 161 160 162 10 (set (reg:DI 0 ax [orig:157 D.25585 ] [157])
        (sign_extend:DI (reg:SI 0 ax [276]))) ge2fitman_preproc.cpp:188 142 {*extendsidi2_rex64}
     (nil))
(insn 162 161 163 10 (parallel [
            (set (reg:DI 1 dx [orig:158 D.25585 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.25585 ] [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 497 {*ashldi3_1}
     (nil))
(insn 163 162 164 10 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:188 89 {*movdi_internal}
     (nil))
(insn 164 163 165 10 (parallel [
            (set (reg/f:DI 1 dx [orig:159 D.25586 ] [159])
                (plus:DI (reg:DI 1 dx [orig:158 D.25585 ] [158])
                    (reg/f:DI 0 ax [277])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.25585 ] [158]))
        (nil)))
(insn 165 164 166 10 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:188 90 {*movsi_internal}
     (nil))
(insn 166 165 167 10 (set (reg:DI 0 ax [orig:160 D.25585 ] [160])
        (sign_extend:DI (reg:SI 0 ax [278]))) ge2fitman_preproc.cpp:188 142 {*extendsidi2_rex64}
     (nil))
(insn 167 166 168 10 (parallel [
            (set (reg:DI 0 ax [orig:161 D.25585 ] [161])
                (ashift:DI (reg:DI 0 ax [orig:160 D.25585 ] [160])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 497 {*ashldi3_1}
     (nil))
(insn 168 167 169 10 (parallel [
            (set (reg:DI 2 cx [orig:162 D.25588 ] [162])
                (plus:DI (reg:DI 0 ax [orig:161 D.25585 ] [161])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 221 {*adddi_1}
     (nil))
(insn 169 168 170 10 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:188 89 {*movdi_internal}
     (nil))
(insn 170 169 171 10 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.25586 ] [163])
                (plus:DI (reg/f:DI 0 ax [279])
                    (reg:DI 2 cx [orig:162 D.25588 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:162 D.25588 ] [162]))
        (nil)))
(insn 171 170 172 10 (set (reg:SF 22 xmm1 [orig:164 D.25587 ] [164])
        (mem:SF (reg/f:DI 0 ax [orig:163 D.25586 ] [163]) [0 *_89+0 S4 A32])) ge2fitman_preproc.cpp:188 129 {*movsf_internal}
     (nil))
(insn 172 171 173 10 (set (reg:SF 21 xmm0 [280])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:188 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 173 172 368 10 (set (reg:SF 22 xmm1 [orig:165 D.25587 ] [165])
        (mult:SF (reg:SF 22 xmm1 [orig:165 D.25587 ] [165])
            (reg:SF 21 xmm0 [280]))) ge2fitman_preproc.cpp:188 775 {*fop_sf_comm_sse}
     (nil))
(insn 368 173 174 10 (set (reg:SF 0 ax [orig:165 D.25587 ] [165])
        (reg:SF 22 xmm1 [orig:165 D.25587 ] [165])) ge2fitman_preproc.cpp:188 129 {*movsf_internal}
     (nil))
(insn 174 368 177 10 (set (mem:SF (reg/f:DI 1 dx [orig:159 D.25586 ] [159]) [0 *_85+0 S4 A32])
        (reg:SF 0 ax [orig:165 D.25587 ] [165])) ge2fitman_preproc.cpp:188 129 {*movsf_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              3
;;              5
;;              9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 167 168 169 170 171 172 281 282 283 284
(code_label 177 174 178 11 38 "" [3 uses])
(note 178 177 179 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 179 178 180 11 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:192 90 {*movsi_internal}
     (nil))
(insn 180 179 181 11 (set (reg:DI 0 ax [orig:166 D.25588 ] [166])
        (sign_extend:DI (reg:SI 0 ax [281]))) ge2fitman_preproc.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 181 180 182 11 (parallel [
            (set (reg:DI 0 ax [orig:167 D.25588 ] [167])
                (plus:DI (reg:DI 0 ax [orig:166 D.25588 ] [166])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 221 {*adddi_1}
     (nil))
(insn 182 181 183 11 (parallel [
            (set (reg:DI 1 dx [orig:168 D.25588 ] [168])
                (ashift:DI (reg:DI 0 ax [orig:167 D.25588 ] [167])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 497 {*ashldi3_1}
     (nil))
(insn 183 182 184 11 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:192 89 {*movdi_internal}
     (nil))
(insn 184 183 185 11 (parallel [
            (set (reg/f:DI 0 ax [orig:169 D.25586 ] [169])
                (plus:DI (reg/f:DI 0 ax [282])
                    (reg:DI 1 dx [orig:168 D.25588 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:168 D.25588 ] [168]))
        (nil)))
(insn 185 184 186 11 (set (reg:SF 22 xmm1 [orig:170 D.25587 ] [170])
        (mem:SF (reg/f:DI 0 ax [orig:169 D.25586 ] [169]) [0 *_95+0 S4 A32])) ge2fitman_preproc.cpp:192 129 {*movsf_internal}
     (nil))
(insn 186 185 187 11 (set (reg:V4SF 21 xmm0 [283])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:192 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 187 186 188 11 (parallel [
            (set (reg:SF 21 xmm0 [orig:171 D.25587 ] [171])
                (abs:SF (reg:SF 22 xmm1 [orig:170 D.25587 ] [170])))
            (use (reg:V4SF 21 xmm0 [283]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:170 D.25587 ] [170]))
        (nil)))
(insn 188 187 189 11 (set (reg:DF 21 xmm0 [orig:172 D.25589 ] [172])
        (float_extend:DF (reg:SF 21 xmm0 [orig:171 D.25587 ] [171]))) ge2fitman_preproc.cpp:192 152 {*extendsfdf2_sse}
     (nil))
(insn 189 188 190 11 (set (reg:DF 22 xmm1 [284])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:192 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 190 189 191 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [284])
            (reg:DF 21 xmm0 [orig:172 D.25589 ] [172]))) ge2fitman_preproc.cpp:192 56 {*cmpiudf_sse}
     (nil))
(jump_insn 191 190 195 11 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 317)
            (pc))) ge2fitman_preproc.cpp:192 596 {*jcc_1}
     (nil)
 -> 317)
;;  succ:       12 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 173 174 175 176 177 285 286 287
(note 195 191 196 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 12 (set (reg:SI 0 ax [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:192 90 {*movsi_internal}
     (nil))
(insn 197 196 198 12 (set (reg:DI 0 ax [orig:173 D.25588 ] [173])
        (sign_extend:DI (reg:SI 0 ax [285]))) ge2fitman_preproc.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 12 (parallel [
            (set (reg:DI 0 ax [orig:174 D.25588 ] [174])
                (plus:DI (reg:DI 0 ax [orig:173 D.25588 ] [173])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 221 {*adddi_1}
     (nil))
(insn 199 198 200 12 (parallel [
            (set (reg:DI 1 dx [orig:175 D.25588 ] [175])
                (ashift:DI (reg:DI 0 ax [orig:174 D.25588 ] [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 497 {*ashldi3_1}
     (nil))
(insn 200 199 201 12 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:192 89 {*movdi_internal}
     (nil))
(insn 201 200 202 12 (parallel [
            (set (reg/f:DI 0 ax [orig:176 D.25586 ] [176])
                (plus:DI (reg/f:DI 0 ax [286])
                    (reg:DI 1 dx [orig:175 D.25588 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.25588 ] [175]))
        (nil)))
(insn 202 201 203 12 (set (reg:SF 21 xmm0 [orig:177 D.25587 ] [177])
        (mem:SF (reg/f:DI 0 ax [orig:176 D.25586 ] [176]) [0 *_102+0 S4 A32])) ge2fitman_preproc.cpp:192 129 {*movsf_internal}
     (nil))
(insn 203 202 204 12 (set (reg:SF 22 xmm1 [287])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:192 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 204 203 205 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:177 D.25587 ] [177])
            (reg:SF 22 xmm1 [287]))) ge2fitman_preproc.cpp:192 55 {*cmpiusf_sse}
     (nil))
(jump_insn 205 204 346 12 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 352)
            (pc))) ge2fitman_preproc.cpp:192 596 {*jcc_1}
     (nil)
 -> 352)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 177

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 177
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 177
;; lr  def 	 17 [flags] 288
(note 346 205 206 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 206 346 207 13 (set (reg:SF 22 xmm1 [288])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:192 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 207 206 208 13 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:177 D.25587 ] [177])
            (reg:SF 22 xmm1 [288]))) ge2fitman_preproc.cpp:192 55 {*cmpiusf_sse}
     (nil))
(jump_insn 208 207 352 13 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 317)
            (pc))) ge2fitman_preproc.cpp:192 596 {*jcc_1}
     (nil)
 -> 317)
;;  succ:       14 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 289 290 291 292 293 294 295 296 297
(code_label 352 208 212 14 53 "" [1 uses])
(note 212 352 213 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 213 212 214 14 (set (reg:SI 0 ax [289])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:193 90 {*movsi_internal}
     (nil))
(insn 214 213 215 14 (set (reg:DI 0 ax [orig:178 D.25588 ] [178])
        (sign_extend:DI (reg:SI 0 ax [289]))) ge2fitman_preproc.cpp:193 142 {*extendsidi2_rex64}
     (nil))
(insn 215 214 216 14 (parallel [
            (set (reg:DI 0 ax [orig:179 D.25588 ] [179])
                (plus:DI (reg:DI 0 ax [orig:178 D.25588 ] [178])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:193 221 {*adddi_1}
     (nil))
(insn 216 215 217 14 (parallel [
            (set (reg:DI 1 dx [orig:180 D.25588 ] [180])
                (ashift:DI (reg:DI 0 ax [orig:179 D.25588 ] [179])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:193 497 {*ashldi3_1}
     (nil))
(insn 217 216 218 14 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:193 89 {*movdi_internal}
     (nil))
(insn 218 217 219 14 (parallel [
            (set (reg/f:DI 0 ax [orig:181 D.25586 ] [181])
                (plus:DI (reg/f:DI 0 ax [290])
                    (reg:DI 1 dx [orig:180 D.25588 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:193 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:180 D.25588 ] [180]))
        (nil)))
(insn 219 218 220 14 (set (reg:SF 22 xmm1 [orig:182 D.25587 ] [182])
        (mem:SF (reg/f:DI 0 ax [orig:181 D.25586 ] [181]) [0 *_107+0 S4 A32])) ge2fitman_preproc.cpp:193 129 {*movsf_internal}
     (nil))
(insn 220 219 221 14 (set (reg:V4SF 21 xmm0 [291])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:193 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 221 220 222 14 (parallel [
            (set (reg:SF 21 xmm0 [orig:183 D.25587 ] [183])
                (abs:SF (reg:SF 22 xmm1 [orig:182 D.25587 ] [182])))
            (use (reg:V4SF 21 xmm0 [291]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:193 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:182 D.25587 ] [182]))
        (nil)))
(insn 222 221 223 14 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:193 89 {*movdi_internal}
     (nil))
(insn 223 222 224 14 (set (reg:SF 22 xmm1 [orig:184 D.25587 ] [184])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [292])
                (const_int 4 [0x4])) [0 preprocess_16(D)->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:193 129 {*movsf_internal}
     (nil))
(insn 224 223 370 14 (set (reg:SF 21 xmm0 [293])
        (mult:SF (reg:SF 21 xmm0 [293])
            (reg:SF 22 xmm1 [orig:184 D.25587 ] [184]))) ge2fitman_preproc.cpp:193 775 {*fop_sf_comm_sse}
     (nil))
(insn 370 224 225 14 (set (reg:SF 0 ax [293])
        (reg:SF 21 xmm0 [293])) ge2fitman_preproc.cpp:193 129 {*movsf_internal}
     (nil))
(insn 225 370 226 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])
        (reg:SF 0 ax [293])) ge2fitman_preproc.cpp:193 129 {*movsf_internal}
     (nil))
(insn 226 225 227 14 (set (reg:SI 0 ax [294])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:195 90 {*movsi_internal}
     (nil))
(insn 227 226 228 14 (set (reg:DI 0 ax [orig:185 D.25588 ] [185])
        (sign_extend:DI (reg:SI 0 ax [294]))) ge2fitman_preproc.cpp:195 142 {*extendsidi2_rex64}
     (nil))
(insn 228 227 229 14 (parallel [
            (set (reg:DI 0 ax [orig:186 D.25588 ] [186])
                (plus:DI (reg:DI 0 ax [orig:185 D.25588 ] [185])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 221 {*adddi_1}
     (nil))
(insn 229 228 230 14 (parallel [
            (set (reg:DI 0 ax [orig:187 D.25588 ] [187])
                (ashift:DI (reg:DI 0 ax [orig:186 D.25588 ] [186])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 497 {*ashldi3_1}
     (nil))
(insn 230 229 231 14 (parallel [
            (set (reg:DI 1 dx [orig:188 D.25588 ] [188])
                (plus:DI (reg:DI 0 ax [orig:187 D.25588 ] [187])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 221 {*adddi_1}
     (nil))
(insn 231 230 232 14 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:195 89 {*movdi_internal}
     (nil))
(insn 232 231 233 14 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.25586 ] [189])
                (plus:DI (reg/f:DI 0 ax [295])
                    (reg:DI 1 dx [orig:188 D.25588 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:188 D.25588 ] [188]))
        (nil)))
(insn 233 232 234 14 (set (reg:SF 22 xmm1 [orig:190 D.25587 ] [190])
        (mem:SF (reg/f:DI 0 ax [orig:189 D.25586 ] [189]) [0 *_116+0 S4 A32])) ge2fitman_preproc.cpp:195 129 {*movsf_internal}
     (nil))
(insn 234 233 235 14 (set (reg:V4SF 21 xmm0 [296])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:195 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 235 234 236 14 (parallel [
            (set (reg:SF 21 xmm0 [orig:191 D.25587 ] [191])
                (abs:SF (reg:SF 22 xmm1 [orig:190 D.25587 ] [190])))
            (use (reg:V4SF 21 xmm0 [296]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:190 D.25587 ] [190]))
        (nil)))
(insn 236 235 237 14 (set (reg:DF 21 xmm0 [orig:192 D.25589 ] [192])
        (float_extend:DF (reg:SF 21 xmm0 [orig:191 D.25587 ] [191]))) ge2fitman_preproc.cpp:195 152 {*extendsfdf2_sse}
     (nil))
(insn 237 236 238 14 (set (reg:DF 22 xmm1 [297])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:195 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 238 237 239 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [297])
            (reg:DF 21 xmm0 [orig:192 D.25589 ] [192]))) ge2fitman_preproc.cpp:195 56 {*cmpiudf_sse}
     (nil))
(insn 239 238 240 14 (set (reg:QI 0 ax [orig:193 D.25590 ] [193])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) ge2fitman_preproc.cpp:195 592 {*setcc_qi}
     (nil))
(insn 240 239 241 14 (parallel [
            (set (reg:QI 0 ax [orig:194 D.25590 ] [194])
                (xor:QI (reg:QI 0 ax [orig:193 D.25590 ] [193])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 395 {*xorqi_1}
     (nil))
(insn 241 240 242 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:194 D.25590 ] [194])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:195 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 242 241 243 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) ge2fitman_preproc.cpp:195 596 {*jcc_1}
     (nil)
 -> 296)
;;  succ:       15 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 195 196 197 298
(note 243 242 244 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 244 243 245 15 (set (reg:DF 21 xmm0 [orig:195 D.25589 ] [195])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) ge2fitman_preproc.cpp:195 152 {*extendsfdf2_sse}
     (nil))
(insn 245 244 246 15 (set (reg:DF 22 xmm1 [298])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:195 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 246 245 247 15 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [298])
            (reg:DF 21 xmm0 [orig:195 D.25589 ] [195]))) ge2fitman_preproc.cpp:195 56 {*cmpiudf_sse}
     (nil))
(insn 247 246 248 15 (set (reg:QI 0 ax [orig:196 D.25590 ] [196])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) ge2fitman_preproc.cpp:195 592 {*setcc_qi}
     (nil))
(insn 248 247 249 15 (parallel [
            (set (reg:QI 0 ax [orig:197 D.25590 ] [197])
                (xor:QI (reg:QI 0 ax [orig:196 D.25590 ] [196])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 395 {*xorqi_1}
     (nil))
(insn 249 248 250 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:197 D.25590 ] [197])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:195 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 250 249 251 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) ge2fitman_preproc.cpp:195 596 {*jcc_1}
     (nil)
 -> 296)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 198 199 200 299 300
(note 251 250 252 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 252 251 253 16 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:195 90 {*movsi_internal}
     (nil))
(insn 253 252 254 16 (parallel [
            (set (reg:SI 1 dx [orig:198 D.25584 ] [198])
                (plus:SI (reg:SI 0 ax [299])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 254 253 255 16 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:195 89 {*movdi_internal}
     (nil))
(insn 255 254 256 16 (set (reg:SI 0 ax [orig:199 D.25584 ] [199])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [300])
                (const_int 324 [0x144])) [0 procpar_info_5(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:195 90 {*movsi_internal}
     (nil))
(insn 256 255 257 16 (parallel [
            (set (reg:SI 0 ax [orig:200 D.25584 ] [200])
                (ashift:SI (reg:SI 0 ax [orig:199 D.25584 ] [199])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 496 {*ashlsi3_1}
     (nil))
(insn 257 256 258 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:198 D.25584 ] [198])
            (reg:SI 0 ax [orig:200 D.25584 ] [200]))) ge2fitman_preproc.cpp:195 7 {*cmpsi_1}
     (nil))
(jump_insn 258 257 259 16 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) ge2fitman_preproc.cpp:195 596 {*jcc_1}
     (nil)
 -> 296)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 301 302 303 304 305 306 307 308
(note 259 258 260 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 17 (set (reg:SI 0 ax [301])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:197 90 {*movsi_internal}
     (nil))
(insn 261 260 262 17 (set (reg:DI 0 ax [orig:201 D.25588 ] [201])
        (sign_extend:DI (reg:SI 0 ax [301]))) ge2fitman_preproc.cpp:197 142 {*extendsidi2_rex64}
     (nil))
(insn 262 261 263 17 (parallel [
            (set (reg:DI 0 ax [orig:202 D.25588 ] [202])
                (plus:DI (reg:DI 0 ax [orig:201 D.25588 ] [201])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 221 {*adddi_1}
     (nil))
(insn 263 262 264 17 (parallel [
            (set (reg:DI 1 dx [orig:203 D.25588 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.25588 ] [202])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 497 {*ashldi3_1}
     (nil))
(insn 264 263 265 17 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:197 89 {*movdi_internal}
     (nil))
(insn 265 264 266 17 (parallel [
            (set (reg/f:DI 3 bx [orig:204 D.25586 ] [204])
                (plus:DI (reg:DI 1 dx [orig:203 D.25588 ] [203])
                    (reg/f:DI 0 ax [302])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:203 D.25588 ] [203]))
        (nil)))
(insn 266 265 267 17 (set (reg:SI 0 ax [303])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:197 90 {*movsi_internal}
     (nil))
(insn 267 266 268 17 (set (reg:DI 0 ax [orig:205 D.25588 ] [205])
        (sign_extend:DI (reg:SI 0 ax [303]))) ge2fitman_preproc.cpp:197 142 {*extendsidi2_rex64}
     (nil))
(insn 268 267 269 17 (parallel [
            (set (reg:DI 0 ax [orig:206 D.25588 ] [206])
                (plus:DI (reg:DI 0 ax [orig:205 D.25588 ] [205])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 221 {*adddi_1}
     (nil))
(insn 269 268 270 17 (parallel [
            (set (reg:DI 0 ax [orig:207 D.25588 ] [207])
                (ashift:DI (reg:DI 0 ax [orig:206 D.25588 ] [206])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 497 {*ashldi3_1}
     (nil))
(insn 270 269 271 17 (parallel [
            (set (reg:DI 1 dx [orig:208 D.25588 ] [208])
                (plus:DI (reg:DI 0 ax [orig:207 D.25588 ] [207])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 221 {*adddi_1}
     (nil))
(insn 271 270 272 17 (set (reg/f:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:197 89 {*movdi_internal}
     (nil))
(insn 272 271 273 17 (parallel [
            (set (reg/f:DI 0 ax [orig:209 D.25586 ] [209])
                (plus:DI (reg/f:DI 0 ax [304])
                    (reg:DI 1 dx [orig:208 D.25588 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:208 D.25588 ] [208]))
        (nil)))
(insn 273 272 274 17 (set (reg:SF 22 xmm1 [orig:210 D.25587 ] [210])
        (mem:SF (reg/f:DI 0 ax [orig:209 D.25586 ] [209]) [0 *_136+0 S4 A32])) ge2fitman_preproc.cpp:197 129 {*movsf_internal}
     (nil))
(insn 274 273 275 17 (set (reg:SI 0 ax [305])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:197 90 {*movsi_internal}
     (nil))
(insn 275 274 276 17 (set (reg:DI 0 ax [orig:211 D.25588 ] [211])
        (sign_extend:DI (reg:SI 0 ax [305]))) ge2fitman_preproc.cpp:197 142 {*extendsidi2_rex64}
     (nil))
(insn 276 275 277 17 (parallel [
            (set (reg:DI 0 ax [orig:212 D.25588 ] [212])
                (plus:DI (reg:DI 0 ax [orig:211 D.25588 ] [211])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 221 {*adddi_1}
     (nil))
(insn 277 276 278 17 (parallel [
            (set (reg:DI 0 ax [orig:213 D.25588 ] [213])
                (ashift:DI (reg:DI 0 ax [orig:212 D.25588 ] [212])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 497 {*ashldi3_1}
     (nil))
(insn 278 277 279 17 (parallel [
            (set (reg:DI 1 dx [orig:214 D.25588 ] [214])
                (plus:DI (reg:DI 0 ax [orig:213 D.25588 ] [213])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 221 {*adddi_1}
     (nil))
(insn 279 278 280 17 (set (reg/f:DI 0 ax [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:197 89 {*movdi_internal}
     (nil))
(insn 280 279 281 17 (parallel [
            (set (reg/f:DI 0 ax [orig:215 D.25586 ] [215])
                (plus:DI (reg/f:DI 0 ax [306])
                    (reg:DI 1 dx [orig:214 D.25588 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:214 D.25588 ] [214]))
        (nil)))
(insn 281 280 282 17 (set (reg:SF 21 xmm0 [orig:216 D.25587 ] [216])
        (mem:SF (reg/f:DI 0 ax [orig:215 D.25586 ] [215]) [0 *_142+0 S4 A32])) ge2fitman_preproc.cpp:197 129 {*movsf_internal}
     (nil))
(insn 282 281 283 17 (set (reg:SF 22 xmm1 [orig:217 D.25587 ] [217])
        (mult:SF (reg:SF 22 xmm1 [orig:210 D.25587 ] [210])
            (reg:SF 21 xmm0 [orig:216 D.25587 ] [216]))) ge2fitman_preproc.cpp:197 775 {*fop_sf_comm_sse}
     (nil))
(insn 283 282 284 17 (set (reg:SF 21 xmm0 [307])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])) ge2fitman_preproc.cpp:198 129 {*movsf_internal}
     (nil))
(insn 284 283 285 17 (set (reg:SF 21 xmm0 [orig:218 D.25587 ] [218])
        (mult:SF (reg:SF 21 xmm0 [307])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) ge2fitman_preproc.cpp:198 775 {*fop_sf_comm_sse}
     (nil))
(insn 285 284 286 17 (set (reg:SF 21 xmm0 [orig:219 D.25587 ] [219])
        (plus:SF (reg:SF 21 xmm0 [orig:218 D.25587 ] [218])
            (reg:SF 22 xmm1 [orig:217 D.25587 ] [217]))) ge2fitman_preproc.cpp:197 775 {*fop_sf_comm_sse}
     (nil))
(insn 286 285 287 17 (set (reg:DF 21 xmm0 [orig:220 D.25589 ] [220])
        (float_extend:DF (reg:SF 21 xmm0 [orig:219 D.25587 ] [219]))) ge2fitman_preproc.cpp:198 152 {*extendsfdf2_sse}
     (nil))
(insn 287 286 288 17 (set (reg:DF 22 xmm1 [308])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:198 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 288 287 290 17 (set (reg:DF 21 xmm0 [orig:221 D.25589 ] [221])
        (mult:DF (reg:DF 21 xmm0 [orig:220 D.25589 ] [220])
            (reg:DF 22 xmm1 [308]))) ge2fitman_preproc.cpp:198 776 {*fop_df_comm_sse}
     (nil))
(call_insn 290 288 292 17 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:198 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 292 290 371 17 (set (reg:SF 24 xmm3 [orig:223 D.25587 ] [223])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:222 D.25589 ] [222]))) ge2fitman_preproc.cpp:198 157 {*truncdfsf_fast_sse}
     (nil))
(insn 371 292 293 17 (set (reg:SF 0 ax [orig:223 D.25587 ] [223])
        (reg:SF 24 xmm3 [orig:223 D.25587 ] [223])) ge2fitman_preproc.cpp:198 129 {*movsf_internal}
     (nil))
(insn 293 371 357 17 (set (mem:SF (reg/f:DI 3 bx [orig:204 D.25586 ] [204]) [0 *_131+0 S4 A32])
        (reg:SF 0 ax [orig:223 D.25587 ] [223])) ge2fitman_preproc.cpp:198 129 {*movsf_internal}
     (nil))
(jump_insn 357 293 358 17 (set (pc)
        (label_ref 317)) ge2fitman_preproc.cpp:198 636 {jump}
     (nil)
 -> 317)
;;  succ:       19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 358 357 296)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15
;;              16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 225 226 227 228 229 230 231 232 233 234 309 310 311 312 313
(code_label 296 358 297 18 46 "" [3 uses])
(note 297 296 298 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 18 (set (reg:SI 0 ax [309])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:200 90 {*movsi_internal}
     (nil))
(insn 299 298 300 18 (set (reg:DI 0 ax [orig:224 D.25588 ] [224])
        (sign_extend:DI (reg:SI 0 ax [309]))) ge2fitman_preproc.cpp:200 142 {*extendsidi2_rex64}
     (nil))
(insn 300 299 301 18 (parallel [
            (set (reg:DI 0 ax [orig:225 D.25588 ] [225])
                (plus:DI (reg:DI 0 ax [orig:224 D.25588 ] [224])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 221 {*adddi_1}
     (nil))
(insn 301 300 302 18 (parallel [
            (set (reg:DI 1 dx [orig:226 D.25588 ] [226])
                (ashift:DI (reg:DI 0 ax [orig:225 D.25588 ] [225])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 497 {*ashldi3_1}
     (nil))
(insn 302 301 303 18 (set (reg/f:DI 0 ax [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:200 89 {*movdi_internal}
     (nil))
(insn 303 302 304 18 (parallel [
            (set (reg/f:DI 1 dx [orig:227 D.25586 ] [227])
                (plus:DI (reg:DI 1 dx [orig:226 D.25588 ] [226])
                    (reg/f:DI 0 ax [310])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:226 D.25588 ] [226]))
        (nil)))
(insn 304 303 305 18 (set (reg:SI 0 ax [311])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:200 90 {*movsi_internal}
     (nil))
(insn 305 304 306 18 (set (reg:DI 0 ax [orig:228 D.25588 ] [228])
        (sign_extend:DI (reg:SI 0 ax [311]))) ge2fitman_preproc.cpp:200 142 {*extendsidi2_rex64}
     (nil))
(insn 306 305 307 18 (parallel [
            (set (reg:DI 0 ax [orig:229 D.25588 ] [229])
                (plus:DI (reg:DI 0 ax [orig:228 D.25588 ] [228])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 221 {*adddi_1}
     (nil))
(insn 307 306 308 18 (parallel [
            (set (reg:DI 0 ax [orig:230 D.25588 ] [230])
                (ashift:DI (reg:DI 0 ax [orig:229 D.25588 ] [229])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 497 {*ashldi3_1}
     (nil))
(insn 308 307 309 18 (parallel [
            (set (reg:DI 2 cx [orig:231 D.25588 ] [231])
                (plus:DI (reg:DI 0 ax [orig:230 D.25588 ] [230])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 221 {*adddi_1}
     (nil))
(insn 309 308 310 18 (set (reg/f:DI 0 ax [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:200 89 {*movdi_internal}
     (nil))
(insn 310 309 311 18 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.25586 ] [232])
                (plus:DI (reg/f:DI 0 ax [312])
                    (reg:DI 2 cx [orig:231 D.25588 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:231 D.25588 ] [231]))
        (nil)))
(insn 311 310 312 18 (set (reg:SF 22 xmm1 [orig:233 D.25587 ] [233])
        (mem:SF (reg/f:DI 0 ax [orig:232 D.25586 ] [232]) [0 *_159+0 S4 A32])) ge2fitman_preproc.cpp:200 129 {*movsf_internal}
     (nil))
(insn 312 311 313 18 (set (reg:SF 21 xmm0 [313])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:200 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 313 312 373 18 (set (reg:SF 22 xmm1 [orig:234 D.25587 ] [234])
        (mult:SF (reg:SF 22 xmm1 [orig:234 D.25587 ] [234])
            (reg:SF 21 xmm0 [313]))) ge2fitman_preproc.cpp:200 775 {*fop_sf_comm_sse}
     (nil))
(insn 373 313 314 18 (set (reg:SF 0 ax [orig:234 D.25587 ] [234])
        (reg:SF 22 xmm1 [orig:234 D.25587 ] [234])) ge2fitman_preproc.cpp:200 129 {*movsf_internal}
     (nil))
(insn 314 373 317 18 (set (mem:SF (reg/f:DI 1 dx [orig:227 D.25586 ] [227]) [0 *_154+0 S4 A32])
        (reg:SF 0 ax [orig:234 D.25587 ] [234])) ge2fitman_preproc.cpp:200 129 {*movsf_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              11
;;              13
;;              17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 317 314 318 19 43 "" [3 uses])
(note 318 317 319 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 319 318 320 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:175 220 {*addsi_1}
     (nil))
;;  succ:       20 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 314
(code_label 320 319 321 20 37 "" [1 uses])
(note 321 320 322 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 322 321 323 20 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:175 89 {*movdi_internal}
     (nil))
(insn 323 322 324 20 (set (reg:SI 0 ax [orig:83 D.25584 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [314])
                (const_int 324 [0x144])) [0 procpar_info_5(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:175 90 {*movsi_internal}
     (nil))
(insn 324 323 326 20 (parallel [
            (set (reg:SI 0 ax [orig:84 D.25584 ] [84])
                (ashift:SI (reg:SI 0 ax [orig:83 D.25584 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:175 496 {*ashlsi3_1}
     (nil))
(insn 326 324 327 20 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:84 D.25584 ] [84])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:175 7 {*cmpsi_1}
     (nil))
(jump_insn 327 326 328 20 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 325)
            (pc))) ge2fitman_preproc.cpp:175 596 {*jcc_1}
     (nil)
 -> 325)
;;  succ:       3
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 235 236
(note 328 327 329 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 332 21 (set (reg:SI 0 ax [orig:235 D.25584 ] [235])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:205 90 {*movsi_internal}
     (nil))
(insn 332 329 336 21 (set (reg:SI 0 ax [orig:236 <retval> ] [236])
        (reg:SI 0 ax [orig:235 D.25584 ] [235])) ge2fitman_preproc.cpp:205 90 {*movsi_internal}
     (nil))
(insn 336 332 337 21 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:236 <retval> ] [236])) ge2fitman_preproc.cpp:206 90 {*movsi_internal}
     (nil))
(insn 337 336 359 21 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:206 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 359 337 0 NOTE_INSN_DELETED)

;; Function int baseline_correct(float*, Procpar_info*) (_Z16baseline_correctPfP12Procpar_info, funcdef_no=1022, decl_uid=24029, symbol_order=229)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 37:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 39:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=160 from oldreg=137, assigning class SSE_REGS to r160
   39: r160:SF=r160:SF+r92:SF
      REG_DEAD r138:SF
      REG_DEAD r92:SF
    Inserting insn reload before:
  132: r160:SF=r138:SF
    Inserting insn reload after:
  133: r137:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 133:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=161 from oldreg=141, assigning class SSE_REGS to r161
   49: r161:SF=r161:SF+r97:SF
      REG_DEAD r142:SF
      REG_DEAD r97:SF
    Inserting insn reload before:
  134: r161:SF=r142:SF
    Inserting insn reload after:
  135: r141:SF=r161:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 135:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 51:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) x  (1) m {*floatsidf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 62:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 65:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 66:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=162 from oldreg=145, assigning class SSE_REGS to r162
   66: r162:SF=r162:SF/r100:SF
      REG_DEAD r146:SF
      REG_DEAD r100:SF
    Inserting insn reload before:
  136: r162:SF=r146:SF
    Inserting insn reload after:
  137: r145:SF=r162:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 137:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) ?m  (1) rF {*movsf_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) x  (1) m {*floatsidf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 69:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 72:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 73:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=163 from oldreg=148, assigning class SSE_REGS to r163
   73: r163:SF=r163:SF/r103:SF
      REG_DEAD r149:SF
      REG_DEAD r103:SF
    Inserting insn reload before:
  138: r163:SF=r149:SF
    Inserting insn reload after:
  139: r148:SF=r163:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 139:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 90:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=164 from oldreg=113, assigning class SSE_REGS to r164
   90: r164:SF=r164:SF-[frame:DI-0xc]
      REG_DEAD r112:SF
    Inserting insn reload before:
  140: r164:SF=r112:SF
    Inserting insn reload after:
  141: r113:SF=r164:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 141:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 105:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=165 from oldreg=123, assigning class SSE_REGS to r165
  105: r165:SF=r165:SF-[frame:DI-0x8]
      REG_DEAD r122:SF
    Inserting insn reload before:
  142: r165:SF=r122:SF
    Inserting insn reload after:
  143: r123:SF=r165:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 143:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 107:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 125: point = 0
   Insn 124: point = 0
   Insn 120: point = 1
   Insn 117: point = 3
  BB 7
   Insn 115: point = 4
   Insn 114: point = 4
   Insn 112: point = 5
   Insn 111: point = 7
   Insn 110: point = 9
  BB 5
   Insn 129: point = 10
   Insn 75: point = 10
   Insn 74: point = 10
   Insn 139: point = 11
	Hard reg 0 is preferable by r163 with profit 1
   Insn 73: point = 13
   Insn 138: point = 14
	Hard reg 0 is preferable by r163 with profit 1
	Hard reg 22 is preferable by r163 with profit 1
   Insn 72: point = 16
   Insn 71: point = 17
   Insn 70: point = 19
   Insn 69: point = 21
   Insn 68: point = 22
   Insn 67: point = 23
   Insn 137: point = 24
	Hard reg 0 is preferable by r162 with profit 1
   Insn 66: point = 26
   Insn 136: point = 27
	Hard reg 0 is preferable by r162 with profit 1
	Hard reg 22 is preferable by r162 with profit 1
   Insn 65: point = 29
   Insn 64: point = 30
   Insn 63: point = 32
   Insn 62: point = 34
   Insn 61: point = 35
  BB 4
   Insn 59: point = 36
   Insn 58: point = 36
   Insn 56: point = 37
   Insn 55: point = 39
   Insn 54: point = 41
  BB 2
   Insn 127: point = 42
   Insn 28: point = 42
   Insn 27: point = 43
   Insn 24: point = 45
   Insn 23: point = 47
   Insn 22: point = 49
   Insn 21: point = 50
   Insn 20: point = 51
   Insn 19: point = 53
   Insn 18: point = 54
   Insn 17: point = 54
   Insn 16: point = 55
   Insn 15: point = 57
   Insn 14: point = 59
   Insn 13: point = 61
   Insn 12: point = 62
   Insn 11: point = 63
   Insn 10: point = 64
   Insn 9: point = 65
   Insn 8: point = 66
   Insn 7: point = 66
   Insn 3: point = 66
   Insn 2: point = 66
  BB 3
   Insn 51: point = 66
   Insn 50: point = 66
   Insn 135: point = 67
	Hard reg 0 is preferable by r161 with profit 1
   Insn 49: point = 69
   Insn 134: point = 70
	Hard reg 0 is preferable by r161 with profit 1
	Hard reg 22 is preferable by r161 with profit 1
   Insn 48: point = 72
   Insn 47: point = 73
   Insn 46: point = 75
   Insn 45: point = 77
   Insn 44: point = 78
   Insn 43: point = 80
   Insn 42: point = 82
   Insn 41: point = 84
   Insn 40: point = 85
   Insn 133: point = 86
	Hard reg 0 is preferable by r160 with profit 1
   Insn 39: point = 88
   Insn 132: point = 89
	Hard reg 0 is preferable by r160 with profit 1
	Hard reg 22 is preferable by r160 with profit 1
   Insn 38: point = 91
   Insn 37: point = 92
   Insn 36: point = 94
   Insn 35: point = 96
   Insn 34: point = 97
   Insn 33: point = 99
   Insn 32: point = 101
  BB 6
   Insn 107: point = 102
   Insn 106: point = 102
   Insn 143: point = 103
	Hard reg 0 is preferable by r165 with profit 1
   Insn 105: point = 105
   Insn 142: point = 105
	Hard reg 0 is preferable by r165 with profit 1
	Hard reg 21 is preferable by r165 with profit 1
   Insn 104: point = 107
   Insn 103: point = 109
   Insn 102: point = 111
   Insn 101: point = 112
   Insn 100: point = 114
   Insn 99: point = 116
   Insn 98: point = 118
   Insn 97: point = 119
   Insn 96: point = 121
   Insn 95: point = 122
   Insn 94: point = 124
   Insn 93: point = 126
   Insn 92: point = 128
   Insn 91: point = 129
   Insn 141: point = 130
	Hard reg 0 is preferable by r164 with profit 1
   Insn 90: point = 132
   Insn 140: point = 132
	Hard reg 0 is preferable by r164 with profit 1
	Hard reg 21 is preferable by r164 with profit 1
   Insn 89: point = 134
   Insn 88: point = 136
   Insn 87: point = 138
   Insn 86: point = 139
   Insn 85: point = 141
   Insn 84: point = 143
   Insn 83: point = 144
   Insn 82: point = 146
   Insn 81: point = 147
   Insn 80: point = 149
   Insn 79: point = 151
 r83: [58..59]
 r84: [56..57]
 r85: [46..47]
 r86: [44..45]
 r87: [38..39]
 r88: [36..37]
 r89: [98..99]
 r90: [95..97]
 r91: [93..94]
 r92: [88..92]
 r93: [81..82]
 r94: [79..80]
 r95: [76..78]
 r96: [74..75]
 r97: [69..73]
 r98: [33..35]
 r99: [31..32]
 r100: [26..30]
 r101: [20..22]
 r102: [18..19]
 r103: [13..17]
 r104: [6..7]
 r105: [4..5]
 r106: [148..149]
 r107: [145..147]
 r108: [129..144]
 r109: [140..141]
 r110: [137..139]
 r111: [135..136]
 r112: [133..134]
 r113: [129..130]
 r114: [125..126]
 r115: [123..124]
 r116: [120..122]
 r117: [102..119]
 r118: [115..116]
 r119: [113..114]
 r120: [110..112]
 r121: [108..109]
 r122: [106..107]
 r123: [102..103]
 r124: [2..3]
 r125: [0..1]
 r126: [64..65]
 r127: [62..63]
 r128: [60..61]
 r129: [52..55]
 r130: [53..54]
 r131: [50..51]
 r132: [48..49]
 r134: [42..43]
 r135: [100..101]
 r136: [95..96]
 r137: [85..86]
 r138: [90..91]
 r139: [83..84]
 r140: [76..77]
 r141: [66..67]
 r142: [71..72]
 r143: [40..41]
 r144: [33..34]
 r145: [23..24]
 r146: [28..29]
 r147: [20..21]
 r148: [10..11]
 r149: [15..16]
 r150: [150..151]
 r151: [145..146]
 r152: [142..143]
 r153: [137..138]
 r154: [127..128]
 r155: [120..121]
 r156: [117..118]
 r157: [110..111]
 r158: [8..9]
 r160: [87..89]
 r161: [68..70]
 r162: [25..27]
 r163: [12..14]
 r164: [131..132]
 r165: [104..105]
Compressing live ranges: from 152 to 132 - 86%
Ranges after the compression:
 r83: [50..51]
 r84: [48..49]
 r85: [40..41]
 r86: [38..39]
 r87: [32..33]
 r88: [30..31]
 r89: [84..85]
 r90: [82..83]
 r91: [80..81]
 r92: [76..79]
 r93: [70..71]
 r94: [68..69]
 r95: [66..67]
 r96: [64..65]
 r97: [60..63]
 r98: [28..29]
 r99: [26..27]
 r100: [22..25]
 r101: [18..19]
 r102: [16..17]
 r103: [12..15]
 r104: [6..7]
 r105: [4..5]
 r106: [128..129]
 r107: [126..127]
 r108: [112..125]
 r109: [122..123]
 r110: [120..121]
 r111: [118..119]
 r112: [116..117]
 r113: [112..113]
 r114: [108..109]
 r115: [106..107]
 r116: [104..105]
 r117: [88..103]
 r118: [100..101]
 r119: [98..99]
 r120: [96..97]
 r121: [94..95]
 r122: [92..93]
 r123: [88..89]
 r124: [2..3]
 r125: [0..1]
 r126: [56..57]
 r127: [54..55]
 r128: [52..53]
 r129: [46..47]
 r130: [46..47]
 r131: [44..45]
 r132: [42..43]
 r134: [36..37]
 r135: [86..87]
 r136: [82..83]
 r137: [74..75]
 r138: [78..79]
 r139: [72..73]
 r140: [66..67]
 r141: [58..59]
 r142: [62..63]
 r143: [34..35]
 r144: [28..29]
 r145: [20..21]
 r146: [24..25]
 r147: [18..19]
 r148: [10..11]
 r149: [14..15]
 r150: [130..131]
 r151: [126..127]
 r152: [124..125]
 r153: [120..121]
 r154: [110..111]
 r155: [104..105]
 r156: [102..103]
 r157: [96..97]
 r158: [8..9]
 r160: [76..77]
 r161: [60..61]
 r162: [22..23]
 r163: [12..13]
 r164: [114..115]
 r165: [90..91]

********** Assignment #1: **********

	 Assigning to 160 (cl=SSE_REGS, orig=137, freq=3, tfirst=160, tfreq=3)...
	   Assign 22 to reload r160 (freq=3)
	 Assigning to 161 (cl=SSE_REGS, orig=141, freq=3, tfirst=161, tfreq=3)...
	   Assign 22 to reload r161 (freq=3)
	 Assigning to 162 (cl=SSE_REGS, orig=145, freq=3, tfirst=162, tfreq=3)...
	   Assign 22 to reload r162 (freq=3)
	 Assigning to 163 (cl=SSE_REGS, orig=148, freq=3, tfirst=163, tfreq=3)...
	   Assign 22 to reload r163 (freq=3)
	 Assigning to 164 (cl=SSE_REGS, orig=113, freq=3, tfirst=164, tfreq=3)...
	   Assign 21 to reload r164 (freq=3)
	 Assigning to 165 (cl=SSE_REGS, orig=123, freq=3, tfirst=165, tfreq=3)...
	   Assign 21 to reload r165 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 27
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 83
changing reg in insn 91
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 97
changing reg in insn 106
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 117
changing reg in insn 120
changing reg in insn 120
changing reg in insn 124
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 16
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 40
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 50
changing reg in insn 48
changing reg in insn 54
changing reg in insn 55
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 74
changing reg in insn 72
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 110
changing reg in insn 111
deleting insn with uid = 132.
deleting insn with uid = 134.
deleting insn with uid = 136.
deleting insn with uid = 138.
deleting insn with uid = 140.
deleting insn with uid = 142.
starting the processing of deferred insns
ending the processing of deferred insns


int baseline_correct(float*, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={53d,55u} r1={8d,7u,4e} r2={3d,2u,2e} r4={1d,1u} r5={1d,1u} r6={1d,52u} r7={1d,8u} r17={27d,3u} r20={1d,1u,6e} r21={13d,12u} r22={11d,10u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 292{128d,152u,12e} in 108{108 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 126 127 128 129 130 131 132 134
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) ge2fitman_preproc.cpp:210 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])
        (reg:DI 4 si [ procpar_info ])) ge2fitman_preproc.cpp:210 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:212 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:212 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 0 ax [126])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:213 129 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 0 ax [126])) ge2fitman_preproc.cpp:213 129 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SF 0 ax [127])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:214 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 0 ax [127])) ge2fitman_preproc.cpp:214 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:216 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:83 D.25591 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 324 [0x144])) [0 procpar_info_9(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:216 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 0 ax [orig:84 D.25591 ] [84])
                (ashift:SI (reg:SI 0 ax [orig:83 D.25591 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:216 496 {*ashlsi3_1}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [129])
        (reg:SI 0 ax [orig:84 D.25591 ] [84])) ge2fitman_preproc.cpp:216 90 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 1 dx [130])
                (plus:SI (reg:SI 0 ax [129])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:216 220 {*addsi_1}
     (nil))
(insn 18 17 19 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [129])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:216 3 {*cmpsi_ccno_1}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 ax [129])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [130])
            (reg:SI 0 ax [129]))) ge2fitman_preproc.cpp:216 931 {*movsicc_noc}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [131])
                (ashiftrt:SI (reg:SI 0 ax [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:216 530 {*ashrsi3_1}
     (nil))
(insn 21 20 22 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])
        (reg:SI 0 ax [131])) ge2fitman_preproc.cpp:216 90 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:218 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 0 ax [orig:85 D.25591 ] [85])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [132])
                (const_int 324 [0x144])) [0 procpar_info_9(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:218 90 {*movsi_internal}
     (nil))
(insn 24 23 27 2 (parallel [
            (set (reg:SI 0 ax [orig:86 D.25591 ] [86])
                (ashift:SI (reg:SI 0 ax [orig:85 D.25591 ] [85])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:218 496 {*ashlsi3_1}
     (nil))
(insn 27 24 28 2 (parallel [
            (set (reg:SI 0 ax [134])
                (minus:SI (reg:SI 0 ax [orig:86 D.25591 ] [86])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:218 263 {*subsi_1}
     (nil))
(insn 28 27 127 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (reg:SI 0 ax [134])) ge2fitman_preproc.cpp:218 90 {*movsi_internal}
     (nil))
(jump_insn 127 28 128 2 (set (pc)
        (label_ref 52)) ge2fitman_preproc.cpp:218 636 {jump}
     (nil)
 -> 52)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 128 127 57)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 96 97 135 136 137 138 139 140 141 142
(code_label 57 128 31 3 56 "" [1 uses])
(note 31 57 32 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 3 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:220 90 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 0 ax [orig:89 D.25592 ] [89])
        (sign_extend:DI (reg:SI 0 ax [135]))) ge2fitman_preproc.cpp:220 142 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg:DI 1 dx [orig:90 D.25592 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.25592 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:220 497 {*ashldi3_1}
     (nil))
(insn 35 34 36 3 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:220 89 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.25593 ] [91])
                (plus:DI (reg/f:DI 0 ax [136])
                    (reg:DI 1 dx [orig:90 D.25592 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:220 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.25592 ] [90]))
        (nil)))
(insn 37 36 38 3 (set (reg:SF 21 xmm0 [orig:92 D.25594 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.25593 ] [91]) [0 *_21+0 S4 A32])) ge2fitman_preproc.cpp:220 129 {*movsf_internal}
     (nil))
(insn 38 37 39 3 (set (reg:SF 22 xmm1 [138])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])) ge2fitman_preproc.cpp:220 129 {*movsf_internal}
     (nil))
(insn 39 38 133 3 (set (reg:SF 22 xmm1 [137])
        (plus:SF (reg:SF 22 xmm1 [137])
            (reg:SF 21 xmm0 [orig:92 D.25594 ] [92]))) ge2fitman_preproc.cpp:220 775 {*fop_sf_comm_sse}
     (nil))
(insn 133 39 40 3 (set (reg:SF 0 ax [137])
        (reg:SF 22 xmm1 [137])) ge2fitman_preproc.cpp:220 129 {*movsf_internal}
     (nil))
(insn 40 133 41 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 0 ax [137])) ge2fitman_preproc.cpp:220 129 {*movsf_internal}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:221 90 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:DI 0 ax [orig:93 D.25595 ] [93])
        (sign_extend:DI (reg:SI 0 ax [139]))) ge2fitman_preproc.cpp:221 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 0 ax [orig:94 D.25595 ] [94])
                (plus:DI (reg:DI 0 ax [orig:93 D.25595 ] [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:221 221 {*adddi_1}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 1 dx [orig:95 D.25595 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.25595 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:221 497 {*ashldi3_1}
     (nil))
(insn 45 44 46 3 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:221 89 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.25593 ] [96])
                (plus:DI (reg/f:DI 0 ax [140])
                    (reg:DI 1 dx [orig:95 D.25595 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:221 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.25595 ] [95]))
        (nil)))
(insn 47 46 48 3 (set (reg:SF 21 xmm0 [orig:97 D.25594 ] [97])
        (mem:SF (reg/f:DI 0 ax [orig:96 D.25593 ] [96]) [0 *_27+0 S4 A32])) ge2fitman_preproc.cpp:221 129 {*movsf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:SF 22 xmm1 [142])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])) ge2fitman_preproc.cpp:221 129 {*movsf_internal}
     (nil))
(insn 49 48 135 3 (set (reg:SF 22 xmm1 [141])
        (plus:SF (reg:SF 22 xmm1 [141])
            (reg:SF 21 xmm0 [orig:97 D.25594 ] [97]))) ge2fitman_preproc.cpp:221 775 {*fop_sf_comm_sse}
     (nil))
(insn 135 49 50 3 (set (reg:SF 0 ax [141])
        (reg:SF 22 xmm1 [141])) ge2fitman_preproc.cpp:221 129 {*movsf_internal}
     (nil))
(insn 50 135 51 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 0 ax [141])) ge2fitman_preproc.cpp:221 129 {*movsf_internal}
     (nil))
(insn 51 50 52 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:218 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 143
(code_label 52 51 53 4 55 "" [1 uses])
(note 53 52 54 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 4 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:218 89 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:SI 0 ax [orig:87 D.25591 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [143])
                (const_int 324 [0x144])) [0 procpar_info_9(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:218 90 {*movsi_internal}
     (nil))
(insn 56 55 58 4 (parallel [
            (set (reg:SI 0 ax [orig:88 D.25591 ] [88])
                (ashift:SI (reg:SI 0 ax [orig:87 D.25591 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:218 496 {*ashlsi3_1}
     (nil))
(insn 58 56 59 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.25591 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:218 7 {*cmpsi_1}
     (nil))
(jump_insn 59 58 60 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) ge2fitman_preproc.cpp:218 596 {*jcc_1}
     (nil)
 -> 57)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 98 99 100 101 102 103 144 145 146 147 148 149
(note 60 59 61 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 5 (set (reg:DF 21 xmm0 [orig:98 D.25596 ] [98])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32]))) ge2fitman_preproc.cpp:224 201 {*floatsidf2_sse}
     (nil))
(insn 62 61 63 5 (set (reg:DF 22 xmm1 [144])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:224 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 63 62 64 5 (set (reg:DF 21 xmm0 [orig:99 D.25596 ] [99])
        (div:DF (reg:DF 21 xmm0 [orig:98 D.25596 ] [98])
            (reg:DF 22 xmm1 [144]))) ge2fitman_preproc.cpp:224 783 {*fop_df_1_sse}
     (nil))
(insn 64 63 65 5 (set (reg:SF 21 xmm0 [orig:100 D.25594 ] [100])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:99 D.25596 ] [99]))) ge2fitman_preproc.cpp:224 157 {*truncdfsf_fast_sse}
     (nil))
(insn 65 64 66 5 (set (reg:SF 22 xmm1 [146])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])) ge2fitman_preproc.cpp:224 129 {*movsf_internal}
     (nil))
(insn 66 65 137 5 (set (reg:SF 22 xmm1 [145])
        (div:SF (reg:SF 22 xmm1 [145])
            (reg:SF 21 xmm0 [orig:100 D.25594 ] [100]))) ge2fitman_preproc.cpp:224 782 {*fop_sf_1_sse}
     (nil))
(insn 137 66 67 5 (set (reg:SF 0 ax [145])
        (reg:SF 22 xmm1 [145])) ge2fitman_preproc.cpp:224 129 {*movsf_internal}
     (nil))
(insn 67 137 68 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 0 ax [145])) ge2fitman_preproc.cpp:224 129 {*movsf_internal}
     (nil))
(insn 68 67 69 5 (set (reg:DF 21 xmm0 [orig:101 D.25596 ] [101])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32]))) ge2fitman_preproc.cpp:225 201 {*floatsidf2_sse}
     (nil))
(insn 69 68 70 5 (set (reg:DF 22 xmm1 [147])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:225 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 70 69 71 5 (set (reg:DF 21 xmm0 [orig:102 D.25596 ] [102])
        (div:DF (reg:DF 21 xmm0 [orig:101 D.25596 ] [101])
            (reg:DF 22 xmm1 [147]))) ge2fitman_preproc.cpp:225 783 {*fop_df_1_sse}
     (nil))
(insn 71 70 72 5 (set (reg:SF 21 xmm0 [orig:103 D.25594 ] [103])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:102 D.25596 ] [102]))) ge2fitman_preproc.cpp:225 157 {*truncdfsf_fast_sse}
     (nil))
(insn 72 71 73 5 (set (reg:SF 22 xmm1 [149])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])) ge2fitman_preproc.cpp:225 129 {*movsf_internal}
     (nil))
(insn 73 72 139 5 (set (reg:SF 22 xmm1 [148])
        (div:SF (reg:SF 22 xmm1 [148])
            (reg:SF 21 xmm0 [orig:103 D.25594 ] [103]))) ge2fitman_preproc.cpp:225 782 {*fop_sf_1_sse}
     (nil))
(insn 139 73 74 5 (set (reg:SF 0 ax [148])
        (reg:SF 22 xmm1 [148])) ge2fitman_preproc.cpp:225 129 {*movsf_internal}
     (nil))
(insn 74 139 75 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 0 ax [148])) ge2fitman_preproc.cpp:225 129 {*movsf_internal}
     (nil))
(insn 75 74 129 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:227 90 {*movsi_internal}
     (nil))
(jump_insn 129 75 130 5 (set (pc)
        (label_ref 108)) ge2fitman_preproc.cpp:227 636 {jump}
     (nil)
 -> 108)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 130 129 113)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 150 151 152 153 154 155 156 157
(code_label 113 130 78 6 58 "" [1 uses])
(note 78 113 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 6 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:229 90 {*movsi_internal}
     (nil))
(insn 80 79 81 6 (set (reg:DI 0 ax [orig:106 D.25592 ] [106])
        (sign_extend:DI (reg:SI 0 ax [150]))) ge2fitman_preproc.cpp:229 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 6 (parallel [
            (set (reg:DI 1 dx [orig:107 D.25592 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.25592 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:229 497 {*ashldi3_1}
     (nil))
(insn 82 81 83 6 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:229 89 {*movdi_internal}
     (nil))
(insn 83 82 84 6 (parallel [
            (set (reg/f:DI 1 dx [orig:108 D.25593 ] [108])
                (plus:DI (reg:DI 1 dx [orig:107 D.25592 ] [107])
                    (reg/f:DI 0 ax [151])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:229 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.25592 ] [107]))
        (nil)))
(insn 84 83 85 6 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:229 90 {*movsi_internal}
     (nil))
(insn 85 84 86 6 (set (reg:DI 0 ax [orig:109 D.25592 ] [109])
        (sign_extend:DI (reg:SI 0 ax [152]))) ge2fitman_preproc.cpp:229 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 6 (parallel [
            (set (reg:DI 2 cx [orig:110 D.25592 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 D.25592 ] [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:229 497 {*ashldi3_1}
     (nil))
(insn 87 86 88 6 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:229 89 {*movdi_internal}
     (nil))
(insn 88 87 89 6 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.25593 ] [111])
                (plus:DI (reg/f:DI 0 ax [153])
                    (reg:DI 2 cx [orig:110 D.25592 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:229 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:110 D.25592 ] [110]))
        (nil)))
(insn 89 88 90 6 (set (reg:SF 21 xmm0 [orig:112 D.25594 ] [112])
        (mem:SF (reg/f:DI 0 ax [orig:111 D.25593 ] [111]) [0 *_47+0 S4 A32])) ge2fitman_preproc.cpp:229 129 {*movsf_internal}
     (nil))
(insn 90 89 141 6 (set (reg:SF 21 xmm0 [orig:113 D.25594 ] [113])
        (minus:SF (reg:SF 21 xmm0 [orig:113 D.25594 ] [113])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32]))) ge2fitman_preproc.cpp:229 782 {*fop_sf_1_sse}
     (nil))
(insn 141 90 91 6 (set (reg:SF 0 ax [orig:113 D.25594 ] [113])
        (reg:SF 21 xmm0 [orig:113 D.25594 ] [113])) ge2fitman_preproc.cpp:229 129 {*movsf_internal}
     (nil))
(insn 91 141 92 6 (set (mem:SF (reg/f:DI 1 dx [orig:108 D.25593 ] [108]) [0 *_44+0 S4 A32])
        (reg:SF 0 ax [orig:113 D.25594 ] [113])) ge2fitman_preproc.cpp:229 129 {*movsf_internal}
     (nil))
(insn 92 91 93 6 (set (reg:SI 0 ax [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:230 90 {*movsi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:DI 0 ax [orig:114 D.25595 ] [114])
        (sign_extend:DI (reg:SI 0 ax [154]))) ge2fitman_preproc.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg:DI 0 ax [orig:115 D.25595 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 D.25595 ] [114])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 221 {*adddi_1}
     (nil))
(insn 95 94 96 6 (parallel [
            (set (reg:DI 1 dx [orig:116 D.25595 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.25595 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 497 {*ashldi3_1}
     (nil))
(insn 96 95 97 6 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:230 89 {*movdi_internal}
     (nil))
(insn 97 96 98 6 (parallel [
            (set (reg/f:DI 1 dx [orig:117 D.25593 ] [117])
                (plus:DI (reg:DI 1 dx [orig:116 D.25595 ] [116])
                    (reg/f:DI 0 ax [155])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.25595 ] [116]))
        (nil)))
(insn 98 97 99 6 (set (reg:SI 0 ax [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:230 90 {*movsi_internal}
     (nil))
(insn 99 98 100 6 (set (reg:DI 0 ax [orig:118 D.25595 ] [118])
        (sign_extend:DI (reg:SI 0 ax [156]))) ge2fitman_preproc.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 6 (parallel [
            (set (reg:DI 0 ax [orig:119 D.25595 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 D.25595 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 221 {*adddi_1}
     (nil))
(insn 101 100 102 6 (parallel [
            (set (reg:DI 2 cx [orig:120 D.25595 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.25595 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 497 {*ashldi3_1}
     (nil))
(insn 102 101 103 6 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:230 89 {*movdi_internal}
     (nil))
(insn 103 102 104 6 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.25593 ] [121])
                (plus:DI (reg/f:DI 0 ax [157])
                    (reg:DI 2 cx [orig:120 D.25595 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:120 D.25595 ] [120]))
        (nil)))
(insn 104 103 105 6 (set (reg:SF 21 xmm0 [orig:122 D.25594 ] [122])
        (mem:SF (reg/f:DI 0 ax [orig:121 D.25593 ] [121]) [0 *_57+0 S4 A32])) ge2fitman_preproc.cpp:230 129 {*movsf_internal}
     (nil))
(insn 105 104 143 6 (set (reg:SF 21 xmm0 [orig:123 D.25594 ] [123])
        (minus:SF (reg:SF 21 xmm0 [orig:123 D.25594 ] [123])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32]))) ge2fitman_preproc.cpp:230 782 {*fop_sf_1_sse}
     (nil))
(insn 143 105 106 6 (set (reg:SF 0 ax [orig:123 D.25594 ] [123])
        (reg:SF 21 xmm0 [orig:123 D.25594 ] [123])) ge2fitman_preproc.cpp:230 129 {*movsf_internal}
     (nil))
(insn 106 143 107 6 (set (mem:SF (reg/f:DI 1 dx [orig:117 D.25593 ] [117]) [0 *_53+0 S4 A32])
        (reg:SF 0 ax [orig:123 D.25594 ] [123])) ge2fitman_preproc.cpp:230 129 {*movsf_internal}
     (nil))
(insn 107 106 108 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:227 220 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 104 105 158
(code_label 108 107 109 7 57 "" [1 uses])
(note 109 108 110 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 7 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:227 89 {*movdi_internal}
     (nil))
(insn 111 110 112 7 (set (reg:SI 0 ax [orig:104 D.25591 ] [104])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [158])
                (const_int 324 [0x144])) [0 procpar_info_9(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:227 90 {*movsi_internal}
     (nil))
(insn 112 111 114 7 (parallel [
            (set (reg:SI 0 ax [orig:105 D.25591 ] [105])
                (ashift:SI (reg:SI 0 ax [orig:104 D.25591 ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:227 496 {*ashlsi3_1}
     (nil))
(insn 114 112 115 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:105 D.25591 ] [105])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:227 7 {*cmpsi_1}
     (nil))
(jump_insn 115 114 116 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) ge2fitman_preproc.cpp:227 596 {*jcc_1}
     (nil)
 -> 113)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 124 125
(note 116 115 117 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 120 8 (set (reg:SI 0 ax [orig:124 D.25591 ] [124])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:233 90 {*movsi_internal}
     (nil))
(insn 120 117 124 8 (set (reg:SI 0 ax [orig:125 <retval> ] [125])
        (reg:SI 0 ax [orig:124 D.25591 ] [124])) ge2fitman_preproc.cpp:233 90 {*movsi_internal}
     (nil))
(insn 124 120 125 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:125 <retval> ] [125])) ge2fitman_preproc.cpp:234 90 {*movsi_internal}
     (nil))
(insn 125 124 131 8 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:234 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 131 125 0 NOTE_INSN_DELETED)

;; Function int ecc_correction(float*, float*, Procpar_info*, Preprocess*) (_Z14ecc_correctionPfS_P12Procpar_infoP10Preprocess, funcdef_no=1023, decl_uid=24004, symbol_order=230)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 11:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 13:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 17:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 31:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 55:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 61:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 62:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 75
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 76:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 81:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 82:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 87
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 88:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 95:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 112:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 114
	 Choosing alt 0 in insn 114:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 0 in insn 115:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 118:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 119:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 133:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 138:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 139:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 140:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 141:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=241 from oldreg=223, assigning class SSE_REGS to r241
  141: r241:DF=r241:DF-[frame:DI-0x28]
      REG_DEAD r224:DF
    Inserting insn reload before:
  223: r241:DF=r224:DF
    Inserting insn reload after:
  224: r223:DF=r241:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 224:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 142:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 143:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 144:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=242 from oldreg=225, assigning class SSE_REGS to r242
  144: r242:DF=r242:DF-[frame:DI-0x28]
      REG_DEAD r226:DF
    Inserting insn reload before:
  225: r242:DF=r226:DF
    Inserting insn reload after:
  226: r225:DF=r242:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 226:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 145:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 151:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=243 from oldreg=160, assigning class SSE_REGS to r243
  151: r243:SF=float_trunc([frame:DI-0x40])
    Inserting insn reload after:
  227: r160:SF=r243:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 227:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 152:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=244, assigning class NO_REGS to secondary r244
  153: r244:DF=r229:DF
      REG_DEAD r229:DF
    Inserting the sec. move after:
  228: xmm0:DF=r244:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 228:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 157
	 Choosing alt 0 in insn 157:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=245 from oldreg=163, assigning class SSE_REGS to r245
      Creating newreg=246 from oldreg=160, assigning class SSE_REGS to r246
      Making reload reg 246 for reg 160 optional
  157: r245:SF=r245:SF*r246:SF
      REG_DEAD r162:SF
      REG_DEAD r160:SF
    Inserting insn reload before:
  229: r245:SF=r162:SF
  231: r246:SF=r160:SF
    Inserting insn reload after:
  230: r163:SF=r245:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 230:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 231:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 158:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 165:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=247 from oldreg=168, assigning class SSE_REGS to r247
  165: r247:SF=float_trunc([frame:DI-0x40])
    Inserting insn reload after:
  232: r168:SF=r247:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 232:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 166:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=248, assigning class NO_REGS to secondary r248
  167: r248:DF=r232:DF
      REG_DEAD r232:DF
    Inserting the sec. move after:
  233: xmm0:DF=r248:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 233:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 171
	 Choosing alt 0 in insn 171:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=249 from oldreg=171, assigning class SSE_REGS to r249
      Creating newreg=250 from oldreg=168, assigning class SSE_REGS to r250
      Making reload reg 250 for reg 168 optional
  171: r249:SF=r249:SF*r250:SF
      REG_DEAD r170:SF
      REG_DEAD r168:SF
    Inserting insn reload before:
  234: r249:SF=r170:SF
  236: r250:SF=r168:SF
    Inserting insn reload after:
  235: r171:SF=r249:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 235:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 236:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 172:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 178:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=251 from oldreg=175, assigning class SSE_REGS to r251
  178: r251:SF=float_trunc([frame:DI-0x38])
    Inserting insn reload after:
  237: r175:SF=r251:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 237:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 179:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=252, assigning class NO_REGS to secondary r252
  180: r252:DF=r235:DF
      REG_DEAD r235:DF
    Inserting the sec. move after:
  238: xmm0:DF=r252:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 238:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=253 from oldreg=178, assigning class SSE_REGS to r253
      Creating newreg=254 from oldreg=175, assigning class SSE_REGS to r254
      Making reload reg 254 for reg 175 optional
  184: r253:SF=r253:SF*r254:SF
      REG_DEAD r177:SF
      REG_DEAD r175:SF
    Inserting insn reload before:
  239: r253:SF=r177:SF
  241: r254:SF=r175:SF
    Inserting insn reload after:
  240: r178:SF=r253:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 240:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 241:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 185:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 192:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=255 from oldreg=183, assigning class SSE_REGS to r255
  192: r255:SF=float_trunc([frame:DI-0x38])
    Inserting insn reload after:
  242: r183:SF=r255:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 242:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 193:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=256, assigning class NO_REGS to secondary r256
  194: r256:DF=r238:DF
      REG_DEAD r238:DF
    Inserting the sec. move after:
  243: xmm0:DF=r256:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 243:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=257 from oldreg=186, assigning class SSE_REGS to r257
      Creating newreg=258 from oldreg=183, assigning class SSE_REGS to r258
      Making reload reg 258 for reg 183 optional
  198: r257:SF=r257:SF*r258:SF
      REG_DEAD r185:SF
      REG_DEAD r183:SF
    Inserting insn reload before:
  244: r257:SF=r185:SF
  246: r258:SF=r183:SF
    Inserting insn reload after:
  245: r186:SF=r257:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 245:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 246:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 199:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 200:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=259 from oldreg=183, assigning class SSE_REGS to inheritance r259
    Original reg change 183->259 (bb3):
  242: r259:SF=r255:SF
    Add original<-inheritance after:
  247: r183:SF=r259:SF

    Inheritance reuse change 183->259 (bb3):
  246: r258:SF=r259:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=260 from oldreg=175, assigning class SSE_REGS to inheritance r260
    Original reg change 175->260 (bb3):
  237: r260:SF=r251:SF
    Add original<-inheritance after:
  248: r175:SF=r260:SF

    Inheritance reuse change 175->260 (bb3):
  241: r254:SF=r260:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=261 from oldreg=168, assigning class SSE_REGS to inheritance r261
    Original reg change 168->261 (bb3):
  232: r261:SF=r247:SF
    Add original<-inheritance after:
  249: r168:SF=r261:SF

    Inheritance reuse change 168->261 (bb3):
  236: r250:SF=r261:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=262 from oldreg=160, assigning class SSE_REGS to inheritance r262
    Original reg change 160->262 (bb3):
  227: r262:SF=r243:SF
    Add original<-inheritance after:
  250: r160:SF=r262:SF

    Inheritance reuse change 160->262 (bb3):
  231: r246:SF=r262:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   247: r183:SF=r259:SF
deleting insn with uid = 247.
	    Removing dead insn:
   248: r175:SF=r260:SF
deleting insn with uid = 248.
	    Removing dead insn:
   249: r168:SF=r261:SF
deleting insn with uid = 249.
	    Removing dead insn:
   250: r160:SF=r262:SF
deleting insn with uid = 250.
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 218: point = 0
   Insn 217: point = 0
   Insn 213: point = 1
   Insn 210: point = 3
  BB 4
   Insn 208: point = 4
   Insn 207: point = 4
   Insn 205: point = 5
   Insn 204: point = 7
   Insn 203: point = 9
  BB 2
   Insn 220: point = 10
   Insn 22: point = 10
   Insn 21: point = 10
   Insn 20: point = 11
   Insn 19: point = 12
   Insn 18: point = 13
   Insn 17: point = 14
   Insn 16: point = 15
   Insn 15: point = 16
   Insn 14: point = 17
   Insn 13: point = 18
   Insn 12: point = 19
   Insn 11: point = 20
   Insn 10: point = 21
   Insn 9: point = 22
   Insn 5: point = 22
   Insn 4: point = 22
   Insn 3: point = 22
   Insn 2: point = 22
  BB 3
   Insn 200: point = 22
   Insn 199: point = 22
   Insn 245: point = 23
	Hard reg 0 is preferable by r257 with profit 1
   Insn 198: point = 25
   Insn 246: point = 26
	   Creating copy r258<-r259@1
   Insn 244: point = 28
	Hard reg 0 is preferable by r257 with profit 1
	Hard reg 21 is preferable by r257 with profit 1
   Insn 197: point = 30
   Insn 196: point = 32
   Insn 195: point = 33
   Insn 243: point = 33
	Hard reg 21 is preferable by r256 with profit 1
   Insn 194: point = 34
	Hard reg 21 is preferable by r256 with profit 1
	Hard reg 0 is preferable by r256 with profit 1
   Insn 193: point = 36
   Insn 242: point = 37
	   Creating copy r255->r259@1
   Insn 192: point = 39
   Insn 191: point = 40
   Insn 190: point = 42
   Insn 189: point = 43
   Insn 188: point = 45
   Insn 187: point = 47
   Insn 186: point = 49
   Insn 185: point = 50
   Insn 240: point = 51
	Hard reg 0 is preferable by r253 with profit 1
   Insn 184: point = 53
   Insn 241: point = 54
	   Creating copy r254<-r260@1
   Insn 239: point = 56
	Hard reg 0 is preferable by r253 with profit 1
	Hard reg 21 is preferable by r253 with profit 1
   Insn 183: point = 58
   Insn 182: point = 60
   Insn 181: point = 61
   Insn 238: point = 61
	Hard reg 21 is preferable by r252 with profit 1
   Insn 180: point = 62
	Hard reg 21 is preferable by r252 with profit 1
	Hard reg 0 is preferable by r252 with profit 1
   Insn 179: point = 64
   Insn 237: point = 65
	   Creating copy r251->r260@1
   Insn 178: point = 67
   Insn 177: point = 68
   Insn 176: point = 70
   Insn 175: point = 71
   Insn 174: point = 73
   Insn 173: point = 75
   Insn 172: point = 76
   Insn 235: point = 77
	Hard reg 0 is preferable by r249 with profit 1
   Insn 171: point = 79
   Insn 236: point = 80
	   Creating copy r250<-r261@1
   Insn 234: point = 82
	Hard reg 0 is preferable by r249 with profit 1
	Hard reg 21 is preferable by r249 with profit 1
   Insn 170: point = 84
   Insn 169: point = 86
   Insn 168: point = 87
   Insn 233: point = 87
	Hard reg 21 is preferable by r248 with profit 1
   Insn 167: point = 88
	Hard reg 21 is preferable by r248 with profit 1
	Hard reg 0 is preferable by r248 with profit 1
   Insn 166: point = 90
   Insn 232: point = 91
	   Creating copy r247->r261@1
   Insn 165: point = 93
   Insn 164: point = 94
   Insn 163: point = 96
   Insn 162: point = 97
   Insn 161: point = 99
   Insn 160: point = 101
   Insn 159: point = 103
   Insn 158: point = 104
   Insn 230: point = 105
	Hard reg 0 is preferable by r245 with profit 1
   Insn 157: point = 107
   Insn 231: point = 108
	   Creating copy r246<-r262@1
   Insn 229: point = 110
	Hard reg 0 is preferable by r245 with profit 1
	Hard reg 21 is preferable by r245 with profit 1
   Insn 156: point = 112
   Insn 155: point = 114
   Insn 154: point = 115
   Insn 228: point = 115
	Hard reg 21 is preferable by r244 with profit 1
   Insn 153: point = 116
	Hard reg 21 is preferable by r244 with profit 1
	Hard reg 0 is preferable by r244 with profit 1
   Insn 152: point = 118
   Insn 227: point = 119
	   Creating copy r243->r262@1
   Insn 151: point = 121
   Insn 150: point = 122
   Insn 149: point = 124
   Insn 148: point = 125
   Insn 147: point = 127
   Insn 146: point = 129
   Insn 145: point = 130
   Insn 226: point = 131
	Hard reg 0 is preferable by r242 with profit 1
   Insn 144: point = 133
   Insn 225: point = 133
	Hard reg 0 is preferable by r242 with profit 1
	Hard reg 21 is preferable by r242 with profit 1
   Insn 143: point = 135
   Insn 142: point = 136
   Insn 224: point = 137
	Hard reg 0 is preferable by r241 with profit 1
   Insn 141: point = 139
   Insn 223: point = 139
	Hard reg 0 is preferable by r241 with profit 1
	Hard reg 21 is preferable by r241 with profit 1
   Insn 140: point = 141
   Insn 139: point = 142
   Insn 138: point = 143
   Insn 137: point = 144
   Insn 136: point = 144
   Insn 135: point = 145
   Insn 134: point = 146
   Insn 133: point = 148
   Insn 132: point = 150
   Insn 131: point = 152
   Insn 130: point = 153
   Insn 129: point = 155
   Insn 128: point = 157
   Insn 127: point = 159
   Insn 126: point = 160
   Insn 125: point = 162
   Insn 124: point = 164
   Insn 123: point = 166
   Insn 122: point = 167
   Insn 121: point = 169
   Insn 120: point = 171
   Insn 119: point = 172
   Insn 118: point = 173
   Insn 117: point = 174
   Insn 116: point = 174
   Insn 115: point = 175
   Insn 114: point = 177
   Insn 113: point = 179
   Insn 112: point = 181
   Insn 111: point = 183
   Insn 110: point = 185
   Insn 109: point = 186
   Insn 108: point = 188
   Insn 107: point = 190
   Insn 106: point = 192
   Insn 105: point = 193
   Insn 104: point = 195
   Insn 103: point = 197
   Insn 102: point = 199
   Insn 101: point = 200
   Insn 100: point = 202
   Insn 99: point = 204
   Insn 98: point = 206
   Insn 97: point = 207
   Insn 96: point = 209
   Insn 95: point = 211
   Insn 94: point = 213
   Insn 93: point = 215
   Insn 92: point = 216
   Insn 91: point = 218
   Insn 90: point = 220
   Insn 89: point = 221
   Insn 88: point = 223
   Insn 87: point = 225
   Insn 86: point = 227
   Insn 85: point = 228
   Insn 84: point = 230
   Insn 83: point = 232
   Insn 82: point = 233
   Insn 81: point = 234
   Insn 80: point = 235
   Insn 79: point = 235
   Insn 78: point = 236
   Insn 77: point = 237
   Insn 76: point = 239
   Insn 75: point = 241
   Insn 74: point = 243
   Insn 73: point = 244
   Insn 72: point = 246
   Insn 71: point = 248
   Insn 70: point = 250
   Insn 69: point = 251
   Insn 68: point = 253
   Insn 67: point = 255
   Insn 66: point = 257
   Insn 65: point = 258
   Insn 64: point = 260
   Insn 63: point = 262
   Insn 62: point = 263
   Insn 61: point = 264
   Insn 60: point = 265
   Insn 59: point = 265
   Insn 58: point = 266
   Insn 57: point = 268
   Insn 56: point = 270
   Insn 55: point = 272
   Insn 54: point = 274
   Insn 53: point = 276
   Insn 52: point = 277
   Insn 51: point = 279
   Insn 50: point = 281
   Insn 49: point = 283
   Insn 48: point = 284
   Insn 47: point = 286
   Insn 46: point = 288
   Insn 45: point = 290
   Insn 44: point = 291
   Insn 43: point = 293
   Insn 42: point = 295
   Insn 41: point = 297
   Insn 40: point = 298
   Insn 39: point = 300
   Insn 38: point = 302
   Insn 37: point = 304
   Insn 36: point = 306
   Insn 35: point = 307
   Insn 34: point = 309
   Insn 33: point = 311
   Insn 32: point = 312
   Insn 31: point = 314
   Insn 30: point = 316
   Insn 29: point = 318
   Insn 28: point = 319
   Insn 27: point = 321
   Insn 26: point = 323
 r83: [6..7]
 r84: [4..5]
 r85: [320..321]
 r86: [317..319]
 r87: [315..316]
 r88: [313..314]
 r89: [299..312]
 r90: [308..309]
 r91: [305..307]
 r92: [303..304]
 r93: [301..302]
 r94: [299..300]
 r95: [267..298]
 r96: [294..295]
 r97: [292..293]
 r98: [289..291]
 r99: [287..288]
 r100: [285..286]
 r101: [269..284]
 r102: [280..281]
 r103: [278..279]
 r104: [275..277]
 r105: [273..274]
 r106: [271..272]
 r107: [269..270]
 r108: [267..268]
 r109: [265..266]
 r110: [259..260]
 r111: [256..258]
 r112: [254..255]
 r113: [252..253]
 r114: [236..251]
 r115: [247..248]
 r116: [245..246]
 r117: [242..244]
 r118: [240..241]
 r119: [238..239]
 r120: [235..237]
 r121: [229..230]
 r122: [226..228]
 r123: [224..225]
 r124: [222..223]
 r125: [208..221]
 r126: [217..218]
 r127: [214..216]
 r128: [212..213]
 r129: [210..211]
 r130: [208..209]
 r131: [176..207]
 r132: [203..204]
 r133: [201..202]
 r134: [198..200]
 r135: [196..197]
 r136: [194..195]
 r137: [178..193]
 r138: [189..190]
 r139: [187..188]
 r140: [184..186]
 r141: [182..183]
 r142: [180..181]
 r143: [178..179]
 r144: [176..177]
 r145: [174..175]
 r146: [168..169]
 r147: [165..167]
 r148: [163..164]
 r149: [161..162]
 r150: [145..160]
 r151: [156..157]
 r152: [154..155]
 r153: [151..153]
 r154: [149..150]
 r155: [147..148]
 r156: [144..146]
 r157: [126..127]
 r158: [123..125]
 r159: [104..122]
 r161: [113..114]
 r162: [111..112]
 r163: [104..105]
 r164: [100..101]
 r165: [98..99]
 r166: [95..97]
 r167: [76..94]
 r169: [85..86]
 r170: [83..84]
 r171: [76..77]
 r172: [72..73]
 r173: [69..71]
 r174: [50..68]
 r176: [59..60]
 r177: [57..58]
 r178: [50..51]
 r179: [46..47]
 r180: [44..45]
 r181: [41..43]
 r182: [22..40]
 r184: [31..32]
 r185: [29..30]
 r186: [22..23]
 r187: [2..3]
 r188: [0..1]
 r189: [20..21]
 r190: [18..19]
 r191: [16..17]
 r192: [14..15]
 r193: [12..13]
 r194: [10..11]
 r195: [322..323]
 r196: [317..318]
 r197: [310..311]
 r198: [305..306]
 r199: [296..297]
 r200: [289..290]
 r201: [282..283]
 r202: [275..276]
 r203: [263..264]
 r204: [261..262]
 r205: [256..257]
 r206: [249..250]
 r207: [242..243]
 r208: [233..234]
 r209: [231..232]
 r210: [226..227]
 r211: [219..220]
 r212: [214..215]
 r213: [205..206]
 r214: [198..199]
 r215: [191..192]
 r216: [184..185]
 r217: [172..173]
 r218: [170..171]
 r219: [165..166]
 r220: [158..159]
 r221: [151..152]
 r222: [142..143]
 r223: [136..137]
 r224: [140..141]
 r225: [130..131]
 r226: [134..135]
 r227: [128..129]
 r228: [123..124]
 r229: [117..118]
 r230: [102..103]
 r231: [95..96]
 r232: [89..90]
 r233: [74..75]
 r234: [69..70]
 r235: [63..64]
 r236: [48..49]
 r237: [41..42]
 r238: [35..36]
 r239: [8..9]
 r241: [138..139]
 r242: [132..133]
 r243: [120..121]
 r244: [115..116]
 r245: [106..110]
 r246: [107..108]
 r247: [92..93]
 r248: [87..88]
 r249: [78..82]
 r250: [79..80]
 r251: [66..67]
 r252: [61..62]
 r253: [52..56]
 r254: [53..54]
 r255: [38..39]
 r256: [33..34]
 r257: [24..28]
 r258: [25..26]
 r259: [27..37]
 r260: [55..65]
 r261: [81..91]
 r262: [109..119]
Compressing live ranges: from 324 to 286 - 88%
Ranges after the compression:
 r83: [6..7]
 r84: [4..5]
 r85: [282..283]
 r86: [280..281]
 r87: [278..279]
 r88: [276..277]
 r89: [264..275]
 r90: [272..273]
 r91: [270..271]
 r92: [268..269]
 r93: [266..267]
 r94: [264..265]
 r95: [236..263]
 r96: [260..261]
 r97: [258..259]
 r98: [256..257]
 r99: [254..255]
 r100: [252..253]
 r101: [238..251]
 r102: [248..249]
 r103: [246..247]
 r104: [244..245]
 r105: [242..243]
 r106: [240..241]
 r107: [238..239]
 r108: [236..237]
 r109: [234..235]
 r110: [228..229]
 r111: [226..227]
 r112: [224..225]
 r113: [222..223]
 r114: [208..221]
 r115: [218..219]
 r116: [216..217]
 r117: [214..215]
 r118: [212..213]
 r119: [210..211]
 r120: [208..209]
 r121: [202..203]
 r122: [200..201]
 r123: [198..199]
 r124: [196..197]
 r125: [184..195]
 r126: [192..193]
 r127: [190..191]
 r128: [188..189]
 r129: [186..187]
 r130: [184..185]
 r131: [156..183]
 r132: [180..181]
 r133: [178..179]
 r134: [176..177]
 r135: [174..175]
 r136: [172..173]
 r137: [158..171]
 r138: [168..169]
 r139: [166..167]
 r140: [164..165]
 r141: [162..163]
 r142: [160..161]
 r143: [158..159]
 r144: [156..157]
 r145: [154..155]
 r146: [148..149]
 r147: [146..147]
 r148: [144..145]
 r149: [142..143]
 r150: [128..141]
 r151: [138..139]
 r152: [136..137]
 r153: [134..135]
 r154: [132..133]
 r155: [130..131]
 r156: [128..129]
 r157: [110..111]
 r158: [108..109]
 r159: [92..107]
 r161: [100..101]
 r162: [98..99]
 r163: [92..93]
 r164: [88..89]
 r165: [86..87]
 r166: [84..85]
 r167: [68..83]
 r169: [76..77]
 r170: [74..75]
 r171: [68..69]
 r172: [64..65]
 r173: [62..63]
 r174: [46..61]
 r176: [54..55]
 r177: [52..53]
 r178: [46..47]
 r179: [42..43]
 r180: [40..41]
 r181: [38..39]
 r182: [22..37]
 r184: [30..31]
 r185: [28..29]
 r186: [22..23]
 r187: [2..3]
 r188: [0..1]
 r189: [20..21]
 r190: [18..19]
 r191: [16..17]
 r192: [14..15]
 r193: [12..13]
 r194: [10..11]
 r195: [284..285]
 r196: [280..281]
 r197: [274..275]
 r198: [270..271]
 r199: [262..263]
 r200: [256..257]
 r201: [250..251]
 r202: [244..245]
 r203: [232..233]
 r204: [230..231]
 r205: [226..227]
 r206: [220..221]
 r207: [214..215]
 r208: [206..207]
 r209: [204..205]
 r210: [200..201]
 r211: [194..195]
 r212: [190..191]
 r213: [182..183]
 r214: [176..177]
 r215: [170..171]
 r216: [164..165]
 r217: [152..153]
 r218: [150..151]
 r219: [146..147]
 r220: [140..141]
 r221: [134..135]
 r222: [126..127]
 r223: [120..121]
 r224: [124..125]
 r225: [114..115]
 r226: [118..119]
 r227: [112..113]
 r228: [108..109]
 r229: [104..105]
 r230: [90..91]
 r231: [84..85]
 r232: [80..81]
 r233: [66..67]
 r234: [62..63]
 r235: [58..59]
 r236: [44..45]
 r237: [38..39]
 r238: [34..35]
 r239: [8..9]
 r241: [122..123]
 r242: [116..117]
 r243: [106..107]
 r244: [102..103]
 r245: [94..97]
 r246: [94..95]
 r247: [82..83]
 r248: [78..79]
 r249: [70..73]
 r250: [70..71]
 r251: [60..61]
 r252: [56..57]
 r253: [48..51]
 r254: [48..49]
 r255: [36..37]
 r256: [32..33]
 r257: [24..27]
 r258: [24..25]
 r259: [26..35]
 r260: [50..59]
 r261: [72..81]
 r262: [96..105]

********** Assignment #1: **********

	 Assigning to 241 (cl=SSE_REGS, orig=223, freq=3, tfirst=241, tfreq=3)...
	   Assign 21 to reload r241 (freq=3)
	 Assigning to 242 (cl=SSE_REGS, orig=225, freq=3, tfirst=242, tfreq=3)...
	   Assign 21 to reload r242 (freq=3)
	 Assigning to 245 (cl=SSE_REGS, orig=163, freq=3, tfirst=245, tfreq=3)...
	   Assign 21 to reload r245 (freq=3)
	 Assigning to 249 (cl=SSE_REGS, orig=171, freq=3, tfirst=249, tfreq=3)...
	   Assign 21 to reload r249 (freq=3)
	 Assigning to 253 (cl=SSE_REGS, orig=178, freq=3, tfirst=253, tfreq=3)...
	   Assign 21 to reload r253 (freq=3)
	 Assigning to 257 (cl=SSE_REGS, orig=186, freq=3, tfirst=257, tfreq=3)...
	   Assign 21 to reload r257 (freq=3)
	 Assigning to 243 (cl=SSE_REGS, orig=160, freq=2, tfirst=243, tfreq=2)...
	   Assign 24 to reload r243 (freq=2)
	Hard reg 24 is preferable by r262 with profit 1
	Hard reg 24 is preferable by r246 with profit 1
	 Assigning to 246 (cl=SSE_REGS, orig=160, freq=2, tfirst=243, tfreq=2)...
	   Assign 24 to optional reload r246 (freq=2)
	Hard reg 24 is preferable by r262 with profit 2
	 Assigning to 262 (cl=SSE_REGS, orig=160, freq=2, tfirst=243, tfreq=2)...
	 Assigning to 247 (cl=SSE_REGS, orig=168, freq=2, tfirst=247, tfreq=2)...
	   Assign 25 to reload r247 (freq=2)
	Hard reg 25 is preferable by r261 with profit 1
	Hard reg 25 is preferable by r250 with profit 1
	 Assigning to 250 (cl=SSE_REGS, orig=168, freq=2, tfirst=247, tfreq=2)...
	   Assign 25 to optional reload r250 (freq=2)
	Hard reg 25 is preferable by r261 with profit 2
	 Assigning to 261 (cl=SSE_REGS, orig=168, freq=2, tfirst=247, tfreq=2)...
	 Assigning to 251 (cl=SSE_REGS, orig=175, freq=2, tfirst=251, tfreq=2)...
	   Assign 26 to reload r251 (freq=2)
	Hard reg 26 is preferable by r260 with profit 1
	Hard reg 26 is preferable by r254 with profit 1
	 Assigning to 254 (cl=SSE_REGS, orig=175, freq=2, tfirst=251, tfreq=2)...
	   Assign 26 to optional reload r254 (freq=2)
	Hard reg 26 is preferable by r260 with profit 2
	 Assigning to 260 (cl=SSE_REGS, orig=175, freq=2, tfirst=251, tfreq=2)...
	 Assigning to 255 (cl=SSE_REGS, orig=183, freq=2, tfirst=255, tfreq=2)...
	   Assign 27 to reload r255 (freq=2)
	Hard reg 27 is preferable by r259 with profit 1
	Hard reg 27 is preferable by r258 with profit 1
	 Assigning to 258 (cl=SSE_REGS, orig=183, freq=2, tfirst=255, tfreq=2)...
	   Assign 27 to optional reload r258 (freq=2)
	Hard reg 27 is preferable by r259 with profit 2
	 Assigning to 259 (cl=SSE_REGS, orig=183, freq=2, tfirst=255, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  246: r258:SF=r183:SF
      REG_DEAD r183:SF
   Insn after restoring regs:
  242: r183:SF=r255:SF
      REG_DEAD r255:SF
   Insn after restoring regs:
  241: r254:SF=r175:SF
      REG_DEAD r175:SF
   Insn after restoring regs:
  237: r175:SF=r251:SF
      REG_DEAD r251:SF
   Insn after restoring regs:
  236: r250:SF=r168:SF
      REG_DEAD r168:SF
   Insn after restoring regs:
  232: r168:SF=r247:SF
      REG_DEAD r247:SF
   Insn after restoring regs:
  231: r246:SF=r160:SF
      REG_DEAD r160:SF
   Insn after restoring regs:
  227: r160:SF=r243:SF
      REG_DEAD r243:SF
Remove optional reload reg 246
  Restoring original insn:
  157: r245:SF=r245:SF*r160:SF
      REG_DEAD r160:SF
  Deleting move 231
  231: r246:SF=r160:SF
      REG_DEAD r160:SF
deleting insn with uid = 231.
Remove optional reload reg 250
  Restoring original insn:
  171: r249:SF=r249:SF*r168:SF
      REG_DEAD r168:SF
  Deleting move 236
  236: r250:SF=r168:SF
      REG_DEAD r168:SF
deleting insn with uid = 236.
Remove optional reload reg 254
  Restoring original insn:
  184: r253:SF=r253:SF*r175:SF
      REG_DEAD r175:SF
  Deleting move 241
  241: r254:SF=r175:SF
      REG_DEAD r175:SF
deleting insn with uid = 241.
Remove optional reload reg 258
  Restoring original insn:
  198: r257:SF=r257:SF*r183:SF
      REG_DEAD r183:SF
  Deleting move 246
  246: r258:SF=r183:SF
      REG_DEAD r183:SF
deleting insn with uid = 246.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=263 from oldreg=183, assigning class SSE_REGS to r263
      Making reload reg 263 for reg 183 optional
  198: r257:SF=r257:SF*r263:SF
      REG_DEAD r183:SF
    Inserting insn reload before:
  251: r263:SF=r183:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 251:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=264 from oldreg=175, assigning class SSE_REGS to r264
      Making reload reg 264 for reg 175 optional
  184: r253:SF=r253:SF*r264:SF
      REG_DEAD r175:SF
    Inserting insn reload before:
  252: r264:SF=r175:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 171:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=265 from oldreg=168, assigning class SSE_REGS to r265
      Making reload reg 265 for reg 168 optional
  171: r249:SF=r249:SF*r265:SF
      REG_DEAD r168:SF
    Inserting insn reload before:
  253: r265:SF=r168:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 253:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=266 from oldreg=160, assigning class SSE_REGS to r266
      Making reload reg 266 for reg 160 optional
  157: r245:SF=r245:SF*r266:SF
      REG_DEAD r160:SF
    Inserting insn reload before:
  254: r266:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 254:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=267 from oldreg=183, assigning class SSE_REGS to inheritance r267
    Original reg change 183->267 (bb3):
  242: r267:SF=r255:SF
      REG_DEAD r255:SF
    Add original<-inheritance after:
  255: r183:SF=r267:SF

    Inheritance reuse change 183->267 (bb3):
  251: r263:SF=r267:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=268 from oldreg=175, assigning class SSE_REGS to inheritance r268
    Original reg change 175->268 (bb3):
  237: r268:SF=r251:SF
      REG_DEAD r251:SF
    Add original<-inheritance after:
  256: r175:SF=r268:SF

    Inheritance reuse change 175->268 (bb3):
  252: r264:SF=r268:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=269 from oldreg=168, assigning class SSE_REGS to inheritance r269
    Original reg change 168->269 (bb3):
  232: r269:SF=r247:SF
      REG_DEAD r247:SF
    Add original<-inheritance after:
  257: r168:SF=r269:SF

    Inheritance reuse change 168->269 (bb3):
  253: r265:SF=r269:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=270 from oldreg=160, assigning class SSE_REGS to inheritance r270
    Original reg change 160->270 (bb3):
  227: r270:SF=r243:SF
      REG_DEAD r243:SF
    Add original<-inheritance after:
  258: r160:SF=r270:SF

    Inheritance reuse change 160->270 (bb3):
  254: r266:SF=r270:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   255: r183:SF=r267:SF
deleting insn with uid = 255.
	    Removing dead insn:
   256: r175:SF=r268:SF
deleting insn with uid = 256.
	    Removing dead insn:
   257: r168:SF=r269:SF
deleting insn with uid = 257.
	    Removing dead insn:
   258: r160:SF=r270:SF
deleting insn with uid = 258.
EBB 4
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
   Insn 218: point = 0
   Insn 217: point = 0
   Insn 213: point = 1
   Insn 210: point = 3
  BB 4
   Insn 208: point = 4
   Insn 207: point = 4
   Insn 205: point = 5
   Insn 204: point = 7
   Insn 203: point = 9
  BB 2
   Insn 220: point = 10
   Insn 22: point = 10
   Insn 21: point = 10
   Insn 20: point = 11
   Insn 19: point = 12
   Insn 18: point = 13
   Insn 17: point = 14
   Insn 16: point = 15
   Insn 15: point = 16
   Insn 14: point = 17
   Insn 13: point = 18
   Insn 12: point = 19
   Insn 11: point = 20
   Insn 10: point = 21
   Insn 9: point = 22
   Insn 5: point = 22
   Insn 4: point = 22
   Insn 3: point = 22
   Insn 2: point = 22
  BB 3
   Insn 200: point = 22
   Insn 199: point = 22
   Insn 245: point = 23
	Hard reg 0 is preferable by r257 with profit 1
   Insn 198: point = 25
   Insn 251: point = 26
	   Creating copy r263<-r267@1
   Insn 244: point = 28
	Hard reg 0 is preferable by r257 with profit 1
	Hard reg 21 is preferable by r257 with profit 1
   Insn 197: point = 30
   Insn 196: point = 32
   Insn 195: point = 33
   Insn 243: point = 33
	Hard reg 21 is preferable by r256 with profit 1
   Insn 194: point = 34
	Hard reg 21 is preferable by r256 with profit 1
	Hard reg 0 is preferable by r256 with profit 1
   Insn 193: point = 36
   Insn 242: point = 37
	   Creating copy r255->r267@1
   Insn 192: point = 39
   Insn 191: point = 40
   Insn 190: point = 42
   Insn 189: point = 43
   Insn 188: point = 45
   Insn 187: point = 47
   Insn 186: point = 49
   Insn 185: point = 50
   Insn 240: point = 51
	Hard reg 0 is preferable by r253 with profit 1
   Insn 184: point = 53
   Insn 252: point = 54
	   Creating copy r264<-r268@1
   Insn 239: point = 56
	Hard reg 0 is preferable by r253 with profit 1
	Hard reg 21 is preferable by r253 with profit 1
   Insn 183: point = 58
   Insn 182: point = 60
   Insn 181: point = 61
   Insn 238: point = 61
	Hard reg 21 is preferable by r252 with profit 1
   Insn 180: point = 62
	Hard reg 21 is preferable by r252 with profit 1
	Hard reg 0 is preferable by r252 with profit 1
   Insn 179: point = 64
   Insn 237: point = 65
	   Creating copy r251->r268@1
   Insn 178: point = 67
   Insn 177: point = 68
   Insn 176: point = 70
   Insn 175: point = 71
   Insn 174: point = 73
   Insn 173: point = 75
   Insn 172: point = 76
   Insn 235: point = 77
	Hard reg 0 is preferable by r249 with profit 1
   Insn 171: point = 79
   Insn 253: point = 80
	   Creating copy r265<-r269@1
   Insn 234: point = 82
	Hard reg 0 is preferable by r249 with profit 1
	Hard reg 21 is preferable by r249 with profit 1
   Insn 170: point = 84
   Insn 169: point = 86
   Insn 168: point = 87
   Insn 233: point = 87
	Hard reg 21 is preferable by r248 with profit 1
   Insn 167: point = 88
	Hard reg 21 is preferable by r248 with profit 1
	Hard reg 0 is preferable by r248 with profit 1
   Insn 166: point = 90
   Insn 232: point = 91
	   Creating copy r247->r269@1
   Insn 165: point = 93
   Insn 164: point = 94
   Insn 163: point = 96
   Insn 162: point = 97
   Insn 161: point = 99
   Insn 160: point = 101
   Insn 159: point = 103
   Insn 158: point = 104
   Insn 230: point = 105
	Hard reg 0 is preferable by r245 with profit 1
   Insn 157: point = 107
   Insn 254: point = 108
	   Creating copy r266<-r270@1
   Insn 229: point = 110
	Hard reg 0 is preferable by r245 with profit 1
	Hard reg 21 is preferable by r245 with profit 1
   Insn 156: point = 112
   Insn 155: point = 114
   Insn 154: point = 115
   Insn 228: point = 115
	Hard reg 21 is preferable by r244 with profit 1
   Insn 153: point = 116
	Hard reg 21 is preferable by r244 with profit 1
	Hard reg 0 is preferable by r244 with profit 1
   Insn 152: point = 118
   Insn 227: point = 119
	   Creating copy r243->r270@1
   Insn 151: point = 121
   Insn 150: point = 122
   Insn 149: point = 124
   Insn 148: point = 125
   Insn 147: point = 127
   Insn 146: point = 129
   Insn 145: point = 130
   Insn 226: point = 131
	Hard reg 0 is preferable by r242 with profit 1
   Insn 144: point = 133
   Insn 225: point = 133
	Hard reg 0 is preferable by r242 with profit 1
	Hard reg 21 is preferable by r242 with profit 1
   Insn 143: point = 135
   Insn 142: point = 136
   Insn 224: point = 137
	Hard reg 0 is preferable by r241 with profit 1
   Insn 141: point = 139
   Insn 223: point = 139
	Hard reg 0 is preferable by r241 with profit 1
	Hard reg 21 is preferable by r241 with profit 1
   Insn 140: point = 141
   Insn 139: point = 142
   Insn 138: point = 143
   Insn 137: point = 144
   Insn 136: point = 144
   Insn 135: point = 145
   Insn 134: point = 146
   Insn 133: point = 148
   Insn 132: point = 150
   Insn 131: point = 152
   Insn 130: point = 153
   Insn 129: point = 155
   Insn 128: point = 157
   Insn 127: point = 159
   Insn 126: point = 160
   Insn 125: point = 162
   Insn 124: point = 164
   Insn 123: point = 166
   Insn 122: point = 167
   Insn 121: point = 169
   Insn 120: point = 171
   Insn 119: point = 172
   Insn 118: point = 173
   Insn 117: point = 174
   Insn 116: point = 174
   Insn 115: point = 175
   Insn 114: point = 177
   Insn 113: point = 179
   Insn 112: point = 181
   Insn 111: point = 183
   Insn 110: point = 185
   Insn 109: point = 186
   Insn 108: point = 188
   Insn 107: point = 190
   Insn 106: point = 192
   Insn 105: point = 193
   Insn 104: point = 195
   Insn 103: point = 197
   Insn 102: point = 199
   Insn 101: point = 200
   Insn 100: point = 202
   Insn 99: point = 204
   Insn 98: point = 206
   Insn 97: point = 207
   Insn 96: point = 209
   Insn 95: point = 211
   Insn 94: point = 213
   Insn 93: point = 215
   Insn 92: point = 216
   Insn 91: point = 218
   Insn 90: point = 220
   Insn 89: point = 221
   Insn 88: point = 223
   Insn 87: point = 225
   Insn 86: point = 227
   Insn 85: point = 228
   Insn 84: point = 230
   Insn 83: point = 232
   Insn 82: point = 233
   Insn 81: point = 234
   Insn 80: point = 235
   Insn 79: point = 235
   Insn 78: point = 236
   Insn 77: point = 237
   Insn 76: point = 239
   Insn 75: point = 241
   Insn 74: point = 243
   Insn 73: point = 244
   Insn 72: point = 246
   Insn 71: point = 248
   Insn 70: point = 250
   Insn 69: point = 251
   Insn 68: point = 253
   Insn 67: point = 255
   Insn 66: point = 257
   Insn 65: point = 258
   Insn 64: point = 260
   Insn 63: point = 262
   Insn 62: point = 263
   Insn 61: point = 264
   Insn 60: point = 265
   Insn 59: point = 265
   Insn 58: point = 266
   Insn 57: point = 268
   Insn 56: point = 270
   Insn 55: point = 272
   Insn 54: point = 274
   Insn 53: point = 276
   Insn 52: point = 277
   Insn 51: point = 279
   Insn 50: point = 281
   Insn 49: point = 283
   Insn 48: point = 284
   Insn 47: point = 286
   Insn 46: point = 288
   Insn 45: point = 290
   Insn 44: point = 291
   Insn 43: point = 293
   Insn 42: point = 295
   Insn 41: point = 297
   Insn 40: point = 298
   Insn 39: point = 300
   Insn 38: point = 302
   Insn 37: point = 304
   Insn 36: point = 306
   Insn 35: point = 307
   Insn 34: point = 309
   Insn 33: point = 311
   Insn 32: point = 312
   Insn 31: point = 314
   Insn 30: point = 316
   Insn 29: point = 318
   Insn 28: point = 319
   Insn 27: point = 321
   Insn 26: point = 323
 r83: [6..7]
 r84: [4..5]
 r85: [320..321]
 r86: [317..319]
 r87: [315..316]
 r88: [313..314]
 r89: [299..312]
 r90: [308..309]
 r91: [305..307]
 r92: [303..304]
 r93: [301..302]
 r94: [299..300]
 r95: [267..298]
 r96: [294..295]
 r97: [292..293]
 r98: [289..291]
 r99: [287..288]
 r100: [285..286]
 r101: [269..284]
 r102: [280..281]
 r103: [278..279]
 r104: [275..277]
 r105: [273..274]
 r106: [271..272]
 r107: [269..270]
 r108: [267..268]
 r109: [265..266]
 r110: [259..260]
 r111: [256..258]
 r112: [254..255]
 r113: [252..253]
 r114: [236..251]
 r115: [247..248]
 r116: [245..246]
 r117: [242..244]
 r118: [240..241]
 r119: [238..239]
 r120: [235..237]
 r121: [229..230]
 r122: [226..228]
 r123: [224..225]
 r124: [222..223]
 r125: [208..221]
 r126: [217..218]
 r127: [214..216]
 r128: [212..213]
 r129: [210..211]
 r130: [208..209]
 r131: [176..207]
 r132: [203..204]
 r133: [201..202]
 r134: [198..200]
 r135: [196..197]
 r136: [194..195]
 r137: [178..193]
 r138: [189..190]
 r139: [187..188]
 r140: [184..186]
 r141: [182..183]
 r142: [180..181]
 r143: [178..179]
 r144: [176..177]
 r145: [174..175]
 r146: [168..169]
 r147: [165..167]
 r148: [163..164]
 r149: [161..162]
 r150: [145..160]
 r151: [156..157]
 r152: [154..155]
 r153: [151..153]
 r154: [149..150]
 r155: [147..148]
 r156: [144..146]
 r157: [126..127]
 r158: [123..125]
 r159: [104..122]
 r161: [113..114]
 r162: [111..112]
 r163: [104..105]
 r164: [100..101]
 r165: [98..99]
 r166: [95..97]
 r167: [76..94]
 r169: [85..86]
 r170: [83..84]
 r171: [76..77]
 r172: [72..73]
 r173: [69..71]
 r174: [50..68]
 r176: [59..60]
 r177: [57..58]
 r178: [50..51]
 r179: [46..47]
 r180: [44..45]
 r181: [41..43]
 r182: [22..40]
 r184: [31..32]
 r185: [29..30]
 r186: [22..23]
 r187: [2..3]
 r188: [0..1]
 r189: [20..21]
 r190: [18..19]
 r191: [16..17]
 r192: [14..15]
 r193: [12..13]
 r194: [10..11]
 r195: [322..323]
 r196: [317..318]
 r197: [310..311]
 r198: [305..306]
 r199: [296..297]
 r200: [289..290]
 r201: [282..283]
 r202: [275..276]
 r203: [263..264]
 r204: [261..262]
 r205: [256..257]
 r206: [249..250]
 r207: [242..243]
 r208: [233..234]
 r209: [231..232]
 r210: [226..227]
 r211: [219..220]
 r212: [214..215]
 r213: [205..206]
 r214: [198..199]
 r215: [191..192]
 r216: [184..185]
 r217: [172..173]
 r218: [170..171]
 r219: [165..166]
 r220: [158..159]
 r221: [151..152]
 r222: [142..143]
 r223: [136..137]
 r224: [140..141]
 r225: [130..131]
 r226: [134..135]
 r227: [128..129]
 r228: [123..124]
 r229: [117..118]
 r230: [102..103]
 r231: [95..96]
 r232: [89..90]
 r233: [74..75]
 r234: [69..70]
 r235: [63..64]
 r236: [48..49]
 r237: [41..42]
 r238: [35..36]
 r239: [8..9]
 r241: [138..139]
 r242: [132..133]
 r243: [120..121]
 r244: [115..116]
 r245: [106..110]
 r247: [92..93]
 r248: [87..88]
 r249: [78..82]
 r251: [66..67]
 r252: [61..62]
 r253: [52..56]
 r255: [38..39]
 r256: [33..34]
 r257: [24..28]
 r263: [25..26]
 r264: [53..54]
 r265: [79..80]
 r266: [107..108]
 r267: [27..37]
 r268: [55..65]
 r269: [81..91]
 r270: [109..119]
Compressing live ranges: from 324 to 286 - 88%
Ranges after the compression:
 r83: [6..7]
 r84: [4..5]
 r85: [282..283]
 r86: [280..281]
 r87: [278..279]
 r88: [276..277]
 r89: [264..275]
 r90: [272..273]
 r91: [270..271]
 r92: [268..269]
 r93: [266..267]
 r94: [264..265]
 r95: [236..263]
 r96: [260..261]
 r97: [258..259]
 r98: [256..257]
 r99: [254..255]
 r100: [252..253]
 r101: [238..251]
 r102: [248..249]
 r103: [246..247]
 r104: [244..245]
 r105: [242..243]
 r106: [240..241]
 r107: [238..239]
 r108: [236..237]
 r109: [234..235]
 r110: [228..229]
 r111: [226..227]
 r112: [224..225]
 r113: [222..223]
 r114: [208..221]
 r115: [218..219]
 r116: [216..217]
 r117: [214..215]
 r118: [212..213]
 r119: [210..211]
 r120: [208..209]
 r121: [202..203]
 r122: [200..201]
 r123: [198..199]
 r124: [196..197]
 r125: [184..195]
 r126: [192..193]
 r127: [190..191]
 r128: [188..189]
 r129: [186..187]
 r130: [184..185]
 r131: [156..183]
 r132: [180..181]
 r133: [178..179]
 r134: [176..177]
 r135: [174..175]
 r136: [172..173]
 r137: [158..171]
 r138: [168..169]
 r139: [166..167]
 r140: [164..165]
 r141: [162..163]
 r142: [160..161]
 r143: [158..159]
 r144: [156..157]
 r145: [154..155]
 r146: [148..149]
 r147: [146..147]
 r148: [144..145]
 r149: [142..143]
 r150: [128..141]
 r151: [138..139]
 r152: [136..137]
 r153: [134..135]
 r154: [132..133]
 r155: [130..131]
 r156: [128..129]
 r157: [110..111]
 r158: [108..109]
 r159: [92..107]
 r161: [100..101]
 r162: [98..99]
 r163: [92..93]
 r164: [88..89]
 r165: [86..87]
 r166: [84..85]
 r167: [68..83]
 r169: [76..77]
 r170: [74..75]
 r171: [68..69]
 r172: [64..65]
 r173: [62..63]
 r174: [46..61]
 r176: [54..55]
 r177: [52..53]
 r178: [46..47]
 r179: [42..43]
 r180: [40..41]
 r181: [38..39]
 r182: [22..37]
 r184: [30..31]
 r185: [28..29]
 r186: [22..23]
 r187: [2..3]
 r188: [0..1]
 r189: [20..21]
 r190: [18..19]
 r191: [16..17]
 r192: [14..15]
 r193: [12..13]
 r194: [10..11]
 r195: [284..285]
 r196: [280..281]
 r197: [274..275]
 r198: [270..271]
 r199: [262..263]
 r200: [256..257]
 r201: [250..251]
 r202: [244..245]
 r203: [232..233]
 r204: [230..231]
 r205: [226..227]
 r206: [220..221]
 r207: [214..215]
 r208: [206..207]
 r209: [204..205]
 r210: [200..201]
 r211: [194..195]
 r212: [190..191]
 r213: [182..183]
 r214: [176..177]
 r215: [170..171]
 r216: [164..165]
 r217: [152..153]
 r218: [150..151]
 r219: [146..147]
 r220: [140..141]
 r221: [134..135]
 r222: [126..127]
 r223: [120..121]
 r224: [124..125]
 r225: [114..115]
 r226: [118..119]
 r227: [112..113]
 r228: [108..109]
 r229: [104..105]
 r230: [90..91]
 r231: [84..85]
 r232: [80..81]
 r233: [66..67]
 r234: [62..63]
 r235: [58..59]
 r236: [44..45]
 r237: [38..39]
 r238: [34..35]
 r239: [8..9]
 r241: [122..123]
 r242: [116..117]
 r243: [106..107]
 r244: [102..103]
 r245: [94..97]
 r247: [82..83]
 r248: [78..79]
 r249: [70..73]
 r251: [60..61]
 r252: [56..57]
 r253: [48..51]
 r255: [36..37]
 r256: [32..33]
 r257: [24..27]
 r263: [24..25]
 r264: [48..49]
 r265: [70..71]
 r266: [94..95]
 r267: [26..35]
 r268: [50..59]
 r269: [72..81]
 r270: [96..105]

********** Assignment #2: **********

	 Assigning to 263 (cl=SSE_REGS, orig=183, freq=2, tfirst=263, tfreq=2)...
	   Assign 28 to optional reload r263 (freq=2)
	Hard reg 28 is preferable by r267 with profit 1
	 Assigning to 267 (cl=SSE_REGS, orig=183, freq=2, tfirst=263, tfreq=2)...
	 Assigning to 264 (cl=SSE_REGS, orig=175, freq=2, tfirst=264, tfreq=2)...
	   Assign 24 to optional reload r264 (freq=2)
	Hard reg 24 is preferable by r268 with profit 1
	 Assigning to 268 (cl=SSE_REGS, orig=175, freq=2, tfirst=264, tfreq=2)...
	 Assigning to 265 (cl=SSE_REGS, orig=168, freq=2, tfirst=265, tfreq=2)...
	   Assign 25 to optional reload r265 (freq=2)
	Hard reg 25 is preferable by r269 with profit 1
	 Assigning to 269 (cl=SSE_REGS, orig=168, freq=2, tfirst=265, tfreq=2)...
	 Assigning to 266 (cl=SSE_REGS, orig=160, freq=2, tfirst=266, tfreq=2)...
	   Assign 26 to optional reload r266 (freq=2)
	Hard reg 26 is preferable by r270 with profit 1
	 Assigning to 270 (cl=SSE_REGS, orig=160, freq=2, tfirst=266, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  251: r263:SF=r183:SF
      REG_DEAD r183:SF
   Insn after restoring regs:
  242: r183:SF=r255:SF
      REG_DEAD r255:SF
   Insn after restoring regs:
  252: r264:SF=r175:SF
      REG_DEAD r175:SF
   Insn after restoring regs:
  237: r175:SF=r251:SF
      REG_DEAD r251:SF
   Insn after restoring regs:
  253: r265:SF=r168:SF
      REG_DEAD r168:SF
   Insn after restoring regs:
  232: r168:SF=r247:SF
      REG_DEAD r247:SF
   Insn after restoring regs:
  254: r266:SF=r160:SF
      REG_DEAD r160:SF
   Insn after restoring regs:
  227: r160:SF=r243:SF
      REG_DEAD r243:SF
Keep optional reload reg 246
Keep optional reload reg 250
Keep optional reload reg 254
Keep optional reload reg 258
Remove optional reload reg 263
  Restoring original insn:
  198: r257:SF=r257:SF*r183:SF
      REG_DEAD r183:SF
  Deleting move 251
  251: r263:SF=r183:SF
      REG_DEAD r183:SF
deleting insn with uid = 251.
Remove optional reload reg 264
  Restoring original insn:
  184: r253:SF=r253:SF*r175:SF
      REG_DEAD r175:SF
  Deleting move 252
  252: r264:SF=r175:SF
      REG_DEAD r175:SF
deleting insn with uid = 252.
Remove optional reload reg 265
  Restoring original insn:
  171: r249:SF=r249:SF*r168:SF
      REG_DEAD r168:SF
  Deleting move 253
  253: r265:SF=r168:SF
      REG_DEAD r168:SF
deleting insn with uid = 253.
Remove optional reload reg 266
  Restoring original insn:
  157: r245:SF=r245:SF*r160:SF
      REG_DEAD r160:SF
  Deleting move 254
  254: r266:SF=r160:SF
      REG_DEAD r160:SF
deleting insn with uid = 254.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 171:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
   Insn 218: point = 0
   Insn 217: point = 0
   Insn 213: point = 1
   Insn 210: point = 3
  BB 4
   Insn 208: point = 4
   Insn 207: point = 4
   Insn 205: point = 5
   Insn 204: point = 7
   Insn 203: point = 9
  BB 2
   Insn 220: point = 10
   Insn 22: point = 10
   Insn 21: point = 10
   Insn 20: point = 11
   Insn 19: point = 12
   Insn 18: point = 13
   Insn 17: point = 14
   Insn 16: point = 15
   Insn 15: point = 16
   Insn 14: point = 17
   Insn 13: point = 18
   Insn 12: point = 19
   Insn 11: point = 20
   Insn 10: point = 21
   Insn 9: point = 22
   Insn 5: point = 22
   Insn 4: point = 22
   Insn 3: point = 22
   Insn 2: point = 22
  BB 3
   Insn 200: point = 22
   Insn 199: point = 22
   Insn 245: point = 23
   Insn 198: point = 25
   Insn 244: point = 26
   Insn 197: point = 28
   Insn 196: point = 30
   Insn 195: point = 31
   Insn 243: point = 31
   Insn 194: point = 32
   Insn 193: point = 34
   Insn 242: point = 35
   Insn 192: point = 37
   Insn 191: point = 38
   Insn 190: point = 40
   Insn 189: point = 41
   Insn 188: point = 43
   Insn 187: point = 45
   Insn 186: point = 47
   Insn 185: point = 48
   Insn 240: point = 49
   Insn 184: point = 51
   Insn 239: point = 52
   Insn 183: point = 54
   Insn 182: point = 56
   Insn 181: point = 57
   Insn 238: point = 57
   Insn 180: point = 58
   Insn 179: point = 60
   Insn 237: point = 61
   Insn 178: point = 63
   Insn 177: point = 64
   Insn 176: point = 66
   Insn 175: point = 67
   Insn 174: point = 69
   Insn 173: point = 71
   Insn 172: point = 72
   Insn 235: point = 73
   Insn 171: point = 75
   Insn 234: point = 76
   Insn 170: point = 78
   Insn 169: point = 80
   Insn 168: point = 81
   Insn 233: point = 81
   Insn 167: point = 82
   Insn 166: point = 84
   Insn 232: point = 85
   Insn 165: point = 87
   Insn 164: point = 88
   Insn 163: point = 90
   Insn 162: point = 91
   Insn 161: point = 93
   Insn 160: point = 95
   Insn 159: point = 97
   Insn 158: point = 98
   Insn 230: point = 99
   Insn 157: point = 101
   Insn 229: point = 102
   Insn 156: point = 104
   Insn 155: point = 106
   Insn 154: point = 107
   Insn 228: point = 107
   Insn 153: point = 108
   Insn 152: point = 110
   Insn 227: point = 111
   Insn 151: point = 113
   Insn 150: point = 114
   Insn 149: point = 116
   Insn 148: point = 117
   Insn 147: point = 119
   Insn 146: point = 121
   Insn 145: point = 122
   Insn 226: point = 123
   Insn 144: point = 125
   Insn 225: point = 125
   Insn 143: point = 127
   Insn 142: point = 128
   Insn 224: point = 129
   Insn 141: point = 131
   Insn 223: point = 131
   Insn 140: point = 133
   Insn 139: point = 134
   Insn 138: point = 135
   Insn 137: point = 136
   Insn 136: point = 136
   Insn 135: point = 137
   Insn 134: point = 138
   Insn 133: point = 140
   Insn 132: point = 142
   Insn 131: point = 144
   Insn 130: point = 145
   Insn 129: point = 147
   Insn 128: point = 149
   Insn 127: point = 151
   Insn 126: point = 152
   Insn 125: point = 154
   Insn 124: point = 156
   Insn 123: point = 158
   Insn 122: point = 159
   Insn 121: point = 161
   Insn 120: point = 163
   Insn 119: point = 164
   Insn 118: point = 165
   Insn 117: point = 166
   Insn 116: point = 166
   Insn 115: point = 167
   Insn 114: point = 169
   Insn 113: point = 171
   Insn 112: point = 173
   Insn 111: point = 175
   Insn 110: point = 177
   Insn 109: point = 178
   Insn 108: point = 180
   Insn 107: point = 182
   Insn 106: point = 184
   Insn 105: point = 185
   Insn 104: point = 187
   Insn 103: point = 189
   Insn 102: point = 191
   Insn 101: point = 192
   Insn 100: point = 194
   Insn 99: point = 196
   Insn 98: point = 198
   Insn 97: point = 199
   Insn 96: point = 201
   Insn 95: point = 203
   Insn 94: point = 205
   Insn 93: point = 207
   Insn 92: point = 208
   Insn 91: point = 210
   Insn 90: point = 212
   Insn 89: point = 213
   Insn 88: point = 215
   Insn 87: point = 217
   Insn 86: point = 219
   Insn 85: point = 220
   Insn 84: point = 222
   Insn 83: point = 224
   Insn 82: point = 225
   Insn 81: point = 226
   Insn 80: point = 227
   Insn 79: point = 227
   Insn 78: point = 228
   Insn 77: point = 229
   Insn 76: point = 231
   Insn 75: point = 233
   Insn 74: point = 235
   Insn 73: point = 236
   Insn 72: point = 238
   Insn 71: point = 240
   Insn 70: point = 242
   Insn 69: point = 243
   Insn 68: point = 245
   Insn 67: point = 247
   Insn 66: point = 249
   Insn 65: point = 250
   Insn 64: point = 252
   Insn 63: point = 254
   Insn 62: point = 255
   Insn 61: point = 256
   Insn 60: point = 257
   Insn 59: point = 257
   Insn 58: point = 258
   Insn 57: point = 260
   Insn 56: point = 262
   Insn 55: point = 264
   Insn 54: point = 266
   Insn 53: point = 268
   Insn 52: point = 269
   Insn 51: point = 271
   Insn 50: point = 273
   Insn 49: point = 275
   Insn 48: point = 276
   Insn 47: point = 278
   Insn 46: point = 280
   Insn 45: point = 282
   Insn 44: point = 283
   Insn 43: point = 285
   Insn 42: point = 287
   Insn 41: point = 289
   Insn 40: point = 290
   Insn 39: point = 292
   Insn 38: point = 294
   Insn 37: point = 296
   Insn 36: point = 298
   Insn 35: point = 299
   Insn 34: point = 301
   Insn 33: point = 303
   Insn 32: point = 304
   Insn 31: point = 306
   Insn 30: point = 308
   Insn 29: point = 310
   Insn 28: point = 311
   Insn 27: point = 313
   Insn 26: point = 315
 r160: [101..111]
 r168: [75..85]
 r175: [51..61]
 r183: [25..35]
 r244: [107..108]
 r248: [81..82]
 r252: [57..58]
 r256: [31..32]
Compressing live ranges: from 316 to 8 - 2%
Ranges after the compression:
 r160: [6..7]
 r168: [4..5]
 r175: [2..3]
 r183: [0..1]
 r244: [6..7]
 r248: [4..5]
 r252: [2..3]
 r256: [0..1]
  Slot 0 regnos (width = 4):	 160	 183	 175	 168
  Slot 1 regnos (width = 8):	 244	 256	 252	 248
Changing spilled pseudos to memory in insn #227
Changing spilled pseudos to memory in insn #153
Changing spilled pseudos to memory in insn #228
Changing spilled pseudos to memory in insn #157
Changing spilled pseudos to memory in insn #232
Changing spilled pseudos to memory in insn #167
Changing spilled pseudos to memory in insn #233
Changing spilled pseudos to memory in insn #171
Changing spilled pseudos to memory in insn #237
Changing spilled pseudos to memory in insn #180
Changing spilled pseudos to memory in insn #238
Changing spilled pseudos to memory in insn #184
Changing spilled pseudos to memory in insn #242
Changing spilled pseudos to memory in insn #194
Changing spilled pseudos to memory in insn #243
Changing spilled pseudos to memory in insn #198
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #198
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #243
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 243:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 194:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #242
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 242:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #184
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #238
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 238:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 180:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #237
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 237:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #171
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #233
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 233:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 167:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #232
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 232:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #157
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #228
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 228:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 153:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #227
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 227:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 40
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 78
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 97
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 135
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 150
changing reg in insn 158
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 158
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 164
changing reg in insn 172
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 177
changing reg in insn 177
changing reg in insn 177
changing reg in insn 185
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 191
changing reg in insn 199
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 210
changing reg in insn 213
changing reg in insn 213
changing reg in insn 217
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 106
changing reg in insn 107
changing reg in insn 110
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 138
changing reg in insn 139
changing reg in insn 142
changing reg in insn 140
changing reg in insn 145
changing reg in insn 143
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 159
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 166
changing reg in insn 167
changing reg in insn 173
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 186
changing reg in insn 187
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 194
changing reg in insn 203
changing reg in insn 204
deleting insn with uid = 59.
deleting insn with uid = 78.
deleting insn with uid = 79.
deleting insn with uid = 116.
deleting insn with uid = 135.
deleting insn with uid = 136.
deleting insn with uid = 223.
deleting insn with uid = 225.
deleting insn with uid = 155.
deleting insn with uid = 229.
deleting insn with uid = 169.
deleting insn with uid = 234.
deleting insn with uid = 182.
deleting insn with uid = 239.
deleting insn with uid = 196.
deleting insn with uid = 244.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 168.
verify found no changes in insn with uid = 181.
verify found no changes in insn with uid = 195.


int ecc_correction(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={103d,95u} r1={25d,17u,16e} r2={9d,1u} r3={4d,4u} r4={9d,1u} r5={9d,1u} r6={1d,87u} r7={1d,13u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={51d,1u} r18={8d} r19={8d} r20={1d,1u,16e} r21={47d,46u} r22={15d,6u} r23={11d,2u} r24={10d,1u} r25={10d,1u} r26={10d,1u} r27={10d,1u} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} 
;;    total ref usage 1080{769d,279u,32e} in 207{199 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 189 190 191 192 193 194
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) ge2fitman_preproc.cpp:239 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:241 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DF 0 ax [189])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:242 128 {*movdf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [189])) ge2fitman_preproc.cpp:242 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DF 0 ax [190])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:242 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [190])) ge2fitman_preproc.cpp:242 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DF 0 ax [191])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [191])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DF 0 ax [192])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [192])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DF 0 ax [193])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 0 ax [193])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DF 0 ax [194])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:244 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 0 ax [194])) ge2fitman_preproc.cpp:244 128 {*movdf_internal}
     (nil))
(insn 22 21 220 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:247 90 {*movsi_internal}
     (nil))
(jump_insn 220 22 221 2 (set (pc)
        (label_ref 201)) ge2fitman_preproc.cpp:247 636 {jump}
     (nil)
 -> 201)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 221 220 206)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238
(code_label 206 221 25 3 62 "" [1 uses])
(note 25 206 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg:SI 0 ax [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:249 90 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 0 ax [orig:85 D.25598 ] [85])
        (sign_extend:DI (reg:SI 0 ax [195]))) ge2fitman_preproc.cpp:249 142 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg:DI 1 dx [orig:86 D.25598 ] [86])
                (ashift:DI (reg:DI 0 ax [orig:85 D.25598 ] [85])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:249 497 {*ashldi3_1}
     (nil))
(insn 29 28 30 3 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:249 89 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.25599 ] [87])
                (plus:DI (reg/f:DI 0 ax [196])
                    (reg:DI 1 dx [orig:86 D.25598 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:249 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.25598 ] [86]))
        (nil)))
(insn 31 30 32 3 (set (reg:SF 21 xmm0 [orig:88 D.25600 ] [88])
        (mem:SF (reg/f:DI 0 ax [orig:87 D.25599 ] [87]) [0 *_16+0 S4 A32])) ge2fitman_preproc.cpp:249 129 {*movsf_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DF 22 xmm1 [orig:89 D.25601 ] [89])
        (float_extend:DF (reg:SF 21 xmm0 [orig:88 D.25600 ] [88]))) ge2fitman_preproc.cpp:249 152 {*extendsfdf2_sse}
     (nil))
(insn 33 32 34 3 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:249 90 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:DI 0 ax [orig:90 D.25598 ] [90])
        (sign_extend:DI (reg:SI 0 ax [197]))) ge2fitman_preproc.cpp:249 142 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:DI 1 dx [orig:91 D.25598 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.25598 ] [90])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:249 497 {*ashldi3_1}
     (nil))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:249 89 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.25599 ] [92])
                (plus:DI (reg/f:DI 0 ax [198])
                    (reg:DI 1 dx [orig:91 D.25598 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:249 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.25598 ] [91]))
        (nil)))
(insn 38 37 39 3 (set (reg:SF 21 xmm0 [orig:93 D.25600 ] [93])
        (mem:SF (reg/f:DI 0 ax [orig:92 D.25599 ] [92]) [0 *_21+0 S4 A32])) ge2fitman_preproc.cpp:249 129 {*movsf_internal}
     (nil))
(insn 39 38 40 3 (set (reg:DF 21 xmm0 [orig:94 D.25601 ] [94])
        (float_extend:DF (reg:SF 21 xmm0 [orig:93 D.25600 ] [93]))) ge2fitman_preproc.cpp:249 152 {*extendsfdf2_sse}
     (nil))
(insn 40 39 41 3 (set (reg:DF 22 xmm1 [orig:95 D.25601 ] [95])
        (mult:DF (reg:DF 22 xmm1 [orig:89 D.25601 ] [89])
            (reg:DF 21 xmm0 [orig:94 D.25601 ] [94]))) ge2fitman_preproc.cpp:249 776 {*fop_df_comm_sse}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [199])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:250 90 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:DI 0 ax [orig:96 D.25602 ] [96])
        (sign_extend:DI (reg:SI 0 ax [199]))) ge2fitman_preproc.cpp:250 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 0 ax [orig:97 D.25602 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 D.25602 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 221 {*adddi_1}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 1 dx [orig:98 D.25602 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.25602 ] [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 497 {*ashldi3_1}
     (nil))
(insn 45 44 46 3 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:250 89 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.25599 ] [99])
                (plus:DI (reg/f:DI 0 ax [200])
                    (reg:DI 1 dx [orig:98 D.25602 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.25602 ] [98]))
        (nil)))
(insn 47 46 48 3 (set (reg:SF 21 xmm0 [orig:100 D.25600 ] [100])
        (mem:SF (reg/f:DI 0 ax [orig:99 D.25599 ] [99]) [0 *_28+0 S4 A32])) ge2fitman_preproc.cpp:250 129 {*movsf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DF 23 xmm2 [orig:101 D.25601 ] [101])
        (float_extend:DF (reg:SF 21 xmm0 [orig:100 D.25600 ] [100]))) ge2fitman_preproc.cpp:250 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 3 (set (reg:SI 0 ax [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:250 90 {*movsi_internal}
     (nil))
(insn 50 49 51 3 (set (reg:DI 0 ax [orig:102 D.25602 ] [102])
        (sign_extend:DI (reg:SI 0 ax [201]))) ge2fitman_preproc.cpp:250 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 3 (parallel [
            (set (reg:DI 0 ax [orig:103 D.25602 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 D.25602 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 221 {*adddi_1}
     (nil))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 1 dx [orig:104 D.25602 ] [104])
                (ashift:DI (reg:DI 0 ax [orig:103 D.25602 ] [103])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 497 {*ashldi3_1}
     (nil))
(insn 53 52 54 3 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:250 89 {*movdi_internal}
     (nil))
(insn 54 53 55 3 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.25599 ] [105])
                (plus:DI (reg/f:DI 0 ax [202])
                    (reg:DI 1 dx [orig:104 D.25602 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:104 D.25602 ] [104]))
        (nil)))
(insn 55 54 56 3 (set (reg:SF 21 xmm0 [orig:106 D.25600 ] [106])
        (mem:SF (reg/f:DI 0 ax [orig:105 D.25599 ] [105]) [0 *_34+0 S4 A32])) ge2fitman_preproc.cpp:250 129 {*movsf_internal}
     (nil))
(insn 56 55 57 3 (set (reg:DF 21 xmm0 [orig:107 D.25601 ] [107])
        (float_extend:DF (reg:SF 21 xmm0 [orig:106 D.25600 ] [106]))) ge2fitman_preproc.cpp:250 152 {*extendsfdf2_sse}
     (nil))
(insn 57 56 58 3 (set (reg:DF 21 xmm0 [orig:108 D.25601 ] [108])
        (mult:DF (reg:DF 21 xmm0 [orig:107 D.25601 ] [107])
            (reg:DF 23 xmm2 [orig:101 D.25601 ] [101]))) ge2fitman_preproc.cpp:250 776 {*fop_df_comm_sse}
     (nil))
(insn 58 57 60 3 (set (reg:DF 21 xmm0 [orig:109 D.25601 ] [109])
        (plus:DF (reg:DF 21 xmm0 [orig:108 D.25601 ] [108])
            (reg:DF 22 xmm1 [orig:95 D.25601 ] [95]))) ge2fitman_preproc.cpp:250 776 {*fop_df_comm_sse}
     (nil))
(call_insn 60 58 61 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:250 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 61 60 62 3 (set (reg:DF 0 ax [203])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:250 128 {*movdf_internal}
     (nil))
(insn 62 61 63 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [203])) ge2fitman_preproc.cpp:250 128 {*movdf_internal}
     (nil))
(insn 63 62 64 3 (set (reg:SI 0 ax [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:252 90 {*movsi_internal}
     (nil))
(insn 64 63 65 3 (set (reg:DI 0 ax [orig:110 D.25598 ] [110])
        (sign_extend:DI (reg:SI 0 ax [204]))) ge2fitman_preproc.cpp:252 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 3 (parallel [
            (set (reg:DI 1 dx [orig:111 D.25598 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 D.25598 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 3 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:252 89 {*movdi_internal}
     (nil))
(insn 67 66 68 3 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.25599 ] [112])
                (plus:DI (reg/f:DI 0 ax [205])
                    (reg:DI 1 dx [orig:111 D.25598 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.25598 ] [111]))
        (nil)))
(insn 68 67 69 3 (set (reg:SF 21 xmm0 [orig:113 D.25600 ] [113])
        (mem:SF (reg/f:DI 0 ax [orig:112 D.25599 ] [112]) [0 *_42+0 S4 A32])) ge2fitman_preproc.cpp:252 129 {*movsf_internal}
     (nil))
(insn 69 68 70 3 (set (reg:DF 22 xmm1 [orig:114 D.25601 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.25600 ] [113]))) ge2fitman_preproc.cpp:252 152 {*extendsfdf2_sse}
     (nil))
(insn 70 69 71 3 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:252 90 {*movsi_internal}
     (nil))
(insn 71 70 72 3 (set (reg:DI 0 ax [orig:115 D.25602 ] [115])
        (sign_extend:DI (reg:SI 0 ax [206]))) ge2fitman_preproc.cpp:252 142 {*extendsidi2_rex64}
     (nil))
(insn 72 71 73 3 (parallel [
            (set (reg:DI 0 ax [orig:116 D.25602 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 D.25602 ] [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 221 {*adddi_1}
     (nil))
(insn 73 72 74 3 (parallel [
            (set (reg:DI 1 dx [orig:117 D.25602 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 D.25602 ] [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 497 {*ashldi3_1}
     (nil))
(insn 74 73 75 3 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:252 89 {*movdi_internal}
     (nil))
(insn 75 74 76 3 (parallel [
            (set (reg/f:DI 0 ax [orig:118 D.25599 ] [118])
                (plus:DI (reg/f:DI 0 ax [207])
                    (reg:DI 1 dx [orig:117 D.25602 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:117 D.25602 ] [117]))
        (nil)))
(insn 76 75 77 3 (set (reg:SF 21 xmm0 [orig:119 D.25600 ] [119])
        (mem:SF (reg/f:DI 0 ax [orig:118 D.25599 ] [118]) [0 *_48+0 S4 A32])) ge2fitman_preproc.cpp:252 129 {*movsf_internal}
     (nil))
(insn 77 76 80 3 (set (reg:DF 21 xmm0 [orig:120 D.25601 ] [120])
        (float_extend:DF (reg:SF 21 xmm0 [orig:119 D.25600 ] [119]))) ge2fitman_preproc.cpp:252 152 {*extendsfdf2_sse}
     (nil))
(call_insn 80 77 81 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b4e6072e100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:252 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 81 80 82 3 (set (reg:DF 0 ax [208])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:252 128 {*movdf_internal}
     (nil))
(insn 82 81 83 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [208])) ge2fitman_preproc.cpp:252 128 {*movdf_internal}
     (nil))
(insn 83 82 84 3 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:254 90 {*movsi_internal}
     (nil))
(insn 84 83 85 3 (set (reg:DI 0 ax [orig:121 D.25598 ] [121])
        (sign_extend:DI (reg:SI 0 ax [209]))) ge2fitman_preproc.cpp:254 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 3 (parallel [
            (set (reg:DI 1 dx [orig:122 D.25598 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 D.25598 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:254 497 {*ashldi3_1}
     (nil))
(insn 86 85 87 3 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:254 89 {*movdi_internal}
     (nil))
(insn 87 86 88 3 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.25599 ] [123])
                (plus:DI (reg/f:DI 0 ax [210])
                    (reg:DI 1 dx [orig:122 D.25598 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:254 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:122 D.25598 ] [122]))
        (nil)))
(insn 88 87 89 3 (set (reg:SF 21 xmm0 [orig:124 D.25600 ] [124])
        (mem:SF (reg/f:DI 0 ax [orig:123 D.25599 ] [123]) [0 *_55+0 S4 A32])) ge2fitman_preproc.cpp:254 129 {*movsf_internal}
     (nil))
(insn 89 88 90 3 (set (reg:DF 22 xmm1 [orig:125 D.25601 ] [125])
        (float_extend:DF (reg:SF 21 xmm0 [orig:124 D.25600 ] [124]))) ge2fitman_preproc.cpp:254 152 {*extendsfdf2_sse}
     (nil))
(insn 90 89 91 3 (set (reg:SI 0 ax [211])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:254 90 {*movsi_internal}
     (nil))
(insn 91 90 92 3 (set (reg:DI 0 ax [orig:126 D.25598 ] [126])
        (sign_extend:DI (reg:SI 0 ax [211]))) ge2fitman_preproc.cpp:254 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 3 (parallel [
            (set (reg:DI 1 dx [orig:127 D.25598 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 D.25598 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:254 497 {*ashldi3_1}
     (nil))
(insn 93 92 94 3 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:254 89 {*movdi_internal}
     (nil))
(insn 94 93 95 3 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.25599 ] [128])
                (plus:DI (reg/f:DI 0 ax [212])
                    (reg:DI 1 dx [orig:127 D.25598 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:254 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.25598 ] [127]))
        (nil)))
(insn 95 94 96 3 (set (reg:SF 21 xmm0 [orig:129 D.25600 ] [129])
        (mem:SF (reg/f:DI 0 ax [orig:128 D.25599 ] [128]) [0 *_60+0 S4 A32])) ge2fitman_preproc.cpp:254 129 {*movsf_internal}
     (nil))
(insn 96 95 97 3 (set (reg:DF 21 xmm0 [orig:130 D.25601 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.25600 ] [129]))) ge2fitman_preproc.cpp:254 152 {*extendsfdf2_sse}
     (nil))
(insn 97 96 98 3 (set (reg:DF 22 xmm1 [orig:131 D.25601 ] [131])
        (mult:DF (reg:DF 22 xmm1 [orig:125 D.25601 ] [125])
            (reg:DF 21 xmm0 [orig:130 D.25601 ] [130]))) ge2fitman_preproc.cpp:254 776 {*fop_df_comm_sse}
     (nil))
(insn 98 97 99 3 (set (reg:SI 0 ax [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:255 90 {*movsi_internal}
     (nil))
(insn 99 98 100 3 (set (reg:DI 0 ax [orig:132 D.25602 ] [132])
        (sign_extend:DI (reg:SI 0 ax [213]))) ge2fitman_preproc.cpp:255 142 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 3 (parallel [
            (set (reg:DI 0 ax [orig:133 D.25602 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 D.25602 ] [132])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 221 {*adddi_1}
     (nil))
(insn 101 100 102 3 (parallel [
            (set (reg:DI 1 dx [orig:134 D.25602 ] [134])
                (ashift:DI (reg:DI 0 ax [orig:133 D.25602 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 497 {*ashldi3_1}
     (nil))
(insn 102 101 103 3 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:255 89 {*movdi_internal}
     (nil))
(insn 103 102 104 3 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.25599 ] [135])
                (plus:DI (reg/f:DI 0 ax [214])
                    (reg:DI 1 dx [orig:134 D.25602 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:134 D.25602 ] [134]))
        (nil)))
(insn 104 103 105 3 (set (reg:SF 21 xmm0 [orig:136 D.25600 ] [136])
        (mem:SF (reg/f:DI 0 ax [orig:135 D.25599 ] [135]) [0 *_67+0 S4 A32])) ge2fitman_preproc.cpp:255 129 {*movsf_internal}
     (nil))
(insn 105 104 106 3 (set (reg:DF 23 xmm2 [orig:137 D.25601 ] [137])
        (float_extend:DF (reg:SF 21 xmm0 [orig:136 D.25600 ] [136]))) ge2fitman_preproc.cpp:255 152 {*extendsfdf2_sse}
     (nil))
(insn 106 105 107 3 (set (reg:SI 0 ax [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:255 90 {*movsi_internal}
     (nil))
(insn 107 106 108 3 (set (reg:DI 0 ax [orig:138 D.25602 ] [138])
        (sign_extend:DI (reg:SI 0 ax [215]))) ge2fitman_preproc.cpp:255 142 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 3 (parallel [
            (set (reg:DI 0 ax [orig:139 D.25602 ] [139])
                (plus:DI (reg:DI 0 ax [orig:138 D.25602 ] [138])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 221 {*adddi_1}
     (nil))
(insn 109 108 110 3 (parallel [
            (set (reg:DI 1 dx [orig:140 D.25602 ] [140])
                (ashift:DI (reg:DI 0 ax [orig:139 D.25602 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 497 {*ashldi3_1}
     (nil))
(insn 110 109 111 3 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:255 89 {*movdi_internal}
     (nil))
(insn 111 110 112 3 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.25599 ] [141])
                (plus:DI (reg/f:DI 0 ax [216])
                    (reg:DI 1 dx [orig:140 D.25602 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:140 D.25602 ] [140]))
        (nil)))
(insn 112 111 113 3 (set (reg:SF 21 xmm0 [orig:142 D.25600 ] [142])
        (mem:SF (reg/f:DI 0 ax [orig:141 D.25599 ] [141]) [0 *_73+0 S4 A32])) ge2fitman_preproc.cpp:255 129 {*movsf_internal}
     (nil))
(insn 113 112 114 3 (set (reg:DF 21 xmm0 [orig:143 D.25601 ] [143])
        (float_extend:DF (reg:SF 21 xmm0 [orig:142 D.25600 ] [142]))) ge2fitman_preproc.cpp:255 152 {*extendsfdf2_sse}
     (nil))
(insn 114 113 115 3 (set (reg:DF 21 xmm0 [orig:144 D.25601 ] [144])
        (mult:DF (reg:DF 21 xmm0 [orig:143 D.25601 ] [143])
            (reg:DF 23 xmm2 [orig:137 D.25601 ] [137]))) ge2fitman_preproc.cpp:255 776 {*fop_df_comm_sse}
     (nil))
(insn 115 114 117 3 (set (reg:DF 21 xmm0 [orig:145 D.25601 ] [145])
        (plus:DF (reg:DF 21 xmm0 [orig:144 D.25601 ] [144])
            (reg:DF 22 xmm1 [orig:131 D.25601 ] [131]))) ge2fitman_preproc.cpp:255 776 {*fop_df_comm_sse}
     (nil))
(call_insn 117 115 118 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:255 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 118 117 119 3 (set (reg:DF 0 ax [217])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:255 128 {*movdf_internal}
     (nil))
(insn 119 118 120 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [217])) ge2fitman_preproc.cpp:255 128 {*movdf_internal}
     (nil))
(insn 120 119 121 3 (set (reg:SI 0 ax [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:257 90 {*movsi_internal}
     (nil))
(insn 121 120 122 3 (set (reg:DI 0 ax [orig:146 D.25598 ] [146])
        (sign_extend:DI (reg:SI 0 ax [218]))) ge2fitman_preproc.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 122 121 123 3 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25598 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:146 D.25598 ] [146])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 123 122 124 3 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:257 89 {*movdi_internal}
     (nil))
(insn 124 123 125 3 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.25599 ] [148])
                (plus:DI (reg/f:DI 0 ax [219])
                    (reg:DI 1 dx [orig:147 D.25598 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.25598 ] [147]))
        (nil)))
(insn 125 124 126 3 (set (reg:SF 21 xmm0 [orig:149 D.25600 ] [149])
        (mem:SF (reg/f:DI 0 ax [orig:148 D.25599 ] [148]) [0 *_81+0 S4 A32])) ge2fitman_preproc.cpp:257 129 {*movsf_internal}
     (nil))
(insn 126 125 127 3 (set (reg:DF 22 xmm1 [orig:150 D.25601 ] [150])
        (float_extend:DF (reg:SF 21 xmm0 [orig:149 D.25600 ] [149]))) ge2fitman_preproc.cpp:257 152 {*extendsfdf2_sse}
     (nil))
(insn 127 126 128 3 (set (reg:SI 0 ax [220])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:257 90 {*movsi_internal}
     (nil))
(insn 128 127 129 3 (set (reg:DI 0 ax [orig:151 D.25602 ] [151])
        (sign_extend:DI (reg:SI 0 ax [220]))) ge2fitman_preproc.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 3 (parallel [
            (set (reg:DI 0 ax [orig:152 D.25602 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 D.25602 ] [151])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 221 {*adddi_1}
     (nil))
(insn 130 129 131 3 (parallel [
            (set (reg:DI 1 dx [orig:153 D.25602 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 D.25602 ] [152])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 131 130 132 3 (set (reg/f:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:257 89 {*movdi_internal}
     (nil))
(insn 132 131 133 3 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.25599 ] [154])
                (plus:DI (reg/f:DI 0 ax [221])
                    (reg:DI 1 dx [orig:153 D.25602 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:153 D.25602 ] [153]))
        (nil)))
(insn 133 132 134 3 (set (reg:SF 21 xmm0 [orig:155 D.25600 ] [155])
        (mem:SF (reg/f:DI 0 ax [orig:154 D.25599 ] [154]) [0 *_87+0 S4 A32])) ge2fitman_preproc.cpp:257 129 {*movsf_internal}
     (nil))
(insn 134 133 137 3 (set (reg:DF 21 xmm0 [orig:156 D.25601 ] [156])
        (float_extend:DF (reg:SF 21 xmm0 [orig:155 D.25600 ] [155]))) ge2fitman_preproc.cpp:257 152 {*extendsfdf2_sse}
     (nil))
(call_insn 137 134 138 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b4e6072e100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:257 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 138 137 139 3 (set (reg:DF 0 ax [222])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:257 128 {*movdf_internal}
     (nil))
(insn 139 138 140 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [222])) ge2fitman_preproc.cpp:257 128 {*movdf_internal}
     (nil))
(insn 140 139 141 3 (set (reg:DF 21 xmm0 [224])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])) ge2fitman_preproc.cpp:259 128 {*movdf_internal}
     (nil))
(insn 141 140 224 3 (set (reg:DF 21 xmm0 [223])
        (minus:DF (reg:DF 21 xmm0 [223])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:259 783 {*fop_df_1_sse}
     (nil))
(insn 224 141 142 3 (set (reg:DF 0 ax [223])
        (reg:DF 21 xmm0 [223])) ge2fitman_preproc.cpp:259 128 {*movdf_internal}
     (nil))
(insn 142 224 143 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 0 ax [223])) ge2fitman_preproc.cpp:259 128 {*movdf_internal}
     (nil))
(insn 143 142 144 3 (set (reg:DF 21 xmm0 [226])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])) ge2fitman_preproc.cpp:260 128 {*movdf_internal}
     (nil))
(insn 144 143 226 3 (set (reg:DF 21 xmm0 [225])
        (minus:DF (reg:DF 21 xmm0 [225])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:260 783 {*fop_df_1_sse}
     (nil))
(insn 226 144 145 3 (set (reg:DF 0 ax [225])
        (reg:DF 21 xmm0 [225])) ge2fitman_preproc.cpp:260 128 {*movdf_internal}
     (nil))
(insn 145 226 146 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 0 ax [225])) ge2fitman_preproc.cpp:260 128 {*movdf_internal}
     (nil))
(insn 146 145 147 3 (set (reg:SI 0 ax [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:262 90 {*movsi_internal}
     (nil))
(insn 147 146 148 3 (set (reg:DI 0 ax [orig:157 D.25598 ] [157])
        (sign_extend:DI (reg:SI 0 ax [227]))) ge2fitman_preproc.cpp:262 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 3 (parallel [
            (set (reg:DI 1 dx [orig:158 D.25598 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.25598 ] [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:262 497 {*ashldi3_1}
     (nil))
(insn 149 148 150 3 (set (reg/f:DI 0 ax [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:262 89 {*movdi_internal}
     (nil))
(insn 150 149 151 3 (parallel [
            (set (reg/f:DI 3 bx [orig:159 D.25599 ] [159])
                (plus:DI (reg:DI 1 dx [orig:158 D.25598 ] [158])
                    (reg/f:DI 0 ax [228])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:262 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.25598 ] [158]))
        (nil)))
(insn 151 150 227 3 (set (reg:SF 24 xmm3 [orig:160 D.25600 ] [160])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64]))) ge2fitman_preproc.cpp:262 157 {*truncdfsf_fast_sse}
     (nil))
(insn 227 151 258 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 24 xmm3 [orig:160 D.25600 ] [160])) ge2fitman_preproc.cpp:262 129 {*movsf_internal}
     (nil))
(note 258 227 250 3 NOTE_INSN_DELETED)
(note 250 258 152 3 NOTE_INSN_DELETED)
(insn 152 250 153 3 (set (reg:DF 0 ax [229])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) ge2fitman_preproc.cpp:262 128 {*movdf_internal}
     (nil))
(insn 153 152 228 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [229])) ge2fitman_preproc.cpp:262 128 {*movdf_internal}
     (nil))
(insn 228 153 154 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) ge2fitman_preproc.cpp:262 128 {*movdf_internal}
     (nil))
(call_insn/u 154 228 156 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b4e60733400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:262 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 156 154 231 3 (set (reg:SF 21 xmm0 [orig:162 D.25600 ] [162])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:161 D.25601 ] [161]))) ge2fitman_preproc.cpp:262 157 {*truncdfsf_fast_sse}
     (nil))
(note 231 156 254 3 NOTE_INSN_DELETED)
(note 254 231 157 3 NOTE_INSN_DELETED)
(insn 157 254 230 3 (set (reg:SF 21 xmm0 [orig:163 D.25600 ] [163])
        (mult:SF (reg:SF 21 xmm0 [orig:163 D.25600 ] [163])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) ge2fitman_preproc.cpp:262 775 {*fop_sf_comm_sse}
     (nil))
(insn 230 157 158 3 (set (reg:SF 0 ax [orig:163 D.25600 ] [163])
        (reg:SF 21 xmm0 [orig:163 D.25600 ] [163])) ge2fitman_preproc.cpp:262 129 {*movsf_internal}
     (nil))
(insn 158 230 159 3 (set (mem:SF (reg/f:DI 3 bx [orig:159 D.25599 ] [159]) [0 *_95+0 S4 A32])
        (reg:SF 0 ax [orig:163 D.25600 ] [163])) ge2fitman_preproc.cpp:262 129 {*movsf_internal}
     (nil))
(insn 159 158 160 3 (set (reg:SI 0 ax [230])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:263 90 {*movsi_internal}
     (nil))
(insn 160 159 161 3 (set (reg:DI 0 ax [orig:164 D.25602 ] [164])
        (sign_extend:DI (reg:SI 0 ax [230]))) ge2fitman_preproc.cpp:263 142 {*extendsidi2_rex64}
     (nil))
(insn 161 160 162 3 (parallel [
            (set (reg:DI 0 ax [orig:165 D.25602 ] [165])
                (plus:DI (reg:DI 0 ax [orig:164 D.25602 ] [164])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:263 221 {*adddi_1}
     (nil))
(insn 162 161 163 3 (parallel [
            (set (reg:DI 1 dx [orig:166 D.25602 ] [166])
                (ashift:DI (reg:DI 0 ax [orig:165 D.25602 ] [165])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:263 497 {*ashldi3_1}
     (nil))
(insn 163 162 164 3 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:263 89 {*movdi_internal}
     (nil))
(insn 164 163 165 3 (parallel [
            (set (reg/f:DI 3 bx [orig:167 D.25599 ] [167])
                (plus:DI (reg:DI 1 dx [orig:166 D.25602 ] [166])
                    (reg/f:DI 0 ax [231])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:263 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.25602 ] [166]))
        (nil)))
(insn 165 164 232 3 (set (reg:SF 25 xmm4 [orig:168 D.25600 ] [168])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64]))) ge2fitman_preproc.cpp:263 157 {*truncdfsf_fast_sse}
     (nil))
(insn 232 165 257 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 25 xmm4 [orig:168 D.25600 ] [168])) ge2fitman_preproc.cpp:263 129 {*movsf_internal}
     (nil))
(note 257 232 249 3 NOTE_INSN_DELETED)
(note 249 257 166 3 NOTE_INSN_DELETED)
(insn 166 249 167 3 (set (reg:DF 0 ax [232])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) ge2fitman_preproc.cpp:263 128 {*movdf_internal}
     (nil))
(insn 167 166 233 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [232])) ge2fitman_preproc.cpp:263 128 {*movdf_internal}
     (nil))
(insn 233 167 168 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) ge2fitman_preproc.cpp:263 128 {*movdf_internal}
     (nil))
(call_insn/u 168 233 170 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b4e60771e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:263 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 170 168 236 3 (set (reg:SF 21 xmm0 [orig:170 D.25600 ] [170])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:169 D.25601 ] [169]))) ge2fitman_preproc.cpp:263 157 {*truncdfsf_fast_sse}
     (nil))
(note 236 170 253 3 NOTE_INSN_DELETED)
(note 253 236 171 3 NOTE_INSN_DELETED)
(insn 171 253 235 3 (set (reg:SF 21 xmm0 [orig:171 D.25600 ] [171])
        (mult:SF (reg:SF 21 xmm0 [orig:171 D.25600 ] [171])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) ge2fitman_preproc.cpp:263 775 {*fop_sf_comm_sse}
     (nil))
(insn 235 171 172 3 (set (reg:SF 0 ax [orig:171 D.25600 ] [171])
        (reg:SF 21 xmm0 [orig:171 D.25600 ] [171])) ge2fitman_preproc.cpp:263 129 {*movsf_internal}
     (nil))
(insn 172 235 173 3 (set (mem:SF (reg/f:DI 3 bx [orig:167 D.25599 ] [167]) [0 *_103+0 S4 A32])
        (reg:SF 0 ax [orig:171 D.25600 ] [171])) ge2fitman_preproc.cpp:263 129 {*movsf_internal}
     (nil))
(insn 173 172 174 3 (set (reg:SI 0 ax [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:265 90 {*movsi_internal}
     (nil))
(insn 174 173 175 3 (set (reg:DI 0 ax [orig:172 D.25598 ] [172])
        (sign_extend:DI (reg:SI 0 ax [233]))) ge2fitman_preproc.cpp:265 142 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 3 (parallel [
            (set (reg:DI 1 dx [orig:173 D.25598 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.25598 ] [172])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:265 497 {*ashldi3_1}
     (nil))
(insn 176 175 177 3 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:265 89 {*movdi_internal}
     (nil))
(insn 177 176 178 3 (parallel [
            (set (reg/f:DI 3 bx [orig:174 D.25599 ] [174])
                (plus:DI (reg:DI 1 dx [orig:173 D.25598 ] [173])
                    (reg/f:DI 0 ax [234])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:265 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:173 D.25598 ] [173]))
        (nil)))
(insn 178 177 237 3 (set (reg:SF 26 xmm5 [orig:175 D.25600 ] [175])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:265 157 {*truncdfsf_fast_sse}
     (nil))
(insn 237 178 256 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 26 xmm5 [orig:175 D.25600 ] [175])) ge2fitman_preproc.cpp:265 129 {*movsf_internal}
     (nil))
(note 256 237 248 3 NOTE_INSN_DELETED)
(note 248 256 179 3 NOTE_INSN_DELETED)
(insn 179 248 180 3 (set (reg:DF 0 ax [235])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) ge2fitman_preproc.cpp:265 128 {*movdf_internal}
     (nil))
(insn 180 179 238 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [235])) ge2fitman_preproc.cpp:265 128 {*movdf_internal}
     (nil))
(insn 238 180 181 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) ge2fitman_preproc.cpp:265 128 {*movdf_internal}
     (nil))
(call_insn/u 181 238 183 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b4e60733400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:265 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 183 181 241 3 (set (reg:SF 21 xmm0 [orig:177 D.25600 ] [177])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:176 D.25601 ] [176]))) ge2fitman_preproc.cpp:265 157 {*truncdfsf_fast_sse}
     (nil))
(note 241 183 252 3 NOTE_INSN_DELETED)
(note 252 241 184 3 NOTE_INSN_DELETED)
(insn 184 252 240 3 (set (reg:SF 21 xmm0 [orig:178 D.25600 ] [178])
        (mult:SF (reg:SF 21 xmm0 [orig:178 D.25600 ] [178])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) ge2fitman_preproc.cpp:265 775 {*fop_sf_comm_sse}
     (nil))
(insn 240 184 185 3 (set (reg:SF 0 ax [orig:178 D.25600 ] [178])
        (reg:SF 21 xmm0 [orig:178 D.25600 ] [178])) ge2fitman_preproc.cpp:265 129 {*movsf_internal}
     (nil))
(insn 185 240 186 3 (set (mem:SF (reg/f:DI 3 bx [orig:174 D.25599 ] [174]) [0 *_110+0 S4 A32])
        (reg:SF 0 ax [orig:178 D.25600 ] [178])) ge2fitman_preproc.cpp:265 129 {*movsf_internal}
     (nil))
(insn 186 185 187 3 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:266 90 {*movsi_internal}
     (nil))
(insn 187 186 188 3 (set (reg:DI 0 ax [orig:179 D.25602 ] [179])
        (sign_extend:DI (reg:SI 0 ax [236]))) ge2fitman_preproc.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 3 (parallel [
            (set (reg:DI 0 ax [orig:180 D.25602 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 D.25602 ] [179])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:266 221 {*adddi_1}
     (nil))
(insn 189 188 190 3 (parallel [
            (set (reg:DI 1 dx [orig:181 D.25602 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:180 D.25602 ] [180])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:266 497 {*ashldi3_1}
     (nil))
(insn 190 189 191 3 (set (reg/f:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:266 89 {*movdi_internal}
     (nil))
(insn 191 190 192 3 (parallel [
            (set (reg/f:DI 3 bx [orig:182 D.25599 ] [182])
                (plus:DI (reg:DI 1 dx [orig:181 D.25602 ] [181])
                    (reg/f:DI 0 ax [237])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:266 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:181 D.25602 ] [181]))
        (nil)))
(insn 192 191 242 3 (set (reg:SF 27 xmm6 [orig:183 D.25600 ] [183])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:266 157 {*truncdfsf_fast_sse}
     (nil))
(insn 242 192 255 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 27 xmm6 [orig:183 D.25600 ] [183])) ge2fitman_preproc.cpp:266 129 {*movsf_internal}
     (nil))
(note 255 242 247 3 NOTE_INSN_DELETED)
(note 247 255 193 3 NOTE_INSN_DELETED)
(insn 193 247 194 3 (set (reg:DF 0 ax [238])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) ge2fitman_preproc.cpp:266 128 {*movdf_internal}
     (nil))
(insn 194 193 243 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [238])) ge2fitman_preproc.cpp:266 128 {*movdf_internal}
     (nil))
(insn 243 194 195 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) ge2fitman_preproc.cpp:266 128 {*movdf_internal}
     (nil))
(call_insn/u 195 243 197 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b4e60771e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:266 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 197 195 246 3 (set (reg:SF 21 xmm0 [orig:185 D.25600 ] [185])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:184 D.25601 ] [184]))) ge2fitman_preproc.cpp:266 157 {*truncdfsf_fast_sse}
     (nil))
(note 246 197 251 3 NOTE_INSN_DELETED)
(note 251 246 198 3 NOTE_INSN_DELETED)
(insn 198 251 245 3 (set (reg:SF 21 xmm0 [orig:186 D.25600 ] [186])
        (mult:SF (reg:SF 21 xmm0 [orig:186 D.25600 ] [186])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) ge2fitman_preproc.cpp:266 775 {*fop_sf_comm_sse}
     (nil))
(insn 245 198 199 3 (set (reg:SF 0 ax [orig:186 D.25600 ] [186])
        (reg:SF 21 xmm0 [orig:186 D.25600 ] [186])) ge2fitman_preproc.cpp:266 129 {*movsf_internal}
     (nil))
(insn 199 245 200 3 (set (mem:SF (reg/f:DI 3 bx [orig:182 D.25599 ] [182]) [0 *_118+0 S4 A32])
        (reg:SF 0 ax [orig:186 D.25600 ] [186])) ge2fitman_preproc.cpp:266 129 {*movsf_internal}
     (nil))
(insn 200 199 201 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:247 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 239
(code_label 201 200 202 4 61 "" [1 uses])
(note 202 201 203 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 4 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:247 89 {*movdi_internal}
     (nil))
(insn 204 203 205 4 (set (reg:SI 0 ax [orig:83 D.25597 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [239])
                (const_int 324 [0x144])) [0 procpar_info_10(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:247 90 {*movsi_internal}
     (nil))
(insn 205 204 207 4 (parallel [
            (set (reg:SI 0 ax [orig:84 D.25597 ] [84])
                (ashift:SI (reg:SI 0 ax [orig:83 D.25597 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:247 496 {*ashlsi3_1}
     (nil))
(insn 207 205 208 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:84 D.25597 ] [84])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:247 7 {*cmpsi_1}
     (nil))
(jump_insn 208 207 209 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) ge2fitman_preproc.cpp:247 596 {*jcc_1}
     (nil)
 -> 206)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 187 188
(note 209 208 210 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 213 5 (set (reg:SI 0 ax [orig:187 D.25597 ] [187])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:269 90 {*movsi_internal}
     (nil))
(insn 213 210 217 5 (set (reg:SI 0 ax [orig:188 <retval> ] [188])
        (reg:SI 0 ax [orig:187 D.25597 ] [187])) ge2fitman_preproc.cpp:269 90 {*movsi_internal}
     (nil))
(insn 217 213 218 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:188 <retval> ] [188])) ge2fitman_preproc.cpp:271 90 {*movsi_internal}
     (nil))
(insn 218 217 222 5 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:271 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 222 218 0 NOTE_INSN_DELETED)

;; Function int zero_fill(float*, float*, Procpar_info*, Preprocess*) (_Z9zero_fillPfS_P12Procpar_infoP10Preprocess, funcdef_no=1024, decl_uid=24021, symbol_order=231)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 47:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 56
changing reg in insn 20
changing reg in insn 59
changing reg in insn 11
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 26
changing reg in insn 27
changing reg in insn 51
changing reg in insn 53
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 59
changing reg in insn 63
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
starting the processing of deferred insns
ending the processing of deferred insns


int zero_fill(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={24d,22u} r1={7d,6u,2e} r2={2d,1u} r4={2d,1u} r5={3d,2u} r6={1d,25u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={11d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 197{124d,69u,4e} in 45{44 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 97 98
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:274 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:274 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:274 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) ge2fitman_preproc.cpp:274 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:276 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:280 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [orig:84 D.25603 ] [84])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 24 [0x18])) [0 preprocess_4(D)->data_zero_fill+0 S4 A32])) ge2fitman_preproc.cpp:280 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:280 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:85 D.25603 ] [85])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [98])
                (const_int 324 [0x144])) [0 procpar_info_6(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:280 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 0 ax [orig:86 D.25603 ] [86])
                (ashift:SI (reg:SI 0 ax [orig:85 D.25603 ] [85])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:280 496 {*ashlsi3_1}
     (nil))
(insn 15 14 16 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:84 D.25603 ] [84])
            (reg:SI 0 ax [orig:86 D.25603 ] [86]))) ge2fitman_preproc.cpp:280 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) ge2fitman_preproc.cpp:280 596 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b4e61eafb48 *.LC12>)) ge2fitman_preproc.cpp:281 89 {*movdi_internal}
     (nil))
(call_insn 19 18 20 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4e607ad900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:281 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 19 66 3 (set (reg:SI 0 ax [orig:83 D.25603 ] [83])
        (const_int 0 [0])) ge2fitman_preproc.cpp:282 90 {*movsi_internal}
     (nil))
(jump_insn 66 20 67 3 (set (pc)
        (label_ref 57)) ge2fitman_preproc.cpp:282 636 {jump}
     (nil)
 -> 57)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 67 66 23)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 99 100
(code_label 23 67 24 4 65 "" [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:285 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 0 ax [orig:87 D.25603 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 324 [0x144])) [0 procpar_info_6(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:285 90 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:SI 0 ax [100])
                (ashift:SI (reg:SI 0 ax [orig:87 D.25603 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:285 496 {*ashlsi3_1}
     (nil))
(insn 28 27 68 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (reg:SI 0 ax [100])) ge2fitman_preproc.cpp:285 90 {*movsi_internal}
     (nil))
(jump_insn 68 28 69 4 (set (pc)
        (label_ref 48)) ge2fitman_preproc.cpp:285 636 {jump}
     (nil)
 -> 48)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 69 68 52)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 101 102 103 104 105 106
(code_label 52 69 31 5 68 "" [1 uses])
(note 31 52 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:287 90 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 0 ax [orig:89 D.25604 ] [89])
        (sign_extend:DI (reg:SI 0 ax [101]))) ge2fitman_preproc.cpp:287 142 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg:DI 1 dx [orig:90 D.25604 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.25604 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:287 497 {*ashldi3_1}
     (nil))
(insn 35 34 36 5 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:287 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (reg/f:DI 1 dx [orig:91 D.25605 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 D.25604 ] [90])
                    (reg/f:DI 0 ax [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:287 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.25604 ] [90]))
        (nil)))
(insn 37 36 38 5 (set (reg:SF 0 ax [103])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:287 129 {*movsf_internal}
     (nil))
(insn 38 37 39 5 (set (mem:SF (reg/f:DI 1 dx [orig:91 D.25605 ] [91]) [0 *_16+0 S4 A32])
        (reg:SF 0 ax [103])) ge2fitman_preproc.cpp:287 129 {*movsf_internal}
     (nil))
(insn 39 38 40 5 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:288 90 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 0 ax [orig:92 D.25606 ] [92])
        (sign_extend:DI (reg:SI 0 ax [104]))) ge2fitman_preproc.cpp:288 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 5 (parallel [
            (set (reg:DI 0 ax [orig:93 D.25606 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 D.25606 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:288 221 {*adddi_1}
     (nil))
(insn 42 41 43 5 (parallel [
            (set (reg:DI 1 dx [orig:94 D.25606 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.25606 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:288 497 {*ashldi3_1}
     (nil))
(insn 43 42 44 5 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:288 89 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (parallel [
            (set (reg/f:DI 1 dx [orig:95 D.25605 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 D.25606 ] [94])
                    (reg/f:DI 0 ax [105])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:288 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.25606 ] [94]))
        (nil)))
(insn 45 44 46 5 (set (reg:SF 0 ax [106])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:288 129 {*movsf_internal}
     (nil))
(insn 46 45 47 5 (set (mem:SF (reg/f:DI 1 dx [orig:95 D.25605 ] [95]) [0 *_20+0 S4 A32])
        (reg:SF 0 ax [106])) ge2fitman_preproc.cpp:288 129 {*movsf_internal}
     (nil))
(insn 47 46 48 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:285 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 107
(code_label 48 47 49 6 67 "" [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:285 89 {*movdi_internal}
     (nil))
(insn 51 50 53 6 (set (reg:SI 0 ax [orig:88 D.25603 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 24 [0x18])) [0 preprocess_4(D)->data_zero_fill+0 S4 A32])) ge2fitman_preproc.cpp:285 90 {*movsi_internal}
     (nil))
(insn 53 51 54 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.25603 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:285 7 {*cmpsi_1}
     (nil))
(jump_insn 54 53 55 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) ge2fitman_preproc.cpp:285 596 {*jcc_1}
     (nil)
 -> 52)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 55 54 56 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 7 (set (reg:SI 0 ax [orig:83 D.25603 ] [83])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:291 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 96
(code_label 57 56 58 8 66 "" [1 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 63 8 (set (reg:SI 0 ax [orig:96 <retval> ] [96])
        (reg:SI 0 ax [orig:83 D.25603 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 63 59 64 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:96 <retval> ] [96])) ge2fitman_preproc.cpp:293 90 {*movsi_internal}
     (nil))
(insn 64 63 70 8 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:293 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 70 64 0 NOTE_INSN_DELETED)

;; Function int normalize(float*, float*, Procpar_info*) (_Z9normalizePfS_P12Procpar_info, funcdef_no=1025, decl_uid=23999, symbol_order=232)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 10:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 22:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 29:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 52:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 53:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 54:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 61:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 62:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 65:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 86:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 88:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=155 from oldreg=118, assigning class SSE_REGS to r155
   88: r155:SF=r155:SF/r117:SF
      REG_DEAD r117:SF
      REG_DEAD r116:SF
    Inserting insn reload before:
  134: r155:SF=r116:SF
    Inserting insn reload after:
  135: r118:SF=r155:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 135:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 102:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 104:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=156 from oldreg=129, assigning class SSE_REGS to r156
  104: r156:SF=r156:SF/r128:SF
      REG_DEAD r128:SF
      REG_DEAD r127:SF
    Inserting insn reload before:
  136: r156:SF=r127:SF
    Inserting insn reload after:
  137: r129:SF=r156:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 137:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 105:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 106:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 124: point = 0
   Insn 123: point = 0
   Insn 119: point = 1
   Insn 116: point = 3
  BB 9
   Insn 114: point = 4
   Insn 113: point = 4
   Insn 111: point = 5
   Insn 110: point = 7
   Insn 109: point = 9
  BB 7
   Insn 131: point = 10
   Insn 72: point = 10
  BB 6
   Insn 70: point = 10
   Insn 69: point = 10
  BB 2
   Insn 129: point = 10
   Insn 13: point = 10
   Insn 12: point = 10
   Insn 11: point = 11
   Insn 10: point = 12
   Insn 9: point = 13
   Insn 8: point = 14
   Insn 4: point = 14
   Insn 3: point = 14
   Insn 2: point = 14
  BB 5
   Insn 65: point = 14
  BB 4
   Insn 62: point = 14
   Insn 61: point = 15
  BB 3
   Insn 56: point = 16
   Insn 55: point = 16
   Insn 54: point = 17
   Insn 53: point = 18
   Insn 52: point = 19
   Insn 51: point = 20
   Insn 50: point = 20
   Insn 49: point = 21
   Insn 48: point = 23
   Insn 47: point = 25
   Insn 46: point = 27
   Insn 45: point = 29
   Insn 44: point = 31
   Insn 43: point = 32
   Insn 42: point = 34
   Insn 41: point = 36
   Insn 40: point = 38
   Insn 39: point = 39
   Insn 38: point = 41
   Insn 37: point = 43
   Insn 36: point = 45
   Insn 35: point = 46
   Insn 34: point = 48
   Insn 33: point = 50
   Insn 32: point = 52
   Insn 31: point = 53
   Insn 30: point = 55
   Insn 29: point = 57
   Insn 28: point = 59
   Insn 27: point = 61
   Insn 26: point = 62
   Insn 25: point = 64
   Insn 24: point = 66
   Insn 23: point = 67
   Insn 22: point = 69
   Insn 21: point = 71
   Insn 20: point = 73
   Insn 19: point = 74
   Insn 18: point = 76
   Insn 17: point = 78
  BB 8
   Insn 106: point = 79
   Insn 105: point = 79
   Insn 137: point = 80
	Hard reg 0 is preferable by r156 with profit 1
   Insn 104: point = 82
   Insn 136: point = 83
	Hard reg 0 is preferable by r156 with profit 1
	Hard reg 22 is preferable by r156 with profit 1
   Insn 103: point = 85
   Insn 102: point = 86
   Insn 101: point = 88
   Insn 100: point = 90
   Insn 99: point = 91
   Insn 98: point = 93
   Insn 97: point = 95
   Insn 96: point = 97
   Insn 95: point = 98
   Insn 94: point = 100
   Insn 93: point = 101
   Insn 92: point = 103
   Insn 91: point = 105
   Insn 90: point = 107
   Insn 89: point = 108
   Insn 135: point = 109
	Hard reg 0 is preferable by r155 with profit 1
   Insn 88: point = 111
   Insn 134: point = 112
	Hard reg 0 is preferable by r155 with profit 1
	Hard reg 22 is preferable by r155 with profit 1
   Insn 87: point = 114
   Insn 86: point = 115
   Insn 85: point = 117
   Insn 84: point = 119
   Insn 83: point = 120
   Insn 82: point = 122
   Insn 81: point = 124
   Insn 80: point = 125
   Insn 79: point = 127
   Insn 78: point = 128
   Insn 77: point = 130
   Insn 76: point = 132
 r83: [75..76]
 r84: [72..74]
 r85: [70..71]
 r86: [68..69]
 r87: [54..67]
 r88: [63..64]
 r89: [60..62]
 r90: [58..59]
 r91: [56..57]
 r92: [54..55]
 r93: [22..53]
 r94: [49..50]
 r95: [47..48]
 r96: [44..46]
 r97: [42..43]
 r98: [40..41]
 r99: [24..39]
 r100: [35..36]
 r101: [33..34]
 r102: [30..32]
 r103: [28..29]
 r104: [26..27]
 r105: [24..25]
 r106: [22..23]
 r107: [20..21]
 r108: [6..7]
 r109: [4..5]
 r110: [129..130]
 r111: [126..128]
 r112: [108..125]
 r113: [121..122]
 r114: [118..120]
 r115: [116..117]
 r116: [113..115]
 r117: [111..114]
 r118: [108..109]
 r119: [104..105]
 r120: [102..103]
 r121: [99..101]
 r122: [79..98]
 r123: [94..95]
 r124: [92..93]
 r125: [89..91]
 r126: [87..88]
 r127: [84..86]
 r128: [82..85]
 r129: [79..80]
 r130: [2..3]
 r131: [0..1]
 r132: [12..13]
 r133: [10..11]
 r134: [77..78]
 r135: [72..73]
 r136: [65..66]
 r137: [60..61]
 r138: [51..52]
 r139: [44..45]
 r140: [37..38]
 r141: [30..31]
 r142: [18..19]
 r143: [16..17]
 r144: [14..15]
 r145: [131..132]
 r146: [126..127]
 r147: [123..124]
 r148: [118..119]
 r149: [106..107]
 r150: [99..100]
 r151: [96..97]
 r152: [89..90]
 r153: [8..9]
 r155: [110..112]
 r156: [81..83]
Compressing live ranges: from 133 to 116 - 87%
Ranges after the compression:
 r83: [68..69]
 r84: [66..67]
 r85: [64..65]
 r86: [62..63]
 r87: [50..61]
 r88: [58..59]
 r89: [56..57]
 r90: [54..55]
 r91: [52..53]
 r92: [50..51]
 r93: [22..49]
 r94: [46..47]
 r95: [44..45]
 r96: [42..43]
 r97: [40..41]
 r98: [38..39]
 r99: [24..37]
 r100: [34..35]
 r101: [32..33]
 r102: [30..31]
 r103: [28..29]
 r104: [26..27]
 r105: [24..25]
 r106: [22..23]
 r107: [20..21]
 r108: [6..7]
 r109: [4..5]
 r110: [112..113]
 r111: [110..111]
 r112: [96..109]
 r113: [106..107]
 r114: [104..105]
 r115: [102..103]
 r116: [100..101]
 r117: [98..101]
 r118: [96..97]
 r119: [92..93]
 r120: [90..91]
 r121: [88..89]
 r122: [72..87]
 r123: [84..85]
 r124: [82..83]
 r125: [80..81]
 r126: [78..79]
 r127: [76..77]
 r128: [74..77]
 r129: [72..73]
 r130: [2..3]
 r131: [0..1]
 r132: [12..13]
 r133: [10..11]
 r134: [70..71]
 r135: [66..67]
 r136: [60..61]
 r137: [56..57]
 r138: [48..49]
 r139: [42..43]
 r140: [36..37]
 r141: [30..31]
 r142: [18..19]
 r143: [16..17]
 r144: [14..15]
 r145: [114..115]
 r146: [110..111]
 r147: [108..109]
 r148: [104..105]
 r149: [94..95]
 r150: [88..89]
 r151: [86..87]
 r152: [80..81]
 r153: [8..9]
 r155: [98..99]
 r156: [74..75]

********** Assignment #1: **********

	 Assigning to 155 (cl=SSE_REGS, orig=118, freq=3, tfirst=155, tfreq=3)...
	   Assign 22 to reload r155 (freq=3)
	 Assigning to 156 (cl=SSE_REGS, orig=129, freq=3, tfirst=156, tfreq=3)...
	   Assign 22 to reload r156 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 31
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 113
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 80
changing reg in insn 89
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 95
changing reg in insn 95
changing reg in insn 95
changing reg in insn 105
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 116
changing reg in insn 119
changing reg in insn 119
changing reg in insn 123
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 61
changing reg in insn 62
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 109
changing reg in insn 110
deleting insn with uid = 50.
deleting insn with uid = 134.
deleting insn with uid = 136.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 51.


int normalize(float*, float*, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2]
;;  ref usage 	r0={48d,47u} r1={10d,9u,6e} r2={4d,2u,2e} r4={2d,1u} r5={2d,1u} r6={1d,48u} r7={1d,11u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={27d,3u} r18={1d} r19={1d} r20={1d,1u,8e} r21={13d,12u} r22={8d,6u} r23={3d,1u} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 344{186d,142u,16e} in 98{97 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 132 133
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) ge2fitman_preproc.cpp:295 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
        (reg:DI 4 si [ scratch ])) ge2fitman_preproc.cpp:295 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:295 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:297 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DF 0 ax [132])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:298 128 {*movdf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])
        (reg:DF 0 ax [132])) ge2fitman_preproc.cpp:298 128 {*movdf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 0 ax [133])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:299 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64])
        (reg:DF 0 ax [133])) ge2fitman_preproc.cpp:299 128 {*movdf_internal}
     (nil))
(insn 13 12 129 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:305 90 {*movsi_internal}
     (nil))
(jump_insn 129 13 130 2 (set (pc)
        (label_ref 66)) ge2fitman_preproc.cpp:305 636 {jump}
     (nil)
 -> 66)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 130 129 68)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 134 135 136 137 138 139 140 141 142 143
(code_label 68 130 16 3 73 "" [1 uses])
(note 16 68 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:SI 0 ax [134])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:307 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 0 ax [orig:83 D.25608 ] [83])
        (sign_extend:DI (reg:SI 0 ax [134]))) ge2fitman_preproc.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 1 dx [orig:84 D.25608 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 D.25608 ] [83])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:307 497 {*ashldi3_1}
     (nil))
(insn 20 19 21 3 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:307 89 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.25609 ] [85])
                (plus:DI (reg/f:DI 0 ax [135])
                    (reg:DI 1 dx [orig:84 D.25608 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:307 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.25608 ] [84]))
        (nil)))
(insn 22 21 23 3 (set (reg:SF 21 xmm0 [orig:86 D.25610 ] [86])
        (mem:SF (reg/f:DI 0 ax [orig:85 D.25609 ] [85]) [0 *_12+0 S4 A32])) ge2fitman_preproc.cpp:307 129 {*movsf_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DF 22 xmm1 [orig:87 D.25611 ] [87])
        (float_extend:DF (reg:SF 21 xmm0 [orig:86 D.25610 ] [86]))) ge2fitman_preproc.cpp:307 152 {*extendsfdf2_sse}
     (nil))
(insn 24 23 25 3 (set (reg:SI 0 ax [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:307 90 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 0 ax [orig:88 D.25608 ] [88])
        (sign_extend:DI (reg:SI 0 ax [136]))) ge2fitman_preproc.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg:DI 1 dx [orig:89 D.25608 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.25608 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:307 497 {*ashldi3_1}
     (nil))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:307 89 {*movdi_internal}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.25609 ] [90])
                (plus:DI (reg/f:DI 0 ax [137])
                    (reg:DI 1 dx [orig:89 D.25608 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:307 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.25608 ] [89]))
        (nil)))
(insn 29 28 30 3 (set (reg:SF 21 xmm0 [orig:91 D.25610 ] [91])
        (mem:SF (reg/f:DI 0 ax [orig:90 D.25609 ] [90]) [0 *_17+0 S4 A32])) ge2fitman_preproc.cpp:307 129 {*movsf_internal}
     (nil))
(insn 30 29 31 3 (set (reg:DF 21 xmm0 [orig:92 D.25611 ] [92])
        (float_extend:DF (reg:SF 21 xmm0 [orig:91 D.25610 ] [91]))) ge2fitman_preproc.cpp:307 152 {*extendsfdf2_sse}
     (nil))
(insn 31 30 32 3 (set (reg:DF 22 xmm1 [orig:93 D.25611 ] [93])
        (mult:DF (reg:DF 22 xmm1 [orig:87 D.25611 ] [87])
            (reg:DF 21 xmm0 [orig:92 D.25611 ] [92]))) ge2fitman_preproc.cpp:307 776 {*fop_df_comm_sse}
     (nil))
(insn 32 31 33 3 (set (reg:SI 0 ax [138])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:308 90 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 0 ax [orig:94 D.25612 ] [94])
        (sign_extend:DI (reg:SI 0 ax [138]))) ge2fitman_preproc.cpp:308 142 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg:DI 0 ax [orig:95 D.25612 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 D.25612 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 221 {*adddi_1}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:DI 1 dx [orig:96 D.25612 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.25612 ] [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 497 {*ashldi3_1}
     (nil))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:308 89 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.25609 ] [97])
                (plus:DI (reg/f:DI 0 ax [139])
                    (reg:DI 1 dx [orig:96 D.25612 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.25612 ] [96]))
        (nil)))
(insn 38 37 39 3 (set (reg:SF 21 xmm0 [orig:98 D.25610 ] [98])
        (mem:SF (reg/f:DI 0 ax [orig:97 D.25609 ] [97]) [0 *_24+0 S4 A32])) ge2fitman_preproc.cpp:308 129 {*movsf_internal}
     (nil))
(insn 39 38 40 3 (set (reg:DF 23 xmm2 [orig:99 D.25611 ] [99])
        (float_extend:DF (reg:SF 21 xmm0 [orig:98 D.25610 ] [98]))) ge2fitman_preproc.cpp:308 152 {*extendsfdf2_sse}
     (nil))
(insn 40 39 41 3 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:308 90 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 0 ax [orig:100 D.25612 ] [100])
        (sign_extend:DI (reg:SI 0 ax [140]))) ge2fitman_preproc.cpp:308 142 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 3 (parallel [
            (set (reg:DI 0 ax [orig:101 D.25612 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 D.25612 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 221 {*adddi_1}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 1 dx [orig:102 D.25612 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.25612 ] [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 497 {*ashldi3_1}
     (nil))
(insn 44 43 45 3 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:308 89 {*movdi_internal}
     (nil))
(insn 45 44 46 3 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.25609 ] [103])
                (plus:DI (reg/f:DI 0 ax [141])
                    (reg:DI 1 dx [orig:102 D.25612 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.25612 ] [102]))
        (nil)))
(insn 46 45 47 3 (set (reg:SF 21 xmm0 [orig:104 D.25610 ] [104])
        (mem:SF (reg/f:DI 0 ax [orig:103 D.25609 ] [103]) [0 *_30+0 S4 A32])) ge2fitman_preproc.cpp:308 129 {*movsf_internal}
     (nil))
(insn 47 46 48 3 (set (reg:DF 21 xmm0 [orig:105 D.25611 ] [105])
        (float_extend:DF (reg:SF 21 xmm0 [orig:104 D.25610 ] [104]))) ge2fitman_preproc.cpp:308 152 {*extendsfdf2_sse}
     (nil))
(insn 48 47 49 3 (set (reg:DF 21 xmm0 [orig:106 D.25611 ] [106])
        (mult:DF (reg:DF 21 xmm0 [orig:105 D.25611 ] [105])
            (reg:DF 23 xmm2 [orig:99 D.25611 ] [99]))) ge2fitman_preproc.cpp:308 776 {*fop_df_comm_sse}
     (nil))
(insn 49 48 51 3 (set (reg:DF 21 xmm0 [orig:107 D.25611 ] [107])
        (plus:DF (reg:DF 21 xmm0 [orig:106 D.25611 ] [106])
            (reg:DF 22 xmm1 [orig:93 D.25611 ] [93]))) ge2fitman_preproc.cpp:308 776 {*fop_df_comm_sse}
     (nil))
(call_insn 51 49 52 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:308 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 52 51 53 3 (set (reg:DF 0 ax [142])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:308 128 {*movdf_internal}
     (nil))
(insn 53 52 54 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])
        (reg:DF 0 ax [142])) ge2fitman_preproc.cpp:308 128 {*movdf_internal}
     (nil))
(insn 54 53 55 3 (set (reg:DF 21 xmm0 [143])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])) ge2fitman_preproc.cpp:310 128 {*movdf_internal}
     (nil))
(insn 55 54 56 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [143])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) ge2fitman_preproc.cpp:310 56 {*cmpiudf_sse}
     (nil))
(jump_insn 56 55 60 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 63)
            (pc))) ge2fitman_preproc.cpp:310 596 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 144
(note 60 56 61 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 4 (set (reg:DF 0 ax [144])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])) ge2fitman_preproc.cpp:310 128 {*movdf_internal}
     (nil))
(insn 62 61 63 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64])
        (reg:DF 0 ax [144])) ge2fitman_preproc.cpp:310 128 {*movdf_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 63 62 64 5 71 "" [1 uses])
(note 64 63 65 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:305 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 66 65 67 6 70 "" [1 uses])
(note 67 66 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 69 67 70 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 99 [0x63]))) ge2fitman_preproc.cpp:305 7 {*cmpsi_1}
     (nil))
(jump_insn 70 69 71 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) ge2fitman_preproc.cpp:305 596 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 131 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:314 90 {*movsi_internal}
     (nil))
(jump_insn 131 72 132 7 (set (pc)
        (label_ref 107)) ge2fitman_preproc.cpp:314 636 {jump}
     (nil)
 -> 107)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 132 131 112)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 145 146 147 148 149 150 151 152
(code_label 112 132 75 8 75 "" [1 uses])
(note 75 112 76 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 8 (set (reg:SI 0 ax [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:316 90 {*movsi_internal}
     (nil))
(insn 77 76 78 8 (set (reg:DI 0 ax [orig:110 D.25608 ] [110])
        (sign_extend:DI (reg:SI 0 ax [145]))) ge2fitman_preproc.cpp:316 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 8 (parallel [
            (set (reg:DI 1 dx [orig:111 D.25608 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 D.25608 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:316 497 {*ashldi3_1}
     (nil))
(insn 79 78 80 8 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:316 89 {*movdi_internal}
     (nil))
(insn 80 79 81 8 (parallel [
            (set (reg/f:DI 1 dx [orig:112 D.25609 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 D.25608 ] [111])
                    (reg/f:DI 0 ax [146])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:316 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.25608 ] [111]))
        (nil)))
(insn 81 80 82 8 (set (reg:SI 0 ax [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:316 90 {*movsi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:DI 0 ax [orig:113 D.25608 ] [113])
        (sign_extend:DI (reg:SI 0 ax [147]))) ge2fitman_preproc.cpp:316 142 {*extendsidi2_rex64}
     (nil))
(insn 83 82 84 8 (parallel [
            (set (reg:DI 2 cx [orig:114 D.25608 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.25608 ] [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:316 497 {*ashldi3_1}
     (nil))
(insn 84 83 85 8 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:316 89 {*movdi_internal}
     (nil))
(insn 85 84 86 8 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.25609 ] [115])
                (plus:DI (reg/f:DI 0 ax [148])
                    (reg:DI 2 cx [orig:114 D.25608 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:316 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:114 D.25608 ] [114]))
        (nil)))
(insn 86 85 87 8 (set (reg:SF 22 xmm1 [orig:116 D.25610 ] [116])
        (mem:SF (reg/f:DI 0 ax [orig:115 D.25609 ] [115]) [0 *_48+0 S4 A32])) ge2fitman_preproc.cpp:316 129 {*movsf_internal}
     (nil))
(insn 87 86 88 8 (set (reg:SF 21 xmm0 [orig:117 D.25610 ] [117])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) ge2fitman_preproc.cpp:316 157 {*truncdfsf_fast_sse}
     (nil))
(insn 88 87 135 8 (set (reg:SF 22 xmm1 [orig:118 D.25610 ] [118])
        (div:SF (reg:SF 22 xmm1 [orig:118 D.25610 ] [118])
            (reg:SF 21 xmm0 [orig:117 D.25610 ] [117]))) ge2fitman_preproc.cpp:316 782 {*fop_sf_1_sse}
     (nil))
(insn 135 88 89 8 (set (reg:SF 0 ax [orig:118 D.25610 ] [118])
        (reg:SF 22 xmm1 [orig:118 D.25610 ] [118])) ge2fitman_preproc.cpp:316 129 {*movsf_internal}
     (nil))
(insn 89 135 90 8 (set (mem:SF (reg/f:DI 1 dx [orig:112 D.25609 ] [112]) [0 *_45+0 S4 A32])
        (reg:SF 0 ax [orig:118 D.25610 ] [118])) ge2fitman_preproc.cpp:316 129 {*movsf_internal}
     (nil))
(insn 90 89 91 8 (set (reg:SI 0 ax [149])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:317 90 {*movsi_internal}
     (nil))
(insn 91 90 92 8 (set (reg:DI 0 ax [orig:119 D.25612 ] [119])
        (sign_extend:DI (reg:SI 0 ax [149]))) ge2fitman_preproc.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 8 (parallel [
            (set (reg:DI 0 ax [orig:120 D.25612 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 D.25612 ] [119])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 221 {*adddi_1}
     (nil))
(insn 93 92 94 8 (parallel [
            (set (reg:DI 1 dx [orig:121 D.25612 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.25612 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 497 {*ashldi3_1}
     (nil))
(insn 94 93 95 8 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:317 89 {*movdi_internal}
     (nil))
(insn 95 94 96 8 (parallel [
            (set (reg/f:DI 1 dx [orig:122 D.25609 ] [122])
                (plus:DI (reg:DI 1 dx [orig:121 D.25612 ] [121])
                    (reg/f:DI 0 ax [150])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.25612 ] [121]))
        (nil)))
(insn 96 95 97 8 (set (reg:SI 0 ax [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:317 90 {*movsi_internal}
     (nil))
(insn 97 96 98 8 (set (reg:DI 0 ax [orig:123 D.25612 ] [123])
        (sign_extend:DI (reg:SI 0 ax [151]))) ge2fitman_preproc.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 8 (parallel [
            (set (reg:DI 0 ax [orig:124 D.25612 ] [124])
                (plus:DI (reg:DI 0 ax [orig:123 D.25612 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 221 {*adddi_1}
     (nil))
(insn 99 98 100 8 (parallel [
            (set (reg:DI 2 cx [orig:125 D.25612 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 D.25612 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 497 {*ashldi3_1}
     (nil))
(insn 100 99 101 8 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:317 89 {*movdi_internal}
     (nil))
(insn 101 100 102 8 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.25609 ] [126])
                (plus:DI (reg/f:DI 0 ax [152])
                    (reg:DI 2 cx [orig:125 D.25612 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:125 D.25612 ] [125]))
        (nil)))
(insn 102 101 103 8 (set (reg:SF 22 xmm1 [orig:127 D.25610 ] [127])
        (mem:SF (reg/f:DI 0 ax [orig:126 D.25609 ] [126]) [0 *_59+0 S4 A32])) ge2fitman_preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 103 102 104 8 (set (reg:SF 21 xmm0 [orig:128 D.25610 ] [128])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) ge2fitman_preproc.cpp:317 157 {*truncdfsf_fast_sse}
     (nil))
(insn 104 103 137 8 (set (reg:SF 22 xmm1 [orig:129 D.25610 ] [129])
        (div:SF (reg:SF 22 xmm1 [orig:129 D.25610 ] [129])
            (reg:SF 21 xmm0 [orig:128 D.25610 ] [128]))) ge2fitman_preproc.cpp:317 782 {*fop_sf_1_sse}
     (nil))
(insn 137 104 105 8 (set (reg:SF 0 ax [orig:129 D.25610 ] [129])
        (reg:SF 22 xmm1 [orig:129 D.25610 ] [129])) ge2fitman_preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 105 137 106 8 (set (mem:SF (reg/f:DI 1 dx [orig:122 D.25609 ] [122]) [0 *_55+0 S4 A32])
        (reg:SF 0 ax [orig:129 D.25610 ] [129])) ge2fitman_preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 106 105 107 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:314 220 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 109 153
(code_label 107 106 108 9 74 "" [1 uses])
(note 108 107 109 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 9 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:314 89 {*movdi_internal}
     (nil))
(insn 110 109 111 9 (set (reg:SI 0 ax [orig:108 D.25613 ] [108])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [153])
                (const_int 324 [0x144])) [0 procpar_info_39(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:314 90 {*movsi_internal}
     (nil))
(insn 111 110 113 9 (parallel [
            (set (reg:SI 0 ax [orig:109 D.25613 ] [109])
                (ashift:SI (reg:SI 0 ax [orig:108 D.25613 ] [108])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:314 496 {*ashlsi3_1}
     (nil))
(insn 113 111 114 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:109 D.25613 ] [109])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:314 7 {*cmpsi_1}
     (nil))
(jump_insn 114 113 115 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 112)
            (pc))) ge2fitman_preproc.cpp:314 596 {*jcc_1}
     (nil)
 -> 112)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 130 131
(note 115 114 116 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 119 10 (set (reg:SI 0 ax [orig:130 D.25613 ] [130])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:321 90 {*movsi_internal}
     (nil))
(insn 119 116 123 10 (set (reg:SI 0 ax [orig:131 <retval> ] [131])
        (reg:SI 0 ax [orig:130 D.25613 ] [130])) ge2fitman_preproc.cpp:321 90 {*movsi_internal}
     (nil))
(insn 123 119 124 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:131 <retval> ] [131])) ge2fitman_preproc.cpp:323 90 {*movsi_internal}
     (nil))
(insn 124 123 133 10 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:323 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 133 124 0 NOTE_INSN_DELETED)

;; Function int quality(float*, float*, float*, Procpar_info*, Preprocess*) (_Z7qualityPfS_S_P12Procpar_infoP10Preprocess, funcdef_no=1026, decl_uid=24010, symbol_order=233)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 26:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 40:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 56:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 64:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 66
	 Choosing alt 0 in insn 66:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 70:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 71:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 76
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 77:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 90:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 91:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 96
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 97:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 112
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 113:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 121:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 127:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 128:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 133
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 134:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 142:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 147:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 148:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 154:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 160
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 161:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 163:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 169
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 170:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 180
	 Choosing alt 0 in insn 180:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 181
	 Choosing alt 0 in insn 181:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 184:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 185:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 199:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 204:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 205:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 206:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 207:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=299 from oldreg=277, assigning class SSE_REGS to r299
  207: r299:DF=r299:DF/[frame:DI-0x18]
      REG_DEAD r278:DF
    Inserting insn reload before:
  295: r299:DF=r278:DF
    Inserting insn reload after:
  296: r277:DF=r299:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 296:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 208:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 209:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 210:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=300 from oldreg=279, assigning class SSE_REGS to r300
  210: r300:DF=r300:DF-[frame:DI-0x20]
      REG_DEAD r280:DF
    Inserting insn reload before:
  297: r300:DF=r280:DF
    Inserting insn reload after:
  298: r279:DF=r300:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 298:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 211:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 217:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=301 from oldreg=196, assigning class SSE_REGS to r301
  217: r301:SF=float_trunc([frame:DI-0x50])
    Inserting insn reload after:
  299: r196:SF=r301:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 299:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 218:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=302, assigning class NO_REGS to secondary r302
  219: r302:DF=r283:DF
      REG_DEAD r283:DF
    Inserting the sec. move after:
  300: xmm0:DF=r302:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 300:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=303 from oldreg=199, assigning class SSE_REGS to r303
      Creating newreg=304 from oldreg=196, assigning class SSE_REGS to r304
      Making reload reg 304 for reg 196 optional
  223: r303:SF=r303:SF*r304:SF
      REG_DEAD r198:SF
      REG_DEAD r196:SF
    Inserting insn reload before:
  301: r303:SF=r198:SF
  303: r304:SF=r196:SF
    Inserting insn reload after:
  302: r199:SF=r303:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 302:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 303:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 224:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 231:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=305 from oldreg=204, assigning class SSE_REGS to r305
  231: r305:SF=float_trunc([frame:DI-0x50])
    Inserting insn reload after:
  304: r204:SF=r305:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 304:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 232:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=306, assigning class NO_REGS to secondary r306
  233: r306:DF=r286:DF
      REG_DEAD r286:DF
    Inserting the sec. move after:
  305: xmm0:DF=r306:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 305:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 237
	 Choosing alt 0 in insn 237:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=307 from oldreg=207, assigning class SSE_REGS to r307
      Creating newreg=308 from oldreg=204, assigning class SSE_REGS to r308
      Making reload reg 308 for reg 204 optional
  237: r307:SF=r307:SF*r308:SF
      REG_DEAD r206:SF
      REG_DEAD r204:SF
    Inserting insn reload before:
  306: r307:SF=r206:SF
  308: r308:SF=r204:SF
    Inserting insn reload after:
  307: r207:SF=r307:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 307:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 308:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 238:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 239:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 240:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=309 from oldreg=287, assigning class SSE_REGS to r309
  240: r309:DF=r309:DF/[frame:DI-0x18]
      REG_DEAD r288:DF
    Inserting insn reload before:
  309: r309:DF=r288:DF
    Inserting insn reload after:
  310: r287:DF=r309:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 310:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 241:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 242:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 243:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=310 from oldreg=289, assigning class SSE_REGS to r310
  243: r310:DF=r310:DF-[frame:DI-0x20]
      REG_DEAD r290:DF
    Inserting insn reload before:
  311: r310:DF=r290:DF
    Inserting insn reload after:
  312: r289:DF=r310:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 312:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 244:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 248:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 250:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=311 from oldreg=211, assigning class SSE_REGS to r311
  250: r311:SF=float_trunc([frame:DI-0x48])
    Inserting insn reload after:
  313: r211:SF=r311:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 313:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 251:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=312, assigning class NO_REGS to secondary r312
  252: r312:DF=r293:DF
      REG_DEAD r293:DF
    Inserting the sec. move after:
  314: xmm0:DF=r312:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 314:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 256
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=313 from oldreg=214, assigning class SSE_REGS to r313
      Creating newreg=314 from oldreg=211, assigning class SSE_REGS to r314
      Making reload reg 314 for reg 211 optional
  256: r313:SF=r313:SF*r314:SF
      REG_DEAD r213:SF
      REG_DEAD r211:SF
    Inserting insn reload before:
  315: r313:SF=r213:SF
  317: r314:SF=r211:SF
    Inserting insn reload after:
  316: r214:SF=r313:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 316:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 317:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 257:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 261:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 263:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 264:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=315 from oldreg=219, assigning class SSE_REGS to r315
  264: r315:SF=float_trunc([frame:DI-0x48])
    Inserting insn reload after:
  318: r219:SF=r315:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 318:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 265:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=316, assigning class NO_REGS to secondary r316
  266: r316:DF=r296:DF
      REG_DEAD r296:DF
    Inserting the sec. move after:
  319: xmm0:DF=r316:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 319:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 270
	 Choosing alt 0 in insn 270:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=317 from oldreg=222, assigning class SSE_REGS to r317
      Creating newreg=318 from oldreg=219, assigning class SSE_REGS to r318
      Making reload reg 318 for reg 219 optional
  270: r317:SF=r317:SF*r318:SF
      REG_DEAD r221:SF
      REG_DEAD r219:SF
    Inserting insn reload before:
  320: r317:SF=r221:SF
  322: r318:SF=r219:SF
    Inserting insn reload after:
  321: r222:SF=r317:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 321:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 322:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 271:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 272:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=319 from oldreg=219, assigning class SSE_REGS to inheritance r319
    Original reg change 219->319 (bb3):
  318: r319:SF=r315:SF
    Add original<-inheritance after:
  323: r219:SF=r319:SF

    Inheritance reuse change 219->319 (bb3):
  322: r318:SF=r319:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=320 from oldreg=211, assigning class SSE_REGS to inheritance r320
    Original reg change 211->320 (bb3):
  313: r320:SF=r311:SF
    Add original<-inheritance after:
  324: r211:SF=r320:SF

    Inheritance reuse change 211->320 (bb3):
  317: r314:SF=r320:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=321 from oldreg=204, assigning class SSE_REGS to inheritance r321
    Original reg change 204->321 (bb3):
  304: r321:SF=r305:SF
    Add original<-inheritance after:
  325: r204:SF=r321:SF

    Inheritance reuse change 204->321 (bb3):
  308: r308:SF=r321:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=322 from oldreg=196, assigning class SSE_REGS to inheritance r322
    Original reg change 196->322 (bb3):
  299: r322:SF=r301:SF
    Add original<-inheritance after:
  326: r196:SF=r322:SF

    Inheritance reuse change 196->322 (bb3):
  303: r304:SF=r322:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   323: r219:SF=r319:SF
deleting insn with uid = 323.
	    Removing dead insn:
   324: r211:SF=r320:SF
deleting insn with uid = 324.
	    Removing dead insn:
   325: r204:SF=r321:SF
deleting insn with uid = 325.
	    Removing dead insn:
   326: r196:SF=r322:SF
deleting insn with uid = 326.
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 290: point = 0
   Insn 289: point = 0
   Insn 285: point = 1
   Insn 282: point = 3
  BB 4
   Insn 280: point = 4
   Insn 279: point = 4
   Insn 277: point = 5
   Insn 276: point = 7
   Insn 275: point = 9
  BB 2
   Insn 292: point = 10
   Insn 31: point = 10
   Insn 30: point = 10
   Insn 29: point = 11
   Insn 28: point = 12
   Insn 27: point = 13
   Insn 26: point = 14
   Insn 25: point = 15
   Insn 24: point = 16
   Insn 23: point = 17
   Insn 22: point = 18
   Insn 21: point = 19
   Insn 20: point = 20
   Insn 19: point = 21
   Insn 18: point = 22
   Insn 17: point = 23
   Insn 16: point = 24
   Insn 15: point = 25
   Insn 14: point = 26
   Insn 13: point = 27
   Insn 12: point = 28
   Insn 11: point = 29
   Insn 10: point = 30
   Insn 6: point = 30
   Insn 5: point = 30
   Insn 4: point = 30
   Insn 3: point = 30
   Insn 2: point = 30
  BB 3
   Insn 272: point = 30
   Insn 271: point = 30
   Insn 321: point = 31
	Hard reg 0 is preferable by r317 with profit 1
   Insn 270: point = 33
   Insn 322: point = 34
	   Creating copy r318<-r319@1
   Insn 320: point = 36
	Hard reg 0 is preferable by r317 with profit 1
	Hard reg 21 is preferable by r317 with profit 1
   Insn 269: point = 38
   Insn 268: point = 40
   Insn 267: point = 41
   Insn 319: point = 41
	Hard reg 21 is preferable by r316 with profit 1
   Insn 266: point = 42
	Hard reg 21 is preferable by r316 with profit 1
	Hard reg 0 is preferable by r316 with profit 1
   Insn 265: point = 44
   Insn 318: point = 45
	   Creating copy r315->r319@1
   Insn 264: point = 47
   Insn 263: point = 48
   Insn 262: point = 50
   Insn 261: point = 51
   Insn 260: point = 53
   Insn 259: point = 55
   Insn 258: point = 57
   Insn 257: point = 58
   Insn 316: point = 59
	Hard reg 0 is preferable by r313 with profit 1
   Insn 256: point = 61
   Insn 317: point = 62
	   Creating copy r314<-r320@1
   Insn 315: point = 64
	Hard reg 0 is preferable by r313 with profit 1
	Hard reg 21 is preferable by r313 with profit 1
   Insn 255: point = 66
   Insn 254: point = 68
   Insn 253: point = 69
   Insn 314: point = 69
	Hard reg 21 is preferable by r312 with profit 1
   Insn 252: point = 70
	Hard reg 21 is preferable by r312 with profit 1
	Hard reg 0 is preferable by r312 with profit 1
   Insn 251: point = 72
   Insn 313: point = 73
	   Creating copy r311->r320@1
   Insn 250: point = 75
   Insn 249: point = 76
   Insn 248: point = 78
   Insn 247: point = 79
   Insn 246: point = 81
   Insn 245: point = 83
   Insn 244: point = 84
   Insn 312: point = 85
	Hard reg 0 is preferable by r310 with profit 1
   Insn 243: point = 87
   Insn 311: point = 87
	Hard reg 0 is preferable by r310 with profit 1
	Hard reg 21 is preferable by r310 with profit 1
   Insn 242: point = 89
   Insn 241: point = 90
   Insn 310: point = 91
	Hard reg 0 is preferable by r309 with profit 1
   Insn 240: point = 93
   Insn 309: point = 93
	Hard reg 0 is preferable by r309 with profit 1
	Hard reg 21 is preferable by r309 with profit 1
   Insn 239: point = 95
   Insn 238: point = 96
   Insn 307: point = 97
	Hard reg 0 is preferable by r307 with profit 1
   Insn 237: point = 99
   Insn 308: point = 100
	   Creating copy r308<-r321@1
   Insn 306: point = 102
	Hard reg 0 is preferable by r307 with profit 1
	Hard reg 21 is preferable by r307 with profit 1
   Insn 236: point = 104
   Insn 235: point = 106
   Insn 234: point = 107
   Insn 305: point = 107
	Hard reg 21 is preferable by r306 with profit 1
   Insn 233: point = 108
	Hard reg 21 is preferable by r306 with profit 1
	Hard reg 0 is preferable by r306 with profit 1
   Insn 232: point = 110
   Insn 304: point = 111
	   Creating copy r305->r321@1
   Insn 231: point = 113
   Insn 230: point = 114
   Insn 229: point = 116
   Insn 228: point = 117
   Insn 227: point = 119
   Insn 226: point = 121
   Insn 225: point = 123
   Insn 224: point = 124
   Insn 302: point = 125
	Hard reg 0 is preferable by r303 with profit 1
   Insn 223: point = 127
   Insn 303: point = 128
	   Creating copy r304<-r322@1
   Insn 301: point = 130
	Hard reg 0 is preferable by r303 with profit 1
	Hard reg 21 is preferable by r303 with profit 1
   Insn 222: point = 132
   Insn 221: point = 134
   Insn 220: point = 135
   Insn 300: point = 135
	Hard reg 21 is preferable by r302 with profit 1
   Insn 219: point = 136
	Hard reg 21 is preferable by r302 with profit 1
	Hard reg 0 is preferable by r302 with profit 1
   Insn 218: point = 138
   Insn 299: point = 139
	   Creating copy r301->r322@1
   Insn 217: point = 141
   Insn 216: point = 142
   Insn 215: point = 144
   Insn 214: point = 145
   Insn 213: point = 147
   Insn 212: point = 149
   Insn 211: point = 150
   Insn 298: point = 151
	Hard reg 0 is preferable by r300 with profit 1
   Insn 210: point = 153
   Insn 297: point = 153
	Hard reg 0 is preferable by r300 with profit 1
	Hard reg 21 is preferable by r300 with profit 1
   Insn 209: point = 155
   Insn 208: point = 156
   Insn 296: point = 157
	Hard reg 0 is preferable by r299 with profit 1
   Insn 207: point = 159
   Insn 295: point = 159
	Hard reg 0 is preferable by r299 with profit 1
	Hard reg 21 is preferable by r299 with profit 1
   Insn 206: point = 161
   Insn 205: point = 162
   Insn 204: point = 163
   Insn 203: point = 164
   Insn 202: point = 164
   Insn 201: point = 165
   Insn 200: point = 166
   Insn 199: point = 168
   Insn 198: point = 170
   Insn 197: point = 172
   Insn 196: point = 173
   Insn 195: point = 175
   Insn 194: point = 177
   Insn 193: point = 179
   Insn 192: point = 180
   Insn 191: point = 182
   Insn 190: point = 184
   Insn 189: point = 186
   Insn 188: point = 187
   Insn 187: point = 189
   Insn 186: point = 191
   Insn 185: point = 192
   Insn 184: point = 193
   Insn 183: point = 194
   Insn 182: point = 194
   Insn 181: point = 195
   Insn 180: point = 197
   Insn 179: point = 199
   Insn 178: point = 201
   Insn 177: point = 203
   Insn 176: point = 205
   Insn 175: point = 206
   Insn 174: point = 208
   Insn 173: point = 210
   Insn 172: point = 212
   Insn 171: point = 213
   Insn 170: point = 215
   Insn 169: point = 217
   Insn 168: point = 219
   Insn 167: point = 220
   Insn 166: point = 222
   Insn 165: point = 224
   Insn 164: point = 226
   Insn 163: point = 227
   Insn 162: point = 229
   Insn 161: point = 231
   Insn 160: point = 233
   Insn 159: point = 235
   Insn 158: point = 236
   Insn 157: point = 238
   Insn 156: point = 240
   Insn 155: point = 241
   Insn 154: point = 243
   Insn 153: point = 245
   Insn 152: point = 247
   Insn 151: point = 248
   Insn 150: point = 250
   Insn 149: point = 252
   Insn 148: point = 253
   Insn 147: point = 254
   Insn 146: point = 255
   Insn 145: point = 255
   Insn 144: point = 256
   Insn 143: point = 257
   Insn 142: point = 259
   Insn 141: point = 261
   Insn 140: point = 263
   Insn 139: point = 264
   Insn 138: point = 266
   Insn 137: point = 268
   Insn 136: point = 270
   Insn 135: point = 271
   Insn 134: point = 273
   Insn 133: point = 275
   Insn 132: point = 277
   Insn 131: point = 278
   Insn 130: point = 280
   Insn 129: point = 282
   Insn 128: point = 283
   Insn 127: point = 284
   Insn 126: point = 285
   Insn 125: point = 285
   Insn 124: point = 286
   Insn 123: point = 288
   Insn 122: point = 290
   Insn 121: point = 292
   Insn 120: point = 294
   Insn 119: point = 296
   Insn 118: point = 297
   Insn 117: point = 299
   Insn 116: point = 301
   Insn 115: point = 303
   Insn 114: point = 304
   Insn 113: point = 306
   Insn 112: point = 308
   Insn 111: point = 310
   Insn 110: point = 311
   Insn 109: point = 313
   Insn 108: point = 315
   Insn 107: point = 317
   Insn 106: point = 318
   Insn 105: point = 320
   Insn 104: point = 322
   Insn 103: point = 324
   Insn 102: point = 326
   Insn 101: point = 327
   Insn 100: point = 329
   Insn 99: point = 331
   Insn 98: point = 332
   Insn 97: point = 334
   Insn 96: point = 336
   Insn 95: point = 338
   Insn 94: point = 339
   Insn 93: point = 341
   Insn 92: point = 343
   Insn 91: point = 344
   Insn 90: point = 345
   Insn 89: point = 346
   Insn 88: point = 346
   Insn 87: point = 347
   Insn 86: point = 348
   Insn 85: point = 350
   Insn 84: point = 352
   Insn 83: point = 354
   Insn 82: point = 355
   Insn 81: point = 357
   Insn 80: point = 359
   Insn 79: point = 361
   Insn 78: point = 362
   Insn 77: point = 364
   Insn 76: point = 366
   Insn 75: point = 368
   Insn 74: point = 369
   Insn 73: point = 371
   Insn 72: point = 373
   Insn 71: point = 374
   Insn 70: point = 375
   Insn 69: point = 376
   Insn 68: point = 376
   Insn 67: point = 377
   Insn 66: point = 379
   Insn 65: point = 381
   Insn 64: point = 383
   Insn 63: point = 385
   Insn 62: point = 387
   Insn 61: point = 388
   Insn 60: point = 390
   Insn 59: point = 392
   Insn 58: point = 394
   Insn 57: point = 395
   Insn 56: point = 397
   Insn 55: point = 399
   Insn 54: point = 401
   Insn 53: point = 402
   Insn 52: point = 404
   Insn 51: point = 406
   Insn 50: point = 408
   Insn 49: point = 409
   Insn 48: point = 411
   Insn 47: point = 413
   Insn 46: point = 415
   Insn 45: point = 417
   Insn 44: point = 418
   Insn 43: point = 420
   Insn 42: point = 422
   Insn 41: point = 423
   Insn 40: point = 425
   Insn 39: point = 427
   Insn 38: point = 429
   Insn 37: point = 430
   Insn 36: point = 432
   Insn 35: point = 434
 r83: [6..7]
 r84: [4..5]
 r85: [431..432]
 r86: [428..430]
 r87: [426..427]
 r88: [424..425]
 r89: [410..423]
 r90: [419..420]
 r91: [416..418]
 r92: [414..415]
 r93: [412..413]
 r94: [410..411]
 r95: [378..409]
 r96: [405..406]
 r97: [403..404]
 r98: [400..402]
 r99: [398..399]
 r100: [396..397]
 r101: [380..395]
 r102: [391..392]
 r103: [389..390]
 r104: [386..388]
 r105: [384..385]
 r106: [382..383]
 r107: [380..381]
 r108: [378..379]
 r109: [376..377]
 r110: [370..371]
 r111: [367..369]
 r112: [365..366]
 r113: [363..364]
 r114: [347..362]
 r115: [358..359]
 r116: [356..357]
 r117: [353..355]
 r118: [351..352]
 r119: [349..350]
 r120: [346..348]
 r121: [340..341]
 r122: [337..339]
 r123: [335..336]
 r124: [333..334]
 r125: [319..332]
 r126: [328..329]
 r127: [325..327]
 r128: [323..324]
 r129: [321..322]
 r130: [319..320]
 r131: [287..318]
 r132: [314..315]
 r133: [312..313]
 r134: [309..311]
 r135: [307..308]
 r136: [305..306]
 r137: [289..304]
 r138: [300..301]
 r139: [298..299]
 r140: [295..297]
 r141: [293..294]
 r142: [291..292]
 r143: [289..290]
 r144: [287..288]
 r145: [285..286]
 r146: [279..280]
 r147: [276..278]
 r148: [274..275]
 r149: [272..273]
 r150: [256..271]
 r151: [267..268]
 r152: [265..266]
 r153: [262..264]
 r154: [260..261]
 r155: [258..259]
 r156: [255..257]
 r157: [249..250]
 r158: [246..248]
 r159: [244..245]
 r160: [242..243]
 r161: [228..241]
 r162: [237..238]
 r163: [234..236]
 r164: [232..233]
 r165: [230..231]
 r166: [228..229]
 r167: [196..227]
 r168: [223..224]
 r169: [221..222]
 r170: [218..220]
 r171: [216..217]
 r172: [214..215]
 r173: [198..213]
 r174: [209..210]
 r175: [207..208]
 r176: [204..206]
 r177: [202..203]
 r178: [200..201]
 r179: [198..199]
 r180: [196..197]
 r181: [194..195]
 r182: [188..189]
 r183: [185..187]
 r184: [183..184]
 r185: [181..182]
 r186: [165..180]
 r187: [176..177]
 r188: [174..175]
 r189: [171..173]
 r190: [169..170]
 r191: [167..168]
 r192: [164..166]
 r193: [146..147]
 r194: [143..145]
 r195: [124..142]
 r197: [133..134]
 r198: [131..132]
 r199: [124..125]
 r200: [120..121]
 r201: [118..119]
 r202: [115..117]
 r203: [96..114]
 r205: [105..106]
 r206: [103..104]
 r207: [96..97]
 r208: [80..81]
 r209: [77..79]
 r210: [58..76]
 r212: [67..68]
 r213: [65..66]
 r214: [58..59]
 r215: [54..55]
 r216: [52..53]
 r217: [49..51]
 r218: [30..48]
 r220: [39..40]
 r221: [37..38]
 r222: [30..31]
 r223: [2..3]
 r224: [0..1]
 r225: [28..29]
 r226: [26..27]
 r227: [24..25]
 r228: [22..23]
 r229: [20..21]
 r230: [18..19]
 r231: [16..17]
 r232: [14..15]
 r233: [12..13]
 r234: [10..11]
 r235: [433..434]
 r236: [428..429]
 r237: [421..422]
 r238: [416..417]
 r239: [407..408]
 r240: [400..401]
 r241: [393..394]
 r242: [386..387]
 r243: [374..375]
 r244: [372..373]
 r245: [367..368]
 r246: [360..361]
 r247: [353..354]
 r248: [344..345]
 r249: [342..343]
 r250: [337..338]
 r251: [330..331]
 r252: [325..326]
 r253: [316..317]
 r254: [309..310]
 r255: [302..303]
 r256: [295..296]
 r257: [283..284]
 r258: [281..282]
 r259: [276..277]
 r260: [269..270]
 r261: [262..263]
 r262: [253..254]
 r263: [251..252]
 r264: [246..247]
 r265: [239..240]
 r266: [234..235]
 r267: [225..226]
 r268: [218..219]
 r269: [211..212]
 r270: [204..205]
 r271: [192..193]
 r272: [190..191]
 r273: [185..186]
 r274: [178..179]
 r275: [171..172]
 r276: [162..163]
 r277: [156..157]
 r278: [160..161]
 r279: [150..151]
 r280: [154..155]
 r281: [148..149]
 r282: [143..144]
 r283: [137..138]
 r284: [122..123]
 r285: [115..116]
 r286: [109..110]
 r287: [90..91]
 r288: [94..95]
 r289: [84..85]
 r290: [88..89]
 r291: [82..83]
 r292: [77..78]
 r293: [71..72]
 r294: [56..57]
 r295: [49..50]
 r296: [43..44]
 r297: [8..9]
 r299: [158..159]
 r300: [152..153]
 r301: [140..141]
 r302: [135..136]
 r303: [126..130]
 r304: [127..128]
 r305: [112..113]
 r306: [107..108]
 r307: [98..102]
 r308: [99..100]
 r309: [92..93]
 r310: [86..87]
 r311: [74..75]
 r312: [69..70]
 r313: [60..64]
 r314: [61..62]
 r315: [46..47]
 r316: [41..42]
 r317: [32..36]
 r318: [33..34]
 r319: [35..45]
 r320: [63..73]
 r321: [101..111]
 r322: [129..139]
Compressing live ranges: from 435 to 386 - 88%
Ranges after the compression:
 r83: [6..7]
 r84: [4..5]
 r85: [382..383]
 r86: [380..381]
 r87: [378..379]
 r88: [376..377]
 r89: [364..375]
 r90: [372..373]
 r91: [370..371]
 r92: [368..369]
 r93: [366..367]
 r94: [364..365]
 r95: [336..363]
 r96: [360..361]
 r97: [358..359]
 r98: [356..357]
 r99: [354..355]
 r100: [352..353]
 r101: [338..351]
 r102: [348..349]
 r103: [346..347]
 r104: [344..345]
 r105: [342..343]
 r106: [340..341]
 r107: [338..339]
 r108: [336..337]
 r109: [334..335]
 r110: [328..329]
 r111: [326..327]
 r112: [324..325]
 r113: [322..323]
 r114: [308..321]
 r115: [318..319]
 r116: [316..317]
 r117: [314..315]
 r118: [312..313]
 r119: [310..311]
 r120: [308..309]
 r121: [302..303]
 r122: [300..301]
 r123: [298..299]
 r124: [296..297]
 r125: [284..295]
 r126: [292..293]
 r127: [290..291]
 r128: [288..289]
 r129: [286..287]
 r130: [284..285]
 r131: [256..283]
 r132: [280..281]
 r133: [278..279]
 r134: [276..277]
 r135: [274..275]
 r136: [272..273]
 r137: [258..271]
 r138: [268..269]
 r139: [266..267]
 r140: [264..265]
 r141: [262..263]
 r142: [260..261]
 r143: [258..259]
 r144: [256..257]
 r145: [254..255]
 r146: [248..249]
 r147: [246..247]
 r148: [244..245]
 r149: [242..243]
 r150: [228..241]
 r151: [238..239]
 r152: [236..237]
 r153: [234..235]
 r154: [232..233]
 r155: [230..231]
 r156: [228..229]
 r157: [222..223]
 r158: [220..221]
 r159: [218..219]
 r160: [216..217]
 r161: [204..215]
 r162: [212..213]
 r163: [210..211]
 r164: [208..209]
 r165: [206..207]
 r166: [204..205]
 r167: [176..203]
 r168: [200..201]
 r169: [198..199]
 r170: [196..197]
 r171: [194..195]
 r172: [192..193]
 r173: [178..191]
 r174: [188..189]
 r175: [186..187]
 r176: [184..185]
 r177: [182..183]
 r178: [180..181]
 r179: [178..179]
 r180: [176..177]
 r181: [174..175]
 r182: [168..169]
 r183: [166..167]
 r184: [164..165]
 r185: [162..163]
 r186: [148..161]
 r187: [158..159]
 r188: [156..157]
 r189: [154..155]
 r190: [152..153]
 r191: [150..151]
 r192: [148..149]
 r193: [130..131]
 r194: [128..129]
 r195: [112..127]
 r197: [120..121]
 r198: [118..119]
 r199: [112..113]
 r200: [108..109]
 r201: [106..107]
 r202: [104..105]
 r203: [88..103]
 r205: [96..97]
 r206: [94..95]
 r207: [88..89]
 r208: [72..73]
 r209: [70..71]
 r210: [54..69]
 r212: [62..63]
 r213: [60..61]
 r214: [54..55]
 r215: [50..51]
 r216: [48..49]
 r217: [46..47]
 r218: [30..45]
 r220: [38..39]
 r221: [36..37]
 r222: [30..31]
 r223: [2..3]
 r224: [0..1]
 r225: [28..29]
 r226: [26..27]
 r227: [24..25]
 r228: [22..23]
 r229: [20..21]
 r230: [18..19]
 r231: [16..17]
 r232: [14..15]
 r233: [12..13]
 r234: [10..11]
 r235: [384..385]
 r236: [380..381]
 r237: [374..375]
 r238: [370..371]
 r239: [362..363]
 r240: [356..357]
 r241: [350..351]
 r242: [344..345]
 r243: [332..333]
 r244: [330..331]
 r245: [326..327]
 r246: [320..321]
 r247: [314..315]
 r248: [306..307]
 r249: [304..305]
 r250: [300..301]
 r251: [294..295]
 r252: [290..291]
 r253: [282..283]
 r254: [276..277]
 r255: [270..271]
 r256: [264..265]
 r257: [252..253]
 r258: [250..251]
 r259: [246..247]
 r260: [240..241]
 r261: [234..235]
 r262: [226..227]
 r263: [224..225]
 r264: [220..221]
 r265: [214..215]
 r266: [210..211]
 r267: [202..203]
 r268: [196..197]
 r269: [190..191]
 r270: [184..185]
 r271: [172..173]
 r272: [170..171]
 r273: [166..167]
 r274: [160..161]
 r275: [154..155]
 r276: [146..147]
 r277: [140..141]
 r278: [144..145]
 r279: [134..135]
 r280: [138..139]
 r281: [132..133]
 r282: [128..129]
 r283: [124..125]
 r284: [110..111]
 r285: [104..105]
 r286: [100..101]
 r287: [82..83]
 r288: [86..87]
 r289: [76..77]
 r290: [80..81]
 r291: [74..75]
 r292: [70..71]
 r293: [66..67]
 r294: [52..53]
 r295: [46..47]
 r296: [42..43]
 r297: [8..9]
 r299: [142..143]
 r300: [136..137]
 r301: [126..127]
 r302: [122..123]
 r303: [114..117]
 r304: [114..115]
 r305: [102..103]
 r306: [98..99]
 r307: [90..93]
 r308: [90..91]
 r309: [84..85]
 r310: [78..79]
 r311: [68..69]
 r312: [64..65]
 r313: [56..59]
 r314: [56..57]
 r315: [44..45]
 r316: [40..41]
 r317: [32..35]
 r318: [32..33]
 r319: [34..43]
 r320: [58..67]
 r321: [92..101]
 r322: [116..125]

********** Assignment #1: **********

	 Assigning to 299 (cl=SSE_REGS, orig=277, freq=3, tfirst=299, tfreq=3)...
	   Assign 21 to reload r299 (freq=3)
	 Assigning to 300 (cl=SSE_REGS, orig=279, freq=3, tfirst=300, tfreq=3)...
	   Assign 21 to reload r300 (freq=3)
	 Assigning to 303 (cl=SSE_REGS, orig=199, freq=3, tfirst=303, tfreq=3)...
	   Assign 21 to reload r303 (freq=3)
	 Assigning to 307 (cl=SSE_REGS, orig=207, freq=3, tfirst=307, tfreq=3)...
	   Assign 21 to reload r307 (freq=3)
	 Assigning to 309 (cl=SSE_REGS, orig=287, freq=3, tfirst=309, tfreq=3)...
	   Assign 21 to reload r309 (freq=3)
	 Assigning to 310 (cl=SSE_REGS, orig=289, freq=3, tfirst=310, tfreq=3)...
	   Assign 21 to reload r310 (freq=3)
	 Assigning to 313 (cl=SSE_REGS, orig=214, freq=3, tfirst=313, tfreq=3)...
	   Assign 21 to reload r313 (freq=3)
	 Assigning to 317 (cl=SSE_REGS, orig=222, freq=3, tfirst=317, tfreq=3)...
	   Assign 21 to reload r317 (freq=3)
	 Assigning to 301 (cl=SSE_REGS, orig=196, freq=2, tfirst=301, tfreq=2)...
	   Assign 24 to reload r301 (freq=2)
	Hard reg 24 is preferable by r322 with profit 1
	Hard reg 24 is preferable by r304 with profit 1
	 Assigning to 304 (cl=SSE_REGS, orig=196, freq=2, tfirst=301, tfreq=2)...
	   Assign 24 to optional reload r304 (freq=2)
	Hard reg 24 is preferable by r322 with profit 2
	 Assigning to 322 (cl=SSE_REGS, orig=196, freq=2, tfirst=301, tfreq=2)...
	 Assigning to 305 (cl=SSE_REGS, orig=204, freq=2, tfirst=305, tfreq=2)...
	   Assign 25 to reload r305 (freq=2)
	Hard reg 25 is preferable by r321 with profit 1
	Hard reg 25 is preferable by r308 with profit 1
	 Assigning to 308 (cl=SSE_REGS, orig=204, freq=2, tfirst=305, tfreq=2)...
	   Assign 25 to optional reload r308 (freq=2)
	Hard reg 25 is preferable by r321 with profit 2
	 Assigning to 321 (cl=SSE_REGS, orig=204, freq=2, tfirst=305, tfreq=2)...
	 Assigning to 311 (cl=SSE_REGS, orig=211, freq=2, tfirst=311, tfreq=2)...
	   Assign 26 to reload r311 (freq=2)
	Hard reg 26 is preferable by r320 with profit 1
	Hard reg 26 is preferable by r314 with profit 1
	 Assigning to 314 (cl=SSE_REGS, orig=211, freq=2, tfirst=311, tfreq=2)...
	   Assign 26 to optional reload r314 (freq=2)
	Hard reg 26 is preferable by r320 with profit 2
	 Assigning to 320 (cl=SSE_REGS, orig=211, freq=2, tfirst=311, tfreq=2)...
	 Assigning to 315 (cl=SSE_REGS, orig=219, freq=2, tfirst=315, tfreq=2)...
	   Assign 27 to reload r315 (freq=2)
	Hard reg 27 is preferable by r319 with profit 1
	Hard reg 27 is preferable by r318 with profit 1
	 Assigning to 318 (cl=SSE_REGS, orig=219, freq=2, tfirst=315, tfreq=2)...
	   Assign 27 to optional reload r318 (freq=2)
	Hard reg 27 is preferable by r319 with profit 2
	 Assigning to 319 (cl=SSE_REGS, orig=219, freq=2, tfirst=315, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  322: r318:SF=r219:SF
      REG_DEAD r219:SF
   Insn after restoring regs:
  318: r219:SF=r315:SF
      REG_DEAD r315:SF
   Insn after restoring regs:
  317: r314:SF=r211:SF
      REG_DEAD r211:SF
   Insn after restoring regs:
  313: r211:SF=r311:SF
      REG_DEAD r311:SF
   Insn after restoring regs:
  308: r308:SF=r204:SF
      REG_DEAD r204:SF
   Insn after restoring regs:
  304: r204:SF=r305:SF
      REG_DEAD r305:SF
   Insn after restoring regs:
  303: r304:SF=r196:SF
      REG_DEAD r196:SF
   Insn after restoring regs:
  299: r196:SF=r301:SF
      REG_DEAD r301:SF
Remove optional reload reg 304
  Restoring original insn:
  223: r303:SF=r303:SF*r196:SF
      REG_DEAD r196:SF
  Deleting move 303
  303: r304:SF=r196:SF
      REG_DEAD r196:SF
deleting insn with uid = 303.
Remove optional reload reg 308
  Restoring original insn:
  237: r307:SF=r307:SF*r204:SF
      REG_DEAD r204:SF
  Deleting move 308
  308: r308:SF=r204:SF
      REG_DEAD r204:SF
deleting insn with uid = 308.
Remove optional reload reg 314
  Restoring original insn:
  256: r313:SF=r313:SF*r211:SF
      REG_DEAD r211:SF
  Deleting move 317
  317: r314:SF=r211:SF
      REG_DEAD r211:SF
deleting insn with uid = 317.
Remove optional reload reg 318
  Restoring original insn:
  270: r317:SF=r317:SF*r219:SF
      REG_DEAD r219:SF
  Deleting move 322
  322: r318:SF=r219:SF
      REG_DEAD r219:SF
deleting insn with uid = 322.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 270:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=323 from oldreg=219, assigning class SSE_REGS to r323
      Making reload reg 323 for reg 219 optional
  270: r317:SF=r317:SF*r323:SF
      REG_DEAD r219:SF
    Inserting insn reload before:
  327: r323:SF=r219:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 327:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=324 from oldreg=211, assigning class SSE_REGS to r324
      Making reload reg 324 for reg 211 optional
  256: r313:SF=r313:SF*r324:SF
      REG_DEAD r211:SF
    Inserting insn reload before:
  328: r324:SF=r211:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 328:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 237:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=325 from oldreg=204, assigning class SSE_REGS to r325
      Making reload reg 325 for reg 204 optional
  237: r307:SF=r307:SF*r325:SF
      REG_DEAD r204:SF
    Inserting insn reload before:
  329: r325:SF=r204:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 329:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=326 from oldreg=196, assigning class SSE_REGS to r326
      Making reload reg 326 for reg 196 optional
  223: r303:SF=r303:SF*r326:SF
      REG_DEAD r196:SF
    Inserting insn reload before:
  330: r326:SF=r196:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 330:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=327 from oldreg=219, assigning class SSE_REGS to inheritance r327
    Original reg change 219->327 (bb3):
  318: r327:SF=r315:SF
      REG_DEAD r315:SF
    Add original<-inheritance after:
  331: r219:SF=r327:SF

    Inheritance reuse change 219->327 (bb3):
  327: r323:SF=r327:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=328 from oldreg=211, assigning class SSE_REGS to inheritance r328
    Original reg change 211->328 (bb3):
  313: r328:SF=r311:SF
      REG_DEAD r311:SF
    Add original<-inheritance after:
  332: r211:SF=r328:SF

    Inheritance reuse change 211->328 (bb3):
  328: r324:SF=r328:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=329 from oldreg=204, assigning class SSE_REGS to inheritance r329
    Original reg change 204->329 (bb3):
  304: r329:SF=r305:SF
      REG_DEAD r305:SF
    Add original<-inheritance after:
  333: r204:SF=r329:SF

    Inheritance reuse change 204->329 (bb3):
  329: r325:SF=r329:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=330 from oldreg=196, assigning class SSE_REGS to inheritance r330
    Original reg change 196->330 (bb3):
  299: r330:SF=r301:SF
      REG_DEAD r301:SF
    Add original<-inheritance after:
  334: r196:SF=r330:SF

    Inheritance reuse change 196->330 (bb3):
  330: r326:SF=r330:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   331: r219:SF=r327:SF
deleting insn with uid = 331.
	    Removing dead insn:
   332: r211:SF=r328:SF
deleting insn with uid = 332.
	    Removing dead insn:
   333: r204:SF=r329:SF
deleting insn with uid = 333.
	    Removing dead insn:
   334: r196:SF=r330:SF
deleting insn with uid = 334.
EBB 4
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
   Insn 290: point = 0
   Insn 289: point = 0
   Insn 285: point = 1
   Insn 282: point = 3
  BB 4
   Insn 280: point = 4
   Insn 279: point = 4
   Insn 277: point = 5
   Insn 276: point = 7
   Insn 275: point = 9
  BB 2
   Insn 292: point = 10
   Insn 31: point = 10
   Insn 30: point = 10
   Insn 29: point = 11
   Insn 28: point = 12
   Insn 27: point = 13
   Insn 26: point = 14
   Insn 25: point = 15
   Insn 24: point = 16
   Insn 23: point = 17
   Insn 22: point = 18
   Insn 21: point = 19
   Insn 20: point = 20
   Insn 19: point = 21
   Insn 18: point = 22
   Insn 17: point = 23
   Insn 16: point = 24
   Insn 15: point = 25
   Insn 14: point = 26
   Insn 13: point = 27
   Insn 12: point = 28
   Insn 11: point = 29
   Insn 10: point = 30
   Insn 6: point = 30
   Insn 5: point = 30
   Insn 4: point = 30
   Insn 3: point = 30
   Insn 2: point = 30
  BB 3
   Insn 272: point = 30
   Insn 271: point = 30
   Insn 321: point = 31
	Hard reg 0 is preferable by r317 with profit 1
   Insn 270: point = 33
   Insn 327: point = 34
	   Creating copy r323<-r327@1
   Insn 320: point = 36
	Hard reg 0 is preferable by r317 with profit 1
	Hard reg 21 is preferable by r317 with profit 1
   Insn 269: point = 38
   Insn 268: point = 40
   Insn 267: point = 41
   Insn 319: point = 41
	Hard reg 21 is preferable by r316 with profit 1
   Insn 266: point = 42
	Hard reg 21 is preferable by r316 with profit 1
	Hard reg 0 is preferable by r316 with profit 1
   Insn 265: point = 44
   Insn 318: point = 45
	   Creating copy r315->r327@1
   Insn 264: point = 47
   Insn 263: point = 48
   Insn 262: point = 50
   Insn 261: point = 51
   Insn 260: point = 53
   Insn 259: point = 55
   Insn 258: point = 57
   Insn 257: point = 58
   Insn 316: point = 59
	Hard reg 0 is preferable by r313 with profit 1
   Insn 256: point = 61
   Insn 328: point = 62
	   Creating copy r324<-r328@1
   Insn 315: point = 64
	Hard reg 0 is preferable by r313 with profit 1
	Hard reg 21 is preferable by r313 with profit 1
   Insn 255: point = 66
   Insn 254: point = 68
   Insn 253: point = 69
   Insn 314: point = 69
	Hard reg 21 is preferable by r312 with profit 1
   Insn 252: point = 70
	Hard reg 21 is preferable by r312 with profit 1
	Hard reg 0 is preferable by r312 with profit 1
   Insn 251: point = 72
   Insn 313: point = 73
	   Creating copy r311->r328@1
   Insn 250: point = 75
   Insn 249: point = 76
   Insn 248: point = 78
   Insn 247: point = 79
   Insn 246: point = 81
   Insn 245: point = 83
   Insn 244: point = 84
   Insn 312: point = 85
	Hard reg 0 is preferable by r310 with profit 1
   Insn 243: point = 87
   Insn 311: point = 87
	Hard reg 0 is preferable by r310 with profit 1
	Hard reg 21 is preferable by r310 with profit 1
   Insn 242: point = 89
   Insn 241: point = 90
   Insn 310: point = 91
	Hard reg 0 is preferable by r309 with profit 1
   Insn 240: point = 93
   Insn 309: point = 93
	Hard reg 0 is preferable by r309 with profit 1
	Hard reg 21 is preferable by r309 with profit 1
   Insn 239: point = 95
   Insn 238: point = 96
   Insn 307: point = 97
	Hard reg 0 is preferable by r307 with profit 1
   Insn 237: point = 99
   Insn 329: point = 100
	   Creating copy r325<-r329@1
   Insn 306: point = 102
	Hard reg 0 is preferable by r307 with profit 1
	Hard reg 21 is preferable by r307 with profit 1
   Insn 236: point = 104
   Insn 235: point = 106
   Insn 234: point = 107
   Insn 305: point = 107
	Hard reg 21 is preferable by r306 with profit 1
   Insn 233: point = 108
	Hard reg 21 is preferable by r306 with profit 1
	Hard reg 0 is preferable by r306 with profit 1
   Insn 232: point = 110
   Insn 304: point = 111
	   Creating copy r305->r329@1
   Insn 231: point = 113
   Insn 230: point = 114
   Insn 229: point = 116
   Insn 228: point = 117
   Insn 227: point = 119
   Insn 226: point = 121
   Insn 225: point = 123
   Insn 224: point = 124
   Insn 302: point = 125
	Hard reg 0 is preferable by r303 with profit 1
   Insn 223: point = 127
   Insn 330: point = 128
	   Creating copy r326<-r330@1
   Insn 301: point = 130
	Hard reg 0 is preferable by r303 with profit 1
	Hard reg 21 is preferable by r303 with profit 1
   Insn 222: point = 132
   Insn 221: point = 134
   Insn 220: point = 135
   Insn 300: point = 135
	Hard reg 21 is preferable by r302 with profit 1
   Insn 219: point = 136
	Hard reg 21 is preferable by r302 with profit 1
	Hard reg 0 is preferable by r302 with profit 1
   Insn 218: point = 138
   Insn 299: point = 139
	   Creating copy r301->r330@1
   Insn 217: point = 141
   Insn 216: point = 142
   Insn 215: point = 144
   Insn 214: point = 145
   Insn 213: point = 147
   Insn 212: point = 149
   Insn 211: point = 150
   Insn 298: point = 151
	Hard reg 0 is preferable by r300 with profit 1
   Insn 210: point = 153
   Insn 297: point = 153
	Hard reg 0 is preferable by r300 with profit 1
	Hard reg 21 is preferable by r300 with profit 1
   Insn 209: point = 155
   Insn 208: point = 156
   Insn 296: point = 157
	Hard reg 0 is preferable by r299 with profit 1
   Insn 207: point = 159
   Insn 295: point = 159
	Hard reg 0 is preferable by r299 with profit 1
	Hard reg 21 is preferable by r299 with profit 1
   Insn 206: point = 161
   Insn 205: point = 162
   Insn 204: point = 163
   Insn 203: point = 164
   Insn 202: point = 164
   Insn 201: point = 165
   Insn 200: point = 166
   Insn 199: point = 168
   Insn 198: point = 170
   Insn 197: point = 172
   Insn 196: point = 173
   Insn 195: point = 175
   Insn 194: point = 177
   Insn 193: point = 179
   Insn 192: point = 180
   Insn 191: point = 182
   Insn 190: point = 184
   Insn 189: point = 186
   Insn 188: point = 187
   Insn 187: point = 189
   Insn 186: point = 191
   Insn 185: point = 192
   Insn 184: point = 193
   Insn 183: point = 194
   Insn 182: point = 194
   Insn 181: point = 195
   Insn 180: point = 197
   Insn 179: point = 199
   Insn 178: point = 201
   Insn 177: point = 203
   Insn 176: point = 205
   Insn 175: point = 206
   Insn 174: point = 208
   Insn 173: point = 210
   Insn 172: point = 212
   Insn 171: point = 213
   Insn 170: point = 215
   Insn 169: point = 217
   Insn 168: point = 219
   Insn 167: point = 220
   Insn 166: point = 222
   Insn 165: point = 224
   Insn 164: point = 226
   Insn 163: point = 227
   Insn 162: point = 229
   Insn 161: point = 231
   Insn 160: point = 233
   Insn 159: point = 235
   Insn 158: point = 236
   Insn 157: point = 238
   Insn 156: point = 240
   Insn 155: point = 241
   Insn 154: point = 243
   Insn 153: point = 245
   Insn 152: point = 247
   Insn 151: point = 248
   Insn 150: point = 250
   Insn 149: point = 252
   Insn 148: point = 253
   Insn 147: point = 254
   Insn 146: point = 255
   Insn 145: point = 255
   Insn 144: point = 256
   Insn 143: point = 257
   Insn 142: point = 259
   Insn 141: point = 261
   Insn 140: point = 263
   Insn 139: point = 264
   Insn 138: point = 266
   Insn 137: point = 268
   Insn 136: point = 270
   Insn 135: point = 271
   Insn 134: point = 273
   Insn 133: point = 275
   Insn 132: point = 277
   Insn 131: point = 278
   Insn 130: point = 280
   Insn 129: point = 282
   Insn 128: point = 283
   Insn 127: point = 284
   Insn 126: point = 285
   Insn 125: point = 285
   Insn 124: point = 286
   Insn 123: point = 288
   Insn 122: point = 290
   Insn 121: point = 292
   Insn 120: point = 294
   Insn 119: point = 296
   Insn 118: point = 297
   Insn 117: point = 299
   Insn 116: point = 301
   Insn 115: point = 303
   Insn 114: point = 304
   Insn 113: point = 306
   Insn 112: point = 308
   Insn 111: point = 310
   Insn 110: point = 311
   Insn 109: point = 313
   Insn 108: point = 315
   Insn 107: point = 317
   Insn 106: point = 318
   Insn 105: point = 320
   Insn 104: point = 322
   Insn 103: point = 324
   Insn 102: point = 326
   Insn 101: point = 327
   Insn 100: point = 329
   Insn 99: point = 331
   Insn 98: point = 332
   Insn 97: point = 334
   Insn 96: point = 336
   Insn 95: point = 338
   Insn 94: point = 339
   Insn 93: point = 341
   Insn 92: point = 343
   Insn 91: point = 344
   Insn 90: point = 345
   Insn 89: point = 346
   Insn 88: point = 346
   Insn 87: point = 347
   Insn 86: point = 348
   Insn 85: point = 350
   Insn 84: point = 352
   Insn 83: point = 354
   Insn 82: point = 355
   Insn 81: point = 357
   Insn 80: point = 359
   Insn 79: point = 361
   Insn 78: point = 362
   Insn 77: point = 364
   Insn 76: point = 366
   Insn 75: point = 368
   Insn 74: point = 369
   Insn 73: point = 371
   Insn 72: point = 373
   Insn 71: point = 374
   Insn 70: point = 375
   Insn 69: point = 376
   Insn 68: point = 376
   Insn 67: point = 377
   Insn 66: point = 379
   Insn 65: point = 381
   Insn 64: point = 383
   Insn 63: point = 385
   Insn 62: point = 387
   Insn 61: point = 388
   Insn 60: point = 390
   Insn 59: point = 392
   Insn 58: point = 394
   Insn 57: point = 395
   Insn 56: point = 397
   Insn 55: point = 399
   Insn 54: point = 401
   Insn 53: point = 402
   Insn 52: point = 404
   Insn 51: point = 406
   Insn 50: point = 408
   Insn 49: point = 409
   Insn 48: point = 411
   Insn 47: point = 413
   Insn 46: point = 415
   Insn 45: point = 417
   Insn 44: point = 418
   Insn 43: point = 420
   Insn 42: point = 422
   Insn 41: point = 423
   Insn 40: point = 425
   Insn 39: point = 427
   Insn 38: point = 429
   Insn 37: point = 430
   Insn 36: point = 432
   Insn 35: point = 434
 r83: [6..7]
 r84: [4..5]
 r85: [431..432]
 r86: [428..430]
 r87: [426..427]
 r88: [424..425]
 r89: [410..423]
 r90: [419..420]
 r91: [416..418]
 r92: [414..415]
 r93: [412..413]
 r94: [410..411]
 r95: [378..409]
 r96: [405..406]
 r97: [403..404]
 r98: [400..402]
 r99: [398..399]
 r100: [396..397]
 r101: [380..395]
 r102: [391..392]
 r103: [389..390]
 r104: [386..388]
 r105: [384..385]
 r106: [382..383]
 r107: [380..381]
 r108: [378..379]
 r109: [376..377]
 r110: [370..371]
 r111: [367..369]
 r112: [365..366]
 r113: [363..364]
 r114: [347..362]
 r115: [358..359]
 r116: [356..357]
 r117: [353..355]
 r118: [351..352]
 r119: [349..350]
 r120: [346..348]
 r121: [340..341]
 r122: [337..339]
 r123: [335..336]
 r124: [333..334]
 r125: [319..332]
 r126: [328..329]
 r127: [325..327]
 r128: [323..324]
 r129: [321..322]
 r130: [319..320]
 r131: [287..318]
 r132: [314..315]
 r133: [312..313]
 r134: [309..311]
 r135: [307..308]
 r136: [305..306]
 r137: [289..304]
 r138: [300..301]
 r139: [298..299]
 r140: [295..297]
 r141: [293..294]
 r142: [291..292]
 r143: [289..290]
 r144: [287..288]
 r145: [285..286]
 r146: [279..280]
 r147: [276..278]
 r148: [274..275]
 r149: [272..273]
 r150: [256..271]
 r151: [267..268]
 r152: [265..266]
 r153: [262..264]
 r154: [260..261]
 r155: [258..259]
 r156: [255..257]
 r157: [249..250]
 r158: [246..248]
 r159: [244..245]
 r160: [242..243]
 r161: [228..241]
 r162: [237..238]
 r163: [234..236]
 r164: [232..233]
 r165: [230..231]
 r166: [228..229]
 r167: [196..227]
 r168: [223..224]
 r169: [221..222]
 r170: [218..220]
 r171: [216..217]
 r172: [214..215]
 r173: [198..213]
 r174: [209..210]
 r175: [207..208]
 r176: [204..206]
 r177: [202..203]
 r178: [200..201]
 r179: [198..199]
 r180: [196..197]
 r181: [194..195]
 r182: [188..189]
 r183: [185..187]
 r184: [183..184]
 r185: [181..182]
 r186: [165..180]
 r187: [176..177]
 r188: [174..175]
 r189: [171..173]
 r190: [169..170]
 r191: [167..168]
 r192: [164..166]
 r193: [146..147]
 r194: [143..145]
 r195: [124..142]
 r197: [133..134]
 r198: [131..132]
 r199: [124..125]
 r200: [120..121]
 r201: [118..119]
 r202: [115..117]
 r203: [96..114]
 r205: [105..106]
 r206: [103..104]
 r207: [96..97]
 r208: [80..81]
 r209: [77..79]
 r210: [58..76]
 r212: [67..68]
 r213: [65..66]
 r214: [58..59]
 r215: [54..55]
 r216: [52..53]
 r217: [49..51]
 r218: [30..48]
 r220: [39..40]
 r221: [37..38]
 r222: [30..31]
 r223: [2..3]
 r224: [0..1]
 r225: [28..29]
 r226: [26..27]
 r227: [24..25]
 r228: [22..23]
 r229: [20..21]
 r230: [18..19]
 r231: [16..17]
 r232: [14..15]
 r233: [12..13]
 r234: [10..11]
 r235: [433..434]
 r236: [428..429]
 r237: [421..422]
 r238: [416..417]
 r239: [407..408]
 r240: [400..401]
 r241: [393..394]
 r242: [386..387]
 r243: [374..375]
 r244: [372..373]
 r245: [367..368]
 r246: [360..361]
 r247: [353..354]
 r248: [344..345]
 r249: [342..343]
 r250: [337..338]
 r251: [330..331]
 r252: [325..326]
 r253: [316..317]
 r254: [309..310]
 r255: [302..303]
 r256: [295..296]
 r257: [283..284]
 r258: [281..282]
 r259: [276..277]
 r260: [269..270]
 r261: [262..263]
 r262: [253..254]
 r263: [251..252]
 r264: [246..247]
 r265: [239..240]
 r266: [234..235]
 r267: [225..226]
 r268: [218..219]
 r269: [211..212]
 r270: [204..205]
 r271: [192..193]
 r272: [190..191]
 r273: [185..186]
 r274: [178..179]
 r275: [171..172]
 r276: [162..163]
 r277: [156..157]
 r278: [160..161]
 r279: [150..151]
 r280: [154..155]
 r281: [148..149]
 r282: [143..144]
 r283: [137..138]
 r284: [122..123]
 r285: [115..116]
 r286: [109..110]
 r287: [90..91]
 r288: [94..95]
 r289: [84..85]
 r290: [88..89]
 r291: [82..83]
 r292: [77..78]
 r293: [71..72]
 r294: [56..57]
 r295: [49..50]
 r296: [43..44]
 r297: [8..9]
 r299: [158..159]
 r300: [152..153]
 r301: [140..141]
 r302: [135..136]
 r303: [126..130]
 r305: [112..113]
 r306: [107..108]
 r307: [98..102]
 r309: [92..93]
 r310: [86..87]
 r311: [74..75]
 r312: [69..70]
 r313: [60..64]
 r315: [46..47]
 r316: [41..42]
 r317: [32..36]
 r323: [33..34]
 r324: [61..62]
 r325: [99..100]
 r326: [127..128]
 r327: [35..45]
 r328: [63..73]
 r329: [101..111]
 r330: [129..139]
Compressing live ranges: from 435 to 386 - 88%
Ranges after the compression:
 r83: [6..7]
 r84: [4..5]
 r85: [382..383]
 r86: [380..381]
 r87: [378..379]
 r88: [376..377]
 r89: [364..375]
 r90: [372..373]
 r91: [370..371]
 r92: [368..369]
 r93: [366..367]
 r94: [364..365]
 r95: [336..363]
 r96: [360..361]
 r97: [358..359]
 r98: [356..357]
 r99: [354..355]
 r100: [352..353]
 r101: [338..351]
 r102: [348..349]
 r103: [346..347]
 r104: [344..345]
 r105: [342..343]
 r106: [340..341]
 r107: [338..339]
 r108: [336..337]
 r109: [334..335]
 r110: [328..329]
 r111: [326..327]
 r112: [324..325]
 r113: [322..323]
 r114: [308..321]
 r115: [318..319]
 r116: [316..317]
 r117: [314..315]
 r118: [312..313]
 r119: [310..311]
 r120: [308..309]
 r121: [302..303]
 r122: [300..301]
 r123: [298..299]
 r124: [296..297]
 r125: [284..295]
 r126: [292..293]
 r127: [290..291]
 r128: [288..289]
 r129: [286..287]
 r130: [284..285]
 r131: [256..283]
 r132: [280..281]
 r133: [278..279]
 r134: [276..277]
 r135: [274..275]
 r136: [272..273]
 r137: [258..271]
 r138: [268..269]
 r139: [266..267]
 r140: [264..265]
 r141: [262..263]
 r142: [260..261]
 r143: [258..259]
 r144: [256..257]
 r145: [254..255]
 r146: [248..249]
 r147: [246..247]
 r148: [244..245]
 r149: [242..243]
 r150: [228..241]
 r151: [238..239]
 r152: [236..237]
 r153: [234..235]
 r154: [232..233]
 r155: [230..231]
 r156: [228..229]
 r157: [222..223]
 r158: [220..221]
 r159: [218..219]
 r160: [216..217]
 r161: [204..215]
 r162: [212..213]
 r163: [210..211]
 r164: [208..209]
 r165: [206..207]
 r166: [204..205]
 r167: [176..203]
 r168: [200..201]
 r169: [198..199]
 r170: [196..197]
 r171: [194..195]
 r172: [192..193]
 r173: [178..191]
 r174: [188..189]
 r175: [186..187]
 r176: [184..185]
 r177: [182..183]
 r178: [180..181]
 r179: [178..179]
 r180: [176..177]
 r181: [174..175]
 r182: [168..169]
 r183: [166..167]
 r184: [164..165]
 r185: [162..163]
 r186: [148..161]
 r187: [158..159]
 r188: [156..157]
 r189: [154..155]
 r190: [152..153]
 r191: [150..151]
 r192: [148..149]
 r193: [130..131]
 r194: [128..129]
 r195: [112..127]
 r197: [120..121]
 r198: [118..119]
 r199: [112..113]
 r200: [108..109]
 r201: [106..107]
 r202: [104..105]
 r203: [88..103]
 r205: [96..97]
 r206: [94..95]
 r207: [88..89]
 r208: [72..73]
 r209: [70..71]
 r210: [54..69]
 r212: [62..63]
 r213: [60..61]
 r214: [54..55]
 r215: [50..51]
 r216: [48..49]
 r217: [46..47]
 r218: [30..45]
 r220: [38..39]
 r221: [36..37]
 r222: [30..31]
 r223: [2..3]
 r224: [0..1]
 r225: [28..29]
 r226: [26..27]
 r227: [24..25]
 r228: [22..23]
 r229: [20..21]
 r230: [18..19]
 r231: [16..17]
 r232: [14..15]
 r233: [12..13]
 r234: [10..11]
 r235: [384..385]
 r236: [380..381]
 r237: [374..375]
 r238: [370..371]
 r239: [362..363]
 r240: [356..357]
 r241: [350..351]
 r242: [344..345]
 r243: [332..333]
 r244: [330..331]
 r245: [326..327]
 r246: [320..321]
 r247: [314..315]
 r248: [306..307]
 r249: [304..305]
 r250: [300..301]
 r251: [294..295]
 r252: [290..291]
 r253: [282..283]
 r254: [276..277]
 r255: [270..271]
 r256: [264..265]
 r257: [252..253]
 r258: [250..251]
 r259: [246..247]
 r260: [240..241]
 r261: [234..235]
 r262: [226..227]
 r263: [224..225]
 r264: [220..221]
 r265: [214..215]
 r266: [210..211]
 r267: [202..203]
 r268: [196..197]
 r269: [190..191]
 r270: [184..185]
 r271: [172..173]
 r272: [170..171]
 r273: [166..167]
 r274: [160..161]
 r275: [154..155]
 r276: [146..147]
 r277: [140..141]
 r278: [144..145]
 r279: [134..135]
 r280: [138..139]
 r281: [132..133]
 r282: [128..129]
 r283: [124..125]
 r284: [110..111]
 r285: [104..105]
 r286: [100..101]
 r287: [82..83]
 r288: [86..87]
 r289: [76..77]
 r290: [80..81]
 r291: [74..75]
 r292: [70..71]
 r293: [66..67]
 r294: [52..53]
 r295: [46..47]
 r296: [42..43]
 r297: [8..9]
 r299: [142..143]
 r300: [136..137]
 r301: [126..127]
 r302: [122..123]
 r303: [114..117]
 r305: [102..103]
 r306: [98..99]
 r307: [90..93]
 r309: [84..85]
 r310: [78..79]
 r311: [68..69]
 r312: [64..65]
 r313: [56..59]
 r315: [44..45]
 r316: [40..41]
 r317: [32..35]
 r323: [32..33]
 r324: [56..57]
 r325: [90..91]
 r326: [114..115]
 r327: [34..43]
 r328: [58..67]
 r329: [92..101]
 r330: [116..125]

********** Assignment #2: **********

	 Assigning to 323 (cl=SSE_REGS, orig=219, freq=2, tfirst=323, tfreq=2)...
	   Assign 28 to optional reload r323 (freq=2)
	Hard reg 28 is preferable by r327 with profit 1
	 Assigning to 327 (cl=SSE_REGS, orig=219, freq=2, tfirst=323, tfreq=2)...
	 Assigning to 324 (cl=SSE_REGS, orig=211, freq=2, tfirst=324, tfreq=2)...
	   Assign 24 to optional reload r324 (freq=2)
	Hard reg 24 is preferable by r328 with profit 1
	 Assigning to 328 (cl=SSE_REGS, orig=211, freq=2, tfirst=324, tfreq=2)...
	 Assigning to 325 (cl=SSE_REGS, orig=204, freq=2, tfirst=325, tfreq=2)...
	   Assign 25 to optional reload r325 (freq=2)
	Hard reg 25 is preferable by r329 with profit 1
	 Assigning to 329 (cl=SSE_REGS, orig=204, freq=2, tfirst=325, tfreq=2)...
	 Assigning to 326 (cl=SSE_REGS, orig=196, freq=2, tfirst=326, tfreq=2)...
	   Assign 26 to optional reload r326 (freq=2)
	Hard reg 26 is preferable by r330 with profit 1
	 Assigning to 330 (cl=SSE_REGS, orig=196, freq=2, tfirst=326, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  327: r323:SF=r219:SF
      REG_DEAD r219:SF
   Insn after restoring regs:
  318: r219:SF=r315:SF
      REG_DEAD r315:SF
   Insn after restoring regs:
  328: r324:SF=r211:SF
      REG_DEAD r211:SF
   Insn after restoring regs:
  313: r211:SF=r311:SF
      REG_DEAD r311:SF
   Insn after restoring regs:
  329: r325:SF=r204:SF
      REG_DEAD r204:SF
   Insn after restoring regs:
  304: r204:SF=r305:SF
      REG_DEAD r305:SF
   Insn after restoring regs:
  330: r326:SF=r196:SF
      REG_DEAD r196:SF
   Insn after restoring regs:
  299: r196:SF=r301:SF
      REG_DEAD r301:SF
Keep optional reload reg 304
Keep optional reload reg 308
Keep optional reload reg 314
Keep optional reload reg 318
Remove optional reload reg 323
  Restoring original insn:
  270: r317:SF=r317:SF*r219:SF
      REG_DEAD r219:SF
  Deleting move 327
  327: r323:SF=r219:SF
      REG_DEAD r219:SF
deleting insn with uid = 327.
Remove optional reload reg 324
  Restoring original insn:
  256: r313:SF=r313:SF*r211:SF
      REG_DEAD r211:SF
  Deleting move 328
  328: r324:SF=r211:SF
      REG_DEAD r211:SF
deleting insn with uid = 328.
Remove optional reload reg 325
  Restoring original insn:
  237: r307:SF=r307:SF*r204:SF
      REG_DEAD r204:SF
  Deleting move 329
  329: r325:SF=r204:SF
      REG_DEAD r204:SF
deleting insn with uid = 329.
Remove optional reload reg 326
  Restoring original insn:
  223: r303:SF=r303:SF*r196:SF
      REG_DEAD r196:SF
  Deleting move 330
  330: r326:SF=r196:SF
      REG_DEAD r196:SF
deleting insn with uid = 330.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 270:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 237:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
   Insn 290: point = 0
   Insn 289: point = 0
   Insn 285: point = 1
   Insn 282: point = 3
  BB 4
   Insn 280: point = 4
   Insn 279: point = 4
   Insn 277: point = 5
   Insn 276: point = 7
   Insn 275: point = 9
  BB 2
   Insn 292: point = 10
   Insn 31: point = 10
   Insn 30: point = 10
   Insn 29: point = 11
   Insn 28: point = 12
   Insn 27: point = 13
   Insn 26: point = 14
   Insn 25: point = 15
   Insn 24: point = 16
   Insn 23: point = 17
   Insn 22: point = 18
   Insn 21: point = 19
   Insn 20: point = 20
   Insn 19: point = 21
   Insn 18: point = 22
   Insn 17: point = 23
   Insn 16: point = 24
   Insn 15: point = 25
   Insn 14: point = 26
   Insn 13: point = 27
   Insn 12: point = 28
   Insn 11: point = 29
   Insn 10: point = 30
   Insn 6: point = 30
   Insn 5: point = 30
   Insn 4: point = 30
   Insn 3: point = 30
   Insn 2: point = 30
  BB 3
   Insn 272: point = 30
   Insn 271: point = 30
   Insn 321: point = 31
   Insn 270: point = 33
   Insn 320: point = 34
   Insn 269: point = 36
   Insn 268: point = 38
   Insn 267: point = 39
   Insn 319: point = 39
   Insn 266: point = 40
   Insn 265: point = 42
   Insn 318: point = 43
   Insn 264: point = 45
   Insn 263: point = 46
   Insn 262: point = 48
   Insn 261: point = 49
   Insn 260: point = 51
   Insn 259: point = 53
   Insn 258: point = 55
   Insn 257: point = 56
   Insn 316: point = 57
   Insn 256: point = 59
   Insn 315: point = 60
   Insn 255: point = 62
   Insn 254: point = 64
   Insn 253: point = 65
   Insn 314: point = 65
   Insn 252: point = 66
   Insn 251: point = 68
   Insn 313: point = 69
   Insn 250: point = 71
   Insn 249: point = 72
   Insn 248: point = 74
   Insn 247: point = 75
   Insn 246: point = 77
   Insn 245: point = 79
   Insn 244: point = 80
   Insn 312: point = 81
   Insn 243: point = 83
   Insn 311: point = 83
   Insn 242: point = 85
   Insn 241: point = 86
   Insn 310: point = 87
   Insn 240: point = 89
   Insn 309: point = 89
   Insn 239: point = 91
   Insn 238: point = 92
   Insn 307: point = 93
   Insn 237: point = 95
   Insn 306: point = 96
   Insn 236: point = 98
   Insn 235: point = 100
   Insn 234: point = 101
   Insn 305: point = 101
   Insn 233: point = 102
   Insn 232: point = 104
   Insn 304: point = 105
   Insn 231: point = 107
   Insn 230: point = 108
   Insn 229: point = 110
   Insn 228: point = 111
   Insn 227: point = 113
   Insn 226: point = 115
   Insn 225: point = 117
   Insn 224: point = 118
   Insn 302: point = 119
   Insn 223: point = 121
   Insn 301: point = 122
   Insn 222: point = 124
   Insn 221: point = 126
   Insn 220: point = 127
   Insn 300: point = 127
   Insn 219: point = 128
   Insn 218: point = 130
   Insn 299: point = 131
   Insn 217: point = 133
   Insn 216: point = 134
   Insn 215: point = 136
   Insn 214: point = 137
   Insn 213: point = 139
   Insn 212: point = 141
   Insn 211: point = 142
   Insn 298: point = 143
   Insn 210: point = 145
   Insn 297: point = 145
   Insn 209: point = 147
   Insn 208: point = 148
   Insn 296: point = 149
   Insn 207: point = 151
   Insn 295: point = 151
   Insn 206: point = 153
   Insn 205: point = 154
   Insn 204: point = 155
   Insn 203: point = 156
   Insn 202: point = 156
   Insn 201: point = 157
   Insn 200: point = 158
   Insn 199: point = 160
   Insn 198: point = 162
   Insn 197: point = 164
   Insn 196: point = 165
   Insn 195: point = 167
   Insn 194: point = 169
   Insn 193: point = 171
   Insn 192: point = 172
   Insn 191: point = 174
   Insn 190: point = 176
   Insn 189: point = 178
   Insn 188: point = 179
   Insn 187: point = 181
   Insn 186: point = 183
   Insn 185: point = 184
   Insn 184: point = 185
   Insn 183: point = 186
   Insn 182: point = 186
   Insn 181: point = 187
   Insn 180: point = 189
   Insn 179: point = 191
   Insn 178: point = 193
   Insn 177: point = 195
   Insn 176: point = 197
   Insn 175: point = 198
   Insn 174: point = 200
   Insn 173: point = 202
   Insn 172: point = 204
   Insn 171: point = 205
   Insn 170: point = 207
   Insn 169: point = 209
   Insn 168: point = 211
   Insn 167: point = 212
   Insn 166: point = 214
   Insn 165: point = 216
   Insn 164: point = 218
   Insn 163: point = 219
   Insn 162: point = 221
   Insn 161: point = 223
   Insn 160: point = 225
   Insn 159: point = 227
   Insn 158: point = 228
   Insn 157: point = 230
   Insn 156: point = 232
   Insn 155: point = 233
   Insn 154: point = 235
   Insn 153: point = 237
   Insn 152: point = 239
   Insn 151: point = 240
   Insn 150: point = 242
   Insn 149: point = 244
   Insn 148: point = 245
   Insn 147: point = 246
   Insn 146: point = 247
   Insn 145: point = 247
   Insn 144: point = 248
   Insn 143: point = 249
   Insn 142: point = 251
   Insn 141: point = 253
   Insn 140: point = 255
   Insn 139: point = 256
   Insn 138: point = 258
   Insn 137: point = 260
   Insn 136: point = 262
   Insn 135: point = 263
   Insn 134: point = 265
   Insn 133: point = 267
   Insn 132: point = 269
   Insn 131: point = 270
   Insn 130: point = 272
   Insn 129: point = 274
   Insn 128: point = 275
   Insn 127: point = 276
   Insn 126: point = 277
   Insn 125: point = 277
   Insn 124: point = 278
   Insn 123: point = 280
   Insn 122: point = 282
   Insn 121: point = 284
   Insn 120: point = 286
   Insn 119: point = 288
   Insn 118: point = 289
   Insn 117: point = 291
   Insn 116: point = 293
   Insn 115: point = 295
   Insn 114: point = 296
   Insn 113: point = 298
   Insn 112: point = 300
   Insn 111: point = 302
   Insn 110: point = 303
   Insn 109: point = 305
   Insn 108: point = 307
   Insn 107: point = 309
   Insn 106: point = 310
   Insn 105: point = 312
   Insn 104: point = 314
   Insn 103: point = 316
   Insn 102: point = 318
   Insn 101: point = 319
   Insn 100: point = 321
   Insn 99: point = 323
   Insn 98: point = 324
   Insn 97: point = 326
   Insn 96: point = 328
   Insn 95: point = 330
   Insn 94: point = 331
   Insn 93: point = 333
   Insn 92: point = 335
   Insn 91: point = 336
   Insn 90: point = 337
   Insn 89: point = 338
   Insn 88: point = 338
   Insn 87: point = 339
   Insn 86: point = 340
   Insn 85: point = 342
   Insn 84: point = 344
   Insn 83: point = 346
   Insn 82: point = 347
   Insn 81: point = 349
   Insn 80: point = 351
   Insn 79: point = 353
   Insn 78: point = 354
   Insn 77: point = 356
   Insn 76: point = 358
   Insn 75: point = 360
   Insn 74: point = 361
   Insn 73: point = 363
   Insn 72: point = 365
   Insn 71: point = 366
   Insn 70: point = 367
   Insn 69: point = 368
   Insn 68: point = 368
   Insn 67: point = 369
   Insn 66: point = 371
   Insn 65: point = 373
   Insn 64: point = 375
   Insn 63: point = 377
   Insn 62: point = 379
   Insn 61: point = 380
   Insn 60: point = 382
   Insn 59: point = 384
   Insn 58: point = 386
   Insn 57: point = 387
   Insn 56: point = 389
   Insn 55: point = 391
   Insn 54: point = 393
   Insn 53: point = 394
   Insn 52: point = 396
   Insn 51: point = 398
   Insn 50: point = 400
   Insn 49: point = 401
   Insn 48: point = 403
   Insn 47: point = 405
   Insn 46: point = 407
   Insn 45: point = 409
   Insn 44: point = 410
   Insn 43: point = 412
   Insn 42: point = 414
   Insn 41: point = 415
   Insn 40: point = 417
   Insn 39: point = 419
   Insn 38: point = 421
   Insn 37: point = 422
   Insn 36: point = 424
   Insn 35: point = 426
 r196: [121..131]
 r204: [95..105]
 r211: [59..69]
 r219: [33..43]
 r302: [127..128]
 r306: [101..102]
 r312: [65..66]
 r316: [39..40]
Compressing live ranges: from 427 to 8 - 1%
Ranges after the compression:
 r196: [6..7]
 r204: [4..5]
 r211: [2..3]
 r219: [0..1]
 r302: [6..7]
 r306: [4..5]
 r312: [2..3]
 r316: [0..1]
  Slot 0 regnos (width = 4):	 196	 219	 211	 204
  Slot 1 regnos (width = 8):	 302	 316	 312	 306
Changing spilled pseudos to memory in insn #299
Changing spilled pseudos to memory in insn #219
Changing spilled pseudos to memory in insn #300
Changing spilled pseudos to memory in insn #223
Changing spilled pseudos to memory in insn #304
Changing spilled pseudos to memory in insn #233
Changing spilled pseudos to memory in insn #305
Changing spilled pseudos to memory in insn #237
Changing spilled pseudos to memory in insn #313
Changing spilled pseudos to memory in insn #252
Changing spilled pseudos to memory in insn #314
Changing spilled pseudos to memory in insn #256
Changing spilled pseudos to memory in insn #318
Changing spilled pseudos to memory in insn #266
Changing spilled pseudos to memory in insn #319
Changing spilled pseudos to memory in insn #270
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #270
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #319
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 319:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 266:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #318
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 318:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #256
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #314
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 314:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 252:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #313
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 313:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #237
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #305
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 305:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 233:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #304
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 304:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #223
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #300
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 300:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 219:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #299
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 299:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 279
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 49
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 87
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 106
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 144
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 145
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 163
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 201
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 216
changing reg in insn 216
changing reg in insn 224
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 230
changing reg in insn 230
changing reg in insn 238
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 238
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 249
changing reg in insn 249
changing reg in insn 249
changing reg in insn 257
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 263
changing reg in insn 263
changing reg in insn 263
changing reg in insn 271
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 271
changing reg in insn 282
changing reg in insn 285
changing reg in insn 285
changing reg in insn 289
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 136
changing reg in insn 137
changing reg in insn 140
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 164
changing reg in insn 165
changing reg in insn 168
changing reg in insn 172
changing reg in insn 173
changing reg in insn 176
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 189
changing reg in insn 193
changing reg in insn 194
changing reg in insn 197
changing reg in insn 204
changing reg in insn 205
changing reg in insn 208
changing reg in insn 206
changing reg in insn 211
changing reg in insn 209
changing reg in insn 212
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 225
changing reg in insn 226
changing reg in insn 229
changing reg in insn 230
changing reg in insn 232
changing reg in insn 233
changing reg in insn 241
changing reg in insn 239
changing reg in insn 244
changing reg in insn 242
changing reg in insn 245
changing reg in insn 246
changing reg in insn 248
changing reg in insn 249
changing reg in insn 251
changing reg in insn 252
changing reg in insn 258
changing reg in insn 259
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 266
changing reg in insn 275
changing reg in insn 276
deleting insn with uid = 68.
deleting insn with uid = 87.
deleting insn with uid = 88.
deleting insn with uid = 125.
deleting insn with uid = 144.
deleting insn with uid = 145.
deleting insn with uid = 182.
deleting insn with uid = 201.
deleting insn with uid = 202.
deleting insn with uid = 295.
deleting insn with uid = 297.
deleting insn with uid = 221.
deleting insn with uid = 301.
deleting insn with uid = 235.
deleting insn with uid = 306.
deleting insn with uid = 309.
deleting insn with uid = 311.
deleting insn with uid = 254.
deleting insn with uid = 315.
deleting insn with uid = 268.
deleting insn with uid = 320.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 220.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 253.
verify found no changes in insn with uid = 267.


int quality(float*, float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8]
;;  ref usage 	r0={140d,130u} r1={33d,23u,22e} r2={11d,1u} r3={4d,4u} r4={11d,1u} r5={11d,1u} r6={1d,112u} r7={1d,15u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={68d,1u} r18={10d} r19={10d} r20={1d,1u,22e} r21={64d,63u} r22={20d,9u} r23={14d,3u} r24={12d,1u} r25={12d,1u} r26={12d,1u} r27={12d,1u} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d,1u} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} 
;;    total ref usage 1393{980d,369u,44e} in 278{268 regular + 10 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 225 226 227 228 229 230 231 232 233 234
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
        (reg:DI 1 dx [ scratch ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 procpar_info+0 S8 A64])
        (reg:DI 2 cx [ procpar_info ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 preprocess+0 S8 A64])
        (reg:DI 37 r8 [ preprocess ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:328 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 0 ax [225])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [225])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DF 0 ax [226])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [226])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DF 0 ax [227])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [227])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 0 ax [228])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [228])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DF 0 ax [229])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [229])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DF 0 ax [230])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [230])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 0 ax [231])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 0 ax [231])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DF 0 ax [232])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 0 ax [232])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DF 0 ax [233])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:331 128 {*movdf_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [233])) ge2fitman_preproc.cpp:331 128 {*movdf_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DF 0 ax [234])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:331 128 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [234])) ge2fitman_preproc.cpp:331 128 {*movdf_internal}
     (nil))
(insn 31 30 292 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:333 90 {*movsi_internal}
     (nil))
(jump_insn 292 31 293 2 (set (pc)
        (label_ref 273)) ge2fitman_preproc.cpp:333 636 {jump}
     (nil)
 -> 273)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 293 292 278)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296
(code_label 278 293 34 3 80 "" [1 uses])
(note 34 278 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg:SI 0 ax [235])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:335 90 {*movsi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:DI 0 ax [orig:85 D.25615 ] [85])
        (sign_extend:DI (reg:SI 0 ax [235]))) ge2fitman_preproc.cpp:335 142 {*extendsidi2_rex64}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg:DI 1 dx [orig:86 D.25615 ] [86])
                (ashift:DI (reg:DI 0 ax [orig:85 D.25615 ] [85])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:335 497 {*ashldi3_1}
     (nil))
(insn 38 37 39 3 (set (reg/f:DI 0 ax [236])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:335 89 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.25616 ] [87])
                (plus:DI (reg/f:DI 0 ax [236])
                    (reg:DI 1 dx [orig:86 D.25615 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.25615 ] [86]))
        (nil)))
(insn 40 39 41 3 (set (reg:SF 21 xmm0 [orig:88 D.25617 ] [88])
        (mem:SF (reg/f:DI 0 ax [orig:87 D.25616 ] [87]) [0 *_20+0 S4 A32])) ge2fitman_preproc.cpp:335 129 {*movsf_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DF 22 xmm1 [orig:89 D.25618 ] [89])
        (float_extend:DF (reg:SF 21 xmm0 [orig:88 D.25617 ] [88]))) ge2fitman_preproc.cpp:335 152 {*extendsfdf2_sse}
     (nil))
(insn 42 41 43 3 (set (reg:SI 0 ax [237])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:335 90 {*movsi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:DI 0 ax [orig:90 D.25615 ] [90])
        (sign_extend:DI (reg:SI 0 ax [237]))) ge2fitman_preproc.cpp:335 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 1 dx [orig:91 D.25615 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.25615 ] [90])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:335 497 {*ashldi3_1}
     (nil))
(insn 45 44 46 3 (set (reg/f:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:335 89 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.25616 ] [92])
                (plus:DI (reg/f:DI 0 ax [238])
                    (reg:DI 1 dx [orig:91 D.25615 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.25615 ] [91]))
        (nil)))
(insn 47 46 48 3 (set (reg:SF 21 xmm0 [orig:93 D.25617 ] [93])
        (mem:SF (reg/f:DI 0 ax [orig:92 D.25616 ] [92]) [0 *_25+0 S4 A32])) ge2fitman_preproc.cpp:335 129 {*movsf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DF 21 xmm0 [orig:94 D.25618 ] [94])
        (float_extend:DF (reg:SF 21 xmm0 [orig:93 D.25617 ] [93]))) ge2fitman_preproc.cpp:335 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 3 (set (reg:DF 22 xmm1 [orig:95 D.25618 ] [95])
        (mult:DF (reg:DF 22 xmm1 [orig:89 D.25618 ] [89])
            (reg:DF 21 xmm0 [orig:94 D.25618 ] [94]))) ge2fitman_preproc.cpp:335 776 {*fop_df_comm_sse}
     (nil))
(insn 50 49 51 3 (set (reg:SI 0 ax [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:336 90 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:DI 0 ax [orig:96 D.25619 ] [96])
        (sign_extend:DI (reg:SI 0 ax [239]))) ge2fitman_preproc.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 0 ax [orig:97 D.25619 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 D.25619 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 221 {*adddi_1}
     (nil))
(insn 53 52 54 3 (parallel [
            (set (reg:DI 1 dx [orig:98 D.25619 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.25619 ] [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 54 53 55 3 (set (reg/f:DI 0 ax [240])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:336 89 {*movdi_internal}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.25616 ] [99])
                (plus:DI (reg/f:DI 0 ax [240])
                    (reg:DI 1 dx [orig:98 D.25619 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.25619 ] [98]))
        (nil)))
(insn 56 55 57 3 (set (reg:SF 21 xmm0 [orig:100 D.25617 ] [100])
        (mem:SF (reg/f:DI 0 ax [orig:99 D.25616 ] [99]) [0 *_32+0 S4 A32])) ge2fitman_preproc.cpp:336 129 {*movsf_internal}
     (nil))
(insn 57 56 58 3 (set (reg:DF 23 xmm2 [orig:101 D.25618 ] [101])
        (float_extend:DF (reg:SF 21 xmm0 [orig:100 D.25617 ] [100]))) ge2fitman_preproc.cpp:336 152 {*extendsfdf2_sse}
     (nil))
(insn 58 57 59 3 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:336 90 {*movsi_internal}
     (nil))
(insn 59 58 60 3 (set (reg:DI 0 ax [orig:102 D.25619 ] [102])
        (sign_extend:DI (reg:SI 0 ax [241]))) ge2fitman_preproc.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 3 (parallel [
            (set (reg:DI 0 ax [orig:103 D.25619 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 D.25619 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 221 {*adddi_1}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg:DI 1 dx [orig:104 D.25619 ] [104])
                (ashift:DI (reg:DI 0 ax [orig:103 D.25619 ] [103])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 62 61 63 3 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:336 89 {*movdi_internal}
     (nil))
(insn 63 62 64 3 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.25616 ] [105])
                (plus:DI (reg/f:DI 0 ax [242])
                    (reg:DI 1 dx [orig:104 D.25619 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:104 D.25619 ] [104]))
        (nil)))
(insn 64 63 65 3 (set (reg:SF 21 xmm0 [orig:106 D.25617 ] [106])
        (mem:SF (reg/f:DI 0 ax [orig:105 D.25616 ] [105]) [0 *_38+0 S4 A32])) ge2fitman_preproc.cpp:336 129 {*movsf_internal}
     (nil))
(insn 65 64 66 3 (set (reg:DF 21 xmm0 [orig:107 D.25618 ] [107])
        (float_extend:DF (reg:SF 21 xmm0 [orig:106 D.25617 ] [106]))) ge2fitman_preproc.cpp:336 152 {*extendsfdf2_sse}
     (nil))
(insn 66 65 67 3 (set (reg:DF 21 xmm0 [orig:108 D.25618 ] [108])
        (mult:DF (reg:DF 21 xmm0 [orig:107 D.25618 ] [107])
            (reg:DF 23 xmm2 [orig:101 D.25618 ] [101]))) ge2fitman_preproc.cpp:336 776 {*fop_df_comm_sse}
     (nil))
(insn 67 66 69 3 (set (reg:DF 21 xmm0 [orig:109 D.25618 ] [109])
        (plus:DF (reg:DF 21 xmm0 [orig:108 D.25618 ] [108])
            (reg:DF 22 xmm1 [orig:95 D.25618 ] [95]))) ge2fitman_preproc.cpp:336 776 {*fop_df_comm_sse}
     (nil))
(call_insn 69 67 70 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:336 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 70 69 71 3 (set (reg:DF 0 ax [243])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:336 128 {*movdf_internal}
     (nil))
(insn 71 70 72 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [243])) ge2fitman_preproc.cpp:336 128 {*movdf_internal}
     (nil))
(insn 72 71 73 3 (set (reg:SI 0 ax [244])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:338 90 {*movsi_internal}
     (nil))
(insn 73 72 74 3 (set (reg:DI 0 ax [orig:110 D.25615 ] [110])
        (sign_extend:DI (reg:SI 0 ax [244]))) ge2fitman_preproc.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 74 73 75 3 (parallel [
            (set (reg:DI 1 dx [orig:111 D.25615 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 D.25615 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 75 74 76 3 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:338 89 {*movdi_internal}
     (nil))
(insn 76 75 77 3 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.25616 ] [112])
                (plus:DI (reg/f:DI 0 ax [245])
                    (reg:DI 1 dx [orig:111 D.25615 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.25615 ] [111]))
        (nil)))
(insn 77 76 78 3 (set (reg:SF 21 xmm0 [orig:113 D.25617 ] [113])
        (mem:SF (reg/f:DI 0 ax [orig:112 D.25616 ] [112]) [0 *_46+0 S4 A32])) ge2fitman_preproc.cpp:338 129 {*movsf_internal}
     (nil))
(insn 78 77 79 3 (set (reg:DF 22 xmm1 [orig:114 D.25618 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.25617 ] [113]))) ge2fitman_preproc.cpp:338 152 {*extendsfdf2_sse}
     (nil))
(insn 79 78 80 3 (set (reg:SI 0 ax [246])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:338 90 {*movsi_internal}
     (nil))
(insn 80 79 81 3 (set (reg:DI 0 ax [orig:115 D.25619 ] [115])
        (sign_extend:DI (reg:SI 0 ax [246]))) ge2fitman_preproc.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 3 (parallel [
            (set (reg:DI 0 ax [orig:116 D.25619 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 D.25619 ] [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 221 {*adddi_1}
     (nil))
(insn 82 81 83 3 (parallel [
            (set (reg:DI 1 dx [orig:117 D.25619 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 D.25619 ] [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 83 82 84 3 (set (reg/f:DI 0 ax [247])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:338 89 {*movdi_internal}
     (nil))
(insn 84 83 85 3 (parallel [
            (set (reg/f:DI 0 ax [orig:118 D.25616 ] [118])
                (plus:DI (reg/f:DI 0 ax [247])
                    (reg:DI 1 dx [orig:117 D.25619 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:117 D.25619 ] [117]))
        (nil)))
(insn 85 84 86 3 (set (reg:SF 21 xmm0 [orig:119 D.25617 ] [119])
        (mem:SF (reg/f:DI 0 ax [orig:118 D.25616 ] [118]) [0 *_52+0 S4 A32])) ge2fitman_preproc.cpp:338 129 {*movsf_internal}
     (nil))
(insn 86 85 89 3 (set (reg:DF 21 xmm0 [orig:120 D.25618 ] [120])
        (float_extend:DF (reg:SF 21 xmm0 [orig:119 D.25617 ] [119]))) ge2fitman_preproc.cpp:338 152 {*extendsfdf2_sse}
     (nil))
(call_insn 89 86 90 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b4e6072e100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:338 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 90 89 91 3 (set (reg:DF 0 ax [248])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:338 128 {*movdf_internal}
     (nil))
(insn 91 90 92 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [248])) ge2fitman_preproc.cpp:338 128 {*movdf_internal}
     (nil))
(insn 92 91 93 3 (set (reg:SI 0 ax [249])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:340 90 {*movsi_internal}
     (nil))
(insn 93 92 94 3 (set (reg:DI 0 ax [orig:121 D.25615 ] [121])
        (sign_extend:DI (reg:SI 0 ax [249]))) ge2fitman_preproc.cpp:340 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 3 (parallel [
            (set (reg:DI 1 dx [orig:122 D.25615 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 D.25615 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:340 497 {*ashldi3_1}
     (nil))
(insn 95 94 96 3 (set (reg/f:DI 0 ax [250])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:340 89 {*movdi_internal}
     (nil))
(insn 96 95 97 3 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.25616 ] [123])
                (plus:DI (reg/f:DI 0 ax [250])
                    (reg:DI 1 dx [orig:122 D.25615 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:340 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:122 D.25615 ] [122]))
        (nil)))
(insn 97 96 98 3 (set (reg:SF 21 xmm0 [orig:124 D.25617 ] [124])
        (mem:SF (reg/f:DI 0 ax [orig:123 D.25616 ] [123]) [0 *_59+0 S4 A32])) ge2fitman_preproc.cpp:340 129 {*movsf_internal}
     (nil))
(insn 98 97 99 3 (set (reg:DF 22 xmm1 [orig:125 D.25618 ] [125])
        (float_extend:DF (reg:SF 21 xmm0 [orig:124 D.25617 ] [124]))) ge2fitman_preproc.cpp:340 152 {*extendsfdf2_sse}
     (nil))
(insn 99 98 100 3 (set (reg:SI 0 ax [251])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:340 90 {*movsi_internal}
     (nil))
(insn 100 99 101 3 (set (reg:DI 0 ax [orig:126 D.25615 ] [126])
        (sign_extend:DI (reg:SI 0 ax [251]))) ge2fitman_preproc.cpp:340 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 3 (parallel [
            (set (reg:DI 1 dx [orig:127 D.25615 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 D.25615 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:340 497 {*ashldi3_1}
     (nil))
(insn 102 101 103 3 (set (reg/f:DI 0 ax [252])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:340 89 {*movdi_internal}
     (nil))
(insn 103 102 104 3 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.25616 ] [128])
                (plus:DI (reg/f:DI 0 ax [252])
                    (reg:DI 1 dx [orig:127 D.25615 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:340 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.25615 ] [127]))
        (nil)))
(insn 104 103 105 3 (set (reg:SF 21 xmm0 [orig:129 D.25617 ] [129])
        (mem:SF (reg/f:DI 0 ax [orig:128 D.25616 ] [128]) [0 *_64+0 S4 A32])) ge2fitman_preproc.cpp:340 129 {*movsf_internal}
     (nil))
(insn 105 104 106 3 (set (reg:DF 21 xmm0 [orig:130 D.25618 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.25617 ] [129]))) ge2fitman_preproc.cpp:340 152 {*extendsfdf2_sse}
     (nil))
(insn 106 105 107 3 (set (reg:DF 22 xmm1 [orig:131 D.25618 ] [131])
        (mult:DF (reg:DF 22 xmm1 [orig:125 D.25618 ] [125])
            (reg:DF 21 xmm0 [orig:130 D.25618 ] [130]))) ge2fitman_preproc.cpp:340 776 {*fop_df_comm_sse}
     (nil))
(insn 107 106 108 3 (set (reg:SI 0 ax [253])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:341 90 {*movsi_internal}
     (nil))
(insn 108 107 109 3 (set (reg:DI 0 ax [orig:132 D.25619 ] [132])
        (sign_extend:DI (reg:SI 0 ax [253]))) ge2fitman_preproc.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 3 (parallel [
            (set (reg:DI 0 ax [orig:133 D.25619 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 D.25619 ] [132])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 221 {*adddi_1}
     (nil))
(insn 110 109 111 3 (parallel [
            (set (reg:DI 1 dx [orig:134 D.25619 ] [134])
                (ashift:DI (reg:DI 0 ax [orig:133 D.25619 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 111 110 112 3 (set (reg/f:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:341 89 {*movdi_internal}
     (nil))
(insn 112 111 113 3 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.25616 ] [135])
                (plus:DI (reg/f:DI 0 ax [254])
                    (reg:DI 1 dx [orig:134 D.25619 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:134 D.25619 ] [134]))
        (nil)))
(insn 113 112 114 3 (set (reg:SF 21 xmm0 [orig:136 D.25617 ] [136])
        (mem:SF (reg/f:DI 0 ax [orig:135 D.25616 ] [135]) [0 *_71+0 S4 A32])) ge2fitman_preproc.cpp:341 129 {*movsf_internal}
     (nil))
(insn 114 113 115 3 (set (reg:DF 23 xmm2 [orig:137 D.25618 ] [137])
        (float_extend:DF (reg:SF 21 xmm0 [orig:136 D.25617 ] [136]))) ge2fitman_preproc.cpp:341 152 {*extendsfdf2_sse}
     (nil))
(insn 115 114 116 3 (set (reg:SI 0 ax [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:341 90 {*movsi_internal}
     (nil))
(insn 116 115 117 3 (set (reg:DI 0 ax [orig:138 D.25619 ] [138])
        (sign_extend:DI (reg:SI 0 ax [255]))) ge2fitman_preproc.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 117 116 118 3 (parallel [
            (set (reg:DI 0 ax [orig:139 D.25619 ] [139])
                (plus:DI (reg:DI 0 ax [orig:138 D.25619 ] [138])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 221 {*adddi_1}
     (nil))
(insn 118 117 119 3 (parallel [
            (set (reg:DI 1 dx [orig:140 D.25619 ] [140])
                (ashift:DI (reg:DI 0 ax [orig:139 D.25619 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 119 118 120 3 (set (reg/f:DI 0 ax [256])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:341 89 {*movdi_internal}
     (nil))
(insn 120 119 121 3 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.25616 ] [141])
                (plus:DI (reg/f:DI 0 ax [256])
                    (reg:DI 1 dx [orig:140 D.25619 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:140 D.25619 ] [140]))
        (nil)))
(insn 121 120 122 3 (set (reg:SF 21 xmm0 [orig:142 D.25617 ] [142])
        (mem:SF (reg/f:DI 0 ax [orig:141 D.25616 ] [141]) [0 *_77+0 S4 A32])) ge2fitman_preproc.cpp:341 129 {*movsf_internal}
     (nil))
(insn 122 121 123 3 (set (reg:DF 21 xmm0 [orig:143 D.25618 ] [143])
        (float_extend:DF (reg:SF 21 xmm0 [orig:142 D.25617 ] [142]))) ge2fitman_preproc.cpp:341 152 {*extendsfdf2_sse}
     (nil))
(insn 123 122 124 3 (set (reg:DF 21 xmm0 [orig:144 D.25618 ] [144])
        (mult:DF (reg:DF 21 xmm0 [orig:143 D.25618 ] [143])
            (reg:DF 23 xmm2 [orig:137 D.25618 ] [137]))) ge2fitman_preproc.cpp:341 776 {*fop_df_comm_sse}
     (nil))
(insn 124 123 126 3 (set (reg:DF 21 xmm0 [orig:145 D.25618 ] [145])
        (plus:DF (reg:DF 21 xmm0 [orig:144 D.25618 ] [144])
            (reg:DF 22 xmm1 [orig:131 D.25618 ] [131]))) ge2fitman_preproc.cpp:341 776 {*fop_df_comm_sse}
     (nil))
(call_insn 126 124 127 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:341 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 127 126 128 3 (set (reg:DF 0 ax [257])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:341 128 {*movdf_internal}
     (nil))
(insn 128 127 129 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [257])) ge2fitman_preproc.cpp:341 128 {*movdf_internal}
     (nil))
(insn 129 128 130 3 (set (reg:SI 0 ax [258])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:343 90 {*movsi_internal}
     (nil))
(insn 130 129 131 3 (set (reg:DI 0 ax [orig:146 D.25615 ] [146])
        (sign_extend:DI (reg:SI 0 ax [258]))) ge2fitman_preproc.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 131 130 132 3 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25615 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:146 D.25615 ] [146])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 497 {*ashldi3_1}
     (nil))
(insn 132 131 133 3 (set (reg/f:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:343 89 {*movdi_internal}
     (nil))
(insn 133 132 134 3 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.25616 ] [148])
                (plus:DI (reg/f:DI 0 ax [259])
                    (reg:DI 1 dx [orig:147 D.25615 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.25615 ] [147]))
        (nil)))
(insn 134 133 135 3 (set (reg:SF 21 xmm0 [orig:149 D.25617 ] [149])
        (mem:SF (reg/f:DI 0 ax [orig:148 D.25616 ] [148]) [0 *_85+0 S4 A32])) ge2fitman_preproc.cpp:343 129 {*movsf_internal}
     (nil))
(insn 135 134 136 3 (set (reg:DF 22 xmm1 [orig:150 D.25618 ] [150])
        (float_extend:DF (reg:SF 21 xmm0 [orig:149 D.25617 ] [149]))) ge2fitman_preproc.cpp:343 152 {*extendsfdf2_sse}
     (nil))
(insn 136 135 137 3 (set (reg:SI 0 ax [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:343 90 {*movsi_internal}
     (nil))
(insn 137 136 138 3 (set (reg:DI 0 ax [orig:151 D.25619 ] [151])
        (sign_extend:DI (reg:SI 0 ax [260]))) ge2fitman_preproc.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 3 (parallel [
            (set (reg:DI 0 ax [orig:152 D.25619 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 D.25619 ] [151])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 221 {*adddi_1}
     (nil))
(insn 139 138 140 3 (parallel [
            (set (reg:DI 1 dx [orig:153 D.25619 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 D.25619 ] [152])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 497 {*ashldi3_1}
     (nil))
(insn 140 139 141 3 (set (reg/f:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:343 89 {*movdi_internal}
     (nil))
(insn 141 140 142 3 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.25616 ] [154])
                (plus:DI (reg/f:DI 0 ax [261])
                    (reg:DI 1 dx [orig:153 D.25619 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:153 D.25619 ] [153]))
        (nil)))
(insn 142 141 143 3 (set (reg:SF 21 xmm0 [orig:155 D.25617 ] [155])
        (mem:SF (reg/f:DI 0 ax [orig:154 D.25616 ] [154]) [0 *_91+0 S4 A32])) ge2fitman_preproc.cpp:343 129 {*movsf_internal}
     (nil))
(insn 143 142 146 3 (set (reg:DF 21 xmm0 [orig:156 D.25618 ] [156])
        (float_extend:DF (reg:SF 21 xmm0 [orig:155 D.25617 ] [155]))) ge2fitman_preproc.cpp:343 152 {*extendsfdf2_sse}
     (nil))
(call_insn 146 143 147 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b4e6072e100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:343 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 147 146 148 3 (set (reg:DF 0 ax [262])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:343 128 {*movdf_internal}
     (nil))
(insn 148 147 149 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [262])) ge2fitman_preproc.cpp:343 128 {*movdf_internal}
     (nil))
(insn 149 148 150 3 (set (reg:SI 0 ax [263])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:345 90 {*movsi_internal}
     (nil))
(insn 150 149 151 3 (set (reg:DI 0 ax [orig:157 D.25615 ] [157])
        (sign_extend:DI (reg:SI 0 ax [263]))) ge2fitman_preproc.cpp:345 142 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 3 (parallel [
            (set (reg:DI 1 dx [orig:158 D.25615 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.25615 ] [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:345 497 {*ashldi3_1}
     (nil))
(insn 152 151 153 3 (set (reg/f:DI 0 ax [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:345 89 {*movdi_internal}
     (nil))
(insn 153 152 154 3 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.25616 ] [159])
                (plus:DI (reg/f:DI 0 ax [264])
                    (reg:DI 1 dx [orig:158 D.25615 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:345 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.25615 ] [158]))
        (nil)))
(insn 154 153 155 3 (set (reg:SF 21 xmm0 [orig:160 D.25617 ] [160])
        (mem:SF (reg/f:DI 0 ax [orig:159 D.25616 ] [159]) [0 *_98+0 S4 A32])) ge2fitman_preproc.cpp:345 129 {*movsf_internal}
     (nil))
(insn 155 154 156 3 (set (reg:DF 22 xmm1 [orig:161 D.25618 ] [161])
        (float_extend:DF (reg:SF 21 xmm0 [orig:160 D.25617 ] [160]))) ge2fitman_preproc.cpp:345 152 {*extendsfdf2_sse}
     (nil))
(insn 156 155 157 3 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:345 90 {*movsi_internal}
     (nil))
(insn 157 156 158 3 (set (reg:DI 0 ax [orig:162 D.25615 ] [162])
        (sign_extend:DI (reg:SI 0 ax [265]))) ge2fitman_preproc.cpp:345 142 {*extendsidi2_rex64}
     (nil))
(insn 158 157 159 3 (parallel [
            (set (reg:DI 1 dx [orig:163 D.25615 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:162 D.25615 ] [162])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:345 497 {*ashldi3_1}
     (nil))
(insn 159 158 160 3 (set (reg/f:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:345 89 {*movdi_internal}
     (nil))
(insn 160 159 161 3 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.25616 ] [164])
                (plus:DI (reg/f:DI 0 ax [266])
                    (reg:DI 1 dx [orig:163 D.25615 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:345 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:163 D.25615 ] [163]))
        (nil)))
(insn 161 160 162 3 (set (reg:SF 21 xmm0 [orig:165 D.25617 ] [165])
        (mem:SF (reg/f:DI 0 ax [orig:164 D.25616 ] [164]) [0 *_103+0 S4 A32])) ge2fitman_preproc.cpp:345 129 {*movsf_internal}
     (nil))
(insn 162 161 163 3 (set (reg:DF 21 xmm0 [orig:166 D.25618 ] [166])
        (float_extend:DF (reg:SF 21 xmm0 [orig:165 D.25617 ] [165]))) ge2fitman_preproc.cpp:345 152 {*extendsfdf2_sse}
     (nil))
(insn 163 162 164 3 (set (reg:DF 22 xmm1 [orig:167 D.25618 ] [167])
        (mult:DF (reg:DF 22 xmm1 [orig:161 D.25618 ] [161])
            (reg:DF 21 xmm0 [orig:166 D.25618 ] [166]))) ge2fitman_preproc.cpp:345 776 {*fop_df_comm_sse}
     (nil))
(insn 164 163 165 3 (set (reg:SI 0 ax [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:346 90 {*movsi_internal}
     (nil))
(insn 165 164 166 3 (set (reg:DI 0 ax [orig:168 D.25619 ] [168])
        (sign_extend:DI (reg:SI 0 ax [267]))) ge2fitman_preproc.cpp:346 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 3 (parallel [
            (set (reg:DI 0 ax [orig:169 D.25619 ] [169])
                (plus:DI (reg:DI 0 ax [orig:168 D.25619 ] [168])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 221 {*adddi_1}
     (nil))
(insn 167 166 168 3 (parallel [
            (set (reg:DI 1 dx [orig:170 D.25619 ] [170])
                (ashift:DI (reg:DI 0 ax [orig:169 D.25619 ] [169])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 497 {*ashldi3_1}
     (nil))
(insn 168 167 169 3 (set (reg/f:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:346 89 {*movdi_internal}
     (nil))
(insn 169 168 170 3 (parallel [
            (set (reg/f:DI 0 ax [orig:171 D.25616 ] [171])
                (plus:DI (reg/f:DI 0 ax [268])
                    (reg:DI 1 dx [orig:170 D.25619 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:170 D.25619 ] [170]))
        (nil)))
(insn 170 169 171 3 (set (reg:SF 21 xmm0 [orig:172 D.25617 ] [172])
        (mem:SF (reg/f:DI 0 ax [orig:171 D.25616 ] [171]) [0 *_110+0 S4 A32])) ge2fitman_preproc.cpp:346 129 {*movsf_internal}
     (nil))
(insn 171 170 172 3 (set (reg:DF 23 xmm2 [orig:173 D.25618 ] [173])
        (float_extend:DF (reg:SF 21 xmm0 [orig:172 D.25617 ] [172]))) ge2fitman_preproc.cpp:346 152 {*extendsfdf2_sse}
     (nil))
(insn 172 171 173 3 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:346 90 {*movsi_internal}
     (nil))
(insn 173 172 174 3 (set (reg:DI 0 ax [orig:174 D.25619 ] [174])
        (sign_extend:DI (reg:SI 0 ax [269]))) ge2fitman_preproc.cpp:346 142 {*extendsidi2_rex64}
     (nil))
(insn 174 173 175 3 (parallel [
            (set (reg:DI 0 ax [orig:175 D.25619 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 D.25619 ] [174])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 221 {*adddi_1}
     (nil))
(insn 175 174 176 3 (parallel [
            (set (reg:DI 1 dx [orig:176 D.25619 ] [176])
                (ashift:DI (reg:DI 0 ax [orig:175 D.25619 ] [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 497 {*ashldi3_1}
     (nil))
(insn 176 175 177 3 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:346 89 {*movdi_internal}
     (nil))
(insn 177 176 178 3 (parallel [
            (set (reg/f:DI 0 ax [orig:177 D.25616 ] [177])
                (plus:DI (reg/f:DI 0 ax [270])
                    (reg:DI 1 dx [orig:176 D.25619 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:176 D.25619 ] [176]))
        (nil)))
(insn 178 177 179 3 (set (reg:SF 21 xmm0 [orig:178 D.25617 ] [178])
        (mem:SF (reg/f:DI 0 ax [orig:177 D.25616 ] [177]) [0 *_116+0 S4 A32])) ge2fitman_preproc.cpp:346 129 {*movsf_internal}
     (nil))
(insn 179 178 180 3 (set (reg:DF 21 xmm0 [orig:179 D.25618 ] [179])
        (float_extend:DF (reg:SF 21 xmm0 [orig:178 D.25617 ] [178]))) ge2fitman_preproc.cpp:346 152 {*extendsfdf2_sse}
     (nil))
(insn 180 179 181 3 (set (reg:DF 21 xmm0 [orig:180 D.25618 ] [180])
        (mult:DF (reg:DF 21 xmm0 [orig:179 D.25618 ] [179])
            (reg:DF 23 xmm2 [orig:173 D.25618 ] [173]))) ge2fitman_preproc.cpp:346 776 {*fop_df_comm_sse}
     (nil))
(insn 181 180 183 3 (set (reg:DF 21 xmm0 [orig:181 D.25618 ] [181])
        (plus:DF (reg:DF 21 xmm0 [orig:180 D.25618 ] [180])
            (reg:DF 22 xmm1 [orig:167 D.25618 ] [167]))) ge2fitman_preproc.cpp:346 776 {*fop_df_comm_sse}
     (nil))
(call_insn 183 181 184 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:346 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 184 183 185 3 (set (reg:DF 0 ax [271])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:346 128 {*movdf_internal}
     (nil))
(insn 185 184 186 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [271])) ge2fitman_preproc.cpp:346 128 {*movdf_internal}
     (nil))
(insn 186 185 187 3 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:348 90 {*movsi_internal}
     (nil))
(insn 187 186 188 3 (set (reg:DI 0 ax [orig:182 D.25615 ] [182])
        (sign_extend:DI (reg:SI 0 ax [272]))) ge2fitman_preproc.cpp:348 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 3 (parallel [
            (set (reg:DI 1 dx [orig:183 D.25615 ] [183])
                (ashift:DI (reg:DI 0 ax [orig:182 D.25615 ] [182])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 497 {*ashldi3_1}
     (nil))
(insn 189 188 190 3 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:348 89 {*movdi_internal}
     (nil))
(insn 190 189 191 3 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.25616 ] [184])
                (plus:DI (reg/f:DI 0 ax [273])
                    (reg:DI 1 dx [orig:183 D.25615 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:183 D.25615 ] [183]))
        (nil)))
(insn 191 190 192 3 (set (reg:SF 21 xmm0 [orig:185 D.25617 ] [185])
        (mem:SF (reg/f:DI 0 ax [orig:184 D.25616 ] [184]) [0 *_124+0 S4 A32])) ge2fitman_preproc.cpp:348 129 {*movsf_internal}
     (nil))
(insn 192 191 193 3 (set (reg:DF 22 xmm1 [orig:186 D.25618 ] [186])
        (float_extend:DF (reg:SF 21 xmm0 [orig:185 D.25617 ] [185]))) ge2fitman_preproc.cpp:348 152 {*extendsfdf2_sse}
     (nil))
(insn 193 192 194 3 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:348 90 {*movsi_internal}
     (nil))
(insn 194 193 195 3 (set (reg:DI 0 ax [orig:187 D.25619 ] [187])
        (sign_extend:DI (reg:SI 0 ax [274]))) ge2fitman_preproc.cpp:348 142 {*extendsidi2_rex64}
     (nil))
(insn 195 194 196 3 (parallel [
            (set (reg:DI 0 ax [orig:188 D.25619 ] [188])
                (plus:DI (reg:DI 0 ax [orig:187 D.25619 ] [187])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 221 {*adddi_1}
     (nil))
(insn 196 195 197 3 (parallel [
            (set (reg:DI 1 dx [orig:189 D.25619 ] [189])
                (ashift:DI (reg:DI 0 ax [orig:188 D.25619 ] [188])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 497 {*ashldi3_1}
     (nil))
(insn 197 196 198 3 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:348 89 {*movdi_internal}
     (nil))
(insn 198 197 199 3 (parallel [
            (set (reg/f:DI 0 ax [orig:190 D.25616 ] [190])
                (plus:DI (reg/f:DI 0 ax [275])
                    (reg:DI 1 dx [orig:189 D.25619 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:189 D.25619 ] [189]))
        (nil)))
(insn 199 198 200 3 (set (reg:SF 21 xmm0 [orig:191 D.25617 ] [191])
        (mem:SF (reg/f:DI 0 ax [orig:190 D.25616 ] [190]) [0 *_130+0 S4 A32])) ge2fitman_preproc.cpp:348 129 {*movsf_internal}
     (nil))
(insn 200 199 203 3 (set (reg:DF 21 xmm0 [orig:192 D.25618 ] [192])
        (float_extend:DF (reg:SF 21 xmm0 [orig:191 D.25617 ] [191]))) ge2fitman_preproc.cpp:348 152 {*extendsfdf2_sse}
     (nil))
(call_insn 203 200 204 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b4e6072e100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:348 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 204 203 205 3 (set (reg:DF 0 ax [276])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:348 128 {*movdf_internal}
     (nil))
(insn 205 204 206 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [276])) ge2fitman_preproc.cpp:348 128 {*movdf_internal}
     (nil))
(insn 206 205 207 3 (set (reg:DF 21 xmm0 [278])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])) ge2fitman_preproc.cpp:352 128 {*movdf_internal}
     (nil))
(insn 207 206 296 3 (set (reg:DF 21 xmm0 [277])
        (div:DF (reg:DF 21 xmm0 [277])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:352 783 {*fop_df_1_sse}
     (nil))
(insn 296 207 208 3 (set (reg:DF 0 ax [277])
        (reg:DF 21 xmm0 [277])) ge2fitman_preproc.cpp:352 128 {*movdf_internal}
     (nil))
(insn 208 296 209 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [277])) ge2fitman_preproc.cpp:352 128 {*movdf_internal}
     (nil))
(insn 209 208 210 3 (set (reg:DF 21 xmm0 [280])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])) ge2fitman_preproc.cpp:353 128 {*movdf_internal}
     (nil))
(insn 210 209 298 3 (set (reg:DF 21 xmm0 [279])
        (minus:DF (reg:DF 21 xmm0 [279])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:353 783 {*fop_df_1_sse}
     (nil))
(insn 298 210 211 3 (set (reg:DF 0 ax [279])
        (reg:DF 21 xmm0 [279])) ge2fitman_preproc.cpp:353 128 {*movdf_internal}
     (nil))
(insn 211 298 212 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 0 ax [279])) ge2fitman_preproc.cpp:353 128 {*movdf_internal}
     (nil))
(insn 212 211 213 3 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:355 90 {*movsi_internal}
     (nil))
(insn 213 212 214 3 (set (reg:DI 0 ax [orig:193 D.25615 ] [193])
        (sign_extend:DI (reg:SI 0 ax [281]))) ge2fitman_preproc.cpp:355 142 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 3 (parallel [
            (set (reg:DI 1 dx [orig:194 D.25615 ] [194])
                (ashift:DI (reg:DI 0 ax [orig:193 D.25615 ] [193])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:355 497 {*ashldi3_1}
     (nil))
(insn 215 214 216 3 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:355 89 {*movdi_internal}
     (nil))
(insn 216 215 217 3 (parallel [
            (set (reg/f:DI 3 bx [orig:195 D.25616 ] [195])
                (plus:DI (reg:DI 1 dx [orig:194 D.25615 ] [194])
                    (reg/f:DI 0 ax [282])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:355 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:194 D.25615 ] [194]))
        (nil)))
(insn 217 216 299 3 (set (reg:SF 24 xmm3 [orig:196 D.25617 ] [196])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:355 157 {*truncdfsf_fast_sse}
     (nil))
(insn 299 217 334 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 24 xmm3 [orig:196 D.25617 ] [196])) ge2fitman_preproc.cpp:355 129 {*movsf_internal}
     (nil))
(note 334 299 326 3 NOTE_INSN_DELETED)
(note 326 334 218 3 NOTE_INSN_DELETED)
(insn 218 326 219 3 (set (reg:DF 0 ax [283])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])) ge2fitman_preproc.cpp:355 128 {*movdf_internal}
     (nil))
(insn 219 218 300 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [283])) ge2fitman_preproc.cpp:355 128 {*movdf_internal}
     (nil))
(insn 300 219 220 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) ge2fitman_preproc.cpp:355 128 {*movdf_internal}
     (nil))
(call_insn/u 220 300 222 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b4e60733400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:355 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 222 220 303 3 (set (reg:SF 21 xmm0 [orig:198 D.25617 ] [198])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:197 D.25618 ] [197]))) ge2fitman_preproc.cpp:355 157 {*truncdfsf_fast_sse}
     (nil))
(note 303 222 330 3 NOTE_INSN_DELETED)
(note 330 303 223 3 NOTE_INSN_DELETED)
(insn 223 330 302 3 (set (reg:SF 21 xmm0 [orig:199 D.25617 ] [199])
        (mult:SF (reg:SF 21 xmm0 [orig:199 D.25617 ] [199])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) ge2fitman_preproc.cpp:355 775 {*fop_sf_comm_sse}
     (nil))
(insn 302 223 224 3 (set (reg:SF 0 ax [orig:199 D.25617 ] [199])
        (reg:SF 21 xmm0 [orig:199 D.25617 ] [199])) ge2fitman_preproc.cpp:355 129 {*movsf_internal}
     (nil))
(insn 224 302 225 3 (set (mem:SF (reg/f:DI 3 bx [orig:195 D.25616 ] [195]) [0 *_138+0 S4 A32])
        (reg:SF 0 ax [orig:199 D.25617 ] [199])) ge2fitman_preproc.cpp:355 129 {*movsf_internal}
     (nil))
(insn 225 224 226 3 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:356 90 {*movsi_internal}
     (nil))
(insn 226 225 227 3 (set (reg:DI 0 ax [orig:200 D.25619 ] [200])
        (sign_extend:DI (reg:SI 0 ax [284]))) ge2fitman_preproc.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 227 226 228 3 (parallel [
            (set (reg:DI 0 ax [orig:201 D.25619 ] [201])
                (plus:DI (reg:DI 0 ax [orig:200 D.25619 ] [200])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:356 221 {*adddi_1}
     (nil))
(insn 228 227 229 3 (parallel [
            (set (reg:DI 1 dx [orig:202 D.25619 ] [202])
                (ashift:DI (reg:DI 0 ax [orig:201 D.25619 ] [201])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:356 497 {*ashldi3_1}
     (nil))
(insn 229 228 230 3 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:356 89 {*movdi_internal}
     (nil))
(insn 230 229 231 3 (parallel [
            (set (reg/f:DI 3 bx [orig:203 D.25616 ] [203])
                (plus:DI (reg:DI 1 dx [orig:202 D.25619 ] [202])
                    (reg/f:DI 0 ax [285])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:356 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:202 D.25619 ] [202]))
        (nil)))
(insn 231 230 304 3 (set (reg:SF 25 xmm4 [orig:204 D.25617 ] [204])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:356 157 {*truncdfsf_fast_sse}
     (nil))
(insn 304 231 333 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 25 xmm4 [orig:204 D.25617 ] [204])) ge2fitman_preproc.cpp:356 129 {*movsf_internal}
     (nil))
(note 333 304 325 3 NOTE_INSN_DELETED)
(note 325 333 232 3 NOTE_INSN_DELETED)
(insn 232 325 233 3 (set (reg:DF 0 ax [286])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])) ge2fitman_preproc.cpp:356 128 {*movdf_internal}
     (nil))
(insn 233 232 305 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [286])) ge2fitman_preproc.cpp:356 128 {*movdf_internal}
     (nil))
(insn 305 233 234 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) ge2fitman_preproc.cpp:356 128 {*movdf_internal}
     (nil))
(call_insn/u 234 305 236 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b4e60771e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:356 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 236 234 308 3 (set (reg:SF 21 xmm0 [orig:206 D.25617 ] [206])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:205 D.25618 ] [205]))) ge2fitman_preproc.cpp:356 157 {*truncdfsf_fast_sse}
     (nil))
(note 308 236 329 3 NOTE_INSN_DELETED)
(note 329 308 237 3 NOTE_INSN_DELETED)
(insn 237 329 307 3 (set (reg:SF 21 xmm0 [orig:207 D.25617 ] [207])
        (mult:SF (reg:SF 21 xmm0 [orig:207 D.25617 ] [207])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) ge2fitman_preproc.cpp:356 775 {*fop_sf_comm_sse}
     (nil))
(insn 307 237 238 3 (set (reg:SF 0 ax [orig:207 D.25617 ] [207])
        (reg:SF 21 xmm0 [orig:207 D.25617 ] [207])) ge2fitman_preproc.cpp:356 129 {*movsf_internal}
     (nil))
(insn 238 307 239 3 (set (mem:SF (reg/f:DI 3 bx [orig:203 D.25616 ] [203]) [0 *_146+0 S4 A32])
        (reg:SF 0 ax [orig:207 D.25617 ] [207])) ge2fitman_preproc.cpp:356 129 {*movsf_internal}
     (nil))
(insn 239 238 240 3 (set (reg:DF 21 xmm0 [288])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])) ge2fitman_preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 240 239 310 3 (set (reg:DF 21 xmm0 [287])
        (div:DF (reg:DF 21 xmm0 [287])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:360 783 {*fop_df_1_sse}
     (nil))
(insn 310 240 241 3 (set (reg:DF 0 ax [287])
        (reg:DF 21 xmm0 [287])) ge2fitman_preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 241 310 242 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [287])) ge2fitman_preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 242 241 243 3 (set (reg:DF 21 xmm0 [290])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])) ge2fitman_preproc.cpp:361 128 {*movdf_internal}
     (nil))
(insn 243 242 312 3 (set (reg:DF 21 xmm0 [289])
        (minus:DF (reg:DF 21 xmm0 [289])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:361 783 {*fop_df_1_sse}
     (nil))
(insn 312 243 244 3 (set (reg:DF 0 ax [289])
        (reg:DF 21 xmm0 [289])) ge2fitman_preproc.cpp:361 128 {*movdf_internal}
     (nil))
(insn 244 312 245 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 0 ax [289])) ge2fitman_preproc.cpp:361 128 {*movdf_internal}
     (nil))
(insn 245 244 246 3 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:363 90 {*movsi_internal}
     (nil))
(insn 246 245 247 3 (set (reg:DI 0 ax [orig:208 D.25615 ] [208])
        (sign_extend:DI (reg:SI 0 ax [291]))) ge2fitman_preproc.cpp:363 142 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 3 (parallel [
            (set (reg:DI 1 dx [orig:209 D.25615 ] [209])
                (ashift:DI (reg:DI 0 ax [orig:208 D.25615 ] [208])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:363 497 {*ashldi3_1}
     (nil))
(insn 248 247 249 3 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:363 89 {*movdi_internal}
     (nil))
(insn 249 248 250 3 (parallel [
            (set (reg/f:DI 3 bx [orig:210 D.25616 ] [210])
                (plus:DI (reg:DI 1 dx [orig:209 D.25615 ] [209])
                    (reg/f:DI 0 ax [292])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:363 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:209 D.25615 ] [209]))
        (nil)))
(insn 250 249 313 3 (set (reg:SF 26 xmm5 [orig:211 D.25617 ] [211])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:363 157 {*truncdfsf_fast_sse}
     (nil))
(insn 313 250 332 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 26 xmm5 [orig:211 D.25617 ] [211])) ge2fitman_preproc.cpp:363 129 {*movsf_internal}
     (nil))
(note 332 313 324 3 NOTE_INSN_DELETED)
(note 324 332 251 3 NOTE_INSN_DELETED)
(insn 251 324 252 3 (set (reg:DF 0 ax [293])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])) ge2fitman_preproc.cpp:363 128 {*movdf_internal}
     (nil))
(insn 252 251 314 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [293])) ge2fitman_preproc.cpp:363 128 {*movdf_internal}
     (nil))
(insn 314 252 253 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) ge2fitman_preproc.cpp:363 128 {*movdf_internal}
     (nil))
(call_insn/u 253 314 255 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b4e60733400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:363 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 255 253 317 3 (set (reg:SF 21 xmm0 [orig:213 D.25617 ] [213])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:212 D.25618 ] [212]))) ge2fitman_preproc.cpp:363 157 {*truncdfsf_fast_sse}
     (nil))
(note 317 255 328 3 NOTE_INSN_DELETED)
(note 328 317 256 3 NOTE_INSN_DELETED)
(insn 256 328 316 3 (set (reg:SF 21 xmm0 [orig:214 D.25617 ] [214])
        (mult:SF (reg:SF 21 xmm0 [orig:214 D.25617 ] [214])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) ge2fitman_preproc.cpp:363 775 {*fop_sf_comm_sse}
     (nil))
(insn 316 256 257 3 (set (reg:SF 0 ax [orig:214 D.25617 ] [214])
        (reg:SF 21 xmm0 [orig:214 D.25617 ] [214])) ge2fitman_preproc.cpp:363 129 {*movsf_internal}
     (nil))
(insn 257 316 258 3 (set (mem:SF (reg/f:DI 3 bx [orig:210 D.25616 ] [210]) [0 *_155+0 S4 A32])
        (reg:SF 0 ax [orig:214 D.25617 ] [214])) ge2fitman_preproc.cpp:363 129 {*movsf_internal}
     (nil))
(insn 258 257 259 3 (set (reg:SI 0 ax [294])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:364 90 {*movsi_internal}
     (nil))
(insn 259 258 260 3 (set (reg:DI 0 ax [orig:215 D.25619 ] [215])
        (sign_extend:DI (reg:SI 0 ax [294]))) ge2fitman_preproc.cpp:364 142 {*extendsidi2_rex64}
     (nil))
(insn 260 259 261 3 (parallel [
            (set (reg:DI 0 ax [orig:216 D.25619 ] [216])
                (plus:DI (reg:DI 0 ax [orig:215 D.25619 ] [215])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:364 221 {*adddi_1}
     (nil))
(insn 261 260 262 3 (parallel [
            (set (reg:DI 1 dx [orig:217 D.25619 ] [217])
                (ashift:DI (reg:DI 0 ax [orig:216 D.25619 ] [216])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:364 497 {*ashldi3_1}
     (nil))
(insn 262 261 263 3 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:364 89 {*movdi_internal}
     (nil))
(insn 263 262 264 3 (parallel [
            (set (reg/f:DI 3 bx [orig:218 D.25616 ] [218])
                (plus:DI (reg:DI 1 dx [orig:217 D.25619 ] [217])
                    (reg/f:DI 0 ax [295])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:364 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:217 D.25619 ] [217]))
        (nil)))
(insn 264 263 318 3 (set (reg:SF 27 xmm6 [orig:219 D.25617 ] [219])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:364 157 {*truncdfsf_fast_sse}
     (nil))
(insn 318 264 331 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 27 xmm6 [orig:219 D.25617 ] [219])) ge2fitman_preproc.cpp:364 129 {*movsf_internal}
     (nil))
(note 331 318 323 3 NOTE_INSN_DELETED)
(note 323 331 265 3 NOTE_INSN_DELETED)
(insn 265 323 266 3 (set (reg:DF 0 ax [296])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])) ge2fitman_preproc.cpp:364 128 {*movdf_internal}
     (nil))
(insn 266 265 319 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [296])) ge2fitman_preproc.cpp:364 128 {*movdf_internal}
     (nil))
(insn 319 266 267 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) ge2fitman_preproc.cpp:364 128 {*movdf_internal}
     (nil))
(call_insn/u 267 319 269 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b4e60771e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:364 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 269 267 322 3 (set (reg:SF 21 xmm0 [orig:221 D.25617 ] [221])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:220 D.25618 ] [220]))) ge2fitman_preproc.cpp:364 157 {*truncdfsf_fast_sse}
     (nil))
(note 322 269 327 3 NOTE_INSN_DELETED)
(note 327 322 270 3 NOTE_INSN_DELETED)
(insn 270 327 321 3 (set (reg:SF 21 xmm0 [orig:222 D.25617 ] [222])
        (mult:SF (reg:SF 21 xmm0 [orig:222 D.25617 ] [222])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) ge2fitman_preproc.cpp:364 775 {*fop_sf_comm_sse}
     (nil))
(insn 321 270 271 3 (set (reg:SF 0 ax [orig:222 D.25617 ] [222])
        (reg:SF 21 xmm0 [orig:222 D.25617 ] [222])) ge2fitman_preproc.cpp:364 129 {*movsf_internal}
     (nil))
(insn 271 321 272 3 (set (mem:SF (reg/f:DI 3 bx [orig:218 D.25616 ] [218]) [0 *_163+0 S4 A32])
        (reg:SF 0 ax [orig:222 D.25617 ] [222])) ge2fitman_preproc.cpp:364 129 {*movsf_internal}
     (nil))
(insn 272 271 273 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:333 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 297
(code_label 273 272 274 4 79 "" [1 uses])
(note 274 273 275 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 275 274 276 4 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:333 89 {*movdi_internal}
     (nil))
(insn 276 275 277 4 (set (reg:SI 0 ax [orig:83 D.25614 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [297])
                (const_int 324 [0x144])) [0 procpar_info_14(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:333 90 {*movsi_internal}
     (nil))
(insn 277 276 279 4 (parallel [
            (set (reg:SI 0 ax [orig:84 D.25614 ] [84])
                (ashift:SI (reg:SI 0 ax [orig:83 D.25614 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:333 496 {*ashlsi3_1}
     (nil))
(insn 279 277 280 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:84 D.25614 ] [84])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:333 7 {*cmpsi_1}
     (nil))
(jump_insn 280 279 281 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 278)
            (pc))) ge2fitman_preproc.cpp:333 596 {*jcc_1}
     (nil)
 -> 278)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 223 224
(note 281 280 282 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 285 5 (set (reg:SI 0 ax [orig:223 D.25614 ] [223])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:367 90 {*movsi_internal}
     (nil))
(insn 285 282 289 5 (set (reg:SI 0 ax [orig:224 <retval> ] [224])
        (reg:SI 0 ax [orig:223 D.25614 ] [223])) ge2fitman_preproc.cpp:367 90 {*movsi_internal}
     (nil))
(insn 289 285 290 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:224 <retval> ] [224])) ge2fitman_preproc.cpp:369 90 {*movsi_internal}
     (nil))
(insn 290 289 294 5 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:369 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 294 290 0 NOTE_INSN_DELETED)

;; Function int filter(float*, float*, Procpar_info*, Preprocess*) (_Z6filterPfS_P12Procpar_infoP10Preprocess, funcdef_no=1027, decl_uid=24026, symbol_order=234)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 15:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) x  (1) r {*floatsisf2_sse}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 19:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=485 from oldreg=344, assigning class SSE_REGS to r485
   19: r485:SF=r485:SF/r85:SF
      REG_DEAD r85:SF
      REG_DEAD r83:SF
    Inserting insn reload before:
  560: r485:SF=r83:SF
    Inserting insn reload after:
  561: r344:SF=r485:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 561:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 22:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 23:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 24:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=486 from oldreg=346, assigning class SSE_REGS to r486
   24: r486:SF=r486:SF/r347:SF
      REG_DEAD r347:SF
      REG_DEAD r86:SF
    Inserting insn reload before:
  562: r486:SF=r86:SF
    Inserting insn reload after:
  563: r346:SF=r486:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 563:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 40:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 53:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=487 from oldreg=359, assigning class GENERAL_REGS to r487
   66: {r487:SI=r487:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  564: r487:SI=r105:SI
    Inserting insn reload after:
  565: r359:SI=r487:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 71:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =x  (1) 0  (2) xm {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 76:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 79:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=488 from oldreg=114, assigning class SSE_REGS to r488
   79: r488:SF=float_trunc(r113:DF)
      REG_DEAD r113:DF
    Inserting insn reload after:
  566: r114:SF=r488:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 566:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 81:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 111:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=489 from oldreg=377, assigning class GENERAL_REGS to r489
  127: {r489:SI=r489:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  567: r489:SI=r135:SI
    Inserting insn reload after:
  568: r377:SI=r489:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =x  (1) 0  (2) xm {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 137:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 138:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 140:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=490 from oldreg=144, assigning class SSE_REGS to r490
  140: r490:SF=float_trunc(r143:DF)
      REG_DEAD r143:DF
    Inserting insn reload after:
  569: r144:SF=r490:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 569:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 141:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 145:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) x  (1) xm {*cmpiusf_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 179
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 180:  (0) v  (1) m {*movsf_internal}
      Creating newreg=491 from oldreg=156, assigning class ALL_SSE_REGS to r491
  180: r491:SF=[r155:DI]
      REG_DEAD r155:DI
    Inserting insn reload after:
  570: r156:SF=r491:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 570:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 182:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=492 from oldreg=392, assigning class GENERAL_REGS to r492
  182: {r492:SI=r492:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  571: r492:SI=r391:SI
    Inserting insn reload after:
  572: r392:SI=r492:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 193:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 194
	 Choosing alt 0 in insn 194:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 196:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 203
	 Choosing alt 0 in insn 203:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=493 from oldreg=170, assigning class SSE_REGS to r493
      Creating newreg=494 from oldreg=156, assigning class SSE_REGS to r494
      Making reload reg 494 for reg 156 optional
  203: r493:SF=r493:SF*r494:SF
      REG_DEAD r169:SF
      REG_DEAD r156:SF
    Inserting insn reload before:
  573: r493:SF=r169:SF
  575: r494:SF=r156:SF
    Inserting insn reload after:
  574: r170:SF=r493:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 574:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 575:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 204:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 216
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 217:  (0) v  (1) m {*movsf_internal}
      Creating newreg=495 from oldreg=179, assigning class ALL_SSE_REGS to r495
  217: r495:SF=[r178:DI]
      REG_DEAD r178:DI
    Inserting insn reload after:
  576: r179:SF=r495:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 576:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 219:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=496 from oldreg=403, assigning class GENERAL_REGS to r496
  219: {r496:SI=r496:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  577: r496:SI=r402:SI
    Inserting insn reload after:
  578: r403:SI=r496:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 223:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 225:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 227
	 Choosing alt 0 in insn 227:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 230:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 0 in insn 231:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 233:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 235
	 Choosing alt 0 in insn 235:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 240
	 Choosing alt 0 in insn 240:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=497 from oldreg=193, assigning class SSE_REGS to r497
      Creating newreg=498 from oldreg=179, assigning class SSE_REGS to r498
      Making reload reg 498 for reg 179 optional
  240: r497:SF=r497:SF*r498:SF
      REG_DEAD r192:SF
      REG_DEAD r179:SF
    Inserting insn reload before:
  579: r497:SF=r192:SF
  581: r498:SF=r179:SF
    Inserting insn reload after:
  580: r193:SF=r497:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 580:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 581:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 241:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 258:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 260
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 261:  (0) v  (1) m {*movsf_internal}
      Creating newreg=499 from oldreg=201, assigning class ALL_SSE_REGS to r499
  261: r499:SF=[r200:DI]
      REG_DEAD r200:DI
    Inserting insn reload after:
  582: r201:SF=r499:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 582:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 263:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=500 from oldreg=415, assigning class GENERAL_REGS to r500
  263: {r500:SI=r500:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  583: r500:SI=r414:SI
    Inserting insn reload after:
  584: r415:SI=r500:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 264
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 267:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 269:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 271
	 Choosing alt 0 in insn 271:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 272:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 274:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 275
	 Choosing alt 0 in insn 275:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 277:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 279
	 Choosing alt 0 in insn 279:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 284
	 Choosing alt 0 in insn 284:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=501 from oldreg=215, assigning class SSE_REGS to r501
      Creating newreg=502 from oldreg=201, assigning class SSE_REGS to r502
      Making reload reg 502 for reg 201 optional
  284: r501:SF=r501:SF*r502:SF
      REG_DEAD r214:SF
      REG_DEAD r201:SF
    Inserting insn reload before:
  585: r501:SF=r214:SF
  587: r502:SF=r201:SF
    Inserting insn reload after:
  586: r215:SF=r501:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 586:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 587:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 285:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 294:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 297
	 Choosing alt 0 in insn 297:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 298:  (0) v  (1) m {*movsf_internal}
      Creating newreg=503 from oldreg=224, assigning class ALL_SSE_REGS to r503
  298: r503:SF=[r223:DI]
      REG_DEAD r223:DI
    Inserting insn reload after:
  588: r224:SF=r503:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 588:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 300:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=504 from oldreg=426, assigning class GENERAL_REGS to r504
  300: {r504:SI=r504:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  589: r504:SI=r425:SI
    Inserting insn reload after:
  590: r426:SI=r504:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 301
	 Choosing alt 0 in insn 301:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 306:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 308
	 Choosing alt 0 in insn 308:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 311:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 312
	 Choosing alt 0 in insn 312:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 313:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 314:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 316
	 Choosing alt 0 in insn 316:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 321
	 Choosing alt 0 in insn 321:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=505 from oldreg=238, assigning class SSE_REGS to r505
      Creating newreg=506 from oldreg=224, assigning class SSE_REGS to r506
      Making reload reg 506 for reg 224 optional
  321: r505:SF=r505:SF*r506:SF
      REG_DEAD r237:SF
      REG_DEAD r224:SF
    Inserting insn reload before:
  591: r505:SF=r237:SF
  593: r506:SF=r224:SF
    Inserting insn reload after:
  592: r238:SF=r505:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 592:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 593:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 322:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 325:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 332:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 337:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 338:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 339:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 342:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) x  (1) xm {*cmpiusf_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 349:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 358:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 360:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 365:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 367:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 370:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 371:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 372
	 Choosing alt 0 in insn 372:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 373:  (0) v  (1) m {*movsf_internal}
      Creating newreg=507 from oldreg=251, assigning class ALL_SSE_REGS to r507
  373: r507:SF=[r250:DI]
      REG_DEAD r250:DI
    Inserting insn reload after:
  594: r251:SF=r507:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 594:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 375:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=508 from oldreg=443, assigning class GENERAL_REGS to r508
  375: {r508:SI=r508:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  595: r508:SI=r442:SI
    Inserting insn reload after:
  596: r443:SI=r508:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 376
	 Choosing alt 0 in insn 376:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 379:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 381:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 383
	 Choosing alt 0 in insn 383:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 384:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 386:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 387
	 Choosing alt 0 in insn 387:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 389:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 390:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 392
	 Choosing alt 0 in insn 392:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 397
	 Choosing alt 0 in insn 397:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=509 from oldreg=266, assigning class SSE_REGS to r509
      Creating newreg=510 from oldreg=251, assigning class SSE_REGS to r510
      Making reload reg 510 for reg 251 optional
  397: r509:SF=r509:SF*r510:SF
      REG_DEAD r265:SF
      REG_DEAD r251:SF
    Inserting insn reload before:
  597: r509:SF=r265:SF
  599: r510:SF=r251:SF
    Inserting insn reload after:
  598: r266:SF=r509:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 598:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 599:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 398:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 402:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 403:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 404:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 407:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 408:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 410
	 Choosing alt 0 in insn 410:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 411:  (0) v  (1) m {*movsf_internal}
      Creating newreg=511 from oldreg=275, assigning class ALL_SSE_REGS to r511
  411: r511:SF=[r274:DI]
      REG_DEAD r274:DI
    Inserting insn reload after:
  600: r275:SF=r511:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 600:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 413:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=512 from oldreg=454, assigning class GENERAL_REGS to r512
  413: {r512:SI=r512:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  601: r512:SI=r453:SI
    Inserting insn reload after:
  602: r454:SI=r512:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 414
	 Choosing alt 0 in insn 414:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 417:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 419:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 421
	 Choosing alt 0 in insn 421:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 424:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 425
	 Choosing alt 0 in insn 425:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 426:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 427:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 428:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 430
	 Choosing alt 0 in insn 430:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 435
	 Choosing alt 0 in insn 435:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=513 from oldreg=290, assigning class SSE_REGS to r513
      Creating newreg=514 from oldreg=275, assigning class SSE_REGS to r514
      Making reload reg 514 for reg 275 optional
  435: r513:SF=r513:SF*r514:SF
      REG_DEAD r289:SF
      REG_DEAD r275:SF
    Inserting insn reload before:
  603: r513:SF=r289:SF
  605: r514:SF=r275:SF
    Inserting insn reload after:
  604: r290:SF=r513:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 604:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 605:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 436:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 448:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 449:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 453:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 455
	 Choosing alt 0 in insn 455:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 456:  (0) v  (1) m {*movsf_internal}
      Creating newreg=515 from oldreg=298, assigning class ALL_SSE_REGS to r515
  456: r515:SF=[r297:DI]
      REG_DEAD r297:DI
    Inserting insn reload after:
  606: r298:SF=r515:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 606:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 458:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=516 from oldreg=466, assigning class GENERAL_REGS to r516
  458: {r516:SI=r516:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  607: r516:SI=r465:SI
    Inserting insn reload after:
  608: r466:SI=r516:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 459
	 Choosing alt 0 in insn 459:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 462:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 464:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 466
	 Choosing alt 0 in insn 466:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 469:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 470
	 Choosing alt 0 in insn 470:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 472:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 473:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 475
	 Choosing alt 0 in insn 475:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 480
	 Choosing alt 0 in insn 480:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=517 from oldreg=313, assigning class SSE_REGS to r517
      Creating newreg=518 from oldreg=298, assigning class SSE_REGS to r518
      Making reload reg 518 for reg 298 optional
  480: r517:SF=r517:SF*r518:SF
      REG_DEAD r312:SF
      REG_DEAD r298:SF
    Inserting insn reload before:
  609: r517:SF=r312:SF
  611: r518:SF=r298:SF
    Inserting insn reload after:
  610: r313:SF=r517:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 610:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 611:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 481:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 485:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 486:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 487:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 490:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 491:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 493
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 494:  (0) v  (1) m {*movsf_internal}
      Creating newreg=519 from oldreg=322, assigning class ALL_SSE_REGS to r519
  494: r519:SF=[r321:DI]
      REG_DEAD r321:DI
    Inserting insn reload after:
  612: r322:SF=r519:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 612:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 496:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=520 from oldreg=477, assigning class GENERAL_REGS to r520
  496: {r520:SI=r520:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  613: r520:SI=r476:SI
    Inserting insn reload after:
  614: r477:SI=r520:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 497
	 Choosing alt 0 in insn 497:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 500:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 502:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 504
	 Choosing alt 0 in insn 504:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 505:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 507:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 508
	 Choosing alt 0 in insn 508:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 510:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 511:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 513
	 Choosing alt 0 in insn 513:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 518
	 Choosing alt 0 in insn 518:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=521 from oldreg=337, assigning class SSE_REGS to r521
      Creating newreg=522 from oldreg=322, assigning class SSE_REGS to r522
      Making reload reg 522 for reg 322 optional
  518: r521:SF=r521:SF*r522:SF
      REG_DEAD r336:SF
      REG_DEAD r322:SF
    Inserting insn reload before:
  615: r521:SF=r336:SF
  617: r522:SF=r322:SF
    Inserting insn reload after:
  616: r337:SF=r521:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 616:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 617:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 519:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 522:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 529:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=523 from oldreg=179, assigning class ALL_SSE_REGS to inheritance r523
    Original reg change 179->523 (bb13):
  576: r523:SF=r495:SF
    Add original<-inheritance after:
  618: r179:SF=r523:SF

    Inheritance reuse change 179->523 (bb13):
  581: r498:SF=r523:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=524 from oldreg=156, assigning class ALL_SSE_REGS to inheritance r524
    Original reg change 156->524 (bb13):
  570: r524:SF=r491:SF
    Add original<-inheritance after:
  619: r156:SF=r524:SF

    Inheritance reuse change 156->524 (bb13):
  575: r494:SF=r524:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   618: r179:SF=r523:SF
deleting insn with uid = 618.
	    Removing dead insn:
   619: r156:SF=r524:SF
deleting insn with uid = 619.
EBB 14
EBB 15
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=525 from oldreg=224, assigning class ALL_SSE_REGS to inheritance r525
    Original reg change 224->525 (bb15):
  588: r525:SF=r503:SF
    Add original<-inheritance after:
  620: r224:SF=r525:SF

    Inheritance reuse change 224->525 (bb15):
  593: r506:SF=r525:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=526 from oldreg=201, assigning class ALL_SSE_REGS to inheritance r526
    Original reg change 201->526 (bb15):
  582: r526:SF=r499:SF
    Add original<-inheritance after:
  621: r201:SF=r526:SF

    Inheritance reuse change 201->526 (bb15):
  587: r502:SF=r526:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   620: r224:SF=r525:SF
deleting insn with uid = 620.
	    Removing dead insn:
   621: r201:SF=r526:SF
deleting insn with uid = 621.
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=527 from oldreg=275, assigning class ALL_SSE_REGS to inheritance r527
    Original reg change 275->527 (bb23):
  600: r527:SF=r511:SF
    Add original<-inheritance after:
  622: r275:SF=r527:SF

    Inheritance reuse change 275->527 (bb23):
  605: r514:SF=r527:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=528 from oldreg=251, assigning class ALL_SSE_REGS to inheritance r528
    Original reg change 251->528 (bb23):
  594: r528:SF=r507:SF
    Add original<-inheritance after:
  623: r251:SF=r528:SF

    Inheritance reuse change 251->528 (bb23):
  599: r510:SF=r528:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   622: r275:SF=r527:SF
deleting insn with uid = 622.
	    Removing dead insn:
   623: r251:SF=r528:SF
deleting insn with uid = 623.
EBB 24
EBB 25
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=529 from oldreg=322, assigning class ALL_SSE_REGS to inheritance r529
    Original reg change 322->529 (bb25):
  612: r529:SF=r519:SF
    Add original<-inheritance after:
  624: r322:SF=r529:SF

    Inheritance reuse change 322->529 (bb25):
  617: r522:SF=r529:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=530 from oldreg=298, assigning class ALL_SSE_REGS to inheritance r530
    Original reg change 298->530 (bb25):
  606: r530:SF=r515:SF
    Add original<-inheritance after:
  625: r298:SF=r530:SF

    Inheritance reuse change 298->530 (bb25):
  611: r518:SF=r530:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   624: r322:SF=r529:SF
deleting insn with uid = 624.
	    Removing dead insn:
   625: r298:SF=r530:SF
deleting insn with uid = 625.
EBB 26
EBB 27
EBB 28

********** Pseudo live ranges #1: **********

  BB 28
   Insn 541: point = 0
   Insn 540: point = 0
   Insn 536: point = 1
   Insn 533: point = 3
  BB 27
   Insn 530: point = 4
   Insn 529: point = 4
   Insn 527: point = 5
   Insn 526: point = 7
   Insn 525: point = 9
  BB 20
   Insn 555: point = 10
   Insn 349: point = 10
  BB 19
   Insn 344: point = 10
   Insn 343: point = 10
   Insn 342: point = 11
  BB 18
   Insn 341: point = 13
   Insn 340: point = 13
   Insn 339: point = 14
   Insn 338: point = 15
   Insn 337: point = 17
   Insn 336: point = 19
  BB 17
   Insn 333: point = 20
   Insn 332: point = 20
   Insn 330: point = 21
   Insn 329: point = 23
   Insn 328: point = 25
  BB 10
   Insn 551: point = 26
   Insn 156: point = 26
  BB 9
   Insn 151: point = 26
   Insn 150: point = 26
   Insn 149: point = 27
  BB 8
   Insn 148: point = 29
   Insn 147: point = 29
   Insn 146: point = 30
   Insn 145: point = 31
   Insn 144: point = 33
  BB 7
   Insn 141: point = 34
   Insn 569: point = 35
	Hard reg 0 is preferable by r490 with profit 1
   Insn 140: point = 37
   Insn 139: point = 39
   Insn 138: point = 41
   Insn 137: point = 43
   Insn 136: point = 44
   Insn 135: point = 46
   Insn 134: point = 48
   Insn 133: point = 49
   Insn 132: point = 51
   Insn 131: point = 53
   Insn 130: point = 55
   Insn 129: point = 57
   Insn 128: point = 59
   Insn 568: point = 61
	Hard reg 1 is preferable by r489 with profit 1
   Insn 127: point = 63
   Insn 567: point = 63
   Insn 126: point = 64
   Insn 125: point = 66
   Insn 124: point = 68
   Insn 123: point = 69
   Insn 122: point = 71
   Insn 121: point = 72
   Insn 120: point = 74
   Insn 119: point = 76
   Insn 118: point = 77
   Insn 117: point = 77
   Insn 116: point = 78
   Insn 115: point = 80
   Insn 114: point = 82
   Insn 113: point = 83
   Insn 112: point = 85
   Insn 111: point = 86
   Insn 110: point = 87
   Insn 109: point = 89
   Insn 108: point = 91
   Insn 107: point = 92
   Insn 106: point = 94
   Insn 105: point = 96
   Insn 104: point = 98
   Insn 103: point = 99
   Insn 102: point = 100
   Insn 101: point = 102
   Insn 100: point = 104
   Insn 99: point = 105
   Insn 98: point = 107
   Insn 97: point = 109
   Insn 96: point = 111
   Insn 95: point = 113
  BB 6
   Insn 93: point = 114
   Insn 92: point = 114
   Insn 91: point = 115
   Insn 90: point = 117
   Insn 89: point = 119
  BB 5
   Insn 87: point = 120
   Insn 86: point = 120
   Insn 85: point = 121
   Insn 84: point = 123
  BB 4
   Insn 81: point = 124
   Insn 80: point = 125
   Insn 566: point = 126
	Hard reg 0 is preferable by r488 with profit 1
   Insn 79: point = 128
   Insn 78: point = 130
   Insn 77: point = 132
   Insn 76: point = 134
   Insn 75: point = 135
   Insn 74: point = 137
   Insn 73: point = 139
   Insn 72: point = 140
   Insn 71: point = 142
   Insn 70: point = 144
   Insn 69: point = 146
   Insn 68: point = 148
   Insn 67: point = 150
   Insn 565: point = 152
	Hard reg 1 is preferable by r487 with profit 1
   Insn 66: point = 154
   Insn 564: point = 154
   Insn 65: point = 155
   Insn 64: point = 157
   Insn 63: point = 159
   Insn 62: point = 160
   Insn 61: point = 162
   Insn 60: point = 163
   Insn 59: point = 165
   Insn 58: point = 167
   Insn 57: point = 168
   Insn 56: point = 168
   Insn 55: point = 169
   Insn 54: point = 171
   Insn 53: point = 173
   Insn 52: point = 174
   Insn 51: point = 175
   Insn 50: point = 177
   Insn 49: point = 179
   Insn 48: point = 180
   Insn 47: point = 182
   Insn 46: point = 184
   Insn 45: point = 186
   Insn 44: point = 187
   Insn 43: point = 188
   Insn 42: point = 190
   Insn 41: point = 192
   Insn 40: point = 193
   Insn 39: point = 195
   Insn 38: point = 197
   Insn 37: point = 199
   Insn 36: point = 201
  BB 3
   Insn 34: point = 202
   Insn 33: point = 202
   Insn 32: point = 203
   Insn 31: point = 205
  BB 2
   Insn 29: point = 206
   Insn 28: point = 206
   Insn 27: point = 207
   Insn 26: point = 209
   Insn 25: point = 210
   Insn 563: point = 211
	Hard reg 0 is preferable by r486 with profit 1
   Insn 24: point = 213
   Insn 562: point = 214
	Hard reg 0 is preferable by r486 with profit 1
	Hard reg 21 is preferable by r486 with profit 1
   Insn 23: point = 216
   Insn 22: point = 217
   Insn 21: point = 219
   Insn 20: point = 220
   Insn 561: point = 221
	Hard reg 0 is preferable by r485 with profit 1
   Insn 19: point = 223
   Insn 560: point = 224
	Hard reg 0 is preferable by r485 with profit 1
	Hard reg 22 is preferable by r485 with profit 1
   Insn 18: point = 226
   Insn 17: point = 228
   Insn 16: point = 230
   Insn 15: point = 231
   Insn 14: point = 233
   Insn 13: point = 234
   Insn 12: point = 235
   Insn 11: point = 236
   Insn 10: point = 237
   Insn 9: point = 238
   Insn 5: point = 238
   Insn 4: point = 238
   Insn 3: point = 238
   Insn 2: point = 238
  BB 16
   Insn 325: point = 238
  BB 13
   Insn 553: point = 238
   Insn 241: point = 238
   Insn 580: point = 239
	Hard reg 0 is preferable by r497 with profit 1
   Insn 240: point = 241
   Insn 581: point = 242
	   Creating copy r498<-r523@1
   Insn 579: point = 244
	Hard reg 0 is preferable by r497 with profit 1
	Hard reg 21 is preferable by r497 with profit 1
   Insn 239: point = 246
   Insn 238: point = 248
   Insn 237: point = 249
   Insn 236: point = 249
   Insn 235: point = 250
   Insn 234: point = 252
   Insn 233: point = 254
   Insn 232: point = 256
   Insn 231: point = 257
   Insn 230: point = 259
   Insn 229: point = 260
   Insn 228: point = 262
   Insn 227: point = 263
   Insn 226: point = 265
   Insn 225: point = 266
   Insn 224: point = 268
   Insn 223: point = 269
   Insn 222: point = 271
   Insn 221: point = 273
   Insn 220: point = 275
   Insn 578: point = 277
	Hard reg 1 is preferable by r496 with profit 1
   Insn 219: point = 279
   Insn 577: point = 279
   Insn 218: point = 280
   Insn 576: point = 281
	   Creating copy r495->r523@1
   Insn 217: point = 283
   Insn 216: point = 285
   Insn 215: point = 287
   Insn 214: point = 288
   Insn 213: point = 290
   Insn 212: point = 292
   Insn 211: point = 294
   Insn 210: point = 295
   Insn 209: point = 297
   Insn 208: point = 298
   Insn 207: point = 300
   Insn 206: point = 302
   Insn 205: point = 304
   Insn 204: point = 305
   Insn 574: point = 306
	Hard reg 0 is preferable by r493 with profit 1
   Insn 203: point = 308
   Insn 575: point = 309
	   Creating copy r494<-r524@1
   Insn 573: point = 311
	Hard reg 0 is preferable by r493 with profit 1
	Hard reg 21 is preferable by r493 with profit 1
   Insn 202: point = 313
   Insn 201: point = 315
   Insn 200: point = 316
   Insn 199: point = 316
   Insn 198: point = 317
   Insn 197: point = 319
   Insn 196: point = 321
   Insn 195: point = 323
   Insn 194: point = 324
   Insn 193: point = 326
   Insn 192: point = 327
   Insn 191: point = 329
   Insn 190: point = 330
   Insn 189: point = 332
   Insn 188: point = 333
   Insn 187: point = 335
   Insn 186: point = 336
   Insn 185: point = 338
   Insn 184: point = 340
   Insn 183: point = 342
   Insn 572: point = 344
	Hard reg 1 is preferable by r492 with profit 1
   Insn 182: point = 346
   Insn 571: point = 346
   Insn 181: point = 347
   Insn 570: point = 348
	   Creating copy r491->r524@1
   Insn 180: point = 350
   Insn 179: point = 352
   Insn 178: point = 354
   Insn 177: point = 355
   Insn 176: point = 357
   Insn 175: point = 359
   Insn 174: point = 360
   Insn 173: point = 362
   Insn 172: point = 363
   Insn 171: point = 365
   Insn 170: point = 367
  BB 15
   Insn 322: point = 368
   Insn 592: point = 369
	Hard reg 0 is preferable by r505 with profit 1
   Insn 321: point = 371
   Insn 593: point = 372
	   Creating copy r506<-r525@1
   Insn 591: point = 374
	Hard reg 0 is preferable by r505 with profit 1
	Hard reg 21 is preferable by r505 with profit 1
   Insn 320: point = 376
   Insn 319: point = 378
   Insn 318: point = 379
   Insn 317: point = 379
   Insn 316: point = 380
   Insn 315: point = 382
   Insn 314: point = 384
   Insn 313: point = 386
   Insn 312: point = 387
   Insn 311: point = 389
   Insn 310: point = 390
   Insn 309: point = 392
   Insn 308: point = 393
   Insn 307: point = 395
   Insn 306: point = 396
   Insn 305: point = 398
   Insn 304: point = 399
   Insn 303: point = 401
   Insn 302: point = 403
   Insn 301: point = 405
   Insn 590: point = 407
	Hard reg 1 is preferable by r504 with profit 1
   Insn 300: point = 409
   Insn 589: point = 409
   Insn 299: point = 410
   Insn 588: point = 411
	   Creating copy r503->r525@1
   Insn 298: point = 413
   Insn 297: point = 415
   Insn 296: point = 417
   Insn 295: point = 418
   Insn 294: point = 420
   Insn 293: point = 422
   Insn 292: point = 424
   Insn 291: point = 425
   Insn 290: point = 427
   Insn 289: point = 428
   Insn 288: point = 430
   Insn 287: point = 432
   Insn 286: point = 434
   Insn 285: point = 435
   Insn 586: point = 436
	Hard reg 0 is preferable by r501 with profit 1
   Insn 284: point = 438
   Insn 587: point = 439
	   Creating copy r502<-r526@1
   Insn 585: point = 441
	Hard reg 0 is preferable by r501 with profit 1
	Hard reg 21 is preferable by r501 with profit 1
   Insn 283: point = 443
   Insn 282: point = 445
   Insn 281: point = 446
   Insn 280: point = 446
   Insn 279: point = 447
   Insn 278: point = 449
   Insn 277: point = 451
   Insn 276: point = 453
   Insn 275: point = 454
   Insn 274: point = 456
   Insn 273: point = 457
   Insn 272: point = 459
   Insn 271: point = 460
   Insn 270: point = 462
   Insn 269: point = 463
   Insn 268: point = 465
   Insn 267: point = 466
   Insn 266: point = 468
   Insn 265: point = 470
   Insn 264: point = 472
   Insn 584: point = 474
	Hard reg 1 is preferable by r500 with profit 1
   Insn 263: point = 476
   Insn 583: point = 476
   Insn 262: point = 477
   Insn 582: point = 478
	   Creating copy r499->r526@1
   Insn 261: point = 480
   Insn 260: point = 482
   Insn 259: point = 484
   Insn 258: point = 485
   Insn 257: point = 487
   Insn 256: point = 489
   Insn 255: point = 490
   Insn 254: point = 492
   Insn 253: point = 493
   Insn 252: point = 495
   Insn 251: point = 497
  BB 14
   Insn 249: point = 498
   Insn 248: point = 498
   Insn 247: point = 499
   Insn 246: point = 501
  BB 12
   Insn 168: point = 502
   Insn 167: point = 502
   Insn 166: point = 503
   Insn 165: point = 505
  BB 11
   Insn 163: point = 506
   Insn 162: point = 506
   Insn 161: point = 507
   Insn 160: point = 509
  BB 26
   Insn 522: point = 510
  BB 23
   Insn 557: point = 510
   Insn 436: point = 510
   Insn 604: point = 511
	Hard reg 0 is preferable by r513 with profit 1
   Insn 435: point = 513
   Insn 605: point = 514
	   Creating copy r514<-r527@1
   Insn 603: point = 516
	Hard reg 0 is preferable by r513 with profit 1
	Hard reg 21 is preferable by r513 with profit 1
   Insn 434: point = 518
   Insn 433: point = 520
   Insn 432: point = 521
   Insn 431: point = 521
   Insn 430: point = 522
   Insn 429: point = 524
   Insn 428: point = 526
   Insn 427: point = 528
   Insn 426: point = 530
   Insn 425: point = 531
   Insn 424: point = 533
   Insn 423: point = 534
   Insn 422: point = 536
   Insn 421: point = 537
   Insn 420: point = 539
   Insn 419: point = 540
   Insn 418: point = 542
   Insn 417: point = 543
   Insn 416: point = 545
   Insn 415: point = 547
   Insn 414: point = 549
   Insn 602: point = 551
	Hard reg 1 is preferable by r512 with profit 1
   Insn 413: point = 553
   Insn 601: point = 553
   Insn 412: point = 554
   Insn 600: point = 555
	   Creating copy r511->r527@1
   Insn 411: point = 557
   Insn 410: point = 559
   Insn 409: point = 561
   Insn 408: point = 562
   Insn 407: point = 564
   Insn 406: point = 566
   Insn 405: point = 568
   Insn 404: point = 569
   Insn 403: point = 571
   Insn 402: point = 572
   Insn 401: point = 574
   Insn 400: point = 576
   Insn 399: point = 578
   Insn 398: point = 579
   Insn 598: point = 580
	Hard reg 0 is preferable by r509 with profit 1
   Insn 397: point = 582
   Insn 599: point = 583
	   Creating copy r510<-r528@1
   Insn 597: point = 585
	Hard reg 0 is preferable by r509 with profit 1
	Hard reg 21 is preferable by r509 with profit 1
   Insn 396: point = 587
   Insn 395: point = 589
   Insn 394: point = 590
   Insn 393: point = 590
   Insn 392: point = 591
   Insn 391: point = 593
   Insn 390: point = 595
   Insn 389: point = 597
   Insn 388: point = 599
   Insn 387: point = 600
   Insn 386: point = 602
   Insn 385: point = 603
   Insn 384: point = 605
   Insn 383: point = 606
   Insn 382: point = 608
   Insn 381: point = 609
   Insn 380: point = 611
   Insn 379: point = 612
   Insn 378: point = 614
   Insn 377: point = 616
   Insn 376: point = 618
   Insn 596: point = 620
	Hard reg 1 is preferable by r508 with profit 1
   Insn 375: point = 622
   Insn 595: point = 622
   Insn 374: point = 623
   Insn 594: point = 624
	   Creating copy r507->r528@1
   Insn 373: point = 626
   Insn 372: point = 628
   Insn 371: point = 630
   Insn 370: point = 631
   Insn 369: point = 633
   Insn 368: point = 635
   Insn 367: point = 636
   Insn 366: point = 638
   Insn 365: point = 639
   Insn 364: point = 641
   Insn 363: point = 643
  BB 25
   Insn 519: point = 644
   Insn 616: point = 645
	Hard reg 0 is preferable by r521 with profit 1
   Insn 518: point = 647
   Insn 617: point = 648
	   Creating copy r522<-r529@1
   Insn 615: point = 650
	Hard reg 0 is preferable by r521 with profit 1
	Hard reg 21 is preferable by r521 with profit 1
   Insn 517: point = 652
   Insn 516: point = 654
   Insn 515: point = 655
   Insn 514: point = 655
   Insn 513: point = 656
   Insn 512: point = 658
   Insn 511: point = 660
   Insn 510: point = 662
   Insn 509: point = 664
   Insn 508: point = 665
   Insn 507: point = 667
   Insn 506: point = 668
   Insn 505: point = 670
   Insn 504: point = 671
   Insn 503: point = 673
   Insn 502: point = 674
   Insn 501: point = 676
   Insn 500: point = 677
   Insn 499: point = 679
   Insn 498: point = 681
   Insn 497: point = 683
   Insn 614: point = 685
	Hard reg 1 is preferable by r520 with profit 1
   Insn 496: point = 687
   Insn 613: point = 687
   Insn 495: point = 688
   Insn 612: point = 689
	   Creating copy r519->r529@1
   Insn 494: point = 691
   Insn 493: point = 693
   Insn 492: point = 695
   Insn 491: point = 696
   Insn 490: point = 698
   Insn 489: point = 700
   Insn 488: point = 702
   Insn 487: point = 703
   Insn 486: point = 705
   Insn 485: point = 706
   Insn 484: point = 708
   Insn 483: point = 710
   Insn 482: point = 712
   Insn 481: point = 713
   Insn 610: point = 714
	Hard reg 0 is preferable by r517 with profit 1
   Insn 480: point = 716
   Insn 611: point = 717
	   Creating copy r518<-r530@1
   Insn 609: point = 719
	Hard reg 0 is preferable by r517 with profit 1
	Hard reg 21 is preferable by r517 with profit 1
   Insn 479: point = 721
   Insn 478: point = 723
   Insn 477: point = 724
   Insn 476: point = 724
   Insn 475: point = 725
   Insn 474: point = 727
   Insn 473: point = 729
   Insn 472: point = 731
   Insn 471: point = 733
   Insn 470: point = 734
   Insn 469: point = 736
   Insn 468: point = 737
   Insn 467: point = 739
   Insn 466: point = 740
   Insn 465: point = 742
   Insn 464: point = 743
   Insn 463: point = 745
   Insn 462: point = 746
   Insn 461: point = 748
   Insn 460: point = 750
   Insn 459: point = 752
   Insn 608: point = 754
	Hard reg 1 is preferable by r516 with profit 1
   Insn 458: point = 756
   Insn 607: point = 756
   Insn 457: point = 757
   Insn 606: point = 758
	   Creating copy r515->r530@1
   Insn 456: point = 760
   Insn 455: point = 762
   Insn 454: point = 764
   Insn 453: point = 765
   Insn 452: point = 767
   Insn 451: point = 769
   Insn 450: point = 770
   Insn 449: point = 772
   Insn 448: point = 773
   Insn 447: point = 775
   Insn 446: point = 777
  BB 24
   Insn 444: point = 778
   Insn 443: point = 778
   Insn 442: point = 779
   Insn 441: point = 781
  BB 22
   Insn 361: point = 782
   Insn 360: point = 782
   Insn 359: point = 783
   Insn 358: point = 785
  BB 21
   Insn 356: point = 786
   Insn 355: point = 786
   Insn 354: point = 787
   Insn 353: point = 789
 r83: [225..231]
 r84: [227..228]
 r85: [223..226]
 r86: [215..217]
 r87: [206..207]
 r88: [202..203]
 r89: [198..199]
 r90: [196..197]
 r91: [194..195]
 r92: [191..193]
 r93: [189..190]
 r94: [183..184]
 r95: [181..182]
 r96: [178..180]
 r97: [176..177]
 r98: [170..171]
 r99: [168..169]
 r100: [166..167]
 r101: [164..165]
 r102: [161..163]
 r103: [131..160]
 r104: [156..157]
 r105: [151..155]
 r106: [145..146]
 r107: [143..144]
 r108: [141..142]
 r109: [138..140]
 r110: [136..137]
 r111: [133..135]
 r112: [131..132]
 r113: [129..130]
 r114: [124..126]
 r115: [120..121]
 r116: [116..117]
 r117: [114..115]
 r118: [110..111]
 r119: [108..109]
 r120: [106..107]
 r121: [103..105]
 r122: [101..102]
 r123: [95..96]
 r124: [93..94]
 r125: [90..92]
 r126: [88..89]
 r127: [34..83]
 r128: [79..80]
 r129: [77..78]
 r130: [75..76]
 r131: [73..74]
 r132: [70..72]
 r133: [40..69]
 r134: [65..66]
 r135: [60..64]
 r136: [54..55]
 r137: [52..53]
 r138: [50..51]
 r139: [47..49]
 r140: [45..46]
 r141: [42..44]
 r142: [40..41]
 r143: [38..39]
 r144: [34..35]
 r145: [26..31]
 r146: [22..23]
 r147: [20..21]
 r148: [506..507]
 r149: [502..503]
 r150: [364..365]
 r151: [361..363]
 r152: [305..360]
 r153: [356..357]
 r154: [353..355]
 r155: [351..352]
 r157: [337..338]
 r158: [334..336]
 r159: [334..335]
 r160: [331..333]
 r161: [331..332]
 r162: [328..330]
 r163: [325..327]
 r164: [318..324]
 r165: [320..321]
 r166: [318..319]
 r167: [316..317]
 r168: [314..315]
 r169: [312..313]
 r170: [305..306]
 r171: [301..302]
 r172: [299..300]
 r173: [296..298]
 r174: [238..295]
 r175: [291..292]
 r176: [289..290]
 r177: [286..288]
 r178: [284..285]
 r180: [270..271]
 r181: [267..269]
 r182: [267..268]
 r183: [264..266]
 r184: [264..265]
 r185: [261..263]
 r186: [258..260]
 r187: [251..257]
 r188: [253..254]
 r189: [251..252]
 r190: [249..250]
 r191: [247..248]
 r192: [245..246]
 r193: [238..239]
 r194: [498..499]
 r195: [494..495]
 r196: [491..493]
 r197: [435..490]
 r198: [486..487]
 r199: [483..485]
 r200: [481..482]
 r202: [467..468]
 r203: [464..466]
 r204: [464..465]
 r205: [461..463]
 r206: [461..462]
 r207: [458..460]
 r208: [455..457]
 r209: [448..454]
 r210: [450..451]
 r211: [448..449]
 r212: [446..447]
 r213: [444..445]
 r214: [442..443]
 r215: [435..436]
 r216: [431..432]
 r217: [429..430]
 r218: [426..428]
 r219: [368..425]
 r220: [421..422]
 r221: [419..420]
 r222: [416..418]
 r223: [414..415]
 r225: [400..401]
 r226: [397..399]
 r227: [397..398]
 r228: [394..396]
 r229: [394..395]
 r230: [391..393]
 r231: [388..390]
 r232: [381..387]
 r233: [383..384]
 r234: [381..382]
 r235: [379..380]
 r236: [377..378]
 r237: [375..376]
 r238: [368..369]
 r239: [16..17]
 r240: [10..15]
 r241: [6..7]
 r242: [4..5]
 r243: [786..787]
 r244: [782..783]
 r245: [640..641]
 r246: [637..639]
 r247: [579..636]
 r248: [632..633]
 r249: [629..631]
 r250: [627..628]
 r252: [613..614]
 r253: [610..612]
 r254: [610..611]
 r255: [607..609]
 r256: [607..608]
 r257: [604..606]
 r258: [601..603]
 r259: [592..600]
 r260: [596..597]
 r261: [594..595]
 r262: [592..593]
 r263: [590..591]
 r264: [588..589]
 r265: [586..587]
 r266: [579..580]
 r267: [575..576]
 r268: [573..574]
 r269: [570..572]
 r270: [510..569]
 r271: [565..566]
 r272: [563..564]
 r273: [560..562]
 r274: [558..559]
 r276: [544..545]
 r277: [541..543]
 r278: [541..542]
 r279: [538..540]
 r280: [538..539]
 r281: [535..537]
 r282: [532..534]
 r283: [523..531]
 r284: [527..528]
 r285: [525..526]
 r286: [523..524]
 r287: [521..522]
 r288: [519..520]
 r289: [517..518]
 r290: [510..511]
 r291: [778..779]
 r292: [774..775]
 r293: [771..773]
 r294: [713..770]
 r295: [766..767]
 r296: [763..765]
 r297: [761..762]
 r299: [747..748]
 r300: [744..746]
 r301: [744..745]
 r302: [741..743]
 r303: [741..742]
 r304: [738..740]
 r305: [735..737]
 r306: [726..734]
 r307: [730..731]
 r308: [728..729]
 r309: [726..727]
 r310: [724..725]
 r311: [722..723]
 r312: [720..721]
 r313: [713..714]
 r314: [709..710]
 r315: [707..708]
 r316: [704..706]
 r317: [644..703]
 r318: [699..700]
 r319: [697..698]
 r320: [694..696]
 r321: [692..693]
 r323: [678..679]
 r324: [675..677]
 r325: [675..676]
 r326: [672..674]
 r327: [672..673]
 r328: [669..671]
 r329: [666..668]
 r330: [657..665]
 r331: [661..662]
 r332: [659..660]
 r333: [657..658]
 r334: [655..656]
 r335: [653..654]
 r336: [651..652]
 r337: [644..645]
 r338: [2..3]
 r339: [0..1]
 r340: [236..237]
 r341: [234..235]
 r342: [232..233]
 r343: [229..230]
 r344: [220..221]
 r345: [218..219]
 r346: [210..211]
 r347: [213..216]
 r348: [208..209]
 r349: [204..205]
 r350: [200..201]
 r351: [191..192]
 r352: [187..188]
 r353: [185..186]
 r354: [178..179]
 r355: [174..175]
 r356: [172..173]
 r357: [161..162]
 r358: [158..159]
 r359: [151..152]
 r360: [149..150]
 r361: [147..148]
 r362: [138..139]
 r363: [133..134]
 r364: [124..125]
 r365: [122..123]
 r366: [118..119]
 r367: [112..113]
 r368: [103..104]
 r369: [99..100]
 r370: [97..98]
 r371: [90..91]
 r372: [86..87]
 r373: [84..85]
 r374: [81..82]
 r375: [70..71]
 r376: [67..68]
 r377: [60..61]
 r378: [58..59]
 r379: [56..57]
 r380: [47..48]
 r381: [42..43]
 r382: [32..33]
 r383: [29..30]
 r384: [26..27]
 r385: [508..509]
 r386: [504..505]
 r387: [366..367]
 r388: [361..362]
 r389: [358..359]
 r390: [353..354]
 r391: [343..347]
 r392: [343..344]
 r393: [341..342]
 r394: [339..340]
 r395: [328..329]
 r396: [325..326]
 r397: [322..323]
 r398: [303..304]
 r399: [296..297]
 r400: [293..294]
 r401: [286..287]
 r402: [276..280]
 r403: [276..277]
 r404: [274..275]
 r405: [272..273]
 r406: [261..262]
 r407: [258..259]
 r408: [255..256]
 r409: [500..501]
 r410: [496..497]
 r411: [491..492]
 r412: [488..489]
 r413: [483..484]
 r414: [473..477]
 r415: [473..474]
 r416: [471..472]
 r417: [469..470]
 r418: [458..459]
 r419: [455..456]
 r420: [452..453]
 r421: [433..434]
 r422: [426..427]
 r423: [423..424]
 r424: [416..417]
 r425: [406..410]
 r426: [406..407]
 r427: [404..405]
 r428: [402..403]
 r429: [391..392]
 r430: [388..389]
 r431: [385..386]
 r432: [24..25]
 r433: [18..19]
 r434: [13..14]
 r435: [10..11]
 r436: [788..789]
 r437: [784..785]
 r438: [642..643]
 r439: [637..638]
 r440: [634..635]
 r441: [629..630]
 r442: [619..623]
 r443: [619..620]
 r444: [617..618]
 r445: [615..616]
 r446: [604..605]
 r447: [601..602]
 r448: [598..599]
 r449: [577..578]
 r450: [570..571]
 r451: [567..568]
 r452: [560..561]
 r453: [550..554]
 r454: [550..551]
 r455: [548..549]
 r456: [546..547]
 r457: [535..536]
 r458: [532..533]
 r459: [529..530]
 r460: [780..781]
 r461: [776..777]
 r462: [771..772]
 r463: [768..769]
 r464: [763..764]
 r465: [753..757]
 r466: [753..754]
 r467: [751..752]
 r468: [749..750]
 r469: [738..739]
 r470: [735..736]
 r471: [732..733]
 r472: [711..712]
 r473: [704..705]
 r474: [701..702]
 r475: [694..695]
 r476: [684..688]
 r477: [684..685]
 r478: [682..683]
 r479: [680..681]
 r480: [669..670]
 r481: [666..667]
 r482: [663..664]
 r483: [8..9]
 r485: [222..224]
 r486: [212..214]
 r487: [153..154]
 r488: [127..128]
 r489: [62..63]
 r490: [36..37]
 r491: [349..350]
 r492: [345..346]
 r493: [307..311]
 r494: [308..309]
 r495: [282..283]
 r496: [278..279]
 r497: [240..244]
 r498: [241..242]
 r499: [479..480]
 r500: [475..476]
 r501: [437..441]
 r502: [438..439]
 r503: [412..413]
 r504: [408..409]
 r505: [370..374]
 r506: [371..372]
 r507: [625..626]
 r508: [621..622]
 r509: [581..585]
 r510: [582..583]
 r511: [556..557]
 r512: [552..553]
 r513: [512..516]
 r514: [513..514]
 r515: [759..760]
 r516: [755..756]
 r517: [715..719]
 r518: [716..717]
 r519: [690..691]
 r520: [686..687]
 r521: [646..650]
 r522: [647..648]
 r523: [243..281]
 r524: [310..348]
 r525: [373..411]
 r526: [440..478]
 r527: [515..555]
 r528: [584..624]
 r529: [649..689]
 r530: [718..758]
Compressing live ranges: from 790 to 678 - 85%
Ranges after the compression:
 r83: [202..207]
 r84: [204..205]
 r85: [200..203]
 r86: [194..195]
 r87: [186..187]
 r88: [182..183]
 r89: [178..179]
 r90: [176..177]
 r91: [174..175]
 r92: [172..173]
 r93: [170..171]
 r94: [164..165]
 r95: [162..163]
 r96: [160..161]
 r97: [158..159]
 r98: [152..153]
 r99: [150..151]
 r100: [148..149]
 r101: [146..147]
 r102: [144..145]
 r103: [118..143]
 r104: [140..141]
 r105: [136..139]
 r106: [130..131]
 r107: [128..129]
 r108: [126..127]
 r109: [124..125]
 r110: [122..123]
 r111: [120..121]
 r112: [118..119]
 r113: [116..117]
 r114: [112..113]
 r115: [108..109]
 r116: [104..105]
 r117: [102..103]
 r118: [98..99]
 r119: [96..97]
 r120: [94..95]
 r121: [92..93]
 r122: [90..91]
 r123: [84..85]
 r124: [82..83]
 r125: [80..81]
 r126: [78..79]
 r127: [30..73]
 r128: [70..71]
 r129: [68..69]
 r130: [66..67]
 r131: [64..65]
 r132: [62..63]
 r133: [36..61]
 r134: [58..59]
 r135: [54..57]
 r136: [48..49]
 r137: [46..47]
 r138: [44..45]
 r139: [42..43]
 r140: [40..41]
 r141: [38..39]
 r142: [36..37]
 r143: [34..35]
 r144: [30..31]
 r145: [24..27]
 r146: [20..21]
 r147: [18..19]
 r148: [438..439]
 r149: [434..435]
 r150: [318..319]
 r151: [316..317]
 r152: [270..315]
 r153: [312..313]
 r154: [310..311]
 r155: [308..309]
 r157: [296..297]
 r158: [294..295]
 r159: [294..295]
 r160: [292..293]
 r161: [292..293]
 r162: [290..291]
 r163: [288..289]
 r164: [282..287]
 r165: [284..285]
 r166: [282..283]
 r167: [280..281]
 r168: [278..279]
 r169: [276..277]
 r170: [270..271]
 r171: [266..267]
 r172: [264..265]
 r173: [262..263]
 r174: [214..261]
 r175: [258..259]
 r176: [256..257]
 r177: [254..255]
 r178: [252..253]
 r180: [240..241]
 r181: [238..239]
 r182: [238..239]
 r183: [236..237]
 r184: [236..237]
 r185: [234..235]
 r186: [232..233]
 r187: [226..231]
 r188: [228..229]
 r189: [226..227]
 r190: [224..225]
 r191: [222..223]
 r192: [220..221]
 r193: [214..215]
 r194: [430..431]
 r195: [426..427]
 r196: [424..425]
 r197: [378..423]
 r198: [420..421]
 r199: [418..419]
 r200: [416..417]
 r202: [404..405]
 r203: [402..403]
 r204: [402..403]
 r205: [400..401]
 r206: [400..401]
 r207: [398..399]
 r208: [396..397]
 r209: [390..395]
 r210: [392..393]
 r211: [390..391]
 r212: [388..389]
 r213: [386..387]
 r214: [384..385]
 r215: [378..379]
 r216: [374..375]
 r217: [372..373]
 r218: [370..371]
 r219: [322..369]
 r220: [366..367]
 r221: [364..365]
 r222: [362..363]
 r223: [360..361]
 r225: [348..349]
 r226: [346..347]
 r227: [346..347]
 r228: [344..345]
 r229: [344..345]
 r230: [342..343]
 r231: [340..341]
 r232: [334..339]
 r233: [336..337]
 r234: [334..335]
 r235: [332..333]
 r236: [330..331]
 r237: [328..329]
 r238: [322..323]
 r239: [14..15]
 r240: [10..13]
 r241: [6..7]
 r242: [4..5]
 r243: [674..675]
 r244: [670..671]
 r245: [550..551]
 r246: [548..549]
 r247: [500..547]
 r248: [544..545]
 r249: [542..543]
 r250: [540..541]
 r252: [528..529]
 r253: [526..527]
 r254: [526..527]
 r255: [524..525]
 r256: [524..525]
 r257: [522..523]
 r258: [520..521]
 r259: [512..519]
 r260: [516..517]
 r261: [514..515]
 r262: [512..513]
 r263: [510..511]
 r264: [508..509]
 r265: [506..507]
 r266: [500..501]
 r267: [496..497]
 r268: [494..495]
 r269: [492..493]
 r270: [442..491]
 r271: [488..489]
 r272: [486..487]
 r273: [484..485]
 r274: [482..483]
 r276: [470..471]
 r277: [468..469]
 r278: [468..469]
 r279: [466..467]
 r280: [466..467]
 r281: [464..465]
 r282: [462..463]
 r283: [454..461]
 r284: [458..459]
 r285: [456..457]
 r286: [454..455]
 r287: [452..453]
 r288: [450..451]
 r289: [448..449]
 r290: [442..443]
 r291: [666..667]
 r292: [662..663]
 r293: [660..661]
 r294: [612..659]
 r295: [656..657]
 r296: [654..655]
 r297: [652..653]
 r299: [640..641]
 r300: [638..639]
 r301: [638..639]
 r302: [636..637]
 r303: [636..637]
 r304: [634..635]
 r305: [632..633]
 r306: [624..631]
 r307: [628..629]
 r308: [626..627]
 r309: [624..625]
 r310: [622..623]
 r311: [620..621]
 r312: [618..619]
 r313: [612..613]
 r314: [608..609]
 r315: [606..607]
 r316: [604..605]
 r317: [554..603]
 r318: [600..601]
 r319: [598..599]
 r320: [596..597]
 r321: [594..595]
 r323: [582..583]
 r324: [580..581]
 r325: [580..581]
 r326: [578..579]
 r327: [578..579]
 r328: [576..577]
 r329: [574..575]
 r330: [566..573]
 r331: [570..571]
 r332: [568..569]
 r333: [566..567]
 r334: [564..565]
 r335: [562..563]
 r336: [560..561]
 r337: [554..555]
 r338: [2..3]
 r339: [0..1]
 r340: [212..213]
 r341: [210..211]
 r342: [208..209]
 r343: [206..207]
 r344: [198..199]
 r345: [196..197]
 r346: [190..191]
 r347: [192..195]
 r348: [188..189]
 r349: [184..185]
 r350: [180..181]
 r351: [172..173]
 r352: [168..169]
 r353: [166..167]
 r354: [160..161]
 r355: [156..157]
 r356: [154..155]
 r357: [144..145]
 r358: [142..143]
 r359: [136..137]
 r360: [134..135]
 r361: [132..133]
 r362: [124..125]
 r363: [120..121]
 r364: [112..113]
 r365: [110..111]
 r366: [106..107]
 r367: [100..101]
 r368: [92..93]
 r369: [88..89]
 r370: [86..87]
 r371: [80..81]
 r372: [76..77]
 r373: [74..75]
 r374: [72..73]
 r375: [62..63]
 r376: [60..61]
 r377: [54..55]
 r378: [52..53]
 r379: [50..51]
 r380: [42..43]
 r381: [38..39]
 r382: [28..29]
 r383: [26..27]
 r384: [24..25]
 r385: [440..441]
 r386: [436..437]
 r387: [320..321]
 r388: [316..317]
 r389: [314..315]
 r390: [310..311]
 r391: [302..305]
 r392: [302..303]
 r393: [300..301]
 r394: [298..299]
 r395: [290..291]
 r396: [288..289]
 r397: [286..287]
 r398: [268..269]
 r399: [262..263]
 r400: [260..261]
 r401: [254..255]
 r402: [246..249]
 r403: [246..247]
 r404: [244..245]
 r405: [242..243]
 r406: [234..235]
 r407: [232..233]
 r408: [230..231]
 r409: [432..433]
 r410: [428..429]
 r411: [424..425]
 r412: [422..423]
 r413: [418..419]
 r414: [410..413]
 r415: [410..411]
 r416: [408..409]
 r417: [406..407]
 r418: [398..399]
 r419: [396..397]
 r420: [394..395]
 r421: [376..377]
 r422: [370..371]
 r423: [368..369]
 r424: [362..363]
 r425: [354..357]
 r426: [354..355]
 r427: [352..353]
 r428: [350..351]
 r429: [342..343]
 r430: [340..341]
 r431: [338..339]
 r432: [22..23]
 r433: [16..17]
 r434: [12..13]
 r435: [10..11]
 r436: [676..677]
 r437: [672..673]
 r438: [552..553]
 r439: [548..549]
 r440: [546..547]
 r441: [542..543]
 r442: [534..537]
 r443: [534..535]
 r444: [532..533]
 r445: [530..531]
 r446: [522..523]
 r447: [520..521]
 r448: [518..519]
 r449: [498..499]
 r450: [492..493]
 r451: [490..491]
 r452: [484..485]
 r453: [476..479]
 r454: [476..477]
 r455: [474..475]
 r456: [472..473]
 r457: [464..465]
 r458: [462..463]
 r459: [460..461]
 r460: [668..669]
 r461: [664..665]
 r462: [660..661]
 r463: [658..659]
 r464: [654..655]
 r465: [646..649]
 r466: [646..647]
 r467: [644..645]
 r468: [642..643]
 r469: [634..635]
 r470: [632..633]
 r471: [630..631]
 r472: [610..611]
 r473: [604..605]
 r474: [602..603]
 r475: [596..597]
 r476: [588..591]
 r477: [588..589]
 r478: [586..587]
 r479: [584..585]
 r480: [576..577]
 r481: [574..575]
 r482: [572..573]
 r483: [8..9]
 r485: [200..201]
 r486: [192..193]
 r487: [138..139]
 r488: [114..115]
 r489: [56..57]
 r490: [32..33]
 r491: [306..307]
 r492: [304..305]
 r493: [272..275]
 r494: [272..273]
 r495: [250..251]
 r496: [248..249]
 r497: [216..219]
 r498: [216..217]
 r499: [414..415]
 r500: [412..413]
 r501: [380..383]
 r502: [380..381]
 r503: [358..359]
 r504: [356..357]
 r505: [324..327]
 r506: [324..325]
 r507: [538..539]
 r508: [536..537]
 r509: [502..505]
 r510: [502..503]
 r511: [480..481]
 r512: [478..479]
 r513: [444..447]
 r514: [444..445]
 r515: [650..651]
 r516: [648..649]
 r517: [614..617]
 r518: [614..615]
 r519: [592..593]
 r520: [590..591]
 r521: [556..559]
 r522: [556..557]
 r523: [218..249]
 r524: [274..305]
 r525: [326..357]
 r526: [382..413]
 r527: [446..479]
 r528: [504..537]
 r529: [558..591]
 r530: [616..649]

********** Assignment #1: **********

	 Assigning to 487 (cl=GENERAL_REGS, orig=359, freq=3, tfirst=487, tfreq=3)...
	   Assign 1 to reload r487 (freq=3)
	 Assigning to 489 (cl=GENERAL_REGS, orig=377, freq=3, tfirst=489, tfreq=3)...
	   Assign 1 to reload r489 (freq=3)
	 Assigning to 492 (cl=GENERAL_REGS, orig=392, freq=3, tfirst=492, tfreq=3)...
	   Assign 1 to reload r492 (freq=3)
	 Assigning to 496 (cl=GENERAL_REGS, orig=403, freq=3, tfirst=496, tfreq=3)...
	   Assign 1 to reload r496 (freq=3)
	 Assigning to 500 (cl=GENERAL_REGS, orig=415, freq=3, tfirst=500, tfreq=3)...
	   Assign 1 to reload r500 (freq=3)
	 Assigning to 504 (cl=GENERAL_REGS, orig=426, freq=3, tfirst=504, tfreq=3)...
	   Assign 1 to reload r504 (freq=3)
	 Assigning to 508 (cl=GENERAL_REGS, orig=443, freq=3, tfirst=508, tfreq=3)...
	   Assign 1 to reload r508 (freq=3)
	 Assigning to 512 (cl=GENERAL_REGS, orig=454, freq=3, tfirst=512, tfreq=3)...
	   Assign 1 to reload r512 (freq=3)
	 Assigning to 516 (cl=GENERAL_REGS, orig=466, freq=3, tfirst=516, tfreq=3)...
	   Assign 1 to reload r516 (freq=3)
	 Assigning to 520 (cl=GENERAL_REGS, orig=477, freq=3, tfirst=520, tfreq=3)...
	   Assign 1 to reload r520 (freq=3)
	 Assigning to 485 (cl=SSE_REGS, orig=344, freq=3, tfirst=485, tfreq=3)...
	   Assign 22 to reload r485 (freq=3)
	 Assigning to 486 (cl=SSE_REGS, orig=346, freq=3, tfirst=486, tfreq=3)...
	   Assign 21 to reload r486 (freq=3)
	 Assigning to 493 (cl=SSE_REGS, orig=170, freq=3, tfirst=493, tfreq=3)...
	   Assign 21 to reload r493 (freq=3)
	 Assigning to 497 (cl=SSE_REGS, orig=193, freq=3, tfirst=497, tfreq=3)...
	   Assign 21 to reload r497 (freq=3)
	 Assigning to 501 (cl=SSE_REGS, orig=215, freq=3, tfirst=501, tfreq=3)...
	   Assign 21 to reload r501 (freq=3)
	 Assigning to 505 (cl=SSE_REGS, orig=238, freq=3, tfirst=505, tfreq=3)...
	   Assign 21 to reload r505 (freq=3)
	 Assigning to 509 (cl=SSE_REGS, orig=266, freq=3, tfirst=509, tfreq=3)...
	   Assign 21 to reload r509 (freq=3)
	 Assigning to 513 (cl=SSE_REGS, orig=290, freq=3, tfirst=513, tfreq=3)...
	   Assign 21 to reload r513 (freq=3)
	 Assigning to 517 (cl=SSE_REGS, orig=313, freq=3, tfirst=517, tfreq=3)...
	   Assign 21 to reload r517 (freq=3)
	 Assigning to 521 (cl=SSE_REGS, orig=337, freq=3, tfirst=521, tfreq=3)...
	   Assign 21 to reload r521 (freq=3)
	 Assigning to 488 (cl=SSE_REGS, orig=114, freq=2, tfirst=488, tfreq=2)...
	   Assign 24 to reload r488 (freq=2)
	 Assigning to 490 (cl=SSE_REGS, orig=144, freq=2, tfirst=490, tfreq=2)...
	   Assign 25 to reload r490 (freq=2)
	 Assigning to 491 (cl=ALL_SSE_REGS, orig=156, freq=2, tfirst=491, tfreq=2)...
	   Assign 26 to reload r491 (freq=2)
	Hard reg 26 is preferable by r524 with profit 1
	Hard reg 26 is preferable by r494 with profit 1
	 Assigning to 494 (cl=SSE_REGS, orig=156, freq=2, tfirst=491, tfreq=2)...
	   Assign 26 to optional reload r494 (freq=2)
	Hard reg 26 is preferable by r524 with profit 2
	 Assigning to 524 (cl=ALL_SSE_REGS, orig=156, freq=2, tfirst=491, tfreq=2)...
	 Assigning to 495 (cl=ALL_SSE_REGS, orig=179, freq=2, tfirst=495, tfreq=2)...
	   Assign 27 to reload r495 (freq=2)
	Hard reg 27 is preferable by r523 with profit 1
	Hard reg 27 is preferable by r498 with profit 1
	 Assigning to 498 (cl=SSE_REGS, orig=179, freq=2, tfirst=495, tfreq=2)...
	   Assign 27 to optional reload r498 (freq=2)
	Hard reg 27 is preferable by r523 with profit 2
	 Assigning to 523 (cl=ALL_SSE_REGS, orig=179, freq=2, tfirst=495, tfreq=2)...
	 Assigning to 499 (cl=ALL_SSE_REGS, orig=201, freq=2, tfirst=499, tfreq=2)...
	   Assign 28 to reload r499 (freq=2)
	Hard reg 28 is preferable by r526 with profit 1
	Hard reg 28 is preferable by r502 with profit 1
	 Assigning to 502 (cl=SSE_REGS, orig=201, freq=2, tfirst=499, tfreq=2)...
	   Assign 28 to optional reload r502 (freq=2)
	Hard reg 28 is preferable by r526 with profit 2
	 Assigning to 526 (cl=ALL_SSE_REGS, orig=201, freq=2, tfirst=499, tfreq=2)...
	 Assigning to 503 (cl=ALL_SSE_REGS, orig=224, freq=2, tfirst=503, tfreq=2)...
	   Assign 24 to reload r503 (freq=2)
	Hard reg 24 is preferable by r525 with profit 1
	Hard reg 24 is preferable by r506 with profit 1
	 Assigning to 506 (cl=SSE_REGS, orig=224, freq=2, tfirst=503, tfreq=2)...
	   Assign 24 to optional reload r506 (freq=2)
	Hard reg 24 is preferable by r525 with profit 2
	 Assigning to 525 (cl=ALL_SSE_REGS, orig=224, freq=2, tfirst=503, tfreq=2)...
	 Assigning to 507 (cl=ALL_SSE_REGS, orig=251, freq=2, tfirst=507, tfreq=2)...
	   Assign 25 to reload r507 (freq=2)
	Hard reg 25 is preferable by r528 with profit 1
	Hard reg 25 is preferable by r510 with profit 1
	 Assigning to 510 (cl=SSE_REGS, orig=251, freq=2, tfirst=507, tfreq=2)...
	   Assign 25 to optional reload r510 (freq=2)
	Hard reg 25 is preferable by r528 with profit 2
	 Assigning to 528 (cl=ALL_SSE_REGS, orig=251, freq=2, tfirst=507, tfreq=2)...
	 Assigning to 511 (cl=ALL_SSE_REGS, orig=275, freq=2, tfirst=511, tfreq=2)...
	   Assign 26 to reload r511 (freq=2)
	Hard reg 26 is preferable by r527 with profit 1
	Hard reg 26 is preferable by r514 with profit 1
	 Assigning to 514 (cl=SSE_REGS, orig=275, freq=2, tfirst=511, tfreq=2)...
	   Assign 26 to optional reload r514 (freq=2)
	Hard reg 26 is preferable by r527 with profit 2
	 Assigning to 527 (cl=ALL_SSE_REGS, orig=275, freq=2, tfirst=511, tfreq=2)...
	 Assigning to 515 (cl=ALL_SSE_REGS, orig=298, freq=2, tfirst=515, tfreq=2)...
	   Assign 27 to reload r515 (freq=2)
	Hard reg 27 is preferable by r530 with profit 1
	Hard reg 27 is preferable by r518 with profit 1
	 Assigning to 518 (cl=SSE_REGS, orig=298, freq=2, tfirst=515, tfreq=2)...
	   Assign 27 to optional reload r518 (freq=2)
	Hard reg 27 is preferable by r530 with profit 2
	 Assigning to 530 (cl=ALL_SSE_REGS, orig=298, freq=2, tfirst=515, tfreq=2)...
	 Assigning to 519 (cl=ALL_SSE_REGS, orig=322, freq=2, tfirst=519, tfreq=2)...
	   Assign 28 to reload r519 (freq=2)
	Hard reg 28 is preferable by r529 with profit 1
	Hard reg 28 is preferable by r522 with profit 1
	 Assigning to 522 (cl=SSE_REGS, orig=322, freq=2, tfirst=519, tfreq=2)...
	   Assign 28 to optional reload r522 (freq=2)
	Hard reg 28 is preferable by r529 with profit 2
	 Assigning to 529 (cl=ALL_SSE_REGS, orig=322, freq=2, tfirst=519, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  581: r498:SF=r179:SF
      REG_DEAD r179:SF
   Insn after restoring regs:
  576: r179:SF=r495:SF
      REG_DEAD r495:SF
   Insn after restoring regs:
  575: r494:SF=r156:SF
      REG_DEAD r156:SF
   Insn after restoring regs:
  570: r156:SF=r491:SF
      REG_DEAD r491:SF
   Insn after restoring regs:
  593: r506:SF=r224:SF
      REG_DEAD r224:SF
   Insn after restoring regs:
  588: r224:SF=r503:SF
      REG_DEAD r503:SF
   Insn after restoring regs:
  587: r502:SF=r201:SF
      REG_DEAD r201:SF
   Insn after restoring regs:
  582: r201:SF=r499:SF
      REG_DEAD r499:SF
   Insn after restoring regs:
  605: r514:SF=r275:SF
      REG_DEAD r275:SF
   Insn after restoring regs:
  600: r275:SF=r511:SF
      REG_DEAD r511:SF
   Insn after restoring regs:
  599: r510:SF=r251:SF
      REG_DEAD r251:SF
   Insn after restoring regs:
  594: r251:SF=r507:SF
      REG_DEAD r507:SF
   Insn after restoring regs:
  617: r522:SF=r322:SF
      REG_DEAD r322:SF
   Insn after restoring regs:
  612: r322:SF=r519:SF
      REG_DEAD r519:SF
   Insn after restoring regs:
  611: r518:SF=r298:SF
      REG_DEAD r298:SF
   Insn after restoring regs:
  606: r298:SF=r515:SF
      REG_DEAD r515:SF
Remove optional reload reg 494
  Restoring original insn:
  203: r493:SF=r493:SF*r156:SF
      REG_DEAD r156:SF
  Deleting move 575
  575: r494:SF=r156:SF
      REG_DEAD r156:SF
deleting insn with uid = 575.
Remove optional reload reg 498
  Restoring original insn:
  240: r497:SF=r497:SF*r179:SF
      REG_DEAD r179:SF
  Deleting move 581
  581: r498:SF=r179:SF
      REG_DEAD r179:SF
deleting insn with uid = 581.
Remove optional reload reg 502
  Restoring original insn:
  284: r501:SF=r501:SF*r201:SF
      REG_DEAD r201:SF
  Deleting move 587
  587: r502:SF=r201:SF
      REG_DEAD r201:SF
deleting insn with uid = 587.
Remove optional reload reg 506
  Restoring original insn:
  321: r505:SF=r505:SF*r224:SF
      REG_DEAD r224:SF
  Deleting move 593
  593: r506:SF=r224:SF
      REG_DEAD r224:SF
deleting insn with uid = 593.
Remove optional reload reg 510
  Restoring original insn:
  397: r509:SF=r509:SF*r251:SF
      REG_DEAD r251:SF
  Deleting move 599
  599: r510:SF=r251:SF
      REG_DEAD r251:SF
deleting insn with uid = 599.
Remove optional reload reg 514
  Restoring original insn:
  435: r513:SF=r513:SF*r275:SF
      REG_DEAD r275:SF
  Deleting move 605
  605: r514:SF=r275:SF
      REG_DEAD r275:SF
deleting insn with uid = 605.
Remove optional reload reg 518
  Restoring original insn:
  480: r517:SF=r517:SF*r298:SF
      REG_DEAD r298:SF
  Deleting move 611
  611: r518:SF=r298:SF
      REG_DEAD r298:SF
deleting insn with uid = 611.
Remove optional reload reg 522
  Restoring original insn:
  518: r521:SF=r521:SF*r322:SF
      REG_DEAD r322:SF
  Deleting move 617
  617: r522:SF=r322:SF
      REG_DEAD r322:SF
deleting insn with uid = 617.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 518:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=531 from oldreg=322, assigning class SSE_REGS to r531
      Making reload reg 531 for reg 322 optional
  518: r521:SF=r521:SF*r531:SF
      REG_DEAD r322:SF
    Inserting insn reload before:
  626: r531:SF=r322:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 626:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 480:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=532 from oldreg=298, assigning class SSE_REGS to r532
      Making reload reg 532 for reg 298 optional
  480: r517:SF=r517:SF*r532:SF
      REG_DEAD r298:SF
    Inserting insn reload before:
  627: r532:SF=r298:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 627:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 435:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=533 from oldreg=275, assigning class SSE_REGS to r533
      Making reload reg 533 for reg 275 optional
  435: r513:SF=r513:SF*r533:SF
      REG_DEAD r275:SF
    Inserting insn reload before:
  628: r533:SF=r275:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 628:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 397:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=534 from oldreg=251, assigning class SSE_REGS to r534
      Making reload reg 534 for reg 251 optional
  397: r509:SF=r509:SF*r534:SF
      REG_DEAD r251:SF
    Inserting insn reload before:
  629: r534:SF=r251:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 629:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 321:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=535 from oldreg=224, assigning class SSE_REGS to r535
      Making reload reg 535 for reg 224 optional
  321: r505:SF=r505:SF*r535:SF
      REG_DEAD r224:SF
    Inserting insn reload before:
  630: r535:SF=r224:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 630:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=536 from oldreg=201, assigning class SSE_REGS to r536
      Making reload reg 536 for reg 201 optional
  284: r501:SF=r501:SF*r536:SF
      REG_DEAD r201:SF
    Inserting insn reload before:
  631: r536:SF=r201:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 631:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 240:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=537 from oldreg=179, assigning class SSE_REGS to r537
      Making reload reg 537 for reg 179 optional
  240: r497:SF=r497:SF*r537:SF
      REG_DEAD r179:SF
    Inserting insn reload before:
  632: r537:SF=r179:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 632:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 203:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=538 from oldreg=156, assigning class SSE_REGS to r538
      Making reload reg 538 for reg 156 optional
  203: r493:SF=r493:SF*r538:SF
      REG_DEAD r156:SF
    Inserting insn reload before:
  633: r538:SF=r156:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 633:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=539 from oldreg=179, assigning class ALL_SSE_REGS to inheritance r539
    Original reg change 179->539 (bb13):
  576: r539:SF=r495:SF
      REG_DEAD r495:SF
    Add original<-inheritance after:
  634: r179:SF=r539:SF

    Inheritance reuse change 179->539 (bb13):
  632: r537:SF=r539:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=540 from oldreg=156, assigning class ALL_SSE_REGS to inheritance r540
    Original reg change 156->540 (bb13):
  570: r540:SF=r491:SF
      REG_DEAD r491:SF
    Add original<-inheritance after:
  635: r156:SF=r540:SF

    Inheritance reuse change 156->540 (bb13):
  633: r538:SF=r540:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   634: r179:SF=r539:SF
deleting insn with uid = 634.
	    Removing dead insn:
   635: r156:SF=r540:SF
deleting insn with uid = 635.
EBB 14
EBB 15
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=541 from oldreg=224, assigning class ALL_SSE_REGS to inheritance r541
    Original reg change 224->541 (bb15):
  588: r541:SF=r503:SF
      REG_DEAD r503:SF
    Add original<-inheritance after:
  636: r224:SF=r541:SF

    Inheritance reuse change 224->541 (bb15):
  630: r535:SF=r541:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=542 from oldreg=201, assigning class ALL_SSE_REGS to inheritance r542
    Original reg change 201->542 (bb15):
  582: r542:SF=r499:SF
      REG_DEAD r499:SF
    Add original<-inheritance after:
  637: r201:SF=r542:SF

    Inheritance reuse change 201->542 (bb15):
  631: r536:SF=r542:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   636: r224:SF=r541:SF
deleting insn with uid = 636.
	    Removing dead insn:
   637: r201:SF=r542:SF
deleting insn with uid = 637.
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=543 from oldreg=275, assigning class ALL_SSE_REGS to inheritance r543
    Original reg change 275->543 (bb23):
  600: r543:SF=r511:SF
      REG_DEAD r511:SF
    Add original<-inheritance after:
  638: r275:SF=r543:SF

    Inheritance reuse change 275->543 (bb23):
  628: r533:SF=r543:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=544 from oldreg=251, assigning class ALL_SSE_REGS to inheritance r544
    Original reg change 251->544 (bb23):
  594: r544:SF=r507:SF
      REG_DEAD r507:SF
    Add original<-inheritance after:
  639: r251:SF=r544:SF

    Inheritance reuse change 251->544 (bb23):
  629: r534:SF=r544:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   638: r275:SF=r543:SF
deleting insn with uid = 638.
	    Removing dead insn:
   639: r251:SF=r544:SF
deleting insn with uid = 639.
EBB 24
EBB 25
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=545 from oldreg=322, assigning class ALL_SSE_REGS to inheritance r545
    Original reg change 322->545 (bb25):
  612: r545:SF=r519:SF
      REG_DEAD r519:SF
    Add original<-inheritance after:
  640: r322:SF=r545:SF

    Inheritance reuse change 322->545 (bb25):
  626: r531:SF=r545:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=546 from oldreg=298, assigning class ALL_SSE_REGS to inheritance r546
    Original reg change 298->546 (bb25):
  606: r546:SF=r515:SF
      REG_DEAD r515:SF
    Add original<-inheritance after:
  641: r298:SF=r546:SF

    Inheritance reuse change 298->546 (bb25):
  627: r532:SF=r546:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   640: r322:SF=r545:SF
deleting insn with uid = 640.
	    Removing dead insn:
   641: r298:SF=r546:SF
deleting insn with uid = 641.
EBB 26
EBB 27
EBB 28

********** Pseudo live ranges #2: **********

  BB 28
   Insn 541: point = 0
   Insn 540: point = 0
   Insn 536: point = 1
   Insn 533: point = 3
  BB 27
   Insn 530: point = 4
   Insn 529: point = 4
   Insn 527: point = 5
   Insn 526: point = 7
   Insn 525: point = 9
  BB 20
   Insn 555: point = 10
   Insn 349: point = 10
  BB 19
   Insn 344: point = 10
   Insn 343: point = 10
   Insn 342: point = 11
  BB 18
   Insn 341: point = 13
   Insn 340: point = 13
   Insn 339: point = 14
   Insn 338: point = 15
   Insn 337: point = 17
   Insn 336: point = 19
  BB 17
   Insn 333: point = 20
   Insn 332: point = 20
   Insn 330: point = 21
   Insn 329: point = 23
   Insn 328: point = 25
  BB 10
   Insn 551: point = 26
   Insn 156: point = 26
  BB 9
   Insn 151: point = 26
   Insn 150: point = 26
   Insn 149: point = 27
  BB 8
   Insn 148: point = 29
   Insn 147: point = 29
   Insn 146: point = 30
   Insn 145: point = 31
   Insn 144: point = 33
  BB 7
   Insn 141: point = 34
   Insn 569: point = 35
	Hard reg 0 is preferable by r490 with profit 1
   Insn 140: point = 37
   Insn 139: point = 39
   Insn 138: point = 41
   Insn 137: point = 43
   Insn 136: point = 44
   Insn 135: point = 46
   Insn 134: point = 48
   Insn 133: point = 49
   Insn 132: point = 51
   Insn 131: point = 53
   Insn 130: point = 55
   Insn 129: point = 57
   Insn 128: point = 59
   Insn 568: point = 61
	Hard reg 1 is preferable by r489 with profit 1
   Insn 127: point = 63
   Insn 567: point = 63
   Insn 126: point = 64
   Insn 125: point = 66
   Insn 124: point = 68
   Insn 123: point = 69
   Insn 122: point = 71
   Insn 121: point = 72
   Insn 120: point = 74
   Insn 119: point = 76
   Insn 118: point = 77
   Insn 117: point = 77
   Insn 116: point = 78
   Insn 115: point = 80
   Insn 114: point = 82
   Insn 113: point = 83
   Insn 112: point = 85
   Insn 111: point = 86
   Insn 110: point = 87
   Insn 109: point = 89
   Insn 108: point = 91
   Insn 107: point = 92
   Insn 106: point = 94
   Insn 105: point = 96
   Insn 104: point = 98
   Insn 103: point = 99
   Insn 102: point = 100
   Insn 101: point = 102
   Insn 100: point = 104
   Insn 99: point = 105
   Insn 98: point = 107
   Insn 97: point = 109
   Insn 96: point = 111
   Insn 95: point = 113
  BB 6
   Insn 93: point = 114
   Insn 92: point = 114
   Insn 91: point = 115
   Insn 90: point = 117
   Insn 89: point = 119
  BB 5
   Insn 87: point = 120
   Insn 86: point = 120
   Insn 85: point = 121
   Insn 84: point = 123
  BB 4
   Insn 81: point = 124
   Insn 80: point = 125
   Insn 566: point = 126
	Hard reg 0 is preferable by r488 with profit 1
   Insn 79: point = 128
   Insn 78: point = 130
   Insn 77: point = 132
   Insn 76: point = 134
   Insn 75: point = 135
   Insn 74: point = 137
   Insn 73: point = 139
   Insn 72: point = 140
   Insn 71: point = 142
   Insn 70: point = 144
   Insn 69: point = 146
   Insn 68: point = 148
   Insn 67: point = 150
   Insn 565: point = 152
	Hard reg 1 is preferable by r487 with profit 1
   Insn 66: point = 154
   Insn 564: point = 154
   Insn 65: point = 155
   Insn 64: point = 157
   Insn 63: point = 159
   Insn 62: point = 160
   Insn 61: point = 162
   Insn 60: point = 163
   Insn 59: point = 165
   Insn 58: point = 167
   Insn 57: point = 168
   Insn 56: point = 168
   Insn 55: point = 169
   Insn 54: point = 171
   Insn 53: point = 173
   Insn 52: point = 174
   Insn 51: point = 175
   Insn 50: point = 177
   Insn 49: point = 179
   Insn 48: point = 180
   Insn 47: point = 182
   Insn 46: point = 184
   Insn 45: point = 186
   Insn 44: point = 187
   Insn 43: point = 188
   Insn 42: point = 190
   Insn 41: point = 192
   Insn 40: point = 193
   Insn 39: point = 195
   Insn 38: point = 197
   Insn 37: point = 199
   Insn 36: point = 201
  BB 3
   Insn 34: point = 202
   Insn 33: point = 202
   Insn 32: point = 203
   Insn 31: point = 205
  BB 2
   Insn 29: point = 206
   Insn 28: point = 206
   Insn 27: point = 207
   Insn 26: point = 209
   Insn 25: point = 210
   Insn 563: point = 211
	Hard reg 0 is preferable by r486 with profit 1
   Insn 24: point = 213
   Insn 562: point = 214
	Hard reg 0 is preferable by r486 with profit 1
	Hard reg 21 is preferable by r486 with profit 1
   Insn 23: point = 216
   Insn 22: point = 217
   Insn 21: point = 219
   Insn 20: point = 220
   Insn 561: point = 221
	Hard reg 0 is preferable by r485 with profit 1
   Insn 19: point = 223
   Insn 560: point = 224
	Hard reg 0 is preferable by r485 with profit 1
	Hard reg 22 is preferable by r485 with profit 1
   Insn 18: point = 226
   Insn 17: point = 228
   Insn 16: point = 230
   Insn 15: point = 231
   Insn 14: point = 233
   Insn 13: point = 234
   Insn 12: point = 235
   Insn 11: point = 236
   Insn 10: point = 237
   Insn 9: point = 238
   Insn 5: point = 238
   Insn 4: point = 238
   Insn 3: point = 238
   Insn 2: point = 238
  BB 16
   Insn 325: point = 238
  BB 13
   Insn 553: point = 238
   Insn 241: point = 238
   Insn 580: point = 239
	Hard reg 0 is preferable by r497 with profit 1
   Insn 240: point = 241
   Insn 632: point = 242
	   Creating copy r537<-r539@1
   Insn 579: point = 244
	Hard reg 0 is preferable by r497 with profit 1
	Hard reg 21 is preferable by r497 with profit 1
   Insn 239: point = 246
   Insn 238: point = 248
   Insn 237: point = 249
   Insn 236: point = 249
   Insn 235: point = 250
   Insn 234: point = 252
   Insn 233: point = 254
   Insn 232: point = 256
   Insn 231: point = 257
   Insn 230: point = 259
   Insn 229: point = 260
   Insn 228: point = 262
   Insn 227: point = 263
   Insn 226: point = 265
   Insn 225: point = 266
   Insn 224: point = 268
   Insn 223: point = 269
   Insn 222: point = 271
   Insn 221: point = 273
   Insn 220: point = 275
   Insn 578: point = 277
	Hard reg 1 is preferable by r496 with profit 1
   Insn 219: point = 279
   Insn 577: point = 279
   Insn 218: point = 280
   Insn 576: point = 281
	   Creating copy r495->r539@1
   Insn 217: point = 283
   Insn 216: point = 285
   Insn 215: point = 287
   Insn 214: point = 288
   Insn 213: point = 290
   Insn 212: point = 292
   Insn 211: point = 294
   Insn 210: point = 295
   Insn 209: point = 297
   Insn 208: point = 298
   Insn 207: point = 300
   Insn 206: point = 302
   Insn 205: point = 304
   Insn 204: point = 305
   Insn 574: point = 306
	Hard reg 0 is preferable by r493 with profit 1
   Insn 203: point = 308
   Insn 633: point = 309
	   Creating copy r538<-r540@1
   Insn 573: point = 311
	Hard reg 0 is preferable by r493 with profit 1
	Hard reg 21 is preferable by r493 with profit 1
   Insn 202: point = 313
   Insn 201: point = 315
   Insn 200: point = 316
   Insn 199: point = 316
   Insn 198: point = 317
   Insn 197: point = 319
   Insn 196: point = 321
   Insn 195: point = 323
   Insn 194: point = 324
   Insn 193: point = 326
   Insn 192: point = 327
   Insn 191: point = 329
   Insn 190: point = 330
   Insn 189: point = 332
   Insn 188: point = 333
   Insn 187: point = 335
   Insn 186: point = 336
   Insn 185: point = 338
   Insn 184: point = 340
   Insn 183: point = 342
   Insn 572: point = 344
	Hard reg 1 is preferable by r492 with profit 1
   Insn 182: point = 346
   Insn 571: point = 346
   Insn 181: point = 347
   Insn 570: point = 348
	   Creating copy r491->r540@1
   Insn 180: point = 350
   Insn 179: point = 352
   Insn 178: point = 354
   Insn 177: point = 355
   Insn 176: point = 357
   Insn 175: point = 359
   Insn 174: point = 360
   Insn 173: point = 362
   Insn 172: point = 363
   Insn 171: point = 365
   Insn 170: point = 367
  BB 15
   Insn 322: point = 368
   Insn 592: point = 369
	Hard reg 0 is preferable by r505 with profit 1
   Insn 321: point = 371
   Insn 630: point = 372
	   Creating copy r535<-r541@1
   Insn 591: point = 374
	Hard reg 0 is preferable by r505 with profit 1
	Hard reg 21 is preferable by r505 with profit 1
   Insn 320: point = 376
   Insn 319: point = 378
   Insn 318: point = 379
   Insn 317: point = 379
   Insn 316: point = 380
   Insn 315: point = 382
   Insn 314: point = 384
   Insn 313: point = 386
   Insn 312: point = 387
   Insn 311: point = 389
   Insn 310: point = 390
   Insn 309: point = 392
   Insn 308: point = 393
   Insn 307: point = 395
   Insn 306: point = 396
   Insn 305: point = 398
   Insn 304: point = 399
   Insn 303: point = 401
   Insn 302: point = 403
   Insn 301: point = 405
   Insn 590: point = 407
	Hard reg 1 is preferable by r504 with profit 1
   Insn 300: point = 409
   Insn 589: point = 409
   Insn 299: point = 410
   Insn 588: point = 411
	   Creating copy r503->r541@1
   Insn 298: point = 413
   Insn 297: point = 415
   Insn 296: point = 417
   Insn 295: point = 418
   Insn 294: point = 420
   Insn 293: point = 422
   Insn 292: point = 424
   Insn 291: point = 425
   Insn 290: point = 427
   Insn 289: point = 428
   Insn 288: point = 430
   Insn 287: point = 432
   Insn 286: point = 434
   Insn 285: point = 435
   Insn 586: point = 436
	Hard reg 0 is preferable by r501 with profit 1
   Insn 284: point = 438
   Insn 631: point = 439
	   Creating copy r536<-r542@1
   Insn 585: point = 441
	Hard reg 0 is preferable by r501 with profit 1
	Hard reg 21 is preferable by r501 with profit 1
   Insn 283: point = 443
   Insn 282: point = 445
   Insn 281: point = 446
   Insn 280: point = 446
   Insn 279: point = 447
   Insn 278: point = 449
   Insn 277: point = 451
   Insn 276: point = 453
   Insn 275: point = 454
   Insn 274: point = 456
   Insn 273: point = 457
   Insn 272: point = 459
   Insn 271: point = 460
   Insn 270: point = 462
   Insn 269: point = 463
   Insn 268: point = 465
   Insn 267: point = 466
   Insn 266: point = 468
   Insn 265: point = 470
   Insn 264: point = 472
   Insn 584: point = 474
	Hard reg 1 is preferable by r500 with profit 1
   Insn 263: point = 476
   Insn 583: point = 476
   Insn 262: point = 477
   Insn 582: point = 478
	   Creating copy r499->r542@1
   Insn 261: point = 480
   Insn 260: point = 482
   Insn 259: point = 484
   Insn 258: point = 485
   Insn 257: point = 487
   Insn 256: point = 489
   Insn 255: point = 490
   Insn 254: point = 492
   Insn 253: point = 493
   Insn 252: point = 495
   Insn 251: point = 497
  BB 14
   Insn 249: point = 498
   Insn 248: point = 498
   Insn 247: point = 499
   Insn 246: point = 501
  BB 12
   Insn 168: point = 502
   Insn 167: point = 502
   Insn 166: point = 503
   Insn 165: point = 505
  BB 11
   Insn 163: point = 506
   Insn 162: point = 506
   Insn 161: point = 507
   Insn 160: point = 509
  BB 26
   Insn 522: point = 510
  BB 23
   Insn 557: point = 510
   Insn 436: point = 510
   Insn 604: point = 511
	Hard reg 0 is preferable by r513 with profit 1
   Insn 435: point = 513
   Insn 628: point = 514
	   Creating copy r533<-r543@1
   Insn 603: point = 516
	Hard reg 0 is preferable by r513 with profit 1
	Hard reg 21 is preferable by r513 with profit 1
   Insn 434: point = 518
   Insn 433: point = 520
   Insn 432: point = 521
   Insn 431: point = 521
   Insn 430: point = 522
   Insn 429: point = 524
   Insn 428: point = 526
   Insn 427: point = 528
   Insn 426: point = 530
   Insn 425: point = 531
   Insn 424: point = 533
   Insn 423: point = 534
   Insn 422: point = 536
   Insn 421: point = 537
   Insn 420: point = 539
   Insn 419: point = 540
   Insn 418: point = 542
   Insn 417: point = 543
   Insn 416: point = 545
   Insn 415: point = 547
   Insn 414: point = 549
   Insn 602: point = 551
	Hard reg 1 is preferable by r512 with profit 1
   Insn 413: point = 553
   Insn 601: point = 553
   Insn 412: point = 554
   Insn 600: point = 555
	   Creating copy r511->r543@1
   Insn 411: point = 557
   Insn 410: point = 559
   Insn 409: point = 561
   Insn 408: point = 562
   Insn 407: point = 564
   Insn 406: point = 566
   Insn 405: point = 568
   Insn 404: point = 569
   Insn 403: point = 571
   Insn 402: point = 572
   Insn 401: point = 574
   Insn 400: point = 576
   Insn 399: point = 578
   Insn 398: point = 579
   Insn 598: point = 580
	Hard reg 0 is preferable by r509 with profit 1
   Insn 397: point = 582
   Insn 629: point = 583
	   Creating copy r534<-r544@1
   Insn 597: point = 585
	Hard reg 0 is preferable by r509 with profit 1
	Hard reg 21 is preferable by r509 with profit 1
   Insn 396: point = 587
   Insn 395: point = 589
   Insn 394: point = 590
   Insn 393: point = 590
   Insn 392: point = 591
   Insn 391: point = 593
   Insn 390: point = 595
   Insn 389: point = 597
   Insn 388: point = 599
   Insn 387: point = 600
   Insn 386: point = 602
   Insn 385: point = 603
   Insn 384: point = 605
   Insn 383: point = 606
   Insn 382: point = 608
   Insn 381: point = 609
   Insn 380: point = 611
   Insn 379: point = 612
   Insn 378: point = 614
   Insn 377: point = 616
   Insn 376: point = 618
   Insn 596: point = 620
	Hard reg 1 is preferable by r508 with profit 1
   Insn 375: point = 622
   Insn 595: point = 622
   Insn 374: point = 623
   Insn 594: point = 624
	   Creating copy r507->r544@1
   Insn 373: point = 626
   Insn 372: point = 628
   Insn 371: point = 630
   Insn 370: point = 631
   Insn 369: point = 633
   Insn 368: point = 635
   Insn 367: point = 636
   Insn 366: point = 638
   Insn 365: point = 639
   Insn 364: point = 641
   Insn 363: point = 643
  BB 25
   Insn 519: point = 644
   Insn 616: point = 645
	Hard reg 0 is preferable by r521 with profit 1
   Insn 518: point = 647
   Insn 626: point = 648
	   Creating copy r531<-r545@1
   Insn 615: point = 650
	Hard reg 0 is preferable by r521 with profit 1
	Hard reg 21 is preferable by r521 with profit 1
   Insn 517: point = 652
   Insn 516: point = 654
   Insn 515: point = 655
   Insn 514: point = 655
   Insn 513: point = 656
   Insn 512: point = 658
   Insn 511: point = 660
   Insn 510: point = 662
   Insn 509: point = 664
   Insn 508: point = 665
   Insn 507: point = 667
   Insn 506: point = 668
   Insn 505: point = 670
   Insn 504: point = 671
   Insn 503: point = 673
   Insn 502: point = 674
   Insn 501: point = 676
   Insn 500: point = 677
   Insn 499: point = 679
   Insn 498: point = 681
   Insn 497: point = 683
   Insn 614: point = 685
	Hard reg 1 is preferable by r520 with profit 1
   Insn 496: point = 687
   Insn 613: point = 687
   Insn 495: point = 688
   Insn 612: point = 689
	   Creating copy r519->r545@1
   Insn 494: point = 691
   Insn 493: point = 693
   Insn 492: point = 695
   Insn 491: point = 696
   Insn 490: point = 698
   Insn 489: point = 700
   Insn 488: point = 702
   Insn 487: point = 703
   Insn 486: point = 705
   Insn 485: point = 706
   Insn 484: point = 708
   Insn 483: point = 710
   Insn 482: point = 712
   Insn 481: point = 713
   Insn 610: point = 714
	Hard reg 0 is preferable by r517 with profit 1
   Insn 480: point = 716
   Insn 627: point = 717
	   Creating copy r532<-r546@1
   Insn 609: point = 719
	Hard reg 0 is preferable by r517 with profit 1
	Hard reg 21 is preferable by r517 with profit 1
   Insn 479: point = 721
   Insn 478: point = 723
   Insn 477: point = 724
   Insn 476: point = 724
   Insn 475: point = 725
   Insn 474: point = 727
   Insn 473: point = 729
   Insn 472: point = 731
   Insn 471: point = 733
   Insn 470: point = 734
   Insn 469: point = 736
   Insn 468: point = 737
   Insn 467: point = 739
   Insn 466: point = 740
   Insn 465: point = 742
   Insn 464: point = 743
   Insn 463: point = 745
   Insn 462: point = 746
   Insn 461: point = 748
   Insn 460: point = 750
   Insn 459: point = 752
   Insn 608: point = 754
	Hard reg 1 is preferable by r516 with profit 1
   Insn 458: point = 756
   Insn 607: point = 756
   Insn 457: point = 757
   Insn 606: point = 758
	   Creating copy r515->r546@1
   Insn 456: point = 760
   Insn 455: point = 762
   Insn 454: point = 764
   Insn 453: point = 765
   Insn 452: point = 767
   Insn 451: point = 769
   Insn 450: point = 770
   Insn 449: point = 772
   Insn 448: point = 773
   Insn 447: point = 775
   Insn 446: point = 777
  BB 24
   Insn 444: point = 778
   Insn 443: point = 778
   Insn 442: point = 779
   Insn 441: point = 781
  BB 22
   Insn 361: point = 782
   Insn 360: point = 782
   Insn 359: point = 783
   Insn 358: point = 785
  BB 21
   Insn 356: point = 786
   Insn 355: point = 786
   Insn 354: point = 787
   Insn 353: point = 789
 r83: [225..231]
 r84: [227..228]
 r85: [223..226]
 r86: [215..217]
 r87: [206..207]
 r88: [202..203]
 r89: [198..199]
 r90: [196..197]
 r91: [194..195]
 r92: [191..193]
 r93: [189..190]
 r94: [183..184]
 r95: [181..182]
 r96: [178..180]
 r97: [176..177]
 r98: [170..171]
 r99: [168..169]
 r100: [166..167]
 r101: [164..165]
 r102: [161..163]
 r103: [131..160]
 r104: [156..157]
 r105: [151..155]
 r106: [145..146]
 r107: [143..144]
 r108: [141..142]
 r109: [138..140]
 r110: [136..137]
 r111: [133..135]
 r112: [131..132]
 r113: [129..130]
 r114: [124..126]
 r115: [120..121]
 r116: [116..117]
 r117: [114..115]
 r118: [110..111]
 r119: [108..109]
 r120: [106..107]
 r121: [103..105]
 r122: [101..102]
 r123: [95..96]
 r124: [93..94]
 r125: [90..92]
 r126: [88..89]
 r127: [34..83]
 r128: [79..80]
 r129: [77..78]
 r130: [75..76]
 r131: [73..74]
 r132: [70..72]
 r133: [40..69]
 r134: [65..66]
 r135: [60..64]
 r136: [54..55]
 r137: [52..53]
 r138: [50..51]
 r139: [47..49]
 r140: [45..46]
 r141: [42..44]
 r142: [40..41]
 r143: [38..39]
 r144: [34..35]
 r145: [26..31]
 r146: [22..23]
 r147: [20..21]
 r148: [506..507]
 r149: [502..503]
 r150: [364..365]
 r151: [361..363]
 r152: [305..360]
 r153: [356..357]
 r154: [353..355]
 r155: [351..352]
 r157: [337..338]
 r158: [334..336]
 r159: [334..335]
 r160: [331..333]
 r161: [331..332]
 r162: [328..330]
 r163: [325..327]
 r164: [318..324]
 r165: [320..321]
 r166: [318..319]
 r167: [316..317]
 r168: [314..315]
 r169: [312..313]
 r170: [305..306]
 r171: [301..302]
 r172: [299..300]
 r173: [296..298]
 r174: [238..295]
 r175: [291..292]
 r176: [289..290]
 r177: [286..288]
 r178: [284..285]
 r180: [270..271]
 r181: [267..269]
 r182: [267..268]
 r183: [264..266]
 r184: [264..265]
 r185: [261..263]
 r186: [258..260]
 r187: [251..257]
 r188: [253..254]
 r189: [251..252]
 r190: [249..250]
 r191: [247..248]
 r192: [245..246]
 r193: [238..239]
 r194: [498..499]
 r195: [494..495]
 r196: [491..493]
 r197: [435..490]
 r198: [486..487]
 r199: [483..485]
 r200: [481..482]
 r202: [467..468]
 r203: [464..466]
 r204: [464..465]
 r205: [461..463]
 r206: [461..462]
 r207: [458..460]
 r208: [455..457]
 r209: [448..454]
 r210: [450..451]
 r211: [448..449]
 r212: [446..447]
 r213: [444..445]
 r214: [442..443]
 r215: [435..436]
 r216: [431..432]
 r217: [429..430]
 r218: [426..428]
 r219: [368..425]
 r220: [421..422]
 r221: [419..420]
 r222: [416..418]
 r223: [414..415]
 r225: [400..401]
 r226: [397..399]
 r227: [397..398]
 r228: [394..396]
 r229: [394..395]
 r230: [391..393]
 r231: [388..390]
 r232: [381..387]
 r233: [383..384]
 r234: [381..382]
 r235: [379..380]
 r236: [377..378]
 r237: [375..376]
 r238: [368..369]
 r239: [16..17]
 r240: [10..15]
 r241: [6..7]
 r242: [4..5]
 r243: [786..787]
 r244: [782..783]
 r245: [640..641]
 r246: [637..639]
 r247: [579..636]
 r248: [632..633]
 r249: [629..631]
 r250: [627..628]
 r252: [613..614]
 r253: [610..612]
 r254: [610..611]
 r255: [607..609]
 r256: [607..608]
 r257: [604..606]
 r258: [601..603]
 r259: [592..600]
 r260: [596..597]
 r261: [594..595]
 r262: [592..593]
 r263: [590..591]
 r264: [588..589]
 r265: [586..587]
 r266: [579..580]
 r267: [575..576]
 r268: [573..574]
 r269: [570..572]
 r270: [510..569]
 r271: [565..566]
 r272: [563..564]
 r273: [560..562]
 r274: [558..559]
 r276: [544..545]
 r277: [541..543]
 r278: [541..542]
 r279: [538..540]
 r280: [538..539]
 r281: [535..537]
 r282: [532..534]
 r283: [523..531]
 r284: [527..528]
 r285: [525..526]
 r286: [523..524]
 r287: [521..522]
 r288: [519..520]
 r289: [517..518]
 r290: [510..511]
 r291: [778..779]
 r292: [774..775]
 r293: [771..773]
 r294: [713..770]
 r295: [766..767]
 r296: [763..765]
 r297: [761..762]
 r299: [747..748]
 r300: [744..746]
 r301: [744..745]
 r302: [741..743]
 r303: [741..742]
 r304: [738..740]
 r305: [735..737]
 r306: [726..734]
 r307: [730..731]
 r308: [728..729]
 r309: [726..727]
 r310: [724..725]
 r311: [722..723]
 r312: [720..721]
 r313: [713..714]
 r314: [709..710]
 r315: [707..708]
 r316: [704..706]
 r317: [644..703]
 r318: [699..700]
 r319: [697..698]
 r320: [694..696]
 r321: [692..693]
 r323: [678..679]
 r324: [675..677]
 r325: [675..676]
 r326: [672..674]
 r327: [672..673]
 r328: [669..671]
 r329: [666..668]
 r330: [657..665]
 r331: [661..662]
 r332: [659..660]
 r333: [657..658]
 r334: [655..656]
 r335: [653..654]
 r336: [651..652]
 r337: [644..645]
 r338: [2..3]
 r339: [0..1]
 r340: [236..237]
 r341: [234..235]
 r342: [232..233]
 r343: [229..230]
 r344: [220..221]
 r345: [218..219]
 r346: [210..211]
 r347: [213..216]
 r348: [208..209]
 r349: [204..205]
 r350: [200..201]
 r351: [191..192]
 r352: [187..188]
 r353: [185..186]
 r354: [178..179]
 r355: [174..175]
 r356: [172..173]
 r357: [161..162]
 r358: [158..159]
 r359: [151..152]
 r360: [149..150]
 r361: [147..148]
 r362: [138..139]
 r363: [133..134]
 r364: [124..125]
 r365: [122..123]
 r366: [118..119]
 r367: [112..113]
 r368: [103..104]
 r369: [99..100]
 r370: [97..98]
 r371: [90..91]
 r372: [86..87]
 r373: [84..85]
 r374: [81..82]
 r375: [70..71]
 r376: [67..68]
 r377: [60..61]
 r378: [58..59]
 r379: [56..57]
 r380: [47..48]
 r381: [42..43]
 r382: [32..33]
 r383: [29..30]
 r384: [26..27]
 r385: [508..509]
 r386: [504..505]
 r387: [366..367]
 r388: [361..362]
 r389: [358..359]
 r390: [353..354]
 r391: [343..347]
 r392: [343..344]
 r393: [341..342]
 r394: [339..340]
 r395: [328..329]
 r396: [325..326]
 r397: [322..323]
 r398: [303..304]
 r399: [296..297]
 r400: [293..294]
 r401: [286..287]
 r402: [276..280]
 r403: [276..277]
 r404: [274..275]
 r405: [272..273]
 r406: [261..262]
 r407: [258..259]
 r408: [255..256]
 r409: [500..501]
 r410: [496..497]
 r411: [491..492]
 r412: [488..489]
 r413: [483..484]
 r414: [473..477]
 r415: [473..474]
 r416: [471..472]
 r417: [469..470]
 r418: [458..459]
 r419: [455..456]
 r420: [452..453]
 r421: [433..434]
 r422: [426..427]
 r423: [423..424]
 r424: [416..417]
 r425: [406..410]
 r426: [406..407]
 r427: [404..405]
 r428: [402..403]
 r429: [391..392]
 r430: [388..389]
 r431: [385..386]
 r432: [24..25]
 r433: [18..19]
 r434: [13..14]
 r435: [10..11]
 r436: [788..789]
 r437: [784..785]
 r438: [642..643]
 r439: [637..638]
 r440: [634..635]
 r441: [629..630]
 r442: [619..623]
 r443: [619..620]
 r444: [617..618]
 r445: [615..616]
 r446: [604..605]
 r447: [601..602]
 r448: [598..599]
 r449: [577..578]
 r450: [570..571]
 r451: [567..568]
 r452: [560..561]
 r453: [550..554]
 r454: [550..551]
 r455: [548..549]
 r456: [546..547]
 r457: [535..536]
 r458: [532..533]
 r459: [529..530]
 r460: [780..781]
 r461: [776..777]
 r462: [771..772]
 r463: [768..769]
 r464: [763..764]
 r465: [753..757]
 r466: [753..754]
 r467: [751..752]
 r468: [749..750]
 r469: [738..739]
 r470: [735..736]
 r471: [732..733]
 r472: [711..712]
 r473: [704..705]
 r474: [701..702]
 r475: [694..695]
 r476: [684..688]
 r477: [684..685]
 r478: [682..683]
 r479: [680..681]
 r480: [669..670]
 r481: [666..667]
 r482: [663..664]
 r483: [8..9]
 r485: [222..224]
 r486: [212..214]
 r487: [153..154]
 r488: [127..128]
 r489: [62..63]
 r490: [36..37]
 r491: [349..350]
 r492: [345..346]
 r493: [307..311]
 r495: [282..283]
 r496: [278..279]
 r497: [240..244]
 r499: [479..480]
 r500: [475..476]
 r501: [437..441]
 r503: [412..413]
 r504: [408..409]
 r505: [370..374]
 r507: [625..626]
 r508: [621..622]
 r509: [581..585]
 r511: [556..557]
 r512: [552..553]
 r513: [512..516]
 r515: [759..760]
 r516: [755..756]
 r517: [715..719]
 r519: [690..691]
 r520: [686..687]
 r521: [646..650]
 r531: [647..648]
 r532: [716..717]
 r533: [513..514]
 r534: [582..583]
 r535: [371..372]
 r536: [438..439]
 r537: [241..242]
 r538: [308..309]
 r539: [243..281]
 r540: [310..348]
 r541: [373..411]
 r542: [440..478]
 r543: [515..555]
 r544: [584..624]
 r545: [649..689]
 r546: [718..758]
Compressing live ranges: from 790 to 678 - 85%
Ranges after the compression:
 r83: [202..207]
 r84: [204..205]
 r85: [200..203]
 r86: [194..195]
 r87: [186..187]
 r88: [182..183]
 r89: [178..179]
 r90: [176..177]
 r91: [174..175]
 r92: [172..173]
 r93: [170..171]
 r94: [164..165]
 r95: [162..163]
 r96: [160..161]
 r97: [158..159]
 r98: [152..153]
 r99: [150..151]
 r100: [148..149]
 r101: [146..147]
 r102: [144..145]
 r103: [118..143]
 r104: [140..141]
 r105: [136..139]
 r106: [130..131]
 r107: [128..129]
 r108: [126..127]
 r109: [124..125]
 r110: [122..123]
 r111: [120..121]
 r112: [118..119]
 r113: [116..117]
 r114: [112..113]
 r115: [108..109]
 r116: [104..105]
 r117: [102..103]
 r118: [98..99]
 r119: [96..97]
 r120: [94..95]
 r121: [92..93]
 r122: [90..91]
 r123: [84..85]
 r124: [82..83]
 r125: [80..81]
 r126: [78..79]
 r127: [30..73]
 r128: [70..71]
 r129: [68..69]
 r130: [66..67]
 r131: [64..65]
 r132: [62..63]
 r133: [36..61]
 r134: [58..59]
 r135: [54..57]
 r136: [48..49]
 r137: [46..47]
 r138: [44..45]
 r139: [42..43]
 r140: [40..41]
 r141: [38..39]
 r142: [36..37]
 r143: [34..35]
 r144: [30..31]
 r145: [24..27]
 r146: [20..21]
 r147: [18..19]
 r148: [438..439]
 r149: [434..435]
 r150: [318..319]
 r151: [316..317]
 r152: [270..315]
 r153: [312..313]
 r154: [310..311]
 r155: [308..309]
 r157: [296..297]
 r158: [294..295]
 r159: [294..295]
 r160: [292..293]
 r161: [292..293]
 r162: [290..291]
 r163: [288..289]
 r164: [282..287]
 r165: [284..285]
 r166: [282..283]
 r167: [280..281]
 r168: [278..279]
 r169: [276..277]
 r170: [270..271]
 r171: [266..267]
 r172: [264..265]
 r173: [262..263]
 r174: [214..261]
 r175: [258..259]
 r176: [256..257]
 r177: [254..255]
 r178: [252..253]
 r180: [240..241]
 r181: [238..239]
 r182: [238..239]
 r183: [236..237]
 r184: [236..237]
 r185: [234..235]
 r186: [232..233]
 r187: [226..231]
 r188: [228..229]
 r189: [226..227]
 r190: [224..225]
 r191: [222..223]
 r192: [220..221]
 r193: [214..215]
 r194: [430..431]
 r195: [426..427]
 r196: [424..425]
 r197: [378..423]
 r198: [420..421]
 r199: [418..419]
 r200: [416..417]
 r202: [404..405]
 r203: [402..403]
 r204: [402..403]
 r205: [400..401]
 r206: [400..401]
 r207: [398..399]
 r208: [396..397]
 r209: [390..395]
 r210: [392..393]
 r211: [390..391]
 r212: [388..389]
 r213: [386..387]
 r214: [384..385]
 r215: [378..379]
 r216: [374..375]
 r217: [372..373]
 r218: [370..371]
 r219: [322..369]
 r220: [366..367]
 r221: [364..365]
 r222: [362..363]
 r223: [360..361]
 r225: [348..349]
 r226: [346..347]
 r227: [346..347]
 r228: [344..345]
 r229: [344..345]
 r230: [342..343]
 r231: [340..341]
 r232: [334..339]
 r233: [336..337]
 r234: [334..335]
 r235: [332..333]
 r236: [330..331]
 r237: [328..329]
 r238: [322..323]
 r239: [14..15]
 r240: [10..13]
 r241: [6..7]
 r242: [4..5]
 r243: [674..675]
 r244: [670..671]
 r245: [550..551]
 r246: [548..549]
 r247: [500..547]
 r248: [544..545]
 r249: [542..543]
 r250: [540..541]
 r252: [528..529]
 r253: [526..527]
 r254: [526..527]
 r255: [524..525]
 r256: [524..525]
 r257: [522..523]
 r258: [520..521]
 r259: [512..519]
 r260: [516..517]
 r261: [514..515]
 r262: [512..513]
 r263: [510..511]
 r264: [508..509]
 r265: [506..507]
 r266: [500..501]
 r267: [496..497]
 r268: [494..495]
 r269: [492..493]
 r270: [442..491]
 r271: [488..489]
 r272: [486..487]
 r273: [484..485]
 r274: [482..483]
 r276: [470..471]
 r277: [468..469]
 r278: [468..469]
 r279: [466..467]
 r280: [466..467]
 r281: [464..465]
 r282: [462..463]
 r283: [454..461]
 r284: [458..459]
 r285: [456..457]
 r286: [454..455]
 r287: [452..453]
 r288: [450..451]
 r289: [448..449]
 r290: [442..443]
 r291: [666..667]
 r292: [662..663]
 r293: [660..661]
 r294: [612..659]
 r295: [656..657]
 r296: [654..655]
 r297: [652..653]
 r299: [640..641]
 r300: [638..639]
 r301: [638..639]
 r302: [636..637]
 r303: [636..637]
 r304: [634..635]
 r305: [632..633]
 r306: [624..631]
 r307: [628..629]
 r308: [626..627]
 r309: [624..625]
 r310: [622..623]
 r311: [620..621]
 r312: [618..619]
 r313: [612..613]
 r314: [608..609]
 r315: [606..607]
 r316: [604..605]
 r317: [554..603]
 r318: [600..601]
 r319: [598..599]
 r320: [596..597]
 r321: [594..595]
 r323: [582..583]
 r324: [580..581]
 r325: [580..581]
 r326: [578..579]
 r327: [578..579]
 r328: [576..577]
 r329: [574..575]
 r330: [566..573]
 r331: [570..571]
 r332: [568..569]
 r333: [566..567]
 r334: [564..565]
 r335: [562..563]
 r336: [560..561]
 r337: [554..555]
 r338: [2..3]
 r339: [0..1]
 r340: [212..213]
 r341: [210..211]
 r342: [208..209]
 r343: [206..207]
 r344: [198..199]
 r345: [196..197]
 r346: [190..191]
 r347: [192..195]
 r348: [188..189]
 r349: [184..185]
 r350: [180..181]
 r351: [172..173]
 r352: [168..169]
 r353: [166..167]
 r354: [160..161]
 r355: [156..157]
 r356: [154..155]
 r357: [144..145]
 r358: [142..143]
 r359: [136..137]
 r360: [134..135]
 r361: [132..133]
 r362: [124..125]
 r363: [120..121]
 r364: [112..113]
 r365: [110..111]
 r366: [106..107]
 r367: [100..101]
 r368: [92..93]
 r369: [88..89]
 r370: [86..87]
 r371: [80..81]
 r372: [76..77]
 r373: [74..75]
 r374: [72..73]
 r375: [62..63]
 r376: [60..61]
 r377: [54..55]
 r378: [52..53]
 r379: [50..51]
 r380: [42..43]
 r381: [38..39]
 r382: [28..29]
 r383: [26..27]
 r384: [24..25]
 r385: [440..441]
 r386: [436..437]
 r387: [320..321]
 r388: [316..317]
 r389: [314..315]
 r390: [310..311]
 r391: [302..305]
 r392: [302..303]
 r393: [300..301]
 r394: [298..299]
 r395: [290..291]
 r396: [288..289]
 r397: [286..287]
 r398: [268..269]
 r399: [262..263]
 r400: [260..261]
 r401: [254..255]
 r402: [246..249]
 r403: [246..247]
 r404: [244..245]
 r405: [242..243]
 r406: [234..235]
 r407: [232..233]
 r408: [230..231]
 r409: [432..433]
 r410: [428..429]
 r411: [424..425]
 r412: [422..423]
 r413: [418..419]
 r414: [410..413]
 r415: [410..411]
 r416: [408..409]
 r417: [406..407]
 r418: [398..399]
 r419: [396..397]
 r420: [394..395]
 r421: [376..377]
 r422: [370..371]
 r423: [368..369]
 r424: [362..363]
 r425: [354..357]
 r426: [354..355]
 r427: [352..353]
 r428: [350..351]
 r429: [342..343]
 r430: [340..341]
 r431: [338..339]
 r432: [22..23]
 r433: [16..17]
 r434: [12..13]
 r435: [10..11]
 r436: [676..677]
 r437: [672..673]
 r438: [552..553]
 r439: [548..549]
 r440: [546..547]
 r441: [542..543]
 r442: [534..537]
 r443: [534..535]
 r444: [532..533]
 r445: [530..531]
 r446: [522..523]
 r447: [520..521]
 r448: [518..519]
 r449: [498..499]
 r450: [492..493]
 r451: [490..491]
 r452: [484..485]
 r453: [476..479]
 r454: [476..477]
 r455: [474..475]
 r456: [472..473]
 r457: [464..465]
 r458: [462..463]
 r459: [460..461]
 r460: [668..669]
 r461: [664..665]
 r462: [660..661]
 r463: [658..659]
 r464: [654..655]
 r465: [646..649]
 r466: [646..647]
 r467: [644..645]
 r468: [642..643]
 r469: [634..635]
 r470: [632..633]
 r471: [630..631]
 r472: [610..611]
 r473: [604..605]
 r474: [602..603]
 r475: [596..597]
 r476: [588..591]
 r477: [588..589]
 r478: [586..587]
 r479: [584..585]
 r480: [576..577]
 r481: [574..575]
 r482: [572..573]
 r483: [8..9]
 r485: [200..201]
 r486: [192..193]
 r487: [138..139]
 r488: [114..115]
 r489: [56..57]
 r490: [32..33]
 r491: [306..307]
 r492: [304..305]
 r493: [272..275]
 r495: [250..251]
 r496: [248..249]
 r497: [216..219]
 r499: [414..415]
 r500: [412..413]
 r501: [380..383]
 r503: [358..359]
 r504: [356..357]
 r505: [324..327]
 r507: [538..539]
 r508: [536..537]
 r509: [502..505]
 r511: [480..481]
 r512: [478..479]
 r513: [444..447]
 r515: [650..651]
 r516: [648..649]
 r517: [614..617]
 r519: [592..593]
 r520: [590..591]
 r521: [556..559]
 r531: [556..557]
 r532: [614..615]
 r533: [444..445]
 r534: [502..503]
 r535: [324..325]
 r536: [380..381]
 r537: [216..217]
 r538: [272..273]
 r539: [218..249]
 r540: [274..305]
 r541: [326..357]
 r542: [382..413]
 r543: [446..479]
 r544: [504..537]
 r545: [558..591]
 r546: [616..649]

********** Assignment #2: **********

	 Assigning to 531 (cl=SSE_REGS, orig=322, freq=2, tfirst=531, tfreq=2)...
	   Assign 24 to optional reload r531 (freq=2)
	Hard reg 24 is preferable by r545 with profit 1
	 Assigning to 545 (cl=ALL_SSE_REGS, orig=322, freq=2, tfirst=531, tfreq=2)...
	 Assigning to 532 (cl=SSE_REGS, orig=298, freq=2, tfirst=532, tfreq=2)...
	   Assign 25 to optional reload r532 (freq=2)
	Hard reg 25 is preferable by r546 with profit 1
	 Assigning to 546 (cl=ALL_SSE_REGS, orig=298, freq=2, tfirst=532, tfreq=2)...
	 Assigning to 533 (cl=SSE_REGS, orig=275, freq=2, tfirst=533, tfreq=2)...
	   Assign 26 to optional reload r533 (freq=2)
	Hard reg 26 is preferable by r543 with profit 1
	 Assigning to 543 (cl=ALL_SSE_REGS, orig=275, freq=2, tfirst=533, tfreq=2)...
	 Assigning to 534 (cl=SSE_REGS, orig=251, freq=2, tfirst=534, tfreq=2)...
	   Assign 27 to optional reload r534 (freq=2)
	Hard reg 27 is preferable by r544 with profit 1
	 Assigning to 544 (cl=ALL_SSE_REGS, orig=251, freq=2, tfirst=534, tfreq=2)...
	 Assigning to 535 (cl=SSE_REGS, orig=224, freq=2, tfirst=535, tfreq=2)...
	   Assign 28 to optional reload r535 (freq=2)
	Hard reg 28 is preferable by r541 with profit 1
	 Assigning to 541 (cl=ALL_SSE_REGS, orig=224, freq=2, tfirst=535, tfreq=2)...
	 Assigning to 536 (cl=SSE_REGS, orig=201, freq=2, tfirst=536, tfreq=2)...
	   Assign 24 to optional reload r536 (freq=2)
	Hard reg 24 is preferable by r542 with profit 1
	 Assigning to 542 (cl=ALL_SSE_REGS, orig=201, freq=2, tfirst=536, tfreq=2)...
	 Assigning to 537 (cl=SSE_REGS, orig=179, freq=2, tfirst=537, tfreq=2)...
	   Assign 25 to optional reload r537 (freq=2)
	Hard reg 25 is preferable by r539 with profit 1
	 Assigning to 539 (cl=ALL_SSE_REGS, orig=179, freq=2, tfirst=537, tfreq=2)...
	 Assigning to 538 (cl=SSE_REGS, orig=156, freq=2, tfirst=538, tfreq=2)...
	   Assign 26 to optional reload r538 (freq=2)
	Hard reg 26 is preferable by r540 with profit 1
	 Assigning to 540 (cl=ALL_SSE_REGS, orig=156, freq=2, tfirst=538, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  632: r537:SF=r179:SF
      REG_DEAD r179:SF
   Insn after restoring regs:
  576: r179:SF=r495:SF
      REG_DEAD r495:SF
   Insn after restoring regs:
  633: r538:SF=r156:SF
      REG_DEAD r156:SF
   Insn after restoring regs:
  570: r156:SF=r491:SF
      REG_DEAD r491:SF
   Insn after restoring regs:
  630: r535:SF=r224:SF
      REG_DEAD r224:SF
   Insn after restoring regs:
  588: r224:SF=r503:SF
      REG_DEAD r503:SF
   Insn after restoring regs:
  631: r536:SF=r201:SF
      REG_DEAD r201:SF
   Insn after restoring regs:
  582: r201:SF=r499:SF
      REG_DEAD r499:SF
   Insn after restoring regs:
  628: r533:SF=r275:SF
      REG_DEAD r275:SF
   Insn after restoring regs:
  600: r275:SF=r511:SF
      REG_DEAD r511:SF
   Insn after restoring regs:
  629: r534:SF=r251:SF
      REG_DEAD r251:SF
   Insn after restoring regs:
  594: r251:SF=r507:SF
      REG_DEAD r507:SF
   Insn after restoring regs:
  626: r531:SF=r322:SF
      REG_DEAD r322:SF
   Insn after restoring regs:
  612: r322:SF=r519:SF
      REG_DEAD r519:SF
   Insn after restoring regs:
  627: r532:SF=r298:SF
      REG_DEAD r298:SF
   Insn after restoring regs:
  606: r298:SF=r515:SF
      REG_DEAD r515:SF
Keep optional reload reg 494
Keep optional reload reg 498
Keep optional reload reg 502
Keep optional reload reg 506
Keep optional reload reg 510
Keep optional reload reg 514
Keep optional reload reg 518
Keep optional reload reg 522
Remove optional reload reg 531
  Restoring original insn:
  518: r521:SF=r521:SF*r322:SF
      REG_DEAD r322:SF
  Deleting move 626
  626: r531:SF=r322:SF
      REG_DEAD r322:SF
deleting insn with uid = 626.
Remove optional reload reg 532
  Restoring original insn:
  480: r517:SF=r517:SF*r298:SF
      REG_DEAD r298:SF
  Deleting move 627
  627: r532:SF=r298:SF
      REG_DEAD r298:SF
deleting insn with uid = 627.
Remove optional reload reg 533
  Restoring original insn:
  435: r513:SF=r513:SF*r275:SF
      REG_DEAD r275:SF
  Deleting move 628
  628: r533:SF=r275:SF
      REG_DEAD r275:SF
deleting insn with uid = 628.
Remove optional reload reg 534
  Restoring original insn:
  397: r509:SF=r509:SF*r251:SF
      REG_DEAD r251:SF
  Deleting move 629
  629: r534:SF=r251:SF
      REG_DEAD r251:SF
deleting insn with uid = 629.
Remove optional reload reg 535
  Restoring original insn:
  321: r505:SF=r505:SF*r224:SF
      REG_DEAD r224:SF
  Deleting move 630
  630: r535:SF=r224:SF
      REG_DEAD r224:SF
deleting insn with uid = 630.
Remove optional reload reg 536
  Restoring original insn:
  284: r501:SF=r501:SF*r201:SF
      REG_DEAD r201:SF
  Deleting move 631
  631: r536:SF=r201:SF
      REG_DEAD r201:SF
deleting insn with uid = 631.
Remove optional reload reg 537
  Restoring original insn:
  240: r497:SF=r497:SF*r179:SF
      REG_DEAD r179:SF
  Deleting move 632
  632: r537:SF=r179:SF
      REG_DEAD r179:SF
deleting insn with uid = 632.
Remove optional reload reg 538
  Restoring original insn:
  203: r493:SF=r493:SF*r156:SF
      REG_DEAD r156:SF
  Deleting move 633
  633: r538:SF=r156:SF
      REG_DEAD r156:SF
deleting insn with uid = 633.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 518:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 480:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 435:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 397:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 321:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 240:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 203:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 28
   Insn 541: point = 0
   Insn 540: point = 0
   Insn 536: point = 1
   Insn 533: point = 3
  BB 27
   Insn 530: point = 4
   Insn 529: point = 4
   Insn 527: point = 5
   Insn 526: point = 7
   Insn 525: point = 9
  BB 20
   Insn 555: point = 10
   Insn 349: point = 10
  BB 19
   Insn 344: point = 10
   Insn 343: point = 10
   Insn 342: point = 11
  BB 18
   Insn 341: point = 13
   Insn 340: point = 13
   Insn 339: point = 14
   Insn 338: point = 15
   Insn 337: point = 17
   Insn 336: point = 19
  BB 17
   Insn 333: point = 20
   Insn 332: point = 20
   Insn 330: point = 21
   Insn 329: point = 23
   Insn 328: point = 25
  BB 10
   Insn 551: point = 26
   Insn 156: point = 26
  BB 9
   Insn 151: point = 26
   Insn 150: point = 26
   Insn 149: point = 27
  BB 8
   Insn 148: point = 29
   Insn 147: point = 29
   Insn 146: point = 30
   Insn 145: point = 31
   Insn 144: point = 33
  BB 7
   Insn 141: point = 34
   Insn 569: point = 35
   Insn 140: point = 37
   Insn 139: point = 39
   Insn 138: point = 41
   Insn 137: point = 43
   Insn 136: point = 44
   Insn 135: point = 46
   Insn 134: point = 48
   Insn 133: point = 49
   Insn 132: point = 51
   Insn 131: point = 53
   Insn 130: point = 55
   Insn 129: point = 57
   Insn 128: point = 59
   Insn 568: point = 61
   Insn 127: point = 63
   Insn 567: point = 63
   Insn 126: point = 64
   Insn 125: point = 66
   Insn 124: point = 68
   Insn 123: point = 69
   Insn 122: point = 71
   Insn 121: point = 72
   Insn 120: point = 74
   Insn 119: point = 76
   Insn 118: point = 77
   Insn 117: point = 77
   Insn 116: point = 78
   Insn 115: point = 80
   Insn 114: point = 82
   Insn 113: point = 83
   Insn 112: point = 85
   Insn 111: point = 86
   Insn 110: point = 87
   Insn 109: point = 89
   Insn 108: point = 91
   Insn 107: point = 92
   Insn 106: point = 94
   Insn 105: point = 96
   Insn 104: point = 98
   Insn 103: point = 99
   Insn 102: point = 100
   Insn 101: point = 102
   Insn 100: point = 104
   Insn 99: point = 105
   Insn 98: point = 107
   Insn 97: point = 109
   Insn 96: point = 111
   Insn 95: point = 113
  BB 6
   Insn 93: point = 114
   Insn 92: point = 114
   Insn 91: point = 115
   Insn 90: point = 117
   Insn 89: point = 119
  BB 5
   Insn 87: point = 120
   Insn 86: point = 120
   Insn 85: point = 121
   Insn 84: point = 123
  BB 4
   Insn 81: point = 124
   Insn 80: point = 125
   Insn 566: point = 126
   Insn 79: point = 128
   Insn 78: point = 130
   Insn 77: point = 132
   Insn 76: point = 134
   Insn 75: point = 135
   Insn 74: point = 137
   Insn 73: point = 139
   Insn 72: point = 140
   Insn 71: point = 142
   Insn 70: point = 144
   Insn 69: point = 146
   Insn 68: point = 148
   Insn 67: point = 150
   Insn 565: point = 152
   Insn 66: point = 154
   Insn 564: point = 154
   Insn 65: point = 155
   Insn 64: point = 157
   Insn 63: point = 159
   Insn 62: point = 160
   Insn 61: point = 162
   Insn 60: point = 163
   Insn 59: point = 165
   Insn 58: point = 167
   Insn 57: point = 168
   Insn 56: point = 168
   Insn 55: point = 169
   Insn 54: point = 171
   Insn 53: point = 173
   Insn 52: point = 174
   Insn 51: point = 175
   Insn 50: point = 177
   Insn 49: point = 179
   Insn 48: point = 180
   Insn 47: point = 182
   Insn 46: point = 184
   Insn 45: point = 186
   Insn 44: point = 187
   Insn 43: point = 188
   Insn 42: point = 190
   Insn 41: point = 192
   Insn 40: point = 193
   Insn 39: point = 195
   Insn 38: point = 197
   Insn 37: point = 199
   Insn 36: point = 201
  BB 3
   Insn 34: point = 202
   Insn 33: point = 202
   Insn 32: point = 203
   Insn 31: point = 205
  BB 2
   Insn 29: point = 206
   Insn 28: point = 206
   Insn 27: point = 207
   Insn 26: point = 209
   Insn 25: point = 210
   Insn 563: point = 211
   Insn 24: point = 213
   Insn 562: point = 214
   Insn 23: point = 216
   Insn 22: point = 217
   Insn 21: point = 219
   Insn 20: point = 220
   Insn 561: point = 221
   Insn 19: point = 223
   Insn 560: point = 224
   Insn 18: point = 226
   Insn 17: point = 228
   Insn 16: point = 230
   Insn 15: point = 231
   Insn 14: point = 233
   Insn 13: point = 234
   Insn 12: point = 235
   Insn 11: point = 236
   Insn 10: point = 237
   Insn 9: point = 238
   Insn 5: point = 238
   Insn 4: point = 238
   Insn 3: point = 238
   Insn 2: point = 238
  BB 16
   Insn 325: point = 238
  BB 13
   Insn 553: point = 238
   Insn 241: point = 238
   Insn 580: point = 239
   Insn 240: point = 241
   Insn 579: point = 242
   Insn 239: point = 244
   Insn 238: point = 246
   Insn 237: point = 247
   Insn 236: point = 247
   Insn 235: point = 248
   Insn 234: point = 250
   Insn 233: point = 252
   Insn 232: point = 254
   Insn 231: point = 255
   Insn 230: point = 257
   Insn 229: point = 258
   Insn 228: point = 260
   Insn 227: point = 261
   Insn 226: point = 263
   Insn 225: point = 264
   Insn 224: point = 266
   Insn 223: point = 267
   Insn 222: point = 269
   Insn 221: point = 271
   Insn 220: point = 273
   Insn 578: point = 275
   Insn 219: point = 277
   Insn 577: point = 277
   Insn 218: point = 278
   Insn 576: point = 279
   Insn 217: point = 281
   Insn 216: point = 283
   Insn 215: point = 285
   Insn 214: point = 286
   Insn 213: point = 288
   Insn 212: point = 290
   Insn 211: point = 292
   Insn 210: point = 293
   Insn 209: point = 295
   Insn 208: point = 296
   Insn 207: point = 298
   Insn 206: point = 300
   Insn 205: point = 302
   Insn 204: point = 303
   Insn 574: point = 304
   Insn 203: point = 306
   Insn 573: point = 307
   Insn 202: point = 309
   Insn 201: point = 311
   Insn 200: point = 312
   Insn 199: point = 312
   Insn 198: point = 313
   Insn 197: point = 315
   Insn 196: point = 317
   Insn 195: point = 319
   Insn 194: point = 320
   Insn 193: point = 322
   Insn 192: point = 323
   Insn 191: point = 325
   Insn 190: point = 326
   Insn 189: point = 328
   Insn 188: point = 329
   Insn 187: point = 331
   Insn 186: point = 332
   Insn 185: point = 334
   Insn 184: point = 336
   Insn 183: point = 338
   Insn 572: point = 340
   Insn 182: point = 342
   Insn 571: point = 342
   Insn 181: point = 343
   Insn 570: point = 344
   Insn 180: point = 346
   Insn 179: point = 348
   Insn 178: point = 350
   Insn 177: point = 351
   Insn 176: point = 353
   Insn 175: point = 355
   Insn 174: point = 356
   Insn 173: point = 358
   Insn 172: point = 359
   Insn 171: point = 361
   Insn 170: point = 363
  BB 15
   Insn 322: point = 364
   Insn 592: point = 365
   Insn 321: point = 367
   Insn 591: point = 368
   Insn 320: point = 370
   Insn 319: point = 372
   Insn 318: point = 373
   Insn 317: point = 373
   Insn 316: point = 374
   Insn 315: point = 376
   Insn 314: point = 378
   Insn 313: point = 380
   Insn 312: point = 381
   Insn 311: point = 383
   Insn 310: point = 384
   Insn 309: point = 386
   Insn 308: point = 387
   Insn 307: point = 389
   Insn 306: point = 390
   Insn 305: point = 392
   Insn 304: point = 393
   Insn 303: point = 395
   Insn 302: point = 397
   Insn 301: point = 399
   Insn 590: point = 401
   Insn 300: point = 403
   Insn 589: point = 403
   Insn 299: point = 404
   Insn 588: point = 405
   Insn 298: point = 407
   Insn 297: point = 409
   Insn 296: point = 411
   Insn 295: point = 412
   Insn 294: point = 414
   Insn 293: point = 416
   Insn 292: point = 418
   Insn 291: point = 419
   Insn 290: point = 421
   Insn 289: point = 422
   Insn 288: point = 424
   Insn 287: point = 426
   Insn 286: point = 428
   Insn 285: point = 429
   Insn 586: point = 430
   Insn 284: point = 432
   Insn 585: point = 433
   Insn 283: point = 435
   Insn 282: point = 437
   Insn 281: point = 438
   Insn 280: point = 438
   Insn 279: point = 439
   Insn 278: point = 441
   Insn 277: point = 443
   Insn 276: point = 445
   Insn 275: point = 446
   Insn 274: point = 448
   Insn 273: point = 449
   Insn 272: point = 451
   Insn 271: point = 452
   Insn 270: point = 454
   Insn 269: point = 455
   Insn 268: point = 457
   Insn 267: point = 458
   Insn 266: point = 460
   Insn 265: point = 462
   Insn 264: point = 464
   Insn 584: point = 466
   Insn 263: point = 468
   Insn 583: point = 468
   Insn 262: point = 469
   Insn 582: point = 470
   Insn 261: point = 472
   Insn 260: point = 474
   Insn 259: point = 476
   Insn 258: point = 477
   Insn 257: point = 479
   Insn 256: point = 481
   Insn 255: point = 482
   Insn 254: point = 484
   Insn 253: point = 485
   Insn 252: point = 487
   Insn 251: point = 489
  BB 14
   Insn 249: point = 490
   Insn 248: point = 490
   Insn 247: point = 491
   Insn 246: point = 493
  BB 12
   Insn 168: point = 494
   Insn 167: point = 494
   Insn 166: point = 495
   Insn 165: point = 497
  BB 11
   Insn 163: point = 498
   Insn 162: point = 498
   Insn 161: point = 499
   Insn 160: point = 501
  BB 26
   Insn 522: point = 502
  BB 23
   Insn 557: point = 502
   Insn 436: point = 502
   Insn 604: point = 503
   Insn 435: point = 505
   Insn 603: point = 506
   Insn 434: point = 508
   Insn 433: point = 510
   Insn 432: point = 511
   Insn 431: point = 511
   Insn 430: point = 512
   Insn 429: point = 514
   Insn 428: point = 516
   Insn 427: point = 518
   Insn 426: point = 520
   Insn 425: point = 521
   Insn 424: point = 523
   Insn 423: point = 524
   Insn 422: point = 526
   Insn 421: point = 527
   Insn 420: point = 529
   Insn 419: point = 530
   Insn 418: point = 532
   Insn 417: point = 533
   Insn 416: point = 535
   Insn 415: point = 537
   Insn 414: point = 539
   Insn 602: point = 541
   Insn 413: point = 543
   Insn 601: point = 543
   Insn 412: point = 544
   Insn 600: point = 545
   Insn 411: point = 547
   Insn 410: point = 549
   Insn 409: point = 551
   Insn 408: point = 552
   Insn 407: point = 554
   Insn 406: point = 556
   Insn 405: point = 558
   Insn 404: point = 559
   Insn 403: point = 561
   Insn 402: point = 562
   Insn 401: point = 564
   Insn 400: point = 566
   Insn 399: point = 568
   Insn 398: point = 569
   Insn 598: point = 570
   Insn 397: point = 572
   Insn 597: point = 573
   Insn 396: point = 575
   Insn 395: point = 577
   Insn 394: point = 578
   Insn 393: point = 578
   Insn 392: point = 579
   Insn 391: point = 581
   Insn 390: point = 583
   Insn 389: point = 585
   Insn 388: point = 587
   Insn 387: point = 588
   Insn 386: point = 590
   Insn 385: point = 591
   Insn 384: point = 593
   Insn 383: point = 594
   Insn 382: point = 596
   Insn 381: point = 597
   Insn 380: point = 599
   Insn 379: point = 600
   Insn 378: point = 602
   Insn 377: point = 604
   Insn 376: point = 606
   Insn 596: point = 608
   Insn 375: point = 610
   Insn 595: point = 610
   Insn 374: point = 611
   Insn 594: point = 612
   Insn 373: point = 614
   Insn 372: point = 616
   Insn 371: point = 618
   Insn 370: point = 619
   Insn 369: point = 621
   Insn 368: point = 623
   Insn 367: point = 624
   Insn 366: point = 626
   Insn 365: point = 627
   Insn 364: point = 629
   Insn 363: point = 631
  BB 25
   Insn 519: point = 632
   Insn 616: point = 633
   Insn 518: point = 635
   Insn 615: point = 636
   Insn 517: point = 638
   Insn 516: point = 640
   Insn 515: point = 641
   Insn 514: point = 641
   Insn 513: point = 642
   Insn 512: point = 644
   Insn 511: point = 646
   Insn 510: point = 648
   Insn 509: point = 650
   Insn 508: point = 651
   Insn 507: point = 653
   Insn 506: point = 654
   Insn 505: point = 656
   Insn 504: point = 657
   Insn 503: point = 659
   Insn 502: point = 660
   Insn 501: point = 662
   Insn 500: point = 663
   Insn 499: point = 665
   Insn 498: point = 667
   Insn 497: point = 669
   Insn 614: point = 671
   Insn 496: point = 673
   Insn 613: point = 673
   Insn 495: point = 674
   Insn 612: point = 675
   Insn 494: point = 677
   Insn 493: point = 679
   Insn 492: point = 681
   Insn 491: point = 682
   Insn 490: point = 684
   Insn 489: point = 686
   Insn 488: point = 688
   Insn 487: point = 689
   Insn 486: point = 691
   Insn 485: point = 692
   Insn 484: point = 694
   Insn 483: point = 696
   Insn 482: point = 698
   Insn 481: point = 699
   Insn 610: point = 700
   Insn 480: point = 702
   Insn 609: point = 703
   Insn 479: point = 705
   Insn 478: point = 707
   Insn 477: point = 708
   Insn 476: point = 708
   Insn 475: point = 709
   Insn 474: point = 711
   Insn 473: point = 713
   Insn 472: point = 715
   Insn 471: point = 717
   Insn 470: point = 718
   Insn 469: point = 720
   Insn 468: point = 721
   Insn 467: point = 723
   Insn 466: point = 724
   Insn 465: point = 726
   Insn 464: point = 727
   Insn 463: point = 729
   Insn 462: point = 730
   Insn 461: point = 732
   Insn 460: point = 734
   Insn 459: point = 736
   Insn 608: point = 738
   Insn 458: point = 740
   Insn 607: point = 740
   Insn 457: point = 741
   Insn 606: point = 742
   Insn 456: point = 744
   Insn 455: point = 746
   Insn 454: point = 748
   Insn 453: point = 749
   Insn 452: point = 751
   Insn 451: point = 753
   Insn 450: point = 754
   Insn 449: point = 756
   Insn 448: point = 757
   Insn 447: point = 759
   Insn 446: point = 761
  BB 24
   Insn 444: point = 762
   Insn 443: point = 762
   Insn 442: point = 763
   Insn 441: point = 765
  BB 22
   Insn 361: point = 766
   Insn 360: point = 766
   Insn 359: point = 767
   Insn 358: point = 769
  BB 21
   Insn 356: point = 770
   Insn 355: point = 770
   Insn 354: point = 771
   Insn 353: point = 773
 r156: [306..344]
 r179: [241..279]
 r201: [432..470]
 r224: [367..405]
 r251: [572..612]
 r275: [505..545]
 r298: [702..742]
 r322: [635..675]
Compressing live ranges: from 774 to 16 - 2%
Ranges after the compression:
 r156: [2..3]
 r179: [0..1]
 r201: [6..7]
 r224: [4..5]
 r251: [10..11]
 r275: [8..9]
 r298: [14..15]
 r322: [12..13]
  Slot 0 regnos (width = 4):	 156	 322	 298	 275	 251	 224	 201	 179
Changing spilled pseudos to memory in insn #570
Changing spilled pseudos to memory in insn #203
Changing spilled pseudos to memory in insn #576
Changing spilled pseudos to memory in insn #240
Changing spilled pseudos to memory in insn #582
Changing spilled pseudos to memory in insn #284
Changing spilled pseudos to memory in insn #588
Changing spilled pseudos to memory in insn #321
Changing spilled pseudos to memory in insn #594
Changing spilled pseudos to memory in insn #397
Changing spilled pseudos to memory in insn #600
Changing spilled pseudos to memory in insn #435
Changing spilled pseudos to memory in insn #606
Changing spilled pseudos to memory in insn #480
Changing spilled pseudos to memory in insn #612
Changing spilled pseudos to memory in insn #518
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #518
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #612
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 612:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #480
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #606
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 606:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #435
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #600
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 600:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #397
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #594
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 594:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #321
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #588
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 588:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #284
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #582
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 582:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #240
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #576
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 576:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #203
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #570
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 570:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 62
changing reg in insn 78
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 85
changing reg in insn 86
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 141
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 123
changing reg in insn 123
changing reg in insn 139
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 145
changing reg in insn 150
changing reg in insn 147
changing reg in insn 329
changing reg in insn 330
changing reg in insn 330
changing reg in insn 332
changing reg in insn 161
changing reg in insn 162
changing reg in insn 166
changing reg in insn 167
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 174
changing reg in insn 174
changing reg in insn 174
changing reg in insn 204
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 188
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 192
changing reg in insn 192
changing reg in insn 192
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 210
changing reg in insn 210
changing reg in insn 210
changing reg in insn 241
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 216
changing reg in insn 217
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 225
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 229
changing reg in insn 229
changing reg in insn 229
changing reg in insn 231
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 241
changing reg in insn 247
changing reg in insn 248
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 255
changing reg in insn 255
changing reg in insn 255
changing reg in insn 285
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 269
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 271
changing reg in insn 273
changing reg in insn 273
changing reg in insn 273
changing reg in insn 275
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 279
changing reg in insn 280
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 285
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 291
changing reg in insn 291
changing reg in insn 291
changing reg in insn 322
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 295
changing reg in insn 295
changing reg in insn 297
changing reg in insn 297
changing reg in insn 298
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 306
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 308
changing reg in insn 310
changing reg in insn 310
changing reg in insn 310
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 316
changing reg in insn 317
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 322
changing reg in insn 337
changing reg in insn 338
changing reg in insn 338
changing reg in insn 343
changing reg in insn 340
changing reg in insn 526
changing reg in insn 527
changing reg in insn 527
changing reg in insn 529
changing reg in insn 354
changing reg in insn 355
changing reg in insn 359
changing reg in insn 360
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 367
changing reg in insn 367
changing reg in insn 367
changing reg in insn 398
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 381
changing reg in insn 380
changing reg in insn 381
changing reg in insn 381
changing reg in insn 382
changing reg in insn 383
changing reg in insn 385
changing reg in insn 385
changing reg in insn 385
changing reg in insn 387
changing reg in insn 389
changing reg in insn 390
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 392
changing reg in insn 393
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 398
changing reg in insn 400
changing reg in insn 401
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 404
changing reg in insn 404
changing reg in insn 404
changing reg in insn 436
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 408
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 416
changing reg in insn 417
changing reg in insn 417
changing reg in insn 419
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 420
changing reg in insn 421
changing reg in insn 423
changing reg in insn 423
changing reg in insn 423
changing reg in insn 425
changing reg in insn 427
changing reg in insn 428
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 430
changing reg in insn 431
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 436
changing reg in insn 442
changing reg in insn 443
changing reg in insn 447
changing reg in insn 448
changing reg in insn 448
changing reg in insn 450
changing reg in insn 450
changing reg in insn 450
changing reg in insn 481
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 455
changing reg in insn 455
changing reg in insn 456
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 464
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 465
changing reg in insn 466
changing reg in insn 468
changing reg in insn 468
changing reg in insn 468
changing reg in insn 470
changing reg in insn 472
changing reg in insn 473
changing reg in insn 473
changing reg in insn 474
changing reg in insn 474
changing reg in insn 475
changing reg in insn 476
changing reg in insn 478
changing reg in insn 479
changing reg in insn 479
changing reg in insn 481
changing reg in insn 483
changing reg in insn 484
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 487
changing reg in insn 487
changing reg in insn 487
changing reg in insn 519
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 491
changing reg in insn 491
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 499
changing reg in insn 500
changing reg in insn 500
changing reg in insn 502
changing reg in insn 501
changing reg in insn 502
changing reg in insn 502
changing reg in insn 503
changing reg in insn 504
changing reg in insn 506
changing reg in insn 506
changing reg in insn 506
changing reg in insn 508
changing reg in insn 510
changing reg in insn 511
changing reg in insn 511
changing reg in insn 512
changing reg in insn 512
changing reg in insn 513
changing reg in insn 514
changing reg in insn 516
changing reg in insn 517
changing reg in insn 517
changing reg in insn 519
changing reg in insn 533
changing reg in insn 536
changing reg in insn 536
changing reg in insn 540
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 160
changing reg in insn 161
changing reg in insn 165
changing reg in insn 166
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 178
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 215
changing reg in insn 218
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 222
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 232
changing reg in insn 233
changing reg in insn 246
changing reg in insn 247
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 259
changing reg in insn 262
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 266
changing reg in insn 272
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 277
changing reg in insn 286
changing reg in insn 287
changing reg in insn 290
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
changing reg in insn 296
changing reg in insn 299
changing reg in insn 301
changing reg in insn 302
changing reg in insn 302
changing reg in insn 303
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 313
changing reg in insn 314
changing reg in insn 328
changing reg in insn 329
changing reg in insn 336
changing reg in insn 337
changing reg in insn 339
changing reg in insn 340
changing reg in insn 342
changing reg in insn 343
changing reg in insn 353
changing reg in insn 354
changing reg in insn 358
changing reg in insn 359
changing reg in insn 363
changing reg in insn 364
changing reg in insn 366
changing reg in insn 367
changing reg in insn 368
changing reg in insn 369
changing reg in insn 371
changing reg in insn 374
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 378
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 388
changing reg in insn 389
changing reg in insn 399
changing reg in insn 400
changing reg in insn 403
changing reg in insn 404
changing reg in insn 405
changing reg in insn 406
changing reg in insn 409
changing reg in insn 412
changing reg in insn 414
changing reg in insn 415
changing reg in insn 415
changing reg in insn 416
changing reg in insn 422
changing reg in insn 423
changing reg in insn 424
changing reg in insn 426
changing reg in insn 427
changing reg in insn 441
changing reg in insn 442
changing reg in insn 446
changing reg in insn 447
changing reg in insn 449
changing reg in insn 450
changing reg in insn 451
changing reg in insn 452
changing reg in insn 454
changing reg in insn 457
changing reg in insn 459
changing reg in insn 460
changing reg in insn 460
changing reg in insn 461
changing reg in insn 467
changing reg in insn 468
changing reg in insn 469
changing reg in insn 471
changing reg in insn 472
changing reg in insn 482
changing reg in insn 483
changing reg in insn 486
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 492
changing reg in insn 495
changing reg in insn 497
changing reg in insn 498
changing reg in insn 498
changing reg in insn 499
changing reg in insn 505
changing reg in insn 506
changing reg in insn 507
changing reg in insn 509
changing reg in insn 510
changing reg in insn 525
changing reg in insn 526
deleting insn with uid = 560.
deleting insn with uid = 562.
deleting insn with uid = 56.
deleting insn with uid = 58.
deleting insn with uid = 565.
deleting insn with uid = 117.
deleting insn with uid = 119.
deleting insn with uid = 568.
deleting insn with uid = 572.
deleting insn with uid = 199.
deleting insn with uid = 201.
deleting insn with uid = 573.
deleting insn with uid = 578.
deleting insn with uid = 236.
deleting insn with uid = 238.
deleting insn with uid = 579.
deleting insn with uid = 584.
deleting insn with uid = 280.
deleting insn with uid = 282.
deleting insn with uid = 585.
deleting insn with uid = 590.
deleting insn with uid = 317.
deleting insn with uid = 319.
deleting insn with uid = 591.
deleting insn with uid = 596.
deleting insn with uid = 393.
deleting insn with uid = 395.
deleting insn with uid = 597.
deleting insn with uid = 602.
deleting insn with uid = 431.
deleting insn with uid = 433.
deleting insn with uid = 603.
deleting insn with uid = 608.
deleting insn with uid = 476.
deleting insn with uid = 478.
deleting insn with uid = 609.
deleting insn with uid = 614.
deleting insn with uid = 514.
deleting insn with uid = 516.
deleting insn with uid = 615.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 281.
verify found no changes in insn with uid = 318.
verify found no changes in insn with uid = 394.
verify found no changes in insn with uid = 432.
verify found no changes in insn with uid = 477.
verify found no changes in insn with uid = 515.


int filter(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={209d,209u} r1={52d,42u,20e} r2={11d,1u} r3={9d,9u} r4={11d,1u} r5={11d,1u} r6={1d,168u} r7={1d,38u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={131d,16u} r18={10d} r19={10d} r20={1d,1u,27e} r21={102d,103u,10e} r22={72d,61u,2e} r23={15d,4u} r24={13d,2u} r25={13d,2u} r26={13d,2u} r27={13d,2u} r28={13d,2u} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} 
;;    total ref usage 1956{1233d,664u,59e} in 496{486 regular + 10 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 340 341 342 343 344 345 346 347 348
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:372 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:372 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:372 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) ge2fitman_preproc.cpp:372 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:374 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SF 0 ax [340])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:376 129 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 0 ax [340])) ge2fitman_preproc.cpp:376 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SF 0 ax [341])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:376 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 0 ax [341])) ge2fitman_preproc.cpp:376 129 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SF 22 xmm1 [orig:83 D.25620 ] [83])
        (mem/j:SF (reg/f:DI 0 ax [342]) [0 procpar_info_6(D)->acquision_time+0 S4 A64])) ge2fitman_preproc.cpp:378 129 {*movsf_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 0 ax [orig:84 D.25621 ] [84])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [343])
                (const_int 324 [0x144])) [0 procpar_info_6(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:378 90 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SF 21 xmm0 [orig:85 D.25620 ] [85])
        (float:SF (reg:SI 0 ax [orig:84 D.25621 ] [84]))) ge2fitman_preproc.cpp:378 199 {*floatsisf2_sse}
     (nil))
(insn 19 18 561 2 (set (reg:SF 22 xmm1 [344])
        (div:SF (reg:SF 22 xmm1 [344])
            (reg:SF 21 xmm0 [orig:85 D.25620 ] [85]))) ge2fitman_preproc.cpp:378 782 {*fop_sf_1_sse}
     (nil))
(insn 561 19 20 2 (set (reg:SF 0 ax [344])
        (reg:SF 22 xmm1 [344])) ge2fitman_preproc.cpp:378 129 {*movsf_internal}
     (nil))
(insn 20 561 21 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32])
        (reg:SF 0 ax [344])) ge2fitman_preproc.cpp:378 129 {*movsf_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:379 89 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SF 21 xmm0 [orig:86 D.25620 ] [86])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [345])
                (const_int 48 [0x30])) [0 preprocess_11(D)->pre_delay_time+0 S4 A32])) ge2fitman_preproc.cpp:379 129 {*movsf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SF 22 xmm1 [347])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:379 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 24 23 563 2 (set (reg:SF 21 xmm0 [346])
        (div:SF (reg:SF 21 xmm0 [346])
            (reg:SF 22 xmm1 [347]))) ge2fitman_preproc.cpp:379 782 {*fop_sf_1_sse}
     (nil))
(insn 563 24 25 2 (set (reg:SF 0 ax [346])
        (reg:SF 21 xmm0 [346])) ge2fitman_preproc.cpp:379 129 {*movsf_internal}
     (nil))
(insn 25 563 26 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32])
        (reg:SF 0 ax [346])) ge2fitman_preproc.cpp:379 129 {*movsf_internal}
     (nil))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:385 89 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:87 D.25621 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [348])
                (const_int 40 [0x28])) [0 preprocess_11(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:385 90 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 D.25621 ] [87])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:385 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 29 28 30 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) ge2fitman_preproc.cpp:385 596 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 349
(note 30 29 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 3 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:385 89 {*movdi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:SI 0 ax [orig:88 D.25621 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [349])
                (const_int 52 [0x34])) [0 preprocess_11(D)->pre_quecc_if+0 S4 A32])) ge2fitman_preproc.cpp:385 90 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.25621 ] [88])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:385 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) ge2fitman_preproc.cpp:385 596 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364
(note 35 34 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 4 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:386 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:SI 0 ax [orig:89 D.25621 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [350])
                (const_int 44 [0x2c])) [0 preprocess_11(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:386 90 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 0 ax [orig:90 D.25622 ] [90])
        (sign_extend:DI (reg:SI 0 ax [orig:89 D.25621 ] [89]))) ge2fitman_preproc.cpp:386 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 0 ax [orig:91 D.25622 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.25622 ] [90])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:386 497 {*ashldi3_1}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg:DI 1 dx [orig:92 D.25623 ] [92])
                (plus:DI (reg:DI 0 ax [orig:91 D.25622 ] [91])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:386 221 {*adddi_1}
     (nil))
(insn 41 40 42 4 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:386 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.25624 ] [93])
                (plus:DI (reg/f:DI 0 ax [351])
                    (reg:DI 1 dx [orig:92 D.25623 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:386 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.25623 ] [92]))
        (nil)))
(insn 43 42 44 4 (set (reg:SF 0 ax [352])
        (mem:SF (reg/f:DI 0 ax [orig:93 D.25624 ] [93]) [0 *_21+0 S4 A32])) ge2fitman_preproc.cpp:386 129 {*movsf_internal}
     (nil))
(insn 44 43 45 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 0 ax [352])) ge2fitman_preproc.cpp:386 129 {*movsf_internal}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:387 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SI 0 ax [orig:94 D.25621 ] [94])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [353])
                (const_int 44 [0x2c])) [0 preprocess_11(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:387 90 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:DI 0 ax [orig:95 D.25622 ] [95])
        (sign_extend:DI (reg:SI 0 ax [orig:94 D.25621 ] [94]))) ge2fitman_preproc.cpp:387 142 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 1 dx [orig:96 D.25622 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.25622 ] [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:387 497 {*ashldi3_1}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:387 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.25624 ] [97])
                (plus:DI (reg/f:DI 0 ax [354])
                    (reg:DI 1 dx [orig:96 D.25622 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:387 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.25622 ] [96]))
        (nil)))
(insn 51 50 52 4 (set (reg:SF 0 ax [355])
        (mem:SF (reg/f:DI 0 ax [orig:97 D.25624 ] [97]) [0 *_26+0 S4 A32])) ge2fitman_preproc.cpp:387 129 {*movsf_internal}
     (nil))
(insn 52 51 53 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 0 ax [355])) ge2fitman_preproc.cpp:387 129 {*movsf_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SF 21 xmm0 [356])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])) ge2fitman_preproc.cpp:389 129 {*movsf_internal}
     (nil))
(insn 54 53 55 4 (set (reg:SF 21 xmm0 [orig:98 D.25620 ] [98])
        (div:SF (reg:SF 21 xmm0 [356])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32]))) ge2fitman_preproc.cpp:389 782 {*fop_sf_1_sse}
     (nil))
(insn 55 54 57 4 (set (reg:DF 21 xmm0 [orig:99 D.25625 ] [99])
        (float_extend:DF (reg:SF 21 xmm0 [orig:98 D.25620 ] [98]))) ge2fitman_preproc.cpp:389 152 {*extendsfdf2_sse}
     (nil))
(call_insn 57 55 59 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x2b4e60756d00 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:389 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 59 57 60 4 (set (reg:SF 21 xmm0 [orig:101 D.25620 ] [101])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:100 D.25625 ] [100]))) ge2fitman_preproc.cpp:389 157 {*truncdfsf_fast_sse}
     (nil))
(insn 60 59 61 4 (set (reg:DF 21 xmm0 [orig:102 D.25625 ] [102])
        (float_extend:DF (reg:SF 21 xmm0 [orig:101 D.25620 ] [101]))) ge2fitman_preproc.cpp:389 152 {*extendsfdf2_sse}
     (nil))
(insn 61 60 62 4 (set (reg:V2DF 22 xmm1 [357])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:389 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 62 61 63 4 (parallel [
            (set (reg:DF 21 xmm0 [orig:103 D.25625 ] [103])
                (neg:DF (reg:DF 21 xmm0 [orig:102 D.25625 ] [102])))
            (use (reg:V2DF 22 xmm1 [357]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:389 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 21 xmm0 [orig:102 D.25625 ] [102]))
        (nil)))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [358])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:390 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SI 0 ax [orig:104 D.25621 ] [104])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [358])
                (const_int 44 [0x2c])) [0 preprocess_11(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 65 64 564 4 (parallel [
            (set (reg:SI 0 ax [orig:105 D.25621 ] [105])
                (plus:SI (reg:SI 0 ax [orig:104 D.25621 ] [104])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 220 {*addsi_1}
     (nil))
(insn 564 65 66 4 (set (reg:SI 1 dx [359])
        (reg:SI 0 ax [orig:105 D.25621 ] [105])) ge2fitman_preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 66 564 67 4 (parallel [
            (set (reg:SI 1 dx [359])
                (lshiftrt:SI (reg:SI 1 dx [359])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 529 {*lshrsi3_1}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg:SI 0 ax [360])
                (plus:SI (reg:SI 0 ax [orig:105 D.25621 ] [105])
                    (reg:SI 1 dx [359])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 220 {*addsi_1}
     (nil))
(insn 68 67 69 4 (parallel [
            (set (reg:SI 0 ax [361])
                (ashiftrt:SI (reg:SI 0 ax [360])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 530 {*ashrsi3_1}
     (nil))
(insn 69 68 70 4 (set (reg:SI 0 ax [orig:106 D.25621 ] [106])
        (reg:SI 0 ax [361])) ge2fitman_preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:SF 22 xmm1 [orig:107 D.25620 ] [107])
        (float:SF (reg:SI 0 ax [orig:106 D.25621 ] [106]))) ge2fitman_preproc.cpp:390 199 {*floatsisf2_sse}
     (nil))
(insn 71 70 72 4 (set (reg:SF 22 xmm1 [orig:108 D.25620 ] [108])
        (mult:SF (reg:SF 22 xmm1 [orig:107 D.25620 ] [107])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:390 775 {*fop_sf_comm_sse}
     (nil))
(insn 72 71 73 4 (set (reg:SF 22 xmm1 [orig:109 D.25620 ] [109])
        (plus:SF (reg:SF 22 xmm1 [orig:108 D.25620 ] [108])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:390 775 {*fop_sf_comm_sse}
     (nil))
(insn 73 72 74 4 (set (reg:V4SF 23 xmm2 [362])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:390 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 74 73 75 4 (parallel [
            (set (reg:SF 22 xmm1 [orig:110 D.25620 ] [110])
                (abs:SF (reg:SF 22 xmm1 [orig:109 D.25620 ] [109])))
            (use (reg:V4SF 23 xmm2 [362]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:109 D.25620 ] [109]))
        (nil)))
(insn 75 74 76 4 (set (reg:DF 22 xmm1 [orig:111 D.25625 ] [111])
        (float_extend:DF (reg:SF 22 xmm1 [orig:110 D.25620 ] [110]))) ge2fitman_preproc.cpp:390 152 {*extendsfdf2_sse}
     (nil))
(insn 76 75 77 4 (set (reg:DF 23 xmm2 [363])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:390 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 77 76 78 4 (set (reg:DF 22 xmm1 [orig:112 D.25625 ] [112])
        (mult:DF (reg:DF 22 xmm1 [orig:111 D.25625 ] [111])
            (reg:DF 23 xmm2 [363]))) ge2fitman_preproc.cpp:390 776 {*fop_df_comm_sse}
     (nil))
(insn 78 77 79 4 (set (reg:DF 21 xmm0 [orig:113 D.25625 ] [113])
        (div:DF (reg:DF 21 xmm0 [orig:103 D.25625 ] [103])
            (reg:DF 22 xmm1 [orig:112 D.25625 ] [112]))) ge2fitman_preproc.cpp:389 783 {*fop_df_1_sse}
     (nil))
(insn 79 78 566 4 (set (reg:SF 24 xmm3 [orig:114 D.25620 ] [114])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:113 D.25625 ] [113]))) ge2fitman_preproc.cpp:390 157 {*truncdfsf_fast_sse}
     (nil))
(insn 566 79 80 4 (set (reg:SF 0 ax [orig:114 D.25620 ] [114])
        (reg:SF 24 xmm3 [orig:114 D.25620 ] [114])) ge2fitman_preproc.cpp:390 129 {*movsf_internal}
     (nil))
(insn 80 566 81 4 (set (reg/f:DI 1 dx [364])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:390 89 {*movdi_internal}
     (nil))
(insn 81 80 82 4 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [364])
                (const_int 28 [0x1c])) [0 preprocess_11(D)->comp_filter+0 S4 A32])
        (reg:SF 0 ax [orig:114 D.25620 ] [114])) ge2fitman_preproc.cpp:390 129 {*movsf_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 365
(code_label 82 81 83 5 83 "" [2 uses])
(note 83 82 84 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 5 (set (reg/f:DI 0 ax [365])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:393 89 {*movdi_internal}
     (nil))
(insn 85 84 86 5 (set (reg:SI 0 ax [orig:115 D.25621 ] [115])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [365])
                (const_int 40 [0x28])) [0 preprocess_11(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:393 90 {*movsi_internal}
     (nil))
(insn 86 85 87 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:115 D.25621 ] [115])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:393 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 87 86 88 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) ge2fitman_preproc.cpp:393 596 {*jcc_1}
     (nil)
 -> 142)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 366
(note 88 87 89 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 6 (set (reg/f:DI 0 ax [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:393 89 {*movdi_internal}
     (nil))
(insn 90 89 91 6 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.25626 ] [116])
                (plus:DI (reg/f:DI 0 ax [366])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:393 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 91 90 92 6 (set (reg:SI 0 ax [orig:117 D.25621 ] [117])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:116 D.25626 ] [116])
                (const_int 52 [0x34])) [0 _46->pre_quecc_if+0 S4 A32])) ge2fitman_preproc.cpp:393 90 {*movsi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:117 D.25621 ] [117])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:393 7 {*cmpsi_1}
     (nil))
(jump_insn 93 92 94 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) ge2fitman_preproc.cpp:393 596 {*jcc_1}
     (nil)
 -> 142)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381
(note 94 93 95 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 7 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:394 89 {*movdi_internal}
     (nil))
(insn 96 95 97 7 (set (reg:SI 0 ax [orig:118 D.25621 ] [118])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [367])
                (const_int 44 [0x2c])) [0 preprocess_11(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:394 90 {*movsi_internal}
     (nil))
(insn 97 96 98 7 (set (reg:DI 0 ax [orig:119 D.25622 ] [119])
        (sign_extend:DI (reg:SI 0 ax [orig:118 D.25621 ] [118]))) ge2fitman_preproc.cpp:394 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 7 (parallel [
            (set (reg:DI 0 ax [orig:120 D.25622 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.25622 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:394 497 {*ashldi3_1}
     (nil))
(insn 99 98 100 7 (parallel [
            (set (reg:DI 1 dx [orig:121 D.25623 ] [121])
                (plus:DI (reg:DI 0 ax [orig:120 D.25622 ] [120])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:394 221 {*adddi_1}
     (nil))
(insn 100 99 101 7 (set (reg/f:DI 0 ax [368])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:394 89 {*movdi_internal}
     (nil))
(insn 101 100 102 7 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.25624 ] [122])
                (plus:DI (reg/f:DI 0 ax [368])
                    (reg:DI 1 dx [orig:121 D.25623 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:394 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.25623 ] [121]))
        (nil)))
(insn 102 101 103 7 (set (reg:SF 0 ax [369])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.25624 ] [122]) [0 *_52+0 S4 A32])) ge2fitman_preproc.cpp:394 129 {*movsf_internal}
     (nil))
(insn 103 102 104 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 0 ax [369])) ge2fitman_preproc.cpp:394 129 {*movsf_internal}
     (nil))
(insn 104 103 105 7 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:395 89 {*movdi_internal}
     (nil))
(insn 105 104 106 7 (set (reg:SI 0 ax [orig:123 D.25621 ] [123])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [370])
                (const_int 44 [0x2c])) [0 preprocess_11(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:395 90 {*movsi_internal}
     (nil))
(insn 106 105 107 7 (set (reg:DI 0 ax [orig:124 D.25622 ] [124])
        (sign_extend:DI (reg:SI 0 ax [orig:123 D.25621 ] [123]))) ge2fitman_preproc.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 7 (parallel [
            (set (reg:DI 1 dx [orig:125 D.25622 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 D.25622 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:395 497 {*ashldi3_1}
     (nil))
(insn 108 107 109 7 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:395 89 {*movdi_internal}
     (nil))
(insn 109 108 110 7 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.25624 ] [126])
                (plus:DI (reg/f:DI 0 ax [371])
                    (reg:DI 1 dx [orig:125 D.25622 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:395 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.25622 ] [125]))
        (nil)))
(insn 110 109 111 7 (set (reg:SF 0 ax [372])
        (mem:SF (reg/f:DI 0 ax [orig:126 D.25624 ] [126]) [0 *_57+0 S4 A32])) ge2fitman_preproc.cpp:395 129 {*movsf_internal}
     (nil))
(insn 111 110 112 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 0 ax [372])) ge2fitman_preproc.cpp:395 129 {*movsf_internal}
     (nil))
(insn 112 111 113 7 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:397 89 {*movdi_internal}
     (nil))
(insn 113 112 114 7 (parallel [
            (set (reg/f:DI 3 bx [orig:127 D.25626 ] [127])
                (plus:DI (reg/f:DI 0 ax [373])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:397 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 114 113 115 7 (set (reg:SF 21 xmm0 [374])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])) ge2fitman_preproc.cpp:397 129 {*movsf_internal}
     (nil))
(insn 115 114 116 7 (set (reg:SF 21 xmm0 [orig:128 D.25620 ] [128])
        (div:SF (reg:SF 21 xmm0 [374])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32]))) ge2fitman_preproc.cpp:397 782 {*fop_sf_1_sse}
     (nil))
(insn 116 115 118 7 (set (reg:DF 21 xmm0 [orig:129 D.25625 ] [129])
        (float_extend:DF (reg:SF 21 xmm0 [orig:128 D.25620 ] [128]))) ge2fitman_preproc.cpp:397 152 {*extendsfdf2_sse}
     (nil))
(call_insn 118 116 120 7 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x2b4e60756d00 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:397 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 120 118 121 7 (set (reg:SF 21 xmm0 [orig:131 D.25620 ] [131])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:130 D.25625 ] [130]))) ge2fitman_preproc.cpp:397 157 {*truncdfsf_fast_sse}
     (nil))
(insn 121 120 122 7 (set (reg:DF 21 xmm0 [orig:132 D.25625 ] [132])
        (float_extend:DF (reg:SF 21 xmm0 [orig:131 D.25620 ] [131]))) ge2fitman_preproc.cpp:397 152 {*extendsfdf2_sse}
     (nil))
(insn 122 121 123 7 (set (reg:V2DF 22 xmm1 [375])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:397 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 123 122 124 7 (parallel [
            (set (reg:DF 21 xmm0 [orig:133 D.25625 ] [133])
                (neg:DF (reg:DF 21 xmm0 [orig:132 D.25625 ] [132])))
            (use (reg:V2DF 22 xmm1 [375]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:397 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 21 xmm0 [orig:132 D.25625 ] [132]))
        (nil)))
(insn 124 123 125 7 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:398 89 {*movdi_internal}
     (nil))
(insn 125 124 126 7 (set (reg:SI 0 ax [orig:134 D.25621 ] [134])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [376])
                (const_int 44 [0x2c])) [0 preprocess_11(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 126 125 567 7 (parallel [
            (set (reg:SI 0 ax [orig:135 D.25621 ] [135])
                (plus:SI (reg:SI 0 ax [orig:134 D.25621 ] [134])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 220 {*addsi_1}
     (nil))
(insn 567 126 127 7 (set (reg:SI 1 dx [377])
        (reg:SI 0 ax [orig:135 D.25621 ] [135])) ge2fitman_preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 127 567 128 7 (parallel [
            (set (reg:SI 1 dx [377])
                (lshiftrt:SI (reg:SI 1 dx [377])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 529 {*lshrsi3_1}
     (nil))
(insn 128 127 129 7 (parallel [
            (set (reg:SI 0 ax [378])
                (plus:SI (reg:SI 0 ax [orig:135 D.25621 ] [135])
                    (reg:SI 1 dx [377])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 220 {*addsi_1}
     (nil))
(insn 129 128 130 7 (parallel [
            (set (reg:SI 0 ax [379])
                (ashiftrt:SI (reg:SI 0 ax [378])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 530 {*ashrsi3_1}
     (nil))
(insn 130 129 131 7 (set (reg:SI 0 ax [orig:136 D.25621 ] [136])
        (reg:SI 0 ax [379])) ge2fitman_preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 131 130 132 7 (set (reg:SF 22 xmm1 [orig:137 D.25620 ] [137])
        (float:SF (reg:SI 0 ax [orig:136 D.25621 ] [136]))) ge2fitman_preproc.cpp:398 199 {*floatsisf2_sse}
     (nil))
(insn 132 131 133 7 (set (reg:SF 22 xmm1 [orig:138 D.25620 ] [138])
        (mult:SF (reg:SF 22 xmm1 [orig:137 D.25620 ] [137])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:398 775 {*fop_sf_comm_sse}
     (nil))
(insn 133 132 134 7 (set (reg:SF 22 xmm1 [orig:139 D.25620 ] [139])
        (plus:SF (reg:SF 22 xmm1 [orig:138 D.25620 ] [138])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:398 775 {*fop_sf_comm_sse}
     (nil))
(insn 134 133 135 7 (set (reg:V4SF 23 xmm2 [380])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:398 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 135 134 136 7 (parallel [
            (set (reg:SF 22 xmm1 [orig:140 D.25620 ] [140])
                (abs:SF (reg:SF 22 xmm1 [orig:139 D.25620 ] [139])))
            (use (reg:V4SF 23 xmm2 [380]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:139 D.25620 ] [139]))
        (nil)))
(insn 136 135 137 7 (set (reg:DF 22 xmm1 [orig:141 D.25625 ] [141])
        (float_extend:DF (reg:SF 22 xmm1 [orig:140 D.25620 ] [140]))) ge2fitman_preproc.cpp:398 152 {*extendsfdf2_sse}
     (nil))
(insn 137 136 138 7 (set (reg:DF 23 xmm2 [381])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:398 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 138 137 139 7 (set (reg:DF 22 xmm1 [orig:142 D.25625 ] [142])
        (mult:DF (reg:DF 22 xmm1 [orig:141 D.25625 ] [141])
            (reg:DF 23 xmm2 [381]))) ge2fitman_preproc.cpp:398 776 {*fop_df_comm_sse}
     (nil))
(insn 139 138 140 7 (set (reg:DF 21 xmm0 [orig:143 D.25625 ] [143])
        (div:DF (reg:DF 21 xmm0 [orig:133 D.25625 ] [133])
            (reg:DF 22 xmm1 [orig:142 D.25625 ] [142]))) ge2fitman_preproc.cpp:397 783 {*fop_df_1_sse}
     (nil))
(insn 140 139 569 7 (set (reg:SF 25 xmm4 [orig:144 D.25620 ] [144])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:143 D.25625 ] [143]))) ge2fitman_preproc.cpp:398 157 {*truncdfsf_fast_sse}
     (nil))
(insn 569 140 141 7 (set (reg:SF 0 ax [orig:144 D.25620 ] [144])
        (reg:SF 25 xmm4 [orig:144 D.25620 ] [144])) ge2fitman_preproc.cpp:398 129 {*movsf_internal}
     (nil))
(insn 141 569 142 7 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:127 D.25626 ] [127])
                (const_int 28 [0x1c])) [0 _59->comp_filter+0 S4 A32])
        (reg:SF 0 ax [orig:144 D.25620 ] [144])) ge2fitman_preproc.cpp:398 129 {*movsf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 382 383
(code_label 142 141 143 8 84 "" [2 uses])
(note 143 142 144 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 8 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:403 89 {*movdi_internal}
     (nil))
(insn 145 144 146 8 (set (reg:SF 21 xmm0 [orig:145 D.25620 ] [145])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [382])
                (const_int 28 [0x1c])) [0 preprocess_11(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:403 129 {*movsf_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SF 22 xmm1 [383])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:403 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 147 146 148 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:145 D.25620 ] [145])
            (reg:SF 22 xmm1 [383]))) ge2fitman_preproc.cpp:403 55 {*cmpiusf_sse}
     (nil))
(jump_insn 148 147 543 8 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 549)
            (pc))) ge2fitman_preproc.cpp:403 596 {*jcc_1}
     (nil)
 -> 549)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 145

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 145
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 145
;; lr  def 	 17 [flags] 384
(note 543 148 149 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 149 543 150 9 (set (reg:SF 22 xmm1 [384])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:403 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 150 149 151 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:145 D.25620 ] [145])
            (reg:SF 22 xmm1 [384]))) ge2fitman_preproc.cpp:403 55 {*cmpiusf_sse}
     (nil))
(jump_insn 151 150 549 9 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 334)
            (pc))) ge2fitman_preproc.cpp:403 596 {*jcc_1}
     (nil)
 -> 334)
;;  succ:       10 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 549 151 155 10 98 "" [1 uses])
(note 155 549 156 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 551 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:405 90 {*movsi_internal}
     (nil))
(jump_insn 551 156 552 10 (set (pc)
        (label_ref 326)) ge2fitman_preproc.cpp:405 636 {jump}
     (nil)
 -> 326)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 552 551 331)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 385
(code_label 331 552 159 11 90 "" [1 uses])
(note 159 331 160 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 11 (set (reg/f:DI 0 ax [385])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:406 89 {*movdi_internal}
     (nil))
(insn 161 160 162 11 (set (reg:SI 0 ax [orig:148 D.25621 ] [148])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [385])
                (const_int 40 [0x28])) [0 preprocess_11(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:406 90 {*movsi_internal}
     (nil))
(insn 162 161 163 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:148 D.25621 ] [148])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:406 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 163 162 164 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) ge2fitman_preproc.cpp:406 596 {*jcc_1}
     (nil)
 -> 244)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 386
(note 164 163 165 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 165 164 166 12 (set (reg/f:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:406 89 {*movdi_internal}
     (nil))
(insn 166 165 167 12 (set (reg:SI 0 ax [orig:149 D.25621 ] [149])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [386])
                (const_int 44 [0x2c])) [0 preprocess_11(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:406 90 {*movsi_internal}
     (nil))
(insn 167 166 168 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:149 D.25621 ] [149])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:406 7 {*cmpsi_1}
     (nil))
(jump_insn 168 167 169 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) ge2fitman_preproc.cpp:406 596 {*jcc_1}
     (nil)
 -> 244)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408
(note 169 168 170 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 13 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 171 170 172 13 (set (reg:DI 0 ax [orig:150 D.25622 ] [150])
        (sign_extend:DI (reg:SI 0 ax [387]))) ge2fitman_preproc.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 172 171 173 13 (parallel [
            (set (reg:DI 1 dx [orig:151 D.25622 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.25622 ] [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 497 {*ashldi3_1}
     (nil))
(insn 173 172 174 13 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:407 89 {*movdi_internal}
     (nil))
(insn 174 173 175 13 (parallel [
            (set (reg/f:DI 3 bx [orig:152 D.25624 ] [152])
                (plus:DI (reg:DI 1 dx [orig:151 D.25622 ] [151])
                    (reg/f:DI 0 ax [388])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.25622 ] [151]))
        (nil)))
(insn 175 174 176 13 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 176 175 177 13 (set (reg:DI 0 ax [orig:153 D.25622 ] [153])
        (sign_extend:DI (reg:SI 0 ax [389]))) ge2fitman_preproc.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 177 176 178 13 (parallel [
            (set (reg:DI 1 dx [orig:154 D.25622 ] [154])
                (ashift:DI (reg:DI 0 ax [orig:153 D.25622 ] [153])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 497 {*ashldi3_1}
     (nil))
(insn 178 177 179 13 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:407 89 {*movdi_internal}
     (nil))
(insn 179 178 180 13 (parallel [
            (set (reg/f:DI 0 ax [orig:155 D.25624 ] [155])
                (plus:DI (reg/f:DI 0 ax [390])
                    (reg:DI 1 dx [orig:154 D.25622 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:154 D.25622 ] [154]))
        (nil)))
(insn 180 179 570 13 (set (reg:SF 26 xmm5 [orig:156 D.25620 ] [156])
        (mem:SF (reg/f:DI 0 ax [orig:155 D.25624 ] [155]) [0 *_89+0 S4 A32])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 570 180 635 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 26 xmm5 [orig:156 D.25620 ] [156])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(note 635 570 619 13 NOTE_INSN_DELETED)
(note 619 635 181 13 NOTE_INSN_DELETED)
(insn 181 619 571 13 (set (reg:SI 0 ax [391])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 571 181 182 13 (set (reg:SI 1 dx [392])
        (reg:SI 0 ax [391])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 182 571 183 13 (parallel [
            (set (reg:SI 1 dx [392])
                (lshiftrt:SI (reg:SI 1 dx [392])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 529 {*lshrsi3_1}
     (nil))
(insn 183 182 184 13 (parallel [
            (set (reg:SI 0 ax [393])
                (plus:SI (reg:SI 0 ax [391])
                    (reg:SI 1 dx [392])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 220 {*addsi_1}
     (nil))
(insn 184 183 185 13 (parallel [
            (set (reg:SI 0 ax [394])
                (ashiftrt:SI (reg:SI 0 ax [393])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 530 {*ashrsi3_1}
     (nil))
(insn 185 184 186 13 (set (reg:SI 0 ax [orig:157 D.25621 ] [157])
        (reg:SI 0 ax [394])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 186 185 187 13 (set (reg:DF 22 xmm1 [orig:158 D.25625 ] [158])
        (float:DF (reg:SI 0 ax [orig:157 D.25621 ] [157]))) ge2fitman_preproc.cpp:407 201 {*floatsidf2_sse}
     (nil))
(insn 187 186 188 13 (set (reg:DF 21 xmm0 [orig:159 D.25625 ] [159])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:407 152 {*extendsfdf2_sse}
     (nil))
(insn 188 187 189 13 (set (reg:DF 22 xmm1 [orig:160 D.25625 ] [160])
        (mult:DF (reg:DF 22 xmm1 [orig:158 D.25625 ] [158])
            (reg:DF 21 xmm0 [orig:159 D.25625 ] [159]))) ge2fitman_preproc.cpp:407 776 {*fop_df_comm_sse}
     (nil))
(insn 189 188 190 13 (set (reg:DF 21 xmm0 [orig:161 D.25625 ] [161])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:407 152 {*extendsfdf2_sse}
     (nil))
(insn 190 189 191 13 (set (reg:DF 21 xmm0 [orig:162 D.25625 ] [162])
        (plus:DF (reg:DF 21 xmm0 [orig:161 D.25625 ] [161])
            (reg:DF 22 xmm1 [orig:160 D.25625 ] [160]))) ge2fitman_preproc.cpp:407 776 {*fop_df_comm_sse}
     (nil))
(insn 191 190 192 13 (set (reg:V2DF 22 xmm1 [395])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:407 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 192 191 193 13 (parallel [
            (set (reg:DF 21 xmm0 [orig:163 D.25625 ] [163])
                (abs:DF (reg:DF 21 xmm0 [orig:162 D.25625 ] [162])))
            (use (reg:V2DF 22 xmm1 [395]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:162 D.25625 ] [162]))
        (nil)))
(insn 193 192 194 13 (set (reg:DF 22 xmm1 [396])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:407 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 194 193 195 13 (set (reg:DF 22 xmm1 [orig:164 D.25625 ] [164])
        (mult:DF (reg:DF 22 xmm1 [396])
            (reg:DF 21 xmm0 [orig:163 D.25625 ] [163]))) ge2fitman_preproc.cpp:407 776 {*fop_df_comm_sse}
     (nil))
(insn 195 194 196 13 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:407 89 {*movdi_internal}
     (nil))
(insn 196 195 197 13 (set (reg:SF 21 xmm0 [orig:165 D.25620 ] [165])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [397])
                (const_int 28 [0x1c])) [0 preprocess_11(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 197 196 198 13 (set (reg:DF 21 xmm0 [orig:166 D.25625 ] [166])
        (float_extend:DF (reg:SF 21 xmm0 [orig:165 D.25620 ] [165]))) ge2fitman_preproc.cpp:407 152 {*extendsfdf2_sse}
     (nil))
(insn 198 197 200 13 (set (reg:DF 21 xmm0 [orig:167 D.25625 ] [167])
        (mult:DF (reg:DF 21 xmm0 [orig:166 D.25625 ] [166])
            (reg:DF 22 xmm1 [orig:164 D.25625 ] [164]))) ge2fitman_preproc.cpp:407 776 {*fop_df_comm_sse}
     (nil))
(call_insn 200 198 202 13 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b4e6073a100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:407 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 202 200 575 13 (set (reg:SF 21 xmm0 [orig:169 D.25620 ] [169])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:168 D.25625 ] [168]))) ge2fitman_preproc.cpp:407 157 {*truncdfsf_fast_sse}
     (nil))
(note 575 202 633 13 NOTE_INSN_DELETED)
(note 633 575 203 13 NOTE_INSN_DELETED)
(insn 203 633 574 13 (set (reg:SF 21 xmm0 [orig:170 D.25620 ] [170])
        (mult:SF (reg:SF 21 xmm0 [orig:170 D.25620 ] [170])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:407 775 {*fop_sf_comm_sse}
     (nil))
(insn 574 203 204 13 (set (reg:SF 0 ax [orig:170 D.25620 ] [170])
        (reg:SF 21 xmm0 [orig:170 D.25620 ] [170])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 204 574 205 13 (set (mem:SF (reg/f:DI 3 bx [orig:152 D.25624 ] [152]) [0 *_86+0 S4 A32])
        (reg:SF 0 ax [orig:170 D.25620 ] [170])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 205 204 206 13 (set (reg:SI 0 ax [398])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 206 205 207 13 (set (reg:DI 0 ax [orig:171 D.25623 ] [171])
        (sign_extend:DI (reg:SI 0 ax [398]))) ge2fitman_preproc.cpp:408 142 {*extendsidi2_rex64}
     (nil))
(insn 207 206 208 13 (parallel [
            (set (reg:DI 0 ax [orig:172 D.25623 ] [172])
                (plus:DI (reg:DI 0 ax [orig:171 D.25623 ] [171])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 221 {*adddi_1}
     (nil))
(insn 208 207 209 13 (parallel [
            (set (reg:DI 1 dx [orig:173 D.25623 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.25623 ] [172])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 497 {*ashldi3_1}
     (nil))
(insn 209 208 210 13 (set (reg/f:DI 0 ax [399])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:408 89 {*movdi_internal}
     (nil))
(insn 210 209 211 13 (parallel [
            (set (reg/f:DI 3 bx [orig:174 D.25624 ] [174])
                (plus:DI (reg:DI 1 dx [orig:173 D.25623 ] [173])
                    (reg/f:DI 0 ax [399])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:173 D.25623 ] [173]))
        (nil)))
(insn 211 210 212 13 (set (reg:SI 0 ax [400])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 212 211 213 13 (set (reg:DI 0 ax [orig:175 D.25623 ] [175])
        (sign_extend:DI (reg:SI 0 ax [400]))) ge2fitman_preproc.cpp:408 142 {*extendsidi2_rex64}
     (nil))
(insn 213 212 214 13 (parallel [
            (set (reg:DI 0 ax [orig:176 D.25623 ] [176])
                (plus:DI (reg:DI 0 ax [orig:175 D.25623 ] [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 221 {*adddi_1}
     (nil))
(insn 214 213 215 13 (parallel [
            (set (reg:DI 1 dx [orig:177 D.25623 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.25623 ] [176])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 497 {*ashldi3_1}
     (nil))
(insn 215 214 216 13 (set (reg/f:DI 0 ax [401])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:408 89 {*movdi_internal}
     (nil))
(insn 216 215 217 13 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.25624 ] [178])
                (plus:DI (reg/f:DI 0 ax [401])
                    (reg:DI 1 dx [orig:177 D.25623 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.25623 ] [177]))
        (nil)))
(insn 217 216 576 13 (set (reg:SF 27 xmm6 [orig:179 D.25620 ] [179])
        (mem:SF (reg/f:DI 0 ax [orig:178 D.25624 ] [178]) [0 *_112+0 S4 A32])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(insn 576 217 634 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 27 xmm6 [orig:179 D.25620 ] [179])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(note 634 576 618 13 NOTE_INSN_DELETED)
(note 618 634 218 13 NOTE_INSN_DELETED)
(insn 218 618 577 13 (set (reg:SI 0 ax [402])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 577 218 219 13 (set (reg:SI 1 dx [403])
        (reg:SI 0 ax [402])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 219 577 220 13 (parallel [
            (set (reg:SI 1 dx [403])
                (lshiftrt:SI (reg:SI 1 dx [403])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 529 {*lshrsi3_1}
     (nil))
(insn 220 219 221 13 (parallel [
            (set (reg:SI 0 ax [404])
                (plus:SI (reg:SI 0 ax [402])
                    (reg:SI 1 dx [403])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 220 {*addsi_1}
     (nil))
(insn 221 220 222 13 (parallel [
            (set (reg:SI 0 ax [405])
                (ashiftrt:SI (reg:SI 0 ax [404])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 530 {*ashrsi3_1}
     (nil))
(insn 222 221 223 13 (set (reg:SI 0 ax [orig:180 D.25621 ] [180])
        (reg:SI 0 ax [405])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 223 222 224 13 (set (reg:DF 22 xmm1 [orig:181 D.25625 ] [181])
        (float:DF (reg:SI 0 ax [orig:180 D.25621 ] [180]))) ge2fitman_preproc.cpp:408 201 {*floatsidf2_sse}
     (nil))
(insn 224 223 225 13 (set (reg:DF 21 xmm0 [orig:182 D.25625 ] [182])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:408 152 {*extendsfdf2_sse}
     (nil))
(insn 225 224 226 13 (set (reg:DF 22 xmm1 [orig:183 D.25625 ] [183])
        (mult:DF (reg:DF 22 xmm1 [orig:181 D.25625 ] [181])
            (reg:DF 21 xmm0 [orig:182 D.25625 ] [182]))) ge2fitman_preproc.cpp:408 776 {*fop_df_comm_sse}
     (nil))
(insn 226 225 227 13 (set (reg:DF 21 xmm0 [orig:184 D.25625 ] [184])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:408 152 {*extendsfdf2_sse}
     (nil))
(insn 227 226 228 13 (set (reg:DF 21 xmm0 [orig:185 D.25625 ] [185])
        (plus:DF (reg:DF 21 xmm0 [orig:184 D.25625 ] [184])
            (reg:DF 22 xmm1 [orig:183 D.25625 ] [183]))) ge2fitman_preproc.cpp:408 776 {*fop_df_comm_sse}
     (nil))
(insn 228 227 229 13 (set (reg:V2DF 22 xmm1 [406])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:408 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 229 228 230 13 (parallel [
            (set (reg:DF 21 xmm0 [orig:186 D.25625 ] [186])
                (abs:DF (reg:DF 21 xmm0 [orig:185 D.25625 ] [185])))
            (use (reg:V2DF 22 xmm1 [406]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:185 D.25625 ] [185]))
        (nil)))
(insn 230 229 231 13 (set (reg:DF 22 xmm1 [407])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:408 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 231 230 232 13 (set (reg:DF 22 xmm1 [orig:187 D.25625 ] [187])
        (mult:DF (reg:DF 22 xmm1 [407])
            (reg:DF 21 xmm0 [orig:186 D.25625 ] [186]))) ge2fitman_preproc.cpp:408 776 {*fop_df_comm_sse}
     (nil))
(insn 232 231 233 13 (set (reg/f:DI 0 ax [408])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:408 89 {*movdi_internal}
     (nil))
(insn 233 232 234 13 (set (reg:SF 21 xmm0 [orig:188 D.25620 ] [188])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [408])
                (const_int 28 [0x1c])) [0 preprocess_11(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(insn 234 233 235 13 (set (reg:DF 21 xmm0 [orig:189 D.25625 ] [189])
        (float_extend:DF (reg:SF 21 xmm0 [orig:188 D.25620 ] [188]))) ge2fitman_preproc.cpp:408 152 {*extendsfdf2_sse}
     (nil))
(insn 235 234 237 13 (set (reg:DF 21 xmm0 [orig:190 D.25625 ] [190])
        (mult:DF (reg:DF 21 xmm0 [orig:189 D.25625 ] [189])
            (reg:DF 22 xmm1 [orig:187 D.25625 ] [187]))) ge2fitman_preproc.cpp:408 776 {*fop_df_comm_sse}
     (nil))
(call_insn 237 235 239 13 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b4e6073a100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:408 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 239 237 581 13 (set (reg:SF 21 xmm0 [orig:192 D.25620 ] [192])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:191 D.25625 ] [191]))) ge2fitman_preproc.cpp:408 157 {*truncdfsf_fast_sse}
     (nil))
(note 581 239 632 13 NOTE_INSN_DELETED)
(note 632 581 240 13 NOTE_INSN_DELETED)
(insn 240 632 580 13 (set (reg:SF 21 xmm0 [orig:193 D.25620 ] [193])
        (mult:SF (reg:SF 21 xmm0 [orig:193 D.25620 ] [193])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:408 775 {*fop_sf_comm_sse}
     (nil))
(insn 580 240 241 13 (set (reg:SF 0 ax [orig:193 D.25620 ] [193])
        (reg:SF 21 xmm0 [orig:193 D.25620 ] [193])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(insn 241 580 553 13 (set (mem:SF (reg/f:DI 3 bx [orig:174 D.25624 ] [174]) [0 *_108+0 S4 A32])
        (reg:SF 0 ax [orig:193 D.25620 ] [193])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(jump_insn 553 241 554 13 (set (pc)
        (label_ref 323)) ge2fitman_preproc.cpp:408 636 {jump}
     (nil)
 -> 323)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 554 553 244)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 194 409
(code_label 244 554 245 14 88 "" [2 uses])
(note 245 244 246 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 246 245 247 14 (set (reg/f:DI 0 ax [409])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:409 89 {*movdi_internal}
     (nil))
(insn 247 246 248 14 (set (reg:SI 0 ax [orig:194 D.25621 ] [194])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [409])
                (const_int 40 [0x28])) [0 preprocess_11(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:409 90 {*movsi_internal}
     (nil))
(insn 248 247 249 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:194 D.25621 ] [194])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:409 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 249 248 250 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 323)
            (pc))) ge2fitman_preproc.cpp:409 596 {*jcc_1}
     (nil)
 -> 323)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
(note 250 249 251 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 15 (set (reg:SI 0 ax [410])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 252 251 253 15 (set (reg:DI 0 ax [orig:195 D.25622 ] [195])
        (sign_extend:DI (reg:SI 0 ax [410]))) ge2fitman_preproc.cpp:410 142 {*extendsidi2_rex64}
     (nil))
(insn 253 252 254 15 (parallel [
            (set (reg:DI 1 dx [orig:196 D.25622 ] [196])
                (ashift:DI (reg:DI 0 ax [orig:195 D.25622 ] [195])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 497 {*ashldi3_1}
     (nil))
(insn 254 253 255 15 (set (reg/f:DI 0 ax [411])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:410 89 {*movdi_internal}
     (nil))
(insn 255 254 256 15 (parallel [
            (set (reg/f:DI 3 bx [orig:197 D.25624 ] [197])
                (plus:DI (reg:DI 1 dx [orig:196 D.25622 ] [196])
                    (reg/f:DI 0 ax [411])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:196 D.25622 ] [196]))
        (nil)))
(insn 256 255 257 15 (set (reg:SI 0 ax [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 257 256 258 15 (set (reg:DI 0 ax [orig:198 D.25622 ] [198])
        (sign_extend:DI (reg:SI 0 ax [412]))) ge2fitman_preproc.cpp:410 142 {*extendsidi2_rex64}
     (nil))
(insn 258 257 259 15 (parallel [
            (set (reg:DI 1 dx [orig:199 D.25622 ] [199])
                (ashift:DI (reg:DI 0 ax [orig:198 D.25622 ] [198])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 497 {*ashldi3_1}
     (nil))
(insn 259 258 260 15 (set (reg/f:DI 0 ax [413])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:410 89 {*movdi_internal}
     (nil))
(insn 260 259 261 15 (parallel [
            (set (reg/f:DI 0 ax [orig:200 D.25624 ] [200])
                (plus:DI (reg/f:DI 0 ax [413])
                    (reg:DI 1 dx [orig:199 D.25622 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:199 D.25622 ] [199]))
        (nil)))
(insn 261 260 582 15 (set (reg:SF 28 xmm7 [orig:201 D.25620 ] [201])
        (mem:SF (reg/f:DI 0 ax [orig:200 D.25624 ] [200]) [0 *_134+0 S4 A32])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(insn 582 261 637 15 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 28 xmm7 [orig:201 D.25620 ] [201])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(note 637 582 621 15 NOTE_INSN_DELETED)
(note 621 637 262 15 NOTE_INSN_DELETED)
(insn 262 621 583 15 (set (reg:SI 0 ax [414])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 583 262 263 15 (set (reg:SI 1 dx [415])
        (reg:SI 0 ax [414])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 263 583 264 15 (parallel [
            (set (reg:SI 1 dx [415])
                (lshiftrt:SI (reg:SI 1 dx [415])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 529 {*lshrsi3_1}
     (nil))
(insn 264 263 265 15 (parallel [
            (set (reg:SI 0 ax [416])
                (plus:SI (reg:SI 0 ax [414])
                    (reg:SI 1 dx [415])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 220 {*addsi_1}
     (nil))
(insn 265 264 266 15 (parallel [
            (set (reg:SI 0 ax [417])
                (ashiftrt:SI (reg:SI 0 ax [416])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 530 {*ashrsi3_1}
     (nil))
(insn 266 265 267 15 (set (reg:SI 0 ax [orig:202 D.25621 ] [202])
        (reg:SI 0 ax [417])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 267 266 268 15 (set (reg:DF 22 xmm1 [orig:203 D.25625 ] [203])
        (float:DF (reg:SI 0 ax [orig:202 D.25621 ] [202]))) ge2fitman_preproc.cpp:410 201 {*floatsidf2_sse}
     (nil))
(insn 268 267 269 15 (set (reg:DF 21 xmm0 [orig:204 D.25625 ] [204])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:410 152 {*extendsfdf2_sse}
     (nil))
(insn 269 268 270 15 (set (reg:DF 22 xmm1 [orig:205 D.25625 ] [205])
        (mult:DF (reg:DF 22 xmm1 [orig:203 D.25625 ] [203])
            (reg:DF 21 xmm0 [orig:204 D.25625 ] [204]))) ge2fitman_preproc.cpp:410 776 {*fop_df_comm_sse}
     (nil))
(insn 270 269 271 15 (set (reg:DF 21 xmm0 [orig:206 D.25625 ] [206])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:410 152 {*extendsfdf2_sse}
     (nil))
(insn 271 270 272 15 (set (reg:DF 21 xmm0 [orig:207 D.25625 ] [207])
        (plus:DF (reg:DF 21 xmm0 [orig:206 D.25625 ] [206])
            (reg:DF 22 xmm1 [orig:205 D.25625 ] [205]))) ge2fitman_preproc.cpp:410 776 {*fop_df_comm_sse}
     (nil))
(insn 272 271 273 15 (set (reg:V2DF 22 xmm1 [418])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:410 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 273 272 274 15 (parallel [
            (set (reg:DF 21 xmm0 [orig:208 D.25625 ] [208])
                (abs:DF (reg:DF 21 xmm0 [orig:207 D.25625 ] [207])))
            (use (reg:V2DF 22 xmm1 [418]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:207 D.25625 ] [207]))
        (nil)))
(insn 274 273 275 15 (set (reg:DF 22 xmm1 [419])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:410 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 275 274 276 15 (set (reg:DF 22 xmm1 [orig:209 D.25625 ] [209])
        (mult:DF (reg:DF 22 xmm1 [419])
            (reg:DF 21 xmm0 [orig:208 D.25625 ] [208]))) ge2fitman_preproc.cpp:410 776 {*fop_df_comm_sse}
     (nil))
(insn 276 275 277 15 (set (reg/f:DI 0 ax [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:410 89 {*movdi_internal}
     (nil))
(insn 277 276 278 15 (set (reg:SF 21 xmm0 [orig:210 D.25620 ] [210])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [420])
                (const_int 28 [0x1c])) [0 preprocess_11(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(insn 278 277 279 15 (set (reg:DF 21 xmm0 [orig:211 D.25625 ] [211])
        (float_extend:DF (reg:SF 21 xmm0 [orig:210 D.25620 ] [210]))) ge2fitman_preproc.cpp:410 152 {*extendsfdf2_sse}
     (nil))
(insn 279 278 281 15 (set (reg:DF 21 xmm0 [orig:212 D.25625 ] [212])
        (mult:DF (reg:DF 21 xmm0 [orig:211 D.25625 ] [211])
            (reg:DF 22 xmm1 [orig:209 D.25625 ] [209]))) ge2fitman_preproc.cpp:410 776 {*fop_df_comm_sse}
     (nil))
(call_insn 281 279 283 15 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b4e6073a100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:410 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 283 281 587 15 (set (reg:SF 21 xmm0 [orig:214 D.25620 ] [214])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:213 D.25625 ] [213]))) ge2fitman_preproc.cpp:410 157 {*truncdfsf_fast_sse}
     (nil))
(note 587 283 631 15 NOTE_INSN_DELETED)
(note 631 587 284 15 NOTE_INSN_DELETED)
(insn 284 631 586 15 (set (reg:SF 21 xmm0 [orig:215 D.25620 ] [215])
        (mult:SF (reg:SF 21 xmm0 [orig:215 D.25620 ] [215])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:410 775 {*fop_sf_comm_sse}
     (nil))
(insn 586 284 285 15 (set (reg:SF 0 ax [orig:215 D.25620 ] [215])
        (reg:SF 21 xmm0 [orig:215 D.25620 ] [215])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(insn 285 586 286 15 (set (mem:SF (reg/f:DI 3 bx [orig:197 D.25624 ] [197]) [0 *_131+0 S4 A32])
        (reg:SF 0 ax [orig:215 D.25620 ] [215])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(insn 286 285 287 15 (set (reg:SI 0 ax [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 287 286 288 15 (set (reg:DI 0 ax [orig:216 D.25623 ] [216])
        (sign_extend:DI (reg:SI 0 ax [421]))) ge2fitman_preproc.cpp:411 142 {*extendsidi2_rex64}
     (nil))
(insn 288 287 289 15 (parallel [
            (set (reg:DI 0 ax [orig:217 D.25623 ] [217])
                (plus:DI (reg:DI 0 ax [orig:216 D.25623 ] [216])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 221 {*adddi_1}
     (nil))
(insn 289 288 290 15 (parallel [
            (set (reg:DI 1 dx [orig:218 D.25623 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.25623 ] [217])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 497 {*ashldi3_1}
     (nil))
(insn 290 289 291 15 (set (reg/f:DI 0 ax [422])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:411 89 {*movdi_internal}
     (nil))
(insn 291 290 292 15 (parallel [
            (set (reg/f:DI 3 bx [orig:219 D.25624 ] [219])
                (plus:DI (reg:DI 1 dx [orig:218 D.25623 ] [218])
                    (reg/f:DI 0 ax [422])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.25623 ] [218]))
        (nil)))
(insn 292 291 293 15 (set (reg:SI 0 ax [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 293 292 294 15 (set (reg:DI 0 ax [orig:220 D.25623 ] [220])
        (sign_extend:DI (reg:SI 0 ax [423]))) ge2fitman_preproc.cpp:411 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 15 (parallel [
            (set (reg:DI 0 ax [orig:221 D.25623 ] [221])
                (plus:DI (reg:DI 0 ax [orig:220 D.25623 ] [220])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 221 {*adddi_1}
     (nil))
(insn 295 294 296 15 (parallel [
            (set (reg:DI 1 dx [orig:222 D.25623 ] [222])
                (ashift:DI (reg:DI 0 ax [orig:221 D.25623 ] [221])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 497 {*ashldi3_1}
     (nil))
(insn 296 295 297 15 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:411 89 {*movdi_internal}
     (nil))
(insn 297 296 298 15 (parallel [
            (set (reg/f:DI 0 ax [orig:223 D.25624 ] [223])
                (plus:DI (reg/f:DI 0 ax [424])
                    (reg:DI 1 dx [orig:222 D.25623 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.25623 ] [222]))
        (nil)))
(insn 298 297 588 15 (set (reg:SF 24 xmm3 [orig:224 D.25620 ] [224])
        (mem:SF (reg/f:DI 0 ax [orig:223 D.25624 ] [223]) [0 *_157+0 S4 A32])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
(insn 588 298 636 15 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 24 xmm3 [orig:224 D.25620 ] [224])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
(note 636 588 620 15 NOTE_INSN_DELETED)
(note 620 636 299 15 NOTE_INSN_DELETED)
(insn 299 620 589 15 (set (reg:SI 0 ax [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 589 299 300 15 (set (reg:SI 1 dx [426])
        (reg:SI 0 ax [425])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 300 589 301 15 (parallel [
            (set (reg:SI 1 dx [426])
                (lshiftrt:SI (reg:SI 1 dx [426])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 529 {*lshrsi3_1}
     (nil))
(insn 301 300 302 15 (parallel [
            (set (reg:SI 0 ax [427])
                (plus:SI (reg:SI 0 ax [425])
                    (reg:SI 1 dx [426])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 220 {*addsi_1}
     (nil))
(insn 302 301 303 15 (parallel [
            (set (reg:SI 0 ax [428])
                (ashiftrt:SI (reg:SI 0 ax [427])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 530 {*ashrsi3_1}
     (nil))
(insn 303 302 304 15 (set (reg:SI 0 ax [orig:225 D.25621 ] [225])
        (reg:SI 0 ax [428])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 304 303 305 15 (set (reg:DF 22 xmm1 [orig:226 D.25625 ] [226])
        (float:DF (reg:SI 0 ax [orig:225 D.25621 ] [225]))) ge2fitman_preproc.cpp:411 201 {*floatsidf2_sse}
     (nil))
(insn 305 304 306 15 (set (reg:DF 21 xmm0 [orig:227 D.25625 ] [227])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:411 152 {*extendsfdf2_sse}
     (nil))
(insn 306 305 307 15 (set (reg:DF 22 xmm1 [orig:228 D.25625 ] [228])
        (mult:DF (reg:DF 22 xmm1 [orig:226 D.25625 ] [226])
            (reg:DF 21 xmm0 [orig:227 D.25625 ] [227]))) ge2fitman_preproc.cpp:411 776 {*fop_df_comm_sse}
     (nil))
(insn 307 306 308 15 (set (reg:DF 21 xmm0 [orig:229 D.25625 ] [229])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:411 152 {*extendsfdf2_sse}
     (nil))
(insn 308 307 309 15 (set (reg:DF 21 xmm0 [orig:230 D.25625 ] [230])
        (plus:DF (reg:DF 21 xmm0 [orig:229 D.25625 ] [229])
            (reg:DF 22 xmm1 [orig:228 D.25625 ] [228]))) ge2fitman_preproc.cpp:411 776 {*fop_df_comm_sse}
     (nil))
(insn 309 308 310 15 (set (reg:V2DF 22 xmm1 [429])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:411 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 310 309 311 15 (parallel [
            (set (reg:DF 21 xmm0 [orig:231 D.25625 ] [231])
                (abs:DF (reg:DF 21 xmm0 [orig:230 D.25625 ] [230])))
            (use (reg:V2DF 22 xmm1 [429]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:230 D.25625 ] [230]))
        (nil)))
(insn 311 310 312 15 (set (reg:DF 22 xmm1 [430])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:411 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 312 311 313 15 (set (reg:DF 22 xmm1 [orig:232 D.25625 ] [232])
        (mult:DF (reg:DF 22 xmm1 [430])
            (reg:DF 21 xmm0 [orig:231 D.25625 ] [231]))) ge2fitman_preproc.cpp:411 776 {*fop_df_comm_sse}
     (nil))
(insn 313 312 314 15 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:411 89 {*movdi_internal}
     (nil))
(insn 314 313 315 15 (set (reg:SF 21 xmm0 [orig:233 D.25620 ] [233])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [431])
                (const_int 28 [0x1c])) [0 preprocess_11(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
(insn 315 314 316 15 (set (reg:DF 21 xmm0 [orig:234 D.25625 ] [234])
        (float_extend:DF (reg:SF 21 xmm0 [orig:233 D.25620 ] [233]))) ge2fitman_preproc.cpp:411 152 {*extendsfdf2_sse}
     (nil))
(insn 316 315 318 15 (set (reg:DF 21 xmm0 [orig:235 D.25625 ] [235])
        (mult:DF (reg:DF 21 xmm0 [orig:234 D.25625 ] [234])
            (reg:DF 22 xmm1 [orig:232 D.25625 ] [232]))) ge2fitman_preproc.cpp:411 776 {*fop_df_comm_sse}
     (nil))
(call_insn 318 316 320 15 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b4e6073a100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:411 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 320 318 593 15 (set (reg:SF 21 xmm0 [orig:237 D.25620 ] [237])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:236 D.25625 ] [236]))) ge2fitman_preproc.cpp:411 157 {*truncdfsf_fast_sse}
     (nil))
(note 593 320 630 15 NOTE_INSN_DELETED)
(note 630 593 321 15 NOTE_INSN_DELETED)
(insn 321 630 592 15 (set (reg:SF 21 xmm0 [orig:238 D.25620 ] [238])
        (mult:SF (reg:SF 21 xmm0 [orig:238 D.25620 ] [238])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:411 775 {*fop_sf_comm_sse}
     (nil))
(insn 592 321 322 15 (set (reg:SF 0 ax [orig:238 D.25620 ] [238])
        (reg:SF 21 xmm0 [orig:238 D.25620 ] [238])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
(insn 322 592 323 15 (set (mem:SF (reg/f:DI 3 bx [orig:219 D.25624 ] [219]) [0 *_153+0 S4 A32])
        (reg:SF 0 ax [orig:238 D.25620 ] [238])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;;              14
;;              13 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 323 322 324 16 89 "" [2 uses])
(note 324 323 325 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 325 324 326 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:405 220 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 432
(code_label 326 325 327 17 87 "" [1 uses])
(note 327 326 328 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 328 327 329 17 (set (reg/f:DI 0 ax [432])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:405 89 {*movdi_internal}
     (nil))
(insn 329 328 330 17 (set (reg:SI 0 ax [orig:146 D.25621 ] [146])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [432])
                (const_int 324 [0x144])) [0 procpar_info_6(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:405 90 {*movsi_internal}
     (nil))
(insn 330 329 332 17 (parallel [
            (set (reg:SI 0 ax [orig:147 D.25621 ] [147])
                (ashift:SI (reg:SI 0 ax [orig:146 D.25621 ] [146])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:405 496 {*ashlsi3_1}
     (nil))
(insn 332 330 333 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:147 D.25621 ] [147])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:405 7 {*cmpsi_1}
     (nil))
(jump_insn 333 332 334 17 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 331)
            (pc))) ge2fitman_preproc.cpp:405 596 {*jcc_1}
     (nil)
 -> 331)
;;  succ:       11
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              9
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 240 433 434
(code_label 334 333 335 18 85 "" [1 uses])
(note 335 334 336 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 336 335 337 18 (set (reg/f:DI 0 ax [433])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:417 89 {*movdi_internal}
     (nil))
(insn 337 336 338 18 (parallel [
            (set (reg/f:DI 0 ax [orig:239 D.25626 ] [239])
                (plus:DI (reg/f:DI 0 ax [433])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:417 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 338 337 339 18 (set (reg:SF 21 xmm0 [orig:240 D.25620 ] [240])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:239 D.25626 ] [239])
                (const_int 28 [0x1c])) [0 _174->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:417 129 {*movsf_internal}
     (nil))
(insn 339 338 340 18 (set (reg:SF 22 xmm1 [434])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:417 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 340 339 341 18 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:240 D.25620 ] [240])
            (reg:SF 22 xmm1 [434]))) ge2fitman_preproc.cpp:417 55 {*cmpiusf_sse}
     (nil))
(jump_insn 341 340 546 18 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 550)
            (pc))) ge2fitman_preproc.cpp:417 596 {*jcc_1}
     (nil)
 -> 550)
;;  succ:       20
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 240

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 240
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 240
;; lr  def 	 17 [flags] 435
(note 546 341 342 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 342 546 343 19 (set (reg:SF 22 xmm1 [435])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:417 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 343 342 344 19 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:240 D.25620 ] [240])
            (reg:SF 22 xmm1 [435]))) ge2fitman_preproc.cpp:417 55 {*cmpiusf_sse}
     (nil))
(jump_insn 344 343 550 19 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 531)
            (pc))) ge2fitman_preproc.cpp:417 596 {*jcc_1}
     (nil)
 -> 531)
;;  succ:       20 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 550 344 348 20 99 "" [1 uses])
(note 348 550 349 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 349 348 555 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:419 90 {*movsi_internal}
     (nil))
(jump_insn 555 349 556 20 (set (pc)
        (label_ref 523)) ge2fitman_preproc.cpp:419 636 {jump}
     (nil)
 -> 523)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 556 555 528)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243 436
(code_label 528 556 352 21 96 "" [1 uses])
(note 352 528 353 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 353 352 354 21 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:420 89 {*movdi_internal}
     (nil))
(insn 354 353 355 21 (set (reg:SI 0 ax [orig:243 D.25621 ] [243])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [436])
                (const_int 40 [0x28])) [0 preprocess_11(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:420 90 {*movsi_internal}
     (nil))
(insn 355 354 356 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:243 D.25621 ] [243])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:420 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 356 355 357 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 439)
            (pc))) ge2fitman_preproc.cpp:420 596 {*jcc_1}
     (nil)
 -> 439)
;;  succ:       22 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 244 437
(note 357 356 358 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 358 357 359 22 (set (reg/f:DI 0 ax [437])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:420 89 {*movdi_internal}
     (nil))
(insn 359 358 360 22 (set (reg:SI 0 ax [orig:244 D.25621 ] [244])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [437])
                (const_int 44 [0x2c])) [0 preprocess_11(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:420 90 {*movsi_internal}
     (nil))
(insn 360 359 361 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:244 D.25621 ] [244])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:420 7 {*cmpsi_1}
     (nil))
(jump_insn 361 360 362 22 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 439)
            (pc))) ge2fitman_preproc.cpp:420 596 {*jcc_1}
     (nil)
 -> 439)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459
(note 362 361 363 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 363 362 364 23 (set (reg:SI 0 ax [438])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 364 363 365 23 (set (reg:DI 0 ax [orig:245 D.25622 ] [245])
        (sign_extend:DI (reg:SI 0 ax [438]))) ge2fitman_preproc.cpp:421 142 {*extendsidi2_rex64}
     (nil))
(insn 365 364 366 23 (parallel [
            (set (reg:DI 1 dx [orig:246 D.25622 ] [246])
                (ashift:DI (reg:DI 0 ax [orig:245 D.25622 ] [245])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 497 {*ashldi3_1}
     (nil))
(insn 366 365 367 23 (set (reg/f:DI 0 ax [439])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:421 89 {*movdi_internal}
     (nil))
(insn 367 366 368 23 (parallel [
            (set (reg/f:DI 3 bx [orig:247 D.25624 ] [247])
                (plus:DI (reg:DI 1 dx [orig:246 D.25622 ] [246])
                    (reg/f:DI 0 ax [439])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:246 D.25622 ] [246]))
        (nil)))
(insn 368 367 369 23 (set (reg:SI 0 ax [440])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 369 368 370 23 (set (reg:DI 0 ax [orig:248 D.25622 ] [248])
        (sign_extend:DI (reg:SI 0 ax [440]))) ge2fitman_preproc.cpp:421 142 {*extendsidi2_rex64}
     (nil))
(insn 370 369 371 23 (parallel [
            (set (reg:DI 1 dx [orig:249 D.25622 ] [249])
                (ashift:DI (reg:DI 0 ax [orig:248 D.25622 ] [248])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 497 {*ashldi3_1}
     (nil))
(insn 371 370 372 23 (set (reg/f:DI 0 ax [441])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:421 89 {*movdi_internal}
     (nil))
(insn 372 371 373 23 (parallel [
            (set (reg/f:DI 0 ax [orig:250 D.25624 ] [250])
                (plus:DI (reg/f:DI 0 ax [441])
                    (reg:DI 1 dx [orig:249 D.25622 ] [249])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:249 D.25622 ] [249]))
        (nil)))
(insn 373 372 594 23 (set (reg:SF 25 xmm4 [orig:251 D.25620 ] [251])
        (mem:SF (reg/f:DI 0 ax [orig:250 D.25624 ] [250]) [0 *_186+0 S4 A32])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(insn 594 373 639 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 25 xmm4 [orig:251 D.25620 ] [251])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(note 639 594 623 23 NOTE_INSN_DELETED)
(note 623 639 374 23 NOTE_INSN_DELETED)
(insn 374 623 595 23 (set (reg:SI 0 ax [442])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 595 374 375 23 (set (reg:SI 1 dx [443])
        (reg:SI 0 ax [442])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 375 595 376 23 (parallel [
            (set (reg:SI 1 dx [443])
                (lshiftrt:SI (reg:SI 1 dx [443])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 529 {*lshrsi3_1}
     (nil))
(insn 376 375 377 23 (parallel [
            (set (reg:SI 0 ax [444])
                (plus:SI (reg:SI 0 ax [442])
                    (reg:SI 1 dx [443])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 220 {*addsi_1}
     (nil))
(insn 377 376 378 23 (parallel [
            (set (reg:SI 0 ax [445])
                (ashiftrt:SI (reg:SI 0 ax [444])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 530 {*ashrsi3_1}
     (nil))
(insn 378 377 379 23 (set (reg:SI 0 ax [orig:252 D.25621 ] [252])
        (reg:SI 0 ax [445])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 379 378 380 23 (set (reg:DF 22 xmm1 [orig:253 D.25625 ] [253])
        (float:DF (reg:SI 0 ax [orig:252 D.25621 ] [252]))) ge2fitman_preproc.cpp:421 201 {*floatsidf2_sse}
     (nil))
(insn 380 379 381 23 (set (reg:DF 21 xmm0 [orig:254 D.25625 ] [254])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:421 152 {*extendsfdf2_sse}
     (nil))
(insn 381 380 382 23 (set (reg:DF 22 xmm1 [orig:255 D.25625 ] [255])
        (mult:DF (reg:DF 22 xmm1 [orig:253 D.25625 ] [253])
            (reg:DF 21 xmm0 [orig:254 D.25625 ] [254]))) ge2fitman_preproc.cpp:421 776 {*fop_df_comm_sse}
     (nil))
(insn 382 381 383 23 (set (reg:DF 21 xmm0 [orig:256 D.25625 ] [256])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:421 152 {*extendsfdf2_sse}
     (nil))
(insn 383 382 384 23 (set (reg:DF 21 xmm0 [orig:257 D.25625 ] [257])
        (plus:DF (reg:DF 21 xmm0 [orig:256 D.25625 ] [256])
            (reg:DF 22 xmm1 [orig:255 D.25625 ] [255]))) ge2fitman_preproc.cpp:421 776 {*fop_df_comm_sse}
     (nil))
(insn 384 383 385 23 (set (reg:V2DF 22 xmm1 [446])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:421 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 385 384 386 23 (parallel [
            (set (reg:DF 21 xmm0 [orig:258 D.25625 ] [258])
                (abs:DF (reg:DF 21 xmm0 [orig:257 D.25625 ] [257])))
            (use (reg:V2DF 22 xmm1 [446]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:257 D.25625 ] [257]))
        (nil)))
(insn 386 385 387 23 (set (reg:DF 22 xmm1 [447])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:421 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 387 386 388 23 (set (reg:DF 22 xmm1 [orig:259 D.25625 ] [259])
        (mult:DF (reg:DF 22 xmm1 [447])
            (reg:DF 21 xmm0 [orig:258 D.25625 ] [258]))) ge2fitman_preproc.cpp:421 776 {*fop_df_comm_sse}
     (nil))
(insn 388 387 389 23 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:421 89 {*movdi_internal}
     (nil))
(insn 389 388 390 23 (parallel [
            (set (reg/f:DI 0 ax [orig:260 D.25626 ] [260])
                (plus:DI (reg/f:DI 0 ax [448])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 390 389 391 23 (set (reg:SF 21 xmm0 [orig:261 D.25620 ] [261])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:260 D.25626 ] [260])
                (const_int 28 [0x1c])) [0 _196->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(insn 391 390 392 23 (set (reg:DF 21 xmm0 [orig:262 D.25625 ] [262])
        (float_extend:DF (reg:SF 21 xmm0 [orig:261 D.25620 ] [261]))) ge2fitman_preproc.cpp:421 152 {*extendsfdf2_sse}
     (nil))
(insn 392 391 394 23 (set (reg:DF 21 xmm0 [orig:263 D.25625 ] [263])
        (mult:DF (reg:DF 21 xmm0 [orig:262 D.25625 ] [262])
            (reg:DF 22 xmm1 [orig:259 D.25625 ] [259]))) ge2fitman_preproc.cpp:421 776 {*fop_df_comm_sse}
     (nil))
(call_insn 394 392 396 23 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b4e6073a100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:421 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 396 394 599 23 (set (reg:SF 21 xmm0 [orig:265 D.25620 ] [265])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:264 D.25625 ] [264]))) ge2fitman_preproc.cpp:421 157 {*truncdfsf_fast_sse}
     (nil))
(note 599 396 629 23 NOTE_INSN_DELETED)
(note 629 599 397 23 NOTE_INSN_DELETED)
(insn 397 629 598 23 (set (reg:SF 21 xmm0 [orig:266 D.25620 ] [266])
        (mult:SF (reg:SF 21 xmm0 [orig:266 D.25620 ] [266])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:421 775 {*fop_sf_comm_sse}
     (nil))
(insn 598 397 398 23 (set (reg:SF 0 ax [orig:266 D.25620 ] [266])
        (reg:SF 21 xmm0 [orig:266 D.25620 ] [266])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(insn 398 598 399 23 (set (mem:SF (reg/f:DI 3 bx [orig:247 D.25624 ] [247]) [0 *_183+0 S4 A32])
        (reg:SF 0 ax [orig:266 D.25620 ] [266])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(insn 399 398 400 23 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 400 399 401 23 (set (reg:DI 0 ax [orig:267 D.25623 ] [267])
        (sign_extend:DI (reg:SI 0 ax [449]))) ge2fitman_preproc.cpp:422 142 {*extendsidi2_rex64}
     (nil))
(insn 401 400 402 23 (parallel [
            (set (reg:DI 0 ax [orig:268 D.25623 ] [268])
                (plus:DI (reg:DI 0 ax [orig:267 D.25623 ] [267])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 221 {*adddi_1}
     (nil))
(insn 402 401 403 23 (parallel [
            (set (reg:DI 1 dx [orig:269 D.25623 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:268 D.25623 ] [268])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 497 {*ashldi3_1}
     (nil))
(insn 403 402 404 23 (set (reg/f:DI 0 ax [450])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:422 89 {*movdi_internal}
     (nil))
(insn 404 403 405 23 (parallel [
            (set (reg/f:DI 3 bx [orig:270 D.25624 ] [270])
                (plus:DI (reg:DI 1 dx [orig:269 D.25623 ] [269])
                    (reg/f:DI 0 ax [450])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:269 D.25623 ] [269]))
        (nil)))
(insn 405 404 406 23 (set (reg:SI 0 ax [451])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 406 405 407 23 (set (reg:DI 0 ax [orig:271 D.25623 ] [271])
        (sign_extend:DI (reg:SI 0 ax [451]))) ge2fitman_preproc.cpp:422 142 {*extendsidi2_rex64}
     (nil))
(insn 407 406 408 23 (parallel [
            (set (reg:DI 0 ax [orig:272 D.25623 ] [272])
                (plus:DI (reg:DI 0 ax [orig:271 D.25623 ] [271])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 221 {*adddi_1}
     (nil))
(insn 408 407 409 23 (parallel [
            (set (reg:DI 1 dx [orig:273 D.25623 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:272 D.25623 ] [272])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 497 {*ashldi3_1}
     (nil))
(insn 409 408 410 23 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:422 89 {*movdi_internal}
     (nil))
(insn 410 409 411 23 (parallel [
            (set (reg/f:DI 0 ax [orig:274 D.25624 ] [274])
                (plus:DI (reg/f:DI 0 ax [452])
                    (reg:DI 1 dx [orig:273 D.25623 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:273 D.25623 ] [273]))
        (nil)))
(insn 411 410 600 23 (set (reg:SF 26 xmm5 [orig:275 D.25620 ] [275])
        (mem:SF (reg/f:DI 0 ax [orig:274 D.25624 ] [274]) [0 *_210+0 S4 A32])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(insn 600 411 638 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 26 xmm5 [orig:275 D.25620 ] [275])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(note 638 600 622 23 NOTE_INSN_DELETED)
(note 622 638 412 23 NOTE_INSN_DELETED)
(insn 412 622 601 23 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 601 412 413 23 (set (reg:SI 1 dx [454])
        (reg:SI 0 ax [453])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 413 601 414 23 (parallel [
            (set (reg:SI 1 dx [454])
                (lshiftrt:SI (reg:SI 1 dx [454])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 529 {*lshrsi3_1}
     (nil))
(insn 414 413 415 23 (parallel [
            (set (reg:SI 0 ax [455])
                (plus:SI (reg:SI 0 ax [453])
                    (reg:SI 1 dx [454])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 220 {*addsi_1}
     (nil))
(insn 415 414 416 23 (parallel [
            (set (reg:SI 0 ax [456])
                (ashiftrt:SI (reg:SI 0 ax [455])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 530 {*ashrsi3_1}
     (nil))
(insn 416 415 417 23 (set (reg:SI 0 ax [orig:276 D.25621 ] [276])
        (reg:SI 0 ax [456])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 417 416 418 23 (set (reg:DF 22 xmm1 [orig:277 D.25625 ] [277])
        (float:DF (reg:SI 0 ax [orig:276 D.25621 ] [276]))) ge2fitman_preproc.cpp:422 201 {*floatsidf2_sse}
     (nil))
(insn 418 417 419 23 (set (reg:DF 21 xmm0 [orig:278 D.25625 ] [278])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:422 152 {*extendsfdf2_sse}
     (nil))
(insn 419 418 420 23 (set (reg:DF 22 xmm1 [orig:279 D.25625 ] [279])
        (mult:DF (reg:DF 22 xmm1 [orig:277 D.25625 ] [277])
            (reg:DF 21 xmm0 [orig:278 D.25625 ] [278]))) ge2fitman_preproc.cpp:422 776 {*fop_df_comm_sse}
     (nil))
(insn 420 419 421 23 (set (reg:DF 21 xmm0 [orig:280 D.25625 ] [280])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:422 152 {*extendsfdf2_sse}
     (nil))
(insn 421 420 422 23 (set (reg:DF 21 xmm0 [orig:281 D.25625 ] [281])
        (plus:DF (reg:DF 21 xmm0 [orig:280 D.25625 ] [280])
            (reg:DF 22 xmm1 [orig:279 D.25625 ] [279]))) ge2fitman_preproc.cpp:422 776 {*fop_df_comm_sse}
     (nil))
(insn 422 421 423 23 (set (reg:V2DF 22 xmm1 [457])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:422 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 423 422 424 23 (parallel [
            (set (reg:DF 21 xmm0 [orig:282 D.25625 ] [282])
                (abs:DF (reg:DF 21 xmm0 [orig:281 D.25625 ] [281])))
            (use (reg:V2DF 22 xmm1 [457]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:281 D.25625 ] [281]))
        (nil)))
(insn 424 423 425 23 (set (reg:DF 22 xmm1 [458])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:422 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 425 424 426 23 (set (reg:DF 22 xmm1 [orig:283 D.25625 ] [283])
        (mult:DF (reg:DF 22 xmm1 [458])
            (reg:DF 21 xmm0 [orig:282 D.25625 ] [282]))) ge2fitman_preproc.cpp:422 776 {*fop_df_comm_sse}
     (nil))
(insn 426 425 427 23 (set (reg/f:DI 0 ax [459])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:422 89 {*movdi_internal}
     (nil))
(insn 427 426 428 23 (parallel [
            (set (reg/f:DI 0 ax [orig:284 D.25626 ] [284])
                (plus:DI (reg/f:DI 0 ax [459])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 428 427 429 23 (set (reg:SF 21 xmm0 [orig:285 D.25620 ] [285])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:284 D.25626 ] [284])
                (const_int 28 [0x1c])) [0 _220->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(insn 429 428 430 23 (set (reg:DF 21 xmm0 [orig:286 D.25625 ] [286])
        (float_extend:DF (reg:SF 21 xmm0 [orig:285 D.25620 ] [285]))) ge2fitman_preproc.cpp:422 152 {*extendsfdf2_sse}
     (nil))
(insn 430 429 432 23 (set (reg:DF 21 xmm0 [orig:287 D.25625 ] [287])
        (mult:DF (reg:DF 21 xmm0 [orig:286 D.25625 ] [286])
            (reg:DF 22 xmm1 [orig:283 D.25625 ] [283]))) ge2fitman_preproc.cpp:422 776 {*fop_df_comm_sse}
     (nil))
(call_insn 432 430 434 23 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b4e6073a100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:422 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 434 432 605 23 (set (reg:SF 21 xmm0 [orig:289 D.25620 ] [289])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:288 D.25625 ] [288]))) ge2fitman_preproc.cpp:422 157 {*truncdfsf_fast_sse}
     (nil))
(note 605 434 628 23 NOTE_INSN_DELETED)
(note 628 605 435 23 NOTE_INSN_DELETED)
(insn 435 628 604 23 (set (reg:SF 21 xmm0 [orig:290 D.25620 ] [290])
        (mult:SF (reg:SF 21 xmm0 [orig:290 D.25620 ] [290])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:422 775 {*fop_sf_comm_sse}
     (nil))
(insn 604 435 436 23 (set (reg:SF 0 ax [orig:290 D.25620 ] [290])
        (reg:SF 21 xmm0 [orig:290 D.25620 ] [290])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(insn 436 604 557 23 (set (mem:SF (reg/f:DI 3 bx [orig:270 D.25624 ] [270]) [0 *_206+0 S4 A32])
        (reg:SF 0 ax [orig:290 D.25620 ] [290])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(jump_insn 557 436 558 23 (set (pc)
        (label_ref 520)) ge2fitman_preproc.cpp:422 636 {jump}
     (nil)
 -> 520)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 558 557 439)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 291 460
(code_label 439 558 440 24 94 "" [2 uses])
(note 440 439 441 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 441 440 442 24 (set (reg/f:DI 0 ax [460])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:423 89 {*movdi_internal}
     (nil))
(insn 442 441 443 24 (set (reg:SI 0 ax [orig:291 D.25621 ] [291])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [460])
                (const_int 40 [0x28])) [0 preprocess_11(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:423 90 {*movsi_internal}
     (nil))
(insn 443 442 444 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:291 D.25621 ] [291])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:423 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 444 443 445 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 520)
            (pc))) ge2fitman_preproc.cpp:423 596 {*jcc_1}
     (nil)
 -> 520)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482
(note 445 444 446 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 446 445 447 25 (set (reg:SI 0 ax [461])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 447 446 448 25 (set (reg:DI 0 ax [orig:292 D.25622 ] [292])
        (sign_extend:DI (reg:SI 0 ax [461]))) ge2fitman_preproc.cpp:424 142 {*extendsidi2_rex64}
     (nil))
(insn 448 447 449 25 (parallel [
            (set (reg:DI 1 dx [orig:293 D.25622 ] [293])
                (ashift:DI (reg:DI 0 ax [orig:292 D.25622 ] [292])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 497 {*ashldi3_1}
     (nil))
(insn 449 448 450 25 (set (reg/f:DI 0 ax [462])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 450 449 451 25 (parallel [
            (set (reg/f:DI 3 bx [orig:294 D.25624 ] [294])
                (plus:DI (reg:DI 1 dx [orig:293 D.25622 ] [293])
                    (reg/f:DI 0 ax [462])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:293 D.25622 ] [293]))
        (nil)))
(insn 451 450 452 25 (set (reg:SI 0 ax [463])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 452 451 453 25 (set (reg:DI 0 ax [orig:295 D.25622 ] [295])
        (sign_extend:DI (reg:SI 0 ax [463]))) ge2fitman_preproc.cpp:424 142 {*extendsidi2_rex64}
     (nil))
(insn 453 452 454 25 (parallel [
            (set (reg:DI 1 dx [orig:296 D.25622 ] [296])
                (ashift:DI (reg:DI 0 ax [orig:295 D.25622 ] [295])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 497 {*ashldi3_1}
     (nil))
(insn 454 453 455 25 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 455 454 456 25 (parallel [
            (set (reg/f:DI 0 ax [orig:297 D.25624 ] [297])
                (plus:DI (reg/f:DI 0 ax [464])
                    (reg:DI 1 dx [orig:296 D.25622 ] [296])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:296 D.25622 ] [296]))
        (nil)))
(insn 456 455 606 25 (set (reg:SF 27 xmm6 [orig:298 D.25620 ] [298])
        (mem:SF (reg/f:DI 0 ax [orig:297 D.25624 ] [297]) [0 *_233+0 S4 A32])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(insn 606 456 641 25 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 27 xmm6 [orig:298 D.25620 ] [298])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(note 641 606 625 25 NOTE_INSN_DELETED)
(note 625 641 457 25 NOTE_INSN_DELETED)
(insn 457 625 607 25 (set (reg:SI 0 ax [465])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 607 457 458 25 (set (reg:SI 1 dx [466])
        (reg:SI 0 ax [465])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 458 607 459 25 (parallel [
            (set (reg:SI 1 dx [466])
                (lshiftrt:SI (reg:SI 1 dx [466])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 529 {*lshrsi3_1}
     (nil))
(insn 459 458 460 25 (parallel [
            (set (reg:SI 0 ax [467])
                (plus:SI (reg:SI 0 ax [465])
                    (reg:SI 1 dx [466])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 220 {*addsi_1}
     (nil))
(insn 460 459 461 25 (parallel [
            (set (reg:SI 0 ax [468])
                (ashiftrt:SI (reg:SI 0 ax [467])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 530 {*ashrsi3_1}
     (nil))
(insn 461 460 462 25 (set (reg:SI 0 ax [orig:299 D.25621 ] [299])
        (reg:SI 0 ax [468])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 462 461 463 25 (set (reg:DF 22 xmm1 [orig:300 D.25625 ] [300])
        (float:DF (reg:SI 0 ax [orig:299 D.25621 ] [299]))) ge2fitman_preproc.cpp:424 201 {*floatsidf2_sse}
     (nil))
(insn 463 462 464 25 (set (reg:DF 21 xmm0 [orig:301 D.25625 ] [301])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:424 152 {*extendsfdf2_sse}
     (nil))
(insn 464 463 465 25 (set (reg:DF 22 xmm1 [orig:302 D.25625 ] [302])
        (mult:DF (reg:DF 22 xmm1 [orig:300 D.25625 ] [300])
            (reg:DF 21 xmm0 [orig:301 D.25625 ] [301]))) ge2fitman_preproc.cpp:424 776 {*fop_df_comm_sse}
     (nil))
(insn 465 464 466 25 (set (reg:DF 21 xmm0 [orig:303 D.25625 ] [303])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:424 152 {*extendsfdf2_sse}
     (nil))
(insn 466 465 467 25 (set (reg:DF 21 xmm0 [orig:304 D.25625 ] [304])
        (plus:DF (reg:DF 21 xmm0 [orig:303 D.25625 ] [303])
            (reg:DF 22 xmm1 [orig:302 D.25625 ] [302]))) ge2fitman_preproc.cpp:424 776 {*fop_df_comm_sse}
     (nil))
(insn 467 466 468 25 (set (reg:V2DF 22 xmm1 [469])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:424 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 468 467 469 25 (parallel [
            (set (reg:DF 21 xmm0 [orig:305 D.25625 ] [305])
                (abs:DF (reg:DF 21 xmm0 [orig:304 D.25625 ] [304])))
            (use (reg:V2DF 22 xmm1 [469]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:304 D.25625 ] [304]))
        (nil)))
(insn 469 468 470 25 (set (reg:DF 22 xmm1 [470])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:424 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 470 469 471 25 (set (reg:DF 22 xmm1 [orig:306 D.25625 ] [306])
        (mult:DF (reg:DF 22 xmm1 [470])
            (reg:DF 21 xmm0 [orig:305 D.25625 ] [305]))) ge2fitman_preproc.cpp:424 776 {*fop_df_comm_sse}
     (nil))
(insn 471 470 472 25 (set (reg/f:DI 0 ax [471])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 472 471 473 25 (parallel [
            (set (reg/f:DI 0 ax [orig:307 D.25626 ] [307])
                (plus:DI (reg/f:DI 0 ax [471])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 473 472 474 25 (set (reg:SF 21 xmm0 [orig:308 D.25620 ] [308])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:307 D.25626 ] [307])
                (const_int 28 [0x1c])) [0 _243->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(insn 474 473 475 25 (set (reg:DF 21 xmm0 [orig:309 D.25625 ] [309])
        (float_extend:DF (reg:SF 21 xmm0 [orig:308 D.25620 ] [308]))) ge2fitman_preproc.cpp:424 152 {*extendsfdf2_sse}
     (nil))
(insn 475 474 477 25 (set (reg:DF 21 xmm0 [orig:310 D.25625 ] [310])
        (mult:DF (reg:DF 21 xmm0 [orig:309 D.25625 ] [309])
            (reg:DF 22 xmm1 [orig:306 D.25625 ] [306]))) ge2fitman_preproc.cpp:424 776 {*fop_df_comm_sse}
     (nil))
(call_insn 477 475 479 25 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b4e6073a100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:424 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 479 477 611 25 (set (reg:SF 21 xmm0 [orig:312 D.25620 ] [312])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:311 D.25625 ] [311]))) ge2fitman_preproc.cpp:424 157 {*truncdfsf_fast_sse}
     (nil))
(note 611 479 627 25 NOTE_INSN_DELETED)
(note 627 611 480 25 NOTE_INSN_DELETED)
(insn 480 627 610 25 (set (reg:SF 21 xmm0 [orig:313 D.25620 ] [313])
        (mult:SF (reg:SF 21 xmm0 [orig:313 D.25620 ] [313])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:424 775 {*fop_sf_comm_sse}
     (nil))
(insn 610 480 481 25 (set (reg:SF 0 ax [orig:313 D.25620 ] [313])
        (reg:SF 21 xmm0 [orig:313 D.25620 ] [313])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(insn 481 610 482 25 (set (mem:SF (reg/f:DI 3 bx [orig:294 D.25624 ] [294]) [0 *_230+0 S4 A32])
        (reg:SF 0 ax [orig:313 D.25620 ] [313])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(insn 482 481 483 25 (set (reg:SI 0 ax [472])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 483 482 484 25 (set (reg:DI 0 ax [orig:314 D.25623 ] [314])
        (sign_extend:DI (reg:SI 0 ax [472]))) ge2fitman_preproc.cpp:425 142 {*extendsidi2_rex64}
     (nil))
(insn 484 483 485 25 (parallel [
            (set (reg:DI 0 ax [orig:315 D.25623 ] [315])
                (plus:DI (reg:DI 0 ax [orig:314 D.25623 ] [314])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 221 {*adddi_1}
     (nil))
(insn 485 484 486 25 (parallel [
            (set (reg:DI 1 dx [orig:316 D.25623 ] [316])
                (ashift:DI (reg:DI 0 ax [orig:315 D.25623 ] [315])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 497 {*ashldi3_1}
     (nil))
(insn 486 485 487 25 (set (reg/f:DI 0 ax [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:425 89 {*movdi_internal}
     (nil))
(insn 487 486 488 25 (parallel [
            (set (reg/f:DI 3 bx [orig:317 D.25624 ] [317])
                (plus:DI (reg:DI 1 dx [orig:316 D.25623 ] [316])
                    (reg/f:DI 0 ax [473])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:316 D.25623 ] [316]))
        (nil)))
(insn 488 487 489 25 (set (reg:SI 0 ax [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 489 488 490 25 (set (reg:DI 0 ax [orig:318 D.25623 ] [318])
        (sign_extend:DI (reg:SI 0 ax [474]))) ge2fitman_preproc.cpp:425 142 {*extendsidi2_rex64}
     (nil))
(insn 490 489 491 25 (parallel [
            (set (reg:DI 0 ax [orig:319 D.25623 ] [319])
                (plus:DI (reg:DI 0 ax [orig:318 D.25623 ] [318])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 221 {*adddi_1}
     (nil))
(insn 491 490 492 25 (parallel [
            (set (reg:DI 1 dx [orig:320 D.25623 ] [320])
                (ashift:DI (reg:DI 0 ax [orig:319 D.25623 ] [319])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 497 {*ashldi3_1}
     (nil))
(insn 492 491 493 25 (set (reg/f:DI 0 ax [475])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:425 89 {*movdi_internal}
     (nil))
(insn 493 492 494 25 (parallel [
            (set (reg/f:DI 0 ax [orig:321 D.25624 ] [321])
                (plus:DI (reg/f:DI 0 ax [475])
                    (reg:DI 1 dx [orig:320 D.25623 ] [320])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:320 D.25623 ] [320]))
        (nil)))
(insn 494 493 612 25 (set (reg:SF 28 xmm7 [orig:322 D.25620 ] [322])
        (mem:SF (reg/f:DI 0 ax [orig:321 D.25624 ] [321]) [0 *_257+0 S4 A32])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
(insn 612 494 640 25 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 28 xmm7 [orig:322 D.25620 ] [322])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
(note 640 612 624 25 NOTE_INSN_DELETED)
(note 624 640 495 25 NOTE_INSN_DELETED)
(insn 495 624 613 25 (set (reg:SI 0 ax [476])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 613 495 496 25 (set (reg:SI 1 dx [477])
        (reg:SI 0 ax [476])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 496 613 497 25 (parallel [
            (set (reg:SI 1 dx [477])
                (lshiftrt:SI (reg:SI 1 dx [477])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 529 {*lshrsi3_1}
     (nil))
(insn 497 496 498 25 (parallel [
            (set (reg:SI 0 ax [478])
                (plus:SI (reg:SI 0 ax [476])
                    (reg:SI 1 dx [477])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 220 {*addsi_1}
     (nil))
(insn 498 497 499 25 (parallel [
            (set (reg:SI 0 ax [479])
                (ashiftrt:SI (reg:SI 0 ax [478])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 530 {*ashrsi3_1}
     (nil))
(insn 499 498 500 25 (set (reg:SI 0 ax [orig:323 D.25621 ] [323])
        (reg:SI 0 ax [479])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 500 499 501 25 (set (reg:DF 22 xmm1 [orig:324 D.25625 ] [324])
        (float:DF (reg:SI 0 ax [orig:323 D.25621 ] [323]))) ge2fitman_preproc.cpp:425 201 {*floatsidf2_sse}
     (nil))
(insn 501 500 502 25 (set (reg:DF 21 xmm0 [orig:325 D.25625 ] [325])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:425 152 {*extendsfdf2_sse}
     (nil))
(insn 502 501 503 25 (set (reg:DF 22 xmm1 [orig:326 D.25625 ] [326])
        (mult:DF (reg:DF 22 xmm1 [orig:324 D.25625 ] [324])
            (reg:DF 21 xmm0 [orig:325 D.25625 ] [325]))) ge2fitman_preproc.cpp:425 776 {*fop_df_comm_sse}
     (nil))
(insn 503 502 504 25 (set (reg:DF 21 xmm0 [orig:327 D.25625 ] [327])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:425 152 {*extendsfdf2_sse}
     (nil))
(insn 504 503 505 25 (set (reg:DF 21 xmm0 [orig:328 D.25625 ] [328])
        (plus:DF (reg:DF 21 xmm0 [orig:327 D.25625 ] [327])
            (reg:DF 22 xmm1 [orig:326 D.25625 ] [326]))) ge2fitman_preproc.cpp:425 776 {*fop_df_comm_sse}
     (nil))
(insn 505 504 506 25 (set (reg:V2DF 22 xmm1 [480])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:425 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 506 505 507 25 (parallel [
            (set (reg:DF 21 xmm0 [orig:329 D.25625 ] [329])
                (abs:DF (reg:DF 21 xmm0 [orig:328 D.25625 ] [328])))
            (use (reg:V2DF 22 xmm1 [480]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:328 D.25625 ] [328]))
        (nil)))
(insn 507 506 508 25 (set (reg:DF 22 xmm1 [481])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:425 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 508 507 509 25 (set (reg:DF 22 xmm1 [orig:330 D.25625 ] [330])
        (mult:DF (reg:DF 22 xmm1 [481])
            (reg:DF 21 xmm0 [orig:329 D.25625 ] [329]))) ge2fitman_preproc.cpp:425 776 {*fop_df_comm_sse}
     (nil))
(insn 509 508 510 25 (set (reg/f:DI 0 ax [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:425 89 {*movdi_internal}
     (nil))
(insn 510 509 511 25 (parallel [
            (set (reg/f:DI 0 ax [orig:331 D.25626 ] [331])
                (plus:DI (reg/f:DI 0 ax [482])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 511 510 512 25 (set (reg:SF 21 xmm0 [orig:332 D.25620 ] [332])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:331 D.25626 ] [331])
                (const_int 28 [0x1c])) [0 _267->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
(insn 512 511 513 25 (set (reg:DF 21 xmm0 [orig:333 D.25625 ] [333])
        (float_extend:DF (reg:SF 21 xmm0 [orig:332 D.25620 ] [332]))) ge2fitman_preproc.cpp:425 152 {*extendsfdf2_sse}
     (nil))
(insn 513 512 515 25 (set (reg:DF 21 xmm0 [orig:334 D.25625 ] [334])
        (mult:DF (reg:DF 21 xmm0 [orig:333 D.25625 ] [333])
            (reg:DF 22 xmm1 [orig:330 D.25625 ] [330]))) ge2fitman_preproc.cpp:425 776 {*fop_df_comm_sse}
     (nil))
(call_insn 515 513 517 25 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b4e6073a100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:425 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 517 515 617 25 (set (reg:SF 21 xmm0 [orig:336 D.25620 ] [336])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:335 D.25625 ] [335]))) ge2fitman_preproc.cpp:425 157 {*truncdfsf_fast_sse}
     (nil))
(note 617 517 626 25 NOTE_INSN_DELETED)
(note 626 617 518 25 NOTE_INSN_DELETED)
(insn 518 626 616 25 (set (reg:SF 21 xmm0 [orig:337 D.25620 ] [337])
        (mult:SF (reg:SF 21 xmm0 [orig:337 D.25620 ] [337])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:425 775 {*fop_sf_comm_sse}
     (nil))
(insn 616 518 519 25 (set (reg:SF 0 ax [orig:337 D.25620 ] [337])
        (reg:SF 21 xmm0 [orig:337 D.25620 ] [337])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
(insn 519 616 520 25 (set (mem:SF (reg/f:DI 3 bx [orig:317 D.25624 ] [317]) [0 *_253+0 S4 A32])
        (reg:SF 0 ax [orig:337 D.25620 ] [337])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              24
;;              23 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 520 519 521 26 95 "" [2 uses])
(note 521 520 522 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 522 521 523 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:419 220 {*addsi_1}
     (nil))
;;  succ:       27 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU,DFS_BACK)
;;              20 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 241 242 483
(code_label 523 522 524 27 93 "" [1 uses])
(note 524 523 525 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 525 524 526 27 (set (reg/f:DI 0 ax [483])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:419 89 {*movdi_internal}
     (nil))
(insn 526 525 527 27 (set (reg:SI 0 ax [orig:241 D.25621 ] [241])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [483])
                (const_int 324 [0x144])) [0 procpar_info_6(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:419 90 {*movsi_internal}
     (nil))
(insn 527 526 529 27 (parallel [
            (set (reg:SI 0 ax [orig:242 D.25621 ] [242])
                (ashift:SI (reg:SI 0 ax [orig:241 D.25621 ] [241])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:419 496 {*ashlsi3_1}
     (nil))
(insn 529 527 530 27 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:242 D.25621 ] [242])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:419 7 {*cmpsi_1}
     (nil))
(jump_insn 530 529 531 27 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 528)
            (pc))) ge2fitman_preproc.cpp:419 596 {*jcc_1}
     (nil)
 -> 528)
;;  succ:       21
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;;              19
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 338 339
(code_label 531 530 532 28 91 "" [1 uses])
(note 532 531 533 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 533 532 536 28 (set (reg:SI 0 ax [orig:338 D.25621 ] [338])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:431 90 {*movsi_internal}
     (nil))
(insn 536 533 540 28 (set (reg:SI 0 ax [orig:339 <retval> ] [339])
        (reg:SI 0 ax [orig:338 D.25621 ] [338])) ge2fitman_preproc.cpp:431 90 {*movsi_internal}
     (nil))
(insn 540 536 541 28 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:339 <retval> ] [339])) ge2fitman_preproc.cpp:433 90 {*movsi_internal}
     (nil))
(insn 541 540 559 28 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:433 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 559 541 0 NOTE_INSN_DELETED)

;; Function int quecc(float*, float*, float*, Procpar_info*, Preprocess*) (_Z5queccPfS_S_P12Procpar_infoP10Preprocess, funcdef_no=1028, decl_uid=24016, symbol_order=235)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 26:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 32:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 34:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 44:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 51:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 60:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 74:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 75:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 80
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 81:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 94:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 95:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 101:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 117:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 131:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 132:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 138:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 151:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 152:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 162
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 169
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 170:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 172:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 178
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 179:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 186
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 187:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 189
	 Choosing alt 0 in insn 189:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 193:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 194:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 199
	 Choosing alt 0 in insn 199:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 200:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 207
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 208:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 213:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 214:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 215:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 222:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 223:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 228:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 229:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=353 from oldreg=313, assigning class SSE_REGS to r353
  229: r353:DF=r353:DF/[frame:DI-0x28]
      REG_DEAD r314:DF
    Inserting insn reload before:
  414: r353:DF=r314:DF
    Inserting insn reload after:
  415: r313:DF=r353:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 415:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 230:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 233:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 234:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=354 from oldreg=315, assigning class SSE_REGS to r354
  234: r354:DF=r354:DF-[frame:DI-0x30]
      REG_DEAD r316:DF
    Inserting insn reload before:
  416: r354:DF=r316:DF
    Inserting insn reload after:
  417: r315:DF=r354:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 417:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 235:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 238:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 241:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=355 from oldreg=197, assigning class SSE_REGS to r355
  241: r355:SF=float_trunc([frame:DI-0x70])
    Inserting insn reload after:
  418: r197:SF=r355:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 418:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 242:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=356, assigning class NO_REGS to secondary r356
  243: r356:DF=r319:DF
      REG_DEAD r319:DF
    Inserting the sec. move after:
  419: xmm0:DF=r356:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 419:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 247
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=357 from oldreg=200, assigning class SSE_REGS to r357
      Creating newreg=358 from oldreg=197, assigning class SSE_REGS to r358
      Making reload reg 358 for reg 197 optional
  247: r357:SF=r357:SF*r358:SF
      REG_DEAD r199:SF
      REG_DEAD r197:SF
    Inserting insn reload before:
  420: r357:SF=r199:SF
  422: r358:SF=r197:SF
    Inserting insn reload after:
  421: r200:SF=r357:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 421:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 422:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 248:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 255:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=359 from oldreg=205, assigning class SSE_REGS to r359
  255: r359:SF=float_trunc([frame:DI-0x70])
    Inserting insn reload after:
  423: r205:SF=r359:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 423:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 256:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=360, assigning class NO_REGS to secondary r360
  257: r360:DF=r322:DF
      REG_DEAD r322:DF
    Inserting the sec. move after:
  424: xmm0:DF=r360:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 424:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=361 from oldreg=208, assigning class SSE_REGS to r361
      Creating newreg=362 from oldreg=205, assigning class SSE_REGS to r362
      Making reload reg 362 for reg 205 optional
  261: r361:SF=r361:SF*r362:SF
      REG_DEAD r207:SF
      REG_DEAD r205:SF
    Inserting insn reload before:
  425: r361:SF=r207:SF
  427: r362:SF=r205:SF
    Inserting insn reload after:
  426: r208:SF=r361:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 426:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 427:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 262:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 263:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 270:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 271:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 276:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 277:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=363 from oldreg=325, assigning class SSE_REGS to r363
  277: r363:DF=r363:DF/[frame:DI-0x28]
      REG_DEAD r326:DF
    Inserting insn reload before:
  428: r363:DF=r326:DF
    Inserting insn reload after:
  429: r325:DF=r363:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 429:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 278:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 281:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 282:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=364 from oldreg=327, assigning class SSE_REGS to r364
  282: r364:DF=r364:DF-[frame:DI-0x30]
      REG_DEAD r328:DF
    Inserting insn reload before:
  430: r364:DF=r328:DF
    Inserting insn reload after:
  431: r327:DF=r364:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 431:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 283:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 289:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=365 from oldreg=212, assigning class SSE_REGS to r365
  289: r365:SF=float_trunc([frame:DI-0x68])
    Inserting insn reload after:
  432: r212:SF=r365:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 432:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 290:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=366, assigning class NO_REGS to secondary r366
  291: r366:DF=r331:DF
      REG_DEAD r331:DF
    Inserting the sec. move after:
  433: xmm0:DF=r366:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 433:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 295
	 Choosing alt 0 in insn 295:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=367 from oldreg=215, assigning class SSE_REGS to r367
      Creating newreg=368 from oldreg=212, assigning class SSE_REGS to r368
      Making reload reg 368 for reg 212 optional
  295: r367:SF=r367:SF*r368:SF
      REG_DEAD r214:SF
      REG_DEAD r212:SF
    Inserting insn reload before:
  434: r367:SF=r214:SF
  436: r368:SF=r212:SF
    Inserting insn reload after:
  435: r215:SF=r367:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 435:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 436:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 296:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 299:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 303:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=369 from oldreg=220, assigning class SSE_REGS to r369
  303: r369:SF=float_trunc([frame:DI-0x68])
    Inserting insn reload after:
  437: r220:SF=r369:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 437:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 304:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=370, assigning class NO_REGS to secondary r370
  305: r370:DF=r334:DF
      REG_DEAD r334:DF
    Inserting the sec. move after:
  438: xmm0:DF=r370:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 438:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=371 from oldreg=223, assigning class SSE_REGS to r371
      Creating newreg=372 from oldreg=220, assigning class SSE_REGS to r372
      Making reload reg 372 for reg 220 optional
  309: r371:SF=r371:SF*r372:SF
      REG_DEAD r222:SF
      REG_DEAD r220:SF
    Inserting insn reload before:
  439: r371:SF=r222:SF
  441: r372:SF=r220:SF
    Inserting insn reload after:
  440: r223:SF=r371:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 440:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 441:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 310:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 315:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 316:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=373 from oldreg=335, assigning class SSE_REGS to r373
  316: r373:DF=r373:DF-[frame:DI-0x48]
      REG_DEAD r336:DF
    Inserting insn reload before:
  442: r373:DF=r336:DF
    Inserting insn reload after:
  443: r335:DF=r373:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 443:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 317:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 318:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 319:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=374 from oldreg=337, assigning class SSE_REGS to r374
  319: r374:DF=r374:DF-[frame:DI-0x48]
      REG_DEAD r338:DF
    Inserting insn reload before:
  444: r374:DF=r338:DF
    Inserting insn reload after:
  445: r337:DF=r374:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 445:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 320:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 323:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 326:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=375 from oldreg=227, assigning class SSE_REGS to r375
  326: r375:SF=float_trunc([frame:DI-0x60])
    Inserting insn reload after:
  446: r227:SF=r375:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 446:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 327:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=376, assigning class NO_REGS to secondary r376
  328: r376:DF=r341:DF
      REG_DEAD r341:DF
    Inserting the sec. move after:
  447: xmm0:DF=r376:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 447:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 332
	 Choosing alt 0 in insn 332:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=377 from oldreg=230, assigning class SSE_REGS to r377
      Creating newreg=378 from oldreg=227, assigning class SSE_REGS to r378
      Making reload reg 378 for reg 227 optional
  332: r377:SF=r377:SF*r378:SF
      REG_DEAD r229:SF
      REG_DEAD r227:SF
    Inserting insn reload before:
  448: r377:SF=r229:SF
  450: r378:SF=r227:SF
    Inserting insn reload after:
  449: r230:SF=r377:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 449:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 450:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 333:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 336:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 337:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 340:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=379 from oldreg=235, assigning class SSE_REGS to r379
  340: r379:SF=float_trunc([frame:DI-0x60])
    Inserting insn reload after:
  451: r235:SF=r379:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 451:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 341:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=380, assigning class NO_REGS to secondary r380
  342: r380:DF=r344:DF
      REG_DEAD r344:DF
    Inserting the sec. move after:
  452: xmm0:DF=r380:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 452:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 346
	 Choosing alt 0 in insn 346:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=381 from oldreg=238, assigning class SSE_REGS to r381
      Creating newreg=382 from oldreg=235, assigning class SSE_REGS to r382
      Making reload reg 382 for reg 235 optional
  346: r381:SF=r381:SF*r382:SF
      REG_DEAD r237:SF
      REG_DEAD r235:SF
    Inserting insn reload before:
  453: r381:SF=r237:SF
  455: r382:SF=r235:SF
    Inserting insn reload after:
  454: r238:SF=r381:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 454:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 455:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 347:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 353:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=383 from oldreg=242, assigning class SSE_REGS to r383
  353: r383:SF=float_trunc([frame:DI-0x58])
    Inserting insn reload after:
  456: r242:SF=r383:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 456:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 354:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=384, assigning class NO_REGS to secondary r384
  355: r384:DF=r347:DF
      REG_DEAD r347:DF
    Inserting the sec. move after:
  457: xmm0:DF=r384:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 457:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 359
	 Choosing alt 0 in insn 359:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=385 from oldreg=245, assigning class SSE_REGS to r385
      Creating newreg=386 from oldreg=242, assigning class SSE_REGS to r386
      Making reload reg 386 for reg 242 optional
  359: r385:SF=r385:SF*r386:SF
      REG_DEAD r244:SF
      REG_DEAD r242:SF
    Inserting insn reload before:
  458: r385:SF=r244:SF
  460: r386:SF=r242:SF
    Inserting insn reload after:
  459: r245:SF=r385:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 459:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 460:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 360:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 364:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 367:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=387 from oldreg=250, assigning class SSE_REGS to r387
  367: r387:SF=float_trunc([frame:DI-0x58])
    Inserting insn reload after:
  461: r250:SF=r387:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 461:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 368:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=388, assigning class NO_REGS to secondary r388
  369: r388:DF=r350:DF
      REG_DEAD r350:DF
    Inserting the sec. move after:
  462: xmm0:DF=r388:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 462:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 373
	 Choosing alt 0 in insn 373:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=389 from oldreg=253, assigning class SSE_REGS to r389
      Creating newreg=390 from oldreg=250, assigning class SSE_REGS to r390
      Making reload reg 390 for reg 250 optional
  373: r389:SF=r389:SF*r390:SF
      REG_DEAD r252:SF
      REG_DEAD r250:SF
    Inserting insn reload before:
  463: r389:SF=r252:SF
  465: r390:SF=r250:SF
    Inserting insn reload after:
  464: r253:SF=r389:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 464:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 465:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 374:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 377:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 384:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=391 from oldreg=205, assigning class SSE_REGS to inheritance r391
    Original reg change 205->391 (bb7):
  423: r391:SF=r359:SF
    Add original<-inheritance after:
  466: r205:SF=r391:SF

    Inheritance reuse change 205->391 (bb7):
  427: r362:SF=r391:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=392 from oldreg=197, assigning class SSE_REGS to inheritance r392
    Original reg change 197->392 (bb7):
  418: r392:SF=r355:SF
    Add original<-inheritance after:
  467: r197:SF=r392:SF

    Inheritance reuse change 197->392 (bb7):
  422: r358:SF=r392:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   466: r205:SF=r391:SF
deleting insn with uid = 466.
	    Removing dead insn:
   467: r197:SF=r392:SF
deleting insn with uid = 467.
EBB 8
EBB 9
EBB 10
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=393 from oldreg=220, assigning class SSE_REGS to inheritance r393
    Original reg change 220->393 (bb10):
  437: r393:SF=r369:SF
    Add original<-inheritance after:
  468: r220:SF=r393:SF

    Inheritance reuse change 220->393 (bb10):
  441: r372:SF=r393:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=394 from oldreg=212, assigning class SSE_REGS to inheritance r394
    Original reg change 212->394 (bb10):
  432: r394:SF=r365:SF
    Add original<-inheritance after:
  469: r212:SF=r394:SF

    Inheritance reuse change 212->394 (bb10):
  436: r368:SF=r394:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   468: r220:SF=r393:SF
deleting insn with uid = 468.
	    Removing dead insn:
   469: r212:SF=r394:SF
deleting insn with uid = 469.
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=395 from oldreg=250, assigning class SSE_REGS to inheritance r395
    Original reg change 250->395 (bb11):
  461: r395:SF=r387:SF
    Add original<-inheritance after:
  470: r250:SF=r395:SF

    Inheritance reuse change 250->395 (bb11):
  465: r390:SF=r395:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=396 from oldreg=242, assigning class SSE_REGS to inheritance r396
    Original reg change 242->396 (bb11):
  456: r396:SF=r383:SF
    Add original<-inheritance after:
  471: r242:SF=r396:SF

    Inheritance reuse change 242->396 (bb11):
  460: r386:SF=r396:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=397 from oldreg=235, assigning class SSE_REGS to inheritance r397
    Original reg change 235->397 (bb11):
  451: r397:SF=r379:SF
    Add original<-inheritance after:
  472: r235:SF=r397:SF

    Inheritance reuse change 235->397 (bb11):
  455: r382:SF=r397:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=398 from oldreg=227, assigning class SSE_REGS to inheritance r398
    Original reg change 227->398 (bb11):
  446: r398:SF=r375:SF
    Add original<-inheritance after:
  473: r227:SF=r398:SF

    Inheritance reuse change 227->398 (bb11):
  450: r378:SF=r398:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   470: r250:SF=r395:SF
deleting insn with uid = 470.
	    Removing dead insn:
   471: r242:SF=r396:SF
deleting insn with uid = 471.
	    Removing dead insn:
   472: r235:SF=r397:SF
deleting insn with uid = 472.
	    Removing dead insn:
   473: r227:SF=r398:SF
deleting insn with uid = 473.
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 395: point = 0
   Insn 394: point = 0
   Insn 390: point = 1
   Insn 387: point = 3
  BB 13
   Insn 385: point = 4
   Insn 384: point = 4
   Insn 382: point = 5
   Insn 381: point = 7
   Insn 380: point = 9
  BB 2
   Insn 403: point = 10
   Insn 35: point = 10
   Insn 34: point = 10
   Insn 33: point = 11
   Insn 32: point = 12
   Insn 31: point = 13
   Insn 30: point = 14
   Insn 29: point = 15
   Insn 28: point = 16
   Insn 27: point = 17
   Insn 26: point = 18
   Insn 25: point = 19
   Insn 24: point = 20
   Insn 23: point = 21
   Insn 22: point = 22
   Insn 21: point = 23
   Insn 20: point = 24
   Insn 19: point = 25
   Insn 18: point = 26
   Insn 17: point = 27
   Insn 16: point = 28
   Insn 15: point = 29
   Insn 14: point = 30
   Insn 13: point = 31
   Insn 12: point = 32
   Insn 11: point = 33
   Insn 10: point = 34
   Insn 6: point = 34
   Insn 5: point = 34
   Insn 4: point = 34
   Insn 3: point = 34
   Insn 2: point = 34
  BB 12
   Insn 377: point = 34
  BB 10
   Insn 411: point = 34
   Insn 310: point = 34
   Insn 440: point = 35
	Hard reg 0 is preferable by r371 with profit 1
   Insn 309: point = 37
   Insn 441: point = 38
	   Creating copy r372<-r393@1
   Insn 439: point = 40
	Hard reg 0 is preferable by r371 with profit 1
	Hard reg 21 is preferable by r371 with profit 1
   Insn 308: point = 42
   Insn 307: point = 44
   Insn 306: point = 45
   Insn 438: point = 45
	Hard reg 21 is preferable by r370 with profit 1
   Insn 305: point = 46
	Hard reg 21 is preferable by r370 with profit 1
	Hard reg 0 is preferable by r370 with profit 1
   Insn 304: point = 48
   Insn 437: point = 49
	   Creating copy r369->r393@1
   Insn 303: point = 51
   Insn 302: point = 52
   Insn 301: point = 54
   Insn 300: point = 55
   Insn 299: point = 57
   Insn 298: point = 59
   Insn 297: point = 61
   Insn 296: point = 62
   Insn 435: point = 63
	Hard reg 0 is preferable by r367 with profit 1
   Insn 295: point = 65
   Insn 436: point = 66
	   Creating copy r368<-r394@1
   Insn 434: point = 68
	Hard reg 0 is preferable by r367 with profit 1
	Hard reg 21 is preferable by r367 with profit 1
   Insn 294: point = 70
   Insn 293: point = 72
   Insn 292: point = 73
   Insn 433: point = 73
	Hard reg 21 is preferable by r366 with profit 1
   Insn 291: point = 74
	Hard reg 21 is preferable by r366 with profit 1
	Hard reg 0 is preferable by r366 with profit 1
   Insn 290: point = 76
   Insn 432: point = 77
	   Creating copy r365->r394@1
   Insn 289: point = 79
   Insn 288: point = 80
   Insn 287: point = 82
   Insn 286: point = 83
   Insn 285: point = 85
   Insn 284: point = 87
   Insn 283: point = 88
   Insn 431: point = 89
	Hard reg 0 is preferable by r364 with profit 1
   Insn 282: point = 91
   Insn 430: point = 91
	Hard reg 0 is preferable by r364 with profit 1
	Hard reg 21 is preferable by r364 with profit 1
   Insn 281: point = 93
  BB 8
   Insn 409: point = 94
   Insn 271: point = 94
   Insn 270: point = 95
  BB 9
   Insn 278: point = 96
   Insn 429: point = 97
	Hard reg 0 is preferable by r363 with profit 1
   Insn 277: point = 99
   Insn 428: point = 99
	Hard reg 0 is preferable by r363 with profit 1
	Hard reg 21 is preferable by r363 with profit 1
   Insn 276: point = 101
  BB 7
   Insn 265: point = 102
   Insn 264: point = 102
   Insn 263: point = 103
   Insn 262: point = 104
   Insn 426: point = 105
	Hard reg 0 is preferable by r361 with profit 1
   Insn 261: point = 107
   Insn 427: point = 108
	   Creating copy r362<-r391@1
   Insn 425: point = 110
	Hard reg 0 is preferable by r361 with profit 1
	Hard reg 21 is preferable by r361 with profit 1
   Insn 260: point = 112
   Insn 259: point = 114
   Insn 258: point = 115
   Insn 424: point = 115
	Hard reg 21 is preferable by r360 with profit 1
   Insn 257: point = 116
	Hard reg 21 is preferable by r360 with profit 1
	Hard reg 0 is preferable by r360 with profit 1
   Insn 256: point = 118
   Insn 423: point = 119
	   Creating copy r359->r391@1
   Insn 255: point = 121
   Insn 254: point = 122
   Insn 253: point = 124
   Insn 252: point = 125
   Insn 251: point = 127
   Insn 250: point = 129
   Insn 249: point = 131
   Insn 248: point = 132
   Insn 421: point = 133
	Hard reg 0 is preferable by r357 with profit 1
   Insn 247: point = 135
   Insn 422: point = 136
	   Creating copy r358<-r392@1
   Insn 420: point = 138
	Hard reg 0 is preferable by r357 with profit 1
	Hard reg 21 is preferable by r357 with profit 1
   Insn 246: point = 140
   Insn 245: point = 142
   Insn 244: point = 143
   Insn 419: point = 143
	Hard reg 21 is preferable by r356 with profit 1
   Insn 243: point = 144
	Hard reg 21 is preferable by r356 with profit 1
	Hard reg 0 is preferable by r356 with profit 1
   Insn 242: point = 146
   Insn 418: point = 147
	   Creating copy r355->r392@1
   Insn 241: point = 149
   Insn 240: point = 150
   Insn 239: point = 152
   Insn 238: point = 153
   Insn 237: point = 155
   Insn 236: point = 157
   Insn 235: point = 158
   Insn 417: point = 159
	Hard reg 0 is preferable by r354 with profit 1
   Insn 234: point = 161
   Insn 416: point = 161
	Hard reg 0 is preferable by r354 with profit 1
	Hard reg 21 is preferable by r354 with profit 1
   Insn 233: point = 163
  BB 5
   Insn 406: point = 164
   Insn 223: point = 164
   Insn 222: point = 165
  BB 6
   Insn 230: point = 166
   Insn 415: point = 167
	Hard reg 0 is preferable by r353 with profit 1
   Insn 229: point = 169
   Insn 414: point = 169
	Hard reg 0 is preferable by r353 with profit 1
	Hard reg 21 is preferable by r353 with profit 1
   Insn 228: point = 171
  BB 4
   Insn 217: point = 172
   Insn 216: point = 172
   Insn 215: point = 173
   Insn 214: point = 174
   Insn 213: point = 175
   Insn 212: point = 176
   Insn 211: point = 176
   Insn 210: point = 177
   Insn 209: point = 178
   Insn 208: point = 180
   Insn 207: point = 182
   Insn 206: point = 184
   Insn 205: point = 185
   Insn 204: point = 187
   Insn 203: point = 189
   Insn 202: point = 191
   Insn 201: point = 192
   Insn 200: point = 194
   Insn 199: point = 196
   Insn 198: point = 198
   Insn 197: point = 199
   Insn 196: point = 201
   Insn 195: point = 203
   Insn 194: point = 204
   Insn 193: point = 205
   Insn 192: point = 206
   Insn 191: point = 206
   Insn 190: point = 207
   Insn 189: point = 209
   Insn 188: point = 211
   Insn 187: point = 213
   Insn 186: point = 215
   Insn 185: point = 217
   Insn 184: point = 218
   Insn 183: point = 220
   Insn 182: point = 222
   Insn 181: point = 224
   Insn 180: point = 225
   Insn 179: point = 227
   Insn 178: point = 229
   Insn 177: point = 231
   Insn 176: point = 232
   Insn 175: point = 234
   Insn 174: point = 236
   Insn 173: point = 238
   Insn 172: point = 239
   Insn 171: point = 241
   Insn 170: point = 243
   Insn 169: point = 245
   Insn 168: point = 247
   Insn 167: point = 248
   Insn 166: point = 250
   Insn 165: point = 252
   Insn 164: point = 253
   Insn 163: point = 255
   Insn 162: point = 257
   Insn 161: point = 259
   Insn 160: point = 260
   Insn 159: point = 262
   Insn 158: point = 264
  BB 11
   Insn 374: point = 265
   Insn 464: point = 266
	Hard reg 0 is preferable by r389 with profit 1
   Insn 373: point = 268
   Insn 465: point = 269
	   Creating copy r390<-r395@1
   Insn 463: point = 271
	Hard reg 0 is preferable by r389 with profit 1
	Hard reg 21 is preferable by r389 with profit 1
   Insn 372: point = 273
   Insn 371: point = 275
   Insn 370: point = 276
   Insn 462: point = 276
	Hard reg 21 is preferable by r388 with profit 1
   Insn 369: point = 277
	Hard reg 21 is preferable by r388 with profit 1
	Hard reg 0 is preferable by r388 with profit 1
   Insn 368: point = 279
   Insn 461: point = 280
	   Creating copy r387->r395@1
   Insn 367: point = 282
   Insn 366: point = 283
   Insn 365: point = 285
   Insn 364: point = 286
   Insn 363: point = 288
   Insn 362: point = 290
   Insn 361: point = 292
   Insn 360: point = 293
   Insn 459: point = 294
	Hard reg 0 is preferable by r385 with profit 1
   Insn 359: point = 296
   Insn 460: point = 297
	   Creating copy r386<-r396@1
   Insn 458: point = 299
	Hard reg 0 is preferable by r385 with profit 1
	Hard reg 21 is preferable by r385 with profit 1
   Insn 358: point = 301
   Insn 357: point = 303
   Insn 356: point = 304
   Insn 457: point = 304
	Hard reg 21 is preferable by r384 with profit 1
   Insn 355: point = 305
	Hard reg 21 is preferable by r384 with profit 1
	Hard reg 0 is preferable by r384 with profit 1
   Insn 354: point = 307
   Insn 456: point = 308
	   Creating copy r383->r396@1
   Insn 353: point = 310
   Insn 352: point = 311
   Insn 351: point = 313
   Insn 350: point = 314
   Insn 349: point = 316
   Insn 348: point = 318
   Insn 347: point = 319
   Insn 454: point = 320
	Hard reg 0 is preferable by r381 with profit 1
   Insn 346: point = 322
   Insn 455: point = 323
	   Creating copy r382<-r397@1
   Insn 453: point = 325
	Hard reg 0 is preferable by r381 with profit 1
	Hard reg 21 is preferable by r381 with profit 1
   Insn 345: point = 327
   Insn 344: point = 329
   Insn 343: point = 330
   Insn 452: point = 330
	Hard reg 21 is preferable by r380 with profit 1
   Insn 342: point = 331
	Hard reg 21 is preferable by r380 with profit 1
	Hard reg 0 is preferable by r380 with profit 1
   Insn 341: point = 333
   Insn 451: point = 334
	   Creating copy r379->r397@1
   Insn 340: point = 336
   Insn 339: point = 337
   Insn 338: point = 339
   Insn 337: point = 340
   Insn 336: point = 342
   Insn 335: point = 344
   Insn 334: point = 346
   Insn 333: point = 347
   Insn 449: point = 348
	Hard reg 0 is preferable by r377 with profit 1
   Insn 332: point = 350
   Insn 450: point = 351
	   Creating copy r378<-r398@1
   Insn 448: point = 353
	Hard reg 0 is preferable by r377 with profit 1
	Hard reg 21 is preferable by r377 with profit 1
   Insn 331: point = 355
   Insn 330: point = 357
   Insn 329: point = 358
   Insn 447: point = 358
	Hard reg 21 is preferable by r376 with profit 1
   Insn 328: point = 359
	Hard reg 21 is preferable by r376 with profit 1
	Hard reg 0 is preferable by r376 with profit 1
   Insn 327: point = 361
   Insn 446: point = 362
	   Creating copy r375->r398@1
   Insn 326: point = 364
   Insn 325: point = 365
   Insn 324: point = 367
   Insn 323: point = 368
   Insn 322: point = 370
   Insn 321: point = 372
   Insn 320: point = 373
   Insn 445: point = 374
	Hard reg 0 is preferable by r374 with profit 1
   Insn 319: point = 376
   Insn 444: point = 376
	Hard reg 0 is preferable by r374 with profit 1
	Hard reg 21 is preferable by r374 with profit 1
   Insn 318: point = 378
   Insn 317: point = 379
   Insn 443: point = 380
	Hard reg 0 is preferable by r373 with profit 1
   Insn 316: point = 382
   Insn 442: point = 382
	Hard reg 0 is preferable by r373 with profit 1
	Hard reg 21 is preferable by r373 with profit 1
   Insn 315: point = 384
  BB 3
   Insn 156: point = 385
   Insn 155: point = 385
   Insn 154: point = 386
   Insn 153: point = 388
   Insn 152: point = 389
   Insn 151: point = 390
   Insn 150: point = 391
   Insn 149: point = 391
   Insn 148: point = 392
   Insn 147: point = 393
   Insn 146: point = 395
   Insn 145: point = 397
   Insn 144: point = 399
   Insn 143: point = 400
   Insn 142: point = 402
   Insn 141: point = 404
   Insn 140: point = 406
   Insn 139: point = 407
   Insn 138: point = 409
   Insn 137: point = 411
   Insn 136: point = 413
   Insn 135: point = 414
   Insn 134: point = 416
   Insn 133: point = 418
   Insn 132: point = 419
   Insn 131: point = 420
   Insn 130: point = 421
   Insn 129: point = 421
   Insn 128: point = 422
   Insn 127: point = 424
   Insn 126: point = 426
   Insn 125: point = 428
   Insn 124: point = 430
   Insn 123: point = 432
   Insn 122: point = 433
   Insn 121: point = 435
   Insn 120: point = 437
   Insn 119: point = 439
   Insn 118: point = 440
   Insn 117: point = 442
   Insn 116: point = 444
   Insn 115: point = 446
   Insn 114: point = 447
   Insn 113: point = 449
   Insn 112: point = 451
   Insn 111: point = 453
   Insn 110: point = 454
   Insn 109: point = 456
   Insn 108: point = 458
   Insn 107: point = 460
   Insn 106: point = 462
   Insn 105: point = 463
   Insn 104: point = 465
   Insn 103: point = 467
   Insn 102: point = 468
   Insn 101: point = 470
   Insn 100: point = 472
   Insn 99: point = 474
   Insn 98: point = 475
   Insn 97: point = 477
   Insn 96: point = 479
   Insn 95: point = 480
   Insn 94: point = 481
   Insn 93: point = 482
   Insn 92: point = 482
   Insn 91: point = 483
   Insn 90: point = 484
   Insn 89: point = 486
   Insn 88: point = 488
   Insn 87: point = 490
   Insn 86: point = 491
   Insn 85: point = 493
   Insn 84: point = 495
   Insn 83: point = 497
   Insn 82: point = 498
   Insn 81: point = 500
   Insn 80: point = 502
   Insn 79: point = 504
   Insn 78: point = 505
   Insn 77: point = 507
   Insn 76: point = 509
   Insn 75: point = 510
   Insn 74: point = 511
   Insn 73: point = 512
   Insn 72: point = 512
   Insn 71: point = 513
   Insn 70: point = 515
   Insn 69: point = 517
   Insn 68: point = 519
   Insn 67: point = 521
   Insn 66: point = 523
   Insn 65: point = 524
   Insn 64: point = 526
   Insn 63: point = 528
   Insn 62: point = 530
   Insn 61: point = 531
   Insn 60: point = 533
   Insn 59: point = 535
   Insn 58: point = 537
   Insn 57: point = 538
   Insn 56: point = 540
   Insn 55: point = 542
   Insn 54: point = 544
   Insn 53: point = 545
   Insn 52: point = 547
   Insn 51: point = 549
   Insn 50: point = 551
   Insn 49: point = 553
   Insn 48: point = 554
   Insn 47: point = 556
   Insn 46: point = 558
   Insn 45: point = 559
   Insn 44: point = 561
   Insn 43: point = 563
   Insn 42: point = 565
   Insn 41: point = 566
   Insn 40: point = 568
   Insn 39: point = 570
 r83: [6..7]
 r84: [4..5]
 r85: [567..568]
 r86: [564..566]
 r87: [562..563]
 r88: [560..561]
 r89: [546..559]
 r90: [555..556]
 r91: [552..554]
 r92: [550..551]
 r93: [548..549]
 r94: [546..547]
 r95: [514..545]
 r96: [541..542]
 r97: [539..540]
 r98: [536..538]
 r99: [534..535]
 r100: [532..533]
 r101: [516..531]
 r102: [527..528]
 r103: [525..526]
 r104: [522..524]
 r105: [520..521]
 r106: [518..519]
 r107: [516..517]
 r108: [514..515]
 r109: [512..513]
 r110: [506..507]
 r111: [503..505]
 r112: [501..502]
 r113: [499..500]
 r114: [483..498]
 r115: [494..495]
 r116: [492..493]
 r117: [489..491]
 r118: [487..488]
 r119: [485..486]
 r120: [482..484]
 r121: [476..477]
 r122: [473..475]
 r123: [471..472]
 r124: [469..470]
 r125: [455..468]
 r126: [464..465]
 r127: [461..463]
 r128: [459..460]
 r129: [457..458]
 r130: [455..456]
 r131: [423..454]
 r132: [450..451]
 r133: [448..449]
 r134: [445..447]
 r135: [443..444]
 r136: [441..442]
 r137: [425..440]
 r138: [436..437]
 r139: [434..435]
 r140: [431..433]
 r141: [429..430]
 r142: [427..428]
 r143: [425..426]
 r144: [423..424]
 r145: [421..422]
 r146: [415..416]
 r147: [412..414]
 r148: [410..411]
 r149: [408..409]
 r150: [392..407]
 r151: [403..404]
 r152: [401..402]
 r153: [398..400]
 r154: [396..397]
 r155: [394..395]
 r156: [391..393]
 r157: [385..386]
 r158: [261..262]
 r159: [258..260]
 r160: [256..257]
 r161: [254..255]
 r162: [240..253]
 r163: [249..250]
 r164: [246..248]
 r165: [244..245]
 r166: [242..243]
 r167: [240..241]
 r168: [208..239]
 r169: [235..236]
 r170: [233..234]
 r171: [230..232]
 r172: [228..229]
 r173: [226..227]
 r174: [210..225]
 r175: [221..222]
 r176: [219..220]
 r177: [216..218]
 r178: [214..215]
 r179: [212..213]
 r180: [210..211]
 r181: [208..209]
 r182: [206..207]
 r183: [200..201]
 r184: [197..199]
 r185: [195..196]
 r186: [193..194]
 r187: [177..192]
 r188: [188..189]
 r189: [186..187]
 r190: [183..185]
 r191: [181..182]
 r192: [179..180]
 r193: [176..178]
 r194: [154..155]
 r195: [151..153]
 r196: [132..150]
 r198: [141..142]
 r199: [139..140]
 r200: [132..133]
 r201: [128..129]
 r202: [126..127]
 r203: [123..125]
 r204: [104..122]
 r206: [113..114]
 r207: [111..112]
 r208: [104..105]
 r209: [84..85]
 r210: [81..83]
 r211: [62..80]
 r213: [71..72]
 r214: [69..70]
 r215: [62..63]
 r216: [58..59]
 r217: [56..57]
 r218: [53..55]
 r219: [34..52]
 r221: [43..44]
 r222: [41..42]
 r223: [34..35]
 r224: [369..370]
 r225: [366..368]
 r226: [347..365]
 r228: [356..357]
 r229: [354..355]
 r230: [347..348]
 r231: [343..344]
 r232: [341..342]
 r233: [338..340]
 r234: [319..337]
 r236: [328..329]
 r237: [326..327]
 r238: [319..320]
 r239: [315..316]
 r240: [312..314]
 r241: [293..311]
 r243: [302..303]
 r244: [300..301]
 r245: [293..294]
 r246: [289..290]
 r247: [287..288]
 r248: [284..286]
 r249: [265..283]
 r251: [274..275]
 r252: [272..273]
 r253: [265..266]
 r254: [2..3]
 r255: [0..1]
 r256: [32..33]
 r257: [30..31]
 r258: [28..29]
 r259: [26..27]
 r260: [24..25]
 r261: [22..23]
 r262: [20..21]
 r263: [18..19]
 r264: [16..17]
 r265: [14..15]
 r266: [12..13]
 r267: [10..11]
 r268: [569..570]
 r269: [564..565]
 r270: [557..558]
 r271: [552..553]
 r272: [543..544]
 r273: [536..537]
 r274: [529..530]
 r275: [522..523]
 r276: [510..511]
 r277: [508..509]
 r278: [503..504]
 r279: [496..497]
 r280: [489..490]
 r281: [480..481]
 r282: [478..479]
 r283: [473..474]
 r284: [466..467]
 r285: [461..462]
 r286: [452..453]
 r287: [445..446]
 r288: [438..439]
 r289: [431..432]
 r290: [419..420]
 r291: [417..418]
 r292: [412..413]
 r293: [405..406]
 r294: [398..399]
 r295: [389..390]
 r296: [387..388]
 r297: [263..264]
 r298: [258..259]
 r299: [251..252]
 r300: [246..247]
 r301: [237..238]
 r302: [230..231]
 r303: [223..224]
 r304: [216..217]
 r305: [204..205]
 r306: [202..203]
 r307: [197..198]
 r308: [190..191]
 r309: [183..184]
 r310: [174..175]
 r311: [172..173]
 r312: [164..165]
 r313: [166..167]
 r314: [170..171]
 r315: [158..159]
 r316: [162..163]
 r317: [156..157]
 r318: [151..152]
 r319: [145..146]
 r320: [130..131]
 r321: [123..124]
 r322: [117..118]
 r323: [102..103]
 r324: [94..95]
 r325: [96..97]
 r326: [100..101]
 r327: [88..89]
 r328: [92..93]
 r329: [86..87]
 r330: [81..82]
 r331: [75..76]
 r332: [60..61]
 r333: [53..54]
 r334: [47..48]
 r335: [379..380]
 r336: [383..384]
 r337: [373..374]
 r338: [377..378]
 r339: [371..372]
 r340: [366..367]
 r341: [360..361]
 r342: [345..346]
 r343: [338..339]
 r344: [332..333]
 r345: [317..318]
 r346: [312..313]
 r347: [306..307]
 r348: [291..292]
 r349: [284..285]
 r350: [278..279]
 r351: [8..9]
 r353: [168..169]
 r354: [160..161]
 r355: [148..149]
 r356: [143..144]
 r357: [134..138]
 r358: [135..136]
 r359: [120..121]
 r360: [115..116]
 r361: [106..110]
 r362: [107..108]
 r363: [98..99]
 r364: [90..91]
 r365: [78..79]
 r366: [73..74]
 r367: [64..68]
 r368: [65..66]
 r369: [50..51]
 r370: [45..46]
 r371: [36..40]
 r372: [37..38]
 r373: [381..382]
 r374: [375..376]
 r375: [363..364]
 r376: [358..359]
 r377: [349..353]
 r378: [350..351]
 r379: [335..336]
 r380: [330..331]
 r381: [321..325]
 r382: [322..323]
 r383: [309..310]
 r384: [304..305]
 r385: [295..299]
 r386: [296..297]
 r387: [281..282]
 r388: [276..277]
 r389: [267..271]
 r390: [268..269]
 r391: [109..119]
 r392: [137..147]
 r393: [39..49]
 r394: [67..77]
 r395: [270..280]
 r396: [298..308]
 r397: [324..334]
 r398: [352..362]
Compressing live ranges: from 571 to 506 - 88%
Ranges after the compression:
 r83: [6..7]
 r84: [4..5]
 r85: [502..503]
 r86: [500..501]
 r87: [498..499]
 r88: [496..497]
 r89: [484..495]
 r90: [492..493]
 r91: [490..491]
 r92: [488..489]
 r93: [486..487]
 r94: [484..485]
 r95: [456..483]
 r96: [480..481]
 r97: [478..479]
 r98: [476..477]
 r99: [474..475]
 r100: [472..473]
 r101: [458..471]
 r102: [468..469]
 r103: [466..467]
 r104: [464..465]
 r105: [462..463]
 r106: [460..461]
 r107: [458..459]
 r108: [456..457]
 r109: [454..455]
 r110: [448..449]
 r111: [446..447]
 r112: [444..445]
 r113: [442..443]
 r114: [428..441]
 r115: [438..439]
 r116: [436..437]
 r117: [434..435]
 r118: [432..433]
 r119: [430..431]
 r120: [428..429]
 r121: [422..423]
 r122: [420..421]
 r123: [418..419]
 r124: [416..417]
 r125: [404..415]
 r126: [412..413]
 r127: [410..411]
 r128: [408..409]
 r129: [406..407]
 r130: [404..405]
 r131: [376..403]
 r132: [400..401]
 r133: [398..399]
 r134: [396..397]
 r135: [394..395]
 r136: [392..393]
 r137: [378..391]
 r138: [388..389]
 r139: [386..387]
 r140: [384..385]
 r141: [382..383]
 r142: [380..381]
 r143: [378..379]
 r144: [376..377]
 r145: [374..375]
 r146: [368..369]
 r147: [366..367]
 r148: [364..365]
 r149: [362..363]
 r150: [348..361]
 r151: [358..359]
 r152: [356..357]
 r153: [354..355]
 r154: [352..353]
 r155: [350..351]
 r156: [348..349]
 r157: [342..343]
 r158: [234..235]
 r159: [232..233]
 r160: [230..231]
 r161: [228..229]
 r162: [216..227]
 r163: [224..225]
 r164: [222..223]
 r165: [220..221]
 r166: [218..219]
 r167: [216..217]
 r168: [188..215]
 r169: [212..213]
 r170: [210..211]
 r171: [208..209]
 r172: [206..207]
 r173: [204..205]
 r174: [190..203]
 r175: [200..201]
 r176: [198..199]
 r177: [196..197]
 r178: [194..195]
 r179: [192..193]
 r180: [190..191]
 r181: [188..189]
 r182: [186..187]
 r183: [180..181]
 r184: [178..179]
 r185: [176..177]
 r186: [174..175]
 r187: [160..173]
 r188: [170..171]
 r189: [168..169]
 r190: [166..167]
 r191: [164..165]
 r192: [162..163]
 r193: [160..161]
 r194: [138..139]
 r195: [136..137]
 r196: [120..135]
 r198: [128..129]
 r199: [126..127]
 r200: [120..121]
 r201: [116..117]
 r202: [114..115]
 r203: [112..113]
 r204: [96..111]
 r206: [104..105]
 r207: [102..103]
 r208: [96..97]
 r209: [76..77]
 r210: [74..75]
 r211: [58..73]
 r213: [66..67]
 r214: [64..65]
 r215: [58..59]
 r216: [54..55]
 r217: [52..53]
 r218: [50..51]
 r219: [34..49]
 r221: [42..43]
 r222: [40..41]
 r223: [34..35]
 r224: [326..327]
 r225: [324..325]
 r226: [308..323]
 r228: [316..317]
 r229: [314..315]
 r230: [308..309]
 r231: [304..305]
 r232: [302..303]
 r233: [300..301]
 r234: [284..299]
 r236: [292..293]
 r237: [290..291]
 r238: [284..285]
 r239: [280..281]
 r240: [278..279]
 r241: [262..277]
 r243: [270..271]
 r244: [268..269]
 r245: [262..263]
 r246: [258..259]
 r247: [256..257]
 r248: [254..255]
 r249: [238..253]
 r251: [246..247]
 r252: [244..245]
 r253: [238..239]
 r254: [2..3]
 r255: [0..1]
 r256: [32..33]
 r257: [30..31]
 r258: [28..29]
 r259: [26..27]
 r260: [24..25]
 r261: [22..23]
 r262: [20..21]
 r263: [18..19]
 r264: [16..17]
 r265: [14..15]
 r266: [12..13]
 r267: [10..11]
 r268: [504..505]
 r269: [500..501]
 r270: [494..495]
 r271: [490..491]
 r272: [482..483]
 r273: [476..477]
 r274: [470..471]
 r275: [464..465]
 r276: [452..453]
 r277: [450..451]
 r278: [446..447]
 r279: [440..441]
 r280: [434..435]
 r281: [426..427]
 r282: [424..425]
 r283: [420..421]
 r284: [414..415]
 r285: [410..411]
 r286: [402..403]
 r287: [396..397]
 r288: [390..391]
 r289: [384..385]
 r290: [372..373]
 r291: [370..371]
 r292: [366..367]
 r293: [360..361]
 r294: [354..355]
 r295: [346..347]
 r296: [344..345]
 r297: [236..237]
 r298: [232..233]
 r299: [226..227]
 r300: [222..223]
 r301: [214..215]
 r302: [208..209]
 r303: [202..203]
 r304: [196..197]
 r305: [184..185]
 r306: [182..183]
 r307: [178..179]
 r308: [172..173]
 r309: [166..167]
 r310: [158..159]
 r311: [156..157]
 r312: [148..149]
 r313: [150..151]
 r314: [154..155]
 r315: [142..143]
 r316: [146..147]
 r317: [140..141]
 r318: [136..137]
 r319: [132..133]
 r320: [118..119]
 r321: [112..113]
 r322: [108..109]
 r323: [94..95]
 r324: [86..87]
 r325: [88..89]
 r326: [92..93]
 r327: [80..81]
 r328: [84..85]
 r329: [78..79]
 r330: [74..75]
 r331: [70..71]
 r332: [56..57]
 r333: [50..51]
 r334: [46..47]
 r335: [336..337]
 r336: [340..341]
 r337: [330..331]
 r338: [334..335]
 r339: [328..329]
 r340: [324..325]
 r341: [320..321]
 r342: [306..307]
 r343: [300..301]
 r344: [296..297]
 r345: [282..283]
 r346: [278..279]
 r347: [274..275]
 r348: [260..261]
 r349: [254..255]
 r350: [250..251]
 r351: [8..9]
 r353: [152..153]
 r354: [144..145]
 r355: [134..135]
 r356: [130..131]
 r357: [122..125]
 r358: [122..123]
 r359: [110..111]
 r360: [106..107]
 r361: [98..101]
 r362: [98..99]
 r363: [90..91]
 r364: [82..83]
 r365: [72..73]
 r366: [68..69]
 r367: [60..63]
 r368: [60..61]
 r369: [48..49]
 r370: [44..45]
 r371: [36..39]
 r372: [36..37]
 r373: [338..339]
 r374: [332..333]
 r375: [322..323]
 r376: [318..319]
 r377: [310..313]
 r378: [310..311]
 r379: [298..299]
 r380: [294..295]
 r381: [286..289]
 r382: [286..287]
 r383: [276..277]
 r384: [272..273]
 r385: [264..267]
 r386: [264..265]
 r387: [252..253]
 r388: [248..249]
 r389: [240..243]
 r390: [240..241]
 r391: [100..109]
 r392: [124..133]
 r393: [38..47]
 r394: [62..71]
 r395: [242..251]
 r396: [266..275]
 r397: [288..297]
 r398: [312..321]

********** Assignment #1: **********

	 Assigning to 353 (cl=SSE_REGS, orig=313, freq=3, tfirst=353, tfreq=3)...
	   Assign 21 to reload r353 (freq=3)
	 Assigning to 354 (cl=SSE_REGS, orig=315, freq=3, tfirst=354, tfreq=3)...
	   Assign 21 to reload r354 (freq=3)
	 Assigning to 357 (cl=SSE_REGS, orig=200, freq=3, tfirst=357, tfreq=3)...
	   Assign 21 to reload r357 (freq=3)
	 Assigning to 361 (cl=SSE_REGS, orig=208, freq=3, tfirst=361, tfreq=3)...
	   Assign 21 to reload r361 (freq=3)
	 Assigning to 363 (cl=SSE_REGS, orig=325, freq=3, tfirst=363, tfreq=3)...
	   Assign 21 to reload r363 (freq=3)
	 Assigning to 364 (cl=SSE_REGS, orig=327, freq=3, tfirst=364, tfreq=3)...
	   Assign 21 to reload r364 (freq=3)
	 Assigning to 367 (cl=SSE_REGS, orig=215, freq=3, tfirst=367, tfreq=3)...
	   Assign 21 to reload r367 (freq=3)
	 Assigning to 371 (cl=SSE_REGS, orig=223, freq=3, tfirst=371, tfreq=3)...
	   Assign 21 to reload r371 (freq=3)
	 Assigning to 373 (cl=SSE_REGS, orig=335, freq=3, tfirst=373, tfreq=3)...
	   Assign 21 to reload r373 (freq=3)
	 Assigning to 374 (cl=SSE_REGS, orig=337, freq=3, tfirst=374, tfreq=3)...
	   Assign 21 to reload r374 (freq=3)
	 Assigning to 377 (cl=SSE_REGS, orig=230, freq=3, tfirst=377, tfreq=3)...
	   Assign 21 to reload r377 (freq=3)
	 Assigning to 381 (cl=SSE_REGS, orig=238, freq=3, tfirst=381, tfreq=3)...
	   Assign 21 to reload r381 (freq=3)
	 Assigning to 385 (cl=SSE_REGS, orig=245, freq=3, tfirst=385, tfreq=3)...
	   Assign 21 to reload r385 (freq=3)
	 Assigning to 389 (cl=SSE_REGS, orig=253, freq=3, tfirst=389, tfreq=3)...
	   Assign 21 to reload r389 (freq=3)
	 Assigning to 355 (cl=SSE_REGS, orig=197, freq=2, tfirst=355, tfreq=2)...
	   Assign 24 to reload r355 (freq=2)
	Hard reg 24 is preferable by r392 with profit 1
	Hard reg 24 is preferable by r358 with profit 1
	 Assigning to 358 (cl=SSE_REGS, orig=197, freq=2, tfirst=355, tfreq=2)...
	   Assign 24 to optional reload r358 (freq=2)
	Hard reg 24 is preferable by r392 with profit 2
	 Assigning to 392 (cl=SSE_REGS, orig=197, freq=2, tfirst=355, tfreq=2)...
	 Assigning to 359 (cl=SSE_REGS, orig=205, freq=2, tfirst=359, tfreq=2)...
	   Assign 25 to reload r359 (freq=2)
	Hard reg 25 is preferable by r391 with profit 1
	Hard reg 25 is preferable by r362 with profit 1
	 Assigning to 362 (cl=SSE_REGS, orig=205, freq=2, tfirst=359, tfreq=2)...
	   Assign 25 to optional reload r362 (freq=2)
	Hard reg 25 is preferable by r391 with profit 2
	 Assigning to 391 (cl=SSE_REGS, orig=205, freq=2, tfirst=359, tfreq=2)...
	 Assigning to 365 (cl=SSE_REGS, orig=212, freq=2, tfirst=365, tfreq=2)...
	   Assign 26 to reload r365 (freq=2)
	Hard reg 26 is preferable by r394 with profit 1
	Hard reg 26 is preferable by r368 with profit 1
	 Assigning to 368 (cl=SSE_REGS, orig=212, freq=2, tfirst=365, tfreq=2)...
	   Assign 26 to optional reload r368 (freq=2)
	Hard reg 26 is preferable by r394 with profit 2
	 Assigning to 394 (cl=SSE_REGS, orig=212, freq=2, tfirst=365, tfreq=2)...
	 Assigning to 369 (cl=SSE_REGS, orig=220, freq=2, tfirst=369, tfreq=2)...
	   Assign 27 to reload r369 (freq=2)
	Hard reg 27 is preferable by r393 with profit 1
	Hard reg 27 is preferable by r372 with profit 1
	 Assigning to 372 (cl=SSE_REGS, orig=220, freq=2, tfirst=369, tfreq=2)...
	   Assign 27 to optional reload r372 (freq=2)
	Hard reg 27 is preferable by r393 with profit 2
	 Assigning to 393 (cl=SSE_REGS, orig=220, freq=2, tfirst=369, tfreq=2)...
	 Assigning to 375 (cl=SSE_REGS, orig=227, freq=2, tfirst=375, tfreq=2)...
	   Assign 28 to reload r375 (freq=2)
	Hard reg 28 is preferable by r398 with profit 1
	Hard reg 28 is preferable by r378 with profit 1
	 Assigning to 378 (cl=SSE_REGS, orig=227, freq=2, tfirst=375, tfreq=2)...
	   Assign 28 to optional reload r378 (freq=2)
	Hard reg 28 is preferable by r398 with profit 2
	 Assigning to 398 (cl=SSE_REGS, orig=227, freq=2, tfirst=375, tfreq=2)...
	 Assigning to 379 (cl=SSE_REGS, orig=235, freq=2, tfirst=379, tfreq=2)...
	   Assign 24 to reload r379 (freq=2)
	Hard reg 24 is preferable by r397 with profit 1
	Hard reg 24 is preferable by r382 with profit 1
	 Assigning to 382 (cl=SSE_REGS, orig=235, freq=2, tfirst=379, tfreq=2)...
	   Assign 24 to optional reload r382 (freq=2)
	Hard reg 24 is preferable by r397 with profit 2
	 Assigning to 397 (cl=SSE_REGS, orig=235, freq=2, tfirst=379, tfreq=2)...
	 Assigning to 383 (cl=SSE_REGS, orig=242, freq=2, tfirst=383, tfreq=2)...
	   Assign 25 to reload r383 (freq=2)
	Hard reg 25 is preferable by r396 with profit 1
	Hard reg 25 is preferable by r386 with profit 1
	 Assigning to 386 (cl=SSE_REGS, orig=242, freq=2, tfirst=383, tfreq=2)...
	   Assign 25 to optional reload r386 (freq=2)
	Hard reg 25 is preferable by r396 with profit 2
	 Assigning to 396 (cl=SSE_REGS, orig=242, freq=2, tfirst=383, tfreq=2)...
	 Assigning to 387 (cl=SSE_REGS, orig=250, freq=2, tfirst=387, tfreq=2)...
	   Assign 26 to reload r387 (freq=2)
	Hard reg 26 is preferable by r395 with profit 1
	Hard reg 26 is preferable by r390 with profit 1
	 Assigning to 390 (cl=SSE_REGS, orig=250, freq=2, tfirst=387, tfreq=2)...
	   Assign 26 to optional reload r390 (freq=2)
	Hard reg 26 is preferable by r395 with profit 2
	 Assigning to 395 (cl=SSE_REGS, orig=250, freq=2, tfirst=387, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  427: r362:SF=r205:SF
      REG_DEAD r205:SF
   Insn after restoring regs:
  423: r205:SF=r359:SF
      REG_DEAD r359:SF
   Insn after restoring regs:
  422: r358:SF=r197:SF
      REG_DEAD r197:SF
   Insn after restoring regs:
  418: r197:SF=r355:SF
      REG_DEAD r355:SF
   Insn after restoring regs:
  441: r372:SF=r220:SF
      REG_DEAD r220:SF
   Insn after restoring regs:
  437: r220:SF=r369:SF
      REG_DEAD r369:SF
   Insn after restoring regs:
  436: r368:SF=r212:SF
      REG_DEAD r212:SF
   Insn after restoring regs:
  432: r212:SF=r365:SF
      REG_DEAD r365:SF
   Insn after restoring regs:
  465: r390:SF=r250:SF
      REG_DEAD r250:SF
   Insn after restoring regs:
  461: r250:SF=r387:SF
      REG_DEAD r387:SF
   Insn after restoring regs:
  460: r386:SF=r242:SF
      REG_DEAD r242:SF
   Insn after restoring regs:
  456: r242:SF=r383:SF
      REG_DEAD r383:SF
   Insn after restoring regs:
  455: r382:SF=r235:SF
      REG_DEAD r235:SF
   Insn after restoring regs:
  451: r235:SF=r379:SF
      REG_DEAD r379:SF
   Insn after restoring regs:
  450: r378:SF=r227:SF
      REG_DEAD r227:SF
   Insn after restoring regs:
  446: r227:SF=r375:SF
      REG_DEAD r375:SF
Remove optional reload reg 358
  Restoring original insn:
  247: r357:SF=r357:SF*r197:SF
      REG_DEAD r197:SF
  Deleting move 422
  422: r358:SF=r197:SF
      REG_DEAD r197:SF
deleting insn with uid = 422.
Remove optional reload reg 362
  Restoring original insn:
  261: r361:SF=r361:SF*r205:SF
      REG_DEAD r205:SF
  Deleting move 427
  427: r362:SF=r205:SF
      REG_DEAD r205:SF
deleting insn with uid = 427.
Remove optional reload reg 368
  Restoring original insn:
  295: r367:SF=r367:SF*r212:SF
      REG_DEAD r212:SF
  Deleting move 436
  436: r368:SF=r212:SF
      REG_DEAD r212:SF
deleting insn with uid = 436.
Remove optional reload reg 372
  Restoring original insn:
  309: r371:SF=r371:SF*r220:SF
      REG_DEAD r220:SF
  Deleting move 441
  441: r372:SF=r220:SF
      REG_DEAD r220:SF
deleting insn with uid = 441.
Remove optional reload reg 378
  Restoring original insn:
  332: r377:SF=r377:SF*r227:SF
      REG_DEAD r227:SF
  Deleting move 450
  450: r378:SF=r227:SF
      REG_DEAD r227:SF
deleting insn with uid = 450.
Remove optional reload reg 382
  Restoring original insn:
  346: r381:SF=r381:SF*r235:SF
      REG_DEAD r235:SF
  Deleting move 455
  455: r382:SF=r235:SF
      REG_DEAD r235:SF
deleting insn with uid = 455.
Remove optional reload reg 386
  Restoring original insn:
  359: r385:SF=r385:SF*r242:SF
      REG_DEAD r242:SF
  Deleting move 460
  460: r386:SF=r242:SF
      REG_DEAD r242:SF
deleting insn with uid = 460.
Remove optional reload reg 390
  Restoring original insn:
  373: r389:SF=r389:SF*r250:SF
      REG_DEAD r250:SF
  Deleting move 465
  465: r390:SF=r250:SF
      REG_DEAD r250:SF
deleting insn with uid = 465.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 373:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=399 from oldreg=250, assigning class SSE_REGS to r399
      Making reload reg 399 for reg 250 optional
  373: r389:SF=r389:SF*r399:SF
      REG_DEAD r250:SF
    Inserting insn reload before:
  474: r399:SF=r250:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 474:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 359:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=400 from oldreg=242, assigning class SSE_REGS to r400
      Making reload reg 400 for reg 242 optional
  359: r385:SF=r385:SF*r400:SF
      REG_DEAD r242:SF
    Inserting insn reload before:
  475: r400:SF=r242:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 475:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 346:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=401 from oldreg=235, assigning class SSE_REGS to r401
      Making reload reg 401 for reg 235 optional
  346: r381:SF=r381:SF*r401:SF
      REG_DEAD r235:SF
    Inserting insn reload before:
  476: r401:SF=r235:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 476:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 332:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=402 from oldreg=227, assigning class SSE_REGS to r402
      Making reload reg 402 for reg 227 optional
  332: r377:SF=r377:SF*r402:SF
      REG_DEAD r227:SF
    Inserting insn reload before:
  477: r402:SF=r227:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 477:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=403 from oldreg=220, assigning class SSE_REGS to r403
      Making reload reg 403 for reg 220 optional
  309: r371:SF=r371:SF*r403:SF
      REG_DEAD r220:SF
    Inserting insn reload before:
  478: r403:SF=r220:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 478:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 295:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=404 from oldreg=212, assigning class SSE_REGS to r404
      Making reload reg 404 for reg 212 optional
  295: r367:SF=r367:SF*r404:SF
      REG_DEAD r212:SF
    Inserting insn reload before:
  479: r404:SF=r212:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 479:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 261:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=405 from oldreg=205, assigning class SSE_REGS to r405
      Making reload reg 405 for reg 205 optional
  261: r361:SF=r361:SF*r405:SF
      REG_DEAD r205:SF
    Inserting insn reload before:
  480: r405:SF=r205:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 480:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=406 from oldreg=197, assigning class SSE_REGS to r406
      Making reload reg 406 for reg 197 optional
  247: r357:SF=r357:SF*r406:SF
      REG_DEAD r197:SF
    Inserting insn reload before:
  481: r406:SF=r197:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 481:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=407 from oldreg=205, assigning class SSE_REGS to inheritance r407
    Original reg change 205->407 (bb7):
  423: r407:SF=r359:SF
      REG_DEAD r359:SF
    Add original<-inheritance after:
  482: r205:SF=r407:SF

    Inheritance reuse change 205->407 (bb7):
  480: r405:SF=r407:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=408 from oldreg=197, assigning class SSE_REGS to inheritance r408
    Original reg change 197->408 (bb7):
  418: r408:SF=r355:SF
      REG_DEAD r355:SF
    Add original<-inheritance after:
  483: r197:SF=r408:SF

    Inheritance reuse change 197->408 (bb7):
  481: r406:SF=r408:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   482: r205:SF=r407:SF
deleting insn with uid = 482.
	    Removing dead insn:
   483: r197:SF=r408:SF
deleting insn with uid = 483.
EBB 8
EBB 9
EBB 10
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=409 from oldreg=220, assigning class SSE_REGS to inheritance r409
    Original reg change 220->409 (bb10):
  437: r409:SF=r369:SF
      REG_DEAD r369:SF
    Add original<-inheritance after:
  484: r220:SF=r409:SF

    Inheritance reuse change 220->409 (bb10):
  478: r403:SF=r409:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=410 from oldreg=212, assigning class SSE_REGS to inheritance r410
    Original reg change 212->410 (bb10):
  432: r410:SF=r365:SF
      REG_DEAD r365:SF
    Add original<-inheritance after:
  485: r212:SF=r410:SF

    Inheritance reuse change 212->410 (bb10):
  479: r404:SF=r410:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   484: r220:SF=r409:SF
deleting insn with uid = 484.
	    Removing dead insn:
   485: r212:SF=r410:SF
deleting insn with uid = 485.
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=411 from oldreg=250, assigning class SSE_REGS to inheritance r411
    Original reg change 250->411 (bb11):
  461: r411:SF=r387:SF
      REG_DEAD r387:SF
    Add original<-inheritance after:
  486: r250:SF=r411:SF

    Inheritance reuse change 250->411 (bb11):
  474: r399:SF=r411:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=412 from oldreg=242, assigning class SSE_REGS to inheritance r412
    Original reg change 242->412 (bb11):
  456: r412:SF=r383:SF
      REG_DEAD r383:SF
    Add original<-inheritance after:
  487: r242:SF=r412:SF

    Inheritance reuse change 242->412 (bb11):
  475: r400:SF=r412:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=413 from oldreg=235, assigning class SSE_REGS to inheritance r413
    Original reg change 235->413 (bb11):
  451: r413:SF=r379:SF
      REG_DEAD r379:SF
    Add original<-inheritance after:
  488: r235:SF=r413:SF

    Inheritance reuse change 235->413 (bb11):
  476: r401:SF=r413:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=414 from oldreg=227, assigning class SSE_REGS to inheritance r414
    Original reg change 227->414 (bb11):
  446: r414:SF=r375:SF
      REG_DEAD r375:SF
    Add original<-inheritance after:
  489: r227:SF=r414:SF

    Inheritance reuse change 227->414 (bb11):
  477: r402:SF=r414:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   486: r250:SF=r411:SF
deleting insn with uid = 486.
	    Removing dead insn:
   487: r242:SF=r412:SF
deleting insn with uid = 487.
	    Removing dead insn:
   488: r235:SF=r413:SF
deleting insn with uid = 488.
	    Removing dead insn:
   489: r227:SF=r414:SF
deleting insn with uid = 489.
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #2: **********

  BB 14
   Insn 395: point = 0
   Insn 394: point = 0
   Insn 390: point = 1
   Insn 387: point = 3
  BB 13
   Insn 385: point = 4
   Insn 384: point = 4
   Insn 382: point = 5
   Insn 381: point = 7
   Insn 380: point = 9
  BB 2
   Insn 403: point = 10
   Insn 35: point = 10
   Insn 34: point = 10
   Insn 33: point = 11
   Insn 32: point = 12
   Insn 31: point = 13
   Insn 30: point = 14
   Insn 29: point = 15
   Insn 28: point = 16
   Insn 27: point = 17
   Insn 26: point = 18
   Insn 25: point = 19
   Insn 24: point = 20
   Insn 23: point = 21
   Insn 22: point = 22
   Insn 21: point = 23
   Insn 20: point = 24
   Insn 19: point = 25
   Insn 18: point = 26
   Insn 17: point = 27
   Insn 16: point = 28
   Insn 15: point = 29
   Insn 14: point = 30
   Insn 13: point = 31
   Insn 12: point = 32
   Insn 11: point = 33
   Insn 10: point = 34
   Insn 6: point = 34
   Insn 5: point = 34
   Insn 4: point = 34
   Insn 3: point = 34
   Insn 2: point = 34
  BB 12
   Insn 377: point = 34
  BB 10
   Insn 411: point = 34
   Insn 310: point = 34
   Insn 440: point = 35
	Hard reg 0 is preferable by r371 with profit 1
   Insn 309: point = 37
   Insn 478: point = 38
	   Creating copy r403<-r409@1
   Insn 439: point = 40
	Hard reg 0 is preferable by r371 with profit 1
	Hard reg 21 is preferable by r371 with profit 1
   Insn 308: point = 42
   Insn 307: point = 44
   Insn 306: point = 45
   Insn 438: point = 45
	Hard reg 21 is preferable by r370 with profit 1
   Insn 305: point = 46
	Hard reg 21 is preferable by r370 with profit 1
	Hard reg 0 is preferable by r370 with profit 1
   Insn 304: point = 48
   Insn 437: point = 49
	   Creating copy r369->r409@1
   Insn 303: point = 51
   Insn 302: point = 52
   Insn 301: point = 54
   Insn 300: point = 55
   Insn 299: point = 57
   Insn 298: point = 59
   Insn 297: point = 61
   Insn 296: point = 62
   Insn 435: point = 63
	Hard reg 0 is preferable by r367 with profit 1
   Insn 295: point = 65
   Insn 479: point = 66
	   Creating copy r404<-r410@1
   Insn 434: point = 68
	Hard reg 0 is preferable by r367 with profit 1
	Hard reg 21 is preferable by r367 with profit 1
   Insn 294: point = 70
   Insn 293: point = 72
   Insn 292: point = 73
   Insn 433: point = 73
	Hard reg 21 is preferable by r366 with profit 1
   Insn 291: point = 74
	Hard reg 21 is preferable by r366 with profit 1
	Hard reg 0 is preferable by r366 with profit 1
   Insn 290: point = 76
   Insn 432: point = 77
	   Creating copy r365->r410@1
   Insn 289: point = 79
   Insn 288: point = 80
   Insn 287: point = 82
   Insn 286: point = 83
   Insn 285: point = 85
   Insn 284: point = 87
   Insn 283: point = 88
   Insn 431: point = 89
	Hard reg 0 is preferable by r364 with profit 1
   Insn 282: point = 91
   Insn 430: point = 91
	Hard reg 0 is preferable by r364 with profit 1
	Hard reg 21 is preferable by r364 with profit 1
   Insn 281: point = 93
  BB 8
   Insn 409: point = 94
   Insn 271: point = 94
   Insn 270: point = 95
  BB 9
   Insn 278: point = 96
   Insn 429: point = 97
	Hard reg 0 is preferable by r363 with profit 1
   Insn 277: point = 99
   Insn 428: point = 99
	Hard reg 0 is preferable by r363 with profit 1
	Hard reg 21 is preferable by r363 with profit 1
   Insn 276: point = 101
  BB 7
   Insn 265: point = 102
   Insn 264: point = 102
   Insn 263: point = 103
   Insn 262: point = 104
   Insn 426: point = 105
	Hard reg 0 is preferable by r361 with profit 1
   Insn 261: point = 107
   Insn 480: point = 108
	   Creating copy r405<-r407@1
   Insn 425: point = 110
	Hard reg 0 is preferable by r361 with profit 1
	Hard reg 21 is preferable by r361 with profit 1
   Insn 260: point = 112
   Insn 259: point = 114
   Insn 258: point = 115
   Insn 424: point = 115
	Hard reg 21 is preferable by r360 with profit 1
   Insn 257: point = 116
	Hard reg 21 is preferable by r360 with profit 1
	Hard reg 0 is preferable by r360 with profit 1
   Insn 256: point = 118
   Insn 423: point = 119
	   Creating copy r359->r407@1
   Insn 255: point = 121
   Insn 254: point = 122
   Insn 253: point = 124
   Insn 252: point = 125
   Insn 251: point = 127
   Insn 250: point = 129
   Insn 249: point = 131
   Insn 248: point = 132
   Insn 421: point = 133
	Hard reg 0 is preferable by r357 with profit 1
   Insn 247: point = 135
   Insn 481: point = 136
	   Creating copy r406<-r408@1
   Insn 420: point = 138
	Hard reg 0 is preferable by r357 with profit 1
	Hard reg 21 is preferable by r357 with profit 1
   Insn 246: point = 140
   Insn 245: point = 142
   Insn 244: point = 143
   Insn 419: point = 143
	Hard reg 21 is preferable by r356 with profit 1
   Insn 243: point = 144
	Hard reg 21 is preferable by r356 with profit 1
	Hard reg 0 is preferable by r356 with profit 1
   Insn 242: point = 146
   Insn 418: point = 147
	   Creating copy r355->r408@1
   Insn 241: point = 149
   Insn 240: point = 150
   Insn 239: point = 152
   Insn 238: point = 153
   Insn 237: point = 155
   Insn 236: point = 157
   Insn 235: point = 158
   Insn 417: point = 159
	Hard reg 0 is preferable by r354 with profit 1
   Insn 234: point = 161
   Insn 416: point = 161
	Hard reg 0 is preferable by r354 with profit 1
	Hard reg 21 is preferable by r354 with profit 1
   Insn 233: point = 163
  BB 5
   Insn 406: point = 164
   Insn 223: point = 164
   Insn 222: point = 165
  BB 6
   Insn 230: point = 166
   Insn 415: point = 167
	Hard reg 0 is preferable by r353 with profit 1
   Insn 229: point = 169
   Insn 414: point = 169
	Hard reg 0 is preferable by r353 with profit 1
	Hard reg 21 is preferable by r353 with profit 1
   Insn 228: point = 171
  BB 4
   Insn 217: point = 172
   Insn 216: point = 172
   Insn 215: point = 173
   Insn 214: point = 174
   Insn 213: point = 175
   Insn 212: point = 176
   Insn 211: point = 176
   Insn 210: point = 177
   Insn 209: point = 178
   Insn 208: point = 180
   Insn 207: point = 182
   Insn 206: point = 184
   Insn 205: point = 185
   Insn 204: point = 187
   Insn 203: point = 189
   Insn 202: point = 191
   Insn 201: point = 192
   Insn 200: point = 194
   Insn 199: point = 196
   Insn 198: point = 198
   Insn 197: point = 199
   Insn 196: point = 201
   Insn 195: point = 203
   Insn 194: point = 204
   Insn 193: point = 205
   Insn 192: point = 206
   Insn 191: point = 206
   Insn 190: point = 207
   Insn 189: point = 209
   Insn 188: point = 211
   Insn 187: point = 213
   Insn 186: point = 215
   Insn 185: point = 217
   Insn 184: point = 218
   Insn 183: point = 220
   Insn 182: point = 222
   Insn 181: point = 224
   Insn 180: point = 225
   Insn 179: point = 227
   Insn 178: point = 229
   Insn 177: point = 231
   Insn 176: point = 232
   Insn 175: point = 234
   Insn 174: point = 236
   Insn 173: point = 238
   Insn 172: point = 239
   Insn 171: point = 241
   Insn 170: point = 243
   Insn 169: point = 245
   Insn 168: point = 247
   Insn 167: point = 248
   Insn 166: point = 250
   Insn 165: point = 252
   Insn 164: point = 253
   Insn 163: point = 255
   Insn 162: point = 257
   Insn 161: point = 259
   Insn 160: point = 260
   Insn 159: point = 262
   Insn 158: point = 264
  BB 11
   Insn 374: point = 265
   Insn 464: point = 266
	Hard reg 0 is preferable by r389 with profit 1
   Insn 373: point = 268
   Insn 474: point = 269
	   Creating copy r399<-r411@1
   Insn 463: point = 271
	Hard reg 0 is preferable by r389 with profit 1
	Hard reg 21 is preferable by r389 with profit 1
   Insn 372: point = 273
   Insn 371: point = 275
   Insn 370: point = 276
   Insn 462: point = 276
	Hard reg 21 is preferable by r388 with profit 1
   Insn 369: point = 277
	Hard reg 21 is preferable by r388 with profit 1
	Hard reg 0 is preferable by r388 with profit 1
   Insn 368: point = 279
   Insn 461: point = 280
	   Creating copy r387->r411@1
   Insn 367: point = 282
   Insn 366: point = 283
   Insn 365: point = 285
   Insn 364: point = 286
   Insn 363: point = 288
   Insn 362: point = 290
   Insn 361: point = 292
   Insn 360: point = 293
   Insn 459: point = 294
	Hard reg 0 is preferable by r385 with profit 1
   Insn 359: point = 296
   Insn 475: point = 297
	   Creating copy r400<-r412@1
   Insn 458: point = 299
	Hard reg 0 is preferable by r385 with profit 1
	Hard reg 21 is preferable by r385 with profit 1
   Insn 358: point = 301
   Insn 357: point = 303
   Insn 356: point = 304
   Insn 457: point = 304
	Hard reg 21 is preferable by r384 with profit 1
   Insn 355: point = 305
	Hard reg 21 is preferable by r384 with profit 1
	Hard reg 0 is preferable by r384 with profit 1
   Insn 354: point = 307
   Insn 456: point = 308
	   Creating copy r383->r412@1
   Insn 353: point = 310
   Insn 352: point = 311
   Insn 351: point = 313
   Insn 350: point = 314
   Insn 349: point = 316
   Insn 348: point = 318
   Insn 347: point = 319
   Insn 454: point = 320
	Hard reg 0 is preferable by r381 with profit 1
   Insn 346: point = 322
   Insn 476: point = 323
	   Creating copy r401<-r413@1
   Insn 453: point = 325
	Hard reg 0 is preferable by r381 with profit 1
	Hard reg 21 is preferable by r381 with profit 1
   Insn 345: point = 327
   Insn 344: point = 329
   Insn 343: point = 330
   Insn 452: point = 330
	Hard reg 21 is preferable by r380 with profit 1
   Insn 342: point = 331
	Hard reg 21 is preferable by r380 with profit 1
	Hard reg 0 is preferable by r380 with profit 1
   Insn 341: point = 333
   Insn 451: point = 334
	   Creating copy r379->r413@1
   Insn 340: point = 336
   Insn 339: point = 337
   Insn 338: point = 339
   Insn 337: point = 340
   Insn 336: point = 342
   Insn 335: point = 344
   Insn 334: point = 346
   Insn 333: point = 347
   Insn 449: point = 348
	Hard reg 0 is preferable by r377 with profit 1
   Insn 332: point = 350
   Insn 477: point = 351
	   Creating copy r402<-r414@1
   Insn 448: point = 353
	Hard reg 0 is preferable by r377 with profit 1
	Hard reg 21 is preferable by r377 with profit 1
   Insn 331: point = 355
   Insn 330: point = 357
   Insn 329: point = 358
   Insn 447: point = 358
	Hard reg 21 is preferable by r376 with profit 1
   Insn 328: point = 359
	Hard reg 21 is preferable by r376 with profit 1
	Hard reg 0 is preferable by r376 with profit 1
   Insn 327: point = 361
   Insn 446: point = 362
	   Creating copy r375->r414@1
   Insn 326: point = 364
   Insn 325: point = 365
   Insn 324: point = 367
   Insn 323: point = 368
   Insn 322: point = 370
   Insn 321: point = 372
   Insn 320: point = 373
   Insn 445: point = 374
	Hard reg 0 is preferable by r374 with profit 1
   Insn 319: point = 376
   Insn 444: point = 376
	Hard reg 0 is preferable by r374 with profit 1
	Hard reg 21 is preferable by r374 with profit 1
   Insn 318: point = 378
   Insn 317: point = 379
   Insn 443: point = 380
	Hard reg 0 is preferable by r373 with profit 1
   Insn 316: point = 382
   Insn 442: point = 382
	Hard reg 0 is preferable by r373 with profit 1
	Hard reg 21 is preferable by r373 with profit 1
   Insn 315: point = 384
  BB 3
   Insn 156: point = 385
   Insn 155: point = 385
   Insn 154: point = 386
   Insn 153: point = 388
   Insn 152: point = 389
   Insn 151: point = 390
   Insn 150: point = 391
   Insn 149: point = 391
   Insn 148: point = 392
   Insn 147: point = 393
   Insn 146: point = 395
   Insn 145: point = 397
   Insn 144: point = 399
   Insn 143: point = 400
   Insn 142: point = 402
   Insn 141: point = 404
   Insn 140: point = 406
   Insn 139: point = 407
   Insn 138: point = 409
   Insn 137: point = 411
   Insn 136: point = 413
   Insn 135: point = 414
   Insn 134: point = 416
   Insn 133: point = 418
   Insn 132: point = 419
   Insn 131: point = 420
   Insn 130: point = 421
   Insn 129: point = 421
   Insn 128: point = 422
   Insn 127: point = 424
   Insn 126: point = 426
   Insn 125: point = 428
   Insn 124: point = 430
   Insn 123: point = 432
   Insn 122: point = 433
   Insn 121: point = 435
   Insn 120: point = 437
   Insn 119: point = 439
   Insn 118: point = 440
   Insn 117: point = 442
   Insn 116: point = 444
   Insn 115: point = 446
   Insn 114: point = 447
   Insn 113: point = 449
   Insn 112: point = 451
   Insn 111: point = 453
   Insn 110: point = 454
   Insn 109: point = 456
   Insn 108: point = 458
   Insn 107: point = 460
   Insn 106: point = 462
   Insn 105: point = 463
   Insn 104: point = 465
   Insn 103: point = 467
   Insn 102: point = 468
   Insn 101: point = 470
   Insn 100: point = 472
   Insn 99: point = 474
   Insn 98: point = 475
   Insn 97: point = 477
   Insn 96: point = 479
   Insn 95: point = 480
   Insn 94: point = 481
   Insn 93: point = 482
   Insn 92: point = 482
   Insn 91: point = 483
   Insn 90: point = 484
   Insn 89: point = 486
   Insn 88: point = 488
   Insn 87: point = 490
   Insn 86: point = 491
   Insn 85: point = 493
   Insn 84: point = 495
   Insn 83: point = 497
   Insn 82: point = 498
   Insn 81: point = 500
   Insn 80: point = 502
   Insn 79: point = 504
   Insn 78: point = 505
   Insn 77: point = 507
   Insn 76: point = 509
   Insn 75: point = 510
   Insn 74: point = 511
   Insn 73: point = 512
   Insn 72: point = 512
   Insn 71: point = 513
   Insn 70: point = 515
   Insn 69: point = 517
   Insn 68: point = 519
   Insn 67: point = 521
   Insn 66: point = 523
   Insn 65: point = 524
   Insn 64: point = 526
   Insn 63: point = 528
   Insn 62: point = 530
   Insn 61: point = 531
   Insn 60: point = 533
   Insn 59: point = 535
   Insn 58: point = 537
   Insn 57: point = 538
   Insn 56: point = 540
   Insn 55: point = 542
   Insn 54: point = 544
   Insn 53: point = 545
   Insn 52: point = 547
   Insn 51: point = 549
   Insn 50: point = 551
   Insn 49: point = 553
   Insn 48: point = 554
   Insn 47: point = 556
   Insn 46: point = 558
   Insn 45: point = 559
   Insn 44: point = 561
   Insn 43: point = 563
   Insn 42: point = 565
   Insn 41: point = 566
   Insn 40: point = 568
   Insn 39: point = 570
 r83: [6..7]
 r84: [4..5]
 r85: [567..568]
 r86: [564..566]
 r87: [562..563]
 r88: [560..561]
 r89: [546..559]
 r90: [555..556]
 r91: [552..554]
 r92: [550..551]
 r93: [548..549]
 r94: [546..547]
 r95: [514..545]
 r96: [541..542]
 r97: [539..540]
 r98: [536..538]
 r99: [534..535]
 r100: [532..533]
 r101: [516..531]
 r102: [527..528]
 r103: [525..526]
 r104: [522..524]
 r105: [520..521]
 r106: [518..519]
 r107: [516..517]
 r108: [514..515]
 r109: [512..513]
 r110: [506..507]
 r111: [503..505]
 r112: [501..502]
 r113: [499..500]
 r114: [483..498]
 r115: [494..495]
 r116: [492..493]
 r117: [489..491]
 r118: [487..488]
 r119: [485..486]
 r120: [482..484]
 r121: [476..477]
 r122: [473..475]
 r123: [471..472]
 r124: [469..470]
 r125: [455..468]
 r126: [464..465]
 r127: [461..463]
 r128: [459..460]
 r129: [457..458]
 r130: [455..456]
 r131: [423..454]
 r132: [450..451]
 r133: [448..449]
 r134: [445..447]
 r135: [443..444]
 r136: [441..442]
 r137: [425..440]
 r138: [436..437]
 r139: [434..435]
 r140: [431..433]
 r141: [429..430]
 r142: [427..428]
 r143: [425..426]
 r144: [423..424]
 r145: [421..422]
 r146: [415..416]
 r147: [412..414]
 r148: [410..411]
 r149: [408..409]
 r150: [392..407]
 r151: [403..404]
 r152: [401..402]
 r153: [398..400]
 r154: [396..397]
 r155: [394..395]
 r156: [391..393]
 r157: [385..386]
 r158: [261..262]
 r159: [258..260]
 r160: [256..257]
 r161: [254..255]
 r162: [240..253]
 r163: [249..250]
 r164: [246..248]
 r165: [244..245]
 r166: [242..243]
 r167: [240..241]
 r168: [208..239]
 r169: [235..236]
 r170: [233..234]
 r171: [230..232]
 r172: [228..229]
 r173: [226..227]
 r174: [210..225]
 r175: [221..222]
 r176: [219..220]
 r177: [216..218]
 r178: [214..215]
 r179: [212..213]
 r180: [210..211]
 r181: [208..209]
 r182: [206..207]
 r183: [200..201]
 r184: [197..199]
 r185: [195..196]
 r186: [193..194]
 r187: [177..192]
 r188: [188..189]
 r189: [186..187]
 r190: [183..185]
 r191: [181..182]
 r192: [179..180]
 r193: [176..178]
 r194: [154..155]
 r195: [151..153]
 r196: [132..150]
 r198: [141..142]
 r199: [139..140]
 r200: [132..133]
 r201: [128..129]
 r202: [126..127]
 r203: [123..125]
 r204: [104..122]
 r206: [113..114]
 r207: [111..112]
 r208: [104..105]
 r209: [84..85]
 r210: [81..83]
 r211: [62..80]
 r213: [71..72]
 r214: [69..70]
 r215: [62..63]
 r216: [58..59]
 r217: [56..57]
 r218: [53..55]
 r219: [34..52]
 r221: [43..44]
 r222: [41..42]
 r223: [34..35]
 r224: [369..370]
 r225: [366..368]
 r226: [347..365]
 r228: [356..357]
 r229: [354..355]
 r230: [347..348]
 r231: [343..344]
 r232: [341..342]
 r233: [338..340]
 r234: [319..337]
 r236: [328..329]
 r237: [326..327]
 r238: [319..320]
 r239: [315..316]
 r240: [312..314]
 r241: [293..311]
 r243: [302..303]
 r244: [300..301]
 r245: [293..294]
 r246: [289..290]
 r247: [287..288]
 r248: [284..286]
 r249: [265..283]
 r251: [274..275]
 r252: [272..273]
 r253: [265..266]
 r254: [2..3]
 r255: [0..1]
 r256: [32..33]
 r257: [30..31]
 r258: [28..29]
 r259: [26..27]
 r260: [24..25]
 r261: [22..23]
 r262: [20..21]
 r263: [18..19]
 r264: [16..17]
 r265: [14..15]
 r266: [12..13]
 r267: [10..11]
 r268: [569..570]
 r269: [564..565]
 r270: [557..558]
 r271: [552..553]
 r272: [543..544]
 r273: [536..537]
 r274: [529..530]
 r275: [522..523]
 r276: [510..511]
 r277: [508..509]
 r278: [503..504]
 r279: [496..497]
 r280: [489..490]
 r281: [480..481]
 r282: [478..479]
 r283: [473..474]
 r284: [466..467]
 r285: [461..462]
 r286: [452..453]
 r287: [445..446]
 r288: [438..439]
 r289: [431..432]
 r290: [419..420]
 r291: [417..418]
 r292: [412..413]
 r293: [405..406]
 r294: [398..399]
 r295: [389..390]
 r296: [387..388]
 r297: [263..264]
 r298: [258..259]
 r299: [251..252]
 r300: [246..247]
 r301: [237..238]
 r302: [230..231]
 r303: [223..224]
 r304: [216..217]
 r305: [204..205]
 r306: [202..203]
 r307: [197..198]
 r308: [190..191]
 r309: [183..184]
 r310: [174..175]
 r311: [172..173]
 r312: [164..165]
 r313: [166..167]
 r314: [170..171]
 r315: [158..159]
 r316: [162..163]
 r317: [156..157]
 r318: [151..152]
 r319: [145..146]
 r320: [130..131]
 r321: [123..124]
 r322: [117..118]
 r323: [102..103]
 r324: [94..95]
 r325: [96..97]
 r326: [100..101]
 r327: [88..89]
 r328: [92..93]
 r329: [86..87]
 r330: [81..82]
 r331: [75..76]
 r332: [60..61]
 r333: [53..54]
 r334: [47..48]
 r335: [379..380]
 r336: [383..384]
 r337: [373..374]
 r338: [377..378]
 r339: [371..372]
 r340: [366..367]
 r341: [360..361]
 r342: [345..346]
 r343: [338..339]
 r344: [332..333]
 r345: [317..318]
 r346: [312..313]
 r347: [306..307]
 r348: [291..292]
 r349: [284..285]
 r350: [278..279]
 r351: [8..9]
 r353: [168..169]
 r354: [160..161]
 r355: [148..149]
 r356: [143..144]
 r357: [134..138]
 r359: [120..121]
 r360: [115..116]
 r361: [106..110]
 r363: [98..99]
 r364: [90..91]
 r365: [78..79]
 r366: [73..74]
 r367: [64..68]
 r369: [50..51]
 r370: [45..46]
 r371: [36..40]
 r373: [381..382]
 r374: [375..376]
 r375: [363..364]
 r376: [358..359]
 r377: [349..353]
 r379: [335..336]
 r380: [330..331]
 r381: [321..325]
 r383: [309..310]
 r384: [304..305]
 r385: [295..299]
 r387: [281..282]
 r388: [276..277]
 r389: [267..271]
 r399: [268..269]
 r400: [296..297]
 r401: [322..323]
 r402: [350..351]
 r403: [37..38]
 r404: [65..66]
 r405: [107..108]
 r406: [135..136]
 r407: [109..119]
 r408: [137..147]
 r409: [39..49]
 r410: [67..77]
 r411: [270..280]
 r412: [298..308]
 r413: [324..334]
 r414: [352..362]
Compressing live ranges: from 571 to 506 - 88%
Ranges after the compression:
 r83: [6..7]
 r84: [4..5]
 r85: [502..503]
 r86: [500..501]
 r87: [498..499]
 r88: [496..497]
 r89: [484..495]
 r90: [492..493]
 r91: [490..491]
 r92: [488..489]
 r93: [486..487]
 r94: [484..485]
 r95: [456..483]
 r96: [480..481]
 r97: [478..479]
 r98: [476..477]
 r99: [474..475]
 r100: [472..473]
 r101: [458..471]
 r102: [468..469]
 r103: [466..467]
 r104: [464..465]
 r105: [462..463]
 r106: [460..461]
 r107: [458..459]
 r108: [456..457]
 r109: [454..455]
 r110: [448..449]
 r111: [446..447]
 r112: [444..445]
 r113: [442..443]
 r114: [428..441]
 r115: [438..439]
 r116: [436..437]
 r117: [434..435]
 r118: [432..433]
 r119: [430..431]
 r120: [428..429]
 r121: [422..423]
 r122: [420..421]
 r123: [418..419]
 r124: [416..417]
 r125: [404..415]
 r126: [412..413]
 r127: [410..411]
 r128: [408..409]
 r129: [406..407]
 r130: [404..405]
 r131: [376..403]
 r132: [400..401]
 r133: [398..399]
 r134: [396..397]
 r135: [394..395]
 r136: [392..393]
 r137: [378..391]
 r138: [388..389]
 r139: [386..387]
 r140: [384..385]
 r141: [382..383]
 r142: [380..381]
 r143: [378..379]
 r144: [376..377]
 r145: [374..375]
 r146: [368..369]
 r147: [366..367]
 r148: [364..365]
 r149: [362..363]
 r150: [348..361]
 r151: [358..359]
 r152: [356..357]
 r153: [354..355]
 r154: [352..353]
 r155: [350..351]
 r156: [348..349]
 r157: [342..343]
 r158: [234..235]
 r159: [232..233]
 r160: [230..231]
 r161: [228..229]
 r162: [216..227]
 r163: [224..225]
 r164: [222..223]
 r165: [220..221]
 r166: [218..219]
 r167: [216..217]
 r168: [188..215]
 r169: [212..213]
 r170: [210..211]
 r171: [208..209]
 r172: [206..207]
 r173: [204..205]
 r174: [190..203]
 r175: [200..201]
 r176: [198..199]
 r177: [196..197]
 r178: [194..195]
 r179: [192..193]
 r180: [190..191]
 r181: [188..189]
 r182: [186..187]
 r183: [180..181]
 r184: [178..179]
 r185: [176..177]
 r186: [174..175]
 r187: [160..173]
 r188: [170..171]
 r189: [168..169]
 r190: [166..167]
 r191: [164..165]
 r192: [162..163]
 r193: [160..161]
 r194: [138..139]
 r195: [136..137]
 r196: [120..135]
 r198: [128..129]
 r199: [126..127]
 r200: [120..121]
 r201: [116..117]
 r202: [114..115]
 r203: [112..113]
 r204: [96..111]
 r206: [104..105]
 r207: [102..103]
 r208: [96..97]
 r209: [76..77]
 r210: [74..75]
 r211: [58..73]
 r213: [66..67]
 r214: [64..65]
 r215: [58..59]
 r216: [54..55]
 r217: [52..53]
 r218: [50..51]
 r219: [34..49]
 r221: [42..43]
 r222: [40..41]
 r223: [34..35]
 r224: [326..327]
 r225: [324..325]
 r226: [308..323]
 r228: [316..317]
 r229: [314..315]
 r230: [308..309]
 r231: [304..305]
 r232: [302..303]
 r233: [300..301]
 r234: [284..299]
 r236: [292..293]
 r237: [290..291]
 r238: [284..285]
 r239: [280..281]
 r240: [278..279]
 r241: [262..277]
 r243: [270..271]
 r244: [268..269]
 r245: [262..263]
 r246: [258..259]
 r247: [256..257]
 r248: [254..255]
 r249: [238..253]
 r251: [246..247]
 r252: [244..245]
 r253: [238..239]
 r254: [2..3]
 r255: [0..1]
 r256: [32..33]
 r257: [30..31]
 r258: [28..29]
 r259: [26..27]
 r260: [24..25]
 r261: [22..23]
 r262: [20..21]
 r263: [18..19]
 r264: [16..17]
 r265: [14..15]
 r266: [12..13]
 r267: [10..11]
 r268: [504..505]
 r269: [500..501]
 r270: [494..495]
 r271: [490..491]
 r272: [482..483]
 r273: [476..477]
 r274: [470..471]
 r275: [464..465]
 r276: [452..453]
 r277: [450..451]
 r278: [446..447]
 r279: [440..441]
 r280: [434..435]
 r281: [426..427]
 r282: [424..425]
 r283: [420..421]
 r284: [414..415]
 r285: [410..411]
 r286: [402..403]
 r287: [396..397]
 r288: [390..391]
 r289: [384..385]
 r290: [372..373]
 r291: [370..371]
 r292: [366..367]
 r293: [360..361]
 r294: [354..355]
 r295: [346..347]
 r296: [344..345]
 r297: [236..237]
 r298: [232..233]
 r299: [226..227]
 r300: [222..223]
 r301: [214..215]
 r302: [208..209]
 r303: [202..203]
 r304: [196..197]
 r305: [184..185]
 r306: [182..183]
 r307: [178..179]
 r308: [172..173]
 r309: [166..167]
 r310: [158..159]
 r311: [156..157]
 r312: [148..149]
 r313: [150..151]
 r314: [154..155]
 r315: [142..143]
 r316: [146..147]
 r317: [140..141]
 r318: [136..137]
 r319: [132..133]
 r320: [118..119]
 r321: [112..113]
 r322: [108..109]
 r323: [94..95]
 r324: [86..87]
 r325: [88..89]
 r326: [92..93]
 r327: [80..81]
 r328: [84..85]
 r329: [78..79]
 r330: [74..75]
 r331: [70..71]
 r332: [56..57]
 r333: [50..51]
 r334: [46..47]
 r335: [336..337]
 r336: [340..341]
 r337: [330..331]
 r338: [334..335]
 r339: [328..329]
 r340: [324..325]
 r341: [320..321]
 r342: [306..307]
 r343: [300..301]
 r344: [296..297]
 r345: [282..283]
 r346: [278..279]
 r347: [274..275]
 r348: [260..261]
 r349: [254..255]
 r350: [250..251]
 r351: [8..9]
 r353: [152..153]
 r354: [144..145]
 r355: [134..135]
 r356: [130..131]
 r357: [122..125]
 r359: [110..111]
 r360: [106..107]
 r361: [98..101]
 r363: [90..91]
 r364: [82..83]
 r365: [72..73]
 r366: [68..69]
 r367: [60..63]
 r369: [48..49]
 r370: [44..45]
 r371: [36..39]
 r373: [338..339]
 r374: [332..333]
 r375: [322..323]
 r376: [318..319]
 r377: [310..313]
 r379: [298..299]
 r380: [294..295]
 r381: [286..289]
 r383: [276..277]
 r384: [272..273]
 r385: [264..267]
 r387: [252..253]
 r388: [248..249]
 r389: [240..243]
 r399: [240..241]
 r400: [264..265]
 r401: [286..287]
 r402: [310..311]
 r403: [36..37]
 r404: [60..61]
 r405: [98..99]
 r406: [122..123]
 r407: [100..109]
 r408: [124..133]
 r409: [38..47]
 r410: [62..71]
 r411: [242..251]
 r412: [266..275]
 r413: [288..297]
 r414: [312..321]

********** Assignment #2: **********

	 Assigning to 399 (cl=SSE_REGS, orig=250, freq=2, tfirst=399, tfreq=2)...
	   Assign 27 to optional reload r399 (freq=2)
	Hard reg 27 is preferable by r411 with profit 1
	 Assigning to 411 (cl=SSE_REGS, orig=250, freq=2, tfirst=399, tfreq=2)...
	 Assigning to 400 (cl=SSE_REGS, orig=242, freq=2, tfirst=400, tfreq=2)...
	   Assign 28 to optional reload r400 (freq=2)
	Hard reg 28 is preferable by r412 with profit 1
	 Assigning to 412 (cl=SSE_REGS, orig=242, freq=2, tfirst=400, tfreq=2)...
	 Assigning to 401 (cl=SSE_REGS, orig=235, freq=2, tfirst=401, tfreq=2)...
	   Assign 24 to optional reload r401 (freq=2)
	Hard reg 24 is preferable by r413 with profit 1
	 Assigning to 413 (cl=SSE_REGS, orig=235, freq=2, tfirst=401, tfreq=2)...
	 Assigning to 402 (cl=SSE_REGS, orig=227, freq=2, tfirst=402, tfreq=2)...
	   Assign 25 to optional reload r402 (freq=2)
	Hard reg 25 is preferable by r414 with profit 1
	 Assigning to 414 (cl=SSE_REGS, orig=227, freq=2, tfirst=402, tfreq=2)...
	 Assigning to 403 (cl=SSE_REGS, orig=220, freq=2, tfirst=403, tfreq=2)...
	   Assign 26 to optional reload r403 (freq=2)
	Hard reg 26 is preferable by r409 with profit 1
	 Assigning to 409 (cl=SSE_REGS, orig=220, freq=2, tfirst=403, tfreq=2)...
	 Assigning to 404 (cl=SSE_REGS, orig=212, freq=2, tfirst=404, tfreq=2)...
	   Assign 27 to optional reload r404 (freq=2)
	Hard reg 27 is preferable by r410 with profit 1
	 Assigning to 410 (cl=SSE_REGS, orig=212, freq=2, tfirst=404, tfreq=2)...
	 Assigning to 405 (cl=SSE_REGS, orig=205, freq=2, tfirst=405, tfreq=2)...
	   Assign 28 to optional reload r405 (freq=2)
	Hard reg 28 is preferable by r407 with profit 1
	 Assigning to 407 (cl=SSE_REGS, orig=205, freq=2, tfirst=405, tfreq=2)...
	 Assigning to 406 (cl=SSE_REGS, orig=197, freq=2, tfirst=406, tfreq=2)...
	   Assign 23 to optional reload r406 (freq=2)
	Hard reg 23 is preferable by r408 with profit 1
	 Assigning to 408 (cl=SSE_REGS, orig=197, freq=2, tfirst=406, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  480: r405:SF=r205:SF
      REG_DEAD r205:SF
   Insn after restoring regs:
  423: r205:SF=r359:SF
      REG_DEAD r359:SF
   Insn after restoring regs:
  481: r406:SF=r197:SF
      REG_DEAD r197:SF
   Insn after restoring regs:
  418: r197:SF=r355:SF
      REG_DEAD r355:SF
   Insn after restoring regs:
  478: r403:SF=r220:SF
      REG_DEAD r220:SF
   Insn after restoring regs:
  437: r220:SF=r369:SF
      REG_DEAD r369:SF
   Insn after restoring regs:
  479: r404:SF=r212:SF
      REG_DEAD r212:SF
   Insn after restoring regs:
  432: r212:SF=r365:SF
      REG_DEAD r365:SF
   Insn after restoring regs:
  474: r399:SF=r250:SF
      REG_DEAD r250:SF
   Insn after restoring regs:
  461: r250:SF=r387:SF
      REG_DEAD r387:SF
   Insn after restoring regs:
  475: r400:SF=r242:SF
      REG_DEAD r242:SF
   Insn after restoring regs:
  456: r242:SF=r383:SF
      REG_DEAD r383:SF
   Insn after restoring regs:
  476: r401:SF=r235:SF
      REG_DEAD r235:SF
   Insn after restoring regs:
  451: r235:SF=r379:SF
      REG_DEAD r379:SF
   Insn after restoring regs:
  477: r402:SF=r227:SF
      REG_DEAD r227:SF
   Insn after restoring regs:
  446: r227:SF=r375:SF
      REG_DEAD r375:SF
Keep optional reload reg 358
Keep optional reload reg 362
Keep optional reload reg 368
Keep optional reload reg 372
Keep optional reload reg 378
Keep optional reload reg 382
Keep optional reload reg 386
Keep optional reload reg 390
Remove optional reload reg 399
  Restoring original insn:
  373: r389:SF=r389:SF*r250:SF
      REG_DEAD r250:SF
  Deleting move 474
  474: r399:SF=r250:SF
      REG_DEAD r250:SF
deleting insn with uid = 474.
Remove optional reload reg 400
  Restoring original insn:
  359: r385:SF=r385:SF*r242:SF
      REG_DEAD r242:SF
  Deleting move 475
  475: r400:SF=r242:SF
      REG_DEAD r242:SF
deleting insn with uid = 475.
Remove optional reload reg 401
  Restoring original insn:
  346: r381:SF=r381:SF*r235:SF
      REG_DEAD r235:SF
  Deleting move 476
  476: r401:SF=r235:SF
      REG_DEAD r235:SF
deleting insn with uid = 476.
Remove optional reload reg 402
  Restoring original insn:
  332: r377:SF=r377:SF*r227:SF
      REG_DEAD r227:SF
  Deleting move 477
  477: r402:SF=r227:SF
      REG_DEAD r227:SF
deleting insn with uid = 477.
Remove optional reload reg 403
  Restoring original insn:
  309: r371:SF=r371:SF*r220:SF
      REG_DEAD r220:SF
  Deleting move 478
  478: r403:SF=r220:SF
      REG_DEAD r220:SF
deleting insn with uid = 478.
Remove optional reload reg 404
  Restoring original insn:
  295: r367:SF=r367:SF*r212:SF
      REG_DEAD r212:SF
  Deleting move 479
  479: r404:SF=r212:SF
      REG_DEAD r212:SF
deleting insn with uid = 479.
Remove optional reload reg 405
  Restoring original insn:
  261: r361:SF=r361:SF*r205:SF
      REG_DEAD r205:SF
  Deleting move 480
  480: r405:SF=r205:SF
      REG_DEAD r205:SF
deleting insn with uid = 480.
Remove optional reload reg 406
  Restoring original insn:
  247: r357:SF=r357:SF*r197:SF
      REG_DEAD r197:SF
  Deleting move 481
  481: r406:SF=r197:SF
      REG_DEAD r197:SF
deleting insn with uid = 481.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 373:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 359:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 346:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 332:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 295:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 261:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 14
   Insn 395: point = 0
   Insn 394: point = 0
   Insn 390: point = 1
   Insn 387: point = 3
  BB 13
   Insn 385: point = 4
   Insn 384: point = 4
   Insn 382: point = 5
   Insn 381: point = 7
   Insn 380: point = 9
  BB 2
   Insn 403: point = 10
   Insn 35: point = 10
   Insn 34: point = 10
   Insn 33: point = 11
   Insn 32: point = 12
   Insn 31: point = 13
   Insn 30: point = 14
   Insn 29: point = 15
   Insn 28: point = 16
   Insn 27: point = 17
   Insn 26: point = 18
   Insn 25: point = 19
   Insn 24: point = 20
   Insn 23: point = 21
   Insn 22: point = 22
   Insn 21: point = 23
   Insn 20: point = 24
   Insn 19: point = 25
   Insn 18: point = 26
   Insn 17: point = 27
   Insn 16: point = 28
   Insn 15: point = 29
   Insn 14: point = 30
   Insn 13: point = 31
   Insn 12: point = 32
   Insn 11: point = 33
   Insn 10: point = 34
   Insn 6: point = 34
   Insn 5: point = 34
   Insn 4: point = 34
   Insn 3: point = 34
   Insn 2: point = 34
  BB 12
   Insn 377: point = 34
  BB 10
   Insn 411: point = 34
   Insn 310: point = 34
   Insn 440: point = 35
   Insn 309: point = 37
   Insn 439: point = 38
   Insn 308: point = 40
   Insn 307: point = 42
   Insn 306: point = 43
   Insn 438: point = 43
   Insn 305: point = 44
   Insn 304: point = 46
   Insn 437: point = 47
   Insn 303: point = 49
   Insn 302: point = 50
   Insn 301: point = 52
   Insn 300: point = 53
   Insn 299: point = 55
   Insn 298: point = 57
   Insn 297: point = 59
   Insn 296: point = 60
   Insn 435: point = 61
   Insn 295: point = 63
   Insn 434: point = 64
   Insn 294: point = 66
   Insn 293: point = 68
   Insn 292: point = 69
   Insn 433: point = 69
   Insn 291: point = 70
   Insn 290: point = 72
   Insn 432: point = 73
   Insn 289: point = 75
   Insn 288: point = 76
   Insn 287: point = 78
   Insn 286: point = 79
   Insn 285: point = 81
   Insn 284: point = 83
   Insn 283: point = 84
   Insn 431: point = 85
   Insn 282: point = 87
   Insn 430: point = 87
   Insn 281: point = 89
  BB 8
   Insn 409: point = 90
   Insn 271: point = 90
   Insn 270: point = 91
  BB 9
   Insn 278: point = 92
   Insn 429: point = 93
   Insn 277: point = 95
   Insn 428: point = 95
   Insn 276: point = 97
  BB 7
   Insn 265: point = 98
   Insn 264: point = 98
   Insn 263: point = 99
   Insn 262: point = 100
   Insn 426: point = 101
   Insn 261: point = 103
   Insn 425: point = 104
   Insn 260: point = 106
   Insn 259: point = 108
   Insn 258: point = 109
   Insn 424: point = 109
   Insn 257: point = 110
   Insn 256: point = 112
   Insn 423: point = 113
   Insn 255: point = 115
   Insn 254: point = 116
   Insn 253: point = 118
   Insn 252: point = 119
   Insn 251: point = 121
   Insn 250: point = 123
   Insn 249: point = 125
   Insn 248: point = 126
   Insn 421: point = 127
   Insn 247: point = 129
   Insn 420: point = 130
   Insn 246: point = 132
   Insn 245: point = 134
   Insn 244: point = 135
   Insn 419: point = 135
   Insn 243: point = 136
   Insn 242: point = 138
   Insn 418: point = 139
   Insn 241: point = 141
   Insn 240: point = 142
   Insn 239: point = 144
   Insn 238: point = 145
   Insn 237: point = 147
   Insn 236: point = 149
   Insn 235: point = 150
   Insn 417: point = 151
   Insn 234: point = 153
   Insn 416: point = 153
   Insn 233: point = 155
  BB 5
   Insn 406: point = 156
   Insn 223: point = 156
   Insn 222: point = 157
  BB 6
   Insn 230: point = 158
   Insn 415: point = 159
   Insn 229: point = 161
   Insn 414: point = 161
   Insn 228: point = 163
  BB 4
   Insn 217: point = 164
   Insn 216: point = 164
   Insn 215: point = 165
   Insn 214: point = 166
   Insn 213: point = 167
   Insn 212: point = 168
   Insn 211: point = 168
   Insn 210: point = 169
   Insn 209: point = 170
   Insn 208: point = 172
   Insn 207: point = 174
   Insn 206: point = 176
   Insn 205: point = 177
   Insn 204: point = 179
   Insn 203: point = 181
   Insn 202: point = 183
   Insn 201: point = 184
   Insn 200: point = 186
   Insn 199: point = 188
   Insn 198: point = 190
   Insn 197: point = 191
   Insn 196: point = 193
   Insn 195: point = 195
   Insn 194: point = 196
   Insn 193: point = 197
   Insn 192: point = 198
   Insn 191: point = 198
   Insn 190: point = 199
   Insn 189: point = 201
   Insn 188: point = 203
   Insn 187: point = 205
   Insn 186: point = 207
   Insn 185: point = 209
   Insn 184: point = 210
   Insn 183: point = 212
   Insn 182: point = 214
   Insn 181: point = 216
   Insn 180: point = 217
   Insn 179: point = 219
   Insn 178: point = 221
   Insn 177: point = 223
   Insn 176: point = 224
   Insn 175: point = 226
   Insn 174: point = 228
   Insn 173: point = 230
   Insn 172: point = 231
   Insn 171: point = 233
   Insn 170: point = 235
   Insn 169: point = 237
   Insn 168: point = 239
   Insn 167: point = 240
   Insn 166: point = 242
   Insn 165: point = 244
   Insn 164: point = 245
   Insn 163: point = 247
   Insn 162: point = 249
   Insn 161: point = 251
   Insn 160: point = 252
   Insn 159: point = 254
   Insn 158: point = 256
  BB 11
   Insn 374: point = 257
   Insn 464: point = 258
   Insn 373: point = 260
   Insn 463: point = 261
   Insn 372: point = 263
   Insn 371: point = 265
   Insn 370: point = 266
   Insn 462: point = 266
   Insn 369: point = 267
   Insn 368: point = 269
   Insn 461: point = 270
   Insn 367: point = 272
   Insn 366: point = 273
   Insn 365: point = 275
   Insn 364: point = 276
   Insn 363: point = 278
   Insn 362: point = 280
   Insn 361: point = 282
   Insn 360: point = 283
   Insn 459: point = 284
   Insn 359: point = 286
   Insn 458: point = 287
   Insn 358: point = 289
   Insn 357: point = 291
   Insn 356: point = 292
   Insn 457: point = 292
   Insn 355: point = 293
   Insn 354: point = 295
   Insn 456: point = 296
   Insn 353: point = 298
   Insn 352: point = 299
   Insn 351: point = 301
   Insn 350: point = 302
   Insn 349: point = 304
   Insn 348: point = 306
   Insn 347: point = 307
   Insn 454: point = 308
   Insn 346: point = 310
   Insn 453: point = 311
   Insn 345: point = 313
   Insn 344: point = 315
   Insn 343: point = 316
   Insn 452: point = 316
   Insn 342: point = 317
   Insn 341: point = 319
   Insn 451: point = 320
   Insn 340: point = 322
   Insn 339: point = 323
   Insn 338: point = 325
   Insn 337: point = 326
   Insn 336: point = 328
   Insn 335: point = 330
   Insn 334: point = 332
   Insn 333: point = 333
   Insn 449: point = 334
   Insn 332: point = 336
   Insn 448: point = 337
   Insn 331: point = 339
   Insn 330: point = 341
   Insn 329: point = 342
   Insn 447: point = 342
   Insn 328: point = 343
   Insn 327: point = 345
   Insn 446: point = 346
   Insn 326: point = 348
   Insn 325: point = 349
   Insn 324: point = 351
   Insn 323: point = 352
   Insn 322: point = 354
   Insn 321: point = 356
   Insn 320: point = 357
   Insn 445: point = 358
   Insn 319: point = 360
   Insn 444: point = 360
   Insn 318: point = 362
   Insn 317: point = 363
   Insn 443: point = 364
   Insn 316: point = 366
   Insn 442: point = 366
   Insn 315: point = 368
  BB 3
   Insn 156: point = 369
   Insn 155: point = 369
   Insn 154: point = 370
   Insn 153: point = 372
   Insn 152: point = 373
   Insn 151: point = 374
   Insn 150: point = 375
   Insn 149: point = 375
   Insn 148: point = 376
   Insn 147: point = 377
   Insn 146: point = 379
   Insn 145: point = 381
   Insn 144: point = 383
   Insn 143: point = 384
   Insn 142: point = 386
   Insn 141: point = 388
   Insn 140: point = 390
   Insn 139: point = 391
   Insn 138: point = 393
   Insn 137: point = 395
   Insn 136: point = 397
   Insn 135: point = 398
   Insn 134: point = 400
   Insn 133: point = 402
   Insn 132: point = 403
   Insn 131: point = 404
   Insn 130: point = 405
   Insn 129: point = 405
   Insn 128: point = 406
   Insn 127: point = 408
   Insn 126: point = 410
   Insn 125: point = 412
   Insn 124: point = 414
   Insn 123: point = 416
   Insn 122: point = 417
   Insn 121: point = 419
   Insn 120: point = 421
   Insn 119: point = 423
   Insn 118: point = 424
   Insn 117: point = 426
   Insn 116: point = 428
   Insn 115: point = 430
   Insn 114: point = 431
   Insn 113: point = 433
   Insn 112: point = 435
   Insn 111: point = 437
   Insn 110: point = 438
   Insn 109: point = 440
   Insn 108: point = 442
   Insn 107: point = 444
   Insn 106: point = 446
   Insn 105: point = 447
   Insn 104: point = 449
   Insn 103: point = 451
   Insn 102: point = 452
   Insn 101: point = 454
   Insn 100: point = 456
   Insn 99: point = 458
   Insn 98: point = 459
   Insn 97: point = 461
   Insn 96: point = 463
   Insn 95: point = 464
   Insn 94: point = 465
   Insn 93: point = 466
   Insn 92: point = 466
   Insn 91: point = 467
   Insn 90: point = 468
   Insn 89: point = 470
   Insn 88: point = 472
   Insn 87: point = 474
   Insn 86: point = 475
   Insn 85: point = 477
   Insn 84: point = 479
   Insn 83: point = 481
   Insn 82: point = 482
   Insn 81: point = 484
   Insn 80: point = 486
   Insn 79: point = 488
   Insn 78: point = 489
   Insn 77: point = 491
   Insn 76: point = 493
   Insn 75: point = 494
   Insn 74: point = 495
   Insn 73: point = 496
   Insn 72: point = 496
   Insn 71: point = 497
   Insn 70: point = 499
   Insn 69: point = 501
   Insn 68: point = 503
   Insn 67: point = 505
   Insn 66: point = 507
   Insn 65: point = 508
   Insn 64: point = 510
   Insn 63: point = 512
   Insn 62: point = 514
   Insn 61: point = 515
   Insn 60: point = 517
   Insn 59: point = 519
   Insn 58: point = 521
   Insn 57: point = 522
   Insn 56: point = 524
   Insn 55: point = 526
   Insn 54: point = 528
   Insn 53: point = 529
   Insn 52: point = 531
   Insn 51: point = 533
   Insn 50: point = 535
   Insn 49: point = 537
   Insn 48: point = 538
   Insn 47: point = 540
   Insn 46: point = 542
   Insn 45: point = 543
   Insn 44: point = 545
   Insn 43: point = 547
   Insn 42: point = 549
   Insn 41: point = 550
   Insn 40: point = 552
   Insn 39: point = 554
 r197: [129..139]
 r205: [103..113]
 r212: [63..73]
 r220: [37..47]
 r227: [336..346]
 r235: [310..320]
 r242: [286..296]
 r250: [260..270]
 r356: [135..136]
 r360: [109..110]
 r366: [69..70]
 r370: [43..44]
 r376: [342..343]
 r380: [316..317]
 r384: [292..293]
 r388: [266..267]
Compressing live ranges: from 555 to 16 - 2%
Ranges after the compression:
 r197: [6..7]
 r205: [4..5]
 r212: [2..3]
 r220: [0..1]
 r227: [14..15]
 r235: [12..13]
 r242: [10..11]
 r250: [8..9]
 r356: [6..7]
 r360: [4..5]
 r366: [2..3]
 r370: [0..1]
 r376: [14..15]
 r380: [12..13]
 r384: [10..11]
 r388: [8..9]
  Slot 0 regnos (width = 4):	 197	 250	 242	 235	 227	 220	 212	 205
  Slot 1 regnos (width = 8):	 356	 388	 384	 380	 376	 370	 366	 360
Changing spilled pseudos to memory in insn #418
Changing spilled pseudos to memory in insn #243
Changing spilled pseudos to memory in insn #419
Changing spilled pseudos to memory in insn #247
Changing spilled pseudos to memory in insn #423
Changing spilled pseudos to memory in insn #257
Changing spilled pseudos to memory in insn #424
Changing spilled pseudos to memory in insn #261
Changing spilled pseudos to memory in insn #432
Changing spilled pseudos to memory in insn #291
Changing spilled pseudos to memory in insn #433
Changing spilled pseudos to memory in insn #295
Changing spilled pseudos to memory in insn #437
Changing spilled pseudos to memory in insn #305
Changing spilled pseudos to memory in insn #438
Changing spilled pseudos to memory in insn #309
Changing spilled pseudos to memory in insn #446
Changing spilled pseudos to memory in insn #328
Changing spilled pseudos to memory in insn #447
Changing spilled pseudos to memory in insn #332
Changing spilled pseudos to memory in insn #451
Changing spilled pseudos to memory in insn #342
Changing spilled pseudos to memory in insn #452
Changing spilled pseudos to memory in insn #346
Changing spilled pseudos to memory in insn #456
Changing spilled pseudos to memory in insn #355
Changing spilled pseudos to memory in insn #457
Changing spilled pseudos to memory in insn #359
Changing spilled pseudos to memory in insn #461
Changing spilled pseudos to memory in insn #369
Changing spilled pseudos to memory in insn #462
Changing spilled pseudos to memory in insn #373
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #373
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #462
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 462:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 369:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #461
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 461:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #359
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #457
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 457:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 355:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #456
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 456:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #346
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #452
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 452:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 342:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #451
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 451:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #332
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #447
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 447:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 328:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #446
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 446:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #309
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #438
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 438:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 305:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #437
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 437:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #295
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #433
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 433:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 291:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #432
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 432:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #261
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #424
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 424:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 257:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #423
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 423:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #247
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #419
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 419:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 243:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #418
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 418:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=208, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=176, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 384
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 53
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 91
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 110
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 148
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 154
changing reg in insn 155
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 172
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 210
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 240
changing reg in insn 240
changing reg in insn 240
changing reg in insn 248
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 254
changing reg in insn 254
changing reg in insn 254
changing reg in insn 262
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 262
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 288
changing reg in insn 288
changing reg in insn 288
changing reg in insn 296
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 298
changing reg in insn 299
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 302
changing reg in insn 302
changing reg in insn 302
changing reg in insn 310
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 310
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 325
changing reg in insn 325
changing reg in insn 325
changing reg in insn 333
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 333
changing reg in insn 335
changing reg in insn 336
changing reg in insn 336
changing reg in insn 337
changing reg in insn 337
changing reg in insn 339
changing reg in insn 339
changing reg in insn 339
changing reg in insn 347
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 347
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 352
changing reg in insn 352
changing reg in insn 352
changing reg in insn 360
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 360
changing reg in insn 362
changing reg in insn 363
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 366
changing reg in insn 366
changing reg in insn 366
changing reg in insn 374
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 374
changing reg in insn 387
changing reg in insn 390
changing reg in insn 390
changing reg in insn 394
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 140
changing reg in insn 141
changing reg in insn 144
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 158
changing reg in insn 159
changing reg in insn 161
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 181
changing reg in insn 182
changing reg in insn 185
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 202
changing reg in insn 203
changing reg in insn 206
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 222
changing reg in insn 223
changing reg in insn 230
changing reg in insn 228
changing reg in insn 235
changing reg in insn 233
changing reg in insn 236
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 249
changing reg in insn 250
changing reg in insn 253
changing reg in insn 254
changing reg in insn 256
changing reg in insn 257
changing reg in insn 263
changing reg in insn 264
changing reg in insn 270
changing reg in insn 271
changing reg in insn 278
changing reg in insn 276
changing reg in insn 283
changing reg in insn 281
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 297
changing reg in insn 298
changing reg in insn 301
changing reg in insn 302
changing reg in insn 304
changing reg in insn 305
changing reg in insn 317
changing reg in insn 315
changing reg in insn 320
changing reg in insn 318
changing reg in insn 321
changing reg in insn 322
changing reg in insn 324
changing reg in insn 325
changing reg in insn 327
changing reg in insn 328
changing reg in insn 334
changing reg in insn 335
changing reg in insn 338
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 348
changing reg in insn 349
changing reg in insn 351
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 380
changing reg in insn 381
deleting insn with uid = 72.
deleting insn with uid = 91.
deleting insn with uid = 92.
deleting insn with uid = 129.
deleting insn with uid = 148.
deleting insn with uid = 149.
deleting insn with uid = 191.
deleting insn with uid = 210.
deleting insn with uid = 211.
deleting insn with uid = 414.
deleting insn with uid = 416.
deleting insn with uid = 245.
deleting insn with uid = 420.
deleting insn with uid = 259.
deleting insn with uid = 425.
deleting insn with uid = 428.
deleting insn with uid = 430.
deleting insn with uid = 293.
deleting insn with uid = 434.
deleting insn with uid = 307.
deleting insn with uid = 439.
deleting insn with uid = 442.
deleting insn with uid = 444.
deleting insn with uid = 330.
deleting insn with uid = 448.
deleting insn with uid = 344.
deleting insn with uid = 453.
deleting insn with uid = 357.
deleting insn with uid = 458.
deleting insn with uid = 371.
deleting insn with uid = 463.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 192.
verify found no changes in insn with uid = 212.
verify found no changes in insn with uid = 244.
verify found no changes in insn with uid = 258.
verify found no changes in insn with uid = 292.
verify found no changes in insn with uid = 306.
verify found no changes in insn with uid = 329.
verify found no changes in insn with uid = 343.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 370.


int quecc(float*, float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8]
;;  ref usage 	r0={174d,160u} r1={41d,27u,26e} r2={15d,1u} r3={8d,8u} r4={15d,1u} r5={15d,1u} r6={1d,167u} r7={1d,28u} r8={14d} r9={14d} r10={14d} r11={14d} r12={14d} r13={14d} r14={14d} r15={14d} r17={85d,4u} r18={14d} r19={14d} r20={1d,1u,26e} r21={86d,85u} r22={24d,9u} r23={18d,3u} r24={17d,2u} r25={17d,2u} r26={17d,2u} r27={16d,1u} r28={16d,1u} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={15d,1u} r38={15d} r39={14d} r40={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} 
;;    total ref usage 1881{1325d,504u,52e} in 369{355 regular + 14 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 256 257 258 259 260 261 262 263 264 265 266 267
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])
        (reg:DI 1 dx [ scratch ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 procpar_info+0 S8 A64])
        (reg:DI 2 cx [ procpar_info ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 preprocess+0 S8 A64])
        (reg:DI 37 r8 [ preprocess ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:438 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 0 ax [256])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [256])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DF 0 ax [257])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [257])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DF 0 ax [258])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [258])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 0 ax [259])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [259])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DF 0 ax [260])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [260])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DF 0 ax [261])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [261])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 0 ax [262])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 0 ax [262])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DF 0 ax [263])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 0 ax [263])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DF 0 ax [264])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:441 128 {*movdf_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [264])) ge2fitman_preproc.cpp:441 128 {*movdf_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DF 0 ax [265])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:441 128 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [265])) ge2fitman_preproc.cpp:441 128 {*movdf_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DF 0 ax [266])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:442 128 {*movdf_internal}
     (nil))
(insn 32 31 33 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 0 ax [266])) ge2fitman_preproc.cpp:442 128 {*movdf_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DF 0 ax [267])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:442 128 {*movdf_internal}
     (nil))
(insn 34 33 35 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 0 ax [267])) ge2fitman_preproc.cpp:442 128 {*movdf_internal}
     (nil))
(insn 35 34 403 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:444 90 {*movsi_internal}
     (nil))
(jump_insn 403 35 404 2 (set (pc)
        (label_ref 378)) ge2fitman_preproc.cpp:444 636 {jump}
     (nil)
 -> 378)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 404 403 383)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296
(code_label 383 404 38 3 110 "" [1 uses])
(note 38 383 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 3 (set (reg:SI 0 ax [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:447 90 {*movsi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:DI 0 ax [orig:85 D.25628 ] [85])
        (sign_extend:DI (reg:SI 0 ax [268]))) ge2fitman_preproc.cpp:447 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 3 (parallel [
            (set (reg:DI 1 dx [orig:86 D.25628 ] [86])
                (ashift:DI (reg:DI 0 ax [orig:85 D.25628 ] [85])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:447 497 {*ashldi3_1}
     (nil))
(insn 42 41 43 3 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:447 89 {*movdi_internal}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.25629 ] [87])
                (plus:DI (reg/f:DI 0 ax [269])
                    (reg:DI 1 dx [orig:86 D.25628 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:447 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.25628 ] [86]))
        (nil)))
(insn 44 43 45 3 (set (reg:SF 21 xmm0 [orig:88 D.25630 ] [88])
        (mem:SF (reg/f:DI 0 ax [orig:87 D.25629 ] [87]) [0 *_24+0 S4 A32])) ge2fitman_preproc.cpp:447 129 {*movsf_internal}
     (nil))
(insn 45 44 46 3 (set (reg:DF 22 xmm1 [orig:89 D.25631 ] [89])
        (float_extend:DF (reg:SF 21 xmm0 [orig:88 D.25630 ] [88]))) ge2fitman_preproc.cpp:447 152 {*extendsfdf2_sse}
     (nil))
(insn 46 45 47 3 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:447 90 {*movsi_internal}
     (nil))
(insn 47 46 48 3 (set (reg:DI 0 ax [orig:90 D.25628 ] [90])
        (sign_extend:DI (reg:SI 0 ax [270]))) ge2fitman_preproc.cpp:447 142 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 3 (parallel [
            (set (reg:DI 1 dx [orig:91 D.25628 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.25628 ] [90])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:447 497 {*ashldi3_1}
     (nil))
(insn 49 48 50 3 (set (reg/f:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:447 89 {*movdi_internal}
     (nil))
(insn 50 49 51 3 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.25629 ] [92])
                (plus:DI (reg/f:DI 0 ax [271])
                    (reg:DI 1 dx [orig:91 D.25628 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:447 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.25628 ] [91]))
        (nil)))
(insn 51 50 52 3 (set (reg:SF 21 xmm0 [orig:93 D.25630 ] [93])
        (mem:SF (reg/f:DI 0 ax [orig:92 D.25629 ] [92]) [0 *_29+0 S4 A32])) ge2fitman_preproc.cpp:447 129 {*movsf_internal}
     (nil))
(insn 52 51 53 3 (set (reg:DF 21 xmm0 [orig:94 D.25631 ] [94])
        (float_extend:DF (reg:SF 21 xmm0 [orig:93 D.25630 ] [93]))) ge2fitman_preproc.cpp:447 152 {*extendsfdf2_sse}
     (nil))
(insn 53 52 54 3 (set (reg:DF 22 xmm1 [orig:95 D.25631 ] [95])
        (mult:DF (reg:DF 22 xmm1 [orig:89 D.25631 ] [89])
            (reg:DF 21 xmm0 [orig:94 D.25631 ] [94]))) ge2fitman_preproc.cpp:447 776 {*fop_df_comm_sse}
     (nil))
(insn 54 53 55 3 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:448 90 {*movsi_internal}
     (nil))
(insn 55 54 56 3 (set (reg:DI 0 ax [orig:96 D.25632 ] [96])
        (sign_extend:DI (reg:SI 0 ax [272]))) ge2fitman_preproc.cpp:448 142 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 3 (parallel [
            (set (reg:DI 0 ax [orig:97 D.25632 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 D.25632 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 221 {*adddi_1}
     (nil))
(insn 57 56 58 3 (parallel [
            (set (reg:DI 1 dx [orig:98 D.25632 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.25632 ] [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 497 {*ashldi3_1}
     (nil))
(insn 58 57 59 3 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:448 89 {*movdi_internal}
     (nil))
(insn 59 58 60 3 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.25629 ] [99])
                (plus:DI (reg/f:DI 0 ax [273])
                    (reg:DI 1 dx [orig:98 D.25632 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.25632 ] [98]))
        (nil)))
(insn 60 59 61 3 (set (reg:SF 21 xmm0 [orig:100 D.25630 ] [100])
        (mem:SF (reg/f:DI 0 ax [orig:99 D.25629 ] [99]) [0 *_36+0 S4 A32])) ge2fitman_preproc.cpp:448 129 {*movsf_internal}
     (nil))
(insn 61 60 62 3 (set (reg:DF 23 xmm2 [orig:101 D.25631 ] [101])
        (float_extend:DF (reg:SF 21 xmm0 [orig:100 D.25630 ] [100]))) ge2fitman_preproc.cpp:448 152 {*extendsfdf2_sse}
     (nil))
(insn 62 61 63 3 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:448 90 {*movsi_internal}
     (nil))
(insn 63 62 64 3 (set (reg:DI 0 ax [orig:102 D.25632 ] [102])
        (sign_extend:DI (reg:SI 0 ax [274]))) ge2fitman_preproc.cpp:448 142 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 3 (parallel [
            (set (reg:DI 0 ax [orig:103 D.25632 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 D.25632 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 221 {*adddi_1}
     (nil))
(insn 65 64 66 3 (parallel [
            (set (reg:DI 1 dx [orig:104 D.25632 ] [104])
                (ashift:DI (reg:DI 0 ax [orig:103 D.25632 ] [103])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 3 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:448 89 {*movdi_internal}
     (nil))
(insn 67 66 68 3 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.25629 ] [105])
                (plus:DI (reg/f:DI 0 ax [275])
                    (reg:DI 1 dx [orig:104 D.25632 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:104 D.25632 ] [104]))
        (nil)))
(insn 68 67 69 3 (set (reg:SF 21 xmm0 [orig:106 D.25630 ] [106])
        (mem:SF (reg/f:DI 0 ax [orig:105 D.25629 ] [105]) [0 *_42+0 S4 A32])) ge2fitman_preproc.cpp:448 129 {*movsf_internal}
     (nil))
(insn 69 68 70 3 (set (reg:DF 21 xmm0 [orig:107 D.25631 ] [107])
        (float_extend:DF (reg:SF 21 xmm0 [orig:106 D.25630 ] [106]))) ge2fitman_preproc.cpp:448 152 {*extendsfdf2_sse}
     (nil))
(insn 70 69 71 3 (set (reg:DF 21 xmm0 [orig:108 D.25631 ] [108])
        (mult:DF (reg:DF 21 xmm0 [orig:107 D.25631 ] [107])
            (reg:DF 23 xmm2 [orig:101 D.25631 ] [101]))) ge2fitman_preproc.cpp:448 776 {*fop_df_comm_sse}
     (nil))
(insn 71 70 73 3 (set (reg:DF 21 xmm0 [orig:109 D.25631 ] [109])
        (plus:DF (reg:DF 21 xmm0 [orig:108 D.25631 ] [108])
            (reg:DF 22 xmm1 [orig:95 D.25631 ] [95]))) ge2fitman_preproc.cpp:448 776 {*fop_df_comm_sse}
     (nil))
(call_insn 73 71 74 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:448 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 74 73 75 3 (set (reg:DF 0 ax [276])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:448 128 {*movdf_internal}
     (nil))
(insn 75 74 76 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [276])) ge2fitman_preproc.cpp:448 128 {*movdf_internal}
     (nil))
(insn 76 75 77 3 (set (reg:SI 0 ax [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 77 76 78 3 (set (reg:DI 0 ax [orig:110 D.25628 ] [110])
        (sign_extend:DI (reg:SI 0 ax [277]))) ge2fitman_preproc.cpp:450 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 3 (parallel [
            (set (reg:DI 1 dx [orig:111 D.25628 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 D.25628 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 497 {*ashldi3_1}
     (nil))
(insn 79 78 80 3 (set (reg/f:DI 0 ax [278])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:450 89 {*movdi_internal}
     (nil))
(insn 80 79 81 3 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.25629 ] [112])
                (plus:DI (reg/f:DI 0 ax [278])
                    (reg:DI 1 dx [orig:111 D.25628 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.25628 ] [111]))
        (nil)))
(insn 81 80 82 3 (set (reg:SF 21 xmm0 [orig:113 D.25630 ] [113])
        (mem:SF (reg/f:DI 0 ax [orig:112 D.25629 ] [112]) [0 *_50+0 S4 A32])) ge2fitman_preproc.cpp:450 129 {*movsf_internal}
     (nil))
(insn 82 81 83 3 (set (reg:DF 22 xmm1 [orig:114 D.25631 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.25630 ] [113]))) ge2fitman_preproc.cpp:450 152 {*extendsfdf2_sse}
     (nil))
(insn 83 82 84 3 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 84 83 85 3 (set (reg:DI 0 ax [orig:115 D.25632 ] [115])
        (sign_extend:DI (reg:SI 0 ax [279]))) ge2fitman_preproc.cpp:450 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 3 (parallel [
            (set (reg:DI 0 ax [orig:116 D.25632 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 D.25632 ] [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 221 {*adddi_1}
     (nil))
(insn 86 85 87 3 (parallel [
            (set (reg:DI 1 dx [orig:117 D.25632 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 D.25632 ] [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 497 {*ashldi3_1}
     (nil))
(insn 87 86 88 3 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:450 89 {*movdi_internal}
     (nil))
(insn 88 87 89 3 (parallel [
            (set (reg/f:DI 0 ax [orig:118 D.25629 ] [118])
                (plus:DI (reg/f:DI 0 ax [280])
                    (reg:DI 1 dx [orig:117 D.25632 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:117 D.25632 ] [117]))
        (nil)))
(insn 89 88 90 3 (set (reg:SF 21 xmm0 [orig:119 D.25630 ] [119])
        (mem:SF (reg/f:DI 0 ax [orig:118 D.25629 ] [118]) [0 *_56+0 S4 A32])) ge2fitman_preproc.cpp:450 129 {*movsf_internal}
     (nil))
(insn 90 89 93 3 (set (reg:DF 21 xmm0 [orig:120 D.25631 ] [120])
        (float_extend:DF (reg:SF 21 xmm0 [orig:119 D.25630 ] [119]))) ge2fitman_preproc.cpp:450 152 {*extendsfdf2_sse}
     (nil))
(call_insn 93 90 94 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b4e6072e100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:450 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 94 93 95 3 (set (reg:DF 0 ax [281])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:450 128 {*movdf_internal}
     (nil))
(insn 95 94 96 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [281])) ge2fitman_preproc.cpp:450 128 {*movdf_internal}
     (nil))
(insn 96 95 97 3 (set (reg:SI 0 ax [282])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:452 90 {*movsi_internal}
     (nil))
(insn 97 96 98 3 (set (reg:DI 0 ax [orig:121 D.25628 ] [121])
        (sign_extend:DI (reg:SI 0 ax [282]))) ge2fitman_preproc.cpp:452 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 3 (parallel [
            (set (reg:DI 1 dx [orig:122 D.25628 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 D.25628 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:452 497 {*ashldi3_1}
     (nil))
(insn 99 98 100 3 (set (reg/f:DI 0 ax [283])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:452 89 {*movdi_internal}
     (nil))
(insn 100 99 101 3 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.25629 ] [123])
                (plus:DI (reg/f:DI 0 ax [283])
                    (reg:DI 1 dx [orig:122 D.25628 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:452 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:122 D.25628 ] [122]))
        (nil)))
(insn 101 100 102 3 (set (reg:SF 21 xmm0 [orig:124 D.25630 ] [124])
        (mem:SF (reg/f:DI 0 ax [orig:123 D.25629 ] [123]) [0 *_63+0 S4 A32])) ge2fitman_preproc.cpp:452 129 {*movsf_internal}
     (nil))
(insn 102 101 103 3 (set (reg:DF 22 xmm1 [orig:125 D.25631 ] [125])
        (float_extend:DF (reg:SF 21 xmm0 [orig:124 D.25630 ] [124]))) ge2fitman_preproc.cpp:452 152 {*extendsfdf2_sse}
     (nil))
(insn 103 102 104 3 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:452 90 {*movsi_internal}
     (nil))
(insn 104 103 105 3 (set (reg:DI 0 ax [orig:126 D.25628 ] [126])
        (sign_extend:DI (reg:SI 0 ax [284]))) ge2fitman_preproc.cpp:452 142 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 3 (parallel [
            (set (reg:DI 1 dx [orig:127 D.25628 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 D.25628 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:452 497 {*ashldi3_1}
     (nil))
(insn 106 105 107 3 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:452 89 {*movdi_internal}
     (nil))
(insn 107 106 108 3 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.25629 ] [128])
                (plus:DI (reg/f:DI 0 ax [285])
                    (reg:DI 1 dx [orig:127 D.25628 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:452 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.25628 ] [127]))
        (nil)))
(insn 108 107 109 3 (set (reg:SF 21 xmm0 [orig:129 D.25630 ] [129])
        (mem:SF (reg/f:DI 0 ax [orig:128 D.25629 ] [128]) [0 *_68+0 S4 A32])) ge2fitman_preproc.cpp:452 129 {*movsf_internal}
     (nil))
(insn 109 108 110 3 (set (reg:DF 21 xmm0 [orig:130 D.25631 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.25630 ] [129]))) ge2fitman_preproc.cpp:452 152 {*extendsfdf2_sse}
     (nil))
(insn 110 109 111 3 (set (reg:DF 22 xmm1 [orig:131 D.25631 ] [131])
        (mult:DF (reg:DF 22 xmm1 [orig:125 D.25631 ] [125])
            (reg:DF 21 xmm0 [orig:130 D.25631 ] [130]))) ge2fitman_preproc.cpp:452 776 {*fop_df_comm_sse}
     (nil))
(insn 111 110 112 3 (set (reg:SI 0 ax [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:453 90 {*movsi_internal}
     (nil))
(insn 112 111 113 3 (set (reg:DI 0 ax [orig:132 D.25632 ] [132])
        (sign_extend:DI (reg:SI 0 ax [286]))) ge2fitman_preproc.cpp:453 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 3 (parallel [
            (set (reg:DI 0 ax [orig:133 D.25632 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 D.25632 ] [132])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 221 {*adddi_1}
     (nil))
(insn 114 113 115 3 (parallel [
            (set (reg:DI 1 dx [orig:134 D.25632 ] [134])
                (ashift:DI (reg:DI 0 ax [orig:133 D.25632 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 497 {*ashldi3_1}
     (nil))
(insn 115 114 116 3 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:453 89 {*movdi_internal}
     (nil))
(insn 116 115 117 3 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.25629 ] [135])
                (plus:DI (reg/f:DI 0 ax [287])
                    (reg:DI 1 dx [orig:134 D.25632 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:134 D.25632 ] [134]))
        (nil)))
(insn 117 116 118 3 (set (reg:SF 21 xmm0 [orig:136 D.25630 ] [136])
        (mem:SF (reg/f:DI 0 ax [orig:135 D.25629 ] [135]) [0 *_75+0 S4 A32])) ge2fitman_preproc.cpp:453 129 {*movsf_internal}
     (nil))
(insn 118 117 119 3 (set (reg:DF 23 xmm2 [orig:137 D.25631 ] [137])
        (float_extend:DF (reg:SF 21 xmm0 [orig:136 D.25630 ] [136]))) ge2fitman_preproc.cpp:453 152 {*extendsfdf2_sse}
     (nil))
(insn 119 118 120 3 (set (reg:SI 0 ax [288])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:453 90 {*movsi_internal}
     (nil))
(insn 120 119 121 3 (set (reg:DI 0 ax [orig:138 D.25632 ] [138])
        (sign_extend:DI (reg:SI 0 ax [288]))) ge2fitman_preproc.cpp:453 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 3 (parallel [
            (set (reg:DI 0 ax [orig:139 D.25632 ] [139])
                (plus:DI (reg:DI 0 ax [orig:138 D.25632 ] [138])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 221 {*adddi_1}
     (nil))
(insn 122 121 123 3 (parallel [
            (set (reg:DI 1 dx [orig:140 D.25632 ] [140])
                (ashift:DI (reg:DI 0 ax [orig:139 D.25632 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 497 {*ashldi3_1}
     (nil))
(insn 123 122 124 3 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:453 89 {*movdi_internal}
     (nil))
(insn 124 123 125 3 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.25629 ] [141])
                (plus:DI (reg/f:DI 0 ax [289])
                    (reg:DI 1 dx [orig:140 D.25632 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:140 D.25632 ] [140]))
        (nil)))
(insn 125 124 126 3 (set (reg:SF 21 xmm0 [orig:142 D.25630 ] [142])
        (mem:SF (reg/f:DI 0 ax [orig:141 D.25629 ] [141]) [0 *_81+0 S4 A32])) ge2fitman_preproc.cpp:453 129 {*movsf_internal}
     (nil))
(insn 126 125 127 3 (set (reg:DF 21 xmm0 [orig:143 D.25631 ] [143])
        (float_extend:DF (reg:SF 21 xmm0 [orig:142 D.25630 ] [142]))) ge2fitman_preproc.cpp:453 152 {*extendsfdf2_sse}
     (nil))
(insn 127 126 128 3 (set (reg:DF 21 xmm0 [orig:144 D.25631 ] [144])
        (mult:DF (reg:DF 21 xmm0 [orig:143 D.25631 ] [143])
            (reg:DF 23 xmm2 [orig:137 D.25631 ] [137]))) ge2fitman_preproc.cpp:453 776 {*fop_df_comm_sse}
     (nil))
(insn 128 127 130 3 (set (reg:DF 21 xmm0 [orig:145 D.25631 ] [145])
        (plus:DF (reg:DF 21 xmm0 [orig:144 D.25631 ] [144])
            (reg:DF 22 xmm1 [orig:131 D.25631 ] [131]))) ge2fitman_preproc.cpp:453 776 {*fop_df_comm_sse}
     (nil))
(call_insn 130 128 131 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:453 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 131 130 132 3 (set (reg:DF 0 ax [290])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:453 128 {*movdf_internal}
     (nil))
(insn 132 131 133 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [290])) ge2fitman_preproc.cpp:453 128 {*movdf_internal}
     (nil))
(insn 133 132 134 3 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:455 90 {*movsi_internal}
     (nil))
(insn 134 133 135 3 (set (reg:DI 0 ax [orig:146 D.25628 ] [146])
        (sign_extend:DI (reg:SI 0 ax [291]))) ge2fitman_preproc.cpp:455 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 3 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25628 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:146 D.25628 ] [146])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 497 {*ashldi3_1}
     (nil))
(insn 136 135 137 3 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:455 89 {*movdi_internal}
     (nil))
(insn 137 136 138 3 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.25629 ] [148])
                (plus:DI (reg/f:DI 0 ax [292])
                    (reg:DI 1 dx [orig:147 D.25628 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.25628 ] [147]))
        (nil)))
(insn 138 137 139 3 (set (reg:SF 21 xmm0 [orig:149 D.25630 ] [149])
        (mem:SF (reg/f:DI 0 ax [orig:148 D.25629 ] [148]) [0 *_89+0 S4 A32])) ge2fitman_preproc.cpp:455 129 {*movsf_internal}
     (nil))
(insn 139 138 140 3 (set (reg:DF 22 xmm1 [orig:150 D.25631 ] [150])
        (float_extend:DF (reg:SF 21 xmm0 [orig:149 D.25630 ] [149]))) ge2fitman_preproc.cpp:455 152 {*extendsfdf2_sse}
     (nil))
(insn 140 139 141 3 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:455 90 {*movsi_internal}
     (nil))
(insn 141 140 142 3 (set (reg:DI 0 ax [orig:151 D.25632 ] [151])
        (sign_extend:DI (reg:SI 0 ax [293]))) ge2fitman_preproc.cpp:455 142 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 3 (parallel [
            (set (reg:DI 0 ax [orig:152 D.25632 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 D.25632 ] [151])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 221 {*adddi_1}
     (nil))
(insn 143 142 144 3 (parallel [
            (set (reg:DI 1 dx [orig:153 D.25632 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 D.25632 ] [152])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 497 {*ashldi3_1}
     (nil))
(insn 144 143 145 3 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:455 89 {*movdi_internal}
     (nil))
(insn 145 144 146 3 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.25629 ] [154])
                (plus:DI (reg/f:DI 0 ax [294])
                    (reg:DI 1 dx [orig:153 D.25632 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:153 D.25632 ] [153]))
        (nil)))
(insn 146 145 147 3 (set (reg:SF 21 xmm0 [orig:155 D.25630 ] [155])
        (mem:SF (reg/f:DI 0 ax [orig:154 D.25629 ] [154]) [0 *_95+0 S4 A32])) ge2fitman_preproc.cpp:455 129 {*movsf_internal}
     (nil))
(insn 147 146 150 3 (set (reg:DF 21 xmm0 [orig:156 D.25631 ] [156])
        (float_extend:DF (reg:SF 21 xmm0 [orig:155 D.25630 ] [155]))) ge2fitman_preproc.cpp:455 152 {*extendsfdf2_sse}
     (nil))
(call_insn 150 147 151 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b4e6072e100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:455 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 151 150 152 3 (set (reg:DF 0 ax [295])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:455 128 {*movdf_internal}
     (nil))
(insn 152 151 153 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [295])) ge2fitman_preproc.cpp:455 128 {*movdf_internal}
     (nil))
(insn 153 152 154 3 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:457 89 {*movdi_internal}
     (nil))
(insn 154 153 155 3 (set (reg:SI 0 ax [orig:157 D.25627 ] [157])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [296])
                (const_int 44 [0x2c])) [0 preprocess_99(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:457 90 {*movsi_internal}
     (nil))
(insn 155 154 156 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:157 D.25627 ] [157])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:457 7 {*cmpsi_1}
     (nil))
(jump_insn 156 155 157 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 313)
            (pc))) ge2fitman_preproc.cpp:457 596 {*jcc_1}
     (nil)
 -> 313)
;;  succ:       4 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311
(note 157 156 158 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 159 4 (set (reg:SI 0 ax [297])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 159 158 160 4 (set (reg:DI 0 ax [orig:158 D.25628 ] [158])
        (sign_extend:DI (reg:SI 0 ax [297]))) ge2fitman_preproc.cpp:459 142 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 4 (parallel [
            (set (reg:DI 1 dx [orig:159 D.25628 ] [159])
                (ashift:DI (reg:DI 0 ax [orig:158 D.25628 ] [158])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:459 497 {*ashldi3_1}
     (nil))
(insn 161 160 162 4 (set (reg/f:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 162 161 163 4 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.25629 ] [160])
                (plus:DI (reg/f:DI 0 ax [298])
                    (reg:DI 1 dx [orig:159 D.25628 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:459 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.25628 ] [159]))
        (nil)))
(insn 163 162 164 4 (set (reg:SF 21 xmm0 [orig:161 D.25630 ] [161])
        (mem:SF (reg/f:DI 0 ax [orig:160 D.25629 ] [160]) [0 *_104+0 S4 A32])) ge2fitman_preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 164 163 165 4 (set (reg:DF 22 xmm1 [orig:162 D.25631 ] [162])
        (float_extend:DF (reg:SF 21 xmm0 [orig:161 D.25630 ] [161]))) ge2fitman_preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 165 164 166 4 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 166 165 167 4 (set (reg:DI 0 ax [orig:163 D.25628 ] [163])
        (sign_extend:DI (reg:SI 0 ax [299]))) ge2fitman_preproc.cpp:459 142 {*extendsidi2_rex64}
     (nil))
(insn 167 166 168 4 (parallel [
            (set (reg:DI 1 dx [orig:164 D.25628 ] [164])
                (ashift:DI (reg:DI 0 ax [orig:163 D.25628 ] [163])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:459 497 {*ashldi3_1}
     (nil))
(insn 168 167 169 4 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 169 168 170 4 (parallel [
            (set (reg/f:DI 0 ax [orig:165 D.25629 ] [165])
                (plus:DI (reg/f:DI 0 ax [300])
                    (reg:DI 1 dx [orig:164 D.25628 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:459 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:164 D.25628 ] [164]))
        (nil)))
(insn 170 169 171 4 (set (reg:SF 21 xmm0 [orig:166 D.25630 ] [166])
        (mem:SF (reg/f:DI 0 ax [orig:165 D.25629 ] [165]) [0 *_109+0 S4 A32])) ge2fitman_preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 171 170 172 4 (set (reg:DF 21 xmm0 [orig:167 D.25631 ] [167])
        (float_extend:DF (reg:SF 21 xmm0 [orig:166 D.25630 ] [166]))) ge2fitman_preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 172 171 173 4 (set (reg:DF 22 xmm1 [orig:168 D.25631 ] [168])
        (mult:DF (reg:DF 22 xmm1 [orig:162 D.25631 ] [162])
            (reg:DF 21 xmm0 [orig:167 D.25631 ] [167]))) ge2fitman_preproc.cpp:459 776 {*fop_df_comm_sse}
     (nil))
(insn 173 172 174 4 (set (reg:SI 0 ax [301])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DI 0 ax [orig:169 D.25632 ] [169])
        (sign_extend:DI (reg:SI 0 ax [301]))) ge2fitman_preproc.cpp:460 142 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 4 (parallel [
            (set (reg:DI 0 ax [orig:170 D.25632 ] [170])
                (plus:DI (reg:DI 0 ax [orig:169 D.25632 ] [169])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 221 {*adddi_1}
     (nil))
(insn 176 175 177 4 (parallel [
            (set (reg:DI 1 dx [orig:171 D.25632 ] [171])
                (ashift:DI (reg:DI 0 ax [orig:170 D.25632 ] [170])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 497 {*ashldi3_1}
     (nil))
(insn 177 176 178 4 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 178 177 179 4 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.25629 ] [172])
                (plus:DI (reg/f:DI 0 ax [302])
                    (reg:DI 1 dx [orig:171 D.25632 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:171 D.25632 ] [171]))
        (nil)))
(insn 179 178 180 4 (set (reg:SF 21 xmm0 [orig:173 D.25630 ] [173])
        (mem:SF (reg/f:DI 0 ax [orig:172 D.25629 ] [172]) [0 *_116+0 S4 A32])) ge2fitman_preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 180 179 181 4 (set (reg:DF 23 xmm2 [orig:174 D.25631 ] [174])
        (float_extend:DF (reg:SF 21 xmm0 [orig:173 D.25630 ] [173]))) ge2fitman_preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 181 180 182 4 (set (reg:SI 0 ax [303])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 182 181 183 4 (set (reg:DI 0 ax [orig:175 D.25632 ] [175])
        (sign_extend:DI (reg:SI 0 ax [303]))) ge2fitman_preproc.cpp:460 142 {*extendsidi2_rex64}
     (nil))
(insn 183 182 184 4 (parallel [
            (set (reg:DI 0 ax [orig:176 D.25632 ] [176])
                (plus:DI (reg:DI 0 ax [orig:175 D.25632 ] [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 221 {*adddi_1}
     (nil))
(insn 184 183 185 4 (parallel [
            (set (reg:DI 1 dx [orig:177 D.25632 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.25632 ] [176])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 497 {*ashldi3_1}
     (nil))
(insn 185 184 186 4 (set (reg/f:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 186 185 187 4 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.25629 ] [178])
                (plus:DI (reg/f:DI 0 ax [304])
                    (reg:DI 1 dx [orig:177 D.25632 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.25632 ] [177]))
        (nil)))
(insn 187 186 188 4 (set (reg:SF 21 xmm0 [orig:179 D.25630 ] [179])
        (mem:SF (reg/f:DI 0 ax [orig:178 D.25629 ] [178]) [0 *_122+0 S4 A32])) ge2fitman_preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 188 187 189 4 (set (reg:DF 21 xmm0 [orig:180 D.25631 ] [180])
        (float_extend:DF (reg:SF 21 xmm0 [orig:179 D.25630 ] [179]))) ge2fitman_preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 189 188 190 4 (set (reg:DF 21 xmm0 [orig:181 D.25631 ] [181])
        (mult:DF (reg:DF 21 xmm0 [orig:180 D.25631 ] [180])
            (reg:DF 23 xmm2 [orig:174 D.25631 ] [174]))) ge2fitman_preproc.cpp:460 776 {*fop_df_comm_sse}
     (nil))
(insn 190 189 192 4 (set (reg:DF 21 xmm0 [orig:182 D.25631 ] [182])
        (plus:DF (reg:DF 21 xmm0 [orig:181 D.25631 ] [181])
            (reg:DF 22 xmm1 [orig:168 D.25631 ] [168]))) ge2fitman_preproc.cpp:460 776 {*fop_df_comm_sse}
     (nil))
(call_insn 192 190 193 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b4e60774900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:460 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 193 192 194 4 (set (reg:DF 0 ax [305])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:460 128 {*movdf_internal}
     (nil))
(insn 194 193 195 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [305])) ge2fitman_preproc.cpp:460 128 {*movdf_internal}
     (nil))
(insn 195 194 196 4 (set (reg:SI 0 ax [306])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 196 195 197 4 (set (reg:DI 0 ax [orig:183 D.25628 ] [183])
        (sign_extend:DI (reg:SI 0 ax [306]))) ge2fitman_preproc.cpp:462 142 {*extendsidi2_rex64}
     (nil))
(insn 197 196 198 4 (parallel [
            (set (reg:DI 1 dx [orig:184 D.25628 ] [184])
                (ashift:DI (reg:DI 0 ax [orig:183 D.25628 ] [183])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 497 {*ashldi3_1}
     (nil))
(insn 198 197 199 4 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 199 198 200 4 (parallel [
            (set (reg/f:DI 0 ax [orig:185 D.25629 ] [185])
                (plus:DI (reg/f:DI 0 ax [307])
                    (reg:DI 1 dx [orig:184 D.25628 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:184 D.25628 ] [184]))
        (nil)))
(insn 200 199 201 4 (set (reg:SF 21 xmm0 [orig:186 D.25630 ] [186])
        (mem:SF (reg/f:DI 0 ax [orig:185 D.25629 ] [185]) [0 *_130+0 S4 A32])) ge2fitman_preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 201 200 202 4 (set (reg:DF 22 xmm1 [orig:187 D.25631 ] [187])
        (float_extend:DF (reg:SF 21 xmm0 [orig:186 D.25630 ] [186]))) ge2fitman_preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(insn 202 201 203 4 (set (reg:SI 0 ax [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 203 202 204 4 (set (reg:DI 0 ax [orig:188 D.25632 ] [188])
        (sign_extend:DI (reg:SI 0 ax [308]))) ge2fitman_preproc.cpp:462 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 4 (parallel [
            (set (reg:DI 0 ax [orig:189 D.25632 ] [189])
                (plus:DI (reg:DI 0 ax [orig:188 D.25632 ] [188])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 221 {*adddi_1}
     (nil))
(insn 205 204 206 4 (parallel [
            (set (reg:DI 1 dx [orig:190 D.25632 ] [190])
                (ashift:DI (reg:DI 0 ax [orig:189 D.25632 ] [189])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 497 {*ashldi3_1}
     (nil))
(insn 206 205 207 4 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 207 206 208 4 (parallel [
            (set (reg/f:DI 0 ax [orig:191 D.25629 ] [191])
                (plus:DI (reg/f:DI 0 ax [309])
                    (reg:DI 1 dx [orig:190 D.25632 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:190 D.25632 ] [190]))
        (nil)))
(insn 208 207 209 4 (set (reg:SF 21 xmm0 [orig:192 D.25630 ] [192])
        (mem:SF (reg/f:DI 0 ax [orig:191 D.25629 ] [191]) [0 *_136+0 S4 A32])) ge2fitman_preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 209 208 212 4 (set (reg:DF 21 xmm0 [orig:193 D.25631 ] [193])
        (float_extend:DF (reg:SF 21 xmm0 [orig:192 D.25630 ] [192]))) ge2fitman_preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(call_insn 212 209 213 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b4e6072e100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:462 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 213 212 214 4 (set (reg:DF 0 ax [310])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:462 128 {*movdf_internal}
     (nil))
(insn 214 213 215 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [310])) ge2fitman_preproc.cpp:462 128 {*movdf_internal}
     (nil))
(insn 215 214 216 4 (set (reg:DF 21 xmm0 [311])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:468 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 9.9999999999999995474811182588625868561393872369080782e-7 [0x0.8637bd05af6c68p-19])
        (nil)))
(insn 216 215 217 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [311])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:468 56 {*cmpiudf_sse}
     (nil))
(jump_insn 217 216 221 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 405)
            (pc))) ge2fitman_preproc.cpp:468 596 {*jcc_1}
     (nil)
 -> 405)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 312
(note 221 217 222 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 222 221 223 5 (set (reg:DF 0 ax [312])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:469 128 {*movdf_internal}
     (nil))
(insn 223 222 406 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [312])) ge2fitman_preproc.cpp:469 128 {*movdf_internal}
     (nil))
(jump_insn 406 223 407 5 (set (pc)
        (label_ref 231)) 636 {jump}
     (nil)
 -> 231)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 407 406 405)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 313 314
(code_label 405 407 227 6 114 "" [1 uses])
(note 227 405 228 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 6 (set (reg:DF 21 xmm0 [314])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])) ge2fitman_preproc.cpp:471 128 {*movdf_internal}
     (nil))
(insn 229 228 415 6 (set (reg:DF 21 xmm0 [313])
        (div:DF (reg:DF 21 xmm0 [313])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:471 783 {*fop_df_1_sse}
     (nil))
(insn 415 229 230 6 (set (reg:DF 0 ax [313])
        (reg:DF 21 xmm0 [313])) ge2fitman_preproc.cpp:471 128 {*movdf_internal}
     (nil))
(insn 230 415 231 6 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [313])) ge2fitman_preproc.cpp:471 128 {*movdf_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 315 316 317 318 319 320 321 322 323
(code_label 231 230 232 7 105 "" [1 uses])
(note 232 231 233 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 7 (set (reg:DF 21 xmm0 [316])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])) ge2fitman_preproc.cpp:474 128 {*movdf_internal}
     (nil))
(insn 234 233 417 7 (set (reg:DF 21 xmm0 [315])
        (minus:DF (reg:DF 21 xmm0 [315])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:474 783 {*fop_df_1_sse}
     (nil))
(insn 417 234 235 7 (set (reg:DF 0 ax [315])
        (reg:DF 21 xmm0 [315])) ge2fitman_preproc.cpp:474 128 {*movdf_internal}
     (nil))
(insn 235 417 236 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 0 ax [315])) ge2fitman_preproc.cpp:474 128 {*movdf_internal}
     (nil))
(insn 236 235 237 7 (set (reg:SI 0 ax [317])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 237 236 238 7 (set (reg:DI 0 ax [orig:194 D.25628 ] [194])
        (sign_extend:DI (reg:SI 0 ax [317]))) ge2fitman_preproc.cpp:476 142 {*extendsidi2_rex64}
     (nil))
(insn 238 237 239 7 (parallel [
            (set (reg:DI 1 dx [orig:195 D.25628 ] [195])
                (ashift:DI (reg:DI 0 ax [orig:194 D.25628 ] [194])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:476 497 {*ashldi3_1}
     (nil))
(insn 239 238 240 7 (set (reg/f:DI 0 ax [318])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:476 89 {*movdi_internal}
     (nil))
(insn 240 239 241 7 (parallel [
            (set (reg/f:DI 3 bx [orig:196 D.25629 ] [196])
                (plus:DI (reg:DI 1 dx [orig:195 D.25628 ] [195])
                    (reg/f:DI 0 ax [318])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:476 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:195 D.25628 ] [195]))
        (nil)))
(insn 241 240 418 7 (set (reg:SF 24 xmm3 [orig:197 D.25630 ] [197])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:476 157 {*truncdfsf_fast_sse}
     (nil))
(insn 418 241 483 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 24 xmm3 [orig:197 D.25630 ] [197])) ge2fitman_preproc.cpp:476 129 {*movsf_internal}
     (nil))
(note 483 418 467 7 NOTE_INSN_DELETED)
(note 467 483 242 7 NOTE_INSN_DELETED)
(insn 242 467 243 7 (set (reg:DF 0 ax [319])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])) ge2fitman_preproc.cpp:476 128 {*movdf_internal}
     (nil))
(insn 243 242 419 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [319])) ge2fitman_preproc.cpp:476 128 {*movdf_internal}
     (nil))
(insn 419 243 244 7 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:476 128 {*movdf_internal}
     (nil))
(call_insn/u 244 419 246 7 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b4e60733400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:476 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 246 244 422 7 (set (reg:SF 21 xmm0 [orig:199 D.25630 ] [199])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:198 D.25631 ] [198]))) ge2fitman_preproc.cpp:476 157 {*truncdfsf_fast_sse}
     (nil))
(note 422 246 481 7 NOTE_INSN_DELETED)
(note 481 422 247 7 NOTE_INSN_DELETED)
(insn 247 481 421 7 (set (reg:SF 21 xmm0 [orig:200 D.25630 ] [200])
        (mult:SF (reg:SF 21 xmm0 [orig:200 D.25630 ] [200])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:476 775 {*fop_sf_comm_sse}
     (nil))
(insn 421 247 248 7 (set (reg:SF 0 ax [orig:200 D.25630 ] [200])
        (reg:SF 21 xmm0 [orig:200 D.25630 ] [200])) ge2fitman_preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 248 421 249 7 (set (mem:SF (reg/f:DI 3 bx [orig:196 D.25629 ] [196]) [0 *_145+0 S4 A32])
        (reg:SF 0 ax [orig:200 D.25630 ] [200])) ge2fitman_preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 249 248 250 7 (set (reg:SI 0 ax [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 250 249 251 7 (set (reg:DI 0 ax [orig:201 D.25632 ] [201])
        (sign_extend:DI (reg:SI 0 ax [320]))) ge2fitman_preproc.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 251 250 252 7 (parallel [
            (set (reg:DI 0 ax [orig:202 D.25632 ] [202])
                (plus:DI (reg:DI 0 ax [orig:201 D.25632 ] [201])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:477 221 {*adddi_1}
     (nil))
(insn 252 251 253 7 (parallel [
            (set (reg:DI 1 dx [orig:203 D.25632 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.25632 ] [202])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:477 497 {*ashldi3_1}
     (nil))
(insn 253 252 254 7 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:477 89 {*movdi_internal}
     (nil))
(insn 254 253 255 7 (parallel [
            (set (reg/f:DI 3 bx [orig:204 D.25629 ] [204])
                (plus:DI (reg:DI 1 dx [orig:203 D.25632 ] [203])
                    (reg/f:DI 0 ax [321])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:477 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:203 D.25632 ] [203]))
        (nil)))
(insn 255 254 423 7 (set (reg:SF 25 xmm4 [orig:205 D.25630 ] [205])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:477 157 {*truncdfsf_fast_sse}
     (nil))
(insn 423 255 482 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 25 xmm4 [orig:205 D.25630 ] [205])) ge2fitman_preproc.cpp:477 129 {*movsf_internal}
     (nil))
(note 482 423 466 7 NOTE_INSN_DELETED)
(note 466 482 256 7 NOTE_INSN_DELETED)
(insn 256 466 257 7 (set (reg:DF 0 ax [322])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])) ge2fitman_preproc.cpp:477 128 {*movdf_internal}
     (nil))
(insn 257 256 424 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [322])) ge2fitman_preproc.cpp:477 128 {*movdf_internal}
     (nil))
(insn 424 257 258 7 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:477 128 {*movdf_internal}
     (nil))
(call_insn/u 258 424 260 7 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b4e60771e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:477 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 260 258 427 7 (set (reg:SF 21 xmm0 [orig:207 D.25630 ] [207])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:206 D.25631 ] [206]))) ge2fitman_preproc.cpp:477 157 {*truncdfsf_fast_sse}
     (nil))
(note 427 260 480 7 NOTE_INSN_DELETED)
(note 480 427 261 7 NOTE_INSN_DELETED)
(insn 261 480 426 7 (set (reg:SF 21 xmm0 [orig:208 D.25630 ] [208])
        (mult:SF (reg:SF 21 xmm0 [orig:208 D.25630 ] [208])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:477 775 {*fop_sf_comm_sse}
     (nil))
(insn 426 261 262 7 (set (reg:SF 0 ax [orig:208 D.25630 ] [208])
        (reg:SF 21 xmm0 [orig:208 D.25630 ] [208])) ge2fitman_preproc.cpp:477 129 {*movsf_internal}
     (nil))
(insn 262 426 263 7 (set (mem:SF (reg/f:DI 3 bx [orig:204 D.25629 ] [204]) [0 *_153+0 S4 A32])
        (reg:SF 0 ax [orig:208 D.25630 ] [208])) ge2fitman_preproc.cpp:477 129 {*movsf_internal}
     (nil))
(insn 263 262 264 7 (set (reg:DF 21 xmm0 [323])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:482 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 9.9999999999999995474811182588625868561393872369080782e-7 [0x0.8637bd05af6c68p-19])
        (nil)))
(insn 264 263 265 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [323])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:482 56 {*cmpiudf_sse}
     (nil))
(jump_insn 265 264 269 7 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 408)
            (pc))) ge2fitman_preproc.cpp:482 596 {*jcc_1}
     (nil)
 -> 408)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 324
(note 269 265 270 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 270 269 271 8 (set (reg:DF 0 ax [324])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:483 128 {*movdf_internal}
     (nil))
(insn 271 270 409 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [324])) ge2fitman_preproc.cpp:483 128 {*movdf_internal}
     (nil))
(jump_insn 409 271 410 8 (set (pc)
        (label_ref 279)) 636 {jump}
     (nil)
 -> 279)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 410 409 408)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 325 326
(code_label 408 410 275 9 115 "" [1 uses])
(note 275 408 276 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 9 (set (reg:DF 21 xmm0 [326])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])) ge2fitman_preproc.cpp:485 128 {*movdf_internal}
     (nil))
(insn 277 276 429 9 (set (reg:DF 21 xmm0 [325])
        (div:DF (reg:DF 21 xmm0 [325])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:485 783 {*fop_df_1_sse}
     (nil))
(insn 429 277 278 9 (set (reg:DF 0 ax [325])
        (reg:DF 21 xmm0 [325])) ge2fitman_preproc.cpp:485 128 {*movdf_internal}
     (nil))
(insn 278 429 279 9 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [325])) ge2fitman_preproc.cpp:485 128 {*movdf_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 327 328 329 330 331 332 333 334
(code_label 279 278 280 10 108 "" [1 uses])
(note 280 279 281 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 281 280 282 10 (set (reg:DF 21 xmm0 [328])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])) ge2fitman_preproc.cpp:488 128 {*movdf_internal}
     (nil))
(insn 282 281 431 10 (set (reg:DF 21 xmm0 [327])
        (minus:DF (reg:DF 21 xmm0 [327])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:488 783 {*fop_df_1_sse}
     (nil))
(insn 431 282 283 10 (set (reg:DF 0 ax [327])
        (reg:DF 21 xmm0 [327])) ge2fitman_preproc.cpp:488 128 {*movdf_internal}
     (nil))
(insn 283 431 284 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 0 ax [327])) ge2fitman_preproc.cpp:488 128 {*movdf_internal}
     (nil))
(insn 284 283 285 10 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:490 90 {*movsi_internal}
     (nil))
(insn 285 284 286 10 (set (reg:DI 0 ax [orig:209 D.25628 ] [209])
        (sign_extend:DI (reg:SI 0 ax [329]))) ge2fitman_preproc.cpp:490 142 {*extendsidi2_rex64}
     (nil))
(insn 286 285 287 10 (parallel [
            (set (reg:DI 1 dx [orig:210 D.25628 ] [210])
                (ashift:DI (reg:DI 0 ax [orig:209 D.25628 ] [209])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:490 497 {*ashldi3_1}
     (nil))
(insn 287 286 288 10 (set (reg/f:DI 0 ax [330])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:490 89 {*movdi_internal}
     (nil))
(insn 288 287 289 10 (parallel [
            (set (reg/f:DI 3 bx [orig:211 D.25629 ] [211])
                (plus:DI (reg:DI 1 dx [orig:210 D.25628 ] [210])
                    (reg/f:DI 0 ax [330])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:490 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:210 D.25628 ] [210]))
        (nil)))
(insn 289 288 432 10 (set (reg:SF 26 xmm5 [orig:212 D.25630 ] [212])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:490 157 {*truncdfsf_fast_sse}
     (nil))
(insn 432 289 485 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 26 xmm5 [orig:212 D.25630 ] [212])) ge2fitman_preproc.cpp:490 129 {*movsf_internal}
     (nil))
(note 485 432 469 10 NOTE_INSN_DELETED)
(note 469 485 290 10 NOTE_INSN_DELETED)
(insn 290 469 291 10 (set (reg:DF 0 ax [331])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])) ge2fitman_preproc.cpp:490 128 {*movdf_internal}
     (nil))
(insn 291 290 433 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [331])) ge2fitman_preproc.cpp:490 128 {*movdf_internal}
     (nil))
(insn 433 291 292 10 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:490 128 {*movdf_internal}
     (nil))
(call_insn/u 292 433 294 10 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b4e60733400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:490 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 294 292 436 10 (set (reg:SF 21 xmm0 [orig:214 D.25630 ] [214])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:213 D.25631 ] [213]))) ge2fitman_preproc.cpp:490 157 {*truncdfsf_fast_sse}
     (nil))
(note 436 294 479 10 NOTE_INSN_DELETED)
(note 479 436 295 10 NOTE_INSN_DELETED)
(insn 295 479 435 10 (set (reg:SF 21 xmm0 [orig:215 D.25630 ] [215])
        (mult:SF (reg:SF 21 xmm0 [orig:215 D.25630 ] [215])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:490 775 {*fop_sf_comm_sse}
     (nil))
(insn 435 295 296 10 (set (reg:SF 0 ax [orig:215 D.25630 ] [215])
        (reg:SF 21 xmm0 [orig:215 D.25630 ] [215])) ge2fitman_preproc.cpp:490 129 {*movsf_internal}
     (nil))
(insn 296 435 297 10 (set (mem:SF (reg/f:DI 3 bx [orig:211 D.25629 ] [211]) [0 *_163+0 S4 A32])
        (reg:SF 0 ax [orig:215 D.25630 ] [215])) ge2fitman_preproc.cpp:490 129 {*movsf_internal}
     (nil))
(insn 297 296 298 10 (set (reg:SI 0 ax [332])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:491 90 {*movsi_internal}
     (nil))
(insn 298 297 299 10 (set (reg:DI 0 ax [orig:216 D.25632 ] [216])
        (sign_extend:DI (reg:SI 0 ax [332]))) ge2fitman_preproc.cpp:491 142 {*extendsidi2_rex64}
     (nil))
(insn 299 298 300 10 (parallel [
            (set (reg:DI 0 ax [orig:217 D.25632 ] [217])
                (plus:DI (reg:DI 0 ax [orig:216 D.25632 ] [216])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:491 221 {*adddi_1}
     (nil))
(insn 300 299 301 10 (parallel [
            (set (reg:DI 1 dx [orig:218 D.25632 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.25632 ] [217])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:491 497 {*ashldi3_1}
     (nil))
(insn 301 300 302 10 (set (reg/f:DI 0 ax [333])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:491 89 {*movdi_internal}
     (nil))
(insn 302 301 303 10 (parallel [
            (set (reg/f:DI 3 bx [orig:219 D.25629 ] [219])
                (plus:DI (reg:DI 1 dx [orig:218 D.25632 ] [218])
                    (reg/f:DI 0 ax [333])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:491 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.25632 ] [218]))
        (nil)))
(insn 303 302 437 10 (set (reg:SF 27 xmm6 [orig:220 D.25630 ] [220])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:491 157 {*truncdfsf_fast_sse}
     (nil))
(insn 437 303 484 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 27 xmm6 [orig:220 D.25630 ] [220])) ge2fitman_preproc.cpp:491 129 {*movsf_internal}
     (nil))
(note 484 437 468 10 NOTE_INSN_DELETED)
(note 468 484 304 10 NOTE_INSN_DELETED)
(insn 304 468 305 10 (set (reg:DF 0 ax [334])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])) ge2fitman_preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 305 304 438 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [334])) ge2fitman_preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 438 305 306 10 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:491 128 {*movdf_internal}
     (nil))
(call_insn/u 306 438 308 10 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b4e60771e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:491 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 308 306 441 10 (set (reg:SF 21 xmm0 [orig:222 D.25630 ] [222])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:221 D.25631 ] [221]))) ge2fitman_preproc.cpp:491 157 {*truncdfsf_fast_sse}
     (nil))
(note 441 308 478 10 NOTE_INSN_DELETED)
(note 478 441 309 10 NOTE_INSN_DELETED)
(insn 309 478 440 10 (set (reg:SF 21 xmm0 [orig:223 D.25630 ] [223])
        (mult:SF (reg:SF 21 xmm0 [orig:223 D.25630 ] [223])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:491 775 {*fop_sf_comm_sse}
     (nil))
(insn 440 309 310 10 (set (reg:SF 0 ax [orig:223 D.25630 ] [223])
        (reg:SF 21 xmm0 [orig:223 D.25630 ] [223])) ge2fitman_preproc.cpp:491 129 {*movsf_internal}
     (nil))
(insn 310 440 411 10 (set (mem:SF (reg/f:DI 3 bx [orig:219 D.25629 ] [219]) [0 *_171+0 S4 A32])
        (reg:SF 0 ax [orig:223 D.25630 ] [223])) ge2fitman_preproc.cpp:491 129 {*movsf_internal}
     (nil))
(jump_insn 411 310 412 10 (set (pc)
        (label_ref 375)) 636 {jump}
     (nil)
 -> 375)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 412 411 313)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350
(code_label 313 412 314 11 102 "" [1 uses])
(note 314 313 315 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 315 314 316 11 (set (reg:DF 21 xmm0 [336])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])) ge2fitman_preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 316 315 443 11 (set (reg:DF 21 xmm0 [335])
        (minus:DF (reg:DF 21 xmm0 [335])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:494 783 {*fop_df_1_sse}
     (nil))
(insn 443 316 317 11 (set (reg:DF 0 ax [335])
        (reg:DF 21 xmm0 [335])) ge2fitman_preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 317 443 318 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 0 ax [335])) ge2fitman_preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 318 317 319 11 (set (reg:DF 21 xmm0 [338])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])) ge2fitman_preproc.cpp:495 128 {*movdf_internal}
     (nil))
(insn 319 318 445 11 (set (reg:DF 21 xmm0 [337])
        (minus:DF (reg:DF 21 xmm0 [337])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:495 783 {*fop_df_1_sse}
     (nil))
(insn 445 319 320 11 (set (reg:DF 0 ax [337])
        (reg:DF 21 xmm0 [337])) ge2fitman_preproc.cpp:495 128 {*movdf_internal}
     (nil))
(insn 320 445 321 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 0 ax [337])) ge2fitman_preproc.cpp:495 128 {*movdf_internal}
     (nil))
(insn 321 320 322 11 (set (reg:SI 0 ax [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:497 90 {*movsi_internal}
     (nil))
(insn 322 321 323 11 (set (reg:DI 0 ax [orig:224 D.25628 ] [224])
        (sign_extend:DI (reg:SI 0 ax [339]))) ge2fitman_preproc.cpp:497 142 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 11 (parallel [
            (set (reg:DI 1 dx [orig:225 D.25628 ] [225])
                (ashift:DI (reg:DI 0 ax [orig:224 D.25628 ] [224])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:497 497 {*ashldi3_1}
     (nil))
(insn 324 323 325 11 (set (reg/f:DI 0 ax [340])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:497 89 {*movdi_internal}
     (nil))
(insn 325 324 326 11 (parallel [
            (set (reg/f:DI 3 bx [orig:226 D.25629 ] [226])
                (plus:DI (reg:DI 1 dx [orig:225 D.25628 ] [225])
                    (reg/f:DI 0 ax [340])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:497 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:225 D.25628 ] [225]))
        (nil)))
(insn 326 325 446 11 (set (reg:SF 28 xmm7 [orig:227 D.25630 ] [227])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64]))) ge2fitman_preproc.cpp:497 157 {*truncdfsf_fast_sse}
     (nil))
(insn 446 326 489 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 28 xmm7 [orig:227 D.25630 ] [227])) ge2fitman_preproc.cpp:497 129 {*movsf_internal}
     (nil))
(note 489 446 473 11 NOTE_INSN_DELETED)
(note 473 489 327 11 NOTE_INSN_DELETED)
(insn 327 473 328 11 (set (reg:DF 0 ax [341])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) ge2fitman_preproc.cpp:497 128 {*movdf_internal}
     (nil))
(insn 328 327 447 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [341])) ge2fitman_preproc.cpp:497 128 {*movdf_internal}
     (nil))
(insn 447 328 329 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:497 128 {*movdf_internal}
     (nil))
(call_insn/u 329 447 331 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b4e60733400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:497 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 331 329 450 11 (set (reg:SF 21 xmm0 [orig:229 D.25630 ] [229])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:228 D.25631 ] [228]))) ge2fitman_preproc.cpp:497 157 {*truncdfsf_fast_sse}
     (nil))
(note 450 331 477 11 NOTE_INSN_DELETED)
(note 477 450 332 11 NOTE_INSN_DELETED)
(insn 332 477 449 11 (set (reg:SF 21 xmm0 [orig:230 D.25630 ] [230])
        (mult:SF (reg:SF 21 xmm0 [orig:230 D.25630 ] [230])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:497 775 {*fop_sf_comm_sse}
     (nil))
(insn 449 332 333 11 (set (reg:SF 0 ax [orig:230 D.25630 ] [230])
        (reg:SF 21 xmm0 [orig:230 D.25630 ] [230])) ge2fitman_preproc.cpp:497 129 {*movsf_internal}
     (nil))
(insn 333 449 334 11 (set (mem:SF (reg/f:DI 3 bx [orig:226 D.25629 ] [226]) [0 *_180+0 S4 A32])
        (reg:SF 0 ax [orig:230 D.25630 ] [230])) ge2fitman_preproc.cpp:497 129 {*movsf_internal}
     (nil))
(insn 334 333 335 11 (set (reg:SI 0 ax [342])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:498 90 {*movsi_internal}
     (nil))
(insn 335 334 336 11 (set (reg:DI 0 ax [orig:231 D.25632 ] [231])
        (sign_extend:DI (reg:SI 0 ax [342]))) ge2fitman_preproc.cpp:498 142 {*extendsidi2_rex64}
     (nil))
(insn 336 335 337 11 (parallel [
            (set (reg:DI 0 ax [orig:232 D.25632 ] [232])
                (plus:DI (reg:DI 0 ax [orig:231 D.25632 ] [231])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:498 221 {*adddi_1}
     (nil))
(insn 337 336 338 11 (parallel [
            (set (reg:DI 1 dx [orig:233 D.25632 ] [233])
                (ashift:DI (reg:DI 0 ax [orig:232 D.25632 ] [232])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:498 497 {*ashldi3_1}
     (nil))
(insn 338 337 339 11 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:498 89 {*movdi_internal}
     (nil))
(insn 339 338 340 11 (parallel [
            (set (reg/f:DI 3 bx [orig:234 D.25629 ] [234])
                (plus:DI (reg:DI 1 dx [orig:233 D.25632 ] [233])
                    (reg/f:DI 0 ax [343])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:498 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:233 D.25632 ] [233]))
        (nil)))
(insn 340 339 451 11 (set (reg:SF 24 xmm3 [orig:235 D.25630 ] [235])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64]))) ge2fitman_preproc.cpp:498 157 {*truncdfsf_fast_sse}
     (nil))
(insn 451 340 488 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 24 xmm3 [orig:235 D.25630 ] [235])) ge2fitman_preproc.cpp:498 129 {*movsf_internal}
     (nil))
(note 488 451 472 11 NOTE_INSN_DELETED)
(note 472 488 341 11 NOTE_INSN_DELETED)
(insn 341 472 342 11 (set (reg:DF 0 ax [344])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) ge2fitman_preproc.cpp:498 128 {*movdf_internal}
     (nil))
(insn 342 341 452 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [344])) ge2fitman_preproc.cpp:498 128 {*movdf_internal}
     (nil))
(insn 452 342 343 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:498 128 {*movdf_internal}
     (nil))
(call_insn/u 343 452 345 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b4e60771e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:498 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 345 343 455 11 (set (reg:SF 21 xmm0 [orig:237 D.25630 ] [237])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:236 D.25631 ] [236]))) ge2fitman_preproc.cpp:498 157 {*truncdfsf_fast_sse}
     (nil))
(note 455 345 476 11 NOTE_INSN_DELETED)
(note 476 455 346 11 NOTE_INSN_DELETED)
(insn 346 476 454 11 (set (reg:SF 21 xmm0 [orig:238 D.25630 ] [238])
        (mult:SF (reg:SF 21 xmm0 [orig:238 D.25630 ] [238])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:498 775 {*fop_sf_comm_sse}
     (nil))
(insn 454 346 347 11 (set (reg:SF 0 ax [orig:238 D.25630 ] [238])
        (reg:SF 21 xmm0 [orig:238 D.25630 ] [238])) ge2fitman_preproc.cpp:498 129 {*movsf_internal}
     (nil))
(insn 347 454 348 11 (set (mem:SF (reg/f:DI 3 bx [orig:234 D.25629 ] [234]) [0 *_188+0 S4 A32])
        (reg:SF 0 ax [orig:238 D.25630 ] [238])) ge2fitman_preproc.cpp:498 129 {*movsf_internal}
     (nil))
(insn 348 347 349 11 (set (reg:SI 0 ax [345])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:500 90 {*movsi_internal}
     (nil))
(insn 349 348 350 11 (set (reg:DI 0 ax [orig:239 D.25628 ] [239])
        (sign_extend:DI (reg:SI 0 ax [345]))) ge2fitman_preproc.cpp:500 142 {*extendsidi2_rex64}
     (nil))
(insn 350 349 351 11 (parallel [
            (set (reg:DI 1 dx [orig:240 D.25628 ] [240])
                (ashift:DI (reg:DI 0 ax [orig:239 D.25628 ] [239])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:500 497 {*ashldi3_1}
     (nil))
(insn 351 350 352 11 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:500 89 {*movdi_internal}
     (nil))
(insn 352 351 353 11 (parallel [
            (set (reg/f:DI 3 bx [orig:241 D.25629 ] [241])
                (plus:DI (reg:DI 1 dx [orig:240 D.25628 ] [240])
                    (reg/f:DI 0 ax [346])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:500 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:240 D.25628 ] [240]))
        (nil)))
(insn 353 352 456 11 (set (reg:SF 25 xmm4 [orig:242 D.25630 ] [242])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:500 157 {*truncdfsf_fast_sse}
     (nil))
(insn 456 353 487 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 25 xmm4 [orig:242 D.25630 ] [242])) ge2fitman_preproc.cpp:500 129 {*movsf_internal}
     (nil))
(note 487 456 471 11 NOTE_INSN_DELETED)
(note 471 487 354 11 NOTE_INSN_DELETED)
(insn 354 471 355 11 (set (reg:DF 0 ax [347])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) ge2fitman_preproc.cpp:500 128 {*movdf_internal}
     (nil))
(insn 355 354 457 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [347])) ge2fitman_preproc.cpp:500 128 {*movdf_internal}
     (nil))
(insn 457 355 356 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:500 128 {*movdf_internal}
     (nil))
(call_insn/u 356 457 358 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b4e60733400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:500 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 358 356 460 11 (set (reg:SF 21 xmm0 [orig:244 D.25630 ] [244])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:243 D.25631 ] [243]))) ge2fitman_preproc.cpp:500 157 {*truncdfsf_fast_sse}
     (nil))
(note 460 358 475 11 NOTE_INSN_DELETED)
(note 475 460 359 11 NOTE_INSN_DELETED)
(insn 359 475 459 11 (set (reg:SF 21 xmm0 [orig:245 D.25630 ] [245])
        (mult:SF (reg:SF 21 xmm0 [orig:245 D.25630 ] [245])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:500 775 {*fop_sf_comm_sse}
     (nil))
(insn 459 359 360 11 (set (reg:SF 0 ax [orig:245 D.25630 ] [245])
        (reg:SF 21 xmm0 [orig:245 D.25630 ] [245])) ge2fitman_preproc.cpp:500 129 {*movsf_internal}
     (nil))
(insn 360 459 361 11 (set (mem:SF (reg/f:DI 3 bx [orig:241 D.25629 ] [241]) [0 *_195+0 S4 A32])
        (reg:SF 0 ax [orig:245 D.25630 ] [245])) ge2fitman_preproc.cpp:500 129 {*movsf_internal}
     (nil))
(insn 361 360 362 11 (set (reg:SI 0 ax [348])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:501 90 {*movsi_internal}
     (nil))
(insn 362 361 363 11 (set (reg:DI 0 ax [orig:246 D.25632 ] [246])
        (sign_extend:DI (reg:SI 0 ax [348]))) ge2fitman_preproc.cpp:501 142 {*extendsidi2_rex64}
     (nil))
(insn 363 362 364 11 (parallel [
            (set (reg:DI 0 ax [orig:247 D.25632 ] [247])
                (plus:DI (reg:DI 0 ax [orig:246 D.25632 ] [246])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:501 221 {*adddi_1}
     (nil))
(insn 364 363 365 11 (parallel [
            (set (reg:DI 1 dx [orig:248 D.25632 ] [248])
                (ashift:DI (reg:DI 0 ax [orig:247 D.25632 ] [247])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:501 497 {*ashldi3_1}
     (nil))
(insn 365 364 366 11 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:501 89 {*movdi_internal}
     (nil))
(insn 366 365 367 11 (parallel [
            (set (reg/f:DI 3 bx [orig:249 D.25629 ] [249])
                (plus:DI (reg:DI 1 dx [orig:248 D.25632 ] [248])
                    (reg/f:DI 0 ax [349])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:501 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:248 D.25632 ] [248]))
        (nil)))
(insn 367 366 461 11 (set (reg:SF 26 xmm5 [orig:250 D.25630 ] [250])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:501 157 {*truncdfsf_fast_sse}
     (nil))
(insn 461 367 486 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 26 xmm5 [orig:250 D.25630 ] [250])) ge2fitman_preproc.cpp:501 129 {*movsf_internal}
     (nil))
(note 486 461 470 11 NOTE_INSN_DELETED)
(note 470 486 368 11 NOTE_INSN_DELETED)
(insn 368 470 369 11 (set (reg:DF 0 ax [350])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) ge2fitman_preproc.cpp:501 128 {*movdf_internal}
     (nil))
(insn 369 368 462 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [350])) ge2fitman_preproc.cpp:501 128 {*movdf_internal}
     (nil))
(insn 462 369 370 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:501 128 {*movdf_internal}
     (nil))
(call_insn/u 370 462 372 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b4e60771e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:501 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 372 370 465 11 (set (reg:SF 21 xmm0 [orig:252 D.25630 ] [252])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:251 D.25631 ] [251]))) ge2fitman_preproc.cpp:501 157 {*truncdfsf_fast_sse}
     (nil))
(note 465 372 474 11 NOTE_INSN_DELETED)
(note 474 465 373 11 NOTE_INSN_DELETED)
(insn 373 474 464 11 (set (reg:SF 21 xmm0 [orig:253 D.25630 ] [253])
        (mult:SF (reg:SF 21 xmm0 [orig:253 D.25630 ] [253])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:501 775 {*fop_sf_comm_sse}
     (nil))
(insn 464 373 374 11 (set (reg:SF 0 ax [orig:253 D.25630 ] [253])
        (reg:SF 21 xmm0 [orig:253 D.25630 ] [253])) ge2fitman_preproc.cpp:501 129 {*movsf_internal}
     (nil))
(insn 374 464 375 11 (set (mem:SF (reg/f:DI 3 bx [orig:249 D.25629 ] [249]) [0 *_203+0 S4 A32])
        (reg:SF 0 ax [orig:253 D.25630 ] [253])) ge2fitman_preproc.cpp:501 129 {*movsf_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 375 374 376 12 109 "" [1 uses])
(note 376 375 377 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:444 220 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 351
(code_label 378 377 379 13 101 "" [1 uses])
(note 379 378 380 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 381 13 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:444 89 {*movdi_internal}
     (nil))
(insn 381 380 382 13 (set (reg:SI 0 ax [orig:83 D.25627 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [351])
                (const_int 324 [0x144])) [0 procpar_info_18(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:444 90 {*movsi_internal}
     (nil))
(insn 382 381 384 13 (parallel [
            (set (reg:SI 0 ax [orig:84 D.25627 ] [84])
                (ashift:SI (reg:SI 0 ax [orig:83 D.25627 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:444 496 {*ashlsi3_1}
     (nil))
(insn 384 382 385 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:84 D.25627 ] [84])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:444 7 {*cmpsi_1}
     (nil))
(jump_insn 385 384 386 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 383)
            (pc))) ge2fitman_preproc.cpp:444 596 {*jcc_1}
     (nil)
 -> 383)
;;  succ:       3
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 254 255
(note 386 385 387 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 387 386 390 14 (set (reg:SI 0 ax [orig:254 D.25627 ] [254])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:505 90 {*movsi_internal}
     (nil))
(insn 390 387 394 14 (set (reg:SI 0 ax [orig:255 <retval> ] [255])
        (reg:SI 0 ax [orig:254 D.25627 ] [254])) ge2fitman_preproc.cpp:505 90 {*movsi_internal}
     (nil))
(insn 394 390 395 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:255 <retval> ] [255])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 395 394 413 14 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:506 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 413 395 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1029, decl_uid=24326, symbol_order=259)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rzw {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,9u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 185{160d,25u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:506 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 21)
            (pc))) ge2fitman_preproc.cpp:506 596 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) ge2fitman_preproc.cpp:506 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 21)
            (pc))) ge2fitman_preproc.cpp:506 596 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b4e61d47000 __ioinit>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x2b4e618a1500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/4.9/iostream:74 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x2b4e61db0098 __dso_handle>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b4e61d47000 __ioinit>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x2b4e618a1700 __comp_dtor >)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 18 17 21 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x2b4e61d7ae00 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/4.9/iostream:74 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 18 22 5 116 "" [2 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 22 0 NOTE_INSN_DELETED)

;; Function (static initializers for ge2fitman_preproc.cpp) (_GLOBAL__sub_I__Z11pre_processPiP10PreprocessP12Procpar_infoPPfS5_, funcdef_no=1030, decl_uid=24332, symbol_order=368)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rzw {*call}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for ge2fitman_preproc.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 96{88d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x2b4e61d7ad00 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) ge2fitman_preproc.cpp:506 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
