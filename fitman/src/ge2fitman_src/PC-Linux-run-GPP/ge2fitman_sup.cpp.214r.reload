
;; Function void endianCheck_system(Endian_Check*, bool) (_Z18endianCheck_systemP12Endian_Checkb, funcdef_no=1020, decl_uid=24035, symbol_order=227)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 3
changing reg in insn 15
changing reg in insn 16
changing reg in insn 26
changing reg in insn 27
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


void endianCheck_system(Endian_Check*, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={8d,5u} r1={4d} r2={4d} r4={4d,1u} r5={6d,3u} r6={1d,13u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={7d,4u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} 
;;    total ref usage 269{232d,37u,0e} in 21{18 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])
        (reg:DI 5 di [ endian_check ])) ge2fitman_sup.cpp:20 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:SI 0 ax [85])
        (reg:SI 4 si [ verbose ])) ge2fitman_sup.cpp:20 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
        (reg:QI 0 ax [85])) ge2fitman_sup.cpp:20 93 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 8 5 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11isBigEndianv") [flags 0x3]  <function_decl 0x2b7595af6500 isBigEndian>) [0 isBigEndian S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:23 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 10 8 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 D.25071 ] [83])
            (const_int 0 [0]))) ge2fitman_sup.cpp:23 3 {*cmpsi_ccno_1}
     (nil))
(insn 11 10 12 2 (set (reg:QI 0 ax [orig:84 D.25072 ] [84])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_sup.cpp:23 592 {*setcc_qi}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.25072 ] [84])
            (const_int 0 [0]))) ge2fitman_sup.cpp:23 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) ge2fitman_sup.cpp:23 596 {*jcc_1}
     (nil)
 -> 24)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:24 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (mem/j:SI (reg/f:DI 0 ax [86]) [0 endian_check_3(D)->systemStruct+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:24 90 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:25 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) ge2fitman_sup.cpp:25 596 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b7595bcbed8 *.LC0>)) ge2fitman_sup.cpp:26 89 {*movdi_internal}
     (nil))
(call_insn 21 20 37 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:26 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 37 21 38 4 (set (pc)
        (label_ref 35)) 636 {jump}
     (nil)
 -> 35)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 38 37 24)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87
(code_label 24 38 25 5 2 "" [1 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:30 89 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (set (mem/j:SI (reg/f:DI 0 ax [87]) [0 endian_check_3(D)->systemStruct+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:30 90 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:31 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 29 28 30 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) ge2fitman_sup.cpp:31 596 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b7595bef000 *.LC1>)) ge2fitman_sup.cpp:32 89 {*movdi_internal}
     (nil))
(call_insn 32 31 35 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:32 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              3
;;              5
;;              4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 35 32 36 7 1 "" [3 uses])
(note 36 35 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 39 36 0 NOTE_INSN_DELETED)

;; Function int endianCheck_file(FILE*, Endian_Check*, bool*, char*, bool) (_Z16endianCheck_fileP8_IO_FILEP12Endian_CheckPbPcb, funcdef_no=1021, decl_uid=24041, symbol_order=228)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 34:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 35:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 70:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 89:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 122:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 136:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 141:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 144
changing reg in insn 29
changing reg in insn 149
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 34
changing reg in insn 36
changing reg in insn 43
changing reg in insn 44
changing reg in insn 95
changing reg in insn 96
changing reg in insn 149
changing reg in insn 153
changing reg in insn 6
changing reg in insn 11
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 21
changing reg in insn 35
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 59
changing reg in insn 60
changing reg in insn 68
changing reg in insn 69
changing reg in insn 77
changing reg in insn 78
changing reg in insn 88
changing reg in insn 89
changing reg in insn 94
changing reg in insn 95
changing reg in insn 102
changing reg in insn 103
changing reg in insn 111
changing reg in insn 112
changing reg in insn 120
changing reg in insn 121
changing reg in insn 129
changing reg in insn 130
changing reg in insn 140
changing reg in insn 141
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 124.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 137.


int endianCheck_file(FILE*, Endian_Check*, bool*, char*, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8]
;;  ref usage 	r0={40d,28u} r1={16d,4u} r2={14d,2u} r4={19d,7u} r5={25d,13u} r6={1d,53u} r7={1d,38u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={24d,11u} r18={12d} r19={12d} r20={1d,1u} r21={14d,1u} r22={14d,1u} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d,1u} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} 
;;    total ref usage 1057{897d,160u,0e} in 100{88 regular + 12 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85 90 91 92 93
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
        (reg:DI 5 di [ in_file ])) ge2fitman_sup.cpp:43 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])
        (reg:DI 4 si [ endian_check ])) ge2fitman_sup.cpp:43 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 swap_bytes+0 S8 A64])
        (reg:DI 1 dx [ swap_bytes ])) ge2fitman_sup.cpp:43 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])
        (reg:DI 2 cx [ filename ])) ge2fitman_sup.cpp:43 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [90])
        (reg:SI 37 r8 [ verbose ])) ge2fitman_sup.cpp:43 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
        (reg:QI 0 ax [90])) ge2fitman_sup.cpp:43 93 {*movqi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) ge2fitman_sup.cpp:51 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_sup.cpp:51 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (const_int 0 [0])) ge2fitman_sup.cpp:51 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) ge2fitman_sup.cpp:51 89 {*movdi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b7594767400 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:51 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 16 15 17 2 (set (reg:DI 1 dx [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:DI 0 ax [93])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:52 221 {*adddi_1}
     (nil))
(insn 18 17 19 2 (set (reg:DI 2 cx)
        (reg:DI 1 dx [92])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (const_int 1 [0x1])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b759475ff00 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:52 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 23 22 24 2 (set (reg:DI 0 ax [orig:84 D.25076 ] [84])
        (reg:DI 0 ax)) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:84 D.25076 ] [84])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:52 8 {*cmpdi_1}
     (nil))
(insn 25 24 26 2 (set (reg:QI 0 ax [orig:85 D.25077 ] [85])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_sup.cpp:52 592 {*setcc_qi}
     (nil))
(insn 26 25 27 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:85 D.25077 ] [85])
            (const_int 0 [0]))) ge2fitman_sup.cpp:52 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 27 26 28 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) ge2fitman_sup.cpp:52 596 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 28 27 29 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 159 3 (set (reg:SI 0 ax [orig:83 D.25075 ] [83])
        (const_int -1 [0xffffffffffffffff])) ge2fitman_sup.cpp:53 90 {*movsi_internal}
     (nil))
(jump_insn 159 29 160 3 (set (pc)
        (label_ref 147)) ge2fitman_sup.cpp:53 636 {jump}
     (nil)
 -> 147)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 160 159 32)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 94
(code_label 32 160 33 4 5 "" [1 uses])
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg:SF 22 xmm1 [orig:86 D.25078 ] [86])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 revision_num+0 S4 A32])) ge2fitman_sup.cpp:56 129 {*movsf_internal}
     (nil))
(insn 35 34 36 4 (set (reg:SF 21 xmm0 [94])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:56 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 36 35 37 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [94])
            (reg:SF 22 xmm1 [orig:86 D.25078 ] [86]))) ge2fitman_sup.cpp:56 55 {*cmpiusf_sse}
     (nil))
(jump_insn 37 36 41 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 161)
            (pc))) ge2fitman_sup.cpp:56 596 {*jcc_1}
     (nil)
 -> 161)
;;  succ:       5 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 95
(note 41 37 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:57 89 {*movdi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:SI 0 ax [orig:87 D.25075 ] [87])
        (mem/j:SI (reg/f:DI 0 ax [95]) [0 endian_check_8(D)->systemStruct+0 S4 A32])) ge2fitman_sup.cpp:57 90 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 D.25075 ] [87])
            (const_int 0 [0]))) ge2fitman_sup.cpp:57 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 45 44 46 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) ge2fitman_sup.cpp:57 596 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:58 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 48 47 49 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) ge2fitman_sup.cpp:58 596 {*jcc_1}
     (nil)
 -> 57)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 96
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])) ge2fitman_sup.cpp:59 89 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (set (reg:DI 4 si)
        (reg:DI 0 ax [96])) ge2fitman_sup.cpp:59 89 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b7595befa18 *.LC3>)) ge2fitman_sup.cpp:59 89 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:59 93 {*movqi_internal}
     (nil))
(call_insn 54 53 55 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:59 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 55 54 56 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b7595befab0 *.LC4>)) ge2fitman_sup.cpp:60 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:60 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97
(code_label 57 56 58 8 10 "" [1 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:62 89 {*movdi_internal}
     (nil))
(insn 60 59 162 8 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 4 [0x4])) [0 endian_check_8(D)->fileStruct+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:62 90 {*movsi_internal}
     (nil))
(jump_insn 162 60 163 8 (set (pc)
        (label_ref 79)) 636 {jump}
     (nil)
 -> 79)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 163 162 63)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 63 163 64 9 9 "" [1 uses])
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:64 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 66 65 67 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) ge2fitman_sup.cpp:64 596 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 98
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 10 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])) ge2fitman_sup.cpp:65 89 {*movdi_internal}
     (nil))
(insn 69 68 70 10 (set (reg:DI 4 si)
        (reg:DI 0 ax [98])) ge2fitman_sup.cpp:65 89 {*movdi_internal}
     (nil))
(insn 70 69 71 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b7595befa18 *.LC3>)) ge2fitman_sup.cpp:65 89 {*movdi_internal}
     (nil))
(insn 71 70 72 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:65 93 {*movqi_internal}
     (nil))
(call_insn 72 71 73 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:65 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 73 72 74 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b7595befb48 *.LC5>)) ge2fitman_sup.cpp:66 89 {*movdi_internal}
     (nil))
(call_insn 74 73 75 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:66 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 99
(code_label 75 74 76 11 12 "" [1 uses])
(note 76 75 77 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 11 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:68 89 {*movdi_internal}
     (nil))
(insn 78 77 79 11 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 4 [0x4])) [0 endian_check_8(D)->fileStruct+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:68 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              8 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 79 78 80 12 11 "" [1 uses])
(note 80 79 81 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:70 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 82 81 83 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) ge2fitman_sup.cpp:70 596 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 83 82 84 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b7595befbe0 *.LC6>)) ge2fitman_sup.cpp:71 89 {*movdi_internal}
     (nil))
(call_insn 85 84 86 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:71 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 100
(code_label 86 85 87 14 13 "" [1 uses])
(note 87 86 88 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 14 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 swap_bytes+0 S8 A64])) ge2fitman_sup.cpp:73 89 {*movdi_internal}
     (nil))
(insn 89 88 164 14 (set (mem:QI (reg/f:DI 0 ax [100]) [0 *swap_bytes_12(D)+0 S1 A8])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:73 93 {*movqi_internal}
     (nil))
(jump_insn 164 89 165 14 (set (pc)
        (label_ref 142)) 636 {jump}
     (nil)
 -> 142)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 165 164 161)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 101
(code_label 161 165 93 15 22 "" [1 uses])
(note 93 161 94 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 15 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:75 89 {*movdi_internal}
     (nil))
(insn 95 94 96 15 (set (reg:SI 0 ax [orig:88 D.25075 ] [88])
        (mem/j:SI (reg/f:DI 0 ax [101]) [0 endian_check_8(D)->systemStruct+0 S4 A32])) ge2fitman_sup.cpp:75 90 {*movsi_internal}
     (nil))
(insn 96 95 97 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.25075 ] [88])
            (const_int 0 [0]))) ge2fitman_sup.cpp:75 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 97 96 98 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) ge2fitman_sup.cpp:75 596 {*jcc_1}
     (nil)
 -> 115)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 98 97 99 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:76 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 100 99 101 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) ge2fitman_sup.cpp:76 596 {*jcc_1}
     (nil)
 -> 109)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 102
(note 101 100 102 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 17 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])) ge2fitman_sup.cpp:77 89 {*movdi_internal}
     (nil))
(insn 103 102 104 17 (set (reg:DI 4 si)
        (reg:DI 0 ax [102])) ge2fitman_sup.cpp:77 89 {*movdi_internal}
     (nil))
(insn 104 103 105 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b7595befa18 *.LC3>)) ge2fitman_sup.cpp:77 89 {*movdi_internal}
     (nil))
(insn 105 104 106 17 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:77 93 {*movqi_internal}
     (nil))
(call_insn 106 105 107 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:77 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 107 106 108 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b7595befb48 *.LC5>)) ge2fitman_sup.cpp:78 89 {*movdi_internal}
     (nil))
(call_insn 108 107 109 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:78 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 103
(code_label 109 108 110 18 16 "" [1 uses])
(note 110 109 111 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 18 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:80 89 {*movdi_internal}
     (nil))
(insn 112 111 166 18 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 4 [0x4])) [0 endian_check_8(D)->fileStruct+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:80 90 {*movsi_internal}
     (nil))
(jump_insn 166 112 167 18 (set (pc)
        (label_ref 131)) 636 {jump}
     (nil)
 -> 131)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 167 166 115)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 115 167 116 19 15 "" [1 uses])
(note 116 115 117 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:82 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 118 117 119 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 127)
            (pc))) ge2fitman_sup.cpp:82 596 {*jcc_1}
     (nil)
 -> 127)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 104
(note 119 118 120 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 20 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])) ge2fitman_sup.cpp:83 89 {*movdi_internal}
     (nil))
(insn 121 120 122 20 (set (reg:DI 4 si)
        (reg:DI 0 ax [104])) ge2fitman_sup.cpp:83 89 {*movdi_internal}
     (nil))
(insn 122 121 123 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b7595befa18 *.LC3>)) ge2fitman_sup.cpp:83 89 {*movdi_internal}
     (nil))
(insn 123 122 124 20 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:83 93 {*movqi_internal}
     (nil))
(call_insn 124 123 125 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:83 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 125 124 126 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b7595befab0 *.LC4>)) ge2fitman_sup.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn 126 125 127 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:84 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 105
(code_label 127 126 128 21 18 "" [1 uses])
(note 128 127 129 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 21 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:86 89 {*movdi_internal}
     (nil))
(insn 130 129 131 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 4 [0x4])) [0 endian_check_8(D)->fileStruct+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:86 90 {*movsi_internal}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              18 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 131 130 132 22 17 "" [1 uses])
(note 132 131 133 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:88 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 134 133 135 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) ge2fitman_sup.cpp:88 596 {*jcc_1}
     (nil)
 -> 138)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 135 134 136 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 23 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b7595befc78 *.LC7>)) ge2fitman_sup.cpp:89 89 {*movdi_internal}
     (nil))
(call_insn 137 136 138 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:89 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 106
(code_label 138 137 139 24 19 "" [1 uses])
(note 139 138 140 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 24 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 swap_bytes+0 S8 A64])) ge2fitman_sup.cpp:91 89 {*movdi_internal}
     (nil))
(insn 141 140 142 24 (set (mem:QI (reg/f:DI 0 ax [106]) [0 *swap_bytes_12(D)+0 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:91 93 {*movqi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              14 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 142 141 143 25 14 "" [1 uses])
(note 143 142 144 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 147 25 (set (reg:SI 0 ax [orig:83 D.25075 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:94 90 {*movsi_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              3 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 89
(code_label 147 144 148 26 20 "" [1 uses])
(note 148 147 149 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 153 26 (set (reg:SI 0 ax [orig:89 <retval> ] [89])
        (reg:SI 0 ax [orig:83 D.25075 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 153 149 154 26 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:89 <retval> ] [89])) ge2fitman_sup.cpp:95 90 {*movsi_internal}
     (nil))
(insn 154 153 168 26 (use (reg/i:SI 0 ax)) ge2fitman_sup.cpp:95 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 168 154 0 NOTE_INSN_DELETED)

;; Function int isBigEndian() (_Z11isBigEndianv, funcdef_no=1022, decl_uid=24032, symbol_order=229)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 11
changing reg in insn 21
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 21
changing reg in insn 25
starting the processing of deferred insns
ending the processing of deferred insns


int isBigEndian()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 17[flags]
;;  ref usage 	r0={7d,6u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,7u} r7={1d,5u} r17={2d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 46{26d,20u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 word+0 S2 A16])
        (const_int 17185 [0x4321])) ge2fitman_sup.cpp:103 92 {*movhi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg/f:DI 0 ax [orig:84 D.25085 ] [84])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:104 221 {*adddi_1}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax [orig:85 D.25086 ] [85])
        (mem:QI (reg/f:DI 0 ax [orig:84 D.25085 ] [84]) [0 MEM[(char *)_2]+0 S1 A8])) ge2fitman_sup.cpp:104 93 {*movqi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:85 D.25086 ] [85])
            (const_int 33 [0x21]))) ge2fitman_sup.cpp:104 5 {*cmpqi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) ge2fitman_sup.cpp:104 596 {*jcc_1}
     (nil)
 -> 14)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 28 3 (set (reg:SI 0 ax [orig:83 D.25084 ] [83])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:105 90 {*movsi_internal}
     (nil))
(jump_insn 28 11 29 3 (set (pc)
        (label_ref 19)) ge2fitman_sup.cpp:105 636 {jump}
     (nil)
 -> 19)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 29 28 14)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 14 29 15 4 24 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 19 4 (set (reg:SI 0 ax [orig:83 D.25084 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:107 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 86
(code_label 19 16 20 5 26 "" [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 25 5 (set (reg:SI 0 ax [orig:86 <retval> ] [86])
        (reg:SI 0 ax [orig:83 D.25084 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 25 21 26 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:86 <retval> ] [86])) ge2fitman_sup.cpp:109 90 {*movsi_internal}
     (nil))
(insn 26 25 30 5 (use (reg/i:SI 0 ax)) ge2fitman_sup.cpp:109 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 30 26 0 NOTE_INSN_DELETED)

;; Function bool isNumber(char*) (_Z8isNumberPc, funcdef_no=1023, decl_uid=24031, symbol_order=230)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 16
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) ?mr {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 52:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) q  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20

********** Pseudo live ranges #1: **********

  BB 20
   Insn 103: point = 0
   Insn 102: point = 0
   Insn 98: point = 1
  BB 18
   Insn 115: point = 4
   Insn 90: point = 4
  BB 17
   Insn 113: point = 5
   Insn 85: point = 5
  BB 16
   Insn 83: point = 6
   Insn 82: point = 6
   Insn 81: point = 7
   Insn 80: point = 9
  BB 15
   Insn 78: point = 10
   Insn 77: point = 10
  BB 14
   Insn 111: point = 10
   Insn 72: point = 10
  BB 13
   Insn 70: point = 11
   Insn 69: point = 11
   Insn 68: point = 12
   Insn 67: point = 14
  BB 12
   Insn 65: point = 15
   Insn 64: point = 15
  BB 9
   Insn 109: point = 15
   Insn 47: point = 15
  BB 7
   Insn 107: point = 16
   Insn 32: point = 16
  BB 6
   Insn 30: point = 17
   Insn 29: point = 17
  BB 5
   Insn 27: point = 17
   Insn 26: point = 17
   Insn 25: point = 18
   Insn 24: point = 20
   Insn 23: point = 22
   Insn 22: point = 23
   Insn 21: point = 25
  BB 4
   Insn 19: point = 26
   Insn 18: point = 26
   Insn 17: point = 27
   Insn 16: point = 29
   Insn 15: point = 31
   Insn 14: point = 32
   Insn 13: point = 34
  BB 11
   Insn 62: point = 35
   Insn 61: point = 35
   Insn 59: point = 36
   Insn 58: point = 38
   Insn 57: point = 40
   Insn 56: point = 41
   Insn 55: point = 43
  BB 3
   Insn 105: point = 44
  BB 10
   Insn 52: point = 44
  BB 8
   Insn 45: point = 44
   Insn 44: point = 44
   Insn 43: point = 45
   Insn 42: point = 47
   Insn 41: point = 49
   Insn 40: point = 51
   Insn 39: point = 53
   Insn 38: point = 54
   Insn 37: point = 56
  BB 19
   Insn 95: point = 57
  BB 2
   Insn 8: point = 58
   Insn 7: point = 58
   Insn 6: point = 58
   Insn 2: point = 58
 r83: [57..57] [15..16] [10..10] [2..5]
 r84: [39..41]
 r85: [37..38]
 r86: [35..36]
 r87: [30..32]
 r88: [28..29]
 r89: [26..27]
 r90: [21..23]
 r91: [19..20]
 r92: [17..18]
 r93: [52..54]
 r94: [50..51]
 r95: [48..49]
 r96: [46..47]
 r97: [44..45]
 r98: [11..12]
 r99: [6..7]
 r100: [0..1]
 r101: [33..34]
 r102: [30..31]
 r103: [24..25]
 r104: [21..22]
 r105: [55..56]
 r106: [52..53]
 r107: [42..43]
 r108: [39..40]
 r109: [13..14]
 r110: [8..9]
Compressing live ranges: from 58 to 52 - 89%
Ranges after the compression:
 r83: [51..51] [13..14] [8..8] [2..3]
 r84: [35..36]
 r85: [33..34]
 r86: [31..32]
 r87: [27..28]
 r88: [25..26]
 r89: [23..24]
 r90: [19..20]
 r91: [17..18]
 r92: [15..16]
 r93: [47..48]
 r94: [45..46]
 r95: [43..44]
 r96: [41..42]
 r97: [39..40]
 r98: [9..10]
 r99: [4..5]
 r100: [0..1]
 r101: [29..30]
 r102: [27..28]
 r103: [21..22]
 r104: [19..20]
 r105: [49..50]
 r106: [47..48]
 r107: [37..38]
 r108: [35..36]
 r109: [11..12]
 r110: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 95
changing reg in insn 90
changing reg in insn 85
changing reg in insn 72
changing reg in insn 47
changing reg in insn 32
changing reg in insn 98
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 14
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 68
changing reg in insn 69
changing reg in insn 81
changing reg in insn 82
changing reg in insn 98
changing reg in insn 102
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 67
changing reg in insn 68
changing reg in insn 80
changing reg in insn 81
starting the processing of deferred insns
ending the processing of deferred insns


bool isNumber(char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={31d,26u} r1={5d,4u,4e} r2={1d} r4={1d} r5={1d,1u} r6={1d,38u} r7={1d,20u} r17={16d,10u} r20={1d,1u,4e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 176{68d,100u,8e} in 64{64 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
        (reg:DI 5 di [ string ])) ge2fitman_sup.cpp:137 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:138 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:140 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 93)
            (pc))) ge2fitman_sup.cpp:140 596 {*jcc_1}
     (nil)
 -> 93)
;;  succ:       3 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 9 8 105 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 105 9 106 3 (set (pc)
        (label_ref 53)) ge2fitman_sup.cpp:141 636 {jump}
     (nil)
 -> 53)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 60)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 101 102
(code_label 60 106 12 4 33 "" [1 uses])
(note 12 60 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:142 90 {*movsi_internal}
     (nil))
(insn 14 13 15 4 (set (reg:DI 1 dx [orig:87 D.25088 ] [87])
        (sign_extend:DI (reg:SI 0 ax [101]))) ge2fitman_sup.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 15 14 16 4 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:142 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.25089 ] [88])
                (plus:DI (reg/f:DI 0 ax [102])
                    (reg:DI 1 dx [orig:87 D.25088 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:142 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:87 D.25088 ] [87]))
        (nil)))
(insn 17 16 18 4 (set (reg:QI 0 ax [orig:89 D.25090 ] [89])
        (mem:QI (reg/f:DI 0 ax [orig:88 D.25089 ] [88]) [0 *_9+0 S1 A8])) ge2fitman_sup.cpp:142 93 {*movqi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.25090 ] [89])
            (const_int 46 [0x2e]))) ge2fitman_sup.cpp:142 5 {*cmpqi_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) ge2fitman_sup.cpp:142 596 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       10
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 103 104
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:144 90 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (reg:DI 1 dx [orig:90 D.25088 ] [90])
        (sign_extend:DI (reg:SI 0 ax [103]))) ge2fitman_sup.cpp:144 142 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 5 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:144 89 {*movdi_internal}
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.25089 ] [91])
                (plus:DI (reg/f:DI 0 ax [104])
                    (reg:DI 1 dx [orig:90 D.25088 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:144 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.25088 ] [90]))
        (nil)))
(insn 25 24 26 5 (set (reg:QI 0 ax [orig:92 D.25090 ] [92])
        (mem:QI (reg/f:DI 0 ax [orig:91 D.25089 ] [91]) [0 *_13+0 S1 A8])) ge2fitman_sup.cpp:144 93 {*movqi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:92 D.25090 ] [92])
            (const_int 45 [0x2d]))) ge2fitman_sup.cpp:144 5 {*cmpqi_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) ge2fitman_sup.cpp:144 596 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:145 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 30 29 31 6 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) ge2fitman_sup.cpp:145 596 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 107 7 (set (reg:QI 0 ax [orig:83 D.25087 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:146 93 {*movqi_internal}
     (nil))
(jump_insn 107 32 108 7 (set (pc)
        (label_ref 96)) ge2fitman_sup.cpp:146 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 108 107 35)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 105 106
(code_label 35 108 36 8 31 "" [1 uses])
(note 36 35 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 8 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:148 90 {*movsi_internal}
     (nil))
(insn 38 37 39 8 (set (reg:DI 1 dx [orig:93 D.25088 ] [93])
        (sign_extend:DI (reg:SI 0 ax [105]))) ge2fitman_sup.cpp:148 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 8 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:148 89 {*movdi_internal}
     (nil))
(insn 40 39 41 8 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.25089 ] [94])
                (plus:DI (reg/f:DI 0 ax [106])
                    (reg:DI 1 dx [orig:93 D.25088 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:148 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.25088 ] [93]))
        (nil)))
(insn 41 40 42 8 (set (reg:QI 0 ax [orig:95 D.25090 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 D.25089 ] [94]) [0 *_16+0 S1 A8])) ge2fitman_sup.cpp:148 93 {*movqi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:SI 0 ax [orig:96 D.25091 ] [96])
        (sign_extend:SI (reg:QI 0 ax [orig:95 D.25090 ] [95]))) ge2fitman_sup.cpp:148 148 {extendqisi2}
     (nil))
(insn 43 42 44 8 (parallel [
            (set (reg:SI 0 ax [orig:97 D.25091 ] [97])
                (plus:SI (reg:SI 0 ax [orig:96 D.25091 ] [96])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:148 220 {*addsi_1}
     (nil))
(insn 44 43 45 8 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:97 D.25091 ] [97])
            (const_int 9 [0x9]))) ge2fitman_sup.cpp:148 7 {*cmpsi_1}
     (nil))
(jump_insn 45 44 46 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) ge2fitman_sup.cpp:148 596 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 46 45 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 109 9 (set (reg:QI 0 ax [orig:83 D.25087 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:149 93 {*movqi_internal}
     (nil))
(jump_insn 109 47 110 9 (set (pc)
        (label_ref 96)) ge2fitman_sup.cpp:149 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 110 109 50)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              6
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 50 110 51 10 30 "" [3 uses])
(note 51 50 52 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:151 220 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 107 108
(code_label 53 52 54 11 29 "" [1 uses])
(note 54 53 55 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 11 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:141 90 {*movsi_internal}
     (nil))
(insn 56 55 57 11 (set (reg:DI 1 dx [orig:84 D.25088 ] [84])
        (sign_extend:DI (reg:SI 0 ax [107]))) ge2fitman_sup.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 57 56 58 11 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:141 89 {*movdi_internal}
     (nil))
(insn 58 57 59 11 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.25089 ] [85])
                (plus:DI (reg/f:DI 0 ax [108])
                    (reg:DI 1 dx [orig:84 D.25088 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.25088 ] [84]))
        (nil)))
(insn 59 58 61 11 (set (reg:QI 0 ax [orig:86 D.25090 ] [86])
        (mem:QI (reg/f:DI 0 ax [orig:85 D.25089 ] [85]) [0 *_6+0 S1 A8])) ge2fitman_sup.cpp:141 93 {*movqi_internal}
     (nil))
(insn 61 59 62 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:86 D.25090 ] [86])
            (const_int 0 [0]))) ge2fitman_sup.cpp:141 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 62 61 63 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) ge2fitman_sup.cpp:141 596 {*jcc_1}
     (nil)
 -> 60)
;;  succ:       4
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 63 62 64 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:153 7 {*cmpsi_1}
     (nil))
(jump_insn 65 64 66 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) ge2fitman_sup.cpp:153 596 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 109
(note 66 65 67 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 13 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:153 89 {*movdi_internal}
     (nil))
(insn 68 67 69 13 (set (reg:QI 0 ax [orig:98 D.25090 ] [98])
        (mem:QI (reg/f:DI 0 ax [109]) [0 *string_4(D)+0 S1 A8])) ge2fitman_sup.cpp:153 93 {*movqi_internal}
     (nil))
(insn 69 68 70 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:98 D.25090 ] [98])
            (const_int 45 [0x2d]))) ge2fitman_sup.cpp:153 5 {*cmpqi_1}
     (nil))
(jump_insn 70 69 71 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) ge2fitman_sup.cpp:153 596 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 71 70 72 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 111 14 (set (reg:QI 0 ax [orig:83 D.25087 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:154 93 {*movqi_internal}
     (nil))
(jump_insn 111 72 112 14 (set (pc)
        (label_ref 96)) ge2fitman_sup.cpp:154 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 112 111 75)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 75 112 76 15 34 "" [2 uses])
(note 76 75 77 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:155 7 {*cmpsi_1}
     (nil))
(jump_insn 78 77 79 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) ge2fitman_sup.cpp:155 596 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 110
(note 79 78 80 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 16 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:155 89 {*movdi_internal}
     (nil))
(insn 81 80 82 16 (set (reg:QI 0 ax [orig:99 D.25090 ] [99])
        (mem:QI (reg/f:DI 0 ax [110]) [0 *string_4(D)+0 S1 A8])) ge2fitman_sup.cpp:155 93 {*movqi_internal}
     (nil))
(insn 82 81 83 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 D.25090 ] [99])
            (const_int 46 [0x2e]))) ge2fitman_sup.cpp:155 5 {*cmpqi_1}
     (nil))
(jump_insn 83 82 84 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) ge2fitman_sup.cpp:155 596 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 84 83 85 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 113 17 (set (reg:QI 0 ax [orig:83 D.25087 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:156 93 {*movqi_internal}
     (nil))
(jump_insn 113 85 114 17 (set (pc)
        (label_ref 96)) ge2fitman_sup.cpp:156 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 114 113 88)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;;              16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 88 114 89 18 35 "" [2 uses])
(note 89 88 90 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 115 18 (set (reg:QI 0 ax [orig:83 D.25087 ] [83])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:158 93 {*movqi_internal}
     (nil))
(jump_insn 115 90 116 18 (set (pc)
        (label_ref 96)) ge2fitman_sup.cpp:158 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 116 115 93)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 93 116 94 19 28 "" [1 uses])
(note 94 93 95 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 19 (set (reg:QI 0 ax [orig:83 D.25087 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:161 93 {*movqi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              7 [100.0%] 
;;              9 [100.0%] 
;;              14 [100.0%] 
;;              17 [100.0%] 
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 100
(code_label 96 95 97 20 32 "" [5 uses])
(note 97 96 98 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 102 20 (set (reg:QI 0 ax [orig:100 <retval> ] [100])
        (reg:QI 0 ax [orig:83 D.25087 ] [83])) 93 {*movqi_internal}
     (nil))
(insn 102 98 103 20 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:100 <retval> ] [100])) ge2fitman_sup.cpp:164 93 {*movqi_internal}
     (nil))
(insn 103 102 117 20 (use (reg/i:QI 0 ax)) ge2fitman_sup.cpp:164 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 117 103 0 NOTE_INSN_DELETED)

;; Function void swapBytes(char*, int) (_Z9swapBytesPci, funcdef_no=1024, decl_uid=24044, symbol_order=231)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 36:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 37:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=111 from oldreg=108, assigning class GENERAL_REGS to r111
   41: {r111:SI=r111:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   54: r111:SI=r107:SI
    Inserting insn reload after:
   55: r108:SI=r111:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rm {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 4
   Insn 47: point = 0
   Insn 46: point = 0
   Insn 44: point = 1
   Insn 43: point = 3
   Insn 42: point = 5
   Insn 55: point = 7
	Hard reg 1 is preferable by r111 with profit 1
   Insn 41: point = 9
   Insn 54: point = 9
   Insn 40: point = 10
  BB 2
   Insn 51: point = 11
   Insn 7: point = 11
   Insn 3: point = 11
   Insn 2: point = 11
  BB 3
   Insn 37: point = 11
   Insn 36: point = 11
   Insn 35: point = 12
   Insn 34: point = 13
   Insn 33: point = 15
   Insn 32: point = 16
   Insn 31: point = 18
   Insn 30: point = 20
   Insn 29: point = 22
   Insn 28: point = 23
   Insn 27: point = 24
   Insn 26: point = 26
   Insn 25: point = 28
   Insn 24: point = 29
   Insn 23: point = 31
   Insn 22: point = 33
   Insn 21: point = 35
   Insn 20: point = 36
   Insn 19: point = 38
   Insn 18: point = 39
   Insn 17: point = 41
   Insn 16: point = 42
   Insn 15: point = 43
   Insn 14: point = 45
   Insn 13: point = 47
   Insn 12: point = 48
   Insn 11: point = 50
 r83: [0..1]
 r84: [46..48]
 r85: [44..45]
 r86: [37..39]
 r87: [23..36]
 r88: [32..33]
 r89: [30..31]
 r90: [27..29]
 r91: [25..26]
 r92: [23..24]
 r93: [19..20]
 r94: [17..18]
 r95: [14..16]
 r96: [11..13]
 r97: [49..50]
 r98: [46..47]
 r99: [42..43]
 r100: [40..41]
 r101: [37..38]
 r102: [34..35]
 r103: [27..28]
 r104: [21..22]
 r105: [14..15]
 r106: [11..12]
 r107: [6..10]
 r108: [6..7]
 r109: [4..5]
 r110: [2..3]
 r111: [8..9]
Compressing live ranges: from 51 to 44 - 86%
Ranges after the compression:
 r83: [0..1]
 r84: [40..41]
 r85: [38..39]
 r86: [32..33]
 r87: [20..31]
 r88: [28..29]
 r89: [26..27]
 r90: [24..25]
 r91: [22..23]
 r92: [20..21]
 r93: [16..17]
 r94: [14..15]
 r95: [12..13]
 r96: [10..11]
 r97: [42..43]
 r98: [40..41]
 r99: [36..37]
 r100: [34..35]
 r101: [32..33]
 r102: [30..31]
 r103: [24..25]
 r104: [18..19]
 r105: [12..13]
 r106: [10..11]
 r107: [6..9]
 r108: [6..7]
 r109: [4..5]
 r110: [2..3]
 r111: [8..9]

********** Assignment #1: **********

	 Assigning to 111 (cl=GENERAL_REGS, orig=108, freq=3, tfirst=111, tfreq=3)...
	   Assign 1 to reload r111 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 44
changing reg in insn 46
changing reg in insn 12
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 28
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
deleting insn with uid = 55.
deleting insn with uid = 44.
starting the processing of deferred insns
ending the processing of deferred insns


void swapBytes(char*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={21d,21u} r1={8d,7u,3e} r2={2d,1u,1e} r4={1d,1u} r5={1d,1u} r6={1d,24u} r7={1d,5u} r17={13d,1u} r20={1d,1u,8e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 133{59d,62u,12e} in 38{38 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
        (reg:DI 5 di [ theVarChar ])) ge2fitman_sup.cpp:169 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
        (reg:SI 4 si [ size ])) ge2fitman_sup.cpp:169 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 51 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:180 90 {*movsi_internal}
     (nil))
(jump_insn 51 7 52 2 (set (pc)
        (label_ref 38)) ge2fitman_sup.cpp:180 636 {jump}
     (nil)
 -> 38)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 52 51 45)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106
(code_label 45 52 10 3 38 "" [1 uses])
(note 10 45 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:181 90 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 1 dx [orig:84 D.25093 ] [84])
        (sign_extend:DI (reg:SI 0 ax [97]))) ge2fitman_sup.cpp:181 142 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) ge2fitman_sup.cpp:181 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.25094 ] [85])
                (plus:DI (reg/f:DI 0 ax [98])
                    (reg:DI 1 dx [orig:84 D.25093 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:181 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.25093 ] [84]))
        (nil)))
(insn 15 14 16 3 (set (reg:QI 0 ax [99])
        (mem:QI (reg/f:DI 0 ax [orig:85 D.25094 ] [85]) [0 *_7+0 S1 A8])) ge2fitman_sup.cpp:181 93 {*movqi_internal}
     (nil))
(insn 16 15 17 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5 [0xfffffffffffffffb])) [0 tempChar+0 S1 A8])
        (reg:QI 0 ax [99])) ge2fitman_sup.cpp:181 93 {*movqi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:182 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 1 dx [orig:86 D.25093 ] [86])
        (sign_extend:DI (reg:SI 0 ax [100]))) ge2fitman_sup.cpp:182 142 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) ge2fitman_sup.cpp:182 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (parallel [
            (set (reg/f:DI 1 dx [orig:87 D.25094 ] [87])
                (plus:DI (reg:DI 1 dx [orig:86 D.25093 ] [86])
                    (reg/f:DI 0 ax [101])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:182 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.25093 ] [86]))
        (nil)))
(insn 21 20 22 3 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) ge2fitman_sup.cpp:182 90 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.25092 ] [88])
                (minus:SI (reg:SI 0 ax [102])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:182 263 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))
        (nil)))
(insn 23 22 24 3 (set (reg:DI 0 ax [orig:89 D.25093 ] [89])
        (sign_extend:DI (reg:SI 0 ax [orig:88 D.25092 ] [88]))) ge2fitman_sup.cpp:182 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg:DI 2 cx [orig:90 D.25093 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 D.25093 ] [89])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:182 221 {*adddi_1}
     (nil))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) ge2fitman_sup.cpp:182 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.25094 ] [91])
                (plus:DI (reg/f:DI 0 ax [103])
                    (reg:DI 2 cx [orig:90 D.25093 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:182 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 2 cx [orig:90 D.25093 ] [90]))
        (nil)))
(insn 27 26 28 3 (set (reg:QI 0 ax [orig:92 D.25095 ] [92])
        (mem:QI (reg/f:DI 0 ax [orig:91 D.25094 ] [91]) [0 *_14+0 S1 A8])) ge2fitman_sup.cpp:182 93 {*movqi_internal}
     (nil))
(insn 28 27 29 3 (set (mem:QI (reg/f:DI 1 dx [orig:87 D.25094 ] [87]) [0 *_10+0 S1 A8])
        (reg:QI 0 ax [orig:92 D.25095 ] [92])) ge2fitman_sup.cpp:182 93 {*movqi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) ge2fitman_sup.cpp:183 90 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (parallel [
            (set (reg:SI 0 ax [orig:93 D.25092 ] [93])
                (minus:SI (reg:SI 0 ax [104])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:183 263 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))
        (nil)))
(insn 31 30 32 3 (set (reg:DI 0 ax [orig:94 D.25093 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.25092 ] [93]))) ge2fitman_sup.cpp:183 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:DI 1 dx [orig:95 D.25093 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 D.25093 ] [94])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:183 221 {*adddi_1}
     (nil))
(insn 33 32 34 3 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) ge2fitman_sup.cpp:183 89 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg/f:DI 1 dx [orig:96 D.25094 ] [96])
                (plus:DI (reg:DI 1 dx [orig:95 D.25093 ] [95])
                    (reg/f:DI 0 ax [105])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:183 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.25093 ] [95]))
        (nil)))
(insn 35 34 36 3 (set (reg:QI 0 ax [106])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5 [0xfffffffffffffffb])) [0 tempChar+0 S1 A8])) ge2fitman_sup.cpp:183 93 {*movqi_internal}
     (nil))
(insn 36 35 37 3 (set (mem:QI (reg/f:DI 1 dx [orig:96 D.25094 ] [96]) [0 *_19+0 S1 A8])
        (reg:QI 0 ax [106])) ge2fitman_sup.cpp:183 93 {*movqi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:180 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 107 108 109 110
(code_label 38 37 39 4 37 "" [1 uses])
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 54 4 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) ge2fitman_sup.cpp:180 90 {*movsi_internal}
     (nil))
(insn 54 40 41 4 (set (reg:SI 1 dx [108])
        (reg:SI 0 ax [107])) ge2fitman_sup.cpp:180 90 {*movsi_internal}
     (nil))
(insn 41 54 42 4 (parallel [
            (set (reg:SI 1 dx [108])
                (lshiftrt:SI (reg:SI 1 dx [108])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:180 529 {*lshrsi3_1}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg:SI 0 ax [109])
                (plus:SI (reg:SI 0 ax [107])
                    (reg:SI 1 dx [108])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:180 220 {*addsi_1}
     (nil))
(insn 43 42 46 4 (parallel [
            (set (reg:SI 0 ax [110])
                (ashiftrt:SI (reg:SI 0 ax [109])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:180 530 {*ashrsi3_1}
     (nil))
(insn 46 43 47 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.25092 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) ge2fitman_sup.cpp:180 7 {*cmpsi_1}
     (nil))
(jump_insn 47 46 48 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) ge2fitman_sup.cpp:180 596 {*jcc_1}
     (nil)
 -> 45)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 48 47 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 53 48 0 NOTE_INSN_DELETED)

;; Function bool promptYN() (_Z8promptYNv, funcdef_no=1025, decl_uid=24047, symbol_order=232)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) q  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 46
changing reg in insn 41
changing reg in insn 62
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 23
changing reg in insn 35
changing reg in insn 33
changing reg in insn 28
changing reg in insn 26
changing reg in insn 24
changing reg in insn 62
changing reg in insn 66
starting the processing of deferred insns
ending the processing of deferred insns


bool promptYN()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={17d,17u} r1={6d} r2={6d} r4={6d} r5={11d,5u} r6={1d,20u} r7={1d,21u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={11d,6u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} 
;;    total ref usage 450{380d,70u,0e} in 41{36 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 57 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85
(code_label 57 2 4 3 46 "" [1 uses])
(note 4 57 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 4 6 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b7595c101c8 *.LC8>)) ge2fitman_sup.cpp:203 89 {*movdi_internal}
     (nil))
(insn 6 5 7 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:203 93 {*movqi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:203 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 8 7 9 3 (set (reg/f:DI 0 ax [orig:84 D.25097 ] [84])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x2b7594742a18 stdin>) [0 stdin+0 S8 A64])) ge2fitman_sup.cpp:204 89 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:84 D.25097 ] [84])) ge2fitman_sup.cpp:204 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2b759474e400 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:204 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:85 D.25098 ] [85])
        (reg:SI 0 ax)) ge2fitman_sup.cpp:204 90 {*movsi_internal}
     (nil))
(insn 12 11 19 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8])
        (reg:QI 0 ax [orig:85 D.25098 ] [85])) ge2fitman_sup.cpp:204 93 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              4 (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 86 87
(code_label 19 12 13 4 40 "" [1 uses])
(note 13 19 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:DI 0 ax [orig:86 D.25097 ] [86])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x2b7594742a18 stdin>) [0 stdin+0 S8 A64])) ge2fitman_sup.cpp:206 89 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:86 D.25097 ] [86])) ge2fitman_sup.cpp:206 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2b759474e400 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:206 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 4 (set (reg:SI 0 ax [orig:87 D.25098 ] [87])
        (reg:SI 0 ax)) ge2fitman_sup.cpp:206 90 {*movsi_internal}
     (nil))
(insn 18 17 20 4 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
        (reg:QI 0 ax [orig:87 D.25098 ] [87])) ge2fitman_sup.cpp:206 93 {*movqi_internal}
     (nil))
(insn 20 18 21 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
            (const_int 10 [0xa]))) ge2fitman_sup.cpp:205 5 {*cmpqi_1}
     (nil))
(jump_insn 21 20 22 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) ge2fitman_sup.cpp:205 596 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       4 (DFS_BACK)
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 0 ax [orig:88 D.25098 ] [88])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8]))) ge2fitman_sup.cpp:209 148 {extendqisi2}
     (nil))
(insn 24 23 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.25098 ] [88])
            (const_int 89 [0x59]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 25 24 69 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) ge2fitman_sup.cpp:209 596 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       11
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(note 69 25 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 69 27 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.25098 ] [88])
            (const_int 89 [0x59]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 27 26 70 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) ge2fitman_sup.cpp:209 596 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       9
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(note 70 27 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 28 70 29 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.25098 ] [88])
            (const_int 78 [0x4e]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 29 28 75 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) ge2fitman_sup.cpp:209 596 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       12
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 75 29 76 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 76 75 77 8 (set (pc)
        (label_ref 49)) ge2fitman_sup.cpp:209 636 {jump}
     (nil)
 -> 49)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 77 76 32)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(code_label 32 77 72 9 43 "" [1 uses])
(note 72 32 33 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 33 72 34 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.25098 ] [88])
            (const_int 110 [0x6e]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 73 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) ge2fitman_sup.cpp:209 596 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       12
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(note 73 34 35 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 35 73 36 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.25098 ] [88])
            (const_int 121 [0x79]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 36 35 39 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 49)
            (pc))) ge2fitman_sup.cpp:209 596 {*jcc_1}
     (nil)
 -> 49)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 39 36 40 11 42 "" [1 uses])
(note 40 39 41 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 78 11 (set (reg:QI 0 ax [orig:83 D.25096 ] [83])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:212 93 {*movqi_internal}
     (nil))
(jump_insn 78 41 79 11 (set (pc)
        (label_ref 60)) ge2fitman_sup.cpp:212 636 {jump}
     (nil)
 -> 60)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 79 78 44)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              9
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 44 79 45 12 44 "" [2 uses])
(note 45 44 46 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 80 12 (set (reg:QI 0 ax [orig:83 D.25096 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:216 93 {*movqi_internal}
     (nil))
(jump_insn 80 46 81 12 (set (pc)
        (label_ref 60)) ge2fitman_sup.cpp:216 636 {jump}
     (nil)
 -> 60)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 81 80 49)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              8 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 49 81 50 13 41 "" [2 uses])
(note 50 49 51 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b7595c10260 *.LC9>)) ge2fitman_sup.cpp:219 89 {*movdi_internal}
     (nil))
(insn 52 51 53 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:219 93 {*movqi_internal}
     (nil))
(call_insn 53 52 54 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:219 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 54 53 55 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b7595c102f8 *.LC10>)) ge2fitman_sup.cpp:220 89 {*movdi_internal}
     (nil))
(call_insn 55 54 84 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:220 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 14, flags: (NEW, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 84 55 85 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 56 16 (const_int 0 [0]) ge2fitman_sup.cpp:221 662 {nop}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 56 85 82 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 82 56 83 14 (set (pc)
        (label_ref 57)) ge2fitman_sup.cpp:223 636 {jump}
     (nil)
 -> 57)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 83 82 60)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%] 
;;              12 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 89
(code_label 60 83 61 15 45 "" [2 uses])
(note 61 60 62 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 66 15 (set (reg:QI 0 ax [orig:89 <retval> ] [89])
        (reg:QI 0 ax [orig:83 D.25096 ] [83])) 93 {*movqi_internal}
     (nil))
(insn 66 62 67 15 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:89 <retval> ] [89])) ge2fitman_sup.cpp:224 93 {*movqi_internal}
     (nil))
(insn 67 66 86 15 (use (reg/i:QI 0 ax)) ge2fitman_sup.cpp:224 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 86 67 0 NOTE_INSN_DELETED)

;; Function int promptSUBN() (_Z10promptSUBNv, funcdef_no=1026, decl_uid=24048, symbol_order=233)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rw {*tablejump_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 51
changing reg in insn 46
changing reg in insn 41
changing reg in insn 36
changing reg in insn 67
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 23
changing reg in insn 24
changing reg in insn 67
changing reg in insn 71
changing reg in insn 24
changing reg in insn 27
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
starting the processing of deferred insns
ending the processing of deferred insns


int promptSUBN()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={22d,17u} r1={6d} r2={6d} r4={6d} r5={11d,5u} r6={1d,18u} r7={1d,19u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={8d,2u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} 
;;    total ref usage 444{382d,62u,0e} in 40{35 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 62 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              12 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85
(code_label 62 2 4 3 56 "" [1 uses])
(note 4 62 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 4 6 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b7595c18000 *.LC11>)) ge2fitman_sup.cpp:233 89 {*movdi_internal}
     (nil))
(insn 6 5 7 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:233 93 {*movqi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:233 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 8 7 9 3 (set (reg/f:DI 0 ax [orig:84 D.25104 ] [84])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x2b7594742a18 stdin>) [0 stdin+0 S8 A64])) ge2fitman_sup.cpp:234 89 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:84 D.25104 ] [84])) ge2fitman_sup.cpp:234 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2b759474e400 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:234 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:85 D.25103 ] [85])
        (reg:SI 0 ax)) ge2fitman_sup.cpp:234 90 {*movsi_internal}
     (nil))
(insn 12 11 19 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8])
        (reg:QI 0 ax [orig:85 D.25103 ] [85])) ge2fitman_sup.cpp:234 93 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              4 (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 86 87
(code_label 19 12 13 4 48 "" [1 uses])
(note 13 19 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:DI 0 ax [orig:86 D.25104 ] [86])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x2b7594742a18 stdin>) [0 stdin+0 S8 A64])) ge2fitman_sup.cpp:236 89 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:86 D.25104 ] [86])) ge2fitman_sup.cpp:236 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2b759474e400 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:236 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 4 (set (reg:SI 0 ax [orig:87 D.25103 ] [87])
        (reg:SI 0 ax)) ge2fitman_sup.cpp:236 90 {*movsi_internal}
     (nil))
(insn 18 17 20 4 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
        (reg:QI 0 ax [orig:87 D.25103 ] [87])) ge2fitman_sup.cpp:236 93 {*movqi_internal}
     (nil))
(insn 20 18 21 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
            (const_int 10 [0xa]))) ge2fitman_sup.cpp:235 5 {*cmpqi_1}
     (nil))
(jump_insn 21 20 22 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) ge2fitman_sup.cpp:235 596 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       4 (DFS_BACK)
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 90
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 0 ax [orig:88 D.25103 ] [88])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8]))) ge2fitman_sup.cpp:239 148 {extendqisi2}
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg:SI 0 ax [90])
                (plus:SI (reg:SI 0 ax [orig:88 D.25103 ] [88])
                    (const_int -66 [0xffffffffffffffbe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:239 220 {*addsi_1}
     (nil))
(insn 25 24 26 5 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [90])
            (const_int 51 [0x33]))) ge2fitman_sup.cpp:239 7 {*cmpsi_1}
     (nil))
(jump_insn 26 25 74 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) ge2fitman_sup.cpp:239 596 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       11
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  def 	 91 92
(note 74 26 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 74 28 6 (set (reg:DI 0 ax [91])
        (zero_extend:DI (reg:SI 0 ax [90]))) ge2fitman_sup.cpp:239 133 {*zero_extendsidi2}
     (nil))
(insn 28 27 29 6 (set (reg:DI 0 ax [92])
        (mem/u/c:DI (plus:DI (ashift:DI (reg:DI 0 ax [91])
                    (const_int 3 [0x3]))
                (label_ref:DI 31)) [0  S8 A8])) ge2fitman_sup.cpp:239 89 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 31 (nil)))
(jump_insn 29 28 30 6 (parallel [
            (set (pc)
                (reg:DI 0 ax [92]))
            (use (label_ref 31))
        ]) ge2fitman_sup.cpp:239 640 {*tablejump_1}
     (nil)
 -> 31)
;;  succ:       11
;;              9
;;              10
;;              7
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 30 29 31)
;; Insn is not within a basic block
(code_label 31 30 32 51 "" [2 uses])
;; Insn is not within a basic block
(jump_table_data 32 31 33 (addr_vec:DI [
            (label_ref:DI 44)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 49)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 34)
            (label_ref:DI 54)
            (label_ref:DI 39)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 44)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 49)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 54)
            (label_ref:DI 34)
            (label_ref:DI 54)
            (label_ref:DI 39)
        ]))
(barrier 33 32 34)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 34 33 35 7 53 "" [2 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 75 7 (set (reg:SI 0 ax [orig:83 D.25103 ] [83])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:242 90 {*movsi_internal}
     (nil))
(jump_insn 75 36 76 7 (set (pc)
        (label_ref 65)) ge2fitman_sup.cpp:242 636 {jump}
     (nil)
 -> 65)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 76 75 39)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 39 76 40 8 54 "" [2 uses])
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 77 8 (set (reg:SI 0 ax [orig:83 D.25103 ] [83])
        (const_int 2 [0x2])) ge2fitman_sup.cpp:246 90 {*movsi_internal}
     (nil))
(jump_insn 77 41 78 8 (set (pc)
        (label_ref 65)) ge2fitman_sup.cpp:246 636 {jump}
     (nil)
 -> 65)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 78 77 44)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 44 78 45 9 50 "" [2 uses])
(note 45 44 46 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 79 9 (set (reg:SI 0 ax [orig:83 D.25103 ] [83])
        (const_int 0 [0])) ge2fitman_sup.cpp:250 90 {*movsi_internal}
     (nil))
(jump_insn 79 46 80 9 (set (pc)
        (label_ref 65)) ge2fitman_sup.cpp:250 636 {jump}
     (nil)
 -> 65)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 80 79 49)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 49 80 50 10 52 "" [2 uses])
(note 50 49 51 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 81 10 (set (reg:SI 0 ax [orig:83 D.25103 ] [83])
        (const_int -1 [0xffffffffffffffff])) ge2fitman_sup.cpp:254 90 {*movsi_internal}
     (nil))
(jump_insn 81 51 82 10 (set (pc)
        (label_ref 65)) ge2fitman_sup.cpp:254 636 {jump}
     (nil)
 -> 65)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 82 81 54)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 54 82 55 11 49 "" [45 uses])
(note 55 54 56 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b7595c10260 *.LC9>)) ge2fitman_sup.cpp:257 89 {*movdi_internal}
     (nil))
(insn 57 56 58 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:257 93 {*movqi_internal}
     (nil))
(call_insn 58 57 59 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:257 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 59 58 60 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b7595c18098 *.LC12>)) ge2fitman_sup.cpp:258 89 {*movdi_internal}
     (nil))
(call_insn 60 59 85 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:258 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 12, flags: (NEW, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 85 60 86 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 61 14 (const_int 0 [0]) ge2fitman_sup.cpp:259 662 {nop}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 61 86 83 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 83 61 84 12 (set (pc)
        (label_ref 62)) ge2fitman_sup.cpp:261 636 {jump}
     (nil)
 -> 62)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 84 83 65)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 [100.0%] 
;;              7 [100.0%] 
;;              8 [100.0%] 
;;              10 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 89
(code_label 65 84 66 13 55 "" [4 uses])
(note 66 65 67 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 71 13 (set (reg:SI 0 ax [orig:89 <retval> ] [89])
        (reg:SI 0 ax [orig:83 D.25103 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 71 67 72 13 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:89 <retval> ] [89])) ge2fitman_sup.cpp:262 90 {*movsi_internal}
     (nil))
(insn 72 71 87 13 (use (reg/i:SI 0 ax)) ge2fitman_sup.cpp:262 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 87 72 0 NOTE_INSN_DELETED)

;; Function void init(Data_file_header*, Data_block_header*, Procpar_info*, Preprocess*, IOFiles*, InFile_struct*) (_Z4initP16Data_file_headerP17Data_block_headerP12Procpar_infoP10PreprocessP7IOFilesP13InFile_struct, funcdef_no=1027, decl_uid=24057, symbol_order=234)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=547 from oldreg=84, assigning class GENERAL_REGS to r547
   17: {r547:DI=r547:DI<<0x9;clobber flags:CC;}
      REG_DEAD r83:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  801: r547:DI=r83:DI
    Inserting insn reload after:
  802: r84:DI=r547:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=548 from oldreg=87, assigning class GENERAL_REGS to r548
   24: {r548:DI=r548:DI<<0x9;clobber flags:CC;}
      REG_DEAD r86:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  803: r548:DI=r86:DI
    Inserting insn reload after:
  804: r87:DI=r548:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=549 from oldreg=90, assigning class GENERAL_REGS to r549
   31: {r549:DI=r549:DI<<0x9;clobber flags:CC;}
      REG_DEAD r89:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  805: r549:DI=r89:DI
    Inserting insn reload after:
  806: r90:DI=r549:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=550 from oldreg=93, assigning class GENERAL_REGS to r550
   37: {r550:DI=r550:DI<<0x9;clobber flags:CC;}
      REG_DEAD r92:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  807: r550:DI=r92:DI
    Inserting insn reload after:
  808: r93:DI=r550:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=551 from oldreg=96, assigning class GENERAL_REGS to r551
   43: {r551:DI=r551:DI<<0x9;clobber flags:CC;}
      REG_DEAD r95:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  809: r551:DI=r95:DI
    Inserting insn reload after:
  810: r96:DI=r551:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 46:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 47:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 50:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=552 from oldreg=99, assigning class GENERAL_REGS to r552
   50: {r552:DI=r552:DI<<0x9;clobber flags:CC;}
      REG_DEAD r98:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  811: r552:DI=r98:DI
    Inserting insn reload after:
  812: r99:DI=r552:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 53:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 54:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=553 from oldreg=102, assigning class GENERAL_REGS to r553
   57: {r553:DI=r553:DI<<0x9;clobber flags:CC;}
      REG_DEAD r101:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  813: r553:DI=r101:DI
    Inserting insn reload after:
  814: r102:DI=r553:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=554 from oldreg=105, assigning class GENERAL_REGS to r554
   64: {r554:DI=r554:DI<<0x9;clobber flags:CC;}
      REG_DEAD r104:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  815: r554:DI=r104:DI
    Inserting insn reload after:
  816: r105:DI=r554:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=555 from oldreg=108, assigning class GENERAL_REGS to r555
   71: {r555:DI=r555:DI<<0x9;clobber flags:CC;}
      REG_DEAD r107:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  817: r555:DI=r107:DI
    Inserting insn reload after:
  818: r108:DI=r555:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=556 from oldreg=111, assigning class GENERAL_REGS to r556
   78: {r556:DI=r556:DI<<0x9;clobber flags:CC;}
      REG_DEAD r110:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  819: r556:DI=r110:DI
    Inserting insn reload after:
  820: r111:DI=r556:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=557 from oldreg=114, assigning class GENERAL_REGS to r557
   85: {r557:DI=r557:DI<<0x9;clobber flags:CC;}
      REG_DEAD r113:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  821: r557:DI=r113:DI
    Inserting insn reload after:
  822: r114:DI=r557:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 92:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=558 from oldreg=117, assigning class GENERAL_REGS to r558
   92: {r558:DI=r558:DI<<0x9;clobber flags:CC;}
      REG_DEAD r116:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  823: r558:DI=r116:DI
    Inserting insn reload after:
  824: r117:DI=r558:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 96:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=559 from oldreg=120, assigning class GENERAL_REGS to r559
   99: {r559:DI=r559:DI<<0x9;clobber flags:CC;}
      REG_DEAD r119:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  825: r559:DI=r119:DI
    Inserting insn reload after:
  826: r120:DI=r559:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 106:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=560 from oldreg=123, assigning class GENERAL_REGS to r560
  106: {r560:DI=r560:DI<<0x9;clobber flags:CC;}
      REG_DEAD r122:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  827: r560:DI=r122:DI
    Inserting insn reload after:
  828: r123:DI=r560:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 113:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=561 from oldreg=126, assigning class GENERAL_REGS to r561
  113: {r561:DI=r561:DI<<0x9;clobber flags:CC;}
      REG_DEAD r125:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  829: r561:DI=r125:DI
    Inserting insn reload after:
  830: r126:DI=r561:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 120:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=562 from oldreg=129, assigning class GENERAL_REGS to r562
  120: {r562:DI=r562:DI<<0x9;clobber flags:CC;}
      REG_DEAD r128:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  831: r562:DI=r128:DI
    Inserting insn reload after:
  832: r129:DI=r562:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 123:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 124:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=563 from oldreg=132, assigning class GENERAL_REGS to r563
  127: {r563:DI=r563:DI<<0x9;clobber flags:CC;}
      REG_DEAD r131:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  833: r563:DI=r131:DI
    Inserting insn reload after:
  834: r132:DI=r563:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 131:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 134:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=564 from oldreg=135, assigning class GENERAL_REGS to r564
  134: {r564:DI=r564:DI<<0x9;clobber flags:CC;}
      REG_DEAD r134:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  835: r564:DI=r134:DI
    Inserting insn reload after:
  836: r135:DI=r564:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=565 from oldreg=139, assigning class GENERAL_REGS to r565
  144: {r565:DI=r565:DI<<0x9;clobber flags:CC;}
      REG_DEAD r138:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  837: r565:DI=r138:DI
    Inserting insn reload after:
  838: r139:DI=r565:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 149:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 150:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 165:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=566 from oldreg=143, assigning class GENERAL_REGS to r566
  165: {r566:DI=r566:DI<<0x9;clobber flags:CC;}
      REG_DEAD r142:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  839: r566:DI=r142:DI
    Inserting insn reload after:
  840: r143:DI=r566:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 170:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 171:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 182:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=567 from oldreg=146, assigning class GENERAL_REGS to r567
  182: {r567:DI=r567:DI<<0x9;clobber flags:CC;}
      REG_DEAD r145:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  841: r567:DI=r145:DI
    Inserting insn reload after:
  842: r146:DI=r567:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 186:  (0) r  (1) i {*movdi_internal}
      Creating newreg=568, assigning class GENERAL_REGS to r568
  186: r568:DI=0x2065746144206f4e
    Inserting insn reload after:
  843: [r148:DI]=r568:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 843:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 187:  (0) r  (1) i {*movdi_internal}
      Creating newreg=569, assigning class GENERAL_REGS to r569
  187: r569:DI=0x6c62616c69617641
    Inserting insn reload after:
  844: [r148:DI+0x8]=r569:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 844:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 195:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=570 from oldreg=151, assigning class GENERAL_REGS to r570
  195: {r570:DI=r570:DI<<0x9;clobber flags:CC;}
      REG_DEAD r150:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  845: r570:DI=r150:DI
    Inserting insn reload after:
  846: r151:DI=r570:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 200:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 201:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 212:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=571 from oldreg=154, assigning class GENERAL_REGS to r571
  212: {r571:DI=r571:DI<<0x9;clobber flags:CC;}
      REG_DEAD r153:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  847: r571:DI=r153:DI
    Inserting insn reload after:
  848: r154:DI=r571:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 214
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 216:  (0) r  (1) i {*movdi_internal}
      Creating newreg=572, assigning class GENERAL_REGS to r572
  216: r572:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  849: [r156:DI]=r572:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 849:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 217:  (0) r  (1) i {*movdi_internal}
      Creating newreg=573, assigning class GENERAL_REGS to r573
  217: r573:DI=0x6961764120656d61
    Inserting insn reload after:
  850: [r156:DI+0x8]=r573:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 850:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=574 from oldreg=159, assigning class GENERAL_REGS to r574
  226: {r574:DI=r574:DI<<0x9;clobber flags:CC;}
      REG_DEAD r158:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  851: r574:DI=r158:DI
    Inserting insn reload after:
  852: r159:DI=r574:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 231:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 232:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 243:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=575 from oldreg=162, assigning class GENERAL_REGS to r575
  243: {r575:DI=r575:DI<<0x9;clobber flags:CC;}
      REG_DEAD r161:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  853: r575:DI=r161:DI
    Inserting insn reload after:
  854: r162:DI=r575:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 245
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 247:  (0) r  (1) i {*movdi_internal}
      Creating newreg=576, assigning class GENERAL_REGS to r576
  247: r576:DI=0x6970736f48206f4e
    Inserting insn reload after:
  855: [r164:DI]=r576:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 855:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 248:  (0) r  (1) i {*movdi_internal}
      Creating newreg=577, assigning class GENERAL_REGS to r577
  248: r577:DI=0x656d614e206c6174
    Inserting insn reload after:
  856: [r164:DI+0x8]=r577:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 856:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 249:  (0) r  (1) i {*movdi_internal}
      Creating newreg=578, assigning class GENERAL_REGS to r578
  249: r578:DI=0x62616c6961764120
    Inserting insn reload after:
  857: [r164:DI+0x10]=r578:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 857:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 251:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 258:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=579 from oldreg=167, assigning class GENERAL_REGS to r579
  258: {r579:DI=r579:DI<<0x9;clobber flags:CC;}
      REG_DEAD r166:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  858: r579:DI=r166:DI
    Inserting insn reload after:
  859: r167:DI=r579:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 263:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 264:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 275:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=580 from oldreg=170, assigning class GENERAL_REGS to r580
  275: {r580:DI=r580:DI<<0x9;clobber flags:CC;}
      REG_DEAD r169:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  860: r580:DI=r169:DI
    Inserting insn reload after:
  861: r170:DI=r580:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 278:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 279:  (0) r  (1) i {*movdi_internal}
      Creating newreg=581, assigning class GENERAL_REGS to r581
  279: r581:DI=0x6569746150206f4e
    Inserting insn reload after:
  862: [r172:DI]=r581:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 862:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 280:  (0) r  (1) i {*movdi_internal}
      Creating newreg=582, assigning class GENERAL_REGS to r582
  280: r582:DI=0x20656d614e20746e
    Inserting insn reload after:
  863: [r172:DI+0x8]=r582:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 863:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 281:  (0) r  (1) i {*movdi_internal}
      Creating newreg=583, assigning class GENERAL_REGS to r583
  281: r583:DI=0x6c62616c69617641
    Inserting insn reload after:
  864: [r172:DI+0x10]=r583:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 864:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 282:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 289:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=584 from oldreg=175, assigning class GENERAL_REGS to r584
  289: {r584:DI=r584:DI<<0x9;clobber flags:CC;}
      REG_DEAD r174:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  865: r584:DI=r174:DI
    Inserting insn reload after:
  866: r175:DI=r584:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 294:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 295:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=585 from oldreg=178, assigning class GENERAL_REGS to r585
  306: {r585:DI=r585:DI<<0x9;clobber flags:CC;}
      REG_DEAD r177:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  867: r585:DI=r177:DI
    Inserting insn reload after:
  868: r178:DI=r585:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 308
	 Choosing alt 0 in insn 308:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 310:  (0) r  (1) i {*movdi_internal}
      Creating newreg=586, assigning class GENERAL_REGS to r586
  310: r586:DI=0x65736c7550206f4e
    Inserting insn reload after:
  869: [r180:DI]=r586:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 869:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 311:  (0) r  (1) i {*movdi_internal}
      Creating newreg=587, assigning class GENERAL_REGS to r587
  311: r587:DI=0x636e657571655320
    Inserting insn reload after:
  870: [r180:DI+0x8]=r587:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 870:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 312:  (0) r  (1) i {*movdi_internal}
      Creating newreg=588, assigning class GENERAL_REGS to r588
  312: r588:DI=0x4120656d614e2065
    Inserting insn reload after:
  871: [r180:DI+0x10]=r588:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 871:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 313:  (0) r  (1) i {*movdi_internal}
      Creating newreg=589, assigning class GENERAL_REGS to r589
  313: r589:DI=0x656c62616c696176
    Inserting insn reload after:
  872: [r180:DI+0x18]=r589:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 872:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 314:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 326
	 Choosing alt 0 in insn 326:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 327:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 329:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 341:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 343:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 353
	 Choosing alt 0 in insn 353:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 356:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 366
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 367:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 378:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 379
	 Choosing alt 0 in insn 379:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 380:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 382:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 392
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 393:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 395:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 404:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 405
	 Choosing alt 0 in insn 405:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 408:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 417:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 419:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 420:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 432
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 445
	 Choosing alt 0 in insn 445:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 446:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 448:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 458
	 Choosing alt 0 in insn 458:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 459:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 461:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 470:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 471
	 Choosing alt 0 in insn 471:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 472:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 474:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 486:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 498
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 510:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 511
	 Choosing alt 0 in insn 511:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 512:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 514:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 523:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 524
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 525:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 527:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 536:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 537
	 Choosing alt 0 in insn 537:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 538:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 540:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 549:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 550
	 Choosing alt 0 in insn 550:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 551:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 554:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=590 from oldreg=236, assigning class GENERAL_REGS to r590
  554: {r590:DI=r590:DI<<0x6;clobber flags:CC;}
      REG_DEAD r235:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  873: r590:DI=r235:DI
    Inserting insn reload after:
  874: r236:DI=r590:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 555:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 556
	 Choosing alt 0 in insn 556:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 557:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 560:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=591 from oldreg=239, assigning class GENERAL_REGS to r591
  560: {r591:DI=r591:DI<<0x6;clobber flags:CC;}
      REG_DEAD r238:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  875: r591:DI=r238:DI
    Inserting insn reload after:
  876: r239:DI=r591:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 562
	 Choosing alt 0 in insn 562:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 563:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 566:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=592 from oldreg=242, assigning class GENERAL_REGS to r592
  566: {r592:DI=r592:DI<<0x6;clobber flags:CC;}
      REG_DEAD r241:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  877: r592:DI=r241:DI
    Inserting insn reload after:
  878: r242:DI=r592:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 567:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 568
	 Choosing alt 0 in insn 568:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 569:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 572:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=593 from oldreg=245, assigning class GENERAL_REGS to r593
  572: {r593:DI=r593:DI<<0x6;clobber flags:CC;}
      REG_DEAD r244:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  879: r593:DI=r244:DI
    Inserting insn reload after:
  880: r245:DI=r593:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 573:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 574
	 Choosing alt 0 in insn 574:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 575:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 578:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=594 from oldreg=248, assigning class GENERAL_REGS to r594
  578: {r594:DI=r594:DI<<0x6;clobber flags:CC;}
      REG_DEAD r247:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  881: r594:DI=r247:DI
    Inserting insn reload after:
  882: r248:DI=r594:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 580
	 Choosing alt 0 in insn 580:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 581:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 584:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=595 from oldreg=251, assigning class GENERAL_REGS to r595
  584: {r595:DI=r595:DI<<0x6;clobber flags:CC;}
      REG_DEAD r250:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  883: r595:DI=r250:DI
    Inserting insn reload after:
  884: r251:DI=r595:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 585:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 586
	 Choosing alt 0 in insn 586:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 587:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 590:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=596 from oldreg=254, assigning class GENERAL_REGS to r596
  590: {r596:DI=r596:DI<<0x6;clobber flags:CC;}
      REG_DEAD r253:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  885: r596:DI=r253:DI
    Inserting insn reload after:
  886: r254:DI=r596:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 591:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 592
	 Choosing alt 0 in insn 592:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 593:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 596:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=597 from oldreg=257, assigning class GENERAL_REGS to r597
  596: {r597:DI=r597:DI<<0x6;clobber flags:CC;}
      REG_DEAD r256:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  887: r597:DI=r256:DI
    Inserting insn reload after:
  888: r257:DI=r597:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 597:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 598
	 Choosing alt 0 in insn 598:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 599:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 602:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=598 from oldreg=260, assigning class GENERAL_REGS to r598
  602: {r598:DI=r598:DI<<0x6;clobber flags:CC;}
      REG_DEAD r259:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  889: r598:DI=r259:DI
    Inserting insn reload after:
  890: r260:DI=r598:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 603:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 604
	 Choosing alt 0 in insn 604:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 605:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 606:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 608:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=599 from oldreg=263, assigning class GENERAL_REGS to r599
  608: {r599:DI=r599:DI<<0x5;clobber flags:CC;}
      REG_DEAD r262:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  891: r599:DI=r262:DI
    Inserting insn reload after:
  892: r263:DI=r599:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 609:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 610
	 Choosing alt 0 in insn 610:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 611:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 614:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=600 from oldreg=266, assigning class GENERAL_REGS to r600
  614: {r600:DI=r600:DI<<0x5;clobber flags:CC;}
      REG_DEAD r265:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  893: r600:DI=r265:DI
    Inserting insn reload after:
  894: r266:DI=r600:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 615:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 616
	 Choosing alt 0 in insn 616:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 617:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 620:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=601 from oldreg=269, assigning class GENERAL_REGS to r601
  620: {r601:DI=r601:DI<<0x5;clobber flags:CC;}
      REG_DEAD r268:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  895: r601:DI=r268:DI
    Inserting insn reload after:
  896: r269:DI=r601:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 621:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 622
	 Choosing alt 0 in insn 622:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 623:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 625:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 626:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=602 from oldreg=272, assigning class GENERAL_REGS to r602
  626: {r602:DI=r602:DI<<0x5;clobber flags:CC;}
      REG_DEAD r271:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  897: r602:DI=r271:DI
    Inserting insn reload after:
  898: r272:DI=r602:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 627:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 628
	 Choosing alt 0 in insn 628:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 629:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 630:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 632:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=603 from oldreg=275, assigning class GENERAL_REGS to r603
  632: {r603:DI=r603:DI<<0x5;clobber flags:CC;}
      REG_DEAD r274:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  899: r603:DI=r274:DI
    Inserting insn reload after:
  900: r275:DI=r603:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 633:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 634
	 Choosing alt 0 in insn 634:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 635:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 638:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=604 from oldreg=278, assigning class GENERAL_REGS to r604
  638: {r604:DI=r604:DI<<0x5;clobber flags:CC;}
      REG_DEAD r277:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  901: r604:DI=r277:DI
    Inserting insn reload after:
  902: r278:DI=r604:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 639:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 641:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 642:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 645:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=605 from oldreg=281, assigning class GENERAL_REGS to r605
  645: {r605:DI=r605:DI<<0x5;clobber flags:CC;}
      REG_DEAD r280:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  903: r605:DI=r280:DI
    Inserting insn reload after:
  904: r281:DI=r605:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 646:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 648:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 649:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 650:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 652:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=606 from oldreg=284, assigning class GENERAL_REGS to r606
  652: {r606:DI=r606:DI<<0x5;clobber flags:CC;}
      REG_DEAD r283:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  905: r606:DI=r283:DI
    Inserting insn reload after:
  906: r284:DI=r606:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 653:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 655:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 656:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 657:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 659:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=607 from oldreg=287, assigning class GENERAL_REGS to r607
  659: {r607:DI=r607:DI<<0x5;clobber flags:CC;}
      REG_DEAD r286:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  907: r607:DI=r286:DI
    Inserting insn reload after:
  908: r287:DI=r607:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 660:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 661:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 663:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 665:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 667:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 672:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 673
	 Choosing alt 0 in insn 673:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 674:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 675:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 676:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 683:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 684
	 Choosing alt 0 in insn 684:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 685:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 687:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 689:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 690:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 694:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 695
	 Choosing alt 0 in insn 695:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 696:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 698:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 705:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 706
	 Choosing alt 0 in insn 706:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 707:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 708:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 713:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 715:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 716:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 720:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 724:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 725:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 728:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 729:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 731:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 734:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 738:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 741:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 742:  (0) r  (1) i {*movdi_internal}
      Creating newreg=608, assigning class GENERAL_REGS to r608
  742: r608:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  909: [r305:DI]=r608:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 909:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 743:  (0) r  (1) i {*movdi_internal}
      Creating newreg=609, assigning class GENERAL_REGS to r609
  743: r609:DI=0x6961764120656d61
    Inserting insn reload after:
  910: [r305:DI+0x8]=r609:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 910:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 744:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 745:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 746:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 747:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 748:  (0) r  (1) i {*movdi_internal}
      Creating newreg=610, assigning class GENERAL_REGS to r610
  748: r610:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  911: [r306:DI]=r610:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 911:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 749:  (0) r  (1) i {*movdi_internal}
      Creating newreg=611, assigning class GENERAL_REGS to r611
  749: r611:DI=0x6961764120656d61
    Inserting insn reload after:
  912: [r306:DI+0x8]=r611:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 912:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 750:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 751:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 752:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 753:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 754:  (0) r  (1) i {*movdi_internal}
      Creating newreg=612, assigning class GENERAL_REGS to r612
  754: r612:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  913: [r307:DI]=r612:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 913:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 755:  (0) r  (1) i {*movdi_internal}
      Creating newreg=613, assigning class GENERAL_REGS to r613
  755: r613:DI=0x6961764120656d61
    Inserting insn reload after:
  914: [r307:DI+0x8]=r613:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 914:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 756:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 757:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 758:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 759:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 760:  (0) r  (1) i {*movdi_internal}
      Creating newreg=614, assigning class GENERAL_REGS to r614
  760: r614:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  915: [r308:DI]=r614:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 915:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 761:  (0) r  (1) i {*movdi_internal}
      Creating newreg=615, assigning class GENERAL_REGS to r615
  761: r615:DI=0x6961764120656d61
    Inserting insn reload after:
  916: [r308:DI+0x8]=r615:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 916:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 762:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 763:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 764:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 765:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 766:  (0) r  (1) i {*movdi_internal}
      Creating newreg=616, assigning class GENERAL_REGS to r616
  766: r616:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  917: [r309:DI]=r616:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 917:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 767:  (0) r  (1) i {*movdi_internal}
      Creating newreg=617, assigning class GENERAL_REGS to r617
  767: r617:DI=0x6961764120656d61
    Inserting insn reload after:
  918: [r309:DI+0x8]=r617:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 918:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 768:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 769:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 770:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 771:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 772:  (0) r  (1) i {*movdi_internal}
      Creating newreg=618, assigning class GENERAL_REGS to r618
  772: r618:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  919: [r310:DI]=r618:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 919:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 773:  (0) r  (1) i {*movdi_internal}
      Creating newreg=619, assigning class GENERAL_REGS to r619
  773: r619:DI=0x6961764120656d61
    Inserting insn reload after:
  920: [r310:DI+0x8]=r619:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 920:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 774:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 775:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 776:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 777:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 778:  (0) r  (1) i {*movdi_internal}
      Creating newreg=620, assigning class GENERAL_REGS to r620
  778: r620:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  921: [r311:DI]=r620:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 921:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 779:  (0) r  (1) i {*movdi_internal}
      Creating newreg=621, assigning class GENERAL_REGS to r621
  779: r621:DI=0x6961764120656d61
    Inserting insn reload after:
  922: [r311:DI+0x8]=r621:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 922:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 780:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 781:  (0) m  (1) rn {*movhi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26

********** Pseudo live ranges #1: **********

  BB 26
   Insn 781: point = 0
   Insn 780: point = 1
   Insn 922: point = 1
   Insn 779: point = 2
   Insn 921: point = 3
   Insn 778: point = 4
   Insn 777: point = 5
   Insn 776: point = 7
   Insn 775: point = 8
   Insn 774: point = 9
   Insn 920: point = 9
   Insn 773: point = 10
   Insn 919: point = 11
   Insn 772: point = 12
   Insn 771: point = 13
   Insn 770: point = 15
   Insn 769: point = 16
   Insn 768: point = 17
   Insn 918: point = 17
   Insn 767: point = 18
   Insn 917: point = 19
   Insn 766: point = 20
   Insn 765: point = 21
   Insn 764: point = 23
   Insn 763: point = 24
   Insn 762: point = 25
   Insn 916: point = 25
   Insn 761: point = 26
   Insn 915: point = 27
   Insn 760: point = 28
   Insn 759: point = 29
   Insn 758: point = 31
   Insn 757: point = 32
   Insn 756: point = 33
   Insn 914: point = 33
   Insn 755: point = 34
   Insn 913: point = 35
   Insn 754: point = 36
   Insn 753: point = 37
   Insn 752: point = 39
   Insn 751: point = 40
   Insn 750: point = 41
   Insn 912: point = 41
   Insn 749: point = 42
   Insn 911: point = 43
   Insn 748: point = 44
   Insn 747: point = 45
   Insn 746: point = 47
   Insn 745: point = 48
   Insn 744: point = 49
   Insn 910: point = 49
   Insn 743: point = 50
   Insn 909: point = 51
   Insn 742: point = 52
   Insn 741: point = 53
  BB 25
   Insn 739: point = 54
   Insn 738: point = 54
  BB 2
   Insn 784: point = 54
   Insn 11: point = 54
   Insn 7: point = 54
   Insn 6: point = 54
   Insn 5: point = 54
   Insn 4: point = 54
   Insn 3: point = 54
   Insn 2: point = 54
  BB 24
   Insn 734: point = 54
  BB 23
   Insn 732: point = 54
   Insn 731: point = 54
   Insn 729: point = 55
   Insn 728: point = 57
  BB 21
   Insn 798: point = 58
   Insn 708: point = 58
   Insn 707: point = 58
   Insn 706: point = 59
   Insn 705: point = 61
   Insn 704: point = 62
   Insn 703: point = 64
   Insn 702: point = 66
   Insn 701: point = 68
   Insn 700: point = 69
   Insn 699: point = 69
   Insn 698: point = 70
   Insn 697: point = 72
   Insn 696: point = 73
   Insn 695: point = 74
   Insn 694: point = 76
   Insn 693: point = 77
   Insn 692: point = 79
   Insn 691: point = 81
   Insn 690: point = 83
   Insn 689: point = 84
   Insn 688: point = 84
   Insn 687: point = 85
   Insn 686: point = 87
   Insn 685: point = 88
   Insn 684: point = 89
   Insn 683: point = 91
   Insn 682: point = 92
   Insn 681: point = 94
   Insn 680: point = 96
   Insn 679: point = 98
   Insn 678: point = 99
   Insn 677: point = 99
   Insn 676: point = 100
   Insn 675: point = 102
   Insn 674: point = 103
   Insn 673: point = 104
   Insn 672: point = 106
   Insn 671: point = 107
   Insn 670: point = 109
   Insn 669: point = 111
   Insn 668: point = 113
   Insn 667: point = 114
   Insn 666: point = 114
   Insn 665: point = 115
   Insn 664: point = 117
   Insn 663: point = 118
   Insn 662: point = 119
   Insn 661: point = 120
   Insn 660: point = 122
   Insn 908: point = 123
	Hard reg 1 is preferable by r607 with profit 1
   Insn 659: point = 125
   Insn 907: point = 125
	Hard reg 1 is preferable by r607 with profit 1
	Hard reg 0 is preferable by r607 with profit 1
   Insn 658: point = 127
   Insn 657: point = 129
   Insn 656: point = 130
   Insn 655: point = 131
   Insn 654: point = 132
   Insn 653: point = 134
   Insn 906: point = 135
	Hard reg 1 is preferable by r606 with profit 1
   Insn 652: point = 137
   Insn 905: point = 137
	Hard reg 1 is preferable by r606 with profit 1
	Hard reg 0 is preferable by r606 with profit 1
   Insn 651: point = 139
   Insn 650: point = 141
   Insn 649: point = 142
   Insn 648: point = 143
   Insn 647: point = 144
   Insn 646: point = 146
   Insn 904: point = 147
	Hard reg 1 is preferable by r605 with profit 1
   Insn 645: point = 149
   Insn 903: point = 149
	Hard reg 1 is preferable by r605 with profit 1
	Hard reg 0 is preferable by r605 with profit 1
   Insn 644: point = 151
   Insn 643: point = 153
   Insn 642: point = 154
   Insn 641: point = 155
   Insn 640: point = 156
   Insn 639: point = 158
   Insn 902: point = 159
	Hard reg 1 is preferable by r604 with profit 1
   Insn 638: point = 161
   Insn 901: point = 161
	Hard reg 1 is preferable by r604 with profit 1
	Hard reg 0 is preferable by r604 with profit 1
   Insn 637: point = 163
   Insn 636: point = 165
   Insn 635: point = 166
   Insn 634: point = 167
   Insn 633: point = 169
   Insn 900: point = 170
	Hard reg 1 is preferable by r603 with profit 1
   Insn 632: point = 172
   Insn 899: point = 172
	Hard reg 1 is preferable by r603 with profit 1
	Hard reg 0 is preferable by r603 with profit 1
   Insn 631: point = 174
   Insn 630: point = 176
   Insn 629: point = 177
   Insn 628: point = 178
   Insn 627: point = 180
   Insn 898: point = 181
	Hard reg 1 is preferable by r602 with profit 1
   Insn 626: point = 183
   Insn 897: point = 183
	Hard reg 1 is preferable by r602 with profit 1
	Hard reg 0 is preferable by r602 with profit 1
   Insn 625: point = 185
   Insn 624: point = 187
   Insn 623: point = 188
   Insn 622: point = 189
   Insn 621: point = 191
   Insn 896: point = 192
	Hard reg 1 is preferable by r601 with profit 1
   Insn 620: point = 194
   Insn 895: point = 194
	Hard reg 1 is preferable by r601 with profit 1
	Hard reg 0 is preferable by r601 with profit 1
   Insn 619: point = 196
   Insn 618: point = 198
   Insn 617: point = 199
   Insn 616: point = 200
   Insn 615: point = 202
   Insn 894: point = 203
	Hard reg 1 is preferable by r600 with profit 1
   Insn 614: point = 205
   Insn 893: point = 205
	Hard reg 1 is preferable by r600 with profit 1
	Hard reg 0 is preferable by r600 with profit 1
   Insn 613: point = 207
   Insn 612: point = 209
   Insn 611: point = 210
   Insn 610: point = 211
   Insn 609: point = 213
   Insn 892: point = 214
	Hard reg 1 is preferable by r599 with profit 1
   Insn 608: point = 216
   Insn 891: point = 216
	Hard reg 1 is preferable by r599 with profit 1
	Hard reg 0 is preferable by r599 with profit 1
   Insn 607: point = 218
   Insn 606: point = 220
   Insn 605: point = 221
   Insn 604: point = 222
   Insn 603: point = 224
   Insn 890: point = 225
	Hard reg 1 is preferable by r598 with profit 1
   Insn 602: point = 227
   Insn 889: point = 227
	Hard reg 1 is preferable by r598 with profit 1
	Hard reg 0 is preferable by r598 with profit 1
   Insn 601: point = 229
   Insn 600: point = 231
   Insn 599: point = 232
   Insn 598: point = 233
   Insn 597: point = 235
   Insn 888: point = 236
	Hard reg 1 is preferable by r597 with profit 1
   Insn 596: point = 238
   Insn 887: point = 238
	Hard reg 1 is preferable by r597 with profit 1
	Hard reg 0 is preferable by r597 with profit 1
   Insn 595: point = 240
   Insn 594: point = 242
   Insn 593: point = 243
   Insn 592: point = 244
   Insn 591: point = 246
   Insn 886: point = 247
	Hard reg 1 is preferable by r596 with profit 1
   Insn 590: point = 249
   Insn 885: point = 249
	Hard reg 1 is preferable by r596 with profit 1
	Hard reg 0 is preferable by r596 with profit 1
   Insn 589: point = 251
   Insn 588: point = 253
   Insn 587: point = 254
   Insn 586: point = 255
   Insn 585: point = 257
   Insn 884: point = 258
	Hard reg 1 is preferable by r595 with profit 1
   Insn 584: point = 260
   Insn 883: point = 260
	Hard reg 1 is preferable by r595 with profit 1
	Hard reg 0 is preferable by r595 with profit 1
   Insn 583: point = 262
   Insn 582: point = 264
   Insn 581: point = 265
   Insn 580: point = 266
   Insn 579: point = 268
   Insn 882: point = 269
	Hard reg 1 is preferable by r594 with profit 1
   Insn 578: point = 271
   Insn 881: point = 271
	Hard reg 1 is preferable by r594 with profit 1
	Hard reg 0 is preferable by r594 with profit 1
   Insn 577: point = 273
   Insn 576: point = 275
   Insn 575: point = 276
   Insn 574: point = 277
   Insn 573: point = 279
   Insn 880: point = 280
	Hard reg 1 is preferable by r593 with profit 1
   Insn 572: point = 282
   Insn 879: point = 282
	Hard reg 1 is preferable by r593 with profit 1
	Hard reg 0 is preferable by r593 with profit 1
   Insn 571: point = 284
   Insn 570: point = 286
   Insn 569: point = 287
   Insn 568: point = 288
   Insn 567: point = 290
   Insn 878: point = 291
	Hard reg 1 is preferable by r592 with profit 1
   Insn 566: point = 293
   Insn 877: point = 293
	Hard reg 1 is preferable by r592 with profit 1
	Hard reg 0 is preferable by r592 with profit 1
   Insn 565: point = 295
   Insn 564: point = 297
   Insn 563: point = 298
   Insn 562: point = 299
   Insn 561: point = 301
   Insn 876: point = 302
	Hard reg 1 is preferable by r591 with profit 1
   Insn 560: point = 304
   Insn 875: point = 304
	Hard reg 1 is preferable by r591 with profit 1
	Hard reg 0 is preferable by r591 with profit 1
   Insn 559: point = 306
   Insn 558: point = 308
   Insn 557: point = 309
   Insn 556: point = 310
   Insn 555: point = 312
   Insn 874: point = 313
	Hard reg 1 is preferable by r590 with profit 1
   Insn 554: point = 315
   Insn 873: point = 315
	Hard reg 1 is preferable by r590 with profit 1
	Hard reg 0 is preferable by r590 with profit 1
   Insn 553: point = 317
   Insn 552: point = 319
   Insn 551: point = 320
   Insn 550: point = 321
   Insn 549: point = 323
   Insn 548: point = 324
   Insn 547: point = 326
   Insn 546: point = 328
   Insn 545: point = 330
   Insn 544: point = 331
   Insn 543: point = 331
   Insn 542: point = 331
   Insn 541: point = 331
   Insn 540: point = 332
   Insn 539: point = 334
   Insn 538: point = 335
   Insn 537: point = 336
   Insn 536: point = 338
   Insn 535: point = 339
   Insn 534: point = 341
   Insn 533: point = 343
   Insn 532: point = 345
   Insn 531: point = 346
   Insn 530: point = 346
   Insn 529: point = 346
   Insn 528: point = 346
   Insn 527: point = 347
   Insn 526: point = 349
   Insn 525: point = 350
   Insn 524: point = 351
   Insn 523: point = 353
   Insn 522: point = 354
   Insn 521: point = 356
   Insn 520: point = 358
   Insn 519: point = 360
   Insn 518: point = 361
   Insn 517: point = 361
   Insn 516: point = 361
   Insn 515: point = 361
   Insn 514: point = 362
   Insn 513: point = 364
   Insn 512: point = 365
   Insn 511: point = 366
   Insn 510: point = 368
   Insn 509: point = 369
   Insn 508: point = 371
   Insn 507: point = 373
   Insn 506: point = 375
   Insn 505: point = 376
   Insn 504: point = 376
   Insn 503: point = 376
   Insn 502: point = 376
   Insn 501: point = 377
   Insn 500: point = 379
   Insn 499: point = 380
   Insn 498: point = 381
   Insn 497: point = 383
   Insn 496: point = 384
   Insn 495: point = 386
   Insn 494: point = 388
   Insn 493: point = 390
   Insn 492: point = 391
   Insn 491: point = 391
   Insn 490: point = 391
   Insn 489: point = 391
   Insn 488: point = 392
   Insn 487: point = 394
   Insn 486: point = 395
   Insn 485: point = 396
   Insn 484: point = 397
   Insn 483: point = 399
   Insn 482: point = 400
   Insn 481: point = 402
   Insn 480: point = 404
   Insn 479: point = 406
   Insn 478: point = 407
   Insn 477: point = 407
   Insn 476: point = 407
   Insn 475: point = 407
   Insn 474: point = 408
   Insn 473: point = 410
   Insn 472: point = 411
   Insn 471: point = 412
   Insn 470: point = 414
   Insn 469: point = 415
   Insn 468: point = 417
   Insn 467: point = 419
   Insn 466: point = 421
   Insn 465: point = 422
   Insn 464: point = 422
   Insn 463: point = 422
   Insn 462: point = 422
   Insn 461: point = 423
   Insn 460: point = 425
   Insn 459: point = 426
   Insn 458: point = 427
   Insn 457: point = 429
   Insn 456: point = 430
   Insn 455: point = 432
   Insn 454: point = 434
   Insn 453: point = 436
   Insn 452: point = 437
   Insn 451: point = 437
   Insn 450: point = 437
   Insn 449: point = 437
   Insn 448: point = 438
   Insn 447: point = 440
   Insn 446: point = 441
   Insn 445: point = 442
   Insn 444: point = 444
   Insn 443: point = 445
   Insn 442: point = 447
   Insn 441: point = 449
   Insn 440: point = 451
   Insn 439: point = 452
   Insn 438: point = 452
   Insn 437: point = 452
   Insn 436: point = 452
   Insn 435: point = 453
   Insn 434: point = 455
   Insn 433: point = 456
   Insn 432: point = 457
   Insn 431: point = 459
   Insn 430: point = 460
   Insn 429: point = 462
   Insn 428: point = 464
   Insn 427: point = 466
   Insn 426: point = 467
   Insn 425: point = 467
   Insn 424: point = 467
   Insn 423: point = 467
   Insn 422: point = 468
   Insn 421: point = 470
   Insn 420: point = 471
   Insn 419: point = 472
   Insn 418: point = 473
   Insn 417: point = 475
   Insn 416: point = 476
   Insn 415: point = 478
   Insn 414: point = 480
   Insn 413: point = 482
   Insn 412: point = 483
   Insn 411: point = 483
   Insn 410: point = 483
   Insn 409: point = 483
   Insn 408: point = 484
   Insn 407: point = 486
   Insn 406: point = 487
   Insn 405: point = 488
   Insn 404: point = 490
   Insn 403: point = 491
   Insn 402: point = 493
   Insn 401: point = 495
   Insn 400: point = 497
   Insn 399: point = 498
   Insn 398: point = 498
   Insn 397: point = 498
   Insn 396: point = 498
   Insn 395: point = 499
   Insn 394: point = 501
   Insn 393: point = 502
   Insn 392: point = 503
   Insn 391: point = 505
   Insn 390: point = 506
   Insn 389: point = 508
   Insn 388: point = 510
   Insn 387: point = 512
   Insn 386: point = 513
   Insn 385: point = 513
   Insn 384: point = 513
   Insn 383: point = 513
   Insn 382: point = 514
   Insn 381: point = 516
   Insn 380: point = 517
   Insn 379: point = 518
   Insn 378: point = 520
   Insn 377: point = 521
   Insn 376: point = 523
   Insn 375: point = 525
   Insn 374: point = 527
   Insn 373: point = 528
   Insn 372: point = 528
   Insn 371: point = 528
   Insn 370: point = 528
   Insn 369: point = 529
   Insn 368: point = 531
   Insn 367: point = 532
   Insn 366: point = 533
   Insn 365: point = 535
   Insn 364: point = 536
   Insn 363: point = 538
   Insn 362: point = 540
   Insn 361: point = 542
   Insn 360: point = 543
   Insn 359: point = 543
   Insn 358: point = 543
   Insn 357: point = 543
   Insn 356: point = 544
   Insn 355: point = 546
   Insn 354: point = 547
   Insn 353: point = 548
   Insn 352: point = 550
   Insn 351: point = 551
   Insn 350: point = 553
   Insn 349: point = 555
   Insn 348: point = 557
   Insn 347: point = 558
   Insn 346: point = 558
   Insn 345: point = 558
   Insn 344: point = 558
   Insn 343: point = 559
   Insn 342: point = 561
   Insn 341: point = 562
   Insn 340: point = 563
   Insn 339: point = 564
   Insn 338: point = 566
   Insn 337: point = 567
   Insn 336: point = 569
   Insn 335: point = 571
   Insn 334: point = 573
   Insn 333: point = 574
   Insn 332: point = 574
   Insn 331: point = 574
   Insn 330: point = 574
   Insn 329: point = 575
   Insn 328: point = 577
   Insn 327: point = 578
   Insn 326: point = 579
   Insn 325: point = 581
   Insn 324: point = 582
   Insn 323: point = 584
   Insn 322: point = 586
   Insn 321: point = 588
   Insn 320: point = 589
   Insn 319: point = 589
   Insn 318: point = 589
   Insn 317: point = 589
   Insn 316: point = 590
   Insn 315: point = 592
   Insn 314: point = 593
   Insn 872: point = 594
   Insn 313: point = 595
   Insn 871: point = 596
   Insn 312: point = 597
   Insn 870: point = 598
   Insn 311: point = 599
   Insn 869: point = 600
   Insn 310: point = 601
   Insn 309: point = 602
   Insn 308: point = 604
   Insn 307: point = 606
   Insn 868: point = 607
	Hard reg 1 is preferable by r585 with profit 1
   Insn 306: point = 609
   Insn 867: point = 609
	Hard reg 1 is preferable by r585 with profit 1
	Hard reg 0 is preferable by r585 with profit 1
   Insn 305: point = 611
   Insn 304: point = 613
  BB 20
   Insn 302: point = 614
   Insn 301: point = 614
   Insn 299: point = 615
   Insn 298: point = 617
  BB 18
   Insn 796: point = 618
   Insn 283: point = 618
   Insn 282: point = 618
   Insn 864: point = 619
   Insn 281: point = 620
   Insn 863: point = 621
   Insn 280: point = 622
   Insn 862: point = 623
   Insn 279: point = 624
   Insn 278: point = 625
   Insn 277: point = 627
   Insn 276: point = 629
   Insn 861: point = 630
	Hard reg 1 is preferable by r580 with profit 1
   Insn 275: point = 632
   Insn 860: point = 632
	Hard reg 1 is preferable by r580 with profit 1
	Hard reg 0 is preferable by r580 with profit 1
   Insn 274: point = 634
   Insn 273: point = 636
  BB 17
   Insn 271: point = 637
   Insn 270: point = 637
   Insn 268: point = 638
   Insn 267: point = 640
  BB 15
   Insn 794: point = 641
   Insn 252: point = 641
   Insn 251: point = 641
   Insn 250: point = 642
   Insn 857: point = 642
   Insn 249: point = 643
   Insn 856: point = 644
   Insn 248: point = 645
   Insn 855: point = 646
   Insn 247: point = 647
   Insn 246: point = 648
   Insn 245: point = 650
   Insn 244: point = 652
   Insn 854: point = 653
	Hard reg 1 is preferable by r575 with profit 1
   Insn 243: point = 655
   Insn 853: point = 655
	Hard reg 1 is preferable by r575 with profit 1
	Hard reg 0 is preferable by r575 with profit 1
   Insn 242: point = 657
   Insn 241: point = 659
  BB 14
   Insn 239: point = 660
   Insn 238: point = 660
   Insn 236: point = 661
   Insn 235: point = 663
  BB 12
   Insn 792: point = 664
   Insn 220: point = 664
   Insn 219: point = 664
   Insn 218: point = 665
   Insn 850: point = 665
   Insn 217: point = 666
   Insn 849: point = 667
   Insn 216: point = 668
   Insn 215: point = 669
   Insn 214: point = 671
   Insn 213: point = 673
   Insn 848: point = 674
	Hard reg 1 is preferable by r571 with profit 1
   Insn 212: point = 676
   Insn 847: point = 676
	Hard reg 1 is preferable by r571 with profit 1
	Hard reg 0 is preferable by r571 with profit 1
   Insn 211: point = 678
   Insn 210: point = 680
  BB 11
   Insn 208: point = 681
   Insn 207: point = 681
   Insn 205: point = 682
   Insn 204: point = 684
  BB 9
   Insn 790: point = 685
   Insn 189: point = 685
   Insn 188: point = 685
   Insn 844: point = 686
   Insn 187: point = 687
   Insn 843: point = 688
   Insn 186: point = 689
   Insn 185: point = 690
   Insn 184: point = 692
   Insn 183: point = 694
   Insn 842: point = 695
	Hard reg 1 is preferable by r567 with profit 1
   Insn 182: point = 697
   Insn 841: point = 697
	Hard reg 1 is preferable by r567 with profit 1
	Hard reg 0 is preferable by r567 with profit 1
   Insn 181: point = 699
   Insn 180: point = 701
  BB 8
   Insn 178: point = 702
   Insn 177: point = 702
   Insn 175: point = 703
   Insn 174: point = 705
  BB 6
   Insn 788: point = 706
   Insn 159: point = 706
  BB 5
   Insn 157: point = 706
   Insn 156: point = 706
   Insn 154: point = 707
   Insn 153: point = 709
  BB 3
   Insn 786: point = 710
   Insn 138: point = 710
   Insn 137: point = 710
   Insn 136: point = 711
   Insn 135: point = 713
   Insn 836: point = 714
	Hard reg 1 is preferable by r564 with profit 1
   Insn 134: point = 716
   Insn 835: point = 716
	Hard reg 1 is preferable by r564 with profit 1
	Hard reg 0 is preferable by r564 with profit 1
   Insn 133: point = 718
   Insn 132: point = 720
   Insn 131: point = 721
   Insn 130: point = 722
   Insn 129: point = 723
   Insn 128: point = 725
   Insn 834: point = 726
	Hard reg 1 is preferable by r563 with profit 1
   Insn 127: point = 728
   Insn 833: point = 728
	Hard reg 1 is preferable by r563 with profit 1
	Hard reg 0 is preferable by r563 with profit 1
   Insn 126: point = 730
   Insn 125: point = 732
   Insn 124: point = 733
   Insn 123: point = 734
   Insn 122: point = 735
   Insn 121: point = 737
   Insn 832: point = 738
	Hard reg 1 is preferable by r562 with profit 1
   Insn 120: point = 740
   Insn 831: point = 740
	Hard reg 1 is preferable by r562 with profit 1
	Hard reg 0 is preferable by r562 with profit 1
   Insn 119: point = 742
   Insn 118: point = 744
   Insn 117: point = 745
   Insn 116: point = 746
   Insn 115: point = 747
   Insn 114: point = 749
   Insn 830: point = 750
	Hard reg 1 is preferable by r561 with profit 1
   Insn 113: point = 752
   Insn 829: point = 752
	Hard reg 1 is preferable by r561 with profit 1
	Hard reg 0 is preferable by r561 with profit 1
   Insn 112: point = 754
   Insn 111: point = 756
   Insn 110: point = 757
   Insn 109: point = 758
   Insn 108: point = 759
   Insn 107: point = 761
   Insn 828: point = 762
	Hard reg 1 is preferable by r560 with profit 1
   Insn 106: point = 764
   Insn 827: point = 764
	Hard reg 1 is preferable by r560 with profit 1
	Hard reg 0 is preferable by r560 with profit 1
   Insn 105: point = 766
   Insn 104: point = 768
   Insn 103: point = 769
   Insn 102: point = 770
   Insn 101: point = 771
   Insn 100: point = 773
   Insn 826: point = 774
	Hard reg 1 is preferable by r559 with profit 1
   Insn 99: point = 776
   Insn 825: point = 776
	Hard reg 1 is preferable by r559 with profit 1
	Hard reg 0 is preferable by r559 with profit 1
   Insn 98: point = 778
   Insn 97: point = 780
   Insn 96: point = 781
   Insn 95: point = 782
   Insn 94: point = 783
   Insn 93: point = 785
   Insn 824: point = 786
	Hard reg 1 is preferable by r558 with profit 1
   Insn 92: point = 788
   Insn 823: point = 788
	Hard reg 1 is preferable by r558 with profit 1
	Hard reg 0 is preferable by r558 with profit 1
   Insn 91: point = 790
   Insn 90: point = 792
   Insn 89: point = 793
   Insn 88: point = 794
   Insn 87: point = 795
   Insn 86: point = 797
   Insn 822: point = 798
	Hard reg 1 is preferable by r557 with profit 1
   Insn 85: point = 800
   Insn 821: point = 800
	Hard reg 1 is preferable by r557 with profit 1
	Hard reg 0 is preferable by r557 with profit 1
   Insn 84: point = 802
   Insn 83: point = 804
   Insn 82: point = 805
   Insn 81: point = 806
   Insn 80: point = 807
   Insn 79: point = 809
   Insn 820: point = 810
	Hard reg 1 is preferable by r556 with profit 1
   Insn 78: point = 812
   Insn 819: point = 812
	Hard reg 1 is preferable by r556 with profit 1
	Hard reg 0 is preferable by r556 with profit 1
   Insn 77: point = 814
   Insn 76: point = 816
   Insn 75: point = 817
   Insn 74: point = 818
   Insn 73: point = 819
   Insn 72: point = 821
   Insn 818: point = 822
	Hard reg 1 is preferable by r555 with profit 1
   Insn 71: point = 824
   Insn 817: point = 824
	Hard reg 1 is preferable by r555 with profit 1
	Hard reg 0 is preferable by r555 with profit 1
   Insn 70: point = 826
   Insn 69: point = 828
   Insn 68: point = 829
   Insn 67: point = 830
   Insn 66: point = 831
   Insn 65: point = 833
   Insn 816: point = 834
	Hard reg 1 is preferable by r554 with profit 1
   Insn 64: point = 836
   Insn 815: point = 836
	Hard reg 1 is preferable by r554 with profit 1
	Hard reg 0 is preferable by r554 with profit 1
   Insn 63: point = 838
   Insn 62: point = 840
   Insn 61: point = 841
   Insn 60: point = 842
   Insn 59: point = 843
   Insn 58: point = 845
   Insn 814: point = 846
	Hard reg 1 is preferable by r553 with profit 1
   Insn 57: point = 848
   Insn 813: point = 848
	Hard reg 1 is preferable by r553 with profit 1
	Hard reg 0 is preferable by r553 with profit 1
   Insn 56: point = 850
   Insn 55: point = 852
   Insn 54: point = 853
   Insn 53: point = 854
   Insn 52: point = 855
   Insn 51: point = 857
   Insn 812: point = 858
	Hard reg 1 is preferable by r552 with profit 1
   Insn 50: point = 860
   Insn 811: point = 860
	Hard reg 1 is preferable by r552 with profit 1
	Hard reg 0 is preferable by r552 with profit 1
   Insn 49: point = 862
   Insn 48: point = 864
   Insn 47: point = 865
   Insn 46: point = 866
   Insn 45: point = 867
   Insn 44: point = 869
   Insn 810: point = 870
	Hard reg 1 is preferable by r551 with profit 1
   Insn 43: point = 872
   Insn 809: point = 872
	Hard reg 1 is preferable by r551 with profit 1
	Hard reg 0 is preferable by r551 with profit 1
   Insn 42: point = 874
   Insn 41: point = 876
   Insn 40: point = 877
   Insn 39: point = 878
   Insn 38: point = 880
   Insn 808: point = 881
	Hard reg 1 is preferable by r550 with profit 1
   Insn 37: point = 883
   Insn 807: point = 883
	Hard reg 1 is preferable by r550 with profit 1
	Hard reg 0 is preferable by r550 with profit 1
   Insn 36: point = 885
   Insn 35: point = 887
   Insn 34: point = 888
   Insn 33: point = 889
   Insn 32: point = 891
   Insn 806: point = 892
	Hard reg 1 is preferable by r549 with profit 1
   Insn 31: point = 894
   Insn 805: point = 894
	Hard reg 1 is preferable by r549 with profit 1
	Hard reg 0 is preferable by r549 with profit 1
   Insn 30: point = 896
   Insn 29: point = 898
   Insn 28: point = 899
   Insn 27: point = 900
   Insn 26: point = 901
   Insn 25: point = 903
   Insn 804: point = 904
	Hard reg 1 is preferable by r548 with profit 1
   Insn 24: point = 906
   Insn 803: point = 906
	Hard reg 1 is preferable by r548 with profit 1
	Hard reg 0 is preferable by r548 with profit 1
   Insn 23: point = 908
   Insn 22: point = 910
   Insn 21: point = 911
   Insn 20: point = 912
   Insn 19: point = 913
   Insn 18: point = 915
   Insn 802: point = 916
	Hard reg 1 is preferable by r547 with profit 1
   Insn 17: point = 918
   Insn 801: point = 918
	Hard reg 1 is preferable by r547 with profit 1
	Hard reg 0 is preferable by r547 with profit 1
   Insn 16: point = 920
   Insn 15: point = 922
  BB 4
   Insn 150: point = 923
   Insn 149: point = 923
   Insn 148: point = 924
   Insn 147: point = 926
   Insn 146: point = 927
   Insn 145: point = 929
   Insn 838: point = 930
	Hard reg 1 is preferable by r565 with profit 1
   Insn 144: point = 932
   Insn 837: point = 932
	Hard reg 1 is preferable by r565 with profit 1
	Hard reg 0 is preferable by r565 with profit 1
   Insn 143: point = 934
   Insn 142: point = 936
  BB 7
   Insn 171: point = 937
   Insn 170: point = 937
   Insn 169: point = 938
   Insn 168: point = 940
   Insn 167: point = 941
   Insn 166: point = 943
   Insn 840: point = 944
	Hard reg 1 is preferable by r566 with profit 1
   Insn 165: point = 946
   Insn 839: point = 946
	Hard reg 1 is preferable by r566 with profit 1
	Hard reg 0 is preferable by r566 with profit 1
   Insn 164: point = 948
   Insn 163: point = 950
  BB 10
   Insn 201: point = 951
   Insn 200: point = 951
   Insn 199: point = 952
   Insn 198: point = 954
   Insn 197: point = 955
   Insn 196: point = 957
   Insn 846: point = 958
	Hard reg 1 is preferable by r570 with profit 1
   Insn 195: point = 960
   Insn 845: point = 960
	Hard reg 1 is preferable by r570 with profit 1
	Hard reg 0 is preferable by r570 with profit 1
   Insn 194: point = 962
   Insn 193: point = 964
  BB 13
   Insn 232: point = 965
   Insn 231: point = 965
   Insn 230: point = 966
   Insn 229: point = 968
   Insn 228: point = 969
   Insn 227: point = 971
   Insn 852: point = 972
	Hard reg 1 is preferable by r574 with profit 1
   Insn 226: point = 974
   Insn 851: point = 974
	Hard reg 1 is preferable by r574 with profit 1
	Hard reg 0 is preferable by r574 with profit 1
   Insn 225: point = 976
   Insn 224: point = 978
  BB 16
   Insn 264: point = 979
   Insn 263: point = 979
   Insn 262: point = 980
   Insn 261: point = 982
   Insn 260: point = 983
   Insn 259: point = 985
   Insn 859: point = 986
	Hard reg 1 is preferable by r579 with profit 1
   Insn 258: point = 988
   Insn 858: point = 988
	Hard reg 1 is preferable by r579 with profit 1
	Hard reg 0 is preferable by r579 with profit 1
   Insn 257: point = 990
   Insn 256: point = 992
  BB 19
   Insn 295: point = 993
   Insn 294: point = 993
   Insn 293: point = 994
   Insn 292: point = 996
   Insn 291: point = 997
   Insn 290: point = 999
   Insn 866: point = 1000
	Hard reg 1 is preferable by r584 with profit 1
   Insn 289: point = 1002
   Insn 865: point = 1002
	Hard reg 1 is preferable by r584 with profit 1
	Hard reg 0 is preferable by r584 with profit 1
   Insn 288: point = 1004
   Insn 287: point = 1006
  BB 22
   Insn 725: point = 1007
   Insn 724: point = 1007
   Insn 723: point = 1008
   Insn 722: point = 1010
   Insn 721: point = 1011
   Insn 720: point = 1013
   Insn 719: point = 1014
   Insn 718: point = 1016
   Insn 717: point = 1018
   Insn 716: point = 1020
   Insn 715: point = 1021
   Insn 714: point = 1021
   Insn 713: point = 1022
   Insn 712: point = 1024
 r83: [919..920]
 r84: [914..916]
 r85: [911..913]
 r86: [907..908]
 r87: [902..904]
 r88: [899..901]
 r89: [895..896]
 r90: [890..892]
 r91: [888..889]
 r92: [884..885]
 r93: [879..881]
 r94: [877..878]
 r95: [873..874]
 r96: [868..870]
 r97: [865..867]
 r98: [861..862]
 r99: [856..858]
 r100: [853..855]
 r101: [849..850]
 r102: [844..846]
 r103: [841..843]
 r104: [837..838]
 r105: [832..834]
 r106: [829..831]
 r107: [825..826]
 r108: [820..822]
 r109: [817..819]
 r110: [813..814]
 r111: [808..810]
 r112: [805..807]
 r113: [801..802]
 r114: [796..798]
 r115: [793..795]
 r116: [789..790]
 r117: [784..786]
 r118: [781..783]
 r119: [777..778]
 r120: [772..774]
 r121: [769..771]
 r122: [765..766]
 r123: [760..762]
 r124: [757..759]
 r125: [753..754]
 r126: [748..750]
 r127: [745..747]
 r128: [741..742]
 r129: [736..738]
 r130: [733..735]
 r131: [729..730]
 r132: [724..726]
 r133: [721..723]
 r134: [717..718]
 r135: [712..714]
 r136: [710..711]
 r137: [706..707]
 r138: [933..934]
 r139: [928..930]
 r140: [923..927]
 r141: [702..703]
 r142: [947..948]
 r143: [942..944]
 r144: [937..941]
 r145: [698..699]
 r146: [693..695]
 r147: [691..692]
 r148: [685..690]
 r149: [681..682]
 r150: [961..962]
 r151: [956..958]
 r152: [951..955]
 r153: [677..678]
 r154: [672..674]
 r155: [670..671]
 r156: [664..669]
 r157: [660..661]
 r158: [975..976]
 r159: [970..972]
 r160: [965..969]
 r161: [656..657]
 r162: [651..653]
 r163: [649..650]
 r164: [641..648]
 r165: [637..638]
 r166: [989..990]
 r167: [984..986]
 r168: [979..983]
 r169: [633..634]
 r170: [628..630]
 r171: [626..627]
 r172: [618..625]
 r173: [614..615]
 r174: [1003..1004]
 r175: [998..1000]
 r176: [993..997]
 r177: [610..611]
 r178: [605..607]
 r179: [603..604]
 r180: [593..602]
 r181: [588..590]
 r182: [580..582]
 r183: [578..579]
 r184: [573..575]
 r185: [565..567]
 r186: [562..564]
 r187: [557..559]
 r188: [549..551]
 r189: [547..548]
 r190: [542..544]
 r191: [534..536]
 r192: [532..533]
 r193: [527..529]
 r194: [519..521]
 r195: [517..518]
 r196: [512..514]
 r197: [504..506]
 r198: [502..503]
 r199: [497..499]
 r200: [489..491]
 r201: [487..488]
 r202: [482..484]
 r203: [474..476]
 r204: [471..473]
 r205: [466..468]
 r206: [458..460]
 r207: [456..457]
 r208: [451..453]
 r209: [443..445]
 r210: [441..442]
 r211: [436..438]
 r212: [428..430]
 r213: [426..427]
 r214: [421..423]
 r215: [413..415]
 r216: [411..412]
 r217: [406..408]
 r218: [398..400]
 r219: [395..397]
 r220: [390..392]
 r221: [382..384]
 r222: [380..381]
 r223: [375..377]
 r224: [367..369]
 r225: [365..366]
 r226: [360..362]
 r227: [352..354]
 r228: [350..351]
 r229: [345..347]
 r230: [337..339]
 r231: [335..336]
 r232: [330..332]
 r233: [322..324]
 r234: [320..321]
 r235: [316..317]
 r236: [311..313]
 r237: [309..310]
 r238: [305..306]
 r239: [300..302]
 r240: [298..299]
 r241: [294..295]
 r242: [289..291]
 r243: [287..288]
 r244: [283..284]
 r245: [278..280]
 r246: [276..277]
 r247: [272..273]
 r248: [267..269]
 r249: [265..266]
 r250: [261..262]
 r251: [256..258]
 r252: [254..255]
 r253: [250..251]
 r254: [245..247]
 r255: [243..244]
 r256: [239..240]
 r257: [234..236]
 r258: [232..233]
 r259: [228..229]
 r260: [223..225]
 r261: [221..222]
 r262: [217..218]
 r263: [212..214]
 r264: [210..211]
 r265: [206..207]
 r266: [201..203]
 r267: [199..200]
 r268: [195..196]
 r269: [190..192]
 r270: [188..189]
 r271: [184..185]
 r272: [179..181]
 r273: [177..178]
 r274: [173..174]
 r275: [168..170]
 r276: [166..167]
 r277: [162..163]
 r278: [157..159]
 r279: [154..156]
 r280: [150..151]
 r281: [145..147]
 r282: [142..144]
 r283: [138..139]
 r284: [133..135]
 r285: [130..132]
 r286: [126..127]
 r287: [121..123]
 r288: [118..120]
 r289: [113..115]
 r290: [105..107]
 r291: [103..104]
 r292: [98..100]
 r293: [90..92]
 r294: [88..89]
 r295: [83..85]
 r296: [75..77]
 r297: [73..74]
 r298: [68..70]
 r299: [60..62]
 r300: [58..59]
 r301: [54..55]
 r302: [1020..1022]
 r303: [1012..1014]
 r304: [1007..1011]
 r305: [48..53]
 r306: [40..45]
 r307: [32..37]
 r308: [24..29]
 r309: [16..21]
 r310: [8..13]
 r311: [0..5]
 r312: [921..922]
 r313: [914..915]
 r314: [911..912]
 r315: [909..910]
 r316: [902..903]
 r317: [899..900]
 r318: [897..898]
 r319: [890..891]
 r320: [886..887]
 r321: [879..880]
 r322: [875..876]
 r323: [868..869]
 r324: [865..866]
 r325: [863..864]
 r326: [856..857]
 r327: [853..854]
 r328: [851..852]
 r329: [844..845]
 r330: [841..842]
 r331: [839..840]
 r332: [832..833]
 r333: [829..830]
 r334: [827..828]
 r335: [820..821]
 r336: [817..818]
 r337: [815..816]
 r338: [808..809]
 r339: [805..806]
 r340: [803..804]
 r341: [796..797]
 r342: [793..794]
 r343: [791..792]
 r344: [784..785]
 r345: [781..782]
 r346: [779..780]
 r347: [772..773]
 r348: [769..770]
 r349: [767..768]
 r350: [760..761]
 r351: [757..758]
 r352: [755..756]
 r353: [748..749]
 r354: [745..746]
 r355: [743..744]
 r356: [736..737]
 r357: [733..734]
 r358: [731..732]
 r359: [724..725]
 r360: [721..722]
 r361: [719..720]
 r362: [712..713]
 r363: [935..936]
 r364: [928..929]
 r365: [923..924]
 r366: [925..926]
 r367: [708..709]
 r368: [949..950]
 r369: [942..943]
 r370: [937..938]
 r371: [939..940]
 r372: [704..705]
 r373: [700..701]
 r374: [693..694]
 r375: [963..964]
 r376: [956..957]
 r377: [951..952]
 r378: [953..954]
 r379: [683..684]
 r380: [679..680]
 r381: [672..673]
 r382: [977..978]
 r383: [970..971]
 r384: [965..966]
 r385: [967..968]
 r386: [662..663]
 r387: [658..659]
 r388: [651..652]
 r389: [991..992]
 r390: [984..985]
 r391: [979..980]
 r392: [981..982]
 r393: [639..640]
 r394: [635..636]
 r395: [628..629]
 r396: [1005..1006]
 r397: [998..999]
 r398: [993..994]
 r399: [995..996]
 r400: [616..617]
 r401: [612..613]
 r402: [605..606]
 r403: [591..592]
 r404: [587..589] [583..584]
 r405: [585..586]
 r406: [580..581]
 r407: [576..577]
 r408: [572..574] [568..569]
 r409: [570..571]
 r410: [565..566]
 r411: [562..563]
 r412: [560..561]
 r413: [556..558] [552..553]
 r414: [554..555]
 r415: [549..550]
 r416: [545..546]
 r417: [541..543] [537..538]
 r418: [539..540]
 r419: [534..535]
 r420: [530..531]
 r421: [526..528] [522..523]
 r422: [524..525]
 r423: [519..520]
 r424: [515..516]
 r425: [511..513] [507..508]
 r426: [509..510]
 r427: [504..505]
 r428: [500..501]
 r429: [496..498] [492..493]
 r430: [494..495]
 r431: [489..490]
 r432: [485..486]
 r433: [481..483] [477..478]
 r434: [479..480]
 r435: [474..475]
 r436: [471..472]
 r437: [469..470]
 r438: [465..467] [461..462]
 r439: [463..464]
 r440: [458..459]
 r441: [454..455]
 r442: [450..452] [446..447]
 r443: [448..449]
 r444: [443..444]
 r445: [439..440]
 r446: [435..437] [431..432]
 r447: [433..434]
 r448: [428..429]
 r449: [424..425]
 r450: [420..422] [416..417]
 r451: [418..419]
 r452: [413..414]
 r453: [409..410]
 r454: [405..407] [401..402]
 r455: [403..404]
 r456: [398..399]
 r457: [395..396]
 r458: [393..394]
 r459: [389..391] [385..386]
 r460: [387..388]
 r461: [382..383]
 r462: [378..379]
 r463: [374..376] [370..371]
 r464: [372..373]
 r465: [367..368]
 r466: [363..364]
 r467: [359..361] [355..356]
 r468: [357..358]
 r469: [352..353]
 r470: [348..349]
 r471: [344..346] [340..341]
 r472: [342..343]
 r473: [337..338]
 r474: [333..334]
 r475: [329..331] [325..326]
 r476: [327..328]
 r477: [322..323]
 r478: [318..319]
 r479: [311..312]
 r480: [307..308]
 r481: [300..301]
 r482: [296..297]
 r483: [289..290]
 r484: [285..286]
 r485: [278..279]
 r486: [274..275]
 r487: [267..268]
 r488: [263..264]
 r489: [256..257]
 r490: [252..253]
 r491: [245..246]
 r492: [241..242]
 r493: [234..235]
 r494: [230..231]
 r495: [223..224]
 r496: [219..220]
 r497: [212..213]
 r498: [208..209]
 r499: [201..202]
 r500: [197..198]
 r501: [190..191]
 r502: [186..187]
 r503: [179..180]
 r504: [175..176]
 r505: [168..169]
 r506: [164..165]
 r507: [157..158]
 r508: [154..155]
 r509: [152..153]
 r510: [145..146]
 r511: [142..143]
 r512: [140..141]
 r513: [133..134]
 r514: [130..131]
 r515: [128..129]
 r516: [121..122]
 r517: [118..119]
 r518: [116..117]
 r519: [112..114] [108..109]
 r520: [110..111]
 r521: [105..106]
 r522: [101..102]
 r523: [97..99] [93..94]
 r524: [95..96]
 r525: [90..91]
 r526: [86..87]
 r527: [82..84] [78..79]
 r528: [80..81]
 r529: [75..76]
 r530: [71..72]
 r531: [67..69] [63..64]
 r532: [65..66]
 r533: [60..61]
 r534: [1023..1024]
 r535: [1019..1021] [1015..1016]
 r536: [1017..1018]
 r537: [1012..1013]
 r538: [1007..1008]
 r539: [1009..1010]
 r540: [56..57]
 r541: [46..47]
 r542: [38..39]
 r543: [30..31]
 r544: [22..23]
 r545: [14..15]
 r546: [6..7]
 r547: [917..918]
 r548: [905..906]
 r549: [893..894]
 r550: [882..883]
 r551: [871..872]
 r552: [859..860]
 r553: [847..848]
 r554: [835..836]
 r555: [823..824]
 r556: [811..812]
 r557: [799..800]
 r558: [787..788]
 r559: [775..776]
 r560: [763..764]
 r561: [751..752]
 r562: [739..740]
 r563: [727..728]
 r564: [715..716]
 r565: [931..932]
 r566: [945..946]
 r567: [696..697]
 r568: [688..689]
 r569: [686..687]
 r570: [959..960]
 r571: [675..676]
 r572: [667..668]
 r573: [665..666]
 r574: [973..974]
 r575: [654..655]
 r576: [646..647]
 r577: [644..645]
 r578: [642..643]
 r579: [987..988]
 r580: [631..632]
 r581: [623..624]
 r582: [621..622]
 r583: [619..620]
 r584: [1001..1002]
 r585: [608..609]
 r586: [600..601]
 r587: [598..599]
 r588: [596..597]
 r589: [594..595]
 r590: [314..315]
 r591: [303..304]
 r592: [292..293]
 r593: [281..282]
 r594: [270..271]
 r595: [259..260]
 r596: [248..249]
 r597: [237..238]
 r598: [226..227]
 r599: [215..216]
 r600: [204..205]
 r601: [193..194]
 r602: [182..183]
 r603: [171..172]
 r604: [160..161]
 r605: [148..149]
 r606: [136..137]
 r607: [124..125]
 r608: [51..52]
 r609: [49..50]
 r610: [43..44]
 r611: [41..42]
 r612: [35..36]
 r613: [33..34]
 r614: [27..28]
 r615: [25..26]
 r616: [19..20]
 r617: [17..18]
 r618: [11..12]
 r619: [9..10]
 r620: [3..4]
 r621: [1..2]
Compressing live ranges: from 1025 to 856 - 83%
Ranges after the compression:
 r83: [766..767]
 r84: [762..763]
 r85: [760..761]
 r86: [756..757]
 r87: [752..753]
 r88: [750..751]
 r89: [746..747]
 r90: [742..743]
 r91: [740..741]
 r92: [736..737]
 r93: [732..733]
 r94: [730..731]
 r95: [726..727]
 r96: [722..723]
 r97: [720..721]
 r98: [716..717]
 r99: [712..713]
 r100: [710..711]
 r101: [706..707]
 r102: [702..703]
 r103: [700..701]
 r104: [696..697]
 r105: [692..693]
 r106: [690..691]
 r107: [686..687]
 r108: [682..683]
 r109: [680..681]
 r110: [676..677]
 r111: [672..673]
 r112: [670..671]
 r113: [666..667]
 r114: [662..663]
 r115: [660..661]
 r116: [656..657]
 r117: [652..653]
 r118: [650..651]
 r119: [646..647]
 r120: [642..643]
 r121: [640..641]
 r122: [636..637]
 r123: [632..633]
 r124: [630..631]
 r125: [626..627]
 r126: [622..623]
 r127: [620..621]
 r128: [616..617]
 r129: [612..613]
 r130: [610..611]
 r131: [606..607]
 r132: [602..603]
 r133: [600..601]
 r134: [596..597]
 r135: [592..593]
 r136: [590..591]
 r137: [586..587]
 r138: [778..779]
 r139: [774..775]
 r140: [770..773]
 r141: [582..583]
 r142: [790..791]
 r143: [786..787]
 r144: [782..785]
 r145: [578..579]
 r146: [574..575]
 r147: [572..573]
 r148: [568..571]
 r149: [564..565]
 r150: [802..803]
 r151: [798..799]
 r152: [794..797]
 r153: [560..561]
 r154: [556..557]
 r155: [554..555]
 r156: [550..553]
 r157: [546..547]
 r158: [814..815]
 r159: [810..811]
 r160: [806..809]
 r161: [542..543]
 r162: [538..539]
 r163: [536..537]
 r164: [530..535]
 r165: [526..527]
 r166: [826..827]
 r167: [822..823]
 r168: [818..821]
 r169: [522..523]
 r170: [518..519]
 r171: [516..517]
 r172: [510..515]
 r173: [506..507]
 r174: [838..839]
 r175: [834..835]
 r176: [830..833]
 r177: [502..503]
 r178: [498..499]
 r179: [496..497]
 r180: [488..495]
 r181: [484..485]
 r182: [478..479]
 r183: [476..477]
 r184: [472..473]
 r185: [466..467]
 r186: [464..465]
 r187: [460..461]
 r188: [454..455]
 r189: [452..453]
 r190: [448..449]
 r191: [442..443]
 r192: [440..441]
 r193: [436..437]
 r194: [430..431]
 r195: [428..429]
 r196: [424..425]
 r197: [418..419]
 r198: [416..417]
 r199: [412..413]
 r200: [406..407]
 r201: [404..405]
 r202: [400..401]
 r203: [394..395]
 r204: [392..393]
 r205: [388..389]
 r206: [382..383]
 r207: [380..381]
 r208: [376..377]
 r209: [370..371]
 r210: [368..369]
 r211: [364..365]
 r212: [358..359]
 r213: [356..357]
 r214: [352..353]
 r215: [346..347]
 r216: [344..345]
 r217: [340..341]
 r218: [334..335]
 r219: [332..333]
 r220: [328..329]
 r221: [322..323]
 r222: [320..321]
 r223: [316..317]
 r224: [310..311]
 r225: [308..309]
 r226: [304..305]
 r227: [298..299]
 r228: [296..297]
 r229: [292..293]
 r230: [286..287]
 r231: [284..285]
 r232: [280..281]
 r233: [274..275]
 r234: [272..273]
 r235: [268..269]
 r236: [264..265]
 r237: [262..263]
 r238: [258..259]
 r239: [254..255]
 r240: [252..253]
 r241: [248..249]
 r242: [244..245]
 r243: [242..243]
 r244: [238..239]
 r245: [234..235]
 r246: [232..233]
 r247: [228..229]
 r248: [224..225]
 r249: [222..223]
 r250: [218..219]
 r251: [214..215]
 r252: [212..213]
 r253: [208..209]
 r254: [204..205]
 r255: [202..203]
 r256: [198..199]
 r257: [194..195]
 r258: [192..193]
 r259: [188..189]
 r260: [184..185]
 r261: [182..183]
 r262: [178..179]
 r263: [174..175]
 r264: [172..173]
 r265: [168..169]
 r266: [164..165]
 r267: [162..163]
 r268: [158..159]
 r269: [154..155]
 r270: [152..153]
 r271: [148..149]
 r272: [144..145]
 r273: [142..143]
 r274: [138..139]
 r275: [134..135]
 r276: [132..133]
 r277: [128..129]
 r278: [124..125]
 r279: [122..123]
 r280: [118..119]
 r281: [114..115]
 r282: [112..113]
 r283: [108..109]
 r284: [104..105]
 r285: [102..103]
 r286: [98..99]
 r287: [94..95]
 r288: [92..93]
 r289: [88..89]
 r290: [82..83]
 r291: [80..81]
 r292: [76..77]
 r293: [70..71]
 r294: [68..69]
 r295: [64..65]
 r296: [58..59]
 r297: [56..57]
 r298: [52..53]
 r299: [46..47]
 r300: [44..45]
 r301: [40..41]
 r302: [852..853]
 r303: [846..847]
 r304: [842..845]
 r305: [36..39]
 r306: [30..33]
 r307: [24..27]
 r308: [18..21]
 r309: [12..15]
 r310: [6..9]
 r311: [0..3]
 r312: [768..769]
 r313: [762..763]
 r314: [760..761]
 r315: [758..759]
 r316: [752..753]
 r317: [750..751]
 r318: [748..749]
 r319: [742..743]
 r320: [738..739]
 r321: [732..733]
 r322: [728..729]
 r323: [722..723]
 r324: [720..721]
 r325: [718..719]
 r326: [712..713]
 r327: [710..711]
 r328: [708..709]
 r329: [702..703]
 r330: [700..701]
 r331: [698..699]
 r332: [692..693]
 r333: [690..691]
 r334: [688..689]
 r335: [682..683]
 r336: [680..681]
 r337: [678..679]
 r338: [672..673]
 r339: [670..671]
 r340: [668..669]
 r341: [662..663]
 r342: [660..661]
 r343: [658..659]
 r344: [652..653]
 r345: [650..651]
 r346: [648..649]
 r347: [642..643]
 r348: [640..641]
 r349: [638..639]
 r350: [632..633]
 r351: [630..631]
 r352: [628..629]
 r353: [622..623]
 r354: [620..621]
 r355: [618..619]
 r356: [612..613]
 r357: [610..611]
 r358: [608..609]
 r359: [602..603]
 r360: [600..601]
 r361: [598..599]
 r362: [592..593]
 r363: [780..781]
 r364: [774..775]
 r365: [770..771]
 r366: [772..773]
 r367: [588..589]
 r368: [792..793]
 r369: [786..787]
 r370: [782..783]
 r371: [784..785]
 r372: [584..585]
 r373: [580..581]
 r374: [574..575]
 r375: [804..805]
 r376: [798..799]
 r377: [794..795]
 r378: [796..797]
 r379: [566..567]
 r380: [562..563]
 r381: [556..557]
 r382: [816..817]
 r383: [810..811]
 r384: [806..807]
 r385: [808..809]
 r386: [548..549]
 r387: [544..545]
 r388: [538..539]
 r389: [828..829]
 r390: [822..823]
 r391: [818..819]
 r392: [820..821]
 r393: [528..529]
 r394: [524..525]
 r395: [518..519]
 r396: [840..841]
 r397: [834..835]
 r398: [830..831]
 r399: [832..833]
 r400: [508..509]
 r401: [504..505]
 r402: [498..499]
 r403: [486..487]
 r404: [484..485] [480..481]
 r405: [482..483]
 r406: [478..479]
 r407: [474..475]
 r408: [472..473] [468..469]
 r409: [470..471]
 r410: [466..467]
 r411: [464..465]
 r412: [462..463]
 r413: [460..461] [456..457]
 r414: [458..459]
 r415: [454..455]
 r416: [450..451]
 r417: [448..449] [444..445]
 r418: [446..447]
 r419: [442..443]
 r420: [438..439]
 r421: [436..437] [432..433]
 r422: [434..435]
 r423: [430..431]
 r424: [426..427]
 r425: [424..425] [420..421]
 r426: [422..423]
 r427: [418..419]
 r428: [414..415]
 r429: [412..413] [408..409]
 r430: [410..411]
 r431: [406..407]
 r432: [402..403]
 r433: [400..401] [396..397]
 r434: [398..399]
 r435: [394..395]
 r436: [392..393]
 r437: [390..391]
 r438: [388..389] [384..385]
 r439: [386..387]
 r440: [382..383]
 r441: [378..379]
 r442: [376..377] [372..373]
 r443: [374..375]
 r444: [370..371]
 r445: [366..367]
 r446: [364..365] [360..361]
 r447: [362..363]
 r448: [358..359]
 r449: [354..355]
 r450: [352..353] [348..349]
 r451: [350..351]
 r452: [346..347]
 r453: [342..343]
 r454: [340..341] [336..337]
 r455: [338..339]
 r456: [334..335]
 r457: [332..333]
 r458: [330..331]
 r459: [328..329] [324..325]
 r460: [326..327]
 r461: [322..323]
 r462: [318..319]
 r463: [316..317] [312..313]
 r464: [314..315]
 r465: [310..311]
 r466: [306..307]
 r467: [304..305] [300..301]
 r468: [302..303]
 r469: [298..299]
 r470: [294..295]
 r471: [292..293] [288..289]
 r472: [290..291]
 r473: [286..287]
 r474: [282..283]
 r475: [280..281] [276..277]
 r476: [278..279]
 r477: [274..275]
 r478: [270..271]
 r479: [264..265]
 r480: [260..261]
 r481: [254..255]
 r482: [250..251]
 r483: [244..245]
 r484: [240..241]
 r485: [234..235]
 r486: [230..231]
 r487: [224..225]
 r488: [220..221]
 r489: [214..215]
 r490: [210..211]
 r491: [204..205]
 r492: [200..201]
 r493: [194..195]
 r494: [190..191]
 r495: [184..185]
 r496: [180..181]
 r497: [174..175]
 r498: [170..171]
 r499: [164..165]
 r500: [160..161]
 r501: [154..155]
 r502: [150..151]
 r503: [144..145]
 r504: [140..141]
 r505: [134..135]
 r506: [130..131]
 r507: [124..125]
 r508: [122..123]
 r509: [120..121]
 r510: [114..115]
 r511: [112..113]
 r512: [110..111]
 r513: [104..105]
 r514: [102..103]
 r515: [100..101]
 r516: [94..95]
 r517: [92..93]
 r518: [90..91]
 r519: [88..89] [84..85]
 r520: [86..87]
 r521: [82..83]
 r522: [78..79]
 r523: [76..77] [72..73]
 r524: [74..75]
 r525: [70..71]
 r526: [66..67]
 r527: [64..65] [60..61]
 r528: [62..63]
 r529: [58..59]
 r530: [54..55]
 r531: [52..53] [48..49]
 r532: [50..51]
 r533: [46..47]
 r534: [854..855]
 r535: [852..853] [848..849]
 r536: [850..851]
 r537: [846..847]
 r538: [842..843]
 r539: [844..845]
 r540: [42..43]
 r541: [34..35]
 r542: [28..29]
 r543: [22..23]
 r544: [16..17]
 r545: [10..11]
 r546: [4..5]
 r547: [764..765]
 r548: [754..755]
 r549: [744..745]
 r550: [734..735]
 r551: [724..725]
 r552: [714..715]
 r553: [704..705]
 r554: [694..695]
 r555: [684..685]
 r556: [674..675]
 r557: [664..665]
 r558: [654..655]
 r559: [644..645]
 r560: [634..635]
 r561: [624..625]
 r562: [614..615]
 r563: [604..605]
 r564: [594..595]
 r565: [776..777]
 r566: [788..789]
 r567: [576..577]
 r568: [570..571]
 r569: [568..569]
 r570: [800..801]
 r571: [558..559]
 r572: [552..553]
 r573: [550..551]
 r574: [812..813]
 r575: [540..541]
 r576: [534..535]
 r577: [532..533]
 r578: [530..531]
 r579: [824..825]
 r580: [520..521]
 r581: [514..515]
 r582: [512..513]
 r583: [510..511]
 r584: [836..837]
 r585: [500..501]
 r586: [494..495]
 r587: [492..493]
 r588: [490..491]
 r589: [488..489]
 r590: [266..267]
 r591: [256..257]
 r592: [246..247]
 r593: [236..237]
 r594: [226..227]
 r595: [216..217]
 r596: [206..207]
 r597: [196..197]
 r598: [186..187]
 r599: [176..177]
 r600: [166..167]
 r601: [156..157]
 r602: [146..147]
 r603: [136..137]
 r604: [126..127]
 r605: [116..117]
 r606: [106..107]
 r607: [96..97]
 r608: [38..39]
 r609: [36..37]
 r610: [32..33]
 r611: [30..31]
 r612: [26..27]
 r613: [24..25]
 r614: [20..21]
 r615: [18..19]
 r616: [14..15]
 r617: [12..13]
 r618: [8..9]
 r619: [6..7]
 r620: [2..3]
 r621: [0..1]

********** Assignment #1: **********

	 Assigning to 547 (cl=GENERAL_REGS, orig=84, freq=3, tfirst=547, tfreq=3)...
	   Assign 0 to reload r547 (freq=3)
	 Assigning to 548 (cl=GENERAL_REGS, orig=87, freq=3, tfirst=548, tfreq=3)...
	   Assign 0 to reload r548 (freq=3)
	 Assigning to 549 (cl=GENERAL_REGS, orig=90, freq=3, tfirst=549, tfreq=3)...
	   Assign 0 to reload r549 (freq=3)
	 Assigning to 550 (cl=GENERAL_REGS, orig=93, freq=3, tfirst=550, tfreq=3)...
	   Assign 0 to reload r550 (freq=3)
	 Assigning to 551 (cl=GENERAL_REGS, orig=96, freq=3, tfirst=551, tfreq=3)...
	   Assign 0 to reload r551 (freq=3)
	 Assigning to 552 (cl=GENERAL_REGS, orig=99, freq=3, tfirst=552, tfreq=3)...
	   Assign 0 to reload r552 (freq=3)
	 Assigning to 553 (cl=GENERAL_REGS, orig=102, freq=3, tfirst=553, tfreq=3)...
	   Assign 0 to reload r553 (freq=3)
	 Assigning to 554 (cl=GENERAL_REGS, orig=105, freq=3, tfirst=554, tfreq=3)...
	   Assign 0 to reload r554 (freq=3)
	 Assigning to 555 (cl=GENERAL_REGS, orig=108, freq=3, tfirst=555, tfreq=3)...
	   Assign 0 to reload r555 (freq=3)
	 Assigning to 556 (cl=GENERAL_REGS, orig=111, freq=3, tfirst=556, tfreq=3)...
	   Assign 0 to reload r556 (freq=3)
	 Assigning to 557 (cl=GENERAL_REGS, orig=114, freq=3, tfirst=557, tfreq=3)...
	   Assign 0 to reload r557 (freq=3)
	 Assigning to 558 (cl=GENERAL_REGS, orig=117, freq=3, tfirst=558, tfreq=3)...
	   Assign 0 to reload r558 (freq=3)
	 Assigning to 559 (cl=GENERAL_REGS, orig=120, freq=3, tfirst=559, tfreq=3)...
	   Assign 0 to reload r559 (freq=3)
	 Assigning to 560 (cl=GENERAL_REGS, orig=123, freq=3, tfirst=560, tfreq=3)...
	   Assign 0 to reload r560 (freq=3)
	 Assigning to 561 (cl=GENERAL_REGS, orig=126, freq=3, tfirst=561, tfreq=3)...
	   Assign 0 to reload r561 (freq=3)
	 Assigning to 562 (cl=GENERAL_REGS, orig=129, freq=3, tfirst=562, tfreq=3)...
	   Assign 0 to reload r562 (freq=3)
	 Assigning to 563 (cl=GENERAL_REGS, orig=132, freq=3, tfirst=563, tfreq=3)...
	   Assign 0 to reload r563 (freq=3)
	 Assigning to 564 (cl=GENERAL_REGS, orig=135, freq=3, tfirst=564, tfreq=3)...
	   Assign 0 to reload r564 (freq=3)
	 Assigning to 565 (cl=GENERAL_REGS, orig=139, freq=3, tfirst=565, tfreq=3)...
	   Assign 0 to reload r565 (freq=3)
	 Assigning to 566 (cl=GENERAL_REGS, orig=143, freq=3, tfirst=566, tfreq=3)...
	   Assign 0 to reload r566 (freq=3)
	 Assigning to 567 (cl=GENERAL_REGS, orig=146, freq=3, tfirst=567, tfreq=3)...
	   Assign 0 to reload r567 (freq=3)
	 Assigning to 570 (cl=GENERAL_REGS, orig=151, freq=3, tfirst=570, tfreq=3)...
	   Assign 0 to reload r570 (freq=3)
	 Assigning to 571 (cl=GENERAL_REGS, orig=154, freq=3, tfirst=571, tfreq=3)...
	   Assign 0 to reload r571 (freq=3)
	 Assigning to 574 (cl=GENERAL_REGS, orig=159, freq=3, tfirst=574, tfreq=3)...
	   Assign 0 to reload r574 (freq=3)
	 Assigning to 575 (cl=GENERAL_REGS, orig=162, freq=3, tfirst=575, tfreq=3)...
	   Assign 0 to reload r575 (freq=3)
	 Assigning to 579 (cl=GENERAL_REGS, orig=167, freq=3, tfirst=579, tfreq=3)...
	   Assign 0 to reload r579 (freq=3)
	 Assigning to 580 (cl=GENERAL_REGS, orig=170, freq=3, tfirst=580, tfreq=3)...
	   Assign 0 to reload r580 (freq=3)
	 Assigning to 584 (cl=GENERAL_REGS, orig=175, freq=3, tfirst=584, tfreq=3)...
	   Assign 0 to reload r584 (freq=3)
	 Assigning to 585 (cl=GENERAL_REGS, orig=178, freq=3, tfirst=585, tfreq=3)...
	   Assign 0 to reload r585 (freq=3)
	 Assigning to 590 (cl=GENERAL_REGS, orig=236, freq=3, tfirst=590, tfreq=3)...
	   Assign 0 to reload r590 (freq=3)
	 Assigning to 591 (cl=GENERAL_REGS, orig=239, freq=3, tfirst=591, tfreq=3)...
	   Assign 0 to reload r591 (freq=3)
	 Assigning to 592 (cl=GENERAL_REGS, orig=242, freq=3, tfirst=592, tfreq=3)...
	   Assign 0 to reload r592 (freq=3)
	 Assigning to 593 (cl=GENERAL_REGS, orig=245, freq=3, tfirst=593, tfreq=3)...
	   Assign 0 to reload r593 (freq=3)
	 Assigning to 594 (cl=GENERAL_REGS, orig=248, freq=3, tfirst=594, tfreq=3)...
	   Assign 0 to reload r594 (freq=3)
	 Assigning to 595 (cl=GENERAL_REGS, orig=251, freq=3, tfirst=595, tfreq=3)...
	   Assign 0 to reload r595 (freq=3)
	 Assigning to 596 (cl=GENERAL_REGS, orig=254, freq=3, tfirst=596, tfreq=3)...
	   Assign 0 to reload r596 (freq=3)
	 Assigning to 597 (cl=GENERAL_REGS, orig=257, freq=3, tfirst=597, tfreq=3)...
	   Assign 0 to reload r597 (freq=3)
	 Assigning to 598 (cl=GENERAL_REGS, orig=260, freq=3, tfirst=598, tfreq=3)...
	   Assign 0 to reload r598 (freq=3)
	 Assigning to 599 (cl=GENERAL_REGS, orig=263, freq=3, tfirst=599, tfreq=3)...
	   Assign 0 to reload r599 (freq=3)
	 Assigning to 600 (cl=GENERAL_REGS, orig=266, freq=3, tfirst=600, tfreq=3)...
	   Assign 0 to reload r600 (freq=3)
	 Assigning to 601 (cl=GENERAL_REGS, orig=269, freq=3, tfirst=601, tfreq=3)...
	   Assign 0 to reload r601 (freq=3)
	 Assigning to 602 (cl=GENERAL_REGS, orig=272, freq=3, tfirst=602, tfreq=3)...
	   Assign 0 to reload r602 (freq=3)
	 Assigning to 603 (cl=GENERAL_REGS, orig=275, freq=3, tfirst=603, tfreq=3)...
	   Assign 0 to reload r603 (freq=3)
	 Assigning to 604 (cl=GENERAL_REGS, orig=278, freq=3, tfirst=604, tfreq=3)...
	   Assign 0 to reload r604 (freq=3)
	 Assigning to 605 (cl=GENERAL_REGS, orig=281, freq=3, tfirst=605, tfreq=3)...
	   Assign 0 to reload r605 (freq=3)
	 Assigning to 606 (cl=GENERAL_REGS, orig=284, freq=3, tfirst=606, tfreq=3)...
	   Assign 0 to reload r606 (freq=3)
	 Assigning to 607 (cl=GENERAL_REGS, orig=287, freq=3, tfirst=607, tfreq=3)...
	   Assign 0 to reload r607 (freq=3)
	 Assigning to 568 (cl=GENERAL_REGS, orig=568, freq=2, tfirst=568, tfreq=2)...
	   Assign 2 to reload r568 (freq=2)
	 Assigning to 569 (cl=GENERAL_REGS, orig=569, freq=2, tfirst=569, tfreq=2)...
	   Assign 4 to reload r569 (freq=2)
	 Assigning to 572 (cl=GENERAL_REGS, orig=572, freq=2, tfirst=572, tfreq=2)...
	   Assign 5 to reload r572 (freq=2)
	 Assigning to 573 (cl=GENERAL_REGS, orig=573, freq=2, tfirst=573, tfreq=2)...
	   Assign 2 to reload r573 (freq=2)
	 Assigning to 576 (cl=GENERAL_REGS, orig=576, freq=2, tfirst=576, tfreq=2)...
	   Assign 4 to reload r576 (freq=2)
	 Assigning to 577 (cl=GENERAL_REGS, orig=577, freq=2, tfirst=577, tfreq=2)...
	   Assign 5 to reload r577 (freq=2)
	 Assigning to 578 (cl=GENERAL_REGS, orig=578, freq=2, tfirst=578, tfreq=2)...
	   Assign 2 to reload r578 (freq=2)
	 Assigning to 581 (cl=GENERAL_REGS, orig=581, freq=2, tfirst=581, tfreq=2)...
	   Assign 4 to reload r581 (freq=2)
	 Assigning to 582 (cl=GENERAL_REGS, orig=582, freq=2, tfirst=582, tfreq=2)...
	   Assign 5 to reload r582 (freq=2)
	 Assigning to 583 (cl=GENERAL_REGS, orig=583, freq=2, tfirst=583, tfreq=2)...
	   Assign 2 to reload r583 (freq=2)
	 Assigning to 586 (cl=GENERAL_REGS, orig=586, freq=2, tfirst=586, tfreq=2)...
	   Assign 4 to reload r586 (freq=2)
	 Assigning to 587 (cl=GENERAL_REGS, orig=587, freq=2, tfirst=587, tfreq=2)...
	   Assign 5 to reload r587 (freq=2)
	 Assigning to 588 (cl=GENERAL_REGS, orig=588, freq=2, tfirst=588, tfreq=2)...
	   Assign 2 to reload r588 (freq=2)
	 Assigning to 589 (cl=GENERAL_REGS, orig=589, freq=2, tfirst=589, tfreq=2)...
	   Assign 4 to reload r589 (freq=2)
	 Assigning to 608 (cl=GENERAL_REGS, orig=608, freq=2, tfirst=608, tfreq=2)...
	   Assign 5 to reload r608 (freq=2)
	 Assigning to 609 (cl=GENERAL_REGS, orig=609, freq=2, tfirst=609, tfreq=2)...
	   Assign 2 to reload r609 (freq=2)
	 Assigning to 610 (cl=GENERAL_REGS, orig=610, freq=2, tfirst=610, tfreq=2)...
	   Assign 4 to reload r610 (freq=2)
	 Assigning to 611 (cl=GENERAL_REGS, orig=611, freq=2, tfirst=611, tfreq=2)...
	   Assign 5 to reload r611 (freq=2)
	 Assigning to 612 (cl=GENERAL_REGS, orig=612, freq=2, tfirst=612, tfreq=2)...
	   Assign 2 to reload r612 (freq=2)
	 Assigning to 613 (cl=GENERAL_REGS, orig=613, freq=2, tfirst=613, tfreq=2)...
	   Assign 4 to reload r613 (freq=2)
	 Assigning to 614 (cl=GENERAL_REGS, orig=614, freq=2, tfirst=614, tfreq=2)...
	   Assign 5 to reload r614 (freq=2)
	 Assigning to 615 (cl=GENERAL_REGS, orig=615, freq=2, tfirst=615, tfreq=2)...
	   Assign 2 to reload r615 (freq=2)
	 Assigning to 616 (cl=GENERAL_REGS, orig=616, freq=2, tfirst=616, tfreq=2)...
	   Assign 4 to reload r616 (freq=2)
	 Assigning to 617 (cl=GENERAL_REGS, orig=617, freq=2, tfirst=617, tfreq=2)...
	   Assign 5 to reload r617 (freq=2)
	 Assigning to 618 (cl=GENERAL_REGS, orig=618, freq=2, tfirst=618, tfreq=2)...
	   Assign 2 to reload r618 (freq=2)
	 Assigning to 619 (cl=GENERAL_REGS, orig=619, freq=2, tfirst=619, tfreq=2)...
	   Assign 4 to reload r619 (freq=2)
	 Assigning to 620 (cl=GENERAL_REGS, orig=620, freq=2, tfirst=620, tfreq=2)...
	   Assign 5 to reload r620 (freq=2)
	 Assigning to 621 (cl=GENERAL_REGS, orig=621, freq=2, tfirst=621, tfreq=2)...
	   Assign 2 to reload r621 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 45
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 52
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 56
changing reg in insn 59
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 63
changing reg in insn 66
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 80
changing reg in insn 80
changing reg in insn 82
changing reg in insn 84
changing reg in insn 87
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 91
changing reg in insn 94
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 98
changing reg in insn 101
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 105
changing reg in insn 108
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 112
changing reg in insn 115
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 119
changing reg in insn 122
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 126
changing reg in insn 129
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 133
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 154
changing reg in insn 156
changing reg in insn 143
changing reg in insn 146
changing reg in insn 146
changing reg in insn 146
changing reg in insn 149
changing reg in insn 175
changing reg in insn 177
changing reg in insn 164
changing reg in insn 167
changing reg in insn 167
changing reg in insn 167
changing reg in insn 170
changing reg in insn 181
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 188
changing reg in insn 187
changing reg in insn 186
changing reg in insn 205
changing reg in insn 207
changing reg in insn 194
changing reg in insn 197
changing reg in insn 197
changing reg in insn 197
changing reg in insn 200
changing reg in insn 211
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 219
changing reg in insn 218
changing reg in insn 217
changing reg in insn 216
changing reg in insn 236
changing reg in insn 238
changing reg in insn 225
changing reg in insn 228
changing reg in insn 228
changing reg in insn 228
changing reg in insn 231
changing reg in insn 242
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 251
changing reg in insn 250
changing reg in insn 249
changing reg in insn 248
changing reg in insn 247
changing reg in insn 268
changing reg in insn 270
changing reg in insn 257
changing reg in insn 260
changing reg in insn 260
changing reg in insn 260
changing reg in insn 263
changing reg in insn 274
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 282
changing reg in insn 281
changing reg in insn 280
changing reg in insn 279
changing reg in insn 299
changing reg in insn 301
changing reg in insn 288
changing reg in insn 291
changing reg in insn 291
changing reg in insn 291
changing reg in insn 294
changing reg in insn 305
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 314
changing reg in insn 313
changing reg in insn 312
changing reg in insn 311
changing reg in insn 310
changing reg in insn 316
changing reg in insn 321
changing reg in insn 319
changing reg in insn 317
changing reg in insn 321
changing reg in insn 319
changing reg in insn 324
changing reg in insn 326
changing reg in insn 326
changing reg in insn 327
changing reg in insn 329
changing reg in insn 334
changing reg in insn 332
changing reg in insn 330
changing reg in insn 334
changing reg in insn 332
changing reg in insn 337
changing reg in insn 339
changing reg in insn 339
changing reg in insn 339
changing reg in insn 341
changing reg in insn 343
changing reg in insn 348
changing reg in insn 346
changing reg in insn 344
changing reg in insn 348
changing reg in insn 346
changing reg in insn 351
changing reg in insn 353
changing reg in insn 353
changing reg in insn 354
changing reg in insn 356
changing reg in insn 361
changing reg in insn 359
changing reg in insn 357
changing reg in insn 361
changing reg in insn 359
changing reg in insn 364
changing reg in insn 366
changing reg in insn 366
changing reg in insn 367
changing reg in insn 369
changing reg in insn 374
changing reg in insn 372
changing reg in insn 370
changing reg in insn 374
changing reg in insn 372
changing reg in insn 377
changing reg in insn 379
changing reg in insn 379
changing reg in insn 380
changing reg in insn 382
changing reg in insn 387
changing reg in insn 385
changing reg in insn 383
changing reg in insn 387
changing reg in insn 385
changing reg in insn 390
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 395
changing reg in insn 400
changing reg in insn 398
changing reg in insn 396
changing reg in insn 400
changing reg in insn 398
changing reg in insn 403
changing reg in insn 405
changing reg in insn 405
changing reg in insn 406
changing reg in insn 408
changing reg in insn 413
changing reg in insn 411
changing reg in insn 409
changing reg in insn 413
changing reg in insn 411
changing reg in insn 416
changing reg in insn 418
changing reg in insn 418
changing reg in insn 418
changing reg in insn 420
changing reg in insn 422
changing reg in insn 427
changing reg in insn 425
changing reg in insn 423
changing reg in insn 427
changing reg in insn 425
changing reg in insn 430
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 435
changing reg in insn 440
changing reg in insn 438
changing reg in insn 436
changing reg in insn 440
changing reg in insn 438
changing reg in insn 443
changing reg in insn 445
changing reg in insn 445
changing reg in insn 446
changing reg in insn 448
changing reg in insn 453
changing reg in insn 451
changing reg in insn 449
changing reg in insn 453
changing reg in insn 451
changing reg in insn 456
changing reg in insn 458
changing reg in insn 458
changing reg in insn 459
changing reg in insn 461
changing reg in insn 466
changing reg in insn 464
changing reg in insn 462
changing reg in insn 466
changing reg in insn 464
changing reg in insn 469
changing reg in insn 471
changing reg in insn 471
changing reg in insn 472
changing reg in insn 474
changing reg in insn 479
changing reg in insn 477
changing reg in insn 475
changing reg in insn 479
changing reg in insn 477
changing reg in insn 482
changing reg in insn 484
changing reg in insn 484
changing reg in insn 484
changing reg in insn 486
changing reg in insn 488
changing reg in insn 493
changing reg in insn 491
changing reg in insn 489
changing reg in insn 493
changing reg in insn 491
changing reg in insn 496
changing reg in insn 498
changing reg in insn 498
changing reg in insn 499
changing reg in insn 501
changing reg in insn 506
changing reg in insn 504
changing reg in insn 502
changing reg in insn 506
changing reg in insn 504
changing reg in insn 509
changing reg in insn 511
changing reg in insn 511
changing reg in insn 512
changing reg in insn 514
changing reg in insn 519
changing reg in insn 517
changing reg in insn 515
changing reg in insn 519
changing reg in insn 517
changing reg in insn 522
changing reg in insn 524
changing reg in insn 524
changing reg in insn 525
changing reg in insn 527
changing reg in insn 532
changing reg in insn 530
changing reg in insn 528
changing reg in insn 532
changing reg in insn 530
changing reg in insn 535
changing reg in insn 537
changing reg in insn 537
changing reg in insn 538
changing reg in insn 540
changing reg in insn 545
changing reg in insn 543
changing reg in insn 541
changing reg in insn 545
changing reg in insn 543
changing reg in insn 548
changing reg in insn 550
changing reg in insn 550
changing reg in insn 551
changing reg in insn 553
changing reg in insn 556
changing reg in insn 556
changing reg in insn 557
changing reg in insn 559
changing reg in insn 562
changing reg in insn 562
changing reg in insn 563
changing reg in insn 565
changing reg in insn 568
changing reg in insn 568
changing reg in insn 569
changing reg in insn 571
changing reg in insn 574
changing reg in insn 574
changing reg in insn 575
changing reg in insn 577
changing reg in insn 580
changing reg in insn 580
changing reg in insn 581
changing reg in insn 583
changing reg in insn 586
changing reg in insn 586
changing reg in insn 587
changing reg in insn 589
changing reg in insn 592
changing reg in insn 592
changing reg in insn 593
changing reg in insn 595
changing reg in insn 598
changing reg in insn 598
changing reg in insn 599
changing reg in insn 601
changing reg in insn 604
changing reg in insn 604
changing reg in insn 605
changing reg in insn 607
changing reg in insn 610
changing reg in insn 610
changing reg in insn 611
changing reg in insn 613
changing reg in insn 616
changing reg in insn 616
changing reg in insn 617
changing reg in insn 619
changing reg in insn 622
changing reg in insn 622
changing reg in insn 623
changing reg in insn 625
changing reg in insn 628
changing reg in insn 628
changing reg in insn 629
changing reg in insn 631
changing reg in insn 634
changing reg in insn 634
changing reg in insn 635
changing reg in insn 637
changing reg in insn 640
changing reg in insn 640
changing reg in insn 640
changing reg in insn 642
changing reg in insn 644
changing reg in insn 647
changing reg in insn 647
changing reg in insn 647
changing reg in insn 649
changing reg in insn 651
changing reg in insn 654
changing reg in insn 654
changing reg in insn 654
changing reg in insn 656
changing reg in insn 658
changing reg in insn 661
changing reg in insn 661
changing reg in insn 661
changing reg in insn 663
changing reg in insn 665
changing reg in insn 668
changing reg in insn 666
changing reg in insn 668
changing reg in insn 671
changing reg in insn 673
changing reg in insn 673
changing reg in insn 674
changing reg in insn 676
changing reg in insn 679
changing reg in insn 677
changing reg in insn 679
changing reg in insn 682
changing reg in insn 684
changing reg in insn 684
changing reg in insn 685
changing reg in insn 687
changing reg in insn 690
changing reg in insn 688
changing reg in insn 690
changing reg in insn 693
changing reg in insn 695
changing reg in insn 695
changing reg in insn 696
changing reg in insn 698
changing reg in insn 701
changing reg in insn 699
changing reg in insn 701
changing reg in insn 704
changing reg in insn 706
changing reg in insn 706
changing reg in insn 707
changing reg in insn 729
changing reg in insn 731
changing reg in insn 713
changing reg in insn 716
changing reg in insn 714
changing reg in insn 716
changing reg in insn 719
changing reg in insn 721
changing reg in insn 721
changing reg in insn 721
changing reg in insn 724
changing reg in insn 741
changing reg in insn 745
changing reg in insn 744
changing reg in insn 743
changing reg in insn 742
changing reg in insn 747
changing reg in insn 751
changing reg in insn 750
changing reg in insn 749
changing reg in insn 748
changing reg in insn 753
changing reg in insn 757
changing reg in insn 756
changing reg in insn 755
changing reg in insn 754
changing reg in insn 759
changing reg in insn 763
changing reg in insn 762
changing reg in insn 761
changing reg in insn 760
changing reg in insn 765
changing reg in insn 769
changing reg in insn 768
changing reg in insn 767
changing reg in insn 766
changing reg in insn 771
changing reg in insn 775
changing reg in insn 774
changing reg in insn 773
changing reg in insn 772
changing reg in insn 777
changing reg in insn 781
changing reg in insn 780
changing reg in insn 779
changing reg in insn 778
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 147
changing reg in insn 148
changing reg in insn 153
changing reg in insn 154
changing reg in insn 163
changing reg in insn 164
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 168
changing reg in insn 169
changing reg in insn 174
changing reg in insn 175
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 198
changing reg in insn 199
changing reg in insn 204
changing reg in insn 205
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 224
changing reg in insn 225
changing reg in insn 227
changing reg in insn 228
changing reg in insn 230
changing reg in insn 231
changing reg in insn 229
changing reg in insn 230
changing reg in insn 235
changing reg in insn 236
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 256
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 262
changing reg in insn 263
changing reg in insn 261
changing reg in insn 262
changing reg in insn 267
changing reg in insn 268
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 292
changing reg in insn 293
changing reg in insn 298
changing reg in insn 299
changing reg in insn 304
changing reg in insn 305
changing reg in insn 307
changing reg in insn 315
changing reg in insn 316
changing reg in insn 323
changing reg in insn 321
changing reg in insn 320
changing reg in insn 319
changing reg in insn 318
changing reg in insn 317
changing reg in insn 324
changing reg in insn 322
changing reg in insn 321
changing reg in insn 320
changing reg in insn 319
changing reg in insn 318
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 328
changing reg in insn 329
changing reg in insn 336
changing reg in insn 334
changing reg in insn 333
changing reg in insn 332
changing reg in insn 331
changing reg in insn 330
changing reg in insn 337
changing reg in insn 335
changing reg in insn 334
changing reg in insn 333
changing reg in insn 332
changing reg in insn 331
changing reg in insn 335
changing reg in insn 336
changing reg in insn 338
changing reg in insn 339
changing reg in insn 340
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 350
changing reg in insn 348
changing reg in insn 347
changing reg in insn 346
changing reg in insn 345
changing reg in insn 344
changing reg in insn 351
changing reg in insn 349
changing reg in insn 348
changing reg in insn 347
changing reg in insn 346
changing reg in insn 345
changing reg in insn 349
changing reg in insn 350
changing reg in insn 352
changing reg in insn 355
changing reg in insn 356
changing reg in insn 363
changing reg in insn 361
changing reg in insn 360
changing reg in insn 359
changing reg in insn 358
changing reg in insn 357
changing reg in insn 364
changing reg in insn 362
changing reg in insn 361
changing reg in insn 360
changing reg in insn 359
changing reg in insn 358
changing reg in insn 362
changing reg in insn 363
changing reg in insn 365
changing reg in insn 368
changing reg in insn 369
changing reg in insn 376
changing reg in insn 374
changing reg in insn 373
changing reg in insn 372
changing reg in insn 371
changing reg in insn 370
changing reg in insn 377
changing reg in insn 375
changing reg in insn 374
changing reg in insn 373
changing reg in insn 372
changing reg in insn 371
changing reg in insn 375
changing reg in insn 376
changing reg in insn 378
changing reg in insn 381
changing reg in insn 382
changing reg in insn 389
changing reg in insn 387
changing reg in insn 386
changing reg in insn 385
changing reg in insn 384
changing reg in insn 383
changing reg in insn 390
changing reg in insn 388
changing reg in insn 387
changing reg in insn 386
changing reg in insn 385
changing reg in insn 384
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 394
changing reg in insn 395
changing reg in insn 402
changing reg in insn 400
changing reg in insn 399
changing reg in insn 398
changing reg in insn 397
changing reg in insn 396
changing reg in insn 403
changing reg in insn 401
changing reg in insn 400
changing reg in insn 399
changing reg in insn 398
changing reg in insn 397
changing reg in insn 401
changing reg in insn 402
changing reg in insn 404
changing reg in insn 407
changing reg in insn 408
changing reg in insn 415
changing reg in insn 413
changing reg in insn 412
changing reg in insn 411
changing reg in insn 410
changing reg in insn 409
changing reg in insn 416
changing reg in insn 414
changing reg in insn 413
changing reg in insn 412
changing reg in insn 411
changing reg in insn 410
changing reg in insn 414
changing reg in insn 415
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 420
changing reg in insn 421
changing reg in insn 422
changing reg in insn 429
changing reg in insn 427
changing reg in insn 426
changing reg in insn 425
changing reg in insn 424
changing reg in insn 423
changing reg in insn 430
changing reg in insn 428
changing reg in insn 427
changing reg in insn 426
changing reg in insn 425
changing reg in insn 424
changing reg in insn 428
changing reg in insn 429
changing reg in insn 431
changing reg in insn 434
changing reg in insn 435
changing reg in insn 442
changing reg in insn 440
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 436
changing reg in insn 443
changing reg in insn 441
changing reg in insn 440
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 441
changing reg in insn 442
changing reg in insn 444
changing reg in insn 447
changing reg in insn 448
changing reg in insn 455
changing reg in insn 453
changing reg in insn 452
changing reg in insn 451
changing reg in insn 450
changing reg in insn 449
changing reg in insn 456
changing reg in insn 454
changing reg in insn 453
changing reg in insn 452
changing reg in insn 451
changing reg in insn 450
changing reg in insn 454
changing reg in insn 455
changing reg in insn 457
changing reg in insn 460
changing reg in insn 461
changing reg in insn 468
changing reg in insn 466
changing reg in insn 465
changing reg in insn 464
changing reg in insn 463
changing reg in insn 462
changing reg in insn 469
changing reg in insn 467
changing reg in insn 466
changing reg in insn 465
changing reg in insn 464
changing reg in insn 463
changing reg in insn 467
changing reg in insn 468
changing reg in insn 470
changing reg in insn 473
changing reg in insn 474
changing reg in insn 481
changing reg in insn 479
changing reg in insn 478
changing reg in insn 477
changing reg in insn 476
changing reg in insn 475
changing reg in insn 482
changing reg in insn 480
changing reg in insn 479
changing reg in insn 478
changing reg in insn 477
changing reg in insn 476
changing reg in insn 480
changing reg in insn 481
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 487
changing reg in insn 488
changing reg in insn 495
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 489
changing reg in insn 496
changing reg in insn 494
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 500
changing reg in insn 501
changing reg in insn 508
changing reg in insn 506
changing reg in insn 505
changing reg in insn 504
changing reg in insn 503
changing reg in insn 502
changing reg in insn 509
changing reg in insn 507
changing reg in insn 506
changing reg in insn 505
changing reg in insn 504
changing reg in insn 503
changing reg in insn 507
changing reg in insn 508
changing reg in insn 510
changing reg in insn 513
changing reg in insn 514
changing reg in insn 521
changing reg in insn 519
changing reg in insn 518
changing reg in insn 517
changing reg in insn 516
changing reg in insn 515
changing reg in insn 522
changing reg in insn 520
changing reg in insn 519
changing reg in insn 518
changing reg in insn 517
changing reg in insn 516
changing reg in insn 520
changing reg in insn 521
changing reg in insn 523
changing reg in insn 526
changing reg in insn 527
changing reg in insn 534
changing reg in insn 532
changing reg in insn 531
changing reg in insn 530
changing reg in insn 529
changing reg in insn 528
changing reg in insn 535
changing reg in insn 533
changing reg in insn 532
changing reg in insn 531
changing reg in insn 530
changing reg in insn 529
changing reg in insn 533
changing reg in insn 534
changing reg in insn 536
changing reg in insn 539
changing reg in insn 540
changing reg in insn 547
changing reg in insn 545
changing reg in insn 544
changing reg in insn 543
changing reg in insn 542
changing reg in insn 541
changing reg in insn 548
changing reg in insn 546
changing reg in insn 545
changing reg in insn 544
changing reg in insn 543
changing reg in insn 542
changing reg in insn 546
changing reg in insn 547
changing reg in insn 549
changing reg in insn 552
changing reg in insn 553
changing reg in insn 555
changing reg in insn 558
changing reg in insn 559
changing reg in insn 561
changing reg in insn 564
changing reg in insn 565
changing reg in insn 567
changing reg in insn 570
changing reg in insn 571
changing reg in insn 573
changing reg in insn 576
changing reg in insn 577
changing reg in insn 579
changing reg in insn 582
changing reg in insn 583
changing reg in insn 585
changing reg in insn 588
changing reg in insn 589
changing reg in insn 591
changing reg in insn 594
changing reg in insn 595
changing reg in insn 597
changing reg in insn 600
changing reg in insn 601
changing reg in insn 603
changing reg in insn 606
changing reg in insn 607
changing reg in insn 609
changing reg in insn 612
changing reg in insn 613
changing reg in insn 615
changing reg in insn 618
changing reg in insn 619
changing reg in insn 621
changing reg in insn 624
changing reg in insn 625
changing reg in insn 627
changing reg in insn 630
changing reg in insn 631
changing reg in insn 633
changing reg in insn 636
changing reg in insn 637
changing reg in insn 639
changing reg in insn 640
changing reg in insn 641
changing reg in insn 642
changing reg in insn 643
changing reg in insn 644
changing reg in insn 646
changing reg in insn 647
changing reg in insn 648
changing reg in insn 649
changing reg in insn 650
changing reg in insn 651
changing reg in insn 653
changing reg in insn 654
changing reg in insn 655
changing reg in insn 656
changing reg in insn 657
changing reg in insn 658
changing reg in insn 660
changing reg in insn 661
changing reg in insn 662
changing reg in insn 663
changing reg in insn 664
changing reg in insn 665
changing reg in insn 670
changing reg in insn 668
changing reg in insn 667
changing reg in insn 666
changing reg in insn 671
changing reg in insn 669
changing reg in insn 668
changing reg in insn 667
changing reg in insn 669
changing reg in insn 670
changing reg in insn 672
changing reg in insn 675
changing reg in insn 676
changing reg in insn 681
changing reg in insn 679
changing reg in insn 678
changing reg in insn 677
changing reg in insn 682
changing reg in insn 680
changing reg in insn 679
changing reg in insn 678
changing reg in insn 680
changing reg in insn 681
changing reg in insn 683
changing reg in insn 686
changing reg in insn 687
changing reg in insn 692
changing reg in insn 690
changing reg in insn 689
changing reg in insn 688
changing reg in insn 693
changing reg in insn 691
changing reg in insn 690
changing reg in insn 689
changing reg in insn 691
changing reg in insn 692
changing reg in insn 694
changing reg in insn 697
changing reg in insn 698
changing reg in insn 703
changing reg in insn 701
changing reg in insn 700
changing reg in insn 699
changing reg in insn 704
changing reg in insn 702
changing reg in insn 701
changing reg in insn 700
changing reg in insn 702
changing reg in insn 703
changing reg in insn 705
changing reg in insn 712
changing reg in insn 713
changing reg in insn 718
changing reg in insn 716
changing reg in insn 715
changing reg in insn 714
changing reg in insn 719
changing reg in insn 717
changing reg in insn 716
changing reg in insn 715
changing reg in insn 717
changing reg in insn 718
changing reg in insn 720
changing reg in insn 721
changing reg in insn 723
changing reg in insn 724
changing reg in insn 722
changing reg in insn 723
changing reg in insn 728
changing reg in insn 729
changing reg in insn 746
changing reg in insn 747
changing reg in insn 752
changing reg in insn 753
changing reg in insn 758
changing reg in insn 759
changing reg in insn 764
changing reg in insn 765
changing reg in insn 770
changing reg in insn 771
changing reg in insn 776
changing reg in insn 777
deleting insn with uid = 801.
deleting insn with uid = 803.
deleting insn with uid = 805.
deleting insn with uid = 807.
deleting insn with uid = 809.
deleting insn with uid = 811.
deleting insn with uid = 813.
deleting insn with uid = 815.
deleting insn with uid = 817.
deleting insn with uid = 819.
deleting insn with uid = 821.
deleting insn with uid = 823.
deleting insn with uid = 825.
deleting insn with uid = 827.
deleting insn with uid = 829.
deleting insn with uid = 831.
deleting insn with uid = 833.
deleting insn with uid = 835.
deleting insn with uid = 837.
deleting insn with uid = 839.
deleting insn with uid = 841.
deleting insn with uid = 845.
deleting insn with uid = 847.
deleting insn with uid = 851.
deleting insn with uid = 853.
deleting insn with uid = 858.
deleting insn with uid = 860.
deleting insn with uid = 865.
deleting insn with uid = 867.
deleting insn with uid = 323.
deleting insn with uid = 336.
deleting insn with uid = 350.
deleting insn with uid = 363.
deleting insn with uid = 376.
deleting insn with uid = 389.
deleting insn with uid = 402.
deleting insn with uid = 415.
deleting insn with uid = 429.
deleting insn with uid = 442.
deleting insn with uid = 455.
deleting insn with uid = 468.
deleting insn with uid = 481.
deleting insn with uid = 495.
deleting insn with uid = 508.
deleting insn with uid = 521.
deleting insn with uid = 534.
deleting insn with uid = 547.
deleting insn with uid = 873.
deleting insn with uid = 875.
deleting insn with uid = 877.
deleting insn with uid = 879.
deleting insn with uid = 881.
deleting insn with uid = 883.
deleting insn with uid = 885.
deleting insn with uid = 887.
deleting insn with uid = 889.
deleting insn with uid = 891.
deleting insn with uid = 893.
deleting insn with uid = 895.
deleting insn with uid = 897.
deleting insn with uid = 899.
deleting insn with uid = 901.
deleting insn with uid = 903.
deleting insn with uid = 905.
deleting insn with uid = 907.
deleting insn with uid = 670.
deleting insn with uid = 681.
deleting insn with uid = 692.
deleting insn with uid = 703.
deleting insn with uid = 718.
starting the processing of deferred insns
ending the processing of deferred insns


void init(Data_file_header*, Data_block_header*, Procpar_info*, Preprocess*, IOFiles*, InFile_struct*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={472d,508u} r1={123d,164u,111e} r2={11d,11u} r4={10d,10u} r5={10d,10u} r6={1d,218u} r7={1d,26u} r17={249d,8u} r20={1d,1u,76e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d,1u} 
;;    total ref usage 2033{888d,958u,187e} in 781{781 regular + 0 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
        (reg:DI 5 di [ main_header ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
        (reg:DI 4 si [ block_header ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
        (reg:DI 37 r8 [ io_filenames ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
        (reg:DI 38 r9 [ infile_struct ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 784 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:274 90 {*movsi_internal}
     (nil))
(jump_insn 784 11 785 2 (set (pc)
        (label_ref 735)) ge2fitman_sup.cpp:274 636 {jump}
     (nil)
 -> 735)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 785 784 737)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362
(code_label 737 785 14 3 73 "" [1 uses])
(note 14 737 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 0 ax [312])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:277 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 0 ax [orig:83 D.25107 ] [83])
        (sign_extend:DI (reg:SI 0 ax [312]))) ge2fitman_sup.cpp:277 142 {*extendsidi2_rex64}
     (nil))
(insn 17 16 802 3 (parallel [
            (set (reg:DI 0 ax [orig:84 D.25107 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:84 D.25107 ] [84])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:277 497 {*ashldi3_1}
     (nil))
(insn 802 17 18 3 (set (reg:DI 1 dx [orig:84 D.25107 ] [84])
        (reg:DI 0 ax [orig:84 D.25107 ] [84])) ge2fitman_sup.cpp:277 89 {*movdi_internal}
     (nil))
(insn 18 802 19 3 (set (reg/f:DI 0 ax [313])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:277 89 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg/f:DI 1 dx [orig:85 D.25108 ] [85])
                (plus:DI (reg:DI 1 dx [orig:84 D.25107 ] [84])
                    (reg/f:DI 0 ax [313])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:277 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.25107 ] [84]))
        (nil)))
(insn 20 19 21 3 (set (reg:SF 0 ax [314])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:277 129 {*movsf_internal}
     (nil))
(insn 21 20 22 3 (set (mem/j:SF (reg/f:DI 1 dx [orig:85 D.25108 ] [85]) [0 _13->acquision_time+0 S4 A64])
        (reg:SF 0 ax [314])) ge2fitman_sup.cpp:277 129 {*movsf_internal}
     (nil))
(insn 22 21 23 3 (set (reg:SI 0 ax [315])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:278 90 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 0 ax [orig:86 D.25107 ] [86])
        (sign_extend:DI (reg:SI 0 ax [315]))) ge2fitman_sup.cpp:278 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 804 3 (parallel [
            (set (reg:DI 0 ax [orig:87 D.25107 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:87 D.25107 ] [87])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:278 497 {*ashldi3_1}
     (nil))
(insn 804 24 25 3 (set (reg:DI 1 dx [orig:87 D.25107 ] [87])
        (reg:DI 0 ax [orig:87 D.25107 ] [87])) ge2fitman_sup.cpp:278 89 {*movdi_internal}
     (nil))
(insn 25 804 26 3 (set (reg/f:DI 0 ax [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:278 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 1 dx [orig:88 D.25108 ] [88])
                (plus:DI (reg:DI 1 dx [orig:87 D.25107 ] [87])
                    (reg/f:DI 0 ax [316])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:278 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:87 D.25107 ] [87]))
        (nil)))
(insn 27 26 28 3 (set (reg:SF 0 ax [317])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:278 129 {*movsf_internal}
     (nil))
(insn 28 27 29 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:88 D.25108 ] [88])
                (const_int 316 [0x13c])) [0 _16->filter+0 S4 A32])
        (reg:SF 0 ax [317])) ge2fitman_sup.cpp:278 129 {*movsf_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 0 ax [318])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:279 90 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:DI 0 ax [orig:89 D.25107 ] [89])
        (sign_extend:DI (reg:SI 0 ax [318]))) ge2fitman_sup.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 31 30 806 3 (parallel [
            (set (reg:DI 0 ax [orig:90 D.25107 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:90 D.25107 ] [90])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:279 497 {*ashldi3_1}
     (nil))
(insn 806 31 32 3 (set (reg:DI 1 dx [orig:90 D.25107 ] [90])
        (reg:DI 0 ax [orig:90 D.25107 ] [90])) ge2fitman_sup.cpp:279 89 {*movdi_internal}
     (nil))
(insn 32 806 33 3 (set (reg/f:DI 0 ax [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:279 89 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.25108 ] [91])
                (plus:DI (reg/f:DI 0 ax [319])
                    (reg:DI 1 dx [orig:90 D.25107 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:279 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.25107 ] [90]))
        (nil)))
(insn 34 33 35 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:91 D.25108 ] [91])
                (const_int 320 [0x140])) [0 _19->num_transients+0 S4 A64])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:279 90 {*movsi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:SI 0 ax [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:280 90 {*movsi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:DI 0 ax [orig:92 D.25107 ] [92])
        (sign_extend:DI (reg:SI 0 ax [320]))) ge2fitman_sup.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 37 36 808 3 (parallel [
            (set (reg:DI 0 ax [orig:93 D.25107 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:93 D.25107 ] [93])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:280 497 {*ashldi3_1}
     (nil))
(insn 808 37 38 3 (set (reg:DI 1 dx [orig:93 D.25107 ] [93])
        (reg:DI 0 ax [orig:93 D.25107 ] [93])) ge2fitman_sup.cpp:280 89 {*movdi_internal}
     (nil))
(insn 38 808 39 3 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:280 89 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.25108 ] [94])
                (plus:DI (reg/f:DI 0 ax [321])
                    (reg:DI 1 dx [orig:93 D.25107 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:280 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.25107 ] [93]))
        (nil)))
(insn 40 39 41 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:94 D.25108 ] [94])
                (const_int 324 [0x144])) [0 _22->num_points+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:280 90 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:281 90 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:DI 0 ax [orig:95 D.25107 ] [95])
        (sign_extend:DI (reg:SI 0 ax [322]))) ge2fitman_sup.cpp:281 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 810 3 (parallel [
            (set (reg:DI 0 ax [orig:96 D.25107 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:96 D.25107 ] [96])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:281 497 {*ashldi3_1}
     (nil))
(insn 810 43 44 3 (set (reg:DI 1 dx [orig:96 D.25107 ] [96])
        (reg:DI 0 ax [orig:96 D.25107 ] [96])) ge2fitman_sup.cpp:281 89 {*movdi_internal}
     (nil))
(insn 44 810 45 3 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:281 89 {*movdi_internal}
     (nil))
(insn 45 44 46 3 (parallel [
            (set (reg/f:DI 1 dx [orig:97 D.25108 ] [97])
                (plus:DI (reg:DI 1 dx [orig:96 D.25107 ] [96])
                    (reg/f:DI 0 ax [323])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:281 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.25107 ] [96]))
        (nil)))
(insn 46 45 47 3 (set (reg:DF 0 ax [324])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S8 A64])) ge2fitman_sup.cpp:281 128 {*movdf_internal}
     (nil))
(insn 47 46 48 3 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [orig:97 D.25108 ] [97])
                (const_int 328 [0x148])) [0 _25->main_frequency+0 S8 A64])
        (reg:DF 0 ax [324])) ge2fitman_sup.cpp:281 128 {*movdf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:SI 0 ax [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:282 90 {*movsi_internal}
     (nil))
(insn 49 48 50 3 (set (reg:DI 0 ax [orig:98 D.25107 ] [98])
        (sign_extend:DI (reg:SI 0 ax [325]))) ge2fitman_sup.cpp:282 142 {*extendsidi2_rex64}
     (nil))
(insn 50 49 812 3 (parallel [
            (set (reg:DI 0 ax [orig:99 D.25107 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:99 D.25107 ] [99])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:282 497 {*ashldi3_1}
     (nil))
(insn 812 50 51 3 (set (reg:DI 1 dx [orig:99 D.25107 ] [99])
        (reg:DI 0 ax [orig:99 D.25107 ] [99])) ge2fitman_sup.cpp:282 89 {*movdi_internal}
     (nil))
(insn 51 812 52 3 (set (reg/f:DI 0 ax [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:282 89 {*movdi_internal}
     (nil))
(insn 52 51 53 3 (parallel [
            (set (reg/f:DI 1 dx [orig:100 D.25108 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 D.25107 ] [99])
                    (reg/f:DI 0 ax [326])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:282 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.25107 ] [99]))
        (nil)))
(insn 53 52 54 3 (set (reg:DF 0 ax [327])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S8 A64])) ge2fitman_sup.cpp:282 128 {*movdf_internal}
     (nil))
(insn 54 53 55 3 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [orig:100 D.25108 ] [100])
                (const_int 336 [0x150])) [0 _28->offset_frequency+0 S8 A64])
        (reg:DF 0 ax [327])) ge2fitman_sup.cpp:282 128 {*movdf_internal}
     (nil))
(insn 55 54 56 3 (set (reg:SI 0 ax [328])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:283 90 {*movsi_internal}
     (nil))
(insn 56 55 57 3 (set (reg:DI 0 ax [orig:101 D.25107 ] [101])
        (sign_extend:DI (reg:SI 0 ax [328]))) ge2fitman_sup.cpp:283 142 {*extendsidi2_rex64}
     (nil))
(insn 57 56 814 3 (parallel [
            (set (reg:DI 0 ax [orig:102 D.25107 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:102 D.25107 ] [102])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:283 497 {*ashldi3_1}
     (nil))
(insn 814 57 58 3 (set (reg:DI 1 dx [orig:102 D.25107 ] [102])
        (reg:DI 0 ax [orig:102 D.25107 ] [102])) ge2fitman_sup.cpp:283 89 {*movdi_internal}
     (nil))
(insn 58 814 59 3 (set (reg/f:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:283 89 {*movdi_internal}
     (nil))
(insn 59 58 60 3 (parallel [
            (set (reg/f:DI 1 dx [orig:103 D.25108 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 D.25107 ] [102])
                    (reg/f:DI 0 ax [329])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:283 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.25107 ] [102]))
        (nil)))
(insn 60 59 61 3 (set (reg:SF 0 ax [330])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:283 129 {*movsf_internal}
     (nil))
(insn 61 60 62 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:103 D.25108 ] [103])
                (const_int 344 [0x158])) [0 _31->te+0 S4 A64])
        (reg:SF 0 ax [330])) ge2fitman_sup.cpp:283 129 {*movsf_internal}
     (nil))
(insn 62 61 63 3 (set (reg:SI 0 ax [331])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:284 90 {*movsi_internal}
     (nil))
(insn 63 62 64 3 (set (reg:DI 0 ax [orig:104 D.25107 ] [104])
        (sign_extend:DI (reg:SI 0 ax [331]))) ge2fitman_sup.cpp:284 142 {*extendsidi2_rex64}
     (nil))
(insn 64 63 816 3 (parallel [
            (set (reg:DI 0 ax [orig:105 D.25107 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:105 D.25107 ] [105])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:284 497 {*ashldi3_1}
     (nil))
(insn 816 64 65 3 (set (reg:DI 1 dx [orig:105 D.25107 ] [105])
        (reg:DI 0 ax [orig:105 D.25107 ] [105])) ge2fitman_sup.cpp:284 89 {*movdi_internal}
     (nil))
(insn 65 816 66 3 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:284 89 {*movdi_internal}
     (nil))
(insn 66 65 67 3 (parallel [
            (set (reg/f:DI 1 dx [orig:106 D.25108 ] [106])
                (plus:DI (reg:DI 1 dx [orig:105 D.25107 ] [105])
                    (reg/f:DI 0 ax [332])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:284 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:105 D.25107 ] [105]))
        (nil)))
(insn 67 66 68 3 (set (reg:SF 0 ax [333])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:284 129 {*movsf_internal}
     (nil))
(insn 68 67 69 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:106 D.25108 ] [106])
                (const_int 348 [0x15c])) [0 _34->tr+0 S4 A32])
        (reg:SF 0 ax [333])) ge2fitman_sup.cpp:284 129 {*movsf_internal}
     (nil))
(insn 69 68 70 3 (set (reg:SI 0 ax [334])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:285 90 {*movsi_internal}
     (nil))
(insn 70 69 71 3 (set (reg:DI 0 ax [orig:107 D.25107 ] [107])
        (sign_extend:DI (reg:SI 0 ax [334]))) ge2fitman_sup.cpp:285 142 {*extendsidi2_rex64}
     (nil))
(insn 71 70 818 3 (parallel [
            (set (reg:DI 0 ax [orig:108 D.25107 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:108 D.25107 ] [108])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:285 497 {*ashldi3_1}
     (nil))
(insn 818 71 72 3 (set (reg:DI 1 dx [orig:108 D.25107 ] [108])
        (reg:DI 0 ax [orig:108 D.25107 ] [108])) ge2fitman_sup.cpp:285 89 {*movdi_internal}
     (nil))
(insn 72 818 73 3 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:285 89 {*movdi_internal}
     (nil))
(insn 73 72 74 3 (parallel [
            (set (reg/f:DI 1 dx [orig:109 D.25108 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 D.25107 ] [108])
                    (reg/f:DI 0 ax [335])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:285 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.25107 ] [108]))
        (nil)))
(insn 74 73 75 3 (set (reg:SF 0 ax [336])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:285 129 {*movsf_internal}
     (nil))
(insn 75 74 76 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:109 D.25108 ] [109])
                (const_int 360 [0x168])) [0 _37->gain+0 S4 A64])
        (reg:SF 0 ax [336])) ge2fitman_sup.cpp:285 129 {*movsf_internal}
     (nil))
(insn 76 75 77 3 (set (reg:SI 0 ax [337])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:286 90 {*movsi_internal}
     (nil))
(insn 77 76 78 3 (set (reg:DI 0 ax [orig:110 D.25107 ] [110])
        (sign_extend:DI (reg:SI 0 ax [337]))) ge2fitman_sup.cpp:286 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 820 3 (parallel [
            (set (reg:DI 0 ax [orig:111 D.25107 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:111 D.25107 ] [111])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:286 497 {*ashldi3_1}
     (nil))
(insn 820 78 79 3 (set (reg:DI 1 dx [orig:111 D.25107 ] [111])
        (reg:DI 0 ax [orig:111 D.25107 ] [111])) ge2fitman_sup.cpp:286 89 {*movdi_internal}
     (nil))
(insn 79 820 80 3 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:286 89 {*movdi_internal}
     (nil))
(insn 80 79 81 3 (parallel [
            (set (reg/f:DI 1 dx [orig:112 D.25108 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 D.25107 ] [111])
                    (reg/f:DI 0 ax [338])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:286 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.25107 ] [111]))
        (nil)))
(insn 81 80 82 3 (set (reg:SF 0 ax [339])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:286 129 {*movsf_internal}
     (nil))
(insn 82 81 83 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:112 D.25108 ] [112])
                (const_int 364 [0x16c])) [0 _40->pos1+0 S4 A32])
        (reg:SF 0 ax [339])) ge2fitman_sup.cpp:286 129 {*movsf_internal}
     (nil))
(insn 83 82 84 3 (set (reg:SI 0 ax [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:287 90 {*movsi_internal}
     (nil))
(insn 84 83 85 3 (set (reg:DI 0 ax [orig:113 D.25107 ] [113])
        (sign_extend:DI (reg:SI 0 ax [340]))) ge2fitman_sup.cpp:287 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 822 3 (parallel [
            (set (reg:DI 0 ax [orig:114 D.25107 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:114 D.25107 ] [114])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:287 497 {*ashldi3_1}
     (nil))
(insn 822 85 86 3 (set (reg:DI 1 dx [orig:114 D.25107 ] [114])
        (reg:DI 0 ax [orig:114 D.25107 ] [114])) ge2fitman_sup.cpp:287 89 {*movdi_internal}
     (nil))
(insn 86 822 87 3 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:287 89 {*movdi_internal}
     (nil))
(insn 87 86 88 3 (parallel [
            (set (reg/f:DI 1 dx [orig:115 D.25108 ] [115])
                (plus:DI (reg:DI 1 dx [orig:114 D.25107 ] [114])
                    (reg/f:DI 0 ax [341])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:287 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.25107 ] [114]))
        (nil)))
(insn 88 87 89 3 (set (reg:SF 0 ax [342])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:287 129 {*movsf_internal}
     (nil))
(insn 89 88 90 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:115 D.25108 ] [115])
                (const_int 368 [0x170])) [0 _43->pos2+0 S4 A64])
        (reg:SF 0 ax [342])) ge2fitman_sup.cpp:287 129 {*movsf_internal}
     (nil))
(insn 90 89 91 3 (set (reg:SI 0 ax [343])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:288 90 {*movsi_internal}
     (nil))
(insn 91 90 92 3 (set (reg:DI 0 ax [orig:116 D.25107 ] [116])
        (sign_extend:DI (reg:SI 0 ax [343]))) ge2fitman_sup.cpp:288 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 824 3 (parallel [
            (set (reg:DI 0 ax [orig:117 D.25107 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:117 D.25107 ] [117])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:288 497 {*ashldi3_1}
     (nil))
(insn 824 92 93 3 (set (reg:DI 1 dx [orig:117 D.25107 ] [117])
        (reg:DI 0 ax [orig:117 D.25107 ] [117])) ge2fitman_sup.cpp:288 89 {*movdi_internal}
     (nil))
(insn 93 824 94 3 (set (reg/f:DI 0 ax [344])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:288 89 {*movdi_internal}
     (nil))
(insn 94 93 95 3 (parallel [
            (set (reg/f:DI 1 dx [orig:118 D.25108 ] [118])
                (plus:DI (reg:DI 1 dx [orig:117 D.25107 ] [117])
                    (reg/f:DI 0 ax [344])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:288 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:117 D.25107 ] [117]))
        (nil)))
(insn 95 94 96 3 (set (reg:SF 0 ax [345])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:288 129 {*movsf_internal}
     (nil))
(insn 96 95 97 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:118 D.25108 ] [118])
                (const_int 372 [0x174])) [0 _46->pos3+0 S4 A32])
        (reg:SF 0 ax [345])) ge2fitman_sup.cpp:288 129 {*movsf_internal}
     (nil))
(insn 97 96 98 3 (set (reg:SI 0 ax [346])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:289 90 {*movsi_internal}
     (nil))
(insn 98 97 99 3 (set (reg:DI 0 ax [orig:119 D.25107 ] [119])
        (sign_extend:DI (reg:SI 0 ax [346]))) ge2fitman_sup.cpp:289 142 {*extendsidi2_rex64}
     (nil))
(insn 99 98 826 3 (parallel [
            (set (reg:DI 0 ax [orig:120 D.25107 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:120 D.25107 ] [120])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:289 497 {*ashldi3_1}
     (nil))
(insn 826 99 100 3 (set (reg:DI 1 dx [orig:120 D.25107 ] [120])
        (reg:DI 0 ax [orig:120 D.25107 ] [120])) ge2fitman_sup.cpp:289 89 {*movdi_internal}
     (nil))
(insn 100 826 101 3 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:289 89 {*movdi_internal}
     (nil))
(insn 101 100 102 3 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.25108 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 D.25107 ] [120])
                    (reg/f:DI 0 ax [347])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:289 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.25107 ] [120]))
        (nil)))
(insn 102 101 103 3 (set (reg:SF 0 ax [348])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:289 129 {*movsf_internal}
     (nil))
(insn 103 102 104 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:121 D.25108 ] [121])
                (const_int 376 [0x178])) [0 _49->vox1+0 S4 A64])
        (reg:SF 0 ax [348])) ge2fitman_sup.cpp:289 129 {*movsf_internal}
     (nil))
(insn 104 103 105 3 (set (reg:SI 0 ax [349])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:290 90 {*movsi_internal}
     (nil))
(insn 105 104 106 3 (set (reg:DI 0 ax [orig:122 D.25107 ] [122])
        (sign_extend:DI (reg:SI 0 ax [349]))) ge2fitman_sup.cpp:290 142 {*extendsidi2_rex64}
     (nil))
(insn 106 105 828 3 (parallel [
            (set (reg:DI 0 ax [orig:123 D.25107 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:123 D.25107 ] [123])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:290 497 {*ashldi3_1}
     (nil))
(insn 828 106 107 3 (set (reg:DI 1 dx [orig:123 D.25107 ] [123])
        (reg:DI 0 ax [orig:123 D.25107 ] [123])) ge2fitman_sup.cpp:290 89 {*movdi_internal}
     (nil))
(insn 107 828 108 3 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:290 89 {*movdi_internal}
     (nil))
(insn 108 107 109 3 (parallel [
            (set (reg/f:DI 1 dx [orig:124 D.25108 ] [124])
                (plus:DI (reg:DI 1 dx [orig:123 D.25107 ] [123])
                    (reg/f:DI 0 ax [350])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:290 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.25107 ] [123]))
        (nil)))
(insn 109 108 110 3 (set (reg:SF 0 ax [351])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:290 129 {*movsf_internal}
     (nil))
(insn 110 109 111 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:124 D.25108 ] [124])
                (const_int 380 [0x17c])) [0 _52->vox2+0 S4 A32])
        (reg:SF 0 ax [351])) ge2fitman_sup.cpp:290 129 {*movsf_internal}
     (nil))
(insn 111 110 112 3 (set (reg:SI 0 ax [352])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:291 90 {*movsi_internal}
     (nil))
(insn 112 111 113 3 (set (reg:DI 0 ax [orig:125 D.25107 ] [125])
        (sign_extend:DI (reg:SI 0 ax [352]))) ge2fitman_sup.cpp:291 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 830 3 (parallel [
            (set (reg:DI 0 ax [orig:126 D.25107 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:126 D.25107 ] [126])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:291 497 {*ashldi3_1}
     (nil))
(insn 830 113 114 3 (set (reg:DI 1 dx [orig:126 D.25107 ] [126])
        (reg:DI 0 ax [orig:126 D.25107 ] [126])) ge2fitman_sup.cpp:291 89 {*movdi_internal}
     (nil))
(insn 114 830 115 3 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:291 89 {*movdi_internal}
     (nil))
(insn 115 114 116 3 (parallel [
            (set (reg/f:DI 1 dx [orig:127 D.25108 ] [127])
                (plus:DI (reg:DI 1 dx [orig:126 D.25107 ] [126])
                    (reg/f:DI 0 ax [353])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:291 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.25107 ] [126]))
        (nil)))
(insn 116 115 117 3 (set (reg:SF 0 ax [354])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:291 129 {*movsf_internal}
     (nil))
(insn 117 116 118 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:127 D.25108 ] [127])
                (const_int 384 [0x180])) [0 _55->vox3+0 S4 A64])
        (reg:SF 0 ax [354])) ge2fitman_sup.cpp:291 129 {*movsf_internal}
     (nil))
(insn 118 117 119 3 (set (reg:SI 0 ax [355])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:292 90 {*movsi_internal}
     (nil))
(insn 119 118 120 3 (set (reg:DI 0 ax [orig:128 D.25107 ] [128])
        (sign_extend:DI (reg:SI 0 ax [355]))) ge2fitman_sup.cpp:292 142 {*extendsidi2_rex64}
     (nil))
(insn 120 119 832 3 (parallel [
            (set (reg:DI 0 ax [orig:129 D.25107 ] [129])
                (ashift:DI (reg:DI 0 ax [orig:129 D.25107 ] [129])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:292 497 {*ashldi3_1}
     (nil))
(insn 832 120 121 3 (set (reg:DI 1 dx [orig:129 D.25107 ] [129])
        (reg:DI 0 ax [orig:129 D.25107 ] [129])) ge2fitman_sup.cpp:292 89 {*movdi_internal}
     (nil))
(insn 121 832 122 3 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:292 89 {*movdi_internal}
     (nil))
(insn 122 121 123 3 (parallel [
            (set (reg/f:DI 1 dx [orig:130 D.25108 ] [130])
                (plus:DI (reg:DI 1 dx [orig:129 D.25107 ] [129])
                    (reg/f:DI 0 ax [356])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:292 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.25107 ] [129]))
        (nil)))
(insn 123 122 124 3 (set (reg:DF 0 ax [357])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S8 A64])) ge2fitman_sup.cpp:292 128 {*movdf_internal}
     (nil))
(insn 124 123 125 3 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [orig:130 D.25108 ] [130])
                (const_int 392 [0x188])) [0 _58->span+0 S8 A64])
        (reg:DF 0 ax [357])) ge2fitman_sup.cpp:292 128 {*movdf_internal}
     (nil))
(insn 125 124 126 3 (set (reg:SI 0 ax [358])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:293 90 {*movsi_internal}
     (nil))
(insn 126 125 127 3 (set (reg:DI 0 ax [orig:131 D.25107 ] [131])
        (sign_extend:DI (reg:SI 0 ax [358]))) ge2fitman_sup.cpp:293 142 {*extendsidi2_rex64}
     (nil))
(insn 127 126 834 3 (parallel [
            (set (reg:DI 0 ax [orig:132 D.25107 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:132 D.25107 ] [132])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:293 497 {*ashldi3_1}
     (nil))
(insn 834 127 128 3 (set (reg:DI 1 dx [orig:132 D.25107 ] [132])
        (reg:DI 0 ax [orig:132 D.25107 ] [132])) ge2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 128 834 129 3 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 129 128 130 3 (parallel [
            (set (reg/f:DI 1 dx [orig:133 D.25108 ] [133])
                (plus:DI (reg:DI 1 dx [orig:132 D.25107 ] [132])
                    (reg/f:DI 0 ax [359])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:293 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:132 D.25107 ] [132]))
        (nil)))
(insn 130 129 131 3 (set (reg:SF 0 ax [360])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:293 129 {*movsf_internal}
     (nil))
(insn 131 130 132 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:133 D.25108 ] [133])
                (const_int 400 [0x190])) [0 _61->vtheta+0 S4 A64])
        (reg:SF 0 ax [360])) ge2fitman_sup.cpp:293 129 {*movsf_internal}
     (nil))
(insn 132 131 133 3 (set (reg:SI 0 ax [361])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:294 90 {*movsi_internal}
     (nil))
(insn 133 132 134 3 (set (reg:DI 0 ax [orig:134 D.25107 ] [134])
        (sign_extend:DI (reg:SI 0 ax [361]))) ge2fitman_sup.cpp:294 142 {*extendsidi2_rex64}
     (nil))
(insn 134 133 836 3 (parallel [
            (set (reg:DI 0 ax [orig:135 D.25107 ] [135])
                (ashift:DI (reg:DI 0 ax [orig:135 D.25107 ] [135])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:294 497 {*ashldi3_1}
     (nil))
(insn 836 134 135 3 (set (reg:DI 1 dx [orig:135 D.25107 ] [135])
        (reg:DI 0 ax [orig:135 D.25107 ] [135])) ge2fitman_sup.cpp:294 89 {*movdi_internal}
     (nil))
(insn 135 836 136 3 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:294 89 {*movdi_internal}
     (nil))
(insn 136 135 137 3 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.25108 ] [136])
                (plus:DI (reg/f:DI 0 ax [362])
                    (reg:DI 1 dx [orig:135 D.25107 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:294 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.25107 ] [135]))
        (nil)))
(insn 137 136 138 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:136 D.25108 ] [136])
                (const_int 508 [0x1fc])) [0 _64->num_channels+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:294 90 {*movsi_internal}
     (nil))
(insn 138 137 786 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:299 90 {*movsi_internal}
     (nil))
(jump_insn 786 138 787 3 (set (pc)
        (label_ref 151)) ge2fitman_sup.cpp:299 636 {jump}
     (nil)
 -> 151)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 787 786 155)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 363 364 365 366
(code_label 155 787 141 4 60 "" [1 uses])
(note 141 155 142 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 4 (set (reg:SI 0 ax [363])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:300 90 {*movsi_internal}
     (nil))
(insn 143 142 144 4 (set (reg:DI 0 ax [orig:138 D.25107 ] [138])
        (sign_extend:DI (reg:SI 0 ax [363]))) ge2fitman_sup.cpp:300 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 838 4 (parallel [
            (set (reg:DI 0 ax [orig:139 D.25107 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:139 D.25107 ] [139])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:300 497 {*ashldi3_1}
     (nil))
(insn 838 144 145 4 (set (reg:DI 1 dx [orig:139 D.25107 ] [139])
        (reg:DI 0 ax [orig:139 D.25107 ] [139])) ge2fitman_sup.cpp:300 89 {*movdi_internal}
     (nil))
(insn 145 838 146 4 (set (reg/f:DI 0 ax [364])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:300 89 {*movdi_internal}
     (nil))
(insn 146 145 147 4 (parallel [
            (set (reg/f:DI 1 dx [orig:140 D.25108 ] [140])
                (plus:DI (reg:DI 1 dx [orig:139 D.25107 ] [139])
                    (reg/f:DI 0 ax [364])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:300 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.25107 ] [139]))
        (nil)))
(insn 147 146 148 4 (set (reg:SI 0 ax [366])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:300 90 {*movsi_internal}
     (nil))
(insn 148 147 149 4 (set (reg:DI 0 ax [365])
        (sign_extend:DI (reg:SI 0 ax [366]))) ge2fitman_sup.cpp:300 142 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 4 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:140 D.25108 ] [140])
                    (reg:DI 0 ax [365]))
                (const_int 388 [0x184])) [0 _69->padding_1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:300 93 {*movqi_internal}
     (nil))
(insn 150 149 151 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:299 220 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 367
(code_label 151 150 152 5 59 "" [1 uses])
(note 152 151 153 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 153 152 154 5 (set (reg:SI 0 ax [367])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:299 90 {*movsi_internal}
     (nil))
(insn 154 153 156 5 (set (reg:DI 0 ax [orig:137 D.25107 ] [137])
        (sign_extend:DI (reg:SI 0 ax [367]))) ge2fitman_sup.cpp:299 142 {*extendsidi2_rex64}
     (nil))
(insn 156 154 157 5 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:137 D.25107 ] [137])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:299 8 {*cmpdi_1}
     (nil))
(jump_insn 157 156 158 5 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 155)
            (pc))) ge2fitman_sup.cpp:299 596 {*jcc_1}
     (nil)
 -> 155)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 158 157 159 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 788 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:304 90 {*movsi_internal}
     (nil))
(jump_insn 788 159 789 6 (set (pc)
        (label_ref 172)) ge2fitman_sup.cpp:304 636 {jump}
     (nil)
 -> 172)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 789 788 176)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 144 368 369 370 371
(code_label 176 789 162 7 62 "" [1 uses])
(note 162 176 163 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 7 (set (reg:SI 0 ax [368])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:305 90 {*movsi_internal}
     (nil))
(insn 164 163 165 7 (set (reg:DI 0 ax [orig:142 D.25107 ] [142])
        (sign_extend:DI (reg:SI 0 ax [368]))) ge2fitman_sup.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 165 164 840 7 (parallel [
            (set (reg:DI 0 ax [orig:143 D.25107 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:143 D.25107 ] [143])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:305 497 {*ashldi3_1}
     (nil))
(insn 840 165 166 7 (set (reg:DI 1 dx [orig:143 D.25107 ] [143])
        (reg:DI 0 ax [orig:143 D.25107 ] [143])) ge2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 166 840 167 7 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 167 166 168 7 (parallel [
            (set (reg/f:DI 1 dx [orig:144 D.25108 ] [144])
                (plus:DI (reg:DI 1 dx [orig:143 D.25107 ] [143])
                    (reg/f:DI 0 ax [369])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:305 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.25107 ] [143]))
        (nil)))
(insn 168 167 169 7 (set (reg:SI 0 ax [371])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:305 90 {*movsi_internal}
     (nil))
(insn 169 168 170 7 (set (reg:DI 0 ax [370])
        (sign_extend:DI (reg:SI 0 ax [371]))) ge2fitman_sup.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 7 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:144 D.25108 ] [144])
                    (reg:DI 0 ax [370]))
                (const_int 4 [0x4])) [0 _75->ex_datetime S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:305 93 {*movqi_internal}
     (nil))
(insn 171 170 172 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:304 220 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 372
(code_label 172 171 173 8 61 "" [1 uses])
(note 173 172 174 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 8 (set (reg:SI 0 ax [372])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:304 90 {*movsi_internal}
     (nil))
(insn 175 174 177 8 (set (reg:DI 0 ax [orig:141 D.25107 ] [141])
        (sign_extend:DI (reg:SI 0 ax [372]))) ge2fitman_sup.cpp:304 142 {*extendsidi2_rex64}
     (nil))
(insn 177 175 178 8 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:141 D.25107 ] [141])
            (const_int 52 [0x34]))) ge2fitman_sup.cpp:304 8 {*cmpdi_1}
     (nil))
(jump_insn 178 177 179 8 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 176)
            (pc))) ge2fitman_sup.cpp:304 596 {*jcc_1}
     (nil)
 -> 176)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 146 147 148 373 374
(note 179 178 180 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 9 (set (reg:SI 0 ax [373])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:307 90 {*movsi_internal}
     (nil))
(insn 181 180 182 9 (set (reg:DI 0 ax [orig:145 D.25107 ] [145])
        (sign_extend:DI (reg:SI 0 ax [373]))) ge2fitman_sup.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 182 181 842 9 (parallel [
            (set (reg:DI 0 ax [orig:146 D.25107 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:146 D.25107 ] [146])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:307 497 {*ashldi3_1}
     (nil))
(insn 842 182 183 9 (set (reg:DI 1 dx [orig:146 D.25107 ] [146])
        (reg:DI 0 ax [orig:146 D.25107 ] [146])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 183 842 184 9 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 184 183 185 9 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.25108 ] [147])
                (plus:DI (reg/f:DI 0 ax [374])
                    (reg:DI 1 dx [orig:146 D.25107 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:307 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:146 D.25107 ] [146]))
        (nil)))
(insn 185 184 186 9 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.25109 ] [148])
                (plus:DI (reg/f:DI 0 ax [orig:147 D.25108 ] [147])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:307 221 {*adddi_1}
     (nil))
(insn 186 185 843 9 (set (reg:DI 2 cx [568])
        (const_int 2334399942965096270 [0x2065746144206f4e])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 843 186 187 9 (set (mem:DI (reg/f:DI 0 ax [orig:148 D.25109 ] [148]) [0 MEM[(void *)_80]+0 S8 A8])
        (reg:DI 2 cx [568])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 187 843 844 9 (set (reg:DI 4 si [569])
        (const_int 7809911822066218561 [0x6c62616c69617641])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 844 187 188 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:148 D.25109 ] [148])
                (const_int 8 [0x8])) [0 MEM[(void *)_80]+8 S8 A8])
        (reg:DI 4 si [569])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 188 844 189 9 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:148 D.25109 ] [148])
                (const_int 16 [0x10])) [0 MEM[(void *)_80]+16 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:307 92 {*movhi_internal}
     (nil))
(insn 189 188 790 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:310 90 {*movsi_internal}
     (nil))
(jump_insn 790 189 791 9 (set (pc)
        (label_ref 202)) ge2fitman_sup.cpp:310 636 {jump}
     (nil)
 -> 202)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 791 790 206)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 152 375 376 377 378
(code_label 206 791 192 10 64 "" [1 uses])
(note 192 206 193 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 193 192 194 10 (set (reg:SI 0 ax [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:311 90 {*movsi_internal}
     (nil))
(insn 194 193 195 10 (set (reg:DI 0 ax [orig:150 D.25107 ] [150])
        (sign_extend:DI (reg:SI 0 ax [375]))) ge2fitman_sup.cpp:311 142 {*extendsidi2_rex64}
     (nil))
(insn 195 194 846 10 (parallel [
            (set (reg:DI 0 ax [orig:151 D.25107 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:151 D.25107 ] [151])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:311 497 {*ashldi3_1}
     (nil))
(insn 846 195 196 10 (set (reg:DI 1 dx [orig:151 D.25107 ] [151])
        (reg:DI 0 ax [orig:151 D.25107 ] [151])) ge2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 196 846 197 10 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 197 196 198 10 (parallel [
            (set (reg/f:DI 1 dx [orig:152 D.25108 ] [152])
                (plus:DI (reg:DI 1 dx [orig:151 D.25107 ] [151])
                    (reg/f:DI 0 ax [376])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:311 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.25107 ] [151]))
        (nil)))
(insn 198 197 199 10 (set (reg:SI 0 ax [378])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:311 90 {*movsi_internal}
     (nil))
(insn 199 198 200 10 (set (reg:DI 0 ax [377])
        (sign_extend:DI (reg:SI 0 ax [378]))) ge2fitman_sup.cpp:311 142 {*extendsidi2_rex64}
     (nil))
(insn 200 199 201 10 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:152 D.25108 ] [152])
                    (reg:DI 0 ax [377]))
                (const_int 56 [0x38])) [0 _85->file_name S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:311 93 {*movqi_internal}
     (nil))
(insn 201 200 202 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:310 220 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 379
(code_label 202 201 203 11 63 "" [1 uses])
(note 203 202 204 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 204 203 205 11 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:310 90 {*movsi_internal}
     (nil))
(insn 205 204 207 11 (set (reg:DI 0 ax [orig:149 D.25107 ] [149])
        (sign_extend:DI (reg:SI 0 ax [379]))) ge2fitman_sup.cpp:310 142 {*extendsidi2_rex64}
     (nil))
(insn 207 205 208 11 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:149 D.25107 ] [149])
            (const_int 260 [0x104]))) ge2fitman_sup.cpp:310 8 {*cmpdi_1}
     (nil))
(jump_insn 208 207 209 11 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) ge2fitman_sup.cpp:310 596 {*jcc_1}
     (nil)
 -> 206)
;;  succ:       10
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 154 155 156 380 381
(note 209 208 210 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 12 (set (reg:SI 0 ax [380])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:313 90 {*movsi_internal}
     (nil))
(insn 211 210 212 12 (set (reg:DI 0 ax [orig:153 D.25107 ] [153])
        (sign_extend:DI (reg:SI 0 ax [380]))) ge2fitman_sup.cpp:313 142 {*extendsidi2_rex64}
     (nil))
(insn 212 211 848 12 (parallel [
            (set (reg:DI 0 ax [orig:154 D.25107 ] [154])
                (ashift:DI (reg:DI 0 ax [orig:154 D.25107 ] [154])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:313 497 {*ashldi3_1}
     (nil))
(insn 848 212 213 12 (set (reg:DI 1 dx [orig:154 D.25107 ] [154])
        (reg:DI 0 ax [orig:154 D.25107 ] [154])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 213 848 214 12 (set (reg/f:DI 0 ax [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 214 213 215 12 (parallel [
            (set (reg/f:DI 0 ax [orig:155 D.25108 ] [155])
                (plus:DI (reg/f:DI 0 ax [381])
                    (reg:DI 1 dx [orig:154 D.25107 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:313 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:154 D.25107 ] [154]))
        (nil)))
(insn 215 214 216 12 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.25110 ] [156])
                (plus:DI (reg/f:DI 0 ax [orig:155 D.25108 ] [155])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:313 221 {*adddi_1}
     (nil))
(insn 216 215 849 12 (set (reg:DI 5 di [572])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 849 216 217 12 (set (mem:DI (reg/f:DI 0 ax [orig:156 D.25110 ] [156]) [0 MEM[(void *)_90]+0 S8 A8])
        (reg:DI 5 di [572])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 217 849 850 12 (set (reg:DI 2 cx [573])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 850 217 218 12 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:156 D.25110 ] [156])
                (const_int 8 [0x8])) [0 MEM[(void *)_90]+8 S8 A8])
        (reg:DI 2 cx [573])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 218 850 219 12 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:156 D.25110 ] [156])
                (const_int 16 [0x10])) [0 MEM[(void *)_90]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:313 90 {*movsi_internal}
     (nil))
(insn 219 218 220 12 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:156 D.25110 ] [156])
                (const_int 20 [0x14])) [0 MEM[(void *)_90]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:313 92 {*movhi_internal}
     (nil))
(insn 220 219 792 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:316 90 {*movsi_internal}
     (nil))
(jump_insn 792 220 793 12 (set (pc)
        (label_ref 233)) ge2fitman_sup.cpp:316 636 {jump}
     (nil)
 -> 233)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 793 792 237)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 160 382 383 384 385
(code_label 237 793 223 13 66 "" [1 uses])
(note 223 237 224 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 13 (set (reg:SI 0 ax [382])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:317 90 {*movsi_internal}
     (nil))
(insn 225 224 226 13 (set (reg:DI 0 ax [orig:158 D.25107 ] [158])
        (sign_extend:DI (reg:SI 0 ax [382]))) ge2fitman_sup.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 226 225 852 13 (parallel [
            (set (reg:DI 0 ax [orig:159 D.25107 ] [159])
                (ashift:DI (reg:DI 0 ax [orig:159 D.25107 ] [159])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:317 497 {*ashldi3_1}
     (nil))
(insn 852 226 227 13 (set (reg:DI 1 dx [orig:159 D.25107 ] [159])
        (reg:DI 0 ax [orig:159 D.25107 ] [159])) ge2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 227 852 228 13 (set (reg/f:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 228 227 229 13 (parallel [
            (set (reg/f:DI 1 dx [orig:160 D.25108 ] [160])
                (plus:DI (reg:DI 1 dx [orig:159 D.25107 ] [159])
                    (reg/f:DI 0 ax [383])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:317 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.25107 ] [159]))
        (nil)))
(insn 229 228 230 13 (set (reg:SI 0 ax [385])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:317 90 {*movsi_internal}
     (nil))
(insn 230 229 231 13 (set (reg:DI 0 ax [384])
        (sign_extend:DI (reg:SI 0 ax [385]))) ge2fitman_sup.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 231 230 232 13 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:160 D.25108 ] [160])
                    (reg:DI 0 ax [384]))
                (const_int 404 [0x194])) [0 _95->hospname S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:317 93 {*movqi_internal}
     (nil))
(insn 232 231 233 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:316 220 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 386
(code_label 233 232 234 14 65 "" [1 uses])
(note 234 233 235 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 14 (set (reg:SI 0 ax [386])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:316 90 {*movsi_internal}
     (nil))
(insn 236 235 238 14 (set (reg:DI 0 ax [orig:157 D.25107 ] [157])
        (sign_extend:DI (reg:SI 0 ax [386]))) ge2fitman_sup.cpp:316 142 {*extendsidi2_rex64}
     (nil))
(insn 238 236 239 14 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:157 D.25107 ] [157])
            (const_int 36 [0x24]))) ge2fitman_sup.cpp:316 8 {*cmpdi_1}
     (nil))
(jump_insn 239 238 240 14 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 237)
            (pc))) ge2fitman_sup.cpp:316 596 {*jcc_1}
     (nil)
 -> 237)
;;  succ:       13
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 161 162 163 164 387 388
(note 240 239 241 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 15 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:319 90 {*movsi_internal}
     (nil))
(insn 242 241 243 15 (set (reg:DI 0 ax [orig:161 D.25107 ] [161])
        (sign_extend:DI (reg:SI 0 ax [387]))) ge2fitman_sup.cpp:319 142 {*extendsidi2_rex64}
     (nil))
(insn 243 242 854 15 (parallel [
            (set (reg:DI 0 ax [orig:162 D.25107 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:162 D.25107 ] [162])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:319 497 {*ashldi3_1}
     (nil))
(insn 854 243 244 15 (set (reg:DI 1 dx [orig:162 D.25107 ] [162])
        (reg:DI 0 ax [orig:162 D.25107 ] [162])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 244 854 245 15 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 245 244 246 15 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.25108 ] [163])
                (plus:DI (reg/f:DI 0 ax [388])
                    (reg:DI 1 dx [orig:162 D.25107 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:319 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.25107 ] [162]))
        (nil)))
(insn 246 245 247 15 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.25111 ] [164])
                (plus:DI (reg/f:DI 0 ax [orig:163 D.25108 ] [163])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:319 221 {*adddi_1}
     (nil))
(insn 247 246 855 15 (set (reg:DI 4 si [576])
        (const_int 7597699493162676046 [0x6970736f48206f4e])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 855 247 248 15 (set (mem:DI (reg/f:DI 0 ax [orig:164 D.25111 ] [164]) [0 MEM[(void *)_100]+0 S8 A8])
        (reg:DI 4 si [576])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 248 855 856 15 (set (reg:DI 5 di [577])
        (const_int 7308604758471500148 [0x656d614e206c6174])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 856 248 249 15 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:164 D.25111 ] [164])
                (const_int 8 [0x8])) [0 MEM[(void *)_100]+8 S8 A8])
        (reg:DI 5 di [577])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 249 856 857 15 (set (reg:DI 2 cx [578])
        (const_int 7089066488320377120 [0x62616c6961764120])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 857 249 250 15 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:164 D.25111 ] [164])
                (const_int 16 [0x10])) [0 MEM[(void *)_100]+16 S8 A8])
        (reg:DI 2 cx [578])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 250 857 251 15 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:164 D.25111 ] [164])
                (const_int 24 [0x18])) [0 MEM[(void *)_100]+24 S2 A8])
        (const_int 25964 [0x656c])) ge2fitman_sup.cpp:319 92 {*movhi_internal}
     (nil))
(insn 251 250 252 15 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:164 D.25111 ] [164])
                (const_int 26 [0x1a])) [0 MEM[(void *)_100]+26 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:319 93 {*movqi_internal}
     (nil))
(insn 252 251 794 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:322 90 {*movsi_internal}
     (nil))
(jump_insn 794 252 795 15 (set (pc)
        (label_ref 265)) ge2fitman_sup.cpp:322 636 {jump}
     (nil)
 -> 265)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 795 794 269)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 167 168 389 390 391 392
(code_label 269 795 255 16 68 "" [1 uses])
(note 255 269 256 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 16 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:323 90 {*movsi_internal}
     (nil))
(insn 257 256 258 16 (set (reg:DI 0 ax [orig:166 D.25107 ] [166])
        (sign_extend:DI (reg:SI 0 ax [389]))) ge2fitman_sup.cpp:323 142 {*extendsidi2_rex64}
     (nil))
(insn 258 257 859 16 (parallel [
            (set (reg:DI 0 ax [orig:167 D.25107 ] [167])
                (ashift:DI (reg:DI 0 ax [orig:167 D.25107 ] [167])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:323 497 {*ashldi3_1}
     (nil))
(insn 859 258 259 16 (set (reg:DI 1 dx [orig:167 D.25107 ] [167])
        (reg:DI 0 ax [orig:167 D.25107 ] [167])) ge2fitman_sup.cpp:323 89 {*movdi_internal}
     (nil))
(insn 259 859 260 16 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:323 89 {*movdi_internal}
     (nil))
(insn 260 259 261 16 (parallel [
            (set (reg/f:DI 1 dx [orig:168 D.25108 ] [168])
                (plus:DI (reg:DI 1 dx [orig:167 D.25107 ] [167])
                    (reg/f:DI 0 ax [390])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:323 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:167 D.25107 ] [167]))
        (nil)))
(insn 261 260 262 16 (set (reg:SI 0 ax [392])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:323 90 {*movsi_internal}
     (nil))
(insn 262 261 263 16 (set (reg:DI 0 ax [391])
        (sign_extend:DI (reg:SI 0 ax [392]))) ge2fitman_sup.cpp:323 142 {*extendsidi2_rex64}
     (nil))
(insn 263 262 264 16 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:168 D.25108 ] [168])
                    (reg:DI 0 ax [391]))
                (const_int 440 [0x1b8])) [0 _105->patname S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:323 93 {*movqi_internal}
     (nil))
(insn 264 263 265 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:322 220 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              15 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165 393
(code_label 265 264 266 17 67 "" [1 uses])
(note 266 265 267 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 17 (set (reg:SI 0 ax [393])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:322 90 {*movsi_internal}
     (nil))
(insn 268 267 270 17 (set (reg:DI 0 ax [orig:165 D.25107 ] [165])
        (sign_extend:DI (reg:SI 0 ax [393]))) ge2fitman_sup.cpp:322 142 {*extendsidi2_rex64}
     (nil))
(insn 270 268 271 17 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:165 D.25107 ] [165])
            (const_int 28 [0x1c]))) ge2fitman_sup.cpp:322 8 {*cmpdi_1}
     (nil))
(jump_insn 271 270 272 17 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 269)
            (pc))) ge2fitman_sup.cpp:322 596 {*jcc_1}
     (nil)
 -> 269)
;;  succ:       16
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169 170 171 172 394 395
(note 272 271 273 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 273 272 274 18 (set (reg:SI 0 ax [394])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:325 90 {*movsi_internal}
     (nil))
(insn 274 273 275 18 (set (reg:DI 0 ax [orig:169 D.25107 ] [169])
        (sign_extend:DI (reg:SI 0 ax [394]))) ge2fitman_sup.cpp:325 142 {*extendsidi2_rex64}
     (nil))
(insn 275 274 861 18 (parallel [
            (set (reg:DI 0 ax [orig:170 D.25107 ] [170])
                (ashift:DI (reg:DI 0 ax [orig:170 D.25107 ] [170])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:325 497 {*ashldi3_1}
     (nil))
(insn 861 275 276 18 (set (reg:DI 1 dx [orig:170 D.25107 ] [170])
        (reg:DI 0 ax [orig:170 D.25107 ] [170])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 276 861 277 18 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 277 276 278 18 (parallel [
            (set (reg/f:DI 0 ax [orig:171 D.25108 ] [171])
                (plus:DI (reg/f:DI 0 ax [395])
                    (reg:DI 1 dx [orig:170 D.25107 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:325 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:170 D.25107 ] [170]))
        (nil)))
(insn 278 277 279 18 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.25112 ] [172])
                (plus:DI (reg/f:DI 0 ax [orig:171 D.25108 ] [171])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:325 221 {*adddi_1}
     (nil))
(insn 279 278 862 18 (set (reg:DI 4 si [581])
        (const_int 7307499831690293070 [0x6569746150206f4e])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 862 279 280 18 (set (mem:DI (reg/f:DI 0 ax [orig:172 D.25112 ] [172]) [0 MEM[(void *)_110]+0 S8 A8])
        (reg:DI 4 si [581])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 280 862 863 18 (set (reg:DI 5 di [582])
        (const_int 2334392246551475310 [0x20656d614e20746e])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 863 280 281 18 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:172 D.25112 ] [172])
                (const_int 8 [0x8])) [0 MEM[(void *)_110]+8 S8 A8])
        (reg:DI 5 di [582])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 281 863 864 18 (set (reg:DI 2 cx [583])
        (const_int 7809911822066218561 [0x6c62616c69617641])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 864 281 282 18 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:172 D.25112 ] [172])
                (const_int 16 [0x10])) [0 MEM[(void *)_110]+16 S8 A8])
        (reg:DI 2 cx [583])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 282 864 283 18 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:172 D.25112 ] [172])
                (const_int 24 [0x18])) [0 MEM[(void *)_110]+24 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:325 92 {*movhi_internal}
     (nil))
(insn 283 282 796 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:328 90 {*movsi_internal}
     (nil))
(jump_insn 796 283 797 18 (set (pc)
        (label_ref 296)) ge2fitman_sup.cpp:328 636 {jump}
     (nil)
 -> 296)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 797 796 300)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 174 175 176 396 397 398 399
(code_label 300 797 286 19 70 "" [1 uses])
(note 286 300 287 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 19 (set (reg:SI 0 ax [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:329 90 {*movsi_internal}
     (nil))
(insn 288 287 289 19 (set (reg:DI 0 ax [orig:174 D.25107 ] [174])
        (sign_extend:DI (reg:SI 0 ax [396]))) ge2fitman_sup.cpp:329 142 {*extendsidi2_rex64}
     (nil))
(insn 289 288 866 19 (parallel [
            (set (reg:DI 0 ax [orig:175 D.25107 ] [175])
                (ashift:DI (reg:DI 0 ax [orig:175 D.25107 ] [175])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:329 497 {*ashldi3_1}
     (nil))
(insn 866 289 290 19 (set (reg:DI 1 dx [orig:175 D.25107 ] [175])
        (reg:DI 0 ax [orig:175 D.25107 ] [175])) ge2fitman_sup.cpp:329 89 {*movdi_internal}
     (nil))
(insn 290 866 291 19 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:329 89 {*movdi_internal}
     (nil))
(insn 291 290 292 19 (parallel [
            (set (reg/f:DI 1 dx [orig:176 D.25108 ] [176])
                (plus:DI (reg:DI 1 dx [orig:175 D.25107 ] [175])
                    (reg/f:DI 0 ax [397])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:329 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.25107 ] [175]))
        (nil)))
(insn 292 291 293 19 (set (reg:SI 0 ax [399])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:329 90 {*movsi_internal}
     (nil))
(insn 293 292 294 19 (set (reg:DI 0 ax [398])
        (sign_extend:DI (reg:SI 0 ax [399]))) ge2fitman_sup.cpp:329 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 19 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:176 D.25108 ] [176])
                    (reg:DI 0 ax [398]))
                (const_int 468 [0x1d4])) [0 _115->psdname S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:329 93 {*movqi_internal}
     (nil))
(insn 295 294 296 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:328 220 {*addsi_1}
     (nil))
;;  succ:       20 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU,DFS_BACK)
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 173 400
(code_label 296 295 297 20 69 "" [1 uses])
(note 297 296 298 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 20 (set (reg:SI 0 ax [400])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:328 90 {*movsi_internal}
     (nil))
(insn 299 298 301 20 (set (reg:DI 0 ax [orig:173 D.25107 ] [173])
        (sign_extend:DI (reg:SI 0 ax [400]))) ge2fitman_sup.cpp:328 142 {*extendsidi2_rex64}
     (nil))
(insn 301 299 302 20 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:173 D.25107 ] [173])
            (const_int 40 [0x28]))) ge2fitman_sup.cpp:328 8 {*cmpdi_1}
     (nil))
(jump_insn 302 301 303 20 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 300)
            (pc))) ge2fitman_sup.cpp:328 596 {*jcc_1}
     (nil)
 -> 300)
;;  succ:       19
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(note 303 302 304 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 21 (set (reg:SI 0 ax [401])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:331 90 {*movsi_internal}
     (nil))
(insn 305 304 306 21 (set (reg:DI 0 ax [orig:177 D.25107 ] [177])
        (sign_extend:DI (reg:SI 0 ax [401]))) ge2fitman_sup.cpp:331 142 {*extendsidi2_rex64}
     (nil))
(insn 306 305 868 21 (parallel [
            (set (reg:DI 0 ax [orig:178 D.25107 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:178 D.25107 ] [178])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:331 497 {*ashldi3_1}
     (nil))
(insn 868 306 307 21 (set (reg:DI 1 dx [orig:178 D.25107 ] [178])
        (reg:DI 0 ax [orig:178 D.25107 ] [178])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 307 868 308 21 (set (reg/f:DI 0 ax [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 308 307 309 21 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.25108 ] [179])
                (plus:DI (reg/f:DI 0 ax [402])
                    (reg:DI 1 dx [orig:178 D.25107 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:331 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:178 D.25107 ] [178]))
        (nil)))
(insn 309 308 310 21 (parallel [
            (set (reg/f:DI 0 ax [orig:180 D.25113 ] [180])
                (plus:DI (reg/f:DI 0 ax [orig:179 D.25108 ] [179])
                    (const_int 468 [0x1d4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:331 221 {*adddi_1}
     (nil))
(insn 310 309 869 21 (set (reg:DI 4 si [586])
        (const_int 7310305871263723342 [0x65736c7550206f4e])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 869 310 311 21 (set (mem:DI (reg/f:DI 0 ax [orig:180 D.25113 ] [180]) [0 MEM[(void *)_120]+0 S8 A8])
        (reg:DI 4 si [586])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 311 869 870 21 (set (reg:DI 5 di [587])
        (const_int 7164775612281082656 [0x636e657571655320])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 870 311 312 21 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:180 D.25113 ] [180])
                (const_int 8 [0x8])) [0 MEM[(void *)_120]+8 S8 A8])
        (reg:DI 5 di [587])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 312 870 871 21 (set (reg:DI 2 cx [588])
        (const_int 4692862332178407525 [0x4120656d614e2065])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 871 312 313 21 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:180 D.25113 ] [180])
                (const_int 16 [0x10])) [0 MEM[(void *)_120]+16 S8 A8])
        (reg:DI 2 cx [588])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 313 871 872 21 (set (reg:DI 4 si [589])
        (const_int 7308324465885667702 [0x656c62616c696176])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 872 313 314 21 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:180 D.25113 ] [180])
                (const_int 24 [0x18])) [0 MEM[(void *)_120]+24 S8 A8])
        (reg:DI 4 si [589])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 314 872 315 21 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:180 D.25113 ] [180])
                (const_int 32 [0x20])) [0 MEM[(void *)_120]+32 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:331 93 {*movqi_internal}
     (nil))
(insn 315 314 316 21 (set (reg:SI 0 ax [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:335 90 {*movsi_internal}
     (nil))
(insn 316 315 317 21 (set (reg:DI 1 dx [orig:181 D.25107 ] [181])
        (sign_extend:DI (reg:SI 0 ax [403]))) ge2fitman_sup.cpp:335 142 {*extendsidi2_rex64}
     (nil))
(insn 317 316 318 21 (set (reg:DI 0 ax [404])
        (reg:DI 1 dx [orig:181 D.25107 ] [181])) ge2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 318 317 319 21 (parallel [
            (set (reg:DI 0 ax [404])
                (ashift:DI (reg:DI 0 ax [404])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 497 {*ashldi3_1}
     (nil))
(insn 319 318 320 21 (parallel [
            (set (reg:DI 0 ax [404])
                (plus:DI (reg:DI 0 ax [404])
                    (reg:DI 1 dx [orig:181 D.25107 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:181 D.25107 ] [181])
            (const_int 9 [0x9]))
        (nil)))
(insn 320 319 321 21 (parallel [
            (set (reg:DI 0 ax [404])
                (ashift:DI (reg:DI 0 ax [404])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 497 {*ashldi3_1}
     (nil))
(insn 321 320 322 21 (parallel [
            (set (reg:DI 0 ax [404])
                (plus:DI (reg:DI 0 ax [404])
                    (reg:DI 1 dx [orig:181 D.25107 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:181 D.25107 ] [181])
            (const_int 19 [0x13]))
        (nil)))
(insn 322 321 324 21 (parallel [
            (set (reg:DI 0 ax [405])
                (ashift:DI (reg:DI 0 ax [404])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 497 {*ashldi3_1}
     (nil))
(insn 324 322 325 21 (set (reg:DI 1 dx [orig:182 D.25107 ] [182])
        (reg:DI 0 ax [404])) ge2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 325 324 326 21 (set (reg/f:DI 0 ax [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 326 325 327 21 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.25114 ] [183])
                (plus:DI (reg/f:DI 0 ax [406])
                    (reg:DI 1 dx [orig:182 D.25107 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.25107 ] [182]))
        (nil)))
(insn 327 326 328 21 (set (mem/j:SI (reg/f:DI 0 ax [orig:183 D.25114 ] [183]) [0 _124->fid_scale+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:335 90 {*movsi_internal}
     (nil))
(insn 328 327 329 21 (set (reg:SI 0 ax [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:336 90 {*movsi_internal}
     (nil))
(insn 329 328 330 21 (set (reg:DI 1 dx [orig:184 D.25107 ] [184])
        (sign_extend:DI (reg:SI 0 ax [407]))) ge2fitman_sup.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 330 329 331 21 (set (reg:DI 0 ax [408])
        (reg:DI 1 dx [orig:184 D.25107 ] [184])) ge2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 331 330 332 21 (parallel [
            (set (reg:DI 0 ax [408])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 332 331 333 21 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg:DI 0 ax [408])
                    (reg:DI 1 dx [orig:184 D.25107 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:184 D.25107 ] [184])
            (const_int 9 [0x9]))
        (nil)))
(insn 333 332 334 21 (parallel [
            (set (reg:DI 0 ax [408])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 334 333 335 21 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg:DI 0 ax [408])
                    (reg:DI 1 dx [orig:184 D.25107 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:184 D.25107 ] [184])
            (const_int 19 [0x13]))
        (nil)))
(insn 335 334 337 21 (parallel [
            (set (reg:DI 0 ax [409])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 337 335 338 21 (set (reg:DI 1 dx [orig:185 D.25107 ] [185])
        (reg:DI 0 ax [408])) ge2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 338 337 339 21 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 339 338 340 21 (parallel [
            (set (reg/f:DI 1 dx [orig:186 D.25114 ] [186])
                (plus:DI (reg:DI 1 dx [orig:185 D.25107 ] [185])
                    (reg/f:DI 0 ax [410])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:185 D.25107 ] [185]))
        (nil)))
(insn 340 339 341 21 (set (reg:SF 0 ax [411])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:336 129 {*movsf_internal}
     (nil))
(insn 341 340 342 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:186 D.25114 ] [186])
                (const_int 4 [0x4])) [0 _127->scale_factor+0 S4 A32])
        (reg:SF 0 ax [411])) ge2fitman_sup.cpp:336 129 {*movsf_internal}
     (nil))
(insn 342 341 343 21 (set (reg:SI 0 ax [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:337 90 {*movsi_internal}
     (nil))
(insn 343 342 344 21 (set (reg:DI 1 dx [orig:187 D.25107 ] [187])
        (sign_extend:DI (reg:SI 0 ax [412]))) ge2fitman_sup.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 344 343 345 21 (set (reg:DI 0 ax [413])
        (reg:DI 1 dx [orig:187 D.25107 ] [187])) ge2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 345 344 346 21 (parallel [
            (set (reg:DI 0 ax [413])
                (ashift:DI (reg:DI 0 ax [413])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 346 345 347 21 (parallel [
            (set (reg:DI 0 ax [413])
                (plus:DI (reg:DI 0 ax [413])
                    (reg:DI 1 dx [orig:187 D.25107 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:187 D.25107 ] [187])
            (const_int 9 [0x9]))
        (nil)))
(insn 347 346 348 21 (parallel [
            (set (reg:DI 0 ax [413])
                (ashift:DI (reg:DI 0 ax [413])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 348 347 349 21 (parallel [
            (set (reg:DI 0 ax [413])
                (plus:DI (reg:DI 0 ax [413])
                    (reg:DI 1 dx [orig:187 D.25107 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:187 D.25107 ] [187])
            (const_int 19 [0x13]))
        (nil)))
(insn 349 348 351 21 (parallel [
            (set (reg:DI 0 ax [414])
                (ashift:DI (reg:DI 0 ax [413])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 351 349 352 21 (set (reg:DI 1 dx [orig:188 D.25107 ] [188])
        (reg:DI 0 ax [413])) ge2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 352 351 353 21 (set (reg/f:DI 0 ax [415])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 353 352 354 21 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.25114 ] [189])
                (plus:DI (reg/f:DI 0 ax [415])
                    (reg:DI 1 dx [orig:188 D.25107 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:188 D.25107 ] [188]))
        (nil)))
(insn 354 353 355 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:189 D.25114 ] [189])
                (const_int 8 [0x8])) [0 _130->scaleby+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:337 90 {*movsi_internal}
     (nil))
(insn 355 354 356 21 (set (reg:SI 0 ax [416])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:338 90 {*movsi_internal}
     (nil))
(insn 356 355 357 21 (set (reg:DI 1 dx [orig:190 D.25107 ] [190])
        (sign_extend:DI (reg:SI 0 ax [416]))) ge2fitman_sup.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 357 356 358 21 (set (reg:DI 0 ax [417])
        (reg:DI 1 dx [orig:190 D.25107 ] [190])) ge2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 358 357 359 21 (parallel [
            (set (reg:DI 0 ax [417])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 359 358 360 21 (parallel [
            (set (reg:DI 0 ax [417])
                (plus:DI (reg:DI 0 ax [417])
                    (reg:DI 1 dx [orig:190 D.25107 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:190 D.25107 ] [190])
            (const_int 9 [0x9]))
        (nil)))
(insn 360 359 361 21 (parallel [
            (set (reg:DI 0 ax [417])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 361 360 362 21 (parallel [
            (set (reg:DI 0 ax [417])
                (plus:DI (reg:DI 0 ax [417])
                    (reg:DI 1 dx [orig:190 D.25107 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:190 D.25107 ] [190])
            (const_int 19 [0x13]))
        (nil)))
(insn 362 361 364 21 (parallel [
            (set (reg:DI 0 ax [418])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 364 362 365 21 (set (reg:DI 1 dx [orig:191 D.25107 ] [191])
        (reg:DI 0 ax [417])) ge2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 365 364 366 21 (set (reg/f:DI 0 ax [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 366 365 367 21 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.25114 ] [192])
                (plus:DI (reg/f:DI 0 ax [419])
                    (reg:DI 1 dx [orig:191 D.25107 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:191 D.25107 ] [191]))
        (nil)))
(insn 367 366 368 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:192 D.25114 ] [192])
                (const_int 12 [0xc])) [0 _133->pre_ecc+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:338 90 {*movsi_internal}
     (nil))
(insn 368 367 369 21 (set (reg:SI 0 ax [420])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:339 90 {*movsi_internal}
     (nil))
(insn 369 368 370 21 (set (reg:DI 1 dx [orig:193 D.25107 ] [193])
        (sign_extend:DI (reg:SI 0 ax [420]))) ge2fitman_sup.cpp:339 142 {*extendsidi2_rex64}
     (nil))
(insn 370 369 371 21 (set (reg:DI 0 ax [421])
        (reg:DI 1 dx [orig:193 D.25107 ] [193])) ge2fitman_sup.cpp:339 89 {*movdi_internal}
     (nil))
(insn 371 370 372 21 (parallel [
            (set (reg:DI 0 ax [421])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 497 {*ashldi3_1}
     (nil))
(insn 372 371 373 21 (parallel [
            (set (reg:DI 0 ax [421])
                (plus:DI (reg:DI 0 ax [421])
                    (reg:DI 1 dx [orig:193 D.25107 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:193 D.25107 ] [193])
            (const_int 9 [0x9]))
        (nil)))
(insn 373 372 374 21 (parallel [
            (set (reg:DI 0 ax [421])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 497 {*ashldi3_1}
     (nil))
(insn 374 373 375 21 (parallel [
            (set (reg:DI 0 ax [421])
                (plus:DI (reg:DI 0 ax [421])
                    (reg:DI 1 dx [orig:193 D.25107 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:193 D.25107 ] [193])
            (const_int 19 [0x13]))
        (nil)))
(insn 375 374 377 21 (parallel [
            (set (reg:DI 0 ax [422])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 497 {*ashldi3_1}
     (nil))
(insn 377 375 378 21 (set (reg:DI 1 dx [orig:194 D.25107 ] [194])
        (reg:DI 0 ax [421])) ge2fitman_sup.cpp:339 89 {*movdi_internal}
     (nil))
(insn 378 377 379 21 (set (reg/f:DI 0 ax [423])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:339 89 {*movdi_internal}
     (nil))
(insn 379 378 380 21 (parallel [
            (set (reg/f:DI 0 ax [orig:195 D.25114 ] [195])
                (plus:DI (reg/f:DI 0 ax [423])
                    (reg:DI 1 dx [orig:194 D.25107 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:194 D.25107 ] [194]))
        (nil)))
(insn 380 379 381 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:195 D.25114 ] [195])
                (const_int 16 [0x10])) [0 _136->bc+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:339 90 {*movsi_internal}
     (nil))
(insn 381 380 382 21 (set (reg:SI 0 ax [424])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:340 90 {*movsi_internal}
     (nil))
(insn 382 381 383 21 (set (reg:DI 1 dx [orig:196 D.25107 ] [196])
        (sign_extend:DI (reg:SI 0 ax [424]))) ge2fitman_sup.cpp:340 142 {*extendsidi2_rex64}
     (nil))
(insn 383 382 384 21 (set (reg:DI 0 ax [425])
        (reg:DI 1 dx [orig:196 D.25107 ] [196])) ge2fitman_sup.cpp:340 89 {*movdi_internal}
     (nil))
(insn 384 383 385 21 (parallel [
            (set (reg:DI 0 ax [425])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 497 {*ashldi3_1}
     (nil))
(insn 385 384 386 21 (parallel [
            (set (reg:DI 0 ax [425])
                (plus:DI (reg:DI 0 ax [425])
                    (reg:DI 1 dx [orig:196 D.25107 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:196 D.25107 ] [196])
            (const_int 9 [0x9]))
        (nil)))
(insn 386 385 387 21 (parallel [
            (set (reg:DI 0 ax [425])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 497 {*ashldi3_1}
     (nil))
(insn 387 386 388 21 (parallel [
            (set (reg:DI 0 ax [425])
                (plus:DI (reg:DI 0 ax [425])
                    (reg:DI 1 dx [orig:196 D.25107 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:196 D.25107 ] [196])
            (const_int 19 [0x13]))
        (nil)))
(insn 388 387 390 21 (parallel [
            (set (reg:DI 0 ax [426])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 497 {*ashldi3_1}
     (nil))
(insn 390 388 391 21 (set (reg:DI 1 dx [orig:197 D.25107 ] [197])
        (reg:DI 0 ax [425])) ge2fitman_sup.cpp:340 89 {*movdi_internal}
     (nil))
(insn 391 390 392 21 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:340 89 {*movdi_internal}
     (nil))
(insn 392 391 393 21 (parallel [
            (set (reg/f:DI 0 ax [orig:198 D.25114 ] [198])
                (plus:DI (reg/f:DI 0 ax [427])
                    (reg:DI 1 dx [orig:197 D.25107 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:197 D.25107 ] [197]))
        (nil)))
(insn 393 392 394 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.25114 ] [198])
                (const_int 20 [0x14])) [0 _139->file_type+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:340 90 {*movsi_internal}
     (nil))
(insn 394 393 395 21 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:341 90 {*movsi_internal}
     (nil))
(insn 395 394 396 21 (set (reg:DI 1 dx [orig:199 D.25107 ] [199])
        (sign_extend:DI (reg:SI 0 ax [428]))) ge2fitman_sup.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 396 395 397 21 (set (reg:DI 0 ax [429])
        (reg:DI 1 dx [orig:199 D.25107 ] [199])) ge2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 397 396 398 21 (parallel [
            (set (reg:DI 0 ax [429])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 398 397 399 21 (parallel [
            (set (reg:DI 0 ax [429])
                (plus:DI (reg:DI 0 ax [429])
                    (reg:DI 1 dx [orig:199 D.25107 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:199 D.25107 ] [199])
            (const_int 9 [0x9]))
        (nil)))
(insn 399 398 400 21 (parallel [
            (set (reg:DI 0 ax [429])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 400 399 401 21 (parallel [
            (set (reg:DI 0 ax [429])
                (plus:DI (reg:DI 0 ax [429])
                    (reg:DI 1 dx [orig:199 D.25107 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:199 D.25107 ] [199])
            (const_int 19 [0x13]))
        (nil)))
(insn 401 400 403 21 (parallel [
            (set (reg:DI 0 ax [430])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 403 401 404 21 (set (reg:DI 1 dx [orig:200 D.25107 ] [200])
        (reg:DI 0 ax [429])) ge2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 404 403 405 21 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 405 404 406 21 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.25114 ] [201])
                (plus:DI (reg/f:DI 0 ax [431])
                    (reg:DI 1 dx [orig:200 D.25107 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:200 D.25107 ] [200]))
        (nil)))
(insn 406 405 407 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:201 D.25114 ] [201])
                (const_int 24 [0x18])) [0 _142->data_zero_fill+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:341 90 {*movsi_internal}
     (nil))
(insn 407 406 408 21 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:342 90 {*movsi_internal}
     (nil))
(insn 408 407 409 21 (set (reg:DI 1 dx [orig:202 D.25107 ] [202])
        (sign_extend:DI (reg:SI 0 ax [432]))) ge2fitman_sup.cpp:342 142 {*extendsidi2_rex64}
     (nil))
(insn 409 408 410 21 (set (reg:DI 0 ax [433])
        (reg:DI 1 dx [orig:202 D.25107 ] [202])) ge2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 410 409 411 21 (parallel [
            (set (reg:DI 0 ax [433])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 497 {*ashldi3_1}
     (nil))
(insn 411 410 412 21 (parallel [
            (set (reg:DI 0 ax [433])
                (plus:DI (reg:DI 0 ax [433])
                    (reg:DI 1 dx [orig:202 D.25107 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:202 D.25107 ] [202])
            (const_int 9 [0x9]))
        (nil)))
(insn 412 411 413 21 (parallel [
            (set (reg:DI 0 ax [433])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 497 {*ashldi3_1}
     (nil))
(insn 413 412 414 21 (parallel [
            (set (reg:DI 0 ax [433])
                (plus:DI (reg:DI 0 ax [433])
                    (reg:DI 1 dx [orig:202 D.25107 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:202 D.25107 ] [202])
            (const_int 19 [0x13]))
        (nil)))
(insn 414 413 416 21 (parallel [
            (set (reg:DI 0 ax [434])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 497 {*ashldi3_1}
     (nil))
(insn 416 414 417 21 (set (reg:DI 1 dx [orig:203 D.25107 ] [203])
        (reg:DI 0 ax [433])) ge2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 417 416 418 21 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 418 417 419 21 (parallel [
            (set (reg/f:DI 1 dx [orig:204 D.25114 ] [204])
                (plus:DI (reg:DI 1 dx [orig:203 D.25107 ] [203])
                    (reg/f:DI 0 ax [435])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:203 D.25107 ] [203]))
        (nil)))
(insn 419 418 420 21 (set (reg:SF 0 ax [436])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:342 129 {*movsf_internal}
     (nil))
(insn 420 419 421 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:204 D.25114 ] [204])
                (const_int 28 [0x1c])) [0 _145->comp_filter+0 S4 A32])
        (reg:SF 0 ax [436])) ge2fitman_sup.cpp:342 129 {*movsf_internal}
     (nil))
(insn 421 420 422 21 (set (reg:SI 0 ax [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:343 90 {*movsi_internal}
     (nil))
(insn 422 421 423 21 (set (reg:DI 1 dx [orig:205 D.25107 ] [205])
        (sign_extend:DI (reg:SI 0 ax [437]))) ge2fitman_sup.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 423 422 424 21 (set (reg:DI 0 ax [438])
        (reg:DI 1 dx [orig:205 D.25107 ] [205])) ge2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 424 423 425 21 (parallel [
            (set (reg:DI 0 ax [438])
                (ashift:DI (reg:DI 0 ax [438])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 497 {*ashldi3_1}
     (nil))
(insn 425 424 426 21 (parallel [
            (set (reg:DI 0 ax [438])
                (plus:DI (reg:DI 0 ax [438])
                    (reg:DI 1 dx [orig:205 D.25107 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:205 D.25107 ] [205])
            (const_int 9 [0x9]))
        (nil)))
(insn 426 425 427 21 (parallel [
            (set (reg:DI 0 ax [438])
                (ashift:DI (reg:DI 0 ax [438])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 497 {*ashldi3_1}
     (nil))
(insn 427 426 428 21 (parallel [
            (set (reg:DI 0 ax [438])
                (plus:DI (reg:DI 0 ax [438])
                    (reg:DI 1 dx [orig:205 D.25107 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:205 D.25107 ] [205])
            (const_int 19 [0x13]))
        (nil)))
(insn 428 427 430 21 (parallel [
            (set (reg:DI 0 ax [439])
                (ashift:DI (reg:DI 0 ax [438])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 497 {*ashldi3_1}
     (nil))
(insn 430 428 431 21 (set (reg:DI 1 dx [orig:206 D.25107 ] [206])
        (reg:DI 0 ax [438])) ge2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 431 430 432 21 (set (reg/f:DI 0 ax [440])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 432 431 433 21 (parallel [
            (set (reg/f:DI 0 ax [orig:207 D.25114 ] [207])
                (plus:DI (reg/f:DI 0 ax [440])
                    (reg:DI 1 dx [orig:206 D.25107 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:206 D.25107 ] [206]))
        (nil)))
(insn 433 432 434 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:207 D.25114 ] [207])
                (const_int 32 [0x20])) [0 _148->max_normalize+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:343 90 {*movsi_internal}
     (nil))
(insn 434 433 435 21 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:344 90 {*movsi_internal}
     (nil))
(insn 435 434 436 21 (set (reg:DI 1 dx [orig:208 D.25107 ] [208])
        (sign_extend:DI (reg:SI 0 ax [441]))) ge2fitman_sup.cpp:344 142 {*extendsidi2_rex64}
     (nil))
(insn 436 435 437 21 (set (reg:DI 0 ax [442])
        (reg:DI 1 dx [orig:208 D.25107 ] [208])) ge2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 437 436 438 21 (parallel [
            (set (reg:DI 0 ax [442])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 497 {*ashldi3_1}
     (nil))
(insn 438 437 439 21 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg:DI 0 ax [442])
                    (reg:DI 1 dx [orig:208 D.25107 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:208 D.25107 ] [208])
            (const_int 9 [0x9]))
        (nil)))
(insn 439 438 440 21 (parallel [
            (set (reg:DI 0 ax [442])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 497 {*ashldi3_1}
     (nil))
(insn 440 439 441 21 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg:DI 0 ax [442])
                    (reg:DI 1 dx [orig:208 D.25107 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:208 D.25107 ] [208])
            (const_int 19 [0x13]))
        (nil)))
(insn 441 440 443 21 (parallel [
            (set (reg:DI 0 ax [443])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 497 {*ashldi3_1}
     (nil))
(insn 443 441 444 21 (set (reg:DI 1 dx [orig:209 D.25107 ] [209])
        (reg:DI 0 ax [442])) ge2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 444 443 445 21 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 445 444 446 21 (parallel [
            (set (reg/f:DI 0 ax [orig:210 D.25114 ] [210])
                (plus:DI (reg/f:DI 0 ax [444])
                    (reg:DI 1 dx [orig:209 D.25107 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:209 D.25107 ] [209]))
        (nil)))
(insn 446 445 447 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:210 D.25114 ] [210])
                (const_int 36 [0x24])) [0 _151->pre_quality+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:344 90 {*movsi_internal}
     (nil))
(insn 447 446 448 21 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:345 90 {*movsi_internal}
     (nil))
(insn 448 447 449 21 (set (reg:DI 1 dx [orig:211 D.25107 ] [211])
        (sign_extend:DI (reg:SI 0 ax [445]))) ge2fitman_sup.cpp:345 142 {*extendsidi2_rex64}
     (nil))
(insn 449 448 450 21 (set (reg:DI 0 ax [446])
        (reg:DI 1 dx [orig:211 D.25107 ] [211])) ge2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 450 449 451 21 (parallel [
            (set (reg:DI 0 ax [446])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 497 {*ashldi3_1}
     (nil))
(insn 451 450 452 21 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg:DI 0 ax [446])
                    (reg:DI 1 dx [orig:211 D.25107 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:211 D.25107 ] [211])
            (const_int 9 [0x9]))
        (nil)))
(insn 452 451 453 21 (parallel [
            (set (reg:DI 0 ax [446])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 497 {*ashldi3_1}
     (nil))
(insn 453 452 454 21 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg:DI 0 ax [446])
                    (reg:DI 1 dx [orig:211 D.25107 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:211 D.25107 ] [211])
            (const_int 19 [0x13]))
        (nil)))
(insn 454 453 456 21 (parallel [
            (set (reg:DI 0 ax [447])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 497 {*ashldi3_1}
     (nil))
(insn 456 454 457 21 (set (reg:DI 1 dx [orig:212 D.25107 ] [212])
        (reg:DI 0 ax [446])) ge2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 457 456 458 21 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 458 457 459 21 (parallel [
            (set (reg/f:DI 0 ax [orig:213 D.25114 ] [213])
                (plus:DI (reg/f:DI 0 ax [448])
                    (reg:DI 1 dx [orig:212 D.25107 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:212 D.25107 ] [212]))
        (nil)))
(insn 459 458 460 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:213 D.25114 ] [213])
                (const_int 40 [0x28])) [0 _154->pre_quecc+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:345 90 {*movsi_internal}
     (nil))
(insn 460 459 461 21 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:346 90 {*movsi_internal}
     (nil))
(insn 461 460 462 21 (set (reg:DI 1 dx [orig:214 D.25107 ] [214])
        (sign_extend:DI (reg:SI 0 ax [449]))) ge2fitman_sup.cpp:346 142 {*extendsidi2_rex64}
     (nil))
(insn 462 461 463 21 (set (reg:DI 0 ax [450])
        (reg:DI 1 dx [orig:214 D.25107 ] [214])) ge2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 463 462 464 21 (parallel [
            (set (reg:DI 0 ax [450])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 497 {*ashldi3_1}
     (nil))
(insn 464 463 465 21 (parallel [
            (set (reg:DI 0 ax [450])
                (plus:DI (reg:DI 0 ax [450])
                    (reg:DI 1 dx [orig:214 D.25107 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:214 D.25107 ] [214])
            (const_int 9 [0x9]))
        (nil)))
(insn 465 464 466 21 (parallel [
            (set (reg:DI 0 ax [450])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 497 {*ashldi3_1}
     (nil))
(insn 466 465 467 21 (parallel [
            (set (reg:DI 0 ax [450])
                (plus:DI (reg:DI 0 ax [450])
                    (reg:DI 1 dx [orig:214 D.25107 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:214 D.25107 ] [214])
            (const_int 19 [0x13]))
        (nil)))
(insn 467 466 469 21 (parallel [
            (set (reg:DI 0 ax [451])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 497 {*ashldi3_1}
     (nil))
(insn 469 467 470 21 (set (reg:DI 1 dx [orig:215 D.25107 ] [215])
        (reg:DI 0 ax [450])) ge2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 470 469 471 21 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 471 470 472 21 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.25114 ] [216])
                (plus:DI (reg/f:DI 0 ax [452])
                    (reg:DI 1 dx [orig:215 D.25107 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:215 D.25107 ] [215]))
        (nil)))
(insn 472 471 473 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:216 D.25114 ] [216])
                (const_int 44 [0x2c])) [0 _157->pre_quecc_points+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:346 90 {*movsi_internal}
     (nil))
(insn 473 472 474 21 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:347 90 {*movsi_internal}
     (nil))
(insn 474 473 475 21 (set (reg:DI 1 dx [orig:217 D.25107 ] [217])
        (sign_extend:DI (reg:SI 0 ax [453]))) ge2fitman_sup.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 475 474 476 21 (set (reg:DI 0 ax [454])
        (reg:DI 1 dx [orig:217 D.25107 ] [217])) ge2fitman_sup.cpp:347 89 {*movdi_internal}
     (nil))
(insn 476 475 477 21 (parallel [
            (set (reg:DI 0 ax [454])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 497 {*ashldi3_1}
     (nil))
(insn 477 476 478 21 (parallel [
            (set (reg:DI 0 ax [454])
                (plus:DI (reg:DI 0 ax [454])
                    (reg:DI 1 dx [orig:217 D.25107 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:217 D.25107 ] [217])
            (const_int 9 [0x9]))
        (nil)))
(insn 478 477 479 21 (parallel [
            (set (reg:DI 0 ax [454])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 497 {*ashldi3_1}
     (nil))
(insn 479 478 480 21 (parallel [
            (set (reg:DI 0 ax [454])
                (plus:DI (reg:DI 0 ax [454])
                    (reg:DI 1 dx [orig:217 D.25107 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:217 D.25107 ] [217])
            (const_int 19 [0x13]))
        (nil)))
(insn 480 479 482 21 (parallel [
            (set (reg:DI 0 ax [455])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 497 {*ashldi3_1}
     (nil))
(insn 482 480 483 21 (set (reg:DI 1 dx [orig:218 D.25107 ] [218])
        (reg:DI 0 ax [454])) ge2fitman_sup.cpp:347 89 {*movdi_internal}
     (nil))
(insn 483 482 484 21 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:347 89 {*movdi_internal}
     (nil))
(insn 484 483 485 21 (parallel [
            (set (reg/f:DI 1 dx [orig:219 D.25114 ] [219])
                (plus:DI (reg:DI 1 dx [orig:218 D.25107 ] [218])
                    (reg/f:DI 0 ax [456])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.25107 ] [218]))
        (nil)))
(insn 485 484 486 21 (set (reg:SF 0 ax [457])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:347 129 {*movsf_internal}
     (nil))
(insn 486 485 487 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:219 D.25114 ] [219])
                (const_int 48 [0x30])) [0 _160->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [457])) ge2fitman_sup.cpp:347 129 {*movsf_internal}
     (nil))
(insn 487 486 488 21 (set (reg:SI 0 ax [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:348 90 {*movsi_internal}
     (nil))
(insn 488 487 489 21 (set (reg:DI 1 dx [orig:220 D.25107 ] [220])
        (sign_extend:DI (reg:SI 0 ax [458]))) ge2fitman_sup.cpp:348 142 {*extendsidi2_rex64}
     (nil))
(insn 489 488 490 21 (set (reg:DI 0 ax [459])
        (reg:DI 1 dx [orig:220 D.25107 ] [220])) ge2fitman_sup.cpp:348 89 {*movdi_internal}
     (nil))
(insn 490 489 491 21 (parallel [
            (set (reg:DI 0 ax [459])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 497 {*ashldi3_1}
     (nil))
(insn 491 490 492 21 (parallel [
            (set (reg:DI 0 ax [459])
                (plus:DI (reg:DI 0 ax [459])
                    (reg:DI 1 dx [orig:220 D.25107 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:220 D.25107 ] [220])
            (const_int 9 [0x9]))
        (nil)))
(insn 492 491 493 21 (parallel [
            (set (reg:DI 0 ax [459])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 497 {*ashldi3_1}
     (nil))
(insn 493 492 494 21 (parallel [
            (set (reg:DI 0 ax [459])
                (plus:DI (reg:DI 0 ax [459])
                    (reg:DI 1 dx [orig:220 D.25107 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:220 D.25107 ] [220])
            (const_int 19 [0x13]))
        (nil)))
(insn 494 493 496 21 (parallel [
            (set (reg:DI 0 ax [460])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 497 {*ashldi3_1}
     (nil))
(insn 496 494 497 21 (set (reg:DI 1 dx [orig:221 D.25107 ] [221])
        (reg:DI 0 ax [459])) ge2fitman_sup.cpp:348 89 {*movdi_internal}
     (nil))
(insn 497 496 498 21 (set (reg/f:DI 0 ax [461])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:348 89 {*movdi_internal}
     (nil))
(insn 498 497 499 21 (parallel [
            (set (reg/f:DI 0 ax [orig:222 D.25114 ] [222])
                (plus:DI (reg/f:DI 0 ax [461])
                    (reg:DI 1 dx [orig:221 D.25107 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:221 D.25107 ] [221]))
        (nil)))
(insn 499 498 500 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:222 D.25114 ] [222])
                (const_int 52 [0x34])) [0 _163->pre_quecc_if+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:348 90 {*movsi_internal}
     (nil))
(insn 500 499 501 21 (set (reg:SI 0 ax [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:349 90 {*movsi_internal}
     (nil))
(insn 501 500 502 21 (set (reg:DI 1 dx [orig:223 D.25107 ] [223])
        (sign_extend:DI (reg:SI 0 ax [462]))) ge2fitman_sup.cpp:349 142 {*extendsidi2_rex64}
     (nil))
(insn 502 501 503 21 (set (reg:DI 0 ax [463])
        (reg:DI 1 dx [orig:223 D.25107 ] [223])) ge2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 503 502 504 21 (parallel [
            (set (reg:DI 0 ax [463])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 497 {*ashldi3_1}
     (nil))
(insn 504 503 505 21 (parallel [
            (set (reg:DI 0 ax [463])
                (plus:DI (reg:DI 0 ax [463])
                    (reg:DI 1 dx [orig:223 D.25107 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:223 D.25107 ] [223])
            (const_int 9 [0x9]))
        (nil)))
(insn 505 504 506 21 (parallel [
            (set (reg:DI 0 ax [463])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 497 {*ashldi3_1}
     (nil))
(insn 506 505 507 21 (parallel [
            (set (reg:DI 0 ax [463])
                (plus:DI (reg:DI 0 ax [463])
                    (reg:DI 1 dx [orig:223 D.25107 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:223 D.25107 ] [223])
            (const_int 19 [0x13]))
        (nil)))
(insn 507 506 509 21 (parallel [
            (set (reg:DI 0 ax [464])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 497 {*ashldi3_1}
     (nil))
(insn 509 507 510 21 (set (reg:DI 1 dx [orig:224 D.25107 ] [224])
        (reg:DI 0 ax [463])) ge2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 510 509 511 21 (set (reg/f:DI 0 ax [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 511 510 512 21 (parallel [
            (set (reg/f:DI 0 ax [orig:225 D.25114 ] [225])
                (plus:DI (reg/f:DI 0 ax [465])
                    (reg:DI 1 dx [orig:224 D.25107 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:224 D.25107 ] [224]))
        (nil)))
(insn 512 511 513 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:225 D.25114 ] [225])
                (const_int 56 [0x38])) [0 _166->input_file_type+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:349 90 {*movsi_internal}
     (nil))
(insn 513 512 514 21 (set (reg:SI 0 ax [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:350 90 {*movsi_internal}
     (nil))
(insn 514 513 515 21 (set (reg:DI 1 dx [orig:226 D.25107 ] [226])
        (sign_extend:DI (reg:SI 0 ax [466]))) ge2fitman_sup.cpp:350 142 {*extendsidi2_rex64}
     (nil))
(insn 515 514 516 21 (set (reg:DI 0 ax [467])
        (reg:DI 1 dx [orig:226 D.25107 ] [226])) ge2fitman_sup.cpp:350 89 {*movdi_internal}
     (nil))
(insn 516 515 517 21 (parallel [
            (set (reg:DI 0 ax [467])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 497 {*ashldi3_1}
     (nil))
(insn 517 516 518 21 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg:DI 0 ax [467])
                    (reg:DI 1 dx [orig:226 D.25107 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:226 D.25107 ] [226])
            (const_int 9 [0x9]))
        (nil)))
(insn 518 517 519 21 (parallel [
            (set (reg:DI 0 ax [467])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 497 {*ashldi3_1}
     (nil))
(insn 519 518 520 21 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg:DI 0 ax [467])
                    (reg:DI 1 dx [orig:226 D.25107 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:226 D.25107 ] [226])
            (const_int 19 [0x13]))
        (nil)))
(insn 520 519 522 21 (parallel [
            (set (reg:DI 0 ax [468])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 497 {*ashldi3_1}
     (nil))
(insn 522 520 523 21 (set (reg:DI 1 dx [orig:227 D.25107 ] [227])
        (reg:DI 0 ax [467])) ge2fitman_sup.cpp:350 89 {*movdi_internal}
     (nil))
(insn 523 522 524 21 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:350 89 {*movdi_internal}
     (nil))
(insn 524 523 525 21 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.25114 ] [228])
                (plus:DI (reg/f:DI 0 ax [469])
                    (reg:DI 1 dx [orig:227 D.25107 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:227 D.25107 ] [227]))
        (nil)))
(insn 525 524 526 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:228 D.25114 ] [228])
                (const_int 60 [0x3c])) [0 _169->ref_file_argument+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:350 90 {*movsi_internal}
     (nil))
(insn 526 525 527 21 (set (reg:SI 0 ax [470])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:351 90 {*movsi_internal}
     (nil))
(insn 527 526 528 21 (set (reg:DI 1 dx [orig:229 D.25107 ] [229])
        (sign_extend:DI (reg:SI 0 ax [470]))) ge2fitman_sup.cpp:351 142 {*extendsidi2_rex64}
     (nil))
(insn 528 527 529 21 (set (reg:DI 0 ax [471])
        (reg:DI 1 dx [orig:229 D.25107 ] [229])) ge2fitman_sup.cpp:351 89 {*movdi_internal}
     (nil))
(insn 529 528 530 21 (parallel [
            (set (reg:DI 0 ax [471])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 497 {*ashldi3_1}
     (nil))
(insn 530 529 531 21 (parallel [
            (set (reg:DI 0 ax [471])
                (plus:DI (reg:DI 0 ax [471])
                    (reg:DI 1 dx [orig:229 D.25107 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:229 D.25107 ] [229])
            (const_int 9 [0x9]))
        (nil)))
(insn 531 530 532 21 (parallel [
            (set (reg:DI 0 ax [471])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 497 {*ashldi3_1}
     (nil))
(insn 532 531 533 21 (parallel [
            (set (reg:DI 0 ax [471])
                (plus:DI (reg:DI 0 ax [471])
                    (reg:DI 1 dx [orig:229 D.25107 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:229 D.25107 ] [229])
            (const_int 19 [0x13]))
        (nil)))
(insn 533 532 535 21 (parallel [
            (set (reg:DI 0 ax [472])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 497 {*ashldi3_1}
     (nil))
(insn 535 533 536 21 (set (reg:DI 1 dx [orig:230 D.25107 ] [230])
        (reg:DI 0 ax [471])) ge2fitman_sup.cpp:351 89 {*movdi_internal}
     (nil))
(insn 536 535 537 21 (set (reg/f:DI 0 ax [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:351 89 {*movdi_internal}
     (nil))
(insn 537 536 538 21 (parallel [
            (set (reg/f:DI 0 ax [orig:231 D.25114 ] [231])
                (plus:DI (reg/f:DI 0 ax [473])
                    (reg:DI 1 dx [orig:230 D.25107 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:230 D.25107 ] [230]))
        (nil)))
(insn 538 537 539 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:231 D.25114 ] [231])
                (const_int 64 [0x40])) [0 _172->csi_reorder+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:351 90 {*movsi_internal}
     (nil))
(insn 539 538 540 21 (set (reg:SI 0 ax [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:352 90 {*movsi_internal}
     (nil))
(insn 540 539 541 21 (set (reg:DI 1 dx [orig:232 D.25107 ] [232])
        (sign_extend:DI (reg:SI 0 ax [474]))) ge2fitman_sup.cpp:352 142 {*extendsidi2_rex64}
     (nil))
(insn 541 540 542 21 (set (reg:DI 0 ax [475])
        (reg:DI 1 dx [orig:232 D.25107 ] [232])) ge2fitman_sup.cpp:352 89 {*movdi_internal}
     (nil))
(insn 542 541 543 21 (parallel [
            (set (reg:DI 0 ax [475])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 497 {*ashldi3_1}
     (nil))
(insn 543 542 544 21 (parallel [
            (set (reg:DI 0 ax [475])
                (plus:DI (reg:DI 0 ax [475])
                    (reg:DI 1 dx [orig:232 D.25107 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:232 D.25107 ] [232])
            (const_int 9 [0x9]))
        (nil)))
(insn 544 543 545 21 (parallel [
            (set (reg:DI 0 ax [475])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 497 {*ashldi3_1}
     (nil))
(insn 545 544 546 21 (parallel [
            (set (reg:DI 0 ax [475])
                (plus:DI (reg:DI 0 ax [475])
                    (reg:DI 1 dx [orig:232 D.25107 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:232 D.25107 ] [232])
            (const_int 19 [0x13]))
        (nil)))
(insn 546 545 548 21 (parallel [
            (set (reg:DI 0 ax [476])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 497 {*ashldi3_1}
     (nil))
(insn 548 546 549 21 (set (reg:DI 1 dx [orig:233 D.25107 ] [233])
        (reg:DI 0 ax [475])) ge2fitman_sup.cpp:352 89 {*movdi_internal}
     (nil))
(insn 549 548 550 21 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:352 89 {*movdi_internal}
     (nil))
(insn 550 549 551 21 (parallel [
            (set (reg/f:DI 0 ax [orig:234 D.25114 ] [234])
                (plus:DI (reg/f:DI 0 ax [477])
                    (reg:DI 1 dx [orig:233 D.25107 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:233 D.25107 ] [233]))
        (nil)))
(insn 551 550 552 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:234 D.25114 ] [234])
                (const_int 68 [0x44])) [0 _175->tilt+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:352 90 {*movsi_internal}
     (nil))
(insn 552 551 553 21 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:355 90 {*movsi_internal}
     (nil))
(insn 553 552 554 21 (set (reg:DI 0 ax [orig:235 D.25107 ] [235])
        (sign_extend:DI (reg:SI 0 ax [478]))) ge2fitman_sup.cpp:355 142 {*extendsidi2_rex64}
     (nil))
(insn 554 553 874 21 (parallel [
            (set (reg:DI 0 ax [orig:236 D.25107 ] [236])
                (ashift:DI (reg:DI 0 ax [orig:236 D.25107 ] [236])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:355 497 {*ashldi3_1}
     (nil))
(insn 874 554 555 21 (set (reg:DI 1 dx [orig:236 D.25107 ] [236])
        (reg:DI 0 ax [orig:236 D.25107 ] [236])) ge2fitman_sup.cpp:355 89 {*movdi_internal}
     (nil))
(insn 555 874 556 21 (set (reg/f:DI 0 ax [479])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:355 89 {*movdi_internal}
     (nil))
(insn 556 555 557 21 (parallel [
            (set (reg/f:DI 0 ax [orig:237 D.25115 ] [237])
                (plus:DI (reg/f:DI 0 ax [479])
                    (reg:DI 1 dx [orig:236 D.25107 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:355 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:236 D.25107 ] [236]))
        (nil)))
(insn 557 556 558 21 (set (mem/j:DI (reg/f:DI 0 ax [orig:237 D.25115 ] [237]) [0 _179->nblocks.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:355 89 {*movdi_internal}
     (nil))
(insn 558 557 559 21 (set (reg:SI 0 ax [480])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:356 90 {*movsi_internal}
     (nil))
(insn 559 558 560 21 (set (reg:DI 0 ax [orig:238 D.25107 ] [238])
        (sign_extend:DI (reg:SI 0 ax [480]))) ge2fitman_sup.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 560 559 876 21 (parallel [
            (set (reg:DI 0 ax [orig:239 D.25107 ] [239])
                (ashift:DI (reg:DI 0 ax [orig:239 D.25107 ] [239])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:356 497 {*ashldi3_1}
     (nil))
(insn 876 560 561 21 (set (reg:DI 1 dx [orig:239 D.25107 ] [239])
        (reg:DI 0 ax [orig:239 D.25107 ] [239])) ge2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 561 876 562 21 (set (reg/f:DI 0 ax [481])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 562 561 563 21 (parallel [
            (set (reg/f:DI 0 ax [orig:240 D.25115 ] [240])
                (plus:DI (reg/f:DI 0 ax [481])
                    (reg:DI 1 dx [orig:239 D.25107 ] [239])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:356 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:239 D.25107 ] [239]))
        (nil)))
(insn 563 562 564 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:240 D.25115 ] [240])
                (const_int 8 [0x8])) [0 _182->ntraces.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 564 563 565 21 (set (reg:SI 0 ax [482])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:357 90 {*movsi_internal}
     (nil))
(insn 565 564 566 21 (set (reg:DI 0 ax [orig:241 D.25107 ] [241])
        (sign_extend:DI (reg:SI 0 ax [482]))) ge2fitman_sup.cpp:357 142 {*extendsidi2_rex64}
     (nil))
(insn 566 565 878 21 (parallel [
            (set (reg:DI 0 ax [orig:242 D.25107 ] [242])
                (ashift:DI (reg:DI 0 ax [orig:242 D.25107 ] [242])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:357 497 {*ashldi3_1}
     (nil))
(insn 878 566 567 21 (set (reg:DI 1 dx [orig:242 D.25107 ] [242])
        (reg:DI 0 ax [orig:242 D.25107 ] [242])) ge2fitman_sup.cpp:357 89 {*movdi_internal}
     (nil))
(insn 567 878 568 21 (set (reg/f:DI 0 ax [483])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:357 89 {*movdi_internal}
     (nil))
(insn 568 567 569 21 (parallel [
            (set (reg/f:DI 0 ax [orig:243 D.25115 ] [243])
                (plus:DI (reg/f:DI 0 ax [483])
                    (reg:DI 1 dx [orig:242 D.25107 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:357 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:242 D.25107 ] [242]))
        (nil)))
(insn 569 568 570 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:243 D.25115 ] [243])
                (const_int 16 [0x10])) [0 _185->np.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:357 89 {*movdi_internal}
     (nil))
(insn 570 569 571 21 (set (reg:SI 0 ax [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:358 90 {*movsi_internal}
     (nil))
(insn 571 570 572 21 (set (reg:DI 0 ax [orig:244 D.25107 ] [244])
        (sign_extend:DI (reg:SI 0 ax [484]))) ge2fitman_sup.cpp:358 142 {*extendsidi2_rex64}
     (nil))
(insn 572 571 880 21 (parallel [
            (set (reg:DI 0 ax [orig:245 D.25107 ] [245])
                (ashift:DI (reg:DI 0 ax [orig:245 D.25107 ] [245])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:358 497 {*ashldi3_1}
     (nil))
(insn 880 572 573 21 (set (reg:DI 1 dx [orig:245 D.25107 ] [245])
        (reg:DI 0 ax [orig:245 D.25107 ] [245])) ge2fitman_sup.cpp:358 89 {*movdi_internal}
     (nil))
(insn 573 880 574 21 (set (reg/f:DI 0 ax [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:358 89 {*movdi_internal}
     (nil))
(insn 574 573 575 21 (parallel [
            (set (reg/f:DI 0 ax [orig:246 D.25115 ] [246])
                (plus:DI (reg/f:DI 0 ax [485])
                    (reg:DI 1 dx [orig:245 D.25107 ] [245])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:358 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:245 D.25107 ] [245]))
        (nil)))
(insn 575 574 576 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:246 D.25115 ] [246])
                (const_int 24 [0x18])) [0 _188->ebytes.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:358 89 {*movdi_internal}
     (nil))
(insn 576 575 577 21 (set (reg:SI 0 ax [486])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:359 90 {*movsi_internal}
     (nil))
(insn 577 576 578 21 (set (reg:DI 0 ax [orig:247 D.25107 ] [247])
        (sign_extend:DI (reg:SI 0 ax [486]))) ge2fitman_sup.cpp:359 142 {*extendsidi2_rex64}
     (nil))
(insn 578 577 882 21 (parallel [
            (set (reg:DI 0 ax [orig:248 D.25107 ] [248])
                (ashift:DI (reg:DI 0 ax [orig:248 D.25107 ] [248])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:359 497 {*ashldi3_1}
     (nil))
(insn 882 578 579 21 (set (reg:DI 1 dx [orig:248 D.25107 ] [248])
        (reg:DI 0 ax [orig:248 D.25107 ] [248])) ge2fitman_sup.cpp:359 89 {*movdi_internal}
     (nil))
(insn 579 882 580 21 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:359 89 {*movdi_internal}
     (nil))
(insn 580 579 581 21 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.25115 ] [249])
                (plus:DI (reg/f:DI 0 ax [487])
                    (reg:DI 1 dx [orig:248 D.25107 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:359 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:248 D.25107 ] [248]))
        (nil)))
(insn 581 580 582 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:249 D.25115 ] [249])
                (const_int 32 [0x20])) [0 _191->tbytes.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:359 89 {*movdi_internal}
     (nil))
(insn 582 581 583 21 (set (reg:SI 0 ax [488])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:360 90 {*movsi_internal}
     (nil))
(insn 583 582 584 21 (set (reg:DI 0 ax [orig:250 D.25107 ] [250])
        (sign_extend:DI (reg:SI 0 ax [488]))) ge2fitman_sup.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 584 583 884 21 (parallel [
            (set (reg:DI 0 ax [orig:251 D.25107 ] [251])
                (ashift:DI (reg:DI 0 ax [orig:251 D.25107 ] [251])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 884 584 585 21 (set (reg:DI 1 dx [orig:251 D.25107 ] [251])
        (reg:DI 0 ax [orig:251 D.25107 ] [251])) ge2fitman_sup.cpp:360 89 {*movdi_internal}
     (nil))
(insn 585 884 586 21 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:360 89 {*movdi_internal}
     (nil))
(insn 586 585 587 21 (parallel [
            (set (reg/f:DI 0 ax [orig:252 D.25115 ] [252])
                (plus:DI (reg/f:DI 0 ax [489])
                    (reg:DI 1 dx [orig:251 D.25107 ] [251])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:251 D.25107 ] [251]))
        (nil)))
(insn 587 586 588 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:252 D.25115 ] [252])
                (const_int 40 [0x28])) [0 _194->bbytes.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:360 89 {*movdi_internal}
     (nil))
(insn 588 587 589 21 (set (reg:SI 0 ax [490])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:361 90 {*movsi_internal}
     (nil))
(insn 589 588 590 21 (set (reg:DI 0 ax [orig:253 D.25107 ] [253])
        (sign_extend:DI (reg:SI 0 ax [490]))) ge2fitman_sup.cpp:361 142 {*extendsidi2_rex64}
     (nil))
(insn 590 589 886 21 (parallel [
            (set (reg:DI 0 ax [orig:254 D.25107 ] [254])
                (ashift:DI (reg:DI 0 ax [orig:254 D.25107 ] [254])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:361 497 {*ashldi3_1}
     (nil))
(insn 886 590 591 21 (set (reg:DI 1 dx [orig:254 D.25107 ] [254])
        (reg:DI 0 ax [orig:254 D.25107 ] [254])) ge2fitman_sup.cpp:361 89 {*movdi_internal}
     (nil))
(insn 591 886 592 21 (set (reg/f:DI 0 ax [491])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:361 89 {*movdi_internal}
     (nil))
(insn 592 591 593 21 (parallel [
            (set (reg/f:DI 0 ax [orig:255 D.25115 ] [255])
                (plus:DI (reg/f:DI 0 ax [491])
                    (reg:DI 1 dx [orig:254 D.25107 ] [254])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:361 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:254 D.25107 ] [254]))
        (nil)))
(insn 593 592 594 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:255 D.25115 ] [255])
                (const_int 48 [0x30])) [0 _197->transf.number+0 S2 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:361 92 {*movhi_internal}
     (nil))
(insn 594 593 595 21 (set (reg:SI 0 ax [492])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:362 90 {*movsi_internal}
     (nil))
(insn 595 594 596 21 (set (reg:DI 0 ax [orig:256 D.25107 ] [256])
        (sign_extend:DI (reg:SI 0 ax [492]))) ge2fitman_sup.cpp:362 142 {*extendsidi2_rex64}
     (nil))
(insn 596 595 888 21 (parallel [
            (set (reg:DI 0 ax [orig:257 D.25107 ] [257])
                (ashift:DI (reg:DI 0 ax [orig:257 D.25107 ] [257])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:362 497 {*ashldi3_1}
     (nil))
(insn 888 596 597 21 (set (reg:DI 1 dx [orig:257 D.25107 ] [257])
        (reg:DI 0 ax [orig:257 D.25107 ] [257])) ge2fitman_sup.cpp:362 89 {*movdi_internal}
     (nil))
(insn 597 888 598 21 (set (reg/f:DI 0 ax [493])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:362 89 {*movdi_internal}
     (nil))
(insn 598 597 599 21 (parallel [
            (set (reg/f:DI 0 ax [orig:258 D.25115 ] [258])
                (plus:DI (reg/f:DI 0 ax [493])
                    (reg:DI 1 dx [orig:257 D.25107 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:362 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:257 D.25107 ] [257]))
        (nil)))
(insn 599 598 600 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:258 D.25115 ] [258])
                (const_int 50 [0x32])) [0 _200->status.number+0 S2 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:362 92 {*movhi_internal}
     (nil))
(insn 600 599 601 21 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:363 90 {*movsi_internal}
     (nil))
(insn 601 600 602 21 (set (reg:DI 0 ax [orig:259 D.25107 ] [259])
        (sign_extend:DI (reg:SI 0 ax [494]))) ge2fitman_sup.cpp:363 142 {*extendsidi2_rex64}
     (nil))
(insn 602 601 890 21 (parallel [
            (set (reg:DI 0 ax [orig:260 D.25107 ] [260])
                (ashift:DI (reg:DI 0 ax [orig:260 D.25107 ] [260])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:363 497 {*ashldi3_1}
     (nil))
(insn 890 602 603 21 (set (reg:DI 1 dx [orig:260 D.25107 ] [260])
        (reg:DI 0 ax [orig:260 D.25107 ] [260])) ge2fitman_sup.cpp:363 89 {*movdi_internal}
     (nil))
(insn 603 890 604 21 (set (reg/f:DI 0 ax [495])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:363 89 {*movdi_internal}
     (nil))
(insn 604 603 605 21 (parallel [
            (set (reg/f:DI 0 ax [orig:261 D.25115 ] [261])
                (plus:DI (reg/f:DI 0 ax [495])
                    (reg:DI 1 dx [orig:260 D.25107 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:363 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:260 D.25107 ] [260]))
        (nil)))
(insn 605 604 606 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:261 D.25115 ] [261])
                (const_int 56 [0x38])) [0 _203->spare1.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:363 89 {*movdi_internal}
     (nil))
(insn 606 605 607 21 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:366 90 {*movsi_internal}
     (nil))
(insn 607 606 608 21 (set (reg:DI 0 ax [orig:262 D.25107 ] [262])
        (sign_extend:DI (reg:SI 0 ax [496]))) ge2fitman_sup.cpp:366 142 {*extendsidi2_rex64}
     (nil))
(insn 608 607 892 21 (parallel [
            (set (reg:DI 0 ax [orig:263 D.25107 ] [263])
                (ashift:DI (reg:DI 0 ax [orig:263 D.25107 ] [263])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:366 497 {*ashldi3_1}
     (nil))
(insn 892 608 609 21 (set (reg:DI 1 dx [orig:263 D.25107 ] [263])
        (reg:DI 0 ax [orig:263 D.25107 ] [263])) ge2fitman_sup.cpp:366 89 {*movdi_internal}
     (nil))
(insn 609 892 610 21 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:366 89 {*movdi_internal}
     (nil))
(insn 610 609 611 21 (parallel [
            (set (reg/f:DI 0 ax [orig:264 D.25116 ] [264])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:263 D.25107 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:366 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:263 D.25107 ] [263]))
        (nil)))
(insn 611 610 612 21 (set (mem/j:HI (reg/f:DI 0 ax [orig:264 D.25116 ] [264]) [0 _207->scale.number+0 S2 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:366 92 {*movhi_internal}
     (nil))
(insn 612 611 613 21 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:367 90 {*movsi_internal}
     (nil))
(insn 613 612 614 21 (set (reg:DI 0 ax [orig:265 D.25107 ] [265])
        (sign_extend:DI (reg:SI 0 ax [498]))) ge2fitman_sup.cpp:367 142 {*extendsidi2_rex64}
     (nil))
(insn 614 613 894 21 (parallel [
            (set (reg:DI 0 ax [orig:266 D.25107 ] [266])
                (ashift:DI (reg:DI 0 ax [orig:266 D.25107 ] [266])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:367 497 {*ashldi3_1}
     (nil))
(insn 894 614 615 21 (set (reg:DI 1 dx [orig:266 D.25107 ] [266])
        (reg:DI 0 ax [orig:266 D.25107 ] [266])) ge2fitman_sup.cpp:367 89 {*movdi_internal}
     (nil))
(insn 615 894 616 21 (set (reg/f:DI 0 ax [499])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:367 89 {*movdi_internal}
     (nil))
(insn 616 615 617 21 (parallel [
            (set (reg/f:DI 0 ax [orig:267 D.25116 ] [267])
                (plus:DI (reg/f:DI 0 ax [499])
                    (reg:DI 1 dx [orig:266 D.25107 ] [266])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:367 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:266 D.25107 ] [266]))
        (nil)))
(insn 617 616 618 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:267 D.25116 ] [267])
                (const_int 2 [0x2])) [0 _210->status.number+0 S2 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:367 92 {*movhi_internal}
     (nil))
(insn 618 617 619 21 (set (reg:SI 0 ax [500])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:368 90 {*movsi_internal}
     (nil))
(insn 619 618 620 21 (set (reg:DI 0 ax [orig:268 D.25107 ] [268])
        (sign_extend:DI (reg:SI 0 ax [500]))) ge2fitman_sup.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 620 619 896 21 (parallel [
            (set (reg:DI 0 ax [orig:269 D.25107 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:269 D.25107 ] [269])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:368 497 {*ashldi3_1}
     (nil))
(insn 896 620 621 21 (set (reg:DI 1 dx [orig:269 D.25107 ] [269])
        (reg:DI 0 ax [orig:269 D.25107 ] [269])) ge2fitman_sup.cpp:368 89 {*movdi_internal}
     (nil))
(insn 621 896 622 21 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:368 89 {*movdi_internal}
     (nil))
(insn 622 621 623 21 (parallel [
            (set (reg/f:DI 0 ax [orig:270 D.25116 ] [270])
                (plus:DI (reg/f:DI 0 ax [501])
                    (reg:DI 1 dx [orig:269 D.25107 ] [269])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:368 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:269 D.25107 ] [269]))
        (nil)))
(insn 623 622 624 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:270 D.25116 ] [270])
                (const_int 4 [0x4])) [0 _213->index.number+0 S2 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:368 92 {*movhi_internal}
     (nil))
(insn 624 623 625 21 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:369 90 {*movsi_internal}
     (nil))
(insn 625 624 626 21 (set (reg:DI 0 ax [orig:271 D.25107 ] [271])
        (sign_extend:DI (reg:SI 0 ax [502]))) ge2fitman_sup.cpp:369 142 {*extendsidi2_rex64}
     (nil))
(insn 626 625 898 21 (parallel [
            (set (reg:DI 0 ax [orig:272 D.25107 ] [272])
                (ashift:DI (reg:DI 0 ax [orig:272 D.25107 ] [272])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:369 497 {*ashldi3_1}
     (nil))
(insn 898 626 627 21 (set (reg:DI 1 dx [orig:272 D.25107 ] [272])
        (reg:DI 0 ax [orig:272 D.25107 ] [272])) ge2fitman_sup.cpp:369 89 {*movdi_internal}
     (nil))
(insn 627 898 628 21 (set (reg/f:DI 0 ax [503])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:369 89 {*movdi_internal}
     (nil))
(insn 628 627 629 21 (parallel [
            (set (reg/f:DI 0 ax [orig:273 D.25116 ] [273])
                (plus:DI (reg/f:DI 0 ax [503])
                    (reg:DI 1 dx [orig:272 D.25107 ] [272])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:369 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:272 D.25107 ] [272]))
        (nil)))
(insn 629 628 630 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:273 D.25116 ] [273])
                (const_int 6 [0x6])) [0 _216->spare3.number+0 S2 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:369 92 {*movhi_internal}
     (nil))
(insn 630 629 631 21 (set (reg:SI 0 ax [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:370 90 {*movsi_internal}
     (nil))
(insn 631 630 632 21 (set (reg:DI 0 ax [orig:274 D.25107 ] [274])
        (sign_extend:DI (reg:SI 0 ax [504]))) ge2fitman_sup.cpp:370 142 {*extendsidi2_rex64}
     (nil))
(insn 632 631 900 21 (parallel [
            (set (reg:DI 0 ax [orig:275 D.25107 ] [275])
                (ashift:DI (reg:DI 0 ax [orig:275 D.25107 ] [275])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:370 497 {*ashldi3_1}
     (nil))
(insn 900 632 633 21 (set (reg:DI 1 dx [orig:275 D.25107 ] [275])
        (reg:DI 0 ax [orig:275 D.25107 ] [275])) ge2fitman_sup.cpp:370 89 {*movdi_internal}
     (nil))
(insn 633 900 634 21 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:370 89 {*movdi_internal}
     (nil))
(insn 634 633 635 21 (parallel [
            (set (reg/f:DI 0 ax [orig:276 D.25116 ] [276])
                (plus:DI (reg/f:DI 0 ax [505])
                    (reg:DI 1 dx [orig:275 D.25107 ] [275])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:370 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:275 D.25107 ] [275]))
        (nil)))
(insn 635 634 636 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:276 D.25116 ] [276])
                (const_int 8 [0x8])) [0 _219->ctcount.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:370 89 {*movdi_internal}
     (nil))
(insn 636 635 637 21 (set (reg:SI 0 ax [506])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:371 90 {*movsi_internal}
     (nil))
(insn 637 636 638 21 (set (reg:DI 0 ax [orig:277 D.25107 ] [277])
        (sign_extend:DI (reg:SI 0 ax [506]))) ge2fitman_sup.cpp:371 142 {*extendsidi2_rex64}
     (nil))
(insn 638 637 902 21 (parallel [
            (set (reg:DI 0 ax [orig:278 D.25107 ] [278])
                (ashift:DI (reg:DI 0 ax [orig:278 D.25107 ] [278])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:371 497 {*ashldi3_1}
     (nil))
(insn 902 638 639 21 (set (reg:DI 1 dx [orig:278 D.25107 ] [278])
        (reg:DI 0 ax [orig:278 D.25107 ] [278])) ge2fitman_sup.cpp:371 89 {*movdi_internal}
     (nil))
(insn 639 902 640 21 (set (reg/f:DI 0 ax [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:371 89 {*movdi_internal}
     (nil))
(insn 640 639 641 21 (parallel [
            (set (reg/f:DI 1 dx [orig:279 D.25116 ] [279])
                (plus:DI (reg:DI 1 dx [orig:278 D.25107 ] [278])
                    (reg/f:DI 0 ax [507])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:371 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:278 D.25107 ] [278]))
        (nil)))
(insn 641 640 642 21 (set (reg:SF 0 ax [508])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:371 129 {*movsf_internal}
     (nil))
(insn 642 641 643 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:279 D.25116 ] [279])
                (const_int 16 [0x10])) [0 _222->lpval.number+0 S4 A64])
        (reg:SF 0 ax [508])) ge2fitman_sup.cpp:371 129 {*movsf_internal}
     (nil))
(insn 643 642 644 21 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:372 90 {*movsi_internal}
     (nil))
(insn 644 643 645 21 (set (reg:DI 0 ax [orig:280 D.25107 ] [280])
        (sign_extend:DI (reg:SI 0 ax [509]))) ge2fitman_sup.cpp:372 142 {*extendsidi2_rex64}
     (nil))
(insn 645 644 904 21 (parallel [
            (set (reg:DI 0 ax [orig:281 D.25107 ] [281])
                (ashift:DI (reg:DI 0 ax [orig:281 D.25107 ] [281])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:372 497 {*ashldi3_1}
     (nil))
(insn 904 645 646 21 (set (reg:DI 1 dx [orig:281 D.25107 ] [281])
        (reg:DI 0 ax [orig:281 D.25107 ] [281])) ge2fitman_sup.cpp:372 89 {*movdi_internal}
     (nil))
(insn 646 904 647 21 (set (reg/f:DI 0 ax [510])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:372 89 {*movdi_internal}
     (nil))
(insn 647 646 648 21 (parallel [
            (set (reg/f:DI 1 dx [orig:282 D.25116 ] [282])
                (plus:DI (reg:DI 1 dx [orig:281 D.25107 ] [281])
                    (reg/f:DI 0 ax [510])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:372 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:281 D.25107 ] [281]))
        (nil)))
(insn 648 647 649 21 (set (reg:SF 0 ax [511])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:372 129 {*movsf_internal}
     (nil))
(insn 649 648 650 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:282 D.25116 ] [282])
                (const_int 20 [0x14])) [0 _225->rpval.number+0 S4 A32])
        (reg:SF 0 ax [511])) ge2fitman_sup.cpp:372 129 {*movsf_internal}
     (nil))
(insn 650 649 651 21 (set (reg:SI 0 ax [512])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:373 90 {*movsi_internal}
     (nil))
(insn 651 650 652 21 (set (reg:DI 0 ax [orig:283 D.25107 ] [283])
        (sign_extend:DI (reg:SI 0 ax [512]))) ge2fitman_sup.cpp:373 142 {*extendsidi2_rex64}
     (nil))
(insn 652 651 906 21 (parallel [
            (set (reg:DI 0 ax [orig:284 D.25107 ] [284])
                (ashift:DI (reg:DI 0 ax [orig:284 D.25107 ] [284])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:373 497 {*ashldi3_1}
     (nil))
(insn 906 652 653 21 (set (reg:DI 1 dx [orig:284 D.25107 ] [284])
        (reg:DI 0 ax [orig:284 D.25107 ] [284])) ge2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 653 906 654 21 (set (reg/f:DI 0 ax [513])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 654 653 655 21 (parallel [
            (set (reg/f:DI 1 dx [orig:285 D.25116 ] [285])
                (plus:DI (reg:DI 1 dx [orig:284 D.25107 ] [284])
                    (reg/f:DI 0 ax [513])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:373 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:284 D.25107 ] [284]))
        (nil)))
(insn 655 654 656 21 (set (reg:SF 0 ax [514])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:373 129 {*movsf_internal}
     (nil))
(insn 656 655 657 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:285 D.25116 ] [285])
                (const_int 24 [0x18])) [0 _228->lvl.number+0 S4 A64])
        (reg:SF 0 ax [514])) ge2fitman_sup.cpp:373 129 {*movsf_internal}
     (nil))
(insn 657 656 658 21 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:374 90 {*movsi_internal}
     (nil))
(insn 658 657 659 21 (set (reg:DI 0 ax [orig:286 D.25107 ] [286])
        (sign_extend:DI (reg:SI 0 ax [515]))) ge2fitman_sup.cpp:374 142 {*extendsidi2_rex64}
     (nil))
(insn 659 658 908 21 (parallel [
            (set (reg:DI 0 ax [orig:287 D.25107 ] [287])
                (ashift:DI (reg:DI 0 ax [orig:287 D.25107 ] [287])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:374 497 {*ashldi3_1}
     (nil))
(insn 908 659 660 21 (set (reg:DI 1 dx [orig:287 D.25107 ] [287])
        (reg:DI 0 ax [orig:287 D.25107 ] [287])) ge2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 660 908 661 21 (set (reg/f:DI 0 ax [516])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 661 660 662 21 (parallel [
            (set (reg/f:DI 1 dx [orig:288 D.25116 ] [288])
                (plus:DI (reg:DI 1 dx [orig:287 D.25107 ] [287])
                    (reg/f:DI 0 ax [516])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:374 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:287 D.25107 ] [287]))
        (nil)))
(insn 662 661 663 21 (set (reg:SF 0 ax [517])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:374 129 {*movsf_internal}
     (nil))
(insn 663 662 664 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:288 D.25116 ] [288])
                (const_int 28 [0x1c])) [0 _231->tlt.number+0 S4 A32])
        (reg:SF 0 ax [517])) ge2fitman_sup.cpp:374 129 {*movsf_internal}
     (nil))
(insn 664 663 665 21 (set (reg:SI 0 ax [518])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:377 90 {*movsi_internal}
     (nil))
(insn 665 664 666 21 (set (reg:DI 1 dx [orig:289 D.25107 ] [289])
        (sign_extend:DI (reg:SI 0 ax [518]))) ge2fitman_sup.cpp:377 142 {*extendsidi2_rex64}
     (nil))
(insn 666 665 667 21 (set (reg:DI 0 ax [519])
        (reg:DI 1 dx [orig:289 D.25107 ] [289])) ge2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 667 666 668 21 (parallel [
            (set (reg:DI 0 ax [519])
                (ashift:DI (reg:DI 0 ax [519])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:377 497 {*ashldi3_1}
     (nil))
(insn 668 667 669 21 (parallel [
            (set (reg:DI 0 ax [519])
                (plus:DI (reg:DI 0 ax [519])
                    (reg:DI 1 dx [orig:289 D.25107 ] [289])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:377 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:289 D.25107 ] [289])
            (const_int 5 [0x5]))
        (nil)))
(insn 669 668 671 21 (parallel [
            (set (reg:DI 0 ax [520])
                (ashift:DI (reg:DI 0 ax [519])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:377 497 {*ashldi3_1}
     (nil))
(insn 671 669 672 21 (set (reg:DI 1 dx [orig:290 D.25107 ] [290])
        (reg:DI 0 ax [519])) ge2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 672 671 673 21 (set (reg/f:DI 0 ax [521])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 673 672 674 21 (parallel [
            (set (reg/f:DI 0 ax [orig:291 D.25117 ] [291])
                (plus:DI (reg/f:DI 0 ax [521])
                    (reg:DI 1 dx [orig:290 D.25107 ] [290])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:377 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:290 D.25107 ] [290]))
        (nil)))
(insn 674 673 675 21 (set (mem/j:SI (reg/f:DI 0 ax [orig:291 D.25117 ] [291]) [0 _235->num_datasets+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:377 90 {*movsi_internal}
     (nil))
(insn 675 674 676 21 (set (reg:SI 0 ax [522])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:378 90 {*movsi_internal}
     (nil))
(insn 676 675 677 21 (set (reg:DI 1 dx [orig:292 D.25107 ] [292])
        (sign_extend:DI (reg:SI 0 ax [522]))) ge2fitman_sup.cpp:378 142 {*extendsidi2_rex64}
     (nil))
(insn 677 676 678 21 (set (reg:DI 0 ax [523])
        (reg:DI 1 dx [orig:292 D.25107 ] [292])) ge2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 678 677 679 21 (parallel [
            (set (reg:DI 0 ax [523])
                (ashift:DI (reg:DI 0 ax [523])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:378 497 {*ashldi3_1}
     (nil))
(insn 679 678 680 21 (parallel [
            (set (reg:DI 0 ax [523])
                (plus:DI (reg:DI 0 ax [523])
                    (reg:DI 1 dx [orig:292 D.25107 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:378 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:292 D.25107 ] [292])
            (const_int 5 [0x5]))
        (nil)))
(insn 680 679 682 21 (parallel [
            (set (reg:DI 0 ax [524])
                (ashift:DI (reg:DI 0 ax [523])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:378 497 {*ashldi3_1}
     (nil))
(insn 682 680 683 21 (set (reg:DI 1 dx [orig:293 D.25107 ] [293])
        (reg:DI 0 ax [523])) ge2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 683 682 684 21 (set (reg/f:DI 0 ax [525])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 684 683 685 21 (parallel [
            (set (reg/f:DI 0 ax [orig:294 D.25117 ] [294])
                (plus:DI (reg/f:DI 0 ax [525])
                    (reg:DI 1 dx [orig:293 D.25107 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:378 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:293 D.25107 ] [293]))
        (nil)))
(insn 685 684 686 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:294 D.25117 ] [294])
                (const_int 4 [0x4])) [0 _238->num_unsup_sets+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:378 90 {*movsi_internal}
     (nil))
(insn 686 685 687 21 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:379 90 {*movsi_internal}
     (nil))
(insn 687 686 688 21 (set (reg:DI 1 dx [orig:295 D.25107 ] [295])
        (sign_extend:DI (reg:SI 0 ax [526]))) ge2fitman_sup.cpp:379 142 {*extendsidi2_rex64}
     (nil))
(insn 688 687 689 21 (set (reg:DI 0 ax [527])
        (reg:DI 1 dx [orig:295 D.25107 ] [295])) ge2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 689 688 690 21 (parallel [
            (set (reg:DI 0 ax [527])
                (ashift:DI (reg:DI 0 ax [527])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:379 497 {*ashldi3_1}
     (nil))
(insn 690 689 691 21 (parallel [
            (set (reg:DI 0 ax [527])
                (plus:DI (reg:DI 0 ax [527])
                    (reg:DI 1 dx [orig:295 D.25107 ] [295])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:379 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:295 D.25107 ] [295])
            (const_int 5 [0x5]))
        (nil)))
(insn 691 690 693 21 (parallel [
            (set (reg:DI 0 ax [528])
                (ashift:DI (reg:DI 0 ax [527])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:379 497 {*ashldi3_1}
     (nil))
(insn 693 691 694 21 (set (reg:DI 1 dx [orig:296 D.25107 ] [296])
        (reg:DI 0 ax [527])) ge2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 694 693 695 21 (set (reg/f:DI 0 ax [529])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 695 694 696 21 (parallel [
            (set (reg/f:DI 0 ax [orig:297 D.25117 ] [297])
                (plus:DI (reg/f:DI 0 ax [529])
                    (reg:DI 1 dx [orig:296 D.25107 ] [296])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:379 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:296 D.25107 ] [296]))
        (nil)))
(insn 696 695 697 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:297 D.25117 ] [297])
                (const_int 8 [0x8])) [0 _241->file_size+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:379 90 {*movsi_internal}
     (nil))
(insn 697 696 698 21 (set (reg:SI 0 ax [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:380 90 {*movsi_internal}
     (nil))
(insn 698 697 699 21 (set (reg:DI 1 dx [orig:298 D.25107 ] [298])
        (sign_extend:DI (reg:SI 0 ax [530]))) ge2fitman_sup.cpp:380 142 {*extendsidi2_rex64}
     (nil))
(insn 699 698 700 21 (set (reg:DI 0 ax [531])
        (reg:DI 1 dx [orig:298 D.25107 ] [298])) ge2fitman_sup.cpp:380 89 {*movdi_internal}
     (nil))
(insn 700 699 701 21 (parallel [
            (set (reg:DI 0 ax [531])
                (ashift:DI (reg:DI 0 ax [531])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:380 497 {*ashldi3_1}
     (nil))
(insn 701 700 702 21 (parallel [
            (set (reg:DI 0 ax [531])
                (plus:DI (reg:DI 0 ax [531])
                    (reg:DI 1 dx [orig:298 D.25107 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:380 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:298 D.25107 ] [298])
            (const_int 5 [0x5]))
        (nil)))
(insn 702 701 704 21 (parallel [
            (set (reg:DI 0 ax [532])
                (ashift:DI (reg:DI 0 ax [531])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:380 497 {*ashldi3_1}
     (nil))
(insn 704 702 705 21 (set (reg:DI 1 dx [orig:299 D.25107 ] [299])
        (reg:DI 0 ax [531])) ge2fitman_sup.cpp:380 89 {*movdi_internal}
     (nil))
(insn 705 704 706 21 (set (reg/f:DI 0 ax [533])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:380 89 {*movdi_internal}
     (nil))
(insn 706 705 707 21 (parallel [
            (set (reg/f:DI 0 ax [orig:300 D.25117 ] [300])
                (plus:DI (reg/f:DI 0 ax [533])
                    (reg:DI 1 dx [orig:299 D.25107 ] [299])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:380 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:299 D.25107 ] [299]))
        (nil)))
(insn 707 706 708 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:300 D.25117 ] [300])
                (const_int 12 [0xc])) [0 _244->total_data_size+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:380 90 {*movsi_internal}
     (nil))
(insn 708 707 798 21 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:381 90 {*movsi_internal}
     (nil))
(jump_insn 798 708 799 21 (set (pc)
        (label_ref 726)) ge2fitman_sup.cpp:381 636 {jump}
     (nil)
 -> 726)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 799 798 730)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 302 303 304 534 535 536 537 538 539
(code_label 730 799 711 22 72 "" [1 uses])
(note 711 730 712 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 712 711 713 22 (set (reg:SI 0 ax [534])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:382 90 {*movsi_internal}
     (nil))
(insn 713 712 714 22 (set (reg:DI 1 dx [orig:302 D.25107 ] [302])
        (sign_extend:DI (reg:SI 0 ax [534]))) ge2fitman_sup.cpp:382 142 {*extendsidi2_rex64}
     (nil))
(insn 714 713 715 22 (set (reg:DI 0 ax [535])
        (reg:DI 1 dx [orig:302 D.25107 ] [302])) ge2fitman_sup.cpp:382 89 {*movdi_internal}
     (nil))
(insn 715 714 716 22 (parallel [
            (set (reg:DI 0 ax [535])
                (ashift:DI (reg:DI 0 ax [535])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:382 497 {*ashldi3_1}
     (nil))
(insn 716 715 717 22 (parallel [
            (set (reg:DI 0 ax [535])
                (plus:DI (reg:DI 0 ax [535])
                    (reg:DI 1 dx [orig:302 D.25107 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:382 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:302 D.25107 ] [302])
            (const_int 5 [0x5]))
        (nil)))
(insn 717 716 719 22 (parallel [
            (set (reg:DI 0 ax [536])
                (ashift:DI (reg:DI 0 ax [535])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:382 497 {*ashldi3_1}
     (nil))
(insn 719 717 720 22 (set (reg:DI 1 dx [orig:303 D.25107 ] [303])
        (reg:DI 0 ax [535])) ge2fitman_sup.cpp:382 89 {*movdi_internal}
     (nil))
(insn 720 719 721 22 (set (reg/f:DI 0 ax [537])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:382 89 {*movdi_internal}
     (nil))
(insn 721 720 722 22 (parallel [
            (set (reg/f:DI 1 dx [orig:304 D.25117 ] [304])
                (plus:DI (reg:DI 1 dx [orig:303 D.25107 ] [303])
                    (reg/f:DI 0 ax [537])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:382 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:303 D.25107 ] [303]))
        (nil)))
(insn 722 721 723 22 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:382 90 {*movsi_internal}
     (nil))
(insn 723 722 724 22 (set (reg:DI 0 ax [538])
        (sign_extend:DI (reg:SI 0 ax [539]))) ge2fitman_sup.cpp:382 142 {*extendsidi2_rex64}
     (nil))
(insn 724 723 725 22 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:304 D.25117 ] [304])
                    (reg:DI 0 ax [538]))
                (const_int 16 [0x10])) [0 _249->version S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:382 93 {*movqi_internal}
     (nil))
(insn 725 724 726 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:381 220 {*addsi_1}
     (nil))
;;  succ:       23 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU,DFS_BACK)
;;              21 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 301 540
(code_label 726 725 727 23 71 "" [1 uses])
(note 727 726 728 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 728 727 729 23 (set (reg:SI 0 ax [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:381 90 {*movsi_internal}
     (nil))
(insn 729 728 731 23 (set (reg:DI 0 ax [orig:301 D.25107 ] [301])
        (sign_extend:DI (reg:SI 0 ax [540]))) ge2fitman_sup.cpp:381 142 {*extendsidi2_rex64}
     (nil))
(insn 731 729 732 23 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:301 D.25107 ] [301])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:381 8 {*cmpdi_1}
     (nil))
(jump_insn 732 731 733 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 730)
            (pc))) ge2fitman_sup.cpp:381 596 {*jcc_1}
     (nil)
 -> 730)
;;  succ:       22
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 733 732 734 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 734 733 735 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:274 220 {*addsi_1}
     (nil))
;;  succ:       25 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 735 734 736 25 58 "" [1 uses])
(note 736 735 738 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 738 736 739 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:274 7 {*cmpsi_1}
     (nil))
(jump_insn 739 738 740 25 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 737)
            (pc))) ge2fitman_sup.cpp:274 596 {*jcc_1}
     (nil)
 -> 737)
;;  succ:       3
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 305 306 307 308 309 310 311 541 542 543 544 545 546
(note 740 739 741 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 741 740 742 26 (set (reg/f:DI 0 ax [orig:305 D.25118 ] [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 742 741 909 26 (set (reg:DI 5 di [608])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 909 742 743 26 (set (mem:DI (reg/f:DI 0 ax [orig:305 D.25118 ] [305]) [0 MEM[(void *)_253]+0 S8 A8])
        (reg:DI 5 di [608])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 743 909 910 26 (set (reg:DI 2 cx [609])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 910 743 744 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:305 D.25118 ] [305])
                (const_int 8 [0x8])) [0 MEM[(void *)_253]+8 S8 A8])
        (reg:DI 2 cx [609])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 744 910 745 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:305 D.25118 ] [305])
                (const_int 16 [0x10])) [0 MEM[(void *)_253]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:387 90 {*movsi_internal}
     (nil))
(insn 745 744 746 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:305 D.25118 ] [305])
                (const_int 20 [0x14])) [0 MEM[(void *)_253]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:387 92 {*movhi_internal}
     (nil))
(insn 746 745 747 26 (set (reg/f:DI 0 ax [541])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 747 746 748 26 (parallel [
            (set (reg/f:DI 0 ax [orig:306 D.25118 ] [306])
                (plus:DI (reg/f:DI 0 ax [541])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:388 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 748 747 911 26 (set (reg:DI 4 si [610])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 911 748 749 26 (set (mem:DI (reg/f:DI 0 ax [orig:306 D.25118 ] [306]) [0 MEM[(void *)_254]+0 S8 A8])
        (reg:DI 4 si [610])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 749 911 912 26 (set (reg:DI 5 di [611])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 912 749 750 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:306 D.25118 ] [306])
                (const_int 8 [0x8])) [0 MEM[(void *)_254]+8 S8 A8])
        (reg:DI 5 di [611])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 750 912 751 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:306 D.25118 ] [306])
                (const_int 16 [0x10])) [0 MEM[(void *)_254]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:388 90 {*movsi_internal}
     (nil))
(insn 751 750 752 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:306 D.25118 ] [306])
                (const_int 20 [0x14])) [0 MEM[(void *)_254]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:388 92 {*movhi_internal}
     (nil))
(insn 752 751 753 26 (set (reg/f:DI 0 ax [542])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 753 752 754 26 (parallel [
            (set (reg/f:DI 0 ax [orig:307 D.25118 ] [307])
                (plus:DI (reg/f:DI 0 ax [542])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:389 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 754 753 913 26 (set (reg:DI 2 cx [612])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 913 754 755 26 (set (mem:DI (reg/f:DI 0 ax [orig:307 D.25118 ] [307]) [0 MEM[(void *)_255]+0 S8 A8])
        (reg:DI 2 cx [612])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 755 913 914 26 (set (reg:DI 4 si [613])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 914 755 756 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:307 D.25118 ] [307])
                (const_int 8 [0x8])) [0 MEM[(void *)_255]+8 S8 A8])
        (reg:DI 4 si [613])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 756 914 757 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:307 D.25118 ] [307])
                (const_int 16 [0x10])) [0 MEM[(void *)_255]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:389 90 {*movsi_internal}
     (nil))
(insn 757 756 758 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:307 D.25118 ] [307])
                (const_int 20 [0x14])) [0 MEM[(void *)_255]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:389 92 {*movhi_internal}
     (nil))
(insn 758 757 759 26 (set (reg/f:DI 0 ax [543])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 759 758 760 26 (parallel [
            (set (reg/f:DI 0 ax [orig:308 D.25118 ] [308])
                (plus:DI (reg/f:DI 0 ax [543])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:390 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 760 759 915 26 (set (reg:DI 5 di [614])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 915 760 761 26 (set (mem:DI (reg/f:DI 0 ax [orig:308 D.25118 ] [308]) [0 MEM[(void *)_256]+0 S8 A8])
        (reg:DI 5 di [614])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 761 915 916 26 (set (reg:DI 2 cx [615])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 916 761 762 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:308 D.25118 ] [308])
                (const_int 8 [0x8])) [0 MEM[(void *)_256]+8 S8 A8])
        (reg:DI 2 cx [615])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 762 916 763 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:308 D.25118 ] [308])
                (const_int 16 [0x10])) [0 MEM[(void *)_256]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:390 90 {*movsi_internal}
     (nil))
(insn 763 762 764 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:308 D.25118 ] [308])
                (const_int 20 [0x14])) [0 MEM[(void *)_256]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:390 92 {*movhi_internal}
     (nil))
(insn 764 763 765 26 (set (reg/f:DI 0 ax [544])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 765 764 766 26 (parallel [
            (set (reg/f:DI 0 ax [orig:309 D.25118 ] [309])
                (plus:DI (reg/f:DI 0 ax [544])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:391 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 766 765 917 26 (set (reg:DI 4 si [616])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 917 766 767 26 (set (mem:DI (reg/f:DI 0 ax [orig:309 D.25118 ] [309]) [0 MEM[(void *)_257]+0 S8 A8])
        (reg:DI 4 si [616])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 767 917 918 26 (set (reg:DI 5 di [617])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 918 767 768 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:309 D.25118 ] [309])
                (const_int 8 [0x8])) [0 MEM[(void *)_257]+8 S8 A8])
        (reg:DI 5 di [617])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 768 918 769 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:309 D.25118 ] [309])
                (const_int 16 [0x10])) [0 MEM[(void *)_257]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:391 90 {*movsi_internal}
     (nil))
(insn 769 768 770 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:309 D.25118 ] [309])
                (const_int 20 [0x14])) [0 MEM[(void *)_257]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:391 92 {*movhi_internal}
     (nil))
(insn 770 769 771 26 (set (reg/f:DI 0 ax [545])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 771 770 772 26 (parallel [
            (set (reg/f:DI 0 ax [orig:310 D.25118 ] [310])
                (plus:DI (reg/f:DI 0 ax [545])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:392 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 772 771 919 26 (set (reg:DI 2 cx [618])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 919 772 773 26 (set (mem:DI (reg/f:DI 0 ax [orig:310 D.25118 ] [310]) [0 MEM[(void *)_258]+0 S8 A8])
        (reg:DI 2 cx [618])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 773 919 920 26 (set (reg:DI 4 si [619])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 920 773 774 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:310 D.25118 ] [310])
                (const_int 8 [0x8])) [0 MEM[(void *)_258]+8 S8 A8])
        (reg:DI 4 si [619])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 774 920 775 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:310 D.25118 ] [310])
                (const_int 16 [0x10])) [0 MEM[(void *)_258]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:392 90 {*movsi_internal}
     (nil))
(insn 775 774 776 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:310 D.25118 ] [310])
                (const_int 20 [0x14])) [0 MEM[(void *)_258]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:392 92 {*movhi_internal}
     (nil))
(insn 776 775 777 26 (set (reg/f:DI 0 ax [546])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 777 776 778 26 (parallel [
            (set (reg/f:DI 0 ax [orig:311 D.25118 ] [311])
                (plus:DI (reg/f:DI 0 ax [546])
                    (const_int 1536 [0x600])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:393 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1536 [0x600]))
        (nil)))
(insn 778 777 921 26 (set (reg:DI 5 di [620])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 921 778 779 26 (set (mem:DI (reg/f:DI 0 ax [orig:311 D.25118 ] [311]) [0 MEM[(void *)_259]+0 S8 A8])
        (reg:DI 5 di [620])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 779 921 922 26 (set (reg:DI 2 cx [621])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 922 779 780 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:311 D.25118 ] [311])
                (const_int 8 [0x8])) [0 MEM[(void *)_259]+8 S8 A8])
        (reg:DI 2 cx [621])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 780 922 781 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:311 D.25118 ] [311])
                (const_int 16 [0x10])) [0 MEM[(void *)_259]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:393 90 {*movsi_internal}
     (nil))
(insn 781 780 800 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:311 D.25118 ] [311])
                (const_int 20 [0x14])) [0 MEM[(void *)_259]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:393 92 {*movhi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 800 781 0 NOTE_INSN_DELETED)

;; Function void disp_help(int) (_Z9disp_helpi, funcdef_no=1028, decl_uid=24050, symbol_order=235)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 69:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 83:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 85:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 89:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 91:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 99:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 101:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 103:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 105:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 113:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 115:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 117:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 119:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 127:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 129:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 131:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 133:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 135:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 139:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 143:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 145:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 147:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 149:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 151:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 153:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 155:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 159:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 161:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 163:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 165:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 167:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 169:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 171:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 173:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void disp_help(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={82d} r1={82d} r2={82d} r4={82d} r5={163d,82u} r6={1d,7u} r7={1d,86u} r8={81d} r9={81d} r10={81d} r11={81d} r12={81d} r13={81d} r14={81d} r15={81d} r17={82d,1u} r18={81d} r19={81d} r20={1d,1u} r21={82d} r22={82d} r23={82d} r24={82d} r25={82d} r26={82d} r27={82d} r28={82d} r29={81d} r30={81d} r31={81d} r32={81d} r33={81d} r34={81d} r35={81d} r36={81d} r37={82d} r38={82d} r39={81d} r40={81d} r45={81d} r46={81d} r47={81d} r48={81d} r49={81d} r50={81d} r51={81d} r52={81d} r53={81d} r54={81d} r55={81d} r56={81d} r57={81d} r58={81d} r59={81d} r60={81d} r61={81d} r62={81d} r63={81d} r64={81d} r65={81d} r66={81d} r67={81d} r68={81d} r69={81d} r70={81d} r71={81d} r72={81d} r73={81d} r74={81d} r75={81d} r76={81d} 
;;    total ref usage 5785{5608d,177u,0e} in 166{85 regular + 81 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 version+0 S4 A32])
        (reg:SI 5 di [ version ])) ge2fitman_sup.cpp:401 90 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 version+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:403 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) ge2fitman_sup.cpp:403 596 {*jcc_1}
     (nil)
 -> 41)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b7595c5bab0 *.LC15>)) ge2fitman_sup.cpp:404 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:404 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b7595c5bb48 *.LC16>)) ge2fitman_sup.cpp:405 89 {*movdi_internal}
     (nil))
(call_insn 12 11 13 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:405 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b7595c5bbe0 *.LC17>)) ge2fitman_sup.cpp:406 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:406 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b7595c5bc78 *.LC18>)) ge2fitman_sup.cpp:407 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:407 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2b7595c5bd10 *.LC19>)) ge2fitman_sup.cpp:408 89 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:408 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2b7595c5bda8 *.LC20>)) ge2fitman_sup.cpp:409 89 {*movdi_internal}
     (nil))
(call_insn 20 19 21 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:409 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2b7595c5be40 *.LC21>)) ge2fitman_sup.cpp:410 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:410 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b7595c5bed8 *.LC22>)) ge2fitman_sup.cpp:411 89 {*movdi_internal}
     (nil))
(call_insn 24 23 25 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:411 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b7595c60000 *.LC23>)) ge2fitman_sup.cpp:412 89 {*movdi_internal}
     (nil))
(call_insn 26 25 27 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:412 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b7595c60098 *.LC24>)) ge2fitman_sup.cpp:413 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:413 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b7595c60130 *.LC25>)) ge2fitman_sup.cpp:414 89 {*movdi_internal}
     (nil))
(call_insn 30 29 31 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:414 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x2b7595c601c8 *.LC26>)) ge2fitman_sup.cpp:415 89 {*movdi_internal}
     (nil))
(call_insn 32 31 33 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:415 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 33 32 34 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b7595c60260 *.LC27>)) ge2fitman_sup.cpp:416 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:416 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x2b7595c602f8 *.LC28>)) ge2fitman_sup.cpp:417 89 {*movdi_internal}
     (nil))
(call_insn 36 35 37 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:417 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 37 36 38 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x2b7595c60390 *.LC29>)) ge2fitman_sup.cpp:418 89 {*movdi_internal}
     (nil))
(call_insn 38 37 179 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:418 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 179 38 180 3 (set (pc)
        (label_ref 177)) 636 {jump}
     (nil)
 -> 177)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 180 179 41)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 41 180 42 4 75 "" [1 uses])
(note 42 41 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x2b7595c60428 *.LC30>)) ge2fitman_sup.cpp:422 89 {*movdi_internal}
     (nil))
(call_insn 44 43 45 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:422 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x2b7595c604c0 *.LC31>)) ge2fitman_sup.cpp:423 89 {*movdi_internal}
     (nil))
(call_insn 46 45 47 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:423 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 47 46 48 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b7595c5bb48 *.LC16>)) ge2fitman_sup.cpp:424 89 {*movdi_internal}
     (nil))
(call_insn 48 47 49 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:424 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 49 48 50 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b7595c5bbe0 *.LC17>)) ge2fitman_sup.cpp:425 89 {*movdi_internal}
     (nil))
(call_insn 50 49 51 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:425 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 51 50 52 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x2b7595c60558 *.LC32>)) ge2fitman_sup.cpp:428 89 {*movdi_internal}
     (nil))
(call_insn 52 51 53 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:428 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x2b7595c605f0 *.LC33>)) ge2fitman_sup.cpp:429 89 {*movdi_internal}
     (nil))
(call_insn 54 53 55 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:429 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 55 54 56 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x2b7595c60688 *.LC34>)) ge2fitman_sup.cpp:430 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:430 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 57 56 58 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x2b7595c60720 *.LC35>)) ge2fitman_sup.cpp:431 89 {*movdi_internal}
     (nil))
(call_insn 58 57 59 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:431 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 59 58 60 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x2b7595c607b8 *.LC36>)) ge2fitman_sup.cpp:432 89 {*movdi_internal}
     (nil))
(call_insn 60 59 61 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:432 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x2b7595c60850 *.LC37>)) ge2fitman_sup.cpp:433 89 {*movdi_internal}
     (nil))
(call_insn 62 61 63 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:433 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 63 62 64 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b7595c5bc78 *.LC18>)) ge2fitman_sup.cpp:436 89 {*movdi_internal}
     (nil))
(call_insn 64 63 65 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:436 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 65 64 66 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x2b7595c608e8 *.LC38>)) ge2fitman_sup.cpp:437 89 {*movdi_internal}
     (nil))
(call_insn 66 65 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:437 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 67 66 68 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x2b7595c60980 *.LC39>)) ge2fitman_sup.cpp:438 89 {*movdi_internal}
     (nil))
(call_insn 68 67 69 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:438 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x2b7595c60a18 *.LC40>)) ge2fitman_sup.cpp:439 89 {*movdi_internal}
     (nil))
(call_insn 70 69 71 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:439 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC41") [flags 0x2]  <var_decl 0x2b7595c60ab0 *.LC41>)) ge2fitman_sup.cpp:440 89 {*movdi_internal}
     (nil))
(call_insn 72 71 73 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:440 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 73 72 74 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC42") [flags 0x2]  <var_decl 0x2b7595c60b48 *.LC42>)) ge2fitman_sup.cpp:441 89 {*movdi_internal}
     (nil))
(call_insn 74 73 75 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:441 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 75 74 76 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2b7595c5bda8 *.LC20>)) ge2fitman_sup.cpp:443 89 {*movdi_internal}
     (nil))
(call_insn 76 75 77 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:443 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 77 76 78 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC43") [flags 0x2]  <var_decl 0x2b7595c60be0 *.LC43>)) ge2fitman_sup.cpp:444 89 {*movdi_internal}
     (nil))
(call_insn 78 77 79 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:444 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 79 78 80 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x2b7595c60c78 *.LC44>)) ge2fitman_sup.cpp:445 89 {*movdi_internal}
     (nil))
(call_insn 80 79 81 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:445 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC45") [flags 0x2]  <var_decl 0x2b7595c60d10 *.LC45>)) ge2fitman_sup.cpp:446 89 {*movdi_internal}
     (nil))
(call_insn 82 81 83 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:446 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 83 82 84 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC46") [flags 0x2]  <var_decl 0x2b7595c60da8 *.LC46>)) ge2fitman_sup.cpp:447 89 {*movdi_internal}
     (nil))
(call_insn 84 83 85 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:447 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 85 84 86 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC47") [flags 0x2]  <var_decl 0x2b7595c60e40 *.LC47>)) ge2fitman_sup.cpp:448 89 {*movdi_internal}
     (nil))
(call_insn 86 85 87 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:448 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 87 86 88 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC48") [flags 0x2]  <var_decl 0x2b7595c60ed8 *.LC48>)) ge2fitman_sup.cpp:449 89 {*movdi_internal}
     (nil))
(call_insn 88 87 89 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:449 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 89 88 90 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC49") [flags 0x2]  <var_decl 0x2b7595c67000 *.LC49>)) ge2fitman_sup.cpp:450 89 {*movdi_internal}
     (nil))
(call_insn 90 89 91 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:450 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 91 90 92 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC50") [flags 0x2]  <var_decl 0x2b7595c67098 *.LC50>)) ge2fitman_sup.cpp:451 89 {*movdi_internal}
     (nil))
(call_insn 92 91 93 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:451 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 93 92 94 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC51") [flags 0x2]  <var_decl 0x2b7595c67130 *.LC51>)) ge2fitman_sup.cpp:452 89 {*movdi_internal}
     (nil))
(call_insn 94 93 95 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:452 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 95 94 96 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC52") [flags 0x2]  <var_decl 0x2b7595c671c8 *.LC52>)) ge2fitman_sup.cpp:453 89 {*movdi_internal}
     (nil))
(call_insn 96 95 97 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:453 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 97 96 98 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC53") [flags 0x2]  <var_decl 0x2b7595c67260 *.LC53>)) ge2fitman_sup.cpp:454 89 {*movdi_internal}
     (nil))
(call_insn 98 97 99 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:454 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 99 98 100 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC54") [flags 0x2]  <var_decl 0x2b7595c672f8 *.LC54>)) ge2fitman_sup.cpp:455 89 {*movdi_internal}
     (nil))
(call_insn 100 99 101 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:455 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 101 100 102 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC55") [flags 0x2]  <var_decl 0x2b7595c67390 *.LC55>)) ge2fitman_sup.cpp:456 89 {*movdi_internal}
     (nil))
(call_insn 102 101 103 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:456 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 103 102 104 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC56") [flags 0x2]  <var_decl 0x2b7595c67428 *.LC56>)) ge2fitman_sup.cpp:457 89 {*movdi_internal}
     (nil))
(call_insn 104 103 105 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:457 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 105 104 106 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC57") [flags 0x2]  <var_decl 0x2b7595c674c0 *.LC57>)) ge2fitman_sup.cpp:458 89 {*movdi_internal}
     (nil))
(call_insn 106 105 107 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:458 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 107 106 108 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC58") [flags 0x2]  <var_decl 0x2b7595c67558 *.LC58>)) ge2fitman_sup.cpp:459 89 {*movdi_internal}
     (nil))
(call_insn 108 107 109 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:459 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 109 108 110 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC59") [flags 0x2]  <var_decl 0x2b7595c675f0 *.LC59>)) ge2fitman_sup.cpp:460 89 {*movdi_internal}
     (nil))
(call_insn 110 109 111 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:460 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 111 110 112 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC55") [flags 0x2]  <var_decl 0x2b7595c67390 *.LC55>)) ge2fitman_sup.cpp:461 89 {*movdi_internal}
     (nil))
(call_insn 112 111 113 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:461 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 113 112 114 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC60") [flags 0x2]  <var_decl 0x2b7595c67688 *.LC60>)) ge2fitman_sup.cpp:462 89 {*movdi_internal}
     (nil))
(call_insn 114 113 115 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:462 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 115 114 116 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b7595c60260 *.LC27>)) ge2fitman_sup.cpp:464 89 {*movdi_internal}
     (nil))
(call_insn 116 115 117 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:464 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 117 116 118 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC61") [flags 0x2]  <var_decl 0x2b7595c67720 *.LC61>)) ge2fitman_sup.cpp:465 89 {*movdi_internal}
     (nil))
(call_insn 118 117 119 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:465 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC62") [flags 0x2]  <var_decl 0x2b7595c677b8 *.LC62>)) ge2fitman_sup.cpp:466 89 {*movdi_internal}
     (nil))
(call_insn 120 119 121 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:466 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 121 120 122 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC63") [flags 0x2]  <var_decl 0x2b7595c67850 *.LC63>)) ge2fitman_sup.cpp:467 89 {*movdi_internal}
     (nil))
(call_insn 122 121 123 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:467 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 123 122 124 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC64") [flags 0x2]  <var_decl 0x2b7595c678e8 *.LC64>)) ge2fitman_sup.cpp:468 89 {*movdi_internal}
     (nil))
(call_insn 124 123 125 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:468 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 125 124 126 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC65") [flags 0x2]  <var_decl 0x2b7595c67980 *.LC65>)) ge2fitman_sup.cpp:469 89 {*movdi_internal}
     (nil))
(call_insn 126 125 127 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:469 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 127 126 128 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC66") [flags 0x2]  <var_decl 0x2b7595c67a18 *.LC66>)) ge2fitman_sup.cpp:470 89 {*movdi_internal}
     (nil))
(call_insn 128 127 129 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:470 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 129 128 130 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC67") [flags 0x2]  <var_decl 0x2b7595c67ab0 *.LC67>)) ge2fitman_sup.cpp:471 89 {*movdi_internal}
     (nil))
(call_insn 130 129 131 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:471 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 131 130 132 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC68") [flags 0x2]  <var_decl 0x2b7595c67b48 *.LC68>)) ge2fitman_sup.cpp:472 89 {*movdi_internal}
     (nil))
(call_insn 132 131 133 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:472 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 133 132 134 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC69") [flags 0x2]  <var_decl 0x2b7595c67be0 *.LC69>)) ge2fitman_sup.cpp:473 89 {*movdi_internal}
     (nil))
(call_insn 134 133 135 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:473 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 135 134 136 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC70") [flags 0x2]  <var_decl 0x2b7595c67c78 *.LC70>)) ge2fitman_sup.cpp:474 89 {*movdi_internal}
     (nil))
(call_insn 136 135 137 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:474 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 137 136 138 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC71") [flags 0x2]  <var_decl 0x2b7595c67d10 *.LC71>)) ge2fitman_sup.cpp:476 89 {*movdi_internal}
     (nil))
(call_insn 138 137 139 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:476 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 139 138 140 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC72") [flags 0x2]  <var_decl 0x2b7595c67da8 *.LC72>)) ge2fitman_sup.cpp:477 89 {*movdi_internal}
     (nil))
(call_insn 140 139 141 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:477 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 141 140 142 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC73") [flags 0x2]  <var_decl 0x2b7595c67e40 *.LC73>)) ge2fitman_sup.cpp:478 89 {*movdi_internal}
     (nil))
(call_insn 142 141 143 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:478 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 143 142 144 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC74") [flags 0x2]  <var_decl 0x2b7595c67ed8 *.LC74>)) ge2fitman_sup.cpp:479 89 {*movdi_internal}
     (nil))
(call_insn 144 143 145 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:479 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 145 144 146 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC75") [flags 0x2]  <var_decl 0x2b7595c6c000 *.LC75>)) ge2fitman_sup.cpp:480 89 {*movdi_internal}
     (nil))
(call_insn 146 145 147 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:480 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 147 146 148 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC76") [flags 0x2]  <var_decl 0x2b7595c6c098 *.LC76>)) ge2fitman_sup.cpp:481 89 {*movdi_internal}
     (nil))
(call_insn 148 147 149 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:481 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 149 148 150 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC77") [flags 0x2]  <var_decl 0x2b7595c6c130 *.LC77>)) ge2fitman_sup.cpp:482 89 {*movdi_internal}
     (nil))
(call_insn 150 149 151 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:482 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 151 150 152 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC78") [flags 0x2]  <var_decl 0x2b7595c6c1c8 *.LC78>)) ge2fitman_sup.cpp:483 89 {*movdi_internal}
     (nil))
(call_insn 152 151 153 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:483 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 153 152 154 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC79") [flags 0x2]  <var_decl 0x2b7595c6c260 *.LC79>)) ge2fitman_sup.cpp:484 89 {*movdi_internal}
     (nil))
(call_insn 154 153 155 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:484 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 155 154 156 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC80") [flags 0x2]  <var_decl 0x2b7595c6c2f8 *.LC80>)) ge2fitman_sup.cpp:485 89 {*movdi_internal}
     (nil))
(call_insn 156 155 157 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:485 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 157 156 158 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC81") [flags 0x2]  <var_decl 0x2b7595c6c390 *.LC81>)) ge2fitman_sup.cpp:486 89 {*movdi_internal}
     (nil))
(call_insn 158 157 159 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:486 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 159 158 160 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC82") [flags 0x2]  <var_decl 0x2b7595c6c428 *.LC82>)) ge2fitman_sup.cpp:487 89 {*movdi_internal}
     (nil))
(call_insn 160 159 161 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:487 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 161 160 162 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC83") [flags 0x2]  <var_decl 0x2b7595c6c4c0 *.LC83>)) ge2fitman_sup.cpp:488 89 {*movdi_internal}
     (nil))
(call_insn 162 161 163 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:488 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 163 162 164 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC84") [flags 0x2]  <var_decl 0x2b7595c6c558 *.LC84>)) ge2fitman_sup.cpp:489 89 {*movdi_internal}
     (nil))
(call_insn 164 163 165 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:489 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 165 164 166 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC85") [flags 0x2]  <var_decl 0x2b7595c6c5f0 *.LC85>)) ge2fitman_sup.cpp:490 89 {*movdi_internal}
     (nil))
(call_insn 166 165 167 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:490 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 167 166 168 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC86") [flags 0x2]  <var_decl 0x2b7595c6c688 *.LC86>)) ge2fitman_sup.cpp:491 89 {*movdi_internal}
     (nil))
(call_insn 168 167 169 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:491 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 169 168 170 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC87") [flags 0x2]  <var_decl 0x2b7595c6c720 *.LC87>)) ge2fitman_sup.cpp:492 89 {*movdi_internal}
     (nil))
(call_insn 170 169 171 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:492 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 171 170 172 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC88") [flags 0x2]  <var_decl 0x2b7595c6c7b8 *.LC88>)) ge2fitman_sup.cpp:494 89 {*movdi_internal}
     (nil))
(call_insn 172 171 173 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:494 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 173 172 174 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC89") [flags 0x2]  <var_decl 0x2b7595c6c850 *.LC89>)) ge2fitman_sup.cpp:495 89 {*movdi_internal}
     (nil))
(call_insn 174 173 177 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:495 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 177 174 178 5 74 "" [1 uses])
(note 178 177 181 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 181 178 0 NOTE_INSN_DELETED)

;; Function void check_outfile(IOFiles*, bool, int) (_Z13check_outfileP7IOFilesbi, funcdef_no=1029, decl_uid=24061, symbol_order=236)

      Creating newreg=430
Removing SCRATCH in insn #7 (nop 2)
rescanning insn with uid = 7.
      Creating newreg=431
Removing SCRATCH in insn #882 (nop 3)
rescanning insn with uid = 882.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r430
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 11:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 13:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 17:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 23:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 25:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 26:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 27:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 29:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 62:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 70:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 71:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 101:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 102:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 110:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 126:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 140:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 148:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 149:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 170:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 178:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 179:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 204:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 212:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 213:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 232:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 242:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 246:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 254:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 255:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 276:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 284:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 285:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 306:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 310:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 318:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 319:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 327:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 328:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 343:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 353:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 357:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 365:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 366:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 383:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 387:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 395:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 396:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 419:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 421:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 429:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 430:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 446:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 449:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 453:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 459:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 461:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 463:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 471:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 472:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 483:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 489:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 493:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 501:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 502:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 523:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 527:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 535:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 536:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 551:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 552:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 559:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 560:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 562:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 568:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 570:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 574:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 575
	 Choosing alt 0 in insn 575:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 576:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 581:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 582:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 590:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 592:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 597
	 Choosing alt 0 in insn 597:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 598:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 604:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 606:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 610:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 611
	 Choosing alt 0 in insn 611:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 612:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 619:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 620:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 628:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 630:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 634:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 635
	 Choosing alt 0 in insn 635:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 636:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 641:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 642:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 646:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 649:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 650:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 652:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 656:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 657
	 Choosing alt 0 in insn 657:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 658:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 663:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 665:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 670
	 Choosing alt 0 in insn 670:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 671:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 674:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 676:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 677:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 678:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 679:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 683:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 684:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 685:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 689:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 696:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 703:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 706:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 711:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 718:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 719:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 720:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 727:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 728:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 730:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 732:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 736:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 737:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 738:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 742:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 743
	 Choosing alt 0 in insn 743:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 744:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 749:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 750:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 752:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 758:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 760:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 764:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 765
	 Choosing alt 0 in insn 765:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 766:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 771:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 772:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 774:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 778:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 779
	 Choosing alt 0 in insn 779:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 780:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 787:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 788:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 790:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 795:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 796:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 797:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 798:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 802:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 803
	 Choosing alt 0 in insn 803:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 804:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 809:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 810:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 812:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 814:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 817:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 818:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 819:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 820:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 824:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 825
	 Choosing alt 0 in insn 825:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 826:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 831:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 832:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 833:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 837:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 838
	 Choosing alt 0 in insn 838:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 839:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 842:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 843:  (0) r  (1) i {*movdi_internal}
      Creating newreg=432, assigning class GENERAL_REGS to r432
  843: r432:DI=0x7461642e736e755f
    Inserting insn reload after:
  969: [r424:DI]=r432:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 969:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 844:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 845:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 848:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 849:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 850:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 853:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 854:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 855:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 857:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 859:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 860:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 861:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 862:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 865:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 866:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 867:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 870:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 873:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 876:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 878:  (1) rzw {*call_value}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 882:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r431
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 884:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 97
EBB 98
EBB 99
EBB 100
EBB 101
EBB 102
EBB 103
EBB 104
EBB 105
EBB 106
EBB 107
EBB 108
EBB 109

********** Pseudo live ranges #1: **********

  BB 108
   Insn 884: point = 0
  BB 109
  BB 107
   Insn 883: point = 0
   Insn 882: point = 0
  BB 106
   Insn 878: point = 1
   Insn 877: point = 1
   Insn 876: point = 2
  BB 105
   Insn 874: point = 3
   Insn 873: point = 3
  BB 104
   Insn 870: point = 3
   Insn 869: point = 3
   Insn 868: point = 4
   Insn 867: point = 5
   Insn 866: point = 6
   Insn 865: point = 8
  BB 103
   Insn 863: point = 9
   Insn 862: point = 9
   Insn 861: point = 10
   Insn 860: point = 11
   Insn 859: point = 11
   Insn 858: point = 12
   Insn 857: point = 13
   Insn 856: point = 13
   Insn 855: point = 14
   Insn 854: point = 14
   Insn 853: point = 16
  BB 102
   Insn 851: point = 17
   Insn 850: point = 17
   Insn 849: point = 18
   Insn 848: point = 20
  BB 101
   Insn 846: point = 21
   Insn 845: point = 21
   Insn 844: point = 21
   Insn 969: point = 22
   Insn 843: point = 23
   Insn 842: point = 24
  BB 99
   Insn 966: point = 25
   Insn 826: point = 25
   Insn 825: point = 26
   Insn 824: point = 28
   Insn 820: point = 29
   Insn 819: point = 31
   Insn 818: point = 33
   Insn 817: point = 35
  BB 92
   Insn 958: point = 36
   Insn 744: point = 36
   Insn 743: point = 37
   Insn 742: point = 39
   Insn 738: point = 40
   Insn 737: point = 42
   Insn 736: point = 44
   Insn 735: point = 46
  BB 100
   Insn 839: point = 47
   Insn 838: point = 48
   Insn 837: point = 50
   Insn 833: point = 51
   Insn 832: point = 53
   Insn 831: point = 55
  BB 98
   Insn 815: point = 56
   Insn 814: point = 56
   Insn 813: point = 57
   Insn 812: point = 58
   Insn 811: point = 58
   Insn 810: point = 59
   Insn 809: point = 59
  BB 97
   Insn 964: point = 60
   Insn 804: point = 60
   Insn 803: point = 61
   Insn 802: point = 63
   Insn 798: point = 64
   Insn 797: point = 66
   Insn 796: point = 68
   Insn 795: point = 70
  BB 96
   Insn 793: point = 71
   Insn 792: point = 71
   Insn 791: point = 72
   Insn 790: point = 73
   Insn 789: point = 73
   Insn 788: point = 74
   Insn 787: point = 74
  BB 95
   Insn 962: point = 75
   Insn 780: point = 75
   Insn 779: point = 76
   Insn 778: point = 78
   Insn 774: point = 79
   Insn 773: point = 81
   Insn 772: point = 83
   Insn 771: point = 85
  BB 94
   Insn 960: point = 86
   Insn 766: point = 86
   Insn 765: point = 87
   Insn 764: point = 89
   Insn 760: point = 90
   Insn 759: point = 92
   Insn 758: point = 94
   Insn 757: point = 96
  BB 93
   Insn 755: point = 97
   Insn 754: point = 97
   Insn 753: point = 98
   Insn 752: point = 99
   Insn 751: point = 99
   Insn 750: point = 100
   Insn 749: point = 100
  BB 91
   Insn 733: point = 101
   Insn 732: point = 101
   Insn 731: point = 102
   Insn 730: point = 103
   Insn 729: point = 103
   Insn 728: point = 104
   Insn 727: point = 104
  BB 90
   Insn 725: point = 105
   Insn 724: point = 105
   Insn 723: point = 106
   Insn 722: point = 107
   Insn 721: point = 107
   Insn 720: point = 108
   Insn 719: point = 108
   Insn 718: point = 109
  BB 89
   Insn 715: point = 109
   Insn 714: point = 109
  BB 88
   Insn 712: point = 109
   Insn 711: point = 109
  BB 87
   Insn 708: point = 109
   Insn 707: point = 109
   Insn 706: point = 110
  BB 86
   Insn 704: point = 111
   Insn 703: point = 111
  BB 85
   Insn 700: point = 111
   Insn 699: point = 111
   Insn 698: point = 112
   Insn 697: point = 113
   Insn 696: point = 114
   Insn 695: point = 116
  BB 84
   Insn 693: point = 117
   Insn 692: point = 117
   Insn 691: point = 118
   Insn 690: point = 119
   Insn 689: point = 119
   Insn 688: point = 120
   Insn 687: point = 121
   Insn 686: point = 121
   Insn 685: point = 122
   Insn 684: point = 122
   Insn 683: point = 124
  BB 83
   Insn 681: point = 125
   Insn 680: point = 125
   Insn 679: point = 126
   Insn 678: point = 128
   Insn 677: point = 129
   Insn 676: point = 130
   Insn 675: point = 130
   Insn 674: point = 130
  BB 81
   Insn 956: point = 131
   Insn 658: point = 131
   Insn 657: point = 132
   Insn 656: point = 134
   Insn 652: point = 135
   Insn 651: point = 137
   Insn 650: point = 139
   Insn 649: point = 141
  BB 74
   Insn 948: point = 142
   Insn 576: point = 142
   Insn 575: point = 143
   Insn 574: point = 145
   Insn 570: point = 146
   Insn 569: point = 148
   Insn 568: point = 150
   Insn 567: point = 152
  BB 82
   Insn 671: point = 153
   Insn 670: point = 154
   Insn 669: point = 156
   Insn 665: point = 157
   Insn 664: point = 159
   Insn 663: point = 161
  BB 80
   Insn 647: point = 162
   Insn 646: point = 162
   Insn 645: point = 163
   Insn 644: point = 164
   Insn 643: point = 164
   Insn 642: point = 165
   Insn 641: point = 165
  BB 79
   Insn 954: point = 166
   Insn 636: point = 166
   Insn 635: point = 167
   Insn 634: point = 169
   Insn 630: point = 170
   Insn 629: point = 172
   Insn 628: point = 174
   Insn 627: point = 176
  BB 78
   Insn 625: point = 177
   Insn 624: point = 177
   Insn 623: point = 178
   Insn 622: point = 179
   Insn 621: point = 179
   Insn 620: point = 180
   Insn 619: point = 180
  BB 77
   Insn 952: point = 181
   Insn 612: point = 181
   Insn 611: point = 182
   Insn 610: point = 184
   Insn 606: point = 185
   Insn 605: point = 187
   Insn 604: point = 189
   Insn 603: point = 191
  BB 76
   Insn 950: point = 192
   Insn 598: point = 192
   Insn 597: point = 193
   Insn 596: point = 195
   Insn 592: point = 196
   Insn 591: point = 198
   Insn 590: point = 200
   Insn 589: point = 202
  BB 75
   Insn 587: point = 203
   Insn 586: point = 203
   Insn 585: point = 204
   Insn 584: point = 205
   Insn 583: point = 205
   Insn 582: point = 206
   Insn 581: point = 206
  BB 73
   Insn 565: point = 207
   Insn 564: point = 207
   Insn 563: point = 208
   Insn 562: point = 209
   Insn 561: point = 209
   Insn 560: point = 210
   Insn 559: point = 210
  BB 72
   Insn 557: point = 211
   Insn 556: point = 211
   Insn 555: point = 212
   Insn 554: point = 213
   Insn 553: point = 213
   Insn 552: point = 214
   Insn 551: point = 214
  BB 71
   Insn 548: point = 215
   Insn 547: point = 215
  BB 70
   Insn 545: point = 215
   Insn 544: point = 215
  BB 65
   Insn 944: point = 215
  BB 64
   Insn 507: point = 215
   Insn 506: point = 215
  BB 62
   Insn 941: point = 215
   Insn 483: point = 215
  BB 63
   Insn 502: point = 215
   Insn 501: point = 215
   Insn 500: point = 216
   Insn 499: point = 218
   Insn 498: point = 219
   Insn 497: point = 221
   Insn 496: point = 222
   Insn 495: point = 222
   Insn 494: point = 223
   Insn 493: point = 225
   Insn 492: point = 227
   Insn 491: point = 229
   Insn 490: point = 230
   Insn 489: point = 232
   Insn 488: point = 234
   Insn 487: point = 235
  BB 46
   Insn 924: point = 236
  BB 45
   Insn 371: point = 236
   Insn 370: point = 236
  BB 43
   Insn 921: point = 236
   Insn 347: point = 236
  BB 44
   Insn 366: point = 236
   Insn 365: point = 236
   Insn 364: point = 237
   Insn 363: point = 239
   Insn 362: point = 240
   Insn 361: point = 242
   Insn 360: point = 243
   Insn 359: point = 243
   Insn 358: point = 244
   Insn 357: point = 246
   Insn 356: point = 248
   Insn 355: point = 250
   Insn 354: point = 251
   Insn 353: point = 253
   Insn 352: point = 255
   Insn 351: point = 256
  BB 50
   Insn 929: point = 257
  BB 49
   Insn 401: point = 257
   Insn 400: point = 257
  BB 47
   Insn 926: point = 257
   Insn 377: point = 257
  BB 42
   Insn 345: point = 257
   Insn 344: point = 257
   Insn 343: point = 258
   Insn 342: point = 260
   Insn 341: point = 262
   Insn 340: point = 263
   Insn 339: point = 265
  BB 48
   Insn 396: point = 266
   Insn 395: point = 266
   Insn 394: point = 267
   Insn 393: point = 269
   Insn 392: point = 270
   Insn 391: point = 272
   Insn 390: point = 273
   Insn 389: point = 273
   Insn 388: point = 274
   Insn 387: point = 276
   Insn 386: point = 278
   Insn 385: point = 280
   Insn 384: point = 281
   Insn 383: point = 283
   Insn 382: point = 285
   Insn 381: point = 286
  BB 61
   Insn 939: point = 287
  BB 60
   Insn 477: point = 287
   Insn 476: point = 287
  BB 58
   Insn 936: point = 287
   Insn 453: point = 287
  BB 57
   Insn 451: point = 287
   Insn 450: point = 287
   Insn 449: point = 288
   Insn 448: point = 290
   Insn 447: point = 292
   Insn 446: point = 293
   Insn 445: point = 295
  BB 59
   Insn 472: point = 296
   Insn 471: point = 296
   Insn 470: point = 297
   Insn 469: point = 299
   Insn 468: point = 300
   Insn 467: point = 302
   Insn 466: point = 303
   Insn 465: point = 303
   Insn 464: point = 304
   Insn 463: point = 306
   Insn 462: point = 308
   Insn 461: point = 310
   Insn 460: point = 311
   Insn 459: point = 313
   Insn 458: point = 315
   Insn 457: point = 316
  BB 69
   Insn 541: point = 317
   Insn 540: point = 317
  BB 67
   Insn 946: point = 317
   Insn 517: point = 317
  BB 68
   Insn 536: point = 317
   Insn 535: point = 317
   Insn 534: point = 318
   Insn 533: point = 320
   Insn 532: point = 321
   Insn 531: point = 323
   Insn 530: point = 324
   Insn 529: point = 324
   Insn 528: point = 325
   Insn 527: point = 327
   Insn 526: point = 329
   Insn 525: point = 331
   Insn 524: point = 332
   Insn 523: point = 334
   Insn 522: point = 336
   Insn 521: point = 337
  BB 66
   Insn 515: point = 338
   Insn 514: point = 338
   Insn 513: point = 339
  BB 56
   Insn 443: point = 340
   Insn 442: point = 340
   Insn 441: point = 341
  BB 55
   Insn 934: point = 342
  BB 54
   Insn 435: point = 342
   Insn 434: point = 342
  BB 52
   Insn 931: point = 342
   Insn 411: point = 342
  BB 53
   Insn 430: point = 342
   Insn 429: point = 342
   Insn 428: point = 343
   Insn 427: point = 345
   Insn 426: point = 346
   Insn 425: point = 348
   Insn 424: point = 349
   Insn 423: point = 349
   Insn 422: point = 350
   Insn 421: point = 352
   Insn 420: point = 354
   Insn 419: point = 356
   Insn 418: point = 357
   Insn 417: point = 359
   Insn 416: point = 361
   Insn 415: point = 362
  BB 51
   Insn 409: point = 363
   Insn 408: point = 363
   Insn 407: point = 364
  BB 41
   Insn 337: point = 365
   Insn 336: point = 365
   Insn 335: point = 366
  BB 40
   Insn 333: point = 367
   Insn 332: point = 367
   Insn 331: point = 368
   Insn 330: point = 369
   Insn 329: point = 369
   Insn 328: point = 370
   Insn 327: point = 370
  BB 35
   Insn 917: point = 371
  BB 34
   Insn 290: point = 371
   Insn 289: point = 371
  BB 32
   Insn 914: point = 371
   Insn 266: point = 371
  BB 33
   Insn 285: point = 371
   Insn 284: point = 371
   Insn 283: point = 372
   Insn 282: point = 374
   Insn 281: point = 375
   Insn 280: point = 377
   Insn 279: point = 378
   Insn 278: point = 378
   Insn 277: point = 379
   Insn 276: point = 381
   Insn 275: point = 383
   Insn 274: point = 385
   Insn 273: point = 386
   Insn 272: point = 388
   Insn 271: point = 390
   Insn 270: point = 391
  BB 16
   Insn 897: point = 392
  BB 15
   Insn 154: point = 392
   Insn 153: point = 392
  BB 13
   Insn 894: point = 392
   Insn 130: point = 392
  BB 14
   Insn 149: point = 392
   Insn 148: point = 392
   Insn 147: point = 393
   Insn 146: point = 395
   Insn 145: point = 396
   Insn 144: point = 398
   Insn 143: point = 399
   Insn 142: point = 399
   Insn 141: point = 400
   Insn 140: point = 402
   Insn 139: point = 404
   Insn 138: point = 406
   Insn 137: point = 407
   Insn 136: point = 409
   Insn 135: point = 411
   Insn 134: point = 412
  BB 20
   Insn 902: point = 413
  BB 19
   Insn 184: point = 413
   Insn 183: point = 413
  BB 17
   Insn 899: point = 413
   Insn 160: point = 413
  BB 12
   Insn 128: point = 413
   Insn 127: point = 413
   Insn 126: point = 414
   Insn 125: point = 416
   Insn 124: point = 418
   Insn 123: point = 419
   Insn 122: point = 421
  BB 18
   Insn 179: point = 422
   Insn 178: point = 422
   Insn 177: point = 423
   Insn 176: point = 425
   Insn 175: point = 426
   Insn 174: point = 428
   Insn 173: point = 429
   Insn 172: point = 429
   Insn 171: point = 430
   Insn 170: point = 432
   Insn 169: point = 434
   Insn 168: point = 436
   Insn 167: point = 437
   Insn 166: point = 439
   Insn 165: point = 441
   Insn 164: point = 442
  BB 31
   Insn 912: point = 443
  BB 30
   Insn 260: point = 443
   Insn 259: point = 443
  BB 28
   Insn 909: point = 443
   Insn 236: point = 443
  BB 27
   Insn 234: point = 443
   Insn 233: point = 443
   Insn 232: point = 444
   Insn 231: point = 446
   Insn 230: point = 448
   Insn 229: point = 449
   Insn 228: point = 451
  BB 29
   Insn 255: point = 452
   Insn 254: point = 452
   Insn 253: point = 453
   Insn 252: point = 455
   Insn 251: point = 456
   Insn 250: point = 458
   Insn 249: point = 459
   Insn 248: point = 459
   Insn 247: point = 460
   Insn 246: point = 462
   Insn 245: point = 464
   Insn 244: point = 466
   Insn 243: point = 467
   Insn 242: point = 469
   Insn 241: point = 471
   Insn 240: point = 472
  BB 39
   Insn 324: point = 473
   Insn 323: point = 473
  BB 37
   Insn 919: point = 473
   Insn 300: point = 473
  BB 38
   Insn 319: point = 473
   Insn 318: point = 473
   Insn 317: point = 474
   Insn 316: point = 476
   Insn 315: point = 477
   Insn 314: point = 479
   Insn 313: point = 480
   Insn 312: point = 480
   Insn 311: point = 481
   Insn 310: point = 483
   Insn 309: point = 485
   Insn 308: point = 487
   Insn 307: point = 488
   Insn 306: point = 490
   Insn 305: point = 492
   Insn 304: point = 493
  BB 36
   Insn 298: point = 494
   Insn 297: point = 494
   Insn 296: point = 495
  BB 26
   Insn 226: point = 496
   Insn 225: point = 496
   Insn 224: point = 497
  BB 25
   Insn 907: point = 498
  BB 24
   Insn 218: point = 498
   Insn 217: point = 498
  BB 22
   Insn 904: point = 498
   Insn 194: point = 498
  BB 23
   Insn 213: point = 498
   Insn 212: point = 498
   Insn 211: point = 499
   Insn 210: point = 501
   Insn 209: point = 502
   Insn 208: point = 504
   Insn 207: point = 505
   Insn 206: point = 505
   Insn 205: point = 506
   Insn 204: point = 508
   Insn 203: point = 510
   Insn 202: point = 512
   Insn 201: point = 513
   Insn 200: point = 515
   Insn 199: point = 517
   Insn 198: point = 518
  BB 21
   Insn 192: point = 519
   Insn 191: point = 519
   Insn 190: point = 520
  BB 11
   Insn 120: point = 521
   Insn 119: point = 521
   Insn 118: point = 522
  BB 10
   Insn 116: point = 523
   Insn 115: point = 523
   Insn 114: point = 524
   Insn 113: point = 525
   Insn 112: point = 525
   Insn 111: point = 526
   Insn 110: point = 526
  BB 9
   Insn 107: point = 527
   Insn 106: point = 527
  BB 7
   Insn 892: point = 527
   Insn 83: point = 527
  BB 8
   Insn 102: point = 527
   Insn 101: point = 527
   Insn 100: point = 528
   Insn 99: point = 530
   Insn 98: point = 531
   Insn 97: point = 533
   Insn 96: point = 534
   Insn 95: point = 534
   Insn 94: point = 535
   Insn 93: point = 537
   Insn 92: point = 539
   Insn 91: point = 541
   Insn 90: point = 542
   Insn 89: point = 544
   Insn 88: point = 546
   Insn 87: point = 547
  BB 6
   Insn 81: point = 548
   Insn 80: point = 548
   Insn 79: point = 549
  BB 5
   Insn 76: point = 550
   Insn 75: point = 550
  BB 3
   Insn 890: point = 550
   Insn 52: point = 550
  BB 4
   Insn 71: point = 550
   Insn 70: point = 550
   Insn 69: point = 551
   Insn 68: point = 553
   Insn 67: point = 554
   Insn 66: point = 556
   Insn 65: point = 557
   Insn 64: point = 557
   Insn 63: point = 558
   Insn 62: point = 560
   Insn 61: point = 562
   Insn 60: point = 564
   Insn 59: point = 565
   Insn 58: point = 567
   Insn 57: point = 569
   Insn 56: point = 570
  BB 2
   Insn 50: point = 571
   Insn 49: point = 571
   Insn 48: point = 572
   Insn 47: point = 573
   Insn 46: point = 574
   Insn 45: point = 576
   Insn 44: point = 577
   Insn 43: point = 577
   Insn 42: point = 578
   Insn 41: point = 580
   Insn 40: point = 581
   Insn 39: point = 582
   Insn 38: point = 584
   Insn 37: point = 585
   Insn 36: point = 585
   Insn 35: point = 586
   Insn 34: point = 588
   Insn 33: point = 589
   Insn 32: point = 589
   Insn 31: point = 589
   Insn 30: point = 589
   Insn 29: point = 589
   Insn 28: point = 589
   Insn 27: point = 589
   Insn 26: point = 589
   Insn 25: point = 589
   Insn 24: point = 589
   Insn 23: point = 589
   Insn 22: point = 589
   Insn 21: point = 589
   Insn 20: point = 589
   Insn 19: point = 589
   Insn 18: point = 589
   Insn 17: point = 589
   Insn 16: point = 589
   Insn 15: point = 589
   Insn 14: point = 589
   Insn 13: point = 589
   Insn 12: point = 589
   Insn 11: point = 589
   Insn 10: point = 589
   Insn 7: point = 589
   Insn 4: point = 591
   Insn 5: point = 592
   Insn 3: point = 592
   Insn 2: point = 593
 r83: [585..586]
 r84: [583..584]
 r85: [581..582]
 r86: [577..578]
 r87: [575..576]
 r88: [573..574]
 r89: [571..572]
 r90: [566..570]
 r91: [566..567]
 r92: [563..565]
 r93: [559..560]
 r94: [557..558]
 r95: [555..556]
 r96: [550..554]
 r97: [548..549]
 r98: [543..547]
 r99: [543..544]
 r100: [540..542]
 r101: [536..537]
 r102: [534..535]
 r103: [532..533]
 r104: [527..531]
 r105: [523..524]
 r106: [521..522]
 r107: [519..520]
 r108: [514..518]
 r109: [514..515]
 r110: [511..513]
 r111: [507..508]
 r112: [505..506]
 r113: [503..504]
 r114: [498..502]
 r115: [420..421]
 r116: [417..419]
 r117: [413..414]
 r118: [438..442]
 r119: [438..439]
 r120: [435..437]
 r121: [431..432]
 r122: [429..430]
 r123: [427..428]
 r124: [422..426]
 r125: [408..412]
 r126: [408..409]
 r127: [405..407]
 r128: [401..402]
 r129: [399..400]
 r130: [397..398]
 r131: [392..396]
 r132: [496..497]
 r133: [450..451]
 r134: [447..449]
 r135: [443..444]
 r136: [387..391]
 r137: [387..388]
 r138: [384..386]
 r139: [380..381]
 r140: [378..379]
 r141: [376..377]
 r142: [371..375]
 r143: [468..472]
 r144: [468..469]
 r145: [465..467]
 r146: [461..462]
 r147: [459..460]
 r148: [457..458]
 r149: [452..456]
 r150: [494..495]
 r151: [489..493]
 r152: [489..490]
 r153: [486..488]
 r154: [482..483]
 r155: [480..481]
 r156: [478..479]
 r157: [473..477]
 r158: [367..368]
 r159: [365..366]
 r160: [363..364]
 r161: [358..362]
 r162: [358..359]
 r163: [355..357]
 r164: [351..352]
 r165: [349..350]
 r166: [347..348]
 r167: [342..346]
 r168: [264..265]
 r169: [261..263]
 r170: [257..258]
 r171: [282..286]
 r172: [282..283]
 r173: [279..281]
 r174: [275..276]
 r175: [273..274]
 r176: [271..272]
 r177: [266..270]
 r178: [252..256]
 r179: [252..253]
 r180: [249..251]
 r181: [245..246]
 r182: [243..244]
 r183: [241..242]
 r184: [236..240]
 r185: [340..341]
 r186: [294..295]
 r187: [291..293]
 r188: [287..288]
 r189: [231..235]
 r190: [231..232]
 r191: [228..230]
 r192: [224..225]
 r193: [222..223]
 r194: [220..221]
 r195: [215..219]
 r196: [312..316]
 r197: [312..313]
 r198: [309..311]
 r199: [305..306]
 r200: [303..304]
 r201: [301..302]
 r202: [296..300]
 r203: [338..339]
 r204: [333..337]
 r205: [333..334]
 r206: [330..332]
 r207: [326..327]
 r208: [324..325]
 r209: [322..323]
 r210: [317..321]
 r211: [211..212]
 r212: [207..208]
 r213: [151..152]
 r214: [149..150]
 r215: [203..204]
 r216: [201..202]
 r217: [199..200]
 r218: [190..191]
 r219: [188..189]
 r220: [177..178]
 r221: [175..176]
 r222: [173..174]
 r223: [162..163]
 r224: [140..141]
 r225: [138..139]
 r226: [160..161]
 r227: [125..126]
 r228: [121..122]
 r229: [119..120]
 r230: [117..118]
 r231: [111..114]
 r232: [105..106]
 r233: [101..102]
 r234: [45..46]
 r235: [43..44]
 r236: [97..98]
 r237: [95..96]
 r238: [93..94]
 r239: [84..85]
 r240: [82..83]
 r241: [71..72]
 r242: [69..70]
 r243: [67..68]
 r244: [56..57]
 r245: [34..35]
 r246: [32..33]
 r247: [54..55]
 r248: [17..18]
 r249: [13..14]
 r250: [11..12]
 r251: [9..10]
 r252: [3..6]
 r253: [591..592]
 r254: [587..588]
 r255: [579..580]
 r256: [568..569]
 r257: [561..564]
 r258: [561..562]
 r259: [550..551]
 r260: [552..553]
 r261: [545..546]
 r262: [538..541]
 r263: [538..539]
 r264: [527..528]
 r265: [529..530]
 r266: [525..526]
 r267: [415..418]
 r268: [415..416]
 r269: [410..411]
 r270: [403..406]
 r271: [403..404]
 r272: [392..393]
 r273: [394..395]
 r274: [440..441]
 r275: [433..436]
 r276: [433..434]
 r277: [422..423]
 r278: [424..425]
 r279: [516..517]
 r280: [509..512]
 r281: [509..510]
 r282: [498..499]
 r283: [500..501]
 r284: [445..448]
 r285: [445..446]
 r286: [470..471]
 r287: [463..466]
 r288: [463..464]
 r289: [452..453]
 r290: [454..455]
 r291: [389..390]
 r292: [382..385]
 r293: [382..383]
 r294: [371..372]
 r295: [373..374]
 r296: [491..492]
 r297: [484..487]
 r298: [484..485]
 r299: [473..474]
 r300: [475..476]
 r301: [369..370]
 r302: [259..262]
 r303: [259..260]
 r304: [254..255]
 r305: [247..250]
 r306: [247..248]
 r307: [236..237]
 r308: [238..239]
 r309: [284..285]
 r310: [277..280]
 r311: [277..278]
 r312: [266..267]
 r313: [268..269]
 r314: [360..361]
 r315: [353..356]
 r316: [353..354]
 r317: [342..343]
 r318: [344..345]
 r319: [289..292]
 r320: [289..290]
 r321: [314..315]
 r322: [307..310]
 r323: [307..308]
 r324: [296..297]
 r325: [298..299]
 r326: [233..234]
 r327: [226..229]
 r328: [226..227]
 r329: [215..216]
 r330: [217..218]
 r331: [335..336]
 r332: [328..331]
 r333: [328..329]
 r334: [317..318]
 r335: [319..320]
 r336: [213..214]
 r337: [209..210]
 r338: [147..148]
 r339: [144..146]
 r342: [142..143]
 r343: [144..145]
 r344: [205..206]
 r345: [197..198]
 r346: [194..196]
 r349: [192..193]
 r350: [194..195]
 r351: [186..187]
 r352: [183..185]
 r355: [181..182]
 r356: [183..184]
 r357: [179..180]
 r358: [171..172]
 r359: [168..170]
 r362: [166..167]
 r363: [168..169]
 r364: [164..165]
 r365: [136..137]
 r366: [133..135]
 r369: [131..132]
 r370: [133..134]
 r371: [158..159]
 r372: [155..157]
 r375: [153..154]
 r376: [155..156]
 r377: [129..130]
 r378: [127..128]
 r379: [123..124]
 r380: [115..116]
 r381: [112..113]
 r382: [109..110]
 r383: [107..108]
 r384: [103..104]
 r385: [41..42]
 r386: [38..40]
 r389: [36..37]
 r390: [38..39]
 r391: [99..100]
 r392: [91..92]
 r393: [88..90]
 r396: [86..87]
 r397: [88..89]
 r398: [80..81]
 r399: [77..79]
 r402: [75..76]
 r403: [77..78]
 r404: [73..74]
 r405: [65..66]
 r406: [62..64]
 r409: [60..61]
 r410: [62..63]
 r411: [58..59]
 r412: [30..31]
 r413: [27..29]
 r416: [25..26]
 r417: [27..28]
 r418: [52..53]
 r419: [49..51]
 r422: [47..48]
 r423: [49..50]
 r424: [21..24]
 r425: [19..20]
 r426: [15..16]
 r427: [7..8]
 r428: [4..5]
 r429: [1..2]
 r430: [589..590]
 r431: [0..0]
 r432: [22..23]
Compressing live ranges: from 593 to 529 - 89%
Ranges after the compression:
 r83: [521..522]
 r84: [519..520]
 r85: [517..518]
 r86: [513..514]
 r87: [511..512]
 r88: [509..510]
 r89: [507..508]
 r90: [503..506]
 r91: [503..504]
 r92: [501..502]
 r93: [497..498]
 r94: [495..496]
 r95: [493..494]
 r96: [489..492]
 r97: [487..488]
 r98: [483..486]
 r99: [483..484]
 r100: [481..482]
 r101: [477..478]
 r102: [475..476]
 r103: [473..474]
 r104: [469..472]
 r105: [465..466]
 r106: [463..464]
 r107: [461..462]
 r108: [457..460]
 r109: [457..458]
 r110: [455..456]
 r111: [451..452]
 r112: [449..450]
 r113: [447..448]
 r114: [443..446]
 r115: [375..376]
 r116: [373..374]
 r117: [369..370]
 r118: [391..394]
 r119: [391..392]
 r120: [389..390]
 r121: [385..386]
 r122: [383..384]
 r123: [381..382]
 r124: [377..380]
 r125: [365..368]
 r126: [365..366]
 r127: [363..364]
 r128: [359..360]
 r129: [357..358]
 r130: [355..356]
 r131: [351..354]
 r132: [441..442]
 r133: [401..402]
 r134: [399..400]
 r135: [395..396]
 r136: [347..350]
 r137: [347..348]
 r138: [345..346]
 r139: [341..342]
 r140: [339..340]
 r141: [337..338]
 r142: [333..336]
 r143: [417..420]
 r144: [417..418]
 r145: [415..416]
 r146: [411..412]
 r147: [409..410]
 r148: [407..408]
 r149: [403..406]
 r150: [439..440]
 r151: [435..438]
 r152: [435..436]
 r153: [433..434]
 r154: [429..430]
 r155: [427..428]
 r156: [425..426]
 r157: [421..424]
 r158: [329..330]
 r159: [327..328]
 r160: [325..326]
 r161: [321..324]
 r162: [321..322]
 r163: [319..320]
 r164: [315..316]
 r165: [313..314]
 r166: [311..312]
 r167: [307..310]
 r168: [239..240]
 r169: [237..238]
 r170: [233..234]
 r171: [255..258]
 r172: [255..256]
 r173: [253..254]
 r174: [249..250]
 r175: [247..248]
 r176: [245..246]
 r177: [241..244]
 r178: [229..232]
 r179: [229..230]
 r180: [227..228]
 r181: [223..224]
 r182: [221..222]
 r183: [219..220]
 r184: [215..218]
 r185: [305..306]
 r186: [265..266]
 r187: [263..264]
 r188: [259..260]
 r189: [211..214]
 r190: [211..212]
 r191: [209..210]
 r192: [205..206]
 r193: [203..204]
 r194: [201..202]
 r195: [197..200]
 r196: [281..284]
 r197: [281..282]
 r198: [279..280]
 r199: [275..276]
 r200: [273..274]
 r201: [271..272]
 r202: [267..270]
 r203: [303..304]
 r204: [299..302]
 r205: [299..300]
 r206: [297..298]
 r207: [293..294]
 r208: [291..292]
 r209: [289..290]
 r210: [285..288]
 r211: [193..194]
 r212: [189..190]
 r213: [137..138]
 r214: [135..136]
 r215: [185..186]
 r216: [183..184]
 r217: [181..182]
 r218: [173..174]
 r219: [171..172]
 r220: [161..162]
 r221: [159..160]
 r222: [157..158]
 r223: [147..148]
 r224: [127..128]
 r225: [125..126]
 r226: [145..146]
 r227: [113..114]
 r228: [109..110]
 r229: [107..108]
 r230: [105..106]
 r231: [101..102]
 r232: [95..96]
 r233: [91..92]
 r234: [39..40]
 r235: [37..38]
 r236: [87..88]
 r237: [85..86]
 r238: [83..84]
 r239: [75..76]
 r240: [73..74]
 r241: [63..64]
 r242: [61..62]
 r243: [59..60]
 r244: [49..50]
 r245: [29..30]
 r246: [27..28]
 r247: [47..48]
 r248: [15..16]
 r249: [11..12]
 r250: [9..10]
 r251: [7..8]
 r252: [3..4]
 r253: [527..528]
 r254: [523..524]
 r255: [515..516]
 r256: [505..506]
 r257: [499..502]
 r258: [499..500]
 r259: [489..490]
 r260: [491..492]
 r261: [485..486]
 r262: [479..482]
 r263: [479..480]
 r264: [469..470]
 r265: [471..472]
 r266: [467..468]
 r267: [371..374]
 r268: [371..372]
 r269: [367..368]
 r270: [361..364]
 r271: [361..362]
 r272: [351..352]
 r273: [353..354]
 r274: [393..394]
 r275: [387..390]
 r276: [387..388]
 r277: [377..378]
 r278: [379..380]
 r279: [459..460]
 r280: [453..456]
 r281: [453..454]
 r282: [443..444]
 r283: [445..446]
 r284: [397..400]
 r285: [397..398]
 r286: [419..420]
 r287: [413..416]
 r288: [413..414]
 r289: [403..404]
 r290: [405..406]
 r291: [349..350]
 r292: [343..346]
 r293: [343..344]
 r294: [333..334]
 r295: [335..336]
 r296: [437..438]
 r297: [431..434]
 r298: [431..432]
 r299: [421..422]
 r300: [423..424]
 r301: [331..332]
 r302: [235..238]
 r303: [235..236]
 r304: [231..232]
 r305: [225..228]
 r306: [225..226]
 r307: [215..216]
 r308: [217..218]
 r309: [257..258]
 r310: [251..254]
 r311: [251..252]
 r312: [241..242]
 r313: [243..244]
 r314: [323..324]
 r315: [317..320]
 r316: [317..318]
 r317: [307..308]
 r318: [309..310]
 r319: [261..264]
 r320: [261..262]
 r321: [283..284]
 r322: [277..280]
 r323: [277..278]
 r324: [267..268]
 r325: [269..270]
 r326: [213..214]
 r327: [207..210]
 r328: [207..208]
 r329: [197..198]
 r330: [199..200]
 r331: [301..302]
 r332: [295..298]
 r333: [295..296]
 r334: [285..286]
 r335: [287..288]
 r336: [195..196]
 r337: [191..192]
 r338: [133..134]
 r339: [131..132]
 r342: [129..130]
 r343: [131..132]
 r344: [187..188]
 r345: [179..180]
 r346: [177..178]
 r349: [175..176]
 r350: [177..178]
 r351: [169..170]
 r352: [167..168]
 r355: [165..166]
 r356: [167..168]
 r357: [163..164]
 r358: [155..156]
 r359: [153..154]
 r362: [151..152]
 r363: [153..154]
 r364: [149..150]
 r365: [123..124]
 r366: [121..122]
 r369: [119..120]
 r370: [121..122]
 r371: [143..144]
 r372: [141..142]
 r375: [139..140]
 r376: [141..142]
 r377: [117..118]
 r378: [115..116]
 r379: [111..112]
 r380: [103..104]
 r381: [101..102]
 r382: [99..100]
 r383: [97..98]
 r384: [93..94]
 r385: [35..36]
 r386: [33..34]
 r389: [31..32]
 r390: [33..34]
 r391: [89..90]
 r392: [81..82]
 r393: [79..80]
 r396: [77..78]
 r397: [79..80]
 r398: [71..72]
 r399: [69..70]
 r402: [67..68]
 r403: [69..70]
 r404: [65..66]
 r405: [57..58]
 r406: [55..56]
 r409: [53..54]
 r410: [55..56]
 r411: [51..52]
 r412: [25..26]
 r413: [23..24]
 r416: [21..22]
 r417: [23..24]
 r418: [45..46]
 r419: [43..44]
 r422: [41..42]
 r423: [43..44]
 r424: [19..20]
 r425: [17..18]
 r426: [13..14]
 r427: [5..6]
 r428: [3..4]
 r429: [1..2]
 r430: [525..526]
 r431: [0..0]
 r432: [19..20]

********** Assignment #1: **********

	 Assigning to 432 (cl=GENERAL_REGS, orig=432, freq=2, tfirst=432, tfreq=2)...
	   Assign 2 to reload r432 (freq=2)
	 Assigning to 430 (cl=INDEX_REGS, orig=430, freq=1, tfirst=430, tfreq=1)...
	   Assign 0 to reload r430 (freq=1)
	 Assigning to 431 (cl=INDEX_REGS, orig=431, freq=1, tfirst=431, tfreq=1)...
	   Assign 0 to reload r431 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 56
changing reg in insn 59
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 79
changing reg in insn 80
changing reg in insn 87
changing reg in insn 90
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 101
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
changing reg in insn 190
changing reg in insn 191
changing reg in insn 198
changing reg in insn 201
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 209
changing reg in insn 212
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 164
changing reg in insn 167
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 178
changing reg in insn 134
changing reg in insn 137
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 224
changing reg in insn 225
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 270
changing reg in insn 273
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 284
changing reg in insn 240
changing reg in insn 243
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 254
changing reg in insn 296
changing reg in insn 297
changing reg in insn 304
changing reg in insn 307
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 318
changing reg in insn 331
changing reg in insn 332
changing reg in insn 335
changing reg in insn 336
changing reg in insn 407
changing reg in insn 408
changing reg in insn 415
changing reg in insn 418
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 420
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 423
changing reg in insn 425
changing reg in insn 426
changing reg in insn 429
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 342
changing reg in insn 343
changing reg in insn 344
changing reg in insn 381
changing reg in insn 384
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 386
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 392
changing reg in insn 395
changing reg in insn 351
changing reg in insn 354
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 356
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 359
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 441
changing reg in insn 442
changing reg in insn 445
changing reg in insn 446
changing reg in insn 446
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 487
changing reg in insn 490
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 492
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 498
changing reg in insn 501
changing reg in insn 457
changing reg in insn 460
changing reg in insn 459
changing reg in insn 460
changing reg in insn 460
changing reg in insn 462
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 465
changing reg in insn 467
changing reg in insn 468
changing reg in insn 471
changing reg in insn 513
changing reg in insn 514
changing reg in insn 521
changing reg in insn 524
changing reg in insn 523
changing reg in insn 524
changing reg in insn 524
changing reg in insn 526
changing reg in insn 527
changing reg in insn 528
changing reg in insn 528
changing reg in insn 529
changing reg in insn 531
changing reg in insn 532
changing reg in insn 535
changing reg in insn 555
changing reg in insn 556
changing reg in insn 563
changing reg in insn 564
changing reg in insn 567
changing reg in insn 568
changing reg in insn 568
changing reg in insn 569
changing reg in insn 585
changing reg in insn 586
changing reg in insn 589
changing reg in insn 590
changing reg in insn 590
changing reg in insn 591
changing reg in insn 603
changing reg in insn 604
changing reg in insn 604
changing reg in insn 605
changing reg in insn 623
changing reg in insn 624
changing reg in insn 627
changing reg in insn 628
changing reg in insn 628
changing reg in insn 629
changing reg in insn 645
changing reg in insn 646
changing reg in insn 649
changing reg in insn 650
changing reg in insn 650
changing reg in insn 651
changing reg in insn 663
changing reg in insn 664
changing reg in insn 679
changing reg in insn 680
changing reg in insn 684
changing reg in insn 686
changing reg in insn 688
changing reg in insn 689
changing reg in insn 691
changing reg in insn 692
changing reg in insn 696
changing reg in insn 699
changing reg in insn 723
changing reg in insn 724
changing reg in insn 731
changing reg in insn 732
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 737
changing reg in insn 753
changing reg in insn 754
changing reg in insn 757
changing reg in insn 758
changing reg in insn 758
changing reg in insn 759
changing reg in insn 771
changing reg in insn 772
changing reg in insn 772
changing reg in insn 773
changing reg in insn 791
changing reg in insn 792
changing reg in insn 795
changing reg in insn 796
changing reg in insn 796
changing reg in insn 797
changing reg in insn 813
changing reg in insn 814
changing reg in insn 817
changing reg in insn 818
changing reg in insn 818
changing reg in insn 819
changing reg in insn 831
changing reg in insn 832
changing reg in insn 849
changing reg in insn 850
changing reg in insn 854
changing reg in insn 856
changing reg in insn 858
changing reg in insn 859
changing reg in insn 861
changing reg in insn 862
changing reg in insn 866
changing reg in insn 869
changing reg in insn 3
changing reg in insn 34
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 69
changing reg in insn 70
changing reg in insn 68
changing reg in insn 69
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 110
changing reg in insn 112
changing reg in insn 124
changing reg in insn 126
changing reg in insn 125
changing reg in insn 126
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 140
changing reg in insn 139
changing reg in insn 140
changing reg in insn 147
changing reg in insn 148
changing reg in insn 146
changing reg in insn 147
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 170
changing reg in insn 169
changing reg in insn 170
changing reg in insn 177
changing reg in insn 178
changing reg in insn 176
changing reg in insn 177
changing reg in insn 199
changing reg in insn 200
changing reg in insn 202
changing reg in insn 204
changing reg in insn 203
changing reg in insn 204
changing reg in insn 211
changing reg in insn 212
changing reg in insn 210
changing reg in insn 211
changing reg in insn 230
changing reg in insn 232
changing reg in insn 231
changing reg in insn 232
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 246
changing reg in insn 245
changing reg in insn 246
changing reg in insn 253
changing reg in insn 254
changing reg in insn 252
changing reg in insn 253
changing reg in insn 271
changing reg in insn 272
changing reg in insn 274
changing reg in insn 276
changing reg in insn 275
changing reg in insn 276
changing reg in insn 283
changing reg in insn 284
changing reg in insn 282
changing reg in insn 283
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 310
changing reg in insn 309
changing reg in insn 310
changing reg in insn 317
changing reg in insn 318
changing reg in insn 316
changing reg in insn 317
changing reg in insn 327
changing reg in insn 329
changing reg in insn 341
changing reg in insn 343
changing reg in insn 342
changing reg in insn 343
changing reg in insn 352
changing reg in insn 353
changing reg in insn 355
changing reg in insn 357
changing reg in insn 356
changing reg in insn 357
changing reg in insn 364
changing reg in insn 365
changing reg in insn 363
changing reg in insn 364
changing reg in insn 382
changing reg in insn 383
changing reg in insn 385
changing reg in insn 387
changing reg in insn 386
changing reg in insn 387
changing reg in insn 394
changing reg in insn 395
changing reg in insn 393
changing reg in insn 394
changing reg in insn 416
changing reg in insn 417
changing reg in insn 419
changing reg in insn 421
changing reg in insn 420
changing reg in insn 421
changing reg in insn 428
changing reg in insn 429
changing reg in insn 427
changing reg in insn 428
changing reg in insn 447
changing reg in insn 449
changing reg in insn 448
changing reg in insn 449
changing reg in insn 458
changing reg in insn 459
changing reg in insn 461
changing reg in insn 463
changing reg in insn 462
changing reg in insn 463
changing reg in insn 470
changing reg in insn 471
changing reg in insn 469
changing reg in insn 470
changing reg in insn 488
changing reg in insn 489
changing reg in insn 491
changing reg in insn 493
changing reg in insn 492
changing reg in insn 493
changing reg in insn 500
changing reg in insn 501
changing reg in insn 499
changing reg in insn 500
changing reg in insn 522
changing reg in insn 523
changing reg in insn 525
changing reg in insn 527
changing reg in insn 526
changing reg in insn 527
changing reg in insn 534
changing reg in insn 535
changing reg in insn 533
changing reg in insn 534
changing reg in insn 551
changing reg in insn 553
changing reg in insn 559
changing reg in insn 561
changing reg in insn 569
changing reg in insn 570
changing reg in insn 570
changing reg in insn 575
changing reg in insn 575
changing reg in insn 576
changing reg in insn 574
changing reg in insn 581
changing reg in insn 583
changing reg in insn 591
changing reg in insn 592
changing reg in insn 592
changing reg in insn 597
changing reg in insn 597
changing reg in insn 598
changing reg in insn 596
changing reg in insn 605
changing reg in insn 606
changing reg in insn 606
changing reg in insn 611
changing reg in insn 611
changing reg in insn 612
changing reg in insn 610
changing reg in insn 619
changing reg in insn 621
changing reg in insn 629
changing reg in insn 630
changing reg in insn 630
changing reg in insn 635
changing reg in insn 635
changing reg in insn 636
changing reg in insn 634
changing reg in insn 641
changing reg in insn 643
changing reg in insn 651
changing reg in insn 652
changing reg in insn 652
changing reg in insn 657
changing reg in insn 657
changing reg in insn 658
changing reg in insn 656
changing reg in insn 664
changing reg in insn 665
changing reg in insn 665
changing reg in insn 670
changing reg in insn 670
changing reg in insn 671
changing reg in insn 669
changing reg in insn 674
changing reg in insn 677
changing reg in insn 676
changing reg in insn 675
changing reg in insn 678
changing reg in insn 679
changing reg in insn 683
changing reg in insn 684
changing reg in insn 695
changing reg in insn 696
changing reg in insn 697
changing reg in insn 698
changing reg in insn 706
changing reg in insn 707
changing reg in insn 719
changing reg in insn 721
changing reg in insn 727
changing reg in insn 729
changing reg in insn 737
changing reg in insn 738
changing reg in insn 738
changing reg in insn 743
changing reg in insn 743
changing reg in insn 744
changing reg in insn 742
changing reg in insn 749
changing reg in insn 751
changing reg in insn 759
changing reg in insn 760
changing reg in insn 760
changing reg in insn 765
changing reg in insn 765
changing reg in insn 766
changing reg in insn 764
changing reg in insn 773
changing reg in insn 774
changing reg in insn 774
changing reg in insn 779
changing reg in insn 779
changing reg in insn 780
changing reg in insn 778
changing reg in insn 787
changing reg in insn 789
changing reg in insn 797
changing reg in insn 798
changing reg in insn 798
changing reg in insn 803
changing reg in insn 803
changing reg in insn 804
changing reg in insn 802
changing reg in insn 809
changing reg in insn 811
changing reg in insn 819
changing reg in insn 820
changing reg in insn 820
changing reg in insn 825
changing reg in insn 825
changing reg in insn 826
changing reg in insn 824
changing reg in insn 832
changing reg in insn 833
changing reg in insn 833
changing reg in insn 838
changing reg in insn 838
changing reg in insn 839
changing reg in insn 837
changing reg in insn 842
changing reg in insn 844
changing reg in insn 843
changing reg in insn 848
changing reg in insn 849
changing reg in insn 853
changing reg in insn 854
changing reg in insn 865
changing reg in insn 866
changing reg in insn 867
changing reg in insn 868
changing reg in insn 876
changing reg in insn 877
changing reg in insn 7
changing reg in insn 882
deleting insn with uid = 38.
deleting insn with uid = 45.
deleting insn with uid = 66.
deleting insn with uid = 97.
deleting insn with uid = 114.
deleting insn with uid = 144.
deleting insn with uid = 174.
deleting insn with uid = 208.
deleting insn with uid = 250.
deleting insn with uid = 280.
deleting insn with uid = 314.
deleting insn with uid = 331.
deleting insn with uid = 361.
deleting insn with uid = 391.
deleting insn with uid = 425.
deleting insn with uid = 467.
deleting insn with uid = 497.
deleting insn with uid = 531.
deleting insn with uid = 555.
deleting insn with uid = 563.
deleting insn with uid = 585.
deleting insn with uid = 623.
deleting insn with uid = 645.
deleting insn with uid = 688.
deleting insn with uid = 723.
deleting insn with uid = 731.
deleting insn with uid = 753.
deleting insn with uid = 791.
deleting insn with uid = 813.
deleting insn with uid = 858.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 207.
verify found no changes in insn with uid = 249.
verify found no changes in insn with uid = 279.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 330.
verify found no changes in insn with uid = 360.
verify found no changes in insn with uid = 390.
verify found no changes in insn with uid = 424.
verify found no changes in insn with uid = 466.
verify found no changes in insn with uid = 496.
verify found no changes in insn with uid = 530.
verify found no changes in insn with uid = 554.
verify found no changes in insn with uid = 562.
verify found no changes in insn with uid = 584.
verify found no changes in insn with uid = 622.
verify found no changes in insn with uid = 644.
verify found no changes in insn with uid = 687.
verify found no changes in insn with uid = 700.
verify found no changes in insn with uid = 708.
verify found no changes in insn with uid = 722.
verify found no changes in insn with uid = 730.
verify found no changes in insn with uid = 752.
verify found no changes in insn with uid = 790.
verify found no changes in insn with uid = 812.
verify found no changes in insn with uid = 857.
verify found no changes in insn with uid = 870.
verify found no changes in insn with uid = 878.
verify found no changes in insn with uid = 884.


void check_outfile(IOFiles*, bool, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={257d,252u} r1={110d,75u,12e} r2={37d,1u} r4={52d,17u} r5={70d,35u} r6={1d,358u} r7={1d,144u} r8={35d} r9={35d} r10={35d} r11={35d} r12={35d} r13={35d} r14={35d} r15={35d} r17={190d,54u} r18={35d} r19={35d} r20={1d,1u,34e} r21={36d} r22={36d} r23={36d} r24={36d} r25={36d} r26={36d} r27={36d} r28={36d} r29={35d} r30={35d} r31={35d} r32={35d} r33={35d} r34={35d} r35={35d} r36={35d} r37={36d} r38={36d} r39={35d} r40={35d} r45={35d} r46={35d} r47={35d} r48={35d} r49={35d} r50={35d} r51={35d} r52={35d} r53={35d} r54={35d} r55={35d} r56={35d} r57={35d} r58={35d} r59={35d} r60={35d} r61={35d} r62={35d} r63={35d} r64={35d} r65={35d} r66={35d} r67={35d} r68={35d} r69={35d} r70={35d} r71={35d} r72={35d} r73={35d} r74={35d} r75={35d} r76={35d} 
;;    total ref usage 3882{2899d,937u,46e} in 611{576 regular + 35 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 87 88 89 253 254 255
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
        (reg:DI 5 di [ io_filenames ])) ge2fitman_sup.cpp:505 89 {*movdi_internal}
     (nil))
(insn 3 2 5 2 (set (reg:SI 0 ax [253])
        (reg:SI 4 si [ overwrite ])) ge2fitman_sup.cpp:505 90 {*movsi_internal}
     (nil))
(insn 5 3 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
        (reg:SI 1 dx [ s_u_out ])) ge2fitman_sup.cpp:505 90 {*movsi_internal}
     (nil))
(insn 4 5 6 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
        (reg:QI 0 ax [253])) ge2fitman_sup.cpp:505 93 {*movqi_internal}
     (nil))
(note 6 4 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 6 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.25200+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [430])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:505 964 {stack_tls_protect_set_di}
     (nil))
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 found_extension+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:506 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sup_ext+0 S1 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -63 [0xffffffffffffffc1])) [0 sup_ext+1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -62 [0xffffffffffffffc2])) [0 sup_ext+2 S1 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -61 [0xffffffffffffffc3])) [0 sup_ext+3 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 sup_ext+4 S1 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf+0 S1 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -47 [0xffffffffffffffd1])) [0 sup_suf+1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0 sup_suf+2 S1 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -45 [0xffffffffffffffd3])) [0 sup_suf+3 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 sup_suf+4 S1 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 uns_ext+0 S1 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -31 [0xffffffffffffffe1])) [0 uns_ext+1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 23 22 24 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -30 [0xffffffffffffffe2])) [0 uns_ext+2 S1 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -29 [0xffffffffffffffe3])) [0 uns_ext+3 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 uns_ext+4 S1 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf+0 S1 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 27 26 28 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -15 [0xfffffffffffffff1])) [0 uns_suf+1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 28 27 29 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 uns_suf+2 S1 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 29 28 30 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 uns_suf+3 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 30 29 31 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 uns_suf+4 S1 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 31 30 32 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:514 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:514 90 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:517 89 {*movdi_internal}
     (nil))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:519 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.25194 ] [83])
                (plus:DI (reg/f:DI 0 ax [254])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:519 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 36 35 37 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 D.25194 ] [83])) ge2fitman_sup.cpp:519 89 {*movdi_internal}
     (nil))
(call_insn/i 37 36 39 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2b7594529200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:519 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 37 40 2 (set (reg:SI 0 ax [orig:85 D.25196 ] [85])
        (reg:SI 0 ax [orig:84 D.25195 ] [84])) ge2fitman_sup.cpp:519 90 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])
        (reg:SI 0 ax [orig:85 D.25196 ] [85])) ge2fitman_sup.cpp:519 90 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:520 89 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.25194 ] [86])
                (plus:DI (reg/f:DI 0 ax [255])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:520 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 43 42 44 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:86 D.25194 ] [86])) ge2fitman_sup.cpp:520 89 {*movdi_internal}
     (nil))
(call_insn/i 44 43 46 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2b7594529200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:520 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 46 44 47 2 (set (reg:SI 0 ax [orig:88 D.25196 ] [88])
        (reg:SI 0 ax [orig:87 D.25195 ] [87])) ge2fitman_sup.cpp:520 90 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])
        (reg:SI 0 ax [orig:88 D.25196 ] [88])) ge2fitman_sup.cpp:520 90 {*movsi_internal}
     (nil))
(insn 48 47 49 2 (set (reg:SI 0 ax [orig:89 D.25196 ] [89])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:522 90 {*movsi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.25196 ] [89])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:522 7 {*cmpsi_1}
     (nil))
(jump_insn 50 49 51 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) ge2fitman_sup.cpp:522 596 {*jcc_1}
     (nil)
 -> 77)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 51 50 52 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 890 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:523 90 {*movsi_internal}
     (nil))
(jump_insn 890 52 891 3 (set (pc)
        (label_ref 72)) ge2fitman_sup.cpp:523 636 {jump}
     (nil)
 -> 72)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 891 890 74)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 90 91 92 93 94 95 96 256 257 258 259 260
(code_label 74 891 55 4 80 "" [1 uses])
(note 55 74 56 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 4 (set (reg:SI 0 ax [orig:90 D.25196 ] [90])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(insn 57 56 58 4 (set (reg:SI 1 dx [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(insn 58 57 59 4 (parallel [
            (set (reg:SI 1 dx [orig:91 D.25196 ] [91])
                (plus:SI (reg:SI 1 dx [256])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:524 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 59 58 60 4 (parallel [
            (set (reg:SI 0 ax [orig:92 D.25196 ] [92])
                (plus:SI (reg:SI 0 ax [orig:90 D.25196 ] [90])
                    (reg:SI 1 dx [orig:91 D.25196 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:524 220 {*addsi_1}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 1 dx [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:524 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 0 ax [258])
        (sign_extend:DI (reg:SI 0 ax [orig:92 D.25196 ] [92]))) ge2fitman_sup.cpp:524 142 {*extendsidi2_rex64}
     (nil))
(insn 62 61 63 4 (set (reg:QI 0 ax [orig:93 D.25197 ] [93])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [257])
                    (reg:DI 0 ax [258]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:524 93 {*movqi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:SI 0 ax [orig:94 D.25196 ] [94])
        (sign_extend:SI (reg:QI 0 ax [orig:93 D.25197 ] [93]))) ge2fitman_sup.cpp:524 148 {extendqisi2}
     (nil))
(insn 64 63 65 4 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:94 D.25196 ] [94])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(call_insn/i 65 64 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:524 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 67 65 68 4 (set (reg:QI 1 dx [orig:96 D.25197 ] [96])
        (reg:QI 0 ax [orig:95 D.25196 ] [95])) ge2fitman_sup.cpp:524 93 {*movqi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:SI 0 ax [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:DI 0 ax [259])
        (sign_extend:DI (reg:SI 0 ax [260]))) ge2fitman_sup.cpp:524 142 {*extendsidi2_rex64}
     (nil))
(insn 70 69 71 4 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [259]))
                (const_int -64 [0xffffffffffffffc0])) [0 sup_ext S1 A8])
        (reg:QI 1 dx [orig:96 D.25197 ] [96])) ge2fitman_sup.cpp:524 93 {*movqi_internal}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:523 220 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 72 71 73 5 79 "" [1 uses])
(note 73 72 75 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 75 73 76 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:523 7 {*cmpsi_1}
     (nil))
(jump_insn 76 75 77 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) ge2fitman_sup.cpp:523 596 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97
(code_label 77 76 78 6 78 "" [1 uses])
(note 78 77 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 6 (set (reg:SI 0 ax [orig:97 D.25196 ] [97])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:528 90 {*movsi_internal}
     (nil))
(insn 80 79 81 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:97 D.25196 ] [97])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:528 7 {*cmpsi_1}
     (nil))
(jump_insn 81 80 82 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) ge2fitman_sup.cpp:528 596 {*jcc_1}
     (nil)
 -> 108)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 82 81 83 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 892 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:529 90 {*movsi_internal}
     (nil))
(jump_insn 892 83 893 7 (set (pc)
        (label_ref 103)) ge2fitman_sup.cpp:529 636 {jump}
     (nil)
 -> 103)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 893 892 105)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 98 99 100 101 102 103 104 261 262 263 264 265
(code_label 105 893 86 8 83 "" [1 uses])
(note 86 105 87 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 8 (set (reg:SI 0 ax [orig:98 D.25196 ] [98])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(insn 88 87 89 8 (set (reg:SI 1 dx [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(insn 89 88 90 8 (parallel [
            (set (reg:SI 1 dx [orig:99 D.25196 ] [99])
                (plus:SI (reg:SI 1 dx [261])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:530 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 90 89 91 8 (parallel [
            (set (reg:SI 0 ax [orig:100 D.25196 ] [100])
                (plus:SI (reg:SI 0 ax [orig:98 D.25196 ] [98])
                    (reg:SI 1 dx [orig:99 D.25196 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:530 220 {*addsi_1}
     (nil))
(insn 91 90 92 8 (set (reg/f:DI 1 dx [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:530 89 {*movdi_internal}
     (nil))
(insn 92 91 93 8 (set (reg:DI 0 ax [263])
        (sign_extend:DI (reg:SI 0 ax [orig:100 D.25196 ] [100]))) ge2fitman_sup.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 93 92 94 8 (set (reg:QI 0 ax [orig:101 D.25197 ] [101])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [262])
                    (reg:DI 0 ax [263]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:530 93 {*movqi_internal}
     (nil))
(insn 94 93 95 8 (set (reg:SI 0 ax [orig:102 D.25196 ] [102])
        (sign_extend:SI (reg:QI 0 ax [orig:101 D.25197 ] [101]))) ge2fitman_sup.cpp:530 148 {extendqisi2}
     (nil))
(insn 95 94 96 8 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:102 D.25196 ] [102])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(call_insn/i 96 95 98 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:530 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 98 96 99 8 (set (reg:QI 1 dx [orig:104 D.25197 ] [104])
        (reg:QI 0 ax [orig:103 D.25196 ] [103])) ge2fitman_sup.cpp:530 93 {*movqi_internal}
     (nil))
(insn 99 98 100 8 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(insn 100 99 101 8 (set (reg:DI 0 ax [264])
        (sign_extend:DI (reg:SI 0 ax [265]))) ge2fitman_sup.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 8 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [264]))
                (const_int -32 [0xffffffffffffffe0])) [0 uns_ext S1 A8])
        (reg:QI 1 dx [orig:104 D.25197 ] [104])) ge2fitman_sup.cpp:530 93 {*movqi_internal}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:529 220 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 103 102 104 9 82 "" [1 uses])
(note 104 103 106 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 106 104 107 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:529 7 {*cmpsi_1}
     (nil))
(jump_insn 107 106 108 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 105)
            (pc))) ge2fitman_sup.cpp:529 596 {*jcc_1}
     (nil)
 -> 105)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 105 266
(code_label 108 107 109 10 81 "" [1 uses])
(note 109 108 110 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 10 (parallel [
            (set (reg:DI 0 ax [266])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:535 221 {*adddi_1}
     (nil))
(insn 111 110 112 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC90") [flags 0x2]  <var_decl 0x2b7595c744c0 *.LC90>)) ge2fitman_sup.cpp:535 89 {*movdi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [266])) ge2fitman_sup.cpp:535 89 {*movdi_internal}
     (nil))
(call_insn/i 113 112 115 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:535 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 115 113 116 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:105 D.25196 ] [105])
            (const_int 0 [0]))) ge2fitman_sup.cpp:535 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 116 115 117 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) ge2fitman_sup.cpp:535 596 {*jcc_1}
     (nil)
 -> 222)
;;  succ:       11 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 11 (set (reg:SI 0 ax [orig:106 D.25196 ] [106])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:536 90 {*movsi_internal}
     (nil))
(insn 119 118 120 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:106 D.25196 ] [106])
            (const_int 8 [0x8]))) ge2fitman_sup.cpp:536 7 {*cmpsi_1}
     (nil))
(jump_insn 120 119 121 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 188)
            (pc))) ge2fitman_sup.cpp:536 596 {*jcc_1}
     (nil)
 -> 188)
;;  succ:       12 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 267 268
(note 121 120 122 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 12 (set (reg:SI 0 ax [orig:115 D.25196 ] [115])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:537 90 {*movsi_internal}
     (nil))
(insn 123 122 124 12 (parallel [
            (set (reg:SI 0 ax [orig:116 D.25196 ] [116])
                (plus:SI (reg:SI 0 ax [orig:115 D.25196 ] [115])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:537 220 {*addsi_1}
     (nil))
(insn 124 123 125 12 (set (reg/f:DI 1 dx [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:537 89 {*movdi_internal}
     (nil))
(insn 125 124 126 12 (set (reg:DI 0 ax [268])
        (sign_extend:DI (reg:SI 0 ax [orig:116 D.25196 ] [116]))) ge2fitman_sup.cpp:537 142 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 12 (set (reg:QI 0 ax [orig:117 D.25197 ] [117])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [267])
                    (reg:DI 0 ax [268]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:537 93 {*movqi_internal}
     (nil))
(insn 127 126 128 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 D.25197 ] [117])
            (const_int 95 [0x5f]))) ge2fitman_sup.cpp:537 5 {*cmpqi_1}
     (nil))
(jump_insn 128 127 129 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) ge2fitman_sup.cpp:537 596 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       13 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 129 128 130 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 894 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:539 90 {*movsi_internal}
     (nil))
(jump_insn 894 130 895 13 (set (pc)
        (label_ref 150)) ge2fitman_sup.cpp:539 636 {jump}
     (nil)
 -> 150)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 895 894 152)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 125 126 127 128 129 130 131 269 270 271 272 273
(code_label 152 895 133 14 88 "" [1 uses])
(note 133 152 134 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 14 (set (reg:SI 0 ax [orig:125 D.25196 ] [125])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(insn 135 134 136 14 (set (reg:SI 1 dx [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(insn 136 135 137 14 (parallel [
            (set (reg:SI 1 dx [orig:126 D.25196 ] [126])
                (plus:SI (reg:SI 1 dx [269])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:540 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -6 [0xfffffffffffffffa]))
        (nil)))
(insn 137 136 138 14 (parallel [
            (set (reg:SI 0 ax [orig:127 D.25196 ] [127])
                (plus:SI (reg:SI 0 ax [orig:125 D.25196 ] [125])
                    (reg:SI 1 dx [orig:126 D.25196 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:540 220 {*addsi_1}
     (nil))
(insn 138 137 139 14 (set (reg/f:DI 1 dx [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:540 89 {*movdi_internal}
     (nil))
(insn 139 138 140 14 (set (reg:DI 0 ax [271])
        (sign_extend:DI (reg:SI 0 ax [orig:127 D.25196 ] [127]))) ge2fitman_sup.cpp:540 142 {*extendsidi2_rex64}
     (nil))
(insn 140 139 141 14 (set (reg:QI 0 ax [orig:128 D.25197 ] [128])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [270])
                    (reg:DI 0 ax [271]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:540 93 {*movqi_internal}
     (nil))
(insn 141 140 142 14 (set (reg:SI 0 ax [orig:129 D.25196 ] [129])
        (sign_extend:SI (reg:QI 0 ax [orig:128 D.25197 ] [128]))) ge2fitman_sup.cpp:540 148 {extendqisi2}
     (nil))
(insn 142 141 143 14 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:129 D.25196 ] [129])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(call_insn/i 143 142 145 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:540 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 145 143 146 14 (set (reg:QI 1 dx [orig:131 D.25197 ] [131])
        (reg:QI 0 ax [orig:130 D.25196 ] [130])) ge2fitman_sup.cpp:540 93 {*movqi_internal}
     (nil))
(insn 146 145 147 14 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(insn 147 146 148 14 (set (reg:DI 0 ax [272])
        (sign_extend:DI (reg:SI 0 ax [273]))) ge2fitman_sup.cpp:540 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 14 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [272]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:131 D.25197 ] [131])) ge2fitman_sup.cpp:540 93 {*movqi_internal}
     (nil))
(insn 149 148 150 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:539 220 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 150 149 151 15 87 "" [1 uses])
(note 151 150 153 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 153 151 154 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:539 7 {*cmpsi_1}
     (nil))
(jump_insn 154 153 896 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 152)
            (pc))) ge2fitman_sup.cpp:539 596 {*jcc_1}
     (nil)
 -> 152)
;;  succ:       14
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 896 154 897 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(jump_insn 897 896 898 16 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 898 897 158)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 158 898 159 17 86 "" [1 uses])
(note 159 158 160 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 899 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:544 90 {*movsi_internal}
     (nil))
(jump_insn 899 160 900 17 (set (pc)
        (label_ref 180)) ge2fitman_sup.cpp:544 636 {jump}
     (nil)
 -> 180)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 900 899 182)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 118 119 120 121 122 123 124 274 275 276 277 278
(code_label 182 900 163 18 91 "" [1 uses])
(note 163 182 164 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 18 (set (reg:SI 0 ax [orig:118 D.25196 ] [118])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(insn 165 164 166 18 (set (reg:SI 1 dx [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(insn 166 165 167 18 (parallel [
            (set (reg:SI 1 dx [orig:119 D.25196 ] [119])
                (plus:SI (reg:SI 1 dx [274])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:545 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
(insn 167 166 168 18 (parallel [
            (set (reg:SI 0 ax [orig:120 D.25196 ] [120])
                (plus:SI (reg:SI 0 ax [orig:118 D.25196 ] [118])
                    (reg:SI 1 dx [orig:119 D.25196 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:545 220 {*addsi_1}
     (nil))
(insn 168 167 169 18 (set (reg/f:DI 1 dx [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:545 89 {*movdi_internal}
     (nil))
(insn 169 168 170 18 (set (reg:DI 0 ax [276])
        (sign_extend:DI (reg:SI 0 ax [orig:120 D.25196 ] [120]))) ge2fitman_sup.cpp:545 142 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 18 (set (reg:QI 0 ax [orig:121 D.25197 ] [121])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [275])
                    (reg:DI 0 ax [276]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:545 93 {*movqi_internal}
     (nil))
(insn 171 170 172 18 (set (reg:SI 0 ax [orig:122 D.25196 ] [122])
        (sign_extend:SI (reg:QI 0 ax [orig:121 D.25197 ] [121]))) ge2fitman_sup.cpp:545 148 {extendqisi2}
     (nil))
(insn 172 171 173 18 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:122 D.25196 ] [122])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(call_insn/i 173 172 175 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:545 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 175 173 176 18 (set (reg:QI 1 dx [orig:124 D.25197 ] [124])
        (reg:QI 0 ax [orig:123 D.25196 ] [123])) ge2fitman_sup.cpp:545 93 {*movqi_internal}
     (nil))
(insn 176 175 177 18 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(insn 177 176 178 18 (set (reg:DI 0 ax [277])
        (sign_extend:DI (reg:SI 0 ax [278]))) ge2fitman_sup.cpp:545 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 18 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [277]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:124 D.25197 ] [124])) ge2fitman_sup.cpp:545 93 {*movqi_internal}
     (nil))
(insn 179 178 180 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:544 220 {*addsi_1}
     (nil))
;;  succ:       19 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU,DFS_BACK)
;;              17 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 180 179 181 19 90 "" [1 uses])
(note 181 180 183 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 183 181 184 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:544 7 {*cmpsi_1}
     (nil))
(jump_insn 184 183 901 19 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 182)
            (pc))) ge2fitman_sup.cpp:544 596 {*jcc_1}
     (nil)
 -> 182)
;;  succ:       18
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 901 184 902 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(jump_insn 902 901 903 20 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 903 902 188)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107
(code_label 188 903 189 21 85 "" [1 uses])
(note 189 188 190 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 190 189 191 21 (set (reg:SI 0 ax [orig:107 D.25196 ] [107])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:549 90 {*movsi_internal}
     (nil))
(insn 191 190 192 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:107 D.25196 ] [107])
            (const_int 6 [0x6]))) ge2fitman_sup.cpp:549 7 {*cmpsi_1}
     (nil))
(jump_insn 192 191 193 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 325)
            (pc))) ge2fitman_sup.cpp:549 596 {*jcc_1}
     (nil)
 -> 325)
;;  succ:       22 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 193 192 194 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 904 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:551 90 {*movsi_internal}
     (nil))
(jump_insn 904 194 905 22 (set (pc)
        (label_ref 214)) ge2fitman_sup.cpp:551 636 {jump}
     (nil)
 -> 214)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 905 904 216)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 108 109 110 111 112 113 114 279 280 281 282 283
(code_label 216 905 197 23 93 "" [1 uses])
(note 197 216 198 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 23 (set (reg:SI 0 ax [orig:108 D.25196 ] [108])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(insn 199 198 200 23 (set (reg:SI 1 dx [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(insn 200 199 201 23 (parallel [
            (set (reg:SI 1 dx [orig:109 D.25196 ] [109])
                (plus:SI (reg:SI 1 dx [279])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:552 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -6 [0xfffffffffffffffa]))
        (nil)))
(insn 201 200 202 23 (parallel [
            (set (reg:SI 0 ax [orig:110 D.25196 ] [110])
                (plus:SI (reg:SI 0 ax [orig:108 D.25196 ] [108])
                    (reg:SI 1 dx [orig:109 D.25196 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:552 220 {*addsi_1}
     (nil))
(insn 202 201 203 23 (set (reg/f:DI 1 dx [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:552 89 {*movdi_internal}
     (nil))
(insn 203 202 204 23 (set (reg:DI 0 ax [281])
        (sign_extend:DI (reg:SI 0 ax [orig:110 D.25196 ] [110]))) ge2fitman_sup.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 23 (set (reg:QI 0 ax [orig:111 D.25197 ] [111])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [280])
                    (reg:DI 0 ax [281]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:552 93 {*movqi_internal}
     (nil))
(insn 205 204 206 23 (set (reg:SI 0 ax [orig:112 D.25196 ] [112])
        (sign_extend:SI (reg:QI 0 ax [orig:111 D.25197 ] [111]))) ge2fitman_sup.cpp:552 148 {extendqisi2}
     (nil))
(insn 206 205 207 23 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:112 D.25196 ] [112])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(call_insn/i 207 206 209 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:552 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 209 207 210 23 (set (reg:QI 1 dx [orig:114 D.25197 ] [114])
        (reg:QI 0 ax [orig:113 D.25196 ] [113])) ge2fitman_sup.cpp:552 93 {*movqi_internal}
     (nil))
(insn 210 209 211 23 (set (reg:SI 0 ax [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(insn 211 210 212 23 (set (reg:DI 0 ax [282])
        (sign_extend:DI (reg:SI 0 ax [283]))) ge2fitman_sup.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 212 211 213 23 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [282]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:114 D.25197 ] [114])) ge2fitman_sup.cpp:552 93 {*movqi_internal}
     (nil))
(insn 213 212 214 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:551 220 {*addsi_1}
     (nil))
;;  succ:       24 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU,DFS_BACK)
;;              22 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 214 213 215 24 92 "" [1 uses])
(note 215 214 217 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 217 215 218 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:551 7 {*cmpsi_1}
     (nil))
(jump_insn 218 217 906 24 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 216)
            (pc))) ge2fitman_sup.cpp:551 596 {*jcc_1}
     (nil)
 -> 216)
;;  succ:       23
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 906 218 907 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 907 906 908 25 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 908 907 222)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132
(code_label 222 908 223 26 84 "" [1 uses])
(note 223 222 224 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 26 (set (reg:SI 0 ax [orig:132 D.25196 ] [132])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:556 90 {*movsi_internal}
     (nil))
(insn 225 224 226 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:132 D.25196 ] [132])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:556 7 {*cmpsi_1}
     (nil))
(jump_insn 226 225 227 26 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) ge2fitman_sup.cpp:556 596 {*jcc_1}
     (nil)
 -> 294)
;;  succ:       27 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 135 284 285
(note 227 226 228 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 27 (set (reg:SI 0 ax [orig:133 D.25196 ] [133])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:557 90 {*movsi_internal}
     (nil))
(insn 229 228 230 27 (parallel [
            (set (reg:SI 0 ax [orig:134 D.25196 ] [134])
                (plus:SI (reg:SI 0 ax [orig:133 D.25196 ] [133])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:557 220 {*addsi_1}
     (nil))
(insn 230 229 231 27 (set (reg/f:DI 1 dx [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:557 89 {*movdi_internal}
     (nil))
(insn 231 230 232 27 (set (reg:DI 0 ax [285])
        (sign_extend:DI (reg:SI 0 ax [orig:134 D.25196 ] [134]))) ge2fitman_sup.cpp:557 142 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 27 (set (reg:QI 0 ax [orig:135 D.25197 ] [135])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [284])
                    (reg:DI 0 ax [285]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:557 93 {*movqi_internal}
     (nil))
(insn 233 232 234 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:135 D.25197 ] [135])
            (const_int 95 [0x5f]))) ge2fitman_sup.cpp:557 5 {*cmpqi_1}
     (nil))
(jump_insn 234 233 235 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 264)
            (pc))) ge2fitman_sup.cpp:557 596 {*jcc_1}
     (nil)
 -> 264)
;;  succ:       28 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 235 234 236 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 909 28 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:559 90 {*movsi_internal}
     (nil))
(jump_insn 909 236 910 28 (set (pc)
        (label_ref 256)) ge2fitman_sup.cpp:559 636 {jump}
     (nil)
 -> 256)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 910 909 258)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 143 144 145 146 147 148 149 286 287 288 289 290
(code_label 258 910 239 29 97 "" [1 uses])
(note 239 258 240 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 240 239 241 29 (set (reg:SI 0 ax [orig:143 D.25196 ] [143])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(insn 241 240 242 29 (set (reg:SI 1 dx [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(insn 242 241 243 29 (parallel [
            (set (reg:SI 1 dx [orig:144 D.25196 ] [144])
                (plus:SI (reg:SI 1 dx [286])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:560 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 243 242 244 29 (parallel [
            (set (reg:SI 0 ax [orig:145 D.25196 ] [145])
                (plus:SI (reg:SI 0 ax [orig:143 D.25196 ] [143])
                    (reg:SI 1 dx [orig:144 D.25196 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:560 220 {*addsi_1}
     (nil))
(insn 244 243 245 29 (set (reg/f:DI 1 dx [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:560 89 {*movdi_internal}
     (nil))
(insn 245 244 246 29 (set (reg:DI 0 ax [288])
        (sign_extend:DI (reg:SI 0 ax [orig:145 D.25196 ] [145]))) ge2fitman_sup.cpp:560 142 {*extendsidi2_rex64}
     (nil))
(insn 246 245 247 29 (set (reg:QI 0 ax [orig:146 D.25197 ] [146])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [287])
                    (reg:DI 0 ax [288]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:560 93 {*movqi_internal}
     (nil))
(insn 247 246 248 29 (set (reg:SI 0 ax [orig:147 D.25196 ] [147])
        (sign_extend:SI (reg:QI 0 ax [orig:146 D.25197 ] [146]))) ge2fitman_sup.cpp:560 148 {extendqisi2}
     (nil))
(insn 248 247 249 29 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:147 D.25196 ] [147])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(call_insn/i 249 248 251 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:560 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 251 249 252 29 (set (reg:QI 1 dx [orig:149 D.25197 ] [149])
        (reg:QI 0 ax [orig:148 D.25196 ] [148])) ge2fitman_sup.cpp:560 93 {*movqi_internal}
     (nil))
(insn 252 251 253 29 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(insn 253 252 254 29 (set (reg:DI 0 ax [289])
        (sign_extend:DI (reg:SI 0 ax [290]))) ge2fitman_sup.cpp:560 142 {*extendsidi2_rex64}
     (nil))
(insn 254 253 255 29 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [289]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:149 D.25197 ] [149])) ge2fitman_sup.cpp:560 93 {*movqi_internal}
     (nil))
(insn 255 254 256 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:559 220 {*addsi_1}
     (nil))
;;  succ:       30 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU,DFS_BACK)
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 256 255 257 30 96 "" [1 uses])
(note 257 256 259 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 259 257 260 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:559 7 {*cmpsi_1}
     (nil))
(jump_insn 260 259 911 30 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) ge2fitman_sup.cpp:559 596 {*jcc_1}
     (nil)
 -> 258)
;;  succ:       29
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 911 260 912 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(jump_insn 912 911 913 31 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 913 912 264)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 264 913 265 32 95 "" [1 uses])
(note 265 264 266 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 266 265 914 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:564 90 {*movsi_internal}
     (nil))
(jump_insn 914 266 915 32 (set (pc)
        (label_ref 286)) ge2fitman_sup.cpp:564 636 {jump}
     (nil)
 -> 286)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 915 914 288)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 136 137 138 139 140 141 142 291 292 293 294 295
(code_label 288 915 269 33 99 "" [1 uses])
(note 269 288 270 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 270 269 271 33 (set (reg:SI 0 ax [orig:136 D.25196 ] [136])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(insn 271 270 272 33 (set (reg:SI 1 dx [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(insn 272 271 273 33 (parallel [
            (set (reg:SI 1 dx [orig:137 D.25196 ] [137])
                (plus:SI (reg:SI 1 dx [291])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:565 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 273 272 274 33 (parallel [
            (set (reg:SI 0 ax [orig:138 D.25196 ] [138])
                (plus:SI (reg:SI 0 ax [orig:136 D.25196 ] [136])
                    (reg:SI 1 dx [orig:137 D.25196 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:565 220 {*addsi_1}
     (nil))
(insn 274 273 275 33 (set (reg/f:DI 1 dx [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:565 89 {*movdi_internal}
     (nil))
(insn 275 274 276 33 (set (reg:DI 0 ax [293])
        (sign_extend:DI (reg:SI 0 ax [orig:138 D.25196 ] [138]))) ge2fitman_sup.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 276 275 277 33 (set (reg:QI 0 ax [orig:139 D.25197 ] [139])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [292])
                    (reg:DI 0 ax [293]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:565 93 {*movqi_internal}
     (nil))
(insn 277 276 278 33 (set (reg:SI 0 ax [orig:140 D.25196 ] [140])
        (sign_extend:SI (reg:QI 0 ax [orig:139 D.25197 ] [139]))) ge2fitman_sup.cpp:565 148 {extendqisi2}
     (nil))
(insn 278 277 279 33 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:140 D.25196 ] [140])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(call_insn/i 279 278 281 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:565 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 281 279 282 33 (set (reg:QI 1 dx [orig:142 D.25197 ] [142])
        (reg:QI 0 ax [orig:141 D.25196 ] [141])) ge2fitman_sup.cpp:565 93 {*movqi_internal}
     (nil))
(insn 282 281 283 33 (set (reg:SI 0 ax [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(insn 283 282 284 33 (set (reg:DI 0 ax [294])
        (sign_extend:DI (reg:SI 0 ax [295]))) ge2fitman_sup.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 284 283 285 33 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [294]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:142 D.25197 ] [142])) ge2fitman_sup.cpp:565 93 {*movqi_internal}
     (nil))
(insn 285 284 286 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:564 220 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              32 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 286 285 287 34 98 "" [1 uses])
(note 287 286 289 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 289 287 290 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:564 7 {*cmpsi_1}
     (nil))
(jump_insn 290 289 916 34 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 288)
            (pc))) ge2fitman_sup.cpp:564 596 {*jcc_1}
     (nil)
 -> 288)
;;  succ:       33
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 916 290 917 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(jump_insn 917 916 918 35 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 918 917 294)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150
(code_label 294 918 295 36 94 "" [1 uses])
(note 295 294 296 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 296 295 297 36 (set (reg:SI 0 ax [orig:150 D.25196 ] [150])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:569 90 {*movsi_internal}
     (nil))
(insn 297 296 298 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:150 D.25196 ] [150])
            (const_int 2 [0x2]))) ge2fitman_sup.cpp:569 7 {*cmpsi_1}
     (nil))
(jump_insn 298 297 299 36 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 325)
            (pc))) ge2fitman_sup.cpp:569 596 {*jcc_1}
     (nil)
 -> 325)
;;  succ:       37 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 299 298 300 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 300 299 919 37 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:570 90 {*movsi_internal}
     (nil))
(jump_insn 919 300 920 37 (set (pc)
        (label_ref 320)) ge2fitman_sup.cpp:570 636 {jump}
     (nil)
 -> 320)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 920 919 322)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 151 152 153 154 155 156 157 296 297 298 299 300
(code_label 322 920 303 38 101 "" [1 uses])
(note 303 322 304 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 38 (set (reg:SI 0 ax [orig:151 D.25196 ] [151])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 305 304 306 38 (set (reg:SI 1 dx [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 306 305 307 38 (parallel [
            (set (reg:SI 1 dx [orig:152 D.25196 ] [152])
                (plus:SI (reg:SI 1 dx [296])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:571 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 307 306 308 38 (parallel [
            (set (reg:SI 0 ax [orig:153 D.25196 ] [153])
                (plus:SI (reg:SI 0 ax [orig:151 D.25196 ] [151])
                    (reg:SI 1 dx [orig:152 D.25196 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:571 220 {*addsi_1}
     (nil))
(insn 308 307 309 38 (set (reg/f:DI 1 dx [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:571 89 {*movdi_internal}
     (nil))
(insn 309 308 310 38 (set (reg:DI 0 ax [298])
        (sign_extend:DI (reg:SI 0 ax [orig:153 D.25196 ] [153]))) ge2fitman_sup.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 310 309 311 38 (set (reg:QI 0 ax [orig:154 D.25197 ] [154])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [297])
                    (reg:DI 0 ax [298]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 311 310 312 38 (set (reg:SI 0 ax [orig:155 D.25196 ] [155])
        (sign_extend:SI (reg:QI 0 ax [orig:154 D.25197 ] [154]))) ge2fitman_sup.cpp:571 148 {extendqisi2}
     (nil))
(insn 312 311 313 38 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:155 D.25196 ] [155])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(call_insn/i 313 312 315 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:571 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 315 313 316 38 (set (reg:QI 1 dx [orig:157 D.25197 ] [157])
        (reg:QI 0 ax [orig:156 D.25196 ] [156])) ge2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 316 315 317 38 (set (reg:SI 0 ax [300])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 317 316 318 38 (set (reg:DI 0 ax [299])
        (sign_extend:DI (reg:SI 0 ax [300]))) ge2fitman_sup.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 318 317 319 38 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [299]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:157 D.25197 ] [157])) ge2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 319 318 320 38 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:570 220 {*addsi_1}
     (nil))
;;  succ:       39 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU,DFS_BACK)
;;              37 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 320 319 321 39 100 "" [1 uses])
(note 321 320 323 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 323 321 324 39 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:570 7 {*cmpsi_1}
     (nil))
(jump_insn 324 323 325 39 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 322)
            (pc))) ge2fitman_sup.cpp:570 596 {*jcc_1}
     (nil)
 -> 322)
;;  succ:       38
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              25 [100.0%] 
;;              36
;;              39 (FALLTHRU)
;;              31 [100.0%] 
;;              20 [100.0%] 
;;              16 [100.0%] 
;;              35 [100.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 158 301
(code_label 325 324 326 40 89 "" [7 uses])
(note 326 325 327 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 327 326 328 40 (parallel [
            (set (reg:DI 0 ax [301])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:577 221 {*adddi_1}
     (nil))
(insn 328 327 329 40 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC90") [flags 0x2]  <var_decl 0x2b7595c744c0 *.LC90>)) ge2fitman_sup.cpp:577 89 {*movdi_internal}
     (nil))
(insn 329 328 330 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [301])) ge2fitman_sup.cpp:577 89 {*movdi_internal}
     (nil))
(call_insn/i 330 329 332 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:577 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 332 330 333 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:158 D.25196 ] [158])
            (const_int 0 [0]))) ge2fitman_sup.cpp:577 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 333 332 334 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 439)
            (pc))) ge2fitman_sup.cpp:577 596 {*jcc_1}
     (nil)
 -> 439)
;;  succ:       41 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159
(note 334 333 335 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 335 334 336 41 (set (reg:SI 0 ax [orig:159 D.25196 ] [159])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:578 90 {*movsi_internal}
     (nil))
(insn 336 335 337 41 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:159 D.25196 ] [159])
            (const_int 8 [0x8]))) ge2fitman_sup.cpp:578 7 {*cmpsi_1}
     (nil))
(jump_insn 337 336 338 41 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) ge2fitman_sup.cpp:578 596 {*jcc_1}
     (nil)
 -> 405)
;;  succ:       42 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 168 169 170 302 303
(note 338 337 339 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 339 338 340 42 (set (reg:SI 0 ax [orig:168 D.25196 ] [168])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:579 90 {*movsi_internal}
     (nil))
(insn 340 339 341 42 (parallel [
            (set (reg:SI 0 ax [orig:169 D.25196 ] [169])
                (plus:SI (reg:SI 0 ax [orig:168 D.25196 ] [168])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:579 220 {*addsi_1}
     (nil))
(insn 341 340 342 42 (set (reg/f:DI 1 dx [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:579 89 {*movdi_internal}
     (nil))
(insn 342 341 343 42 (set (reg:DI 0 ax [303])
        (sign_extend:DI (reg:SI 0 ax [orig:169 D.25196 ] [169]))) ge2fitman_sup.cpp:579 142 {*extendsidi2_rex64}
     (nil))
(insn 343 342 344 42 (set (reg:QI 0 ax [orig:170 D.25197 ] [170])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [302])
                    (reg:DI 0 ax [303]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:579 93 {*movqi_internal}
     (nil))
(insn 344 343 345 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:170 D.25197 ] [170])
            (const_int 95 [0x5f]))) ge2fitman_sup.cpp:579 5 {*cmpqi_1}
     (nil))
(jump_insn 345 344 346 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 375)
            (pc))) ge2fitman_sup.cpp:579 596 {*jcc_1}
     (nil)
 -> 375)
;;  succ:       43 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 346 345 347 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 921 43 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:581 90 {*movsi_internal}
     (nil))
(jump_insn 921 347 922 43 (set (pc)
        (label_ref 367)) ge2fitman_sup.cpp:581 636 {jump}
     (nil)
 -> 367)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 922 921 369)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 178 179 180 181 182 183 184 304 305 306 307 308
(code_label 369 922 350 44 106 "" [1 uses])
(note 350 369 351 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 352 44 (set (reg:SI 0 ax [orig:178 D.25196 ] [178])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(insn 352 351 353 44 (set (reg:SI 1 dx [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(insn 353 352 354 44 (parallel [
            (set (reg:SI 1 dx [orig:179 D.25196 ] [179])
                (plus:SI (reg:SI 1 dx [304])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:582 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -6 [0xfffffffffffffffa]))
        (nil)))
(insn 354 353 355 44 (parallel [
            (set (reg:SI 0 ax [orig:180 D.25196 ] [180])
                (plus:SI (reg:SI 0 ax [orig:178 D.25196 ] [178])
                    (reg:SI 1 dx [orig:179 D.25196 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:582 220 {*addsi_1}
     (nil))
(insn 355 354 356 44 (set (reg/f:DI 1 dx [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:582 89 {*movdi_internal}
     (nil))
(insn 356 355 357 44 (set (reg:DI 0 ax [306])
        (sign_extend:DI (reg:SI 0 ax [orig:180 D.25196 ] [180]))) ge2fitman_sup.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 357 356 358 44 (set (reg:QI 0 ax [orig:181 D.25197 ] [181])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [305])
                    (reg:DI 0 ax [306]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:582 93 {*movqi_internal}
     (nil))
(insn 358 357 359 44 (set (reg:SI 0 ax [orig:182 D.25196 ] [182])
        (sign_extend:SI (reg:QI 0 ax [orig:181 D.25197 ] [181]))) ge2fitman_sup.cpp:582 148 {extendqisi2}
     (nil))
(insn 359 358 360 44 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:182 D.25196 ] [182])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(call_insn/i 360 359 362 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:582 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 362 360 363 44 (set (reg:QI 1 dx [orig:184 D.25197 ] [184])
        (reg:QI 0 ax [orig:183 D.25196 ] [183])) ge2fitman_sup.cpp:582 93 {*movqi_internal}
     (nil))
(insn 363 362 364 44 (set (reg:SI 0 ax [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(insn 364 363 365 44 (set (reg:DI 0 ax [307])
        (sign_extend:DI (reg:SI 0 ax [308]))) ge2fitman_sup.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 365 364 366 44 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [307]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:184 D.25197 ] [184])) ge2fitman_sup.cpp:582 93 {*movqi_internal}
     (nil))
(insn 366 365 367 44 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:581 220 {*addsi_1}
     (nil))
;;  succ:       45 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU,DFS_BACK)
;;              43 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 367 366 368 45 105 "" [1 uses])
(note 368 367 370 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 370 368 371 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:581 7 {*cmpsi_1}
     (nil))
(jump_insn 371 370 923 45 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 369)
            (pc))) ge2fitman_sup.cpp:581 596 {*jcc_1}
     (nil)
 -> 369)
;;  succ:       44
;;              46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 923 371 924 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(jump_insn 924 923 925 46 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 925 924 375)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 375 925 376 47 104 "" [1 uses])
(note 376 375 377 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 926 47 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:586 90 {*movsi_internal}
     (nil))
(jump_insn 926 377 927 47 (set (pc)
        (label_ref 397)) ge2fitman_sup.cpp:586 636 {jump}
     (nil)
 -> 397)
;;  succ:       49 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 927 926 399)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 171 172 173 174 175 176 177 309 310 311 312 313
(code_label 399 927 380 48 109 "" [1 uses])
(note 380 399 381 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 382 48 (set (reg:SI 0 ax [orig:171 D.25196 ] [171])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(insn 382 381 383 48 (set (reg:SI 1 dx [309])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(insn 383 382 384 48 (parallel [
            (set (reg:SI 1 dx [orig:172 D.25196 ] [172])
                (plus:SI (reg:SI 1 dx [309])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:587 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
(insn 384 383 385 48 (parallel [
            (set (reg:SI 0 ax [orig:173 D.25196 ] [173])
                (plus:SI (reg:SI 0 ax [orig:171 D.25196 ] [171])
                    (reg:SI 1 dx [orig:172 D.25196 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:587 220 {*addsi_1}
     (nil))
(insn 385 384 386 48 (set (reg/f:DI 1 dx [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:587 89 {*movdi_internal}
     (nil))
(insn 386 385 387 48 (set (reg:DI 0 ax [311])
        (sign_extend:DI (reg:SI 0 ax [orig:173 D.25196 ] [173]))) ge2fitman_sup.cpp:587 142 {*extendsidi2_rex64}
     (nil))
(insn 387 386 388 48 (set (reg:QI 0 ax [orig:174 D.25197 ] [174])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [310])
                    (reg:DI 0 ax [311]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:587 93 {*movqi_internal}
     (nil))
(insn 388 387 389 48 (set (reg:SI 0 ax [orig:175 D.25196 ] [175])
        (sign_extend:SI (reg:QI 0 ax [orig:174 D.25197 ] [174]))) ge2fitman_sup.cpp:587 148 {extendqisi2}
     (nil))
(insn 389 388 390 48 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:175 D.25196 ] [175])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(call_insn/i 390 389 392 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:587 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 392 390 393 48 (set (reg:QI 1 dx [orig:177 D.25197 ] [177])
        (reg:QI 0 ax [orig:176 D.25196 ] [176])) ge2fitman_sup.cpp:587 93 {*movqi_internal}
     (nil))
(insn 393 392 394 48 (set (reg:SI 0 ax [313])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(insn 394 393 395 48 (set (reg:DI 0 ax [312])
        (sign_extend:DI (reg:SI 0 ax [313]))) ge2fitman_sup.cpp:587 142 {*extendsidi2_rex64}
     (nil))
(insn 395 394 396 48 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [312]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:177 D.25197 ] [177])) ge2fitman_sup.cpp:587 93 {*movqi_internal}
     (nil))
(insn 396 395 397 48 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:586 220 {*addsi_1}
     (nil))
;;  succ:       49 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU,DFS_BACK)
;;              47 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 397 396 398 49 108 "" [1 uses])
(note 398 397 400 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 400 398 401 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:586 7 {*cmpsi_1}
     (nil))
(jump_insn 401 400 928 49 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 399)
            (pc))) ge2fitman_sup.cpp:586 596 {*jcc_1}
     (nil)
 -> 399)
;;  succ:       48
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 928 401 929 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(jump_insn 929 928 930 50 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 930 929 405)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160
(code_label 405 930 406 51 103 "" [1 uses])
(note 406 405 407 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 51 (set (reg:SI 0 ax [orig:160 D.25196 ] [160])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:591 90 {*movsi_internal}
     (nil))
(insn 408 407 409 51 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:160 D.25196 ] [160])
            (const_int 6 [0x6]))) ge2fitman_sup.cpp:591 7 {*cmpsi_1}
     (nil))
(jump_insn 409 408 410 51 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 542)
            (pc))) ge2fitman_sup.cpp:591 596 {*jcc_1}
     (nil)
 -> 542)
;;  succ:       52 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 410 409 411 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 411 410 931 52 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:593 90 {*movsi_internal}
     (nil))
(jump_insn 931 411 932 52 (set (pc)
        (label_ref 431)) ge2fitman_sup.cpp:593 636 {jump}
     (nil)
 -> 431)
;;  succ:       54 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 932 931 433)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 161 162 163 164 165 166 167 314 315 316 317 318
(code_label 433 932 414 53 111 "" [1 uses])
(note 414 433 415 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 415 414 416 53 (set (reg:SI 0 ax [orig:161 D.25196 ] [161])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(insn 416 415 417 53 (set (reg:SI 1 dx [314])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(insn 417 416 418 53 (parallel [
            (set (reg:SI 1 dx [orig:162 D.25196 ] [162])
                (plus:SI (reg:SI 1 dx [314])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:594 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -6 [0xfffffffffffffffa]))
        (nil)))
(insn 418 417 419 53 (parallel [
            (set (reg:SI 0 ax [orig:163 D.25196 ] [163])
                (plus:SI (reg:SI 0 ax [orig:161 D.25196 ] [161])
                    (reg:SI 1 dx [orig:162 D.25196 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:594 220 {*addsi_1}
     (nil))
(insn 419 418 420 53 (set (reg/f:DI 1 dx [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:594 89 {*movdi_internal}
     (nil))
(insn 420 419 421 53 (set (reg:DI 0 ax [316])
        (sign_extend:DI (reg:SI 0 ax [orig:163 D.25196 ] [163]))) ge2fitman_sup.cpp:594 142 {*extendsidi2_rex64}
     (nil))
(insn 421 420 422 53 (set (reg:QI 0 ax [orig:164 D.25197 ] [164])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [315])
                    (reg:DI 0 ax [316]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:594 93 {*movqi_internal}
     (nil))
(insn 422 421 423 53 (set (reg:SI 0 ax [orig:165 D.25196 ] [165])
        (sign_extend:SI (reg:QI 0 ax [orig:164 D.25197 ] [164]))) ge2fitman_sup.cpp:594 148 {extendqisi2}
     (nil))
(insn 423 422 424 53 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:165 D.25196 ] [165])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(call_insn/i 424 423 426 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:594 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 426 424 427 53 (set (reg:QI 1 dx [orig:167 D.25197 ] [167])
        (reg:QI 0 ax [orig:166 D.25196 ] [166])) ge2fitman_sup.cpp:594 93 {*movqi_internal}
     (nil))
(insn 427 426 428 53 (set (reg:SI 0 ax [318])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(insn 428 427 429 53 (set (reg:DI 0 ax [317])
        (sign_extend:DI (reg:SI 0 ax [318]))) ge2fitman_sup.cpp:594 142 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 53 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [317]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:167 D.25197 ] [167])) ge2fitman_sup.cpp:594 93 {*movqi_internal}
     (nil))
(insn 430 429 431 53 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:593 220 {*addsi_1}
     (nil))
;;  succ:       54 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU,DFS_BACK)
;;              52 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 431 430 432 54 110 "" [1 uses])
(note 432 431 434 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 434 432 435 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:593 7 {*cmpsi_1}
     (nil))
(jump_insn 435 434 933 54 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 433)
            (pc))) ge2fitman_sup.cpp:593 596 {*jcc_1}
     (nil)
 -> 433)
;;  succ:       53
;;              55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 933 435 934 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(jump_insn 934 933 935 55 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 935 934 439)
;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 185
(code_label 439 935 440 56 102 "" [1 uses])
(note 440 439 441 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 441 440 442 56 (set (reg:SI 0 ax [orig:185 D.25196 ] [185])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:598 90 {*movsi_internal}
     (nil))
(insn 442 441 443 56 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:185 D.25196 ] [185])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:598 7 {*cmpsi_1}
     (nil))
(jump_insn 443 442 444 56 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 511)
            (pc))) ge2fitman_sup.cpp:598 596 {*jcc_1}
     (nil)
 -> 511)
;;  succ:       57 (FALLTHRU)
;;              66
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 186 187 188 319 320
(note 444 443 445 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 445 444 446 57 (set (reg:SI 0 ax [orig:186 D.25196 ] [186])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:599 90 {*movsi_internal}
     (nil))
(insn 446 445 447 57 (parallel [
            (set (reg:SI 0 ax [orig:187 D.25196 ] [187])
                (plus:SI (reg:SI 0 ax [orig:186 D.25196 ] [186])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:599 220 {*addsi_1}
     (nil))
(insn 447 446 448 57 (set (reg/f:DI 1 dx [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:599 89 {*movdi_internal}
     (nil))
(insn 448 447 449 57 (set (reg:DI 0 ax [320])
        (sign_extend:DI (reg:SI 0 ax [orig:187 D.25196 ] [187]))) ge2fitman_sup.cpp:599 142 {*extendsidi2_rex64}
     (nil))
(insn 449 448 450 57 (set (reg:QI 0 ax [orig:188 D.25197 ] [188])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [319])
                    (reg:DI 0 ax [320]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:599 93 {*movqi_internal}
     (nil))
(insn 450 449 451 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:188 D.25197 ] [188])
            (const_int 95 [0x5f]))) ge2fitman_sup.cpp:599 5 {*cmpqi_1}
     (nil))
(jump_insn 451 450 452 57 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 481)
            (pc))) ge2fitman_sup.cpp:599 596 {*jcc_1}
     (nil)
 -> 481)
;;  succ:       58 (FALLTHRU)
;;              62
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 452 451 453 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 453 452 936 58 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:601 90 {*movsi_internal}
     (nil))
(jump_insn 936 453 937 58 (set (pc)
        (label_ref 473)) ge2fitman_sup.cpp:601 636 {jump}
     (nil)
 -> 473)
;;  succ:       60 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 937 936 475)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 196 197 198 199 200 201 202 321 322 323 324 325
(code_label 475 937 456 59 115 "" [1 uses])
(note 456 475 457 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 457 456 458 59 (set (reg:SI 0 ax [orig:196 D.25196 ] [196])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(insn 458 457 459 59 (set (reg:SI 1 dx [321])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(insn 459 458 460 59 (parallel [
            (set (reg:SI 1 dx [orig:197 D.25196 ] [197])
                (plus:SI (reg:SI 1 dx [321])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:602 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 460 459 461 59 (parallel [
            (set (reg:SI 0 ax [orig:198 D.25196 ] [198])
                (plus:SI (reg:SI 0 ax [orig:196 D.25196 ] [196])
                    (reg:SI 1 dx [orig:197 D.25196 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:602 220 {*addsi_1}
     (nil))
(insn 461 460 462 59 (set (reg/f:DI 1 dx [322])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:602 89 {*movdi_internal}
     (nil))
(insn 462 461 463 59 (set (reg:DI 0 ax [323])
        (sign_extend:DI (reg:SI 0 ax [orig:198 D.25196 ] [198]))) ge2fitman_sup.cpp:602 142 {*extendsidi2_rex64}
     (nil))
(insn 463 462 464 59 (set (reg:QI 0 ax [orig:199 D.25197 ] [199])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [322])
                    (reg:DI 0 ax [323]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:602 93 {*movqi_internal}
     (nil))
(insn 464 463 465 59 (set (reg:SI 0 ax [orig:200 D.25196 ] [200])
        (sign_extend:SI (reg:QI 0 ax [orig:199 D.25197 ] [199]))) ge2fitman_sup.cpp:602 148 {extendqisi2}
     (nil))
(insn 465 464 466 59 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:200 D.25196 ] [200])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(call_insn/i 466 465 468 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:602 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 468 466 469 59 (set (reg:QI 1 dx [orig:202 D.25197 ] [202])
        (reg:QI 0 ax [orig:201 D.25196 ] [201])) ge2fitman_sup.cpp:602 93 {*movqi_internal}
     (nil))
(insn 469 468 470 59 (set (reg:SI 0 ax [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(insn 470 469 471 59 (set (reg:DI 0 ax [324])
        (sign_extend:DI (reg:SI 0 ax [325]))) ge2fitman_sup.cpp:602 142 {*extendsidi2_rex64}
     (nil))
(insn 471 470 472 59 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [324]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:202 D.25197 ] [202])) ge2fitman_sup.cpp:602 93 {*movqi_internal}
     (nil))
(insn 472 471 473 59 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:601 220 {*addsi_1}
     (nil))
;;  succ:       60 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU,DFS_BACK)
;;              58 [100.0%] 
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 473 472 474 60 114 "" [1 uses])
(note 474 473 476 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 476 474 477 60 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:601 7 {*cmpsi_1}
     (nil))
(jump_insn 477 476 938 60 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 475)
            (pc))) ge2fitman_sup.cpp:601 596 {*jcc_1}
     (nil)
 -> 475)
;;  succ:       59
;;              61 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 938 477 939 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(jump_insn 939 938 940 61 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 940 939 481)
;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 481 940 482 62 113 "" [1 uses])
(note 482 481 483 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 483 482 941 62 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:606 90 {*movsi_internal}
     (nil))
(jump_insn 941 483 942 62 (set (pc)
        (label_ref 503)) ge2fitman_sup.cpp:606 636 {jump}
     (nil)
 -> 503)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 942 941 505)
;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 189 190 191 192 193 194 195 326 327 328 329 330
(code_label 505 942 486 63 117 "" [1 uses])
(note 486 505 487 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 487 486 488 63 (set (reg:SI 0 ax [orig:189 D.25196 ] [189])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(insn 488 487 489 63 (set (reg:SI 1 dx [326])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(insn 489 488 490 63 (parallel [
            (set (reg:SI 1 dx [orig:190 D.25196 ] [190])
                (plus:SI (reg:SI 1 dx [326])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:607 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 490 489 491 63 (parallel [
            (set (reg:SI 0 ax [orig:191 D.25196 ] [191])
                (plus:SI (reg:SI 0 ax [orig:189 D.25196 ] [189])
                    (reg:SI 1 dx [orig:190 D.25196 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:607 220 {*addsi_1}
     (nil))
(insn 491 490 492 63 (set (reg/f:DI 1 dx [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:607 89 {*movdi_internal}
     (nil))
(insn 492 491 493 63 (set (reg:DI 0 ax [328])
        (sign_extend:DI (reg:SI 0 ax [orig:191 D.25196 ] [191]))) ge2fitman_sup.cpp:607 142 {*extendsidi2_rex64}
     (nil))
(insn 493 492 494 63 (set (reg:QI 0 ax [orig:192 D.25197 ] [192])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [327])
                    (reg:DI 0 ax [328]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:607 93 {*movqi_internal}
     (nil))
(insn 494 493 495 63 (set (reg:SI 0 ax [orig:193 D.25196 ] [193])
        (sign_extend:SI (reg:QI 0 ax [orig:192 D.25197 ] [192]))) ge2fitman_sup.cpp:607 148 {extendqisi2}
     (nil))
(insn 495 494 496 63 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:193 D.25196 ] [193])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(call_insn/i 496 495 498 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:607 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 498 496 499 63 (set (reg:QI 1 dx [orig:195 D.25197 ] [195])
        (reg:QI 0 ax [orig:194 D.25196 ] [194])) ge2fitman_sup.cpp:607 93 {*movqi_internal}
     (nil))
(insn 499 498 500 63 (set (reg:SI 0 ax [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(insn 500 499 501 63 (set (reg:DI 0 ax [329])
        (sign_extend:DI (reg:SI 0 ax [330]))) ge2fitman_sup.cpp:607 142 {*extendsidi2_rex64}
     (nil))
(insn 501 500 502 63 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [329]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:195 D.25197 ] [195])) ge2fitman_sup.cpp:607 93 {*movqi_internal}
     (nil))
(insn 502 501 503 63 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:606 220 {*addsi_1}
     (nil))
;;  succ:       64 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU,DFS_BACK)
;;              62 [100.0%] 
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 503 502 504 64 116 "" [1 uses])
(note 504 503 506 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 506 504 507 64 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:606 7 {*cmpsi_1}
     (nil))
(jump_insn 507 506 943 64 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 505)
            (pc))) ge2fitman_sup.cpp:606 596 {*jcc_1}
     (nil)
 -> 505)
;;  succ:       63
;;              65 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 943 507 944 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(jump_insn 944 943 945 65 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 945 944 511)
;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 203
(code_label 511 945 512 66 112 "" [1 uses])
(note 512 511 513 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 513 512 514 66 (set (reg:SI 0 ax [orig:203 D.25196 ] [203])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:611 90 {*movsi_internal}
     (nil))
(insn 514 513 515 66 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:203 D.25196 ] [203])
            (const_int 2 [0x2]))) ge2fitman_sup.cpp:611 7 {*cmpsi_1}
     (nil))
(jump_insn 515 514 516 66 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 542)
            (pc))) ge2fitman_sup.cpp:611 596 {*jcc_1}
     (nil)
 -> 542)
;;  succ:       67 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66 (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 516 515 517 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 946 67 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:612 90 {*movsi_internal}
     (nil))
(jump_insn 946 517 947 67 (set (pc)
        (label_ref 537)) ge2fitman_sup.cpp:612 636 {jump}
     (nil)
 -> 537)
;;  succ:       69 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 947 946 539)
;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 204 205 206 207 208 209 210 331 332 333 334 335
(code_label 539 947 520 68 119 "" [1 uses])
(note 520 539 521 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 521 520 522 68 (set (reg:SI 0 ax [orig:204 D.25196 ] [204])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(insn 522 521 523 68 (set (reg:SI 1 dx [331])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(insn 523 522 524 68 (parallel [
            (set (reg:SI 1 dx [orig:205 D.25196 ] [205])
                (plus:SI (reg:SI 1 dx [331])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:613 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 524 523 525 68 (parallel [
            (set (reg:SI 0 ax [orig:206 D.25196 ] [206])
                (plus:SI (reg:SI 0 ax [orig:204 D.25196 ] [204])
                    (reg:SI 1 dx [orig:205 D.25196 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:613 220 {*addsi_1}
     (nil))
(insn 525 524 526 68 (set (reg/f:DI 1 dx [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:613 89 {*movdi_internal}
     (nil))
(insn 526 525 527 68 (set (reg:DI 0 ax [333])
        (sign_extend:DI (reg:SI 0 ax [orig:206 D.25196 ] [206]))) ge2fitman_sup.cpp:613 142 {*extendsidi2_rex64}
     (nil))
(insn 527 526 528 68 (set (reg:QI 0 ax [orig:207 D.25197 ] [207])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [332])
                    (reg:DI 0 ax [333]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) ge2fitman_sup.cpp:613 93 {*movqi_internal}
     (nil))
(insn 528 527 529 68 (set (reg:SI 0 ax [orig:208 D.25196 ] [208])
        (sign_extend:SI (reg:QI 0 ax [orig:207 D.25197 ] [207]))) ge2fitman_sup.cpp:613 148 {extendqisi2}
     (nil))
(insn 529 528 530 68 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:208 D.25196 ] [208])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(call_insn/i 530 529 532 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2b759453db00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:613 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 532 530 533 68 (set (reg:QI 1 dx [orig:210 D.25197 ] [210])
        (reg:QI 0 ax [orig:209 D.25196 ] [209])) ge2fitman_sup.cpp:613 93 {*movqi_internal}
     (nil))
(insn 533 532 534 68 (set (reg:SI 0 ax [335])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(insn 534 533 535 68 (set (reg:DI 0 ax [334])
        (sign_extend:DI (reg:SI 0 ax [335]))) ge2fitman_sup.cpp:613 142 {*extendsidi2_rex64}
     (nil))
(insn 535 534 536 68 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [334]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:210 D.25197 ] [210])) ge2fitman_sup.cpp:613 93 {*movqi_internal}
     (nil))
(insn 536 535 537 68 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:612 220 {*addsi_1}
     (nil))
;;  succ:       69 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU,DFS_BACK)
;;              67 [100.0%] 
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 537 536 538 69 118 "" [1 uses])
(note 538 537 540 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 540 538 541 69 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:612 7 {*cmpsi_1}
     (nil))
(jump_insn 541 540 542 69 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 539)
            (pc))) ge2fitman_sup.cpp:612 596 {*jcc_1}
     (nil)
 -> 539)
;;  succ:       68
;;              70 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;;              55 [100.0%] 
;;              66
;;              69 (FALLTHRU)
;;              61 [100.0%] 
;;              50 [100.0%] 
;;              46 [100.0%] 
;;              65 [100.0%] 
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 542 541 543 70 107 "" [7 uses])
(note 543 542 544 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 544 543 545 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:618 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 545 544 546 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 549)
            (pc))) ge2fitman_sup.cpp:618 596 {*jcc_1}
     (nil)
 -> 549)
;;  succ:       72
;;              71 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 546 545 547 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 547 546 548 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:618 7 {*cmpsi_1}
     (nil))
(jump_insn 548 547 549 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 709)
            (pc))) ge2fitman_sup.cpp:618 596 {*jcc_1}
     (nil)
 -> 709)
;;  succ:       72 (FALLTHRU)
;;              88
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;;              71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 211 336
(code_label 549 548 550 72 120 "" [1 uses])
(note 550 549 551 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 551 550 552 72 (parallel [
            (set (reg:DI 0 ax [336])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:621 221 {*adddi_1}
     (nil))
(insn 552 551 553 72 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC90") [flags 0x2]  <var_decl 0x2b7595c744c0 *.LC90>)) ge2fitman_sup.cpp:621 89 {*movdi_internal}
     (nil))
(insn 553 552 554 72 (set (reg:DI 5 di)
        (reg:DI 0 ax [336])) ge2fitman_sup.cpp:621 89 {*movdi_internal}
     (nil))
(call_insn/i 554 553 556 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:621 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 556 554 557 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:211 D.25196 ] [211])
            (const_int 0 [0]))) ge2fitman_sup.cpp:621 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 557 556 558 72 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 617)
            (pc))) ge2fitman_sup.cpp:621 596 {*jcc_1}
     (nil)
 -> 617)
;;  succ:       73 (FALLTHRU)
;;              78
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 212 337
(note 558 557 559 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 559 558 560 73 (parallel [
            (set (reg:DI 0 ax [337])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:622 221 {*adddi_1}
     (nil))
(insn 560 559 561 73 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC91") [flags 0x2]  <var_decl 0x2b7595c74558 *.LC91>)) ge2fitman_sup.cpp:622 89 {*movdi_internal}
     (nil))
(insn 561 560 562 73 (set (reg:DI 5 di)
        (reg:DI 0 ax [337])) ge2fitman_sup.cpp:622 89 {*movdi_internal}
     (nil))
(call_insn/i 562 561 564 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:622 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 564 562 565 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:212 D.25196 ] [212])
            (const_int 0 [0]))) ge2fitman_sup.cpp:622 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 565 564 566 73 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 579)
            (pc))) ge2fitman_sup.cpp:622 596 {*jcc_1}
     (nil)
 -> 579)
;;  succ:       74 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 213 214 338 339 342 343
(note 566 565 567 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 567 566 568 74 (set (reg:SI 0 ax [orig:213 D.25196 ] [213])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:623 90 {*movsi_internal}
     (nil))
(insn 568 567 569 74 (parallel [
            (set (reg:SI 0 ax [orig:214 D.25196 ] [214])
                (plus:SI (reg:SI 0 ax [orig:213 D.25196 ] [213])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:623 220 {*addsi_1}
     (nil))
(insn 569 568 570 74 (set (reg:DI 0 ax [338])
        (sign_extend:DI (reg:SI 0 ax [orig:214 D.25196 ] [214]))) ge2fitman_sup.cpp:623 142 {*extendsidi2_rex64}
     (nil))
(insn 570 569 574 74 (parallel [
            (set (reg:DI 1 dx [339])
                (plus:DI (reg:DI 0 ax [338])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:623 221 {*adddi_1}
     (nil))
(insn 574 570 575 74 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:623 89 {*movdi_internal}
     (nil))
(insn 575 574 576 74 (parallel [
            (set (reg:DI 0 ax [342])
                (plus:DI (reg/f:DI 0 ax [343])
                    (reg:DI 1 dx [339])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:623 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [339]))
        (nil)))
(insn 576 575 948 74 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [342])) ge2fitman_sup.cpp:623 89 {*movdi_internal}
     (nil))
(jump_insn 948 576 949 74 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 949 948 579)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 215 344
(code_label 579 949 580 75 123 "" [1 uses])
(note 580 579 581 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 581 580 582 75 (parallel [
            (set (reg:DI 0 ax [344])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:624 221 {*adddi_1}
     (nil))
(insn 582 581 583 75 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC92") [flags 0x2]  <var_decl 0x2b7595c745f0 *.LC92>)) ge2fitman_sup.cpp:624 89 {*movdi_internal}
     (nil))
(insn 583 582 584 75 (set (reg:DI 5 di)
        (reg:DI 0 ax [344])) ge2fitman_sup.cpp:624 89 {*movdi_internal}
     (nil))
(call_insn/i 584 583 586 75 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:624 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 586 584 587 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:215 D.25196 ] [215])
            (const_int 0 [0]))) ge2fitman_sup.cpp:624 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 587 586 588 75 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 601)
            (pc))) ge2fitman_sup.cpp:624 596 {*jcc_1}
     (nil)
 -> 601)
;;  succ:       76 (FALLTHRU)
;;              77
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 216 217 345 346 349 350
(note 588 587 589 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 589 588 590 76 (set (reg:SI 0 ax [orig:216 D.25196 ] [216])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:625 90 {*movsi_internal}
     (nil))
(insn 590 589 591 76 (parallel [
            (set (reg:SI 0 ax [orig:217 D.25196 ] [217])
                (plus:SI (reg:SI 0 ax [orig:216 D.25196 ] [216])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:625 220 {*addsi_1}
     (nil))
(insn 591 590 592 76 (set (reg:DI 0 ax [345])
        (sign_extend:DI (reg:SI 0 ax [orig:217 D.25196 ] [217]))) ge2fitman_sup.cpp:625 142 {*extendsidi2_rex64}
     (nil))
(insn 592 591 596 76 (parallel [
            (set (reg:DI 1 dx [346])
                (plus:DI (reg:DI 0 ax [345])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:625 221 {*adddi_1}
     (nil))
(insn 596 592 597 76 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:625 89 {*movdi_internal}
     (nil))
(insn 597 596 598 76 (parallel [
            (set (reg:DI 0 ax [349])
                (plus:DI (reg/f:DI 0 ax [350])
                    (reg:DI 1 dx [346])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:625 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [346]))
        (nil)))
(insn 598 597 950 76 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [349])) ge2fitman_sup.cpp:625 89 {*movdi_internal}
     (nil))
(jump_insn 950 598 951 76 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 951 950 601)
;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 218 219 351 352 355 356
(code_label 601 951 602 77 125 "" [1 uses])
(note 602 601 603 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 603 602 604 77 (set (reg:SI 0 ax [orig:218 D.25196 ] [218])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:627 90 {*movsi_internal}
     (nil))
(insn 604 603 605 77 (parallel [
            (set (reg:SI 0 ax [orig:219 D.25196 ] [219])
                (plus:SI (reg:SI 0 ax [orig:218 D.25196 ] [218])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:627 220 {*addsi_1}
     (nil))
(insn 605 604 606 77 (set (reg:DI 0 ax [351])
        (sign_extend:DI (reg:SI 0 ax [orig:219 D.25196 ] [219]))) ge2fitman_sup.cpp:627 142 {*extendsidi2_rex64}
     (nil))
(insn 606 605 610 77 (parallel [
            (set (reg:DI 1 dx [352])
                (plus:DI (reg:DI 0 ax [351])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:627 221 {*adddi_1}
     (nil))
(insn 610 606 611 77 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:627 89 {*movdi_internal}
     (nil))
(insn 611 610 612 77 (parallel [
            (set (reg:DI 0 ax [355])
                (plus:DI (reg/f:DI 0 ax [356])
                    (reg:DI 1 dx [352])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:627 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [352]))
        (nil)))
(insn 612 611 952 77 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [355])) ge2fitman_sup.cpp:627 89 {*movdi_internal}
     (nil))
(jump_insn 952 612 953 77 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 953 952 617)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 220 357
(code_label 617 953 618 78 122 "" [1 uses])
(note 618 617 619 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 78 (parallel [
            (set (reg:DI 0 ax [357])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:630 221 {*adddi_1}
     (nil))
(insn 620 619 621 78 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC91") [flags 0x2]  <var_decl 0x2b7595c74558 *.LC91>)) ge2fitman_sup.cpp:630 89 {*movdi_internal}
     (nil))
(insn 621 620 622 78 (set (reg:DI 5 di)
        (reg:DI 0 ax [357])) ge2fitman_sup.cpp:630 89 {*movdi_internal}
     (nil))
(call_insn/i 622 621 624 78 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:630 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 624 622 625 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:220 D.25196 ] [220])
            (const_int 0 [0]))) ge2fitman_sup.cpp:630 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 625 624 626 78 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 639)
            (pc))) ge2fitman_sup.cpp:630 596 {*jcc_1}
     (nil)
 -> 639)
;;  succ:       79 (FALLTHRU)
;;              80
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 221 222 358 359 362 363
(note 626 625 627 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 627 626 628 79 (set (reg:SI 0 ax [orig:221 D.25196 ] [221])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:631 90 {*movsi_internal}
     (nil))
(insn 628 627 629 79 (parallel [
            (set (reg:SI 0 ax [orig:222 D.25196 ] [222])
                (plus:SI (reg:SI 0 ax [orig:221 D.25196 ] [221])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:631 220 {*addsi_1}
     (nil))
(insn 629 628 630 79 (set (reg:DI 0 ax [358])
        (sign_extend:DI (reg:SI 0 ax [orig:222 D.25196 ] [222]))) ge2fitman_sup.cpp:631 142 {*extendsidi2_rex64}
     (nil))
(insn 630 629 634 79 (parallel [
            (set (reg:DI 1 dx [359])
                (plus:DI (reg:DI 0 ax [358])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:631 221 {*adddi_1}
     (nil))
(insn 634 630 635 79 (set (reg/f:DI 0 ax [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:631 89 {*movdi_internal}
     (nil))
(insn 635 634 636 79 (parallel [
            (set (reg:DI 0 ax [362])
                (plus:DI (reg/f:DI 0 ax [363])
                    (reg:DI 1 dx [359])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:631 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [359]))
        (nil)))
(insn 636 635 954 79 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [362])) ge2fitman_sup.cpp:631 89 {*movdi_internal}
     (nil))
(jump_insn 954 636 955 79 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 955 954 639)
;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 223 364
(code_label 639 955 640 80 127 "" [1 uses])
(note 640 639 641 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 641 640 642 80 (parallel [
            (set (reg:DI 0 ax [364])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:632 221 {*adddi_1}
     (nil))
(insn 642 641 643 80 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC92") [flags 0x2]  <var_decl 0x2b7595c745f0 *.LC92>)) ge2fitman_sup.cpp:632 89 {*movdi_internal}
     (nil))
(insn 643 642 644 80 (set (reg:DI 5 di)
        (reg:DI 0 ax [364])) ge2fitman_sup.cpp:632 89 {*movdi_internal}
     (nil))
(call_insn/i 644 643 646 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:632 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 646 644 647 80 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:223 D.25196 ] [223])
            (const_int 0 [0]))) ge2fitman_sup.cpp:632 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 647 646 648 80 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 661)
            (pc))) ge2fitman_sup.cpp:632 596 {*jcc_1}
     (nil)
 -> 661)
;;  succ:       81 (FALLTHRU)
;;              82
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 225 365 366 369 370
(note 648 647 649 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 649 648 650 81 (set (reg:SI 0 ax [orig:224 D.25196 ] [224])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:633 90 {*movsi_internal}
     (nil))
(insn 650 649 651 81 (parallel [
            (set (reg:SI 0 ax [orig:225 D.25196 ] [225])
                (plus:SI (reg:SI 0 ax [orig:224 D.25196 ] [224])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:633 220 {*addsi_1}
     (nil))
(insn 651 650 652 81 (set (reg:DI 0 ax [365])
        (sign_extend:DI (reg:SI 0 ax [orig:225 D.25196 ] [225]))) ge2fitman_sup.cpp:633 142 {*extendsidi2_rex64}
     (nil))
(insn 652 651 656 81 (parallel [
            (set (reg:DI 1 dx [366])
                (plus:DI (reg:DI 0 ax [365])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:633 221 {*adddi_1}
     (nil))
(insn 656 652 657 81 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:633 89 {*movdi_internal}
     (nil))
(insn 657 656 658 81 (parallel [
            (set (reg:DI 0 ax [369])
                (plus:DI (reg/f:DI 0 ax [370])
                    (reg:DI 1 dx [366])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:633 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [366]))
        (nil)))
(insn 658 657 956 81 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [369])) ge2fitman_sup.cpp:633 89 {*movdi_internal}
     (nil))
(jump_insn 956 658 957 81 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 957 956 661)
;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 226 371 372 375 376
(code_label 661 957 662 82 128 "" [1 uses])
(note 662 661 663 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 663 662 664 82 (set (reg:SI 0 ax [orig:226 D.25196 ] [226])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:635 90 {*movsi_internal}
     (nil))
(insn 664 663 665 82 (set (reg:DI 0 ax [371])
        (sign_extend:DI (reg:SI 0 ax [orig:226 D.25196 ] [226]))) ge2fitman_sup.cpp:635 142 {*extendsidi2_rex64}
     (nil))
(insn 665 664 669 82 (parallel [
            (set (reg:DI 1 dx [372])
                (plus:DI (reg:DI 0 ax [371])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:635 221 {*adddi_1}
     (nil))
(insn 669 665 670 82 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:635 89 {*movdi_internal}
     (nil))
(insn 670 669 671 82 (parallel [
            (set (reg:DI 0 ax [375])
                (plus:DI (reg/f:DI 0 ax [376])
                    (reg:DI 1 dx [372])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:635 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [372]))
        (nil)))
(insn 671 670 672 82 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [375])) ge2fitman_sup.cpp:635 89 {*movdi_internal}
     (nil))
;;  succ:       83 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 [100.0%] 
;;              77 [100.0%] 
;;              79 [100.0%] 
;;              82 (FALLTHRU)
;;              74 [100.0%] 
;;              81 [100.0%] 
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 227 377 378
(code_label 672 671 673 83 126 "" [5 uses])
(note 673 672 674 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 674 673 675 83 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])) ge2fitman_sup.cpp:639 89 {*movdi_internal}
     (nil))
(insn 675 674 676 83 (set (mem:SI (reg/f:DI 0 ax [377]) [0 MEM[(void *)fname_suffix_2]+0 S4 A8])
        (const_int 1680765791 [0x642e735f])) ge2fitman_sup.cpp:639 90 {*movsi_internal}
     (nil))
(insn 676 675 677 83 (set (mem:HI (plus:DI (reg/f:DI 0 ax [377])
                (const_int 4 [0x4])) [0 MEM[(void *)fname_suffix_2]+4 S2 A8])
        (const_int 29793 [0x7461])) ge2fitman_sup.cpp:639 92 {*movhi_internal}
     (nil))
(insn 677 676 678 83 (set (mem:QI (plus:DI (reg/f:DI 0 ax [377])
                (const_int 6 [0x6])) [0 MEM[(void *)fname_suffix_2]+6 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:639 93 {*movqi_internal}
     (nil))
(insn 678 677 679 83 (set (reg:QI 0 ax [378])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])) ge2fitman_sup.cpp:641 93 {*movqi_internal}
     (nil))
(insn 679 678 680 83 (parallel [
            (set (reg:QI 0 ax [orig:227 D.25198 ] [227])
                (xor:QI (reg:QI 0 ax [378])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:641 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 680 679 681 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:227 D.25198 ] [227])
            (const_int 0 [0]))) ge2fitman_sup.cpp:641 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 681 680 682 83 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 701)
            (pc))) ge2fitman_sup.cpp:641 596 {*jcc_1}
     (nil)
 -> 701)
;;  succ:       84 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83 (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 228 229 230 379
(note 682 681 683 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 683 682 684 84 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(insn 684 683 685 84 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.25194 ] [228])
                (plus:DI (reg/f:DI 0 ax [379])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:643 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 685 684 686 84 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC93") [flags 0x2]  <var_decl 0x2b7595c74688 *.LC93>)) ge2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(insn 686 685 687 84 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:228 D.25194 ] [228])) ge2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(call_insn 687 686 689 84 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b7594752f00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:643 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 689 687 690 84 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:229 D.25199 ] [229])) ge2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(insn 690 689 691 84 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:643 4 {*cmpdi_ccno_1}
     (nil))
(insn 691 690 692 84 (set (reg:QI 0 ax [orig:230 D.25198 ] [230])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_sup.cpp:643 592 {*setcc_qi}
     (nil))
(insn 692 691 693 84 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:230 D.25198 ] [230])
            (const_int 0 [0]))) ge2fitman_sup.cpp:643 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 693 692 694 84 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 701)
            (pc))) ge2fitman_sup.cpp:643 596 {*jcc_1}
     (nil)
 -> 701)
;;  succ:       85 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       84 (FALLTHRU)
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 231 380 381
(note 694 693 695 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 695 694 696 85 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:647 89 {*movdi_internal}
     (nil))
(insn 696 695 697 85 (parallel [
            (set (reg/f:DI 1 dx [orig:231 D.25194 ] [231])
                (plus:DI (reg/f:DI 0 ax [380])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:647 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 697 696 698 85 (set (reg:SI 0 ax [381])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])) ge2fitman_sup.cpp:647 90 {*movsi_internal}
     (nil))
(insn 698 697 699 85 (set (reg:SI 4 si)
        (reg:SI 0 ax [381])) ge2fitman_sup.cpp:647 90 {*movsi_internal}
     (nil))
(insn 699 698 700 85 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:231 D.25194 ] [231])) ge2fitman_sup.cpp:647 89 {*movdi_internal}
     (nil))
(call_insn 700 699 701 85 (call (mem:QI (symbol_ref:DI ("_Z12cond_exit_03Pci") [flags 0x41]  <function_decl 0x2b7595af9600 cond_exit_03>) [0 cond_exit_03 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:647 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       86 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83
;;              85 (FALLTHRU)
;;              84
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 701 700 702 86 129 "" [2 uses])
(note 702 701 703 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 703 702 704 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:651 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 704 703 705 86 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 709)
            (pc))) ge2fitman_sup.cpp:651 596 {*jcc_1}
     (nil)
 -> 709)
;;  succ:       87 (FALLTHRU)
;;              88
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86 (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 382
(note 705 704 706 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 706 705 707 87 (set (reg:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])) ge2fitman_sup.cpp:652 89 {*movdi_internal}
     (nil))
(insn 707 706 708 87 (set (reg:DI 5 di)
        (reg:DI 0 ax [382])) ge2fitman_sup.cpp:652 89 {*movdi_internal}
     (nil))
(call_insn 708 707 709 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b7594752b00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:652 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       88 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71
;;              86
;;              87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 709 708 710 88 121 "" [2 uses])
(note 710 709 711 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 711 710 712 88 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:656 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 712 711 713 88 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 716)
            (pc))) ge2fitman_sup.cpp:656 596 {*jcc_1}
     (nil)
 -> 716)
;;  succ:       90
;;              89 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88 (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 713 712 714 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 714 713 715 89 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 2 [0x2]))) ge2fitman_sup.cpp:656 7 {*cmpsi_1}
     (nil))
(jump_insn 715 714 716 89 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 881)
            (pc))) ge2fitman_sup.cpp:656 596 {*jcc_1}
     (nil)
 -> 881)
;;  succ:       90 (FALLTHRU)
;;              107
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 91, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88
;;              89 (FALLTHRU)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 232 383
(code_label 716 715 717 90 130 "" [1 uses])
(note 717 716 718 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 718 717 719 90 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:658 89 {*movdi_internal}
     (nil))
(insn 719 718 720 90 (parallel [
            (set (reg:DI 0 ax [383])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:660 221 {*adddi_1}
     (nil))
(insn 720 719 721 90 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC90") [flags 0x2]  <var_decl 0x2b7595c744c0 *.LC90>)) ge2fitman_sup.cpp:660 89 {*movdi_internal}
     (nil))
(insn 721 720 722 90 (set (reg:DI 5 di)
        (reg:DI 0 ax [383])) ge2fitman_sup.cpp:660 89 {*movdi_internal}
     (nil))
(call_insn/i 722 721 724 90 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:660 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 724 722 725 90 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:232 D.25196 ] [232])
            (const_int 0 [0]))) ge2fitman_sup.cpp:660 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 725 724 726 90 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 785)
            (pc))) ge2fitman_sup.cpp:660 596 {*jcc_1}
     (nil)
 -> 785)
;;  succ:       91 (FALLTHRU)
;;              96
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 91, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       90 (FALLTHRU)
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 233 384
(note 726 725 727 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 727 726 728 91 (parallel [
            (set (reg:DI 0 ax [384])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:661 221 {*adddi_1}
     (nil))
(insn 728 727 729 91 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC91") [flags 0x2]  <var_decl 0x2b7595c74558 *.LC91>)) ge2fitman_sup.cpp:661 89 {*movdi_internal}
     (nil))
(insn 729 728 730 91 (set (reg:DI 5 di)
        (reg:DI 0 ax [384])) ge2fitman_sup.cpp:661 89 {*movdi_internal}
     (nil))
(call_insn/i 730 729 732 91 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:661 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 732 730 733 91 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:233 D.25196 ] [233])
            (const_int 0 [0]))) ge2fitman_sup.cpp:661 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 733 732 734 91 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 747)
            (pc))) ge2fitman_sup.cpp:661 596 {*jcc_1}
     (nil)
 -> 747)
;;  succ:       92 (FALLTHRU)
;;              93
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 92, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 91, next block 93, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91 (FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 234 235 385 386 389 390
(note 734 733 735 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 735 734 736 92 (set (reg:SI 0 ax [orig:234 D.25196 ] [234])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:662 90 {*movsi_internal}
     (nil))
(insn 736 735 737 92 (parallel [
            (set (reg:SI 0 ax [orig:235 D.25196 ] [235])
                (plus:SI (reg:SI 0 ax [orig:234 D.25196 ] [234])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:662 220 {*addsi_1}
     (nil))
(insn 737 736 738 92 (set (reg:DI 0 ax [385])
        (sign_extend:DI (reg:SI 0 ax [orig:235 D.25196 ] [235]))) ge2fitman_sup.cpp:662 142 {*extendsidi2_rex64}
     (nil))
(insn 738 737 742 92 (parallel [
            (set (reg:DI 1 dx [386])
                (plus:DI (reg:DI 0 ax [385])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:662 221 {*adddi_1}
     (nil))
(insn 742 738 743 92 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:662 89 {*movdi_internal}
     (nil))
(insn 743 742 744 92 (parallel [
            (set (reg:DI 0 ax [389])
                (plus:DI (reg/f:DI 0 ax [390])
                    (reg:DI 1 dx [386])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:662 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [386]))
        (nil)))
(insn 744 743 958 92 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [389])) ge2fitman_sup.cpp:662 89 {*movdi_internal}
     (nil))
(jump_insn 958 744 959 92 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 959 958 747)
;; basic block 93, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 92, next block 94, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 236 391
(code_label 747 959 748 93 133 "" [1 uses])
(note 748 747 749 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 749 748 750 93 (parallel [
            (set (reg:DI 0 ax [391])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:663 221 {*adddi_1}
     (nil))
(insn 750 749 751 93 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC92") [flags 0x2]  <var_decl 0x2b7595c745f0 *.LC92>)) ge2fitman_sup.cpp:663 89 {*movdi_internal}
     (nil))
(insn 751 750 752 93 (set (reg:DI 5 di)
        (reg:DI 0 ax [391])) ge2fitman_sup.cpp:663 89 {*movdi_internal}
     (nil))
(call_insn/i 752 751 754 93 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:663 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 754 752 755 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:236 D.25196 ] [236])
            (const_int 0 [0]))) ge2fitman_sup.cpp:663 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 755 754 756 93 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 769)
            (pc))) ge2fitman_sup.cpp:663 596 {*jcc_1}
     (nil)
 -> 769)
;;  succ:       94 (FALLTHRU)
;;              95
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 94, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 93, next block 95, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93 (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 237 238 392 393 396 397
(note 756 755 757 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 757 756 758 94 (set (reg:SI 0 ax [orig:237 D.25196 ] [237])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:664 90 {*movsi_internal}
     (nil))
(insn 758 757 759 94 (parallel [
            (set (reg:SI 0 ax [orig:238 D.25196 ] [238])
                (plus:SI (reg:SI 0 ax [orig:237 D.25196 ] [237])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:664 220 {*addsi_1}
     (nil))
(insn 759 758 760 94 (set (reg:DI 0 ax [392])
        (sign_extend:DI (reg:SI 0 ax [orig:238 D.25196 ] [238]))) ge2fitman_sup.cpp:664 142 {*extendsidi2_rex64}
     (nil))
(insn 760 759 764 94 (parallel [
            (set (reg:DI 1 dx [393])
                (plus:DI (reg:DI 0 ax [392])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:664 221 {*adddi_1}
     (nil))
(insn 764 760 765 94 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:664 89 {*movdi_internal}
     (nil))
(insn 765 764 766 94 (parallel [
            (set (reg:DI 0 ax [396])
                (plus:DI (reg/f:DI 0 ax [397])
                    (reg:DI 1 dx [393])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:664 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [393]))
        (nil)))
(insn 766 765 960 94 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [396])) ge2fitman_sup.cpp:664 89 {*movdi_internal}
     (nil))
(jump_insn 960 766 961 94 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 961 960 769)
;; basic block 95, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 94, next block 96, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 240 398 399 402 403
(code_label 769 961 770 95 135 "" [1 uses])
(note 770 769 771 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 771 770 772 95 (set (reg:SI 0 ax [orig:239 D.25196 ] [239])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:666 90 {*movsi_internal}
     (nil))
(insn 772 771 773 95 (parallel [
            (set (reg:SI 0 ax [orig:240 D.25196 ] [240])
                (plus:SI (reg:SI 0 ax [orig:239 D.25196 ] [239])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:666 220 {*addsi_1}
     (nil))
(insn 773 772 774 95 (set (reg:DI 0 ax [398])
        (sign_extend:DI (reg:SI 0 ax [orig:240 D.25196 ] [240]))) ge2fitman_sup.cpp:666 142 {*extendsidi2_rex64}
     (nil))
(insn 774 773 778 95 (parallel [
            (set (reg:DI 1 dx [399])
                (plus:DI (reg:DI 0 ax [398])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:666 221 {*adddi_1}
     (nil))
(insn 778 774 779 95 (set (reg/f:DI 0 ax [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:666 89 {*movdi_internal}
     (nil))
(insn 779 778 780 95 (parallel [
            (set (reg:DI 0 ax [402])
                (plus:DI (reg/f:DI 0 ax [403])
                    (reg:DI 1 dx [399])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:666 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [399]))
        (nil)))
(insn 780 779 962 95 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [402])) ge2fitman_sup.cpp:666 89 {*movdi_internal}
     (nil))
(jump_insn 962 780 963 95 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 963 962 785)
;; basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 95, next block 97, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       90
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 241 404
(code_label 785 963 786 96 132 "" [1 uses])
(note 786 785 787 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 787 786 788 96 (parallel [
            (set (reg:DI 0 ax [404])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:669 221 {*adddi_1}
     (nil))
(insn 788 787 789 96 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC91") [flags 0x2]  <var_decl 0x2b7595c74558 *.LC91>)) ge2fitman_sup.cpp:669 89 {*movdi_internal}
     (nil))
(insn 789 788 790 96 (set (reg:DI 5 di)
        (reg:DI 0 ax [404])) ge2fitman_sup.cpp:669 89 {*movdi_internal}
     (nil))
(call_insn/i 790 789 792 96 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:669 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 792 790 793 96 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:241 D.25196 ] [241])
            (const_int 0 [0]))) ge2fitman_sup.cpp:669 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 793 792 794 96 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 807)
            (pc))) ge2fitman_sup.cpp:669 596 {*jcc_1}
     (nil)
 -> 807)
;;  succ:       97 (FALLTHRU)
;;              98
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 97, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 96, next block 98, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       96 (FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 242 243 405 406 409 410
(note 794 793 795 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 795 794 796 97 (set (reg:SI 0 ax [orig:242 D.25196 ] [242])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:670 90 {*movsi_internal}
     (nil))
(insn 796 795 797 97 (parallel [
            (set (reg:SI 0 ax [orig:243 D.25196 ] [243])
                (plus:SI (reg:SI 0 ax [orig:242 D.25196 ] [242])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:670 220 {*addsi_1}
     (nil))
(insn 797 796 798 97 (set (reg:DI 0 ax [405])
        (sign_extend:DI (reg:SI 0 ax [orig:243 D.25196 ] [243]))) ge2fitman_sup.cpp:670 142 {*extendsidi2_rex64}
     (nil))
(insn 798 797 802 97 (parallel [
            (set (reg:DI 1 dx [406])
                (plus:DI (reg:DI 0 ax [405])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:670 221 {*adddi_1}
     (nil))
(insn 802 798 803 97 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:670 89 {*movdi_internal}
     (nil))
(insn 803 802 804 97 (parallel [
            (set (reg:DI 0 ax [409])
                (plus:DI (reg/f:DI 0 ax [410])
                    (reg:DI 1 dx [406])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:670 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [406]))
        (nil)))
(insn 804 803 964 97 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [409])) ge2fitman_sup.cpp:670 89 {*movdi_internal}
     (nil))
(jump_insn 964 804 965 97 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 965 964 807)
;; basic block 98, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 97, next block 99, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       96
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 244 411
(code_label 807 965 808 98 137 "" [1 uses])
(note 808 807 809 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 809 808 810 98 (parallel [
            (set (reg:DI 0 ax [411])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:671 221 {*adddi_1}
     (nil))
(insn 810 809 811 98 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC92") [flags 0x2]  <var_decl 0x2b7595c745f0 *.LC92>)) ge2fitman_sup.cpp:671 89 {*movdi_internal}
     (nil))
(insn 811 810 812 98 (set (reg:DI 5 di)
        (reg:DI 0 ax [411])) ge2fitman_sup.cpp:671 89 {*movdi_internal}
     (nil))
(call_insn/i 812 811 814 98 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b7594525300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:671 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 814 812 815 98 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:244 D.25196 ] [244])
            (const_int 0 [0]))) ge2fitman_sup.cpp:671 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 815 814 816 98 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 829)
            (pc))) ge2fitman_sup.cpp:671 596 {*jcc_1}
     (nil)
 -> 829)
;;  succ:       99 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 99, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 98, next block 100, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       98 (FALLTHRU)
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 246 412 413 416 417
(note 816 815 817 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 817 816 818 99 (set (reg:SI 0 ax [orig:245 D.25196 ] [245])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:672 90 {*movsi_internal}
     (nil))
(insn 818 817 819 99 (parallel [
            (set (reg:SI 0 ax [orig:246 D.25196 ] [246])
                (plus:SI (reg:SI 0 ax [orig:245 D.25196 ] [245])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:672 220 {*addsi_1}
     (nil))
(insn 819 818 820 99 (set (reg:DI 0 ax [412])
        (sign_extend:DI (reg:SI 0 ax [orig:246 D.25196 ] [246]))) ge2fitman_sup.cpp:672 142 {*extendsidi2_rex64}
     (nil))
(insn 820 819 824 99 (parallel [
            (set (reg:DI 1 dx [413])
                (plus:DI (reg:DI 0 ax [412])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:672 221 {*adddi_1}
     (nil))
(insn 824 820 825 99 (set (reg/f:DI 0 ax [417])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:672 89 {*movdi_internal}
     (nil))
(insn 825 824 826 99 (parallel [
            (set (reg:DI 0 ax [416])
                (plus:DI (reg/f:DI 0 ax [417])
                    (reg:DI 1 dx [413])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:672 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [413]))
        (nil)))
(insn 826 825 966 99 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [416])) ge2fitman_sup.cpp:672 89 {*movdi_internal}
     (nil))
(jump_insn 966 826 967 99 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 967 966 829)
;; basic block 100, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 99, next block 101, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       98
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 247 418 419 422 423
(code_label 829 967 830 100 138 "" [1 uses])
(note 830 829 831 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 831 830 832 100 (set (reg:SI 0 ax [orig:247 D.25196 ] [247])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:674 90 {*movsi_internal}
     (nil))
(insn 832 831 833 100 (set (reg:DI 0 ax [418])
        (sign_extend:DI (reg:SI 0 ax [orig:247 D.25196 ] [247]))) ge2fitman_sup.cpp:674 142 {*extendsidi2_rex64}
     (nil))
(insn 833 832 837 100 (parallel [
            (set (reg:DI 1 dx [419])
                (plus:DI (reg:DI 0 ax [418])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:674 221 {*adddi_1}
     (nil))
(insn 837 833 838 100 (set (reg/f:DI 0 ax [423])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:674 89 {*movdi_internal}
     (nil))
(insn 838 837 839 100 (parallel [
            (set (reg:DI 0 ax [422])
                (plus:DI (reg/f:DI 0 ax [423])
                    (reg:DI 1 dx [419])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:674 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [419]))
        (nil)))
(insn 839 838 840 100 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [422])) ge2fitman_sup.cpp:674 89 {*movdi_internal}
     (nil))
;;  succ:       101 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 101, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 100, next block 102, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       94 [100.0%] 
;;              95 [100.0%] 
;;              97 [100.0%] 
;;              100 (FALLTHRU)
;;              92 [100.0%] 
;;              99 [100.0%] 
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 424
(code_label 840 839 841 101 136 "" [5 uses])
(note 841 840 842 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 842 841 843 101 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])) ge2fitman_sup.cpp:678 89 {*movdi_internal}
     (nil))
(insn 843 842 969 101 (set (reg:DI 2 cx [432])
        (const_int 8386094131808466271 [0x7461642e736e755f])) ge2fitman_sup.cpp:678 89 {*movdi_internal}
     (nil))
(insn 969 843 844 101 (set (mem:DI (reg/f:DI 0 ax [424]) [0 MEM[(void *)fname_suffix_4]+0 S8 A8])
        (reg:DI 2 cx [432])) ge2fitman_sup.cpp:678 89 {*movdi_internal}
     (nil))
(insn 844 969 845 101 (set (mem:QI (plus:DI (reg/f:DI 0 ax [424])
                (const_int 8 [0x8])) [0 MEM[(void *)fname_suffix_4]+8 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:678 93 {*movqi_internal}
     (nil))
(insn 845 844 846 101 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 2 [0x2]))) ge2fitman_sup.cpp:680 7 {*cmpsi_1}
     (nil))
(jump_insn 846 845 847 101 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 881)
            (pc))) ge2fitman_sup.cpp:680 596 {*jcc_1}
     (nil)
 -> 881)
;;  succ:       102 (FALLTHRU)
;;              107
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 102, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 101, next block 103, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       101 (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 248 425
(note 847 846 848 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 848 847 849 102 (set (reg:QI 0 ax [425])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])) ge2fitman_sup.cpp:682 93 {*movqi_internal}
     (nil))
(insn 849 848 850 102 (parallel [
            (set (reg:QI 0 ax [orig:248 D.25198 ] [248])
                (xor:QI (reg:QI 0 ax [425])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:682 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 850 849 851 102 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:248 D.25198 ] [248])
            (const_int 0 [0]))) ge2fitman_sup.cpp:682 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 851 850 852 102 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 871)
            (pc))) ge2fitman_sup.cpp:682 596 {*jcc_1}
     (nil)
 -> 871)
;;  succ:       103 (FALLTHRU)
;;              105
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 103, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 102, next block 104, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102 (FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 249 250 251 426
(note 852 851 853 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 853 852 854 103 (set (reg/f:DI 0 ax [426])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(insn 854 853 855 103 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.25194 ] [249])
                (plus:DI (reg/f:DI 0 ax [426])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:684 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 855 854 856 103 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC93") [flags 0x2]  <var_decl 0x2b7595c74688 *.LC93>)) ge2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(insn 856 855 857 103 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:249 D.25194 ] [249])) ge2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(call_insn 857 856 859 103 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b7594752f00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:684 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 859 857 860 103 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:250 D.25199 ] [250])) ge2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(insn 860 859 861 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:684 4 {*cmpdi_ccno_1}
     (nil))
(insn 861 860 862 103 (set (reg:QI 0 ax [orig:251 D.25198 ] [251])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_sup.cpp:684 592 {*setcc_qi}
     (nil))
(insn 862 861 863 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:251 D.25198 ] [251])
            (const_int 0 [0]))) ge2fitman_sup.cpp:684 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 863 862 864 103 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 871)
            (pc))) ge2fitman_sup.cpp:684 596 {*jcc_1}
     (nil)
 -> 871)
;;  succ:       104 (FALLTHRU)
;;              105
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 104, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 103, next block 105, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103 (FALLTHRU)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 252 427 428
(note 864 863 865 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 865 864 866 104 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:688 89 {*movdi_internal}
     (nil))
(insn 866 865 867 104 (parallel [
            (set (reg/f:DI 1 dx [orig:252 D.25194 ] [252])
                (plus:DI (reg/f:DI 0 ax [427])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:688 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 867 866 868 104 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])) ge2fitman_sup.cpp:688 90 {*movsi_internal}
     (nil))
(insn 868 867 869 104 (set (reg:SI 4 si)
        (reg:SI 0 ax [428])) ge2fitman_sup.cpp:688 90 {*movsi_internal}
     (nil))
(insn 869 868 870 104 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:252 D.25194 ] [252])) ge2fitman_sup.cpp:688 89 {*movdi_internal}
     (nil))
(call_insn 870 869 871 104 (call (mem:QI (symbol_ref:DI ("_Z12cond_exit_03Pci") [flags 0x41]  <function_decl 0x2b7595af9600 cond_exit_03>) [0 cond_exit_03 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:688 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       105 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 105, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 104, next block 106, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102
;;              104 (FALLTHRU)
;;              103
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 871 870 872 105 139 "" [2 uses])
(note 872 871 873 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 873 872 874 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:693 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 874 873 875 105 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 881)
            (pc))) ge2fitman_sup.cpp:693 596 {*jcc_1}
     (nil)
 -> 881)
;;  succ:       106 (FALLTHRU)
;;              107
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 106, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105 (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 429
(note 875 874 876 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 876 875 877 106 (set (reg:DI 0 ax [429])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])) ge2fitman_sup.cpp:694 89 {*movdi_internal}
     (nil))
(insn 877 876 878 106 (set (reg:DI 5 di)
        (reg:DI 0 ax [429])) ge2fitman_sup.cpp:694 89 {*movdi_internal}
     (nil))
(call_insn 878 877 881 106 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b7594752b00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:694 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       107 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 107, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 106, next block 108, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       106 (FALLTHRU)
;;              89
;;              101
;;              105
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 881 878 887 107 77 "" [3 uses])
(note 887 881 882 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 882 887 883 107 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.25200+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [431]))
        ]) ge2fitman_sup.cpp:698 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 883 882 888 107 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 886)
            (pc))) ge2fitman_sup.cpp:698 596 {*jcc_1}
     (nil)
 -> 886)
;;  succ:       109
;;              108 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 108, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 107, next block 109, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       107 (FALLTHRU)
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 888 883 884 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(call_insn 884 888 885 108 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b7595c16600 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:698 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 885 884 886)
;; basic block 109, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 108, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       107
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 886 885 889 109 140 "" [1 uses])
(note 889 886 968 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 968 889 0 NOTE_INSN_DELETED)

;; Function void infile_stats(Procpar_info*, InFile_struct*, Data_file_header*) (_Z12infile_statsP12Procpar_infoP13InFile_structP16Data_file_header, funcdef_no=1030, decl_uid=24065, symbol_order=237)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 92:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=135 from oldreg=121, assigning class GENERAL_REGS to r135
   92: {r135:DI=r135:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  151: r135:DI=r92:DI
    Inserting insn reload after:
  152: r121:DI=r135:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=136 from oldreg=125, assigning class GENERAL_REGS to r136
  102: {r136:DI=r136:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  153: r136:DI=r94:DI
    Inserting insn reload after:
  154: r125:DI=r136:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 2 in insn 115:  (0) r  (1) 0  (2) mr {*muldi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 117:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=137 from oldreg=103, assigning class GENERAL_REGS to r137
  130: {r137:SI=r137:SI-r102:SI;clobber flags:CC;}
      REG_DEAD r102:SI
      REG_DEAD r101:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  155: r137:SI=r101:SI
    Inserting insn reload after:
  156: r103:SI=r137:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 145: point = 0
   Insn 144: point = 0
   Insn 143: point = 1
   Insn 142: point = 2
   Insn 141: point = 2
   Insn 140: point = 2
   Insn 139: point = 2
   Insn 138: point = 2
   Insn 137: point = 2
   Insn 136: point = 3
   Insn 135: point = 5
   Insn 134: point = 6
   Insn 133: point = 6
   Insn 132: point = 6
   Insn 131: point = 6
   Insn 156: point = 7
	Hard reg 0 is preferable by r137 with profit 1
   Insn 130: point = 9
   Insn 155: point = 10
	Hard reg 0 is preferable by r137 with profit 1
	Hard reg 1 is preferable by r137 with profit 1
   Insn 129: point = 12
   Insn 128: point = 14
   Insn 127: point = 15
   Insn 126: point = 17
   Insn 125: point = 18
   Insn 124: point = 18
   Insn 123: point = 18
   Insn 122: point = 18
   Insn 121: point = 19
   Insn 120: point = 21
   Insn 119: point = 22
   Insn 118: point = 22
   Insn 117: point = 22
   Insn 116: point = 22
   Insn 115: point = 23
   Insn 114: point = 25
   Insn 113: point = 27
   Insn 112: point = 28
   Insn 111: point = 30
   Insn 110: point = 32
   Insn 109: point = 33
   Insn 108: point = 33
   Insn 107: point = 33
   Insn 106: point = 33
   Insn 105: point = 34
   Insn 104: point = 36
   Insn 103: point = 38
   Insn 154: point = 40
	Hard reg 1 is preferable by r136 with profit 1
   Insn 102: point = 42
   Insn 153: point = 42
   Insn 101: point = 43
   Insn 100: point = 45
   Insn 99: point = 46
   Insn 98: point = 46
   Insn 97: point = 46
   Insn 96: point = 46
   Insn 95: point = 47
   Insn 94: point = 49
   Insn 93: point = 51
   Insn 152: point = 53
	Hard reg 1 is preferable by r135 with profit 1
   Insn 92: point = 55
   Insn 151: point = 55
   Insn 91: point = 56
   Insn 90: point = 58
   Insn 89: point = 59
   Insn 88: point = 59
   Insn 87: point = 59
   Insn 86: point = 59
   Insn 85: point = 60
   Insn 84: point = 62
   Insn 83: point = 63
   Insn 82: point = 63
   Insn 81: point = 63
   Insn 80: point = 63
   Insn 79: point = 63
   Insn 78: point = 63
   Insn 77: point = 64
   Insn 76: point = 66
   Insn 75: point = 67
   Insn 74: point = 67
   Insn 73: point = 67
   Insn 72: point = 67
   Insn 71: point = 68
   Insn 70: point = 70
   Insn 69: point = 71
   Insn 68: point = 71
   Insn 67: point = 71
   Insn 66: point = 71
   Insn 65: point = 72
   Insn 64: point = 74
   Insn 63: point = 75
   Insn 62: point = 75
   Insn 61: point = 75
   Insn 60: point = 75
   Insn 59: point = 76
   Insn 58: point = 78
   Insn 57: point = 79
   Insn 56: point = 79
   Insn 55: point = 79
   Insn 54: point = 79
   Insn 53: point = 80
   Insn 52: point = 81
   Insn 51: point = 81
  BB 4
   Insn 49: point = 81
   Insn 48: point = 81
  BB 2
   Insn 148: point = 81
   Insn 34: point = 81
   Insn 33: point = 82
   Insn 32: point = 83
   Insn 31: point = 83
   Insn 30: point = 84
   Insn 29: point = 84
   Insn 28: point = 85
   Insn 27: point = 85
   Insn 26: point = 86
   Insn 25: point = 87
   Insn 24: point = 88
   Insn 23: point = 90
   Insn 22: point = 91
   Insn 21: point = 92
   Insn 20: point = 93
   Insn 19: point = 94
   Insn 18: point = 95
   Insn 17: point = 95
   Insn 16: point = 96
   Insn 15: point = 98
   Insn 14: point = 99
   Insn 13: point = 99
   Insn 12: point = 100
   Insn 11: point = 102
   Insn 10: point = 103
   Insn 9: point = 103
   Insn 8: point = 103
   Insn 4: point = 103
   Insn 3: point = 103
   Insn 2: point = 103
  BB 3
   Insn 44: point = 103
   Insn 43: point = 104
   Insn 42: point = 105
   Insn 41: point = 105
   Insn 40: point = 105
   Insn 39: point = 105
   Insn 38: point = 106
 r83: [99..100]
 r84: [97..98]
 r85: [95..96]
 r86: [86..88]
 r87: [75..76]
 r88: [71..72]
 r89: [67..68]
 r90: [63..64]
 r91: [59..60]
 r92: [52..56]
 r93: [46..47]
 r94: [39..43]
 r95: [33..34]
 r96: [29..30]
 r97: [24..28]
 r98: [24..25]
 r99: [22..23]
 r100: [18..19]
 r101: [11..15]
 r102: [9..12]
 r103: [6..7]
 r104: [2..3]
 r105: [101..102]
 r106: [93..94]
 r107: [91..92]
 r108: [89..90]
 r109: [85..87]
 r110: [83..84]
 r111: [81..82]
 r112: [105..106]
 r113: [103..104]
 r114: [79..80]
 r115: [77..78]
 r116: [73..74]
 r117: [69..70]
 r118: [65..66]
 r119: [61..62]
 r120: [57..58]
 r121: [52..53]
 r122: [50..51]
 r123: [48..49]
 r124: [44..45]
 r125: [39..40]
 r126: [37..38]
 r127: [35..36]
 r128: [31..32]
 r129: [26..27]
 r130: [20..21]
 r131: [16..17]
 r132: [13..14]
 r133: [4..5]
 r134: [0..1]
 r135: [54..55]
 r136: [41..42]
 r137: [8..10]
Compressing live ranges: from 107 to 100 - 93%
Ranges after the compression:
 r83: [92..93]
 r84: [90..91]
 r85: [88..89]
 r86: [80..81]
 r87: [70..71]
 r88: [66..67]
 r89: [62..63]
 r90: [58..59]
 r91: [54..55]
 r92: [48..51]
 r93: [42..43]
 r94: [36..39]
 r95: [30..31]
 r96: [26..27]
 r97: [22..25]
 r98: [22..23]
 r99: [20..21]
 r100: [16..17]
 r101: [10..13]
 r102: [8..11]
 r103: [6..7]
 r104: [2..3]
 r105: [94..95]
 r106: [86..87]
 r107: [84..85]
 r108: [82..83]
 r109: [80..81]
 r110: [78..79]
 r111: [76..77]
 r112: [98..99]
 r113: [96..97]
 r114: [74..75]
 r115: [72..73]
 r116: [68..69]
 r117: [64..65]
 r118: [60..61]
 r119: [56..57]
 r120: [52..53]
 r121: [48..49]
 r122: [46..47]
 r123: [44..45]
 r124: [40..41]
 r125: [36..37]
 r126: [34..35]
 r127: [32..33]
 r128: [28..29]
 r129: [24..25]
 r130: [18..19]
 r131: [14..15]
 r132: [12..13]
 r133: [4..5]
 r134: [0..1]
 r135: [50..51]
 r136: [38..39]
 r137: [8..9]

********** Assignment #1: **********

	 Assigning to 135 (cl=GENERAL_REGS, orig=121, freq=3, tfirst=135, tfreq=3)...
	   Assign 1 to reload r135 (freq=3)
	 Assigning to 136 (cl=GENERAL_REGS, orig=125, freq=3, tfirst=136, tfreq=3)...
	   Assign 1 to reload r136 (freq=3)
	 Assigning to 137 (cl=GENERAL_REGS, orig=103, freq=3, tfirst=137, tfreq=3)...
	   Assign 1 to reload r137 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 26
changing reg in insn 59
changing reg in insn 60
changing reg in insn 65
changing reg in insn 66
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 91
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 105
changing reg in insn 106
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 121
changing reg in insn 122
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 136
changing reg in insn 137
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 120
changing reg in insn 121
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 135
changing reg in insn 136
changing reg in insn 143
changing reg in insn 144
deleting insn with uid = 15.
deleting insn with uid = 19.
deleting insn with uid = 33.
deleting insn with uid = 43.
deleting insn with uid = 152.
deleting insn with uid = 95.
deleting insn with uid = 154.
deleting insn with uid = 105.
deleting insn with uid = 155.
starting the processing of deferred insns
ending the processing of deferred insns


void infile_stats(Procpar_info*, InFile_struct*, Data_file_header*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={75d,59u} r1={30d,9u} r2={22d} r4={37d,16u} r5={43d,22u} r6={1d,38u} r7={1d,26u} r8={21d} r9={21d} r10={21d} r11={21d} r12={21d} r13={21d} r14={21d} r15={21d} r17={34d,1u} r18={21d} r19={21d} r20={1d,1u,3e} r21={22d} r22={22d} r23={22d} r24={22d} r25={22d} r26={22d} r27={22d} r28={22d} r29={21d} r30={21d} r31={21d} r32={21d} r33={21d} r34={21d} r35={21d} r36={21d} r37={22d} r38={22d} r39={21d} r40={21d} r45={21d} r46={21d} r47={21d} r48={21d} r49={21d} r50={21d} r51={21d} r52={21d} r53={21d} r54={21d} r55={21d} r56={21d} r57={21d} r58={21d} r59={21d} r60={21d} r61={21d} r62={21d} r63={21d} r64={21d} r65={21d} r66={21d} r67={21d} r68={21d} r69={21d} r70={21d} r71={21d} r72={21d} r73={21d} r74={21d} r75={21d} r76={21d} 
;;    total ref usage 1731{1556d,172u,3e} in 132{111 regular + 21 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 105 106 107 108 109 110 111
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 5 di [ procpar_info ])) ge2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])
        (reg:DI 4 si [ infile_struct ])) ge2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) ge2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:706 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:707 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:708 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.25207 ] [83])
                (plus:DI (reg/f:DI 0 ax [105])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:711 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 D.25207 ] [83])) ge2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(call_insn/i 14 13 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2b7594529200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:711 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 14 17 2 (parallel [
            (set (reg:DI 0 ax [orig:85 D.25208 ] [85])
                (plus:DI (reg:DI 0 ax [orig:84 D.25208 ] [84])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:711 221 {*adddi_1}
     (nil))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:85 D.25208 ] [85])) ge2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(call_insn 18 17 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b759455b200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:711 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 18 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg/f:DI 0 ax [106])) ge2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) ge2fitman_sup.cpp:712 89 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])
        (reg/f:DI 0 ax [107])) ge2fitman_sup.cpp:712 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:715 89 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg/f:DI 1 dx [orig:86 D.25207 ] [86])
                (plus:DI (reg/f:DI 0 ax [108])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:715 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 25 24 26 2 (set (reg:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) ge2fitman_sup.cpp:715 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:86 D.25207 ] [86])) ge2fitman_sup.cpp:715 89 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) ge2fitman_sup.cpp:715 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b7594525600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:715 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 29 28 30 2 (set (reg:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) ge2fitman_sup.cpp:716 89 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC94") [flags 0x2]  <var_decl 0x2b7595cb77b8 *.LC94>)) ge2fitman_sup.cpp:716 89 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [110])) ge2fitman_sup.cpp:716 89 {*movdi_internal}
     (nil))
(call_insn 32 31 34 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b75947d1f00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:716 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 34 32 148 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg:DI 0 ax [111])) ge2fitman_sup.cpp:716 89 {*movdi_internal}
     (nil))
(jump_insn 148 34 149 2 (set (pc)
        (label_ref 45)) ge2fitman_sup.cpp:717 636 {jump}
     (nil)
 -> 45)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 149 148 47)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 112 113
(code_label 47 149 37 3 143 "" [1 uses])
(note 37 47 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 3 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) ge2fitman_sup.cpp:718 89 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])
        (reg/f:DI 0 ax [112])) ge2fitman_sup.cpp:718 89 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC94") [flags 0x2]  <var_decl 0x2b7595cb77b8 *.LC94>)) ge2fitman_sup.cpp:719 89 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 5 di)
        (const_int 0 [0])) ge2fitman_sup.cpp:719 89 {*movdi_internal}
     (nil))
(call_insn 42 41 44 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b75947d1f00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:719 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 44 42 45 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg:DI 0 ax [113])) ge2fitman_sup.cpp:719 89 {*movdi_internal}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 45 44 46 4 142 "" [1 uses])
(note 46 45 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 48 46 49 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:717 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 49 48 50 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) ge2fitman_sup.cpp:717 596 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134
(note 50 49 51 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC95") [flags 0x2]  <var_decl 0x2b7595cb7850 *.LC95>)) ge2fitman_sup.cpp:722 89 {*movdi_internal}
     (nil))
(call_insn 52 51 53 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:722 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 5 (set (reg:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])) ge2fitman_sup.cpp:723 89 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [114])) ge2fitman_sup.cpp:723 89 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC96") [flags 0x2]  <var_decl 0x2b7595cb78e8 *.LC96>)) ge2fitman_sup.cpp:723 89 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:723 93 {*movqi_internal}
     (nil))
(call_insn 57 56 58 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:723 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 58 57 59 5 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:724 89 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.25209 ] [87])
                (plus:DI (reg/f:DI 0 ax [115])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:724 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 60 59 61 5 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:87 D.25209 ] [87])) ge2fitman_sup.cpp:724 89 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC97") [flags 0x2]  <var_decl 0x2b7595cb7980 *.LC97>)) ge2fitman_sup.cpp:724 89 {*movdi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:724 93 {*movqi_internal}
     (nil))
(call_insn 63 62 64 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:724 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 64 63 65 5 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:725 89 {*movdi_internal}
     (nil))
(insn 65 64 66 5 (set (reg:SI 0 ax [orig:88 D.25210 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [116])
                (const_int 8 [0x8])) [0 infile_struct_17(D)->file_size+0 S4 A32])) ge2fitman_sup.cpp:725 90 {*movsi_internal}
     (nil))
(insn 66 65 67 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:88 D.25210 ] [88])) ge2fitman_sup.cpp:725 90 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC98") [flags 0x2]  <var_decl 0x2b7595cb7a18 *.LC98>)) ge2fitman_sup.cpp:725 89 {*movdi_internal}
     (nil))
(insn 68 67 69 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:725 93 {*movqi_internal}
     (nil))
(call_insn 69 68 70 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:725 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 70 69 71 5 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:726 89 {*movdi_internal}
     (nil))
(insn 71 70 72 5 (set (reg:SI 0 ax [orig:89 D.25210 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 508 [0x1fc])) [0 procpar_info_6(D)->num_channels+0 S4 A32])) ge2fitman_sup.cpp:726 90 {*movsi_internal}
     (nil))
(insn 72 71 73 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:89 D.25210 ] [89])) ge2fitman_sup.cpp:726 90 {*movsi_internal}
     (nil))
(insn 73 72 74 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC99") [flags 0x2]  <var_decl 0x2b7595cb7ab0 *.LC99>)) ge2fitman_sup.cpp:726 89 {*movdi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:726 93 {*movqi_internal}
     (nil))
(call_insn 75 74 76 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:726 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 76 75 77 5 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:727 89 {*movdi_internal}
     (nil))
(insn 77 76 78 5 (set (reg:SI 0 ax [orig:90 D.25210 ] [90])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 12 [0xc])) [0 infile_struct_17(D)->total_data_size+0 S4 A32])) ge2fitman_sup.cpp:727 90 {*movsi_internal}
     (nil))
(insn 78 77 79 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:90 D.25210 ] [90])) ge2fitman_sup.cpp:727 90 {*movsi_internal}
     (nil))
(insn 79 78 80 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC100") [flags 0x2]  <var_decl 0x2b7595cb7b48 *.LC100>)) ge2fitman_sup.cpp:727 89 {*movdi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:727 93 {*movqi_internal}
     (nil))
(call_insn 81 80 82 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:727 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 82 81 83 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC101") [flags 0x2]  <var_decl 0x2b7595cb7be0 *.LC101>)) ge2fitman_sup.cpp:728 89 {*movdi_internal}
     (nil))
(call_insn 83 82 84 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:728 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 84 83 85 5 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:729 89 {*movdi_internal}
     (nil))
(insn 85 84 86 5 (set (reg:SI 0 ax [orig:91 D.25210 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [119])
                (const_int 324 [0x144])) [0 procpar_info_6(D)->num_points+0 S4 A32])) ge2fitman_sup.cpp:729 90 {*movsi_internal}
     (nil))
(insn 86 85 87 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:91 D.25210 ] [91])) ge2fitman_sup.cpp:729 90 {*movsi_internal}
     (nil))
(insn 87 86 88 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC102") [flags 0x2]  <var_decl 0x2b7595cb7c78 *.LC102>)) ge2fitman_sup.cpp:729 89 {*movdi_internal}
     (nil))
(insn 88 87 89 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:729 93 {*movqi_internal}
     (nil))
(call_insn 89 88 90 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:729 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 90 89 91 5 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 91 90 151 5 (set (reg:DI 0 ax [orig:92 D.25211 ] [92])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [120])
                (const_int 24 [0x18])) [0 main_header_23(D)->ebytes.number+0 S8 A64])) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 151 91 92 5 (set (reg:DI 1 dx [121])
        (reg:DI 0 ax [orig:92 D.25211 ] [92])) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 92 151 93 5 (parallel [
            (set (reg:DI 1 dx [121])
                (lshiftrt:DI (reg:DI 1 dx [121])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:730 531 {*lshrdi3_1}
     (nil))
(insn 93 92 94 5 (parallel [
            (set (reg:DI 0 ax [122])
                (plus:DI (reg:DI 0 ax [orig:92 D.25211 ] [92])
                    (reg:DI 1 dx [121])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:730 221 {*adddi_1}
     (nil))
(insn 94 93 96 5 (parallel [
            (set (reg:DI 0 ax [123])
                (ashiftrt:DI (reg:DI 0 ax [122])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:730 532 {*ashrdi3_1}
     (nil))
(insn 96 94 97 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:93 D.25211 ] [93])) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 97 96 98 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC103") [flags 0x2]  <var_decl 0x2b7595cb7d10 *.LC103>)) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 98 97 99 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:730 93 {*movqi_internal}
     (nil))
(call_insn 99 98 100 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:730 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 100 99 101 5 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 101 100 153 5 (set (reg:DI 0 ax [orig:94 D.25211 ] [94])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 24 [0x18])) [0 main_header_23(D)->ebytes.number+0 S8 A64])) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 153 101 102 5 (set (reg:DI 1 dx [125])
        (reg:DI 0 ax [orig:94 D.25211 ] [94])) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 102 153 103 5 (parallel [
            (set (reg:DI 1 dx [125])
                (lshiftrt:DI (reg:DI 1 dx [125])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:731 531 {*lshrdi3_1}
     (nil))
(insn 103 102 104 5 (parallel [
            (set (reg:DI 0 ax [126])
                (plus:DI (reg:DI 0 ax [orig:94 D.25211 ] [94])
                    (reg:DI 1 dx [125])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:731 221 {*adddi_1}
     (nil))
(insn 104 103 106 5 (parallel [
            (set (reg:DI 0 ax [127])
                (ashiftrt:DI (reg:DI 0 ax [126])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:731 532 {*ashrdi3_1}
     (nil))
(insn 106 104 107 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:95 D.25211 ] [95])) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 107 106 108 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC104") [flags 0x2]  <var_decl 0x2b7595cb7da8 *.LC104>)) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 108 107 109 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:731 93 {*movqi_internal}
     (nil))
(call_insn 109 108 110 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:731 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 110 109 111 5 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 111 110 112 5 (set (reg:SI 0 ax [orig:96 D.25210 ] [96])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 324 [0x144])) [0 procpar_info_6(D)->num_points+0 S4 A32])) ge2fitman_sup.cpp:733 90 {*movsi_internal}
     (nil))
(insn 112 111 113 5 (set (reg:DI 1 dx [orig:97 D.25211 ] [97])
        (sign_extend:DI (reg:SI 0 ax [orig:96 D.25210 ] [96]))) ge2fitman_sup.cpp:733 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 5 (set (reg/f:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 114 113 115 5 (set (reg:DI 0 ax [orig:98 D.25211 ] [98])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 24 [0x18])) [0 main_header_23(D)->ebytes.number+0 S8 A64])) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 115 114 116 5 (parallel [
            (set (reg:DI 0 ax [orig:99 D.25211 ] [99])
                (mult:DI (reg:DI 0 ax [orig:98 D.25211 ] [98])
                    (reg:DI 1 dx [orig:97 D.25211 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:733 307 {*muldi3_1}
     (nil))
(insn 116 115 117 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:99 D.25211 ] [99])) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 117 116 118 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC105") [flags 0x2]  <var_decl 0x2b7595cb7e40 *.LC105>)) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 118 117 119 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:733 93 {*movqi_internal}
     (nil))
(call_insn 119 118 120 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:733 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 120 119 121 5 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:734 89 {*movdi_internal}
     (nil))
(insn 121 120 122 5 (set (reg:SI 0 ax [orig:100 D.25210 ] [100])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [130])
                (const_int 4 [0x4])) [0 infile_struct_17(D)->num_unsup_sets+0 S4 A32])) ge2fitman_sup.cpp:734 90 {*movsi_internal}
     (nil))
(insn 122 121 123 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:100 D.25210 ] [100])) ge2fitman_sup.cpp:734 90 {*movsi_internal}
     (nil))
(insn 123 122 124 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC106") [flags 0x2]  <var_decl 0x2b7595cb7ed8 *.LC106>)) ge2fitman_sup.cpp:734 89 {*movdi_internal}
     (nil))
(insn 124 123 125 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:734 93 {*movqi_internal}
     (nil))
(call_insn 125 124 126 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:734 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 126 125 127 5 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(insn 127 126 128 5 (set (reg:SI 1 dx [orig:101 D.25210 ] [101])
        (mem/j:SI (reg/f:DI 0 ax [131]) [0 infile_struct_17(D)->num_datasets+0 S4 A32])) ge2fitman_sup.cpp:736 90 {*movsi_internal}
     (nil))
(insn 128 127 129 5 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(insn 129 128 130 5 (set (reg:SI 0 ax [orig:102 D.25210 ] [102])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [132])
                (const_int 4 [0x4])) [0 infile_struct_17(D)->num_unsup_sets+0 S4 A32])) ge2fitman_sup.cpp:736 90 {*movsi_internal}
     (nil))
(insn 130 129 156 5 (parallel [
            (set (reg:SI 1 dx [orig:103 D.25210 ] [103])
                (minus:SI (reg:SI 1 dx [orig:103 D.25210 ] [103])
                    (reg:SI 0 ax [orig:102 D.25210 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:736 263 {*subsi_1}
     (nil))
(insn 156 130 131 5 (set (reg:SI 0 ax [orig:103 D.25210 ] [103])
        (reg:SI 1 dx [orig:103 D.25210 ] [103])) ge2fitman_sup.cpp:736 90 {*movsi_internal}
     (nil))
(insn 131 156 132 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:103 D.25210 ] [103])) ge2fitman_sup.cpp:736 90 {*movsi_internal}
     (nil))
(insn 132 131 133 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC107") [flags 0x2]  <var_decl 0x2b7595cc1000 *.LC107>)) ge2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(insn 133 132 134 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:736 93 {*movqi_internal}
     (nil))
(call_insn 134 133 135 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:736 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 135 134 136 5 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:737 89 {*movdi_internal}
     (nil))
(insn 136 135 137 5 (set (reg:SI 0 ax [orig:104 D.25210 ] [104])
        (mem/j:SI (reg/f:DI 0 ax [133]) [0 infile_struct_17(D)->num_datasets+0 S4 A32])) ge2fitman_sup.cpp:737 90 {*movsi_internal}
     (nil))
(insn 137 136 138 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:104 D.25210 ] [104])) ge2fitman_sup.cpp:737 90 {*movsi_internal}
     (nil))
(insn 138 137 139 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC108") [flags 0x2]  <var_decl 0x2b7595cc1098 *.LC108>)) ge2fitman_sup.cpp:737 89 {*movdi_internal}
     (nil))
(insn 139 138 140 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:737 93 {*movqi_internal}
     (nil))
(call_insn 140 139 141 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:737 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 141 140 142 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC95") [flags 0x2]  <var_decl 0x2b7595cb7850 *.LC95>)) ge2fitman_sup.cpp:738 89 {*movdi_internal}
     (nil))
(call_insn 142 141 143 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:738 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 143 142 144 5 (set (reg:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])) ge2fitman_sup.cpp:740 89 {*movdi_internal}
     (nil))
(insn 144 143 145 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [134])) ge2fitman_sup.cpp:740 89 {*movdi_internal}
     (nil))
(call_insn 145 144 150 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b759454f000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:740 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 150 145 0 NOTE_INSN_DELETED)

;; Function void print_version() (_Z13print_versionv, funcdef_no=1031, decl_uid=24066, symbol_order=238)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void print_version()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={5d,1u} r1={4d} r2={4d} r4={5d,1u} r5={7d,3u} r6={1d,2u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} 
;;    total ref usage 240{227d,13u,0e} in 8{5 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC109") [flags 0x2]  <var_decl 0x2b7595cc1688 *.LC109>)) ge2fitman_sup.cpp:748 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC110") [flags 0x2]  <var_decl 0x2b7595cc1720 *.LC110>)) ge2fitman_sup.cpp:748 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:748 93 {*movqi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:748 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC111") [flags 0x2]  <var_decl 0x2b7595cc17b8 *.LC111>)) ge2fitman_sup.cpp:749 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:749 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC112") [flags 0x2]  <var_decl 0x2b7595cc1850 *.LC112>)) ge2fitman_sup.cpp:750 89 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b7594532900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:750 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 12 0 NOTE_INSN_DELETED)

;; Function void close_infiles(FILE**) (_Z13close_infilesPP8_IO_FILE, funcdef_no=1032, decl_uid=24068, symbol_order=239)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 23
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 29:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
  BB 6
   Insn 34: point = 0
   Insn 33: point = 0
  BB 2
   Insn 38: point = 0
   Insn 6: point = 0
   Insn 2: point = 0
  BB 5
   Insn 29: point = 0
  BB 4
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 24: point = 1
   Insn 23: point = 3
   Insn 22: point = 5
   Insn 21: point = 6
   Insn 20: point = 8
   Insn 19: point = 10
  BB 3
   Insn 17: point = 11
   Insn 16: point = 11
   Insn 15: point = 12
   Insn 14: point = 14
   Insn 13: point = 16
   Insn 12: point = 17
   Insn 11: point = 19
   Insn 10: point = 21
 r83: [18..19]
 r84: [15..17]
 r85: [13..14]
 r86: [11..12]
 r87: [7..8]
 r88: [4..6]
 r89: [2..3]
 r90: [0..1]
 r91: [20..21]
 r92: [15..16]
 r93: [9..10]
 r94: [4..5]
Compressing live ranges: from 22 to 20 - 90%
Ranges after the compression:
 r83: [16..17]
 r84: [14..15]
 r85: [12..13]
 r86: [10..11]
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [18..19]
 r92: [14..15]
 r93: [8..9]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 26.


void close_infiles(FILE**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,10u} r1={4d,2u,2e} r2={2d} r4={2d} r5={3d,2u} r6={1d,16u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={8d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 151{106d,41u,4e} in 22{21 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
        (reg:DI 5 di [ in_file ])) ge2fitman_sup.cpp:757 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 38 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:760 90 {*movsi_internal}
     (nil))
(jump_insn 38 6 39 2 (set (pc)
        (label_ref 30)) ge2fitman_sup.cpp:760 636 {jump}
     (nil)
 -> 30)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 39 38 32)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 91 92
(code_label 32 39 9 3 148 "" [1 uses])
(note 9 32 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:761 90 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:DI 0 ax [orig:83 D.25231 ] [83])
        (sign_extend:DI (reg:SI 0 ax [91]))) ge2fitman_sup.cpp:761 142 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 3 (parallel [
            (set (reg:DI 1 dx [orig:84 D.25231 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 D.25231 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:761 497 {*ashldi3_1}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) ge2fitman_sup.cpp:761 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.25232 ] [85])
                (plus:DI (reg/f:DI 0 ax [92])
                    (reg:DI 1 dx [orig:84 D.25231 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:761 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.25231 ] [84]))
        (nil)))
(insn 15 14 16 3 (set (reg/f:DI 0 ax [orig:86 D.25233 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 D.25232 ] [85]) [0 *_6+0 S8 A64])) ge2fitman_sup.cpp:761 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:86 D.25233 ] [86])
            (const_int 0 [0]))) ge2fitman_sup.cpp:761 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) ge2fitman_sup.cpp:761 596 {*jcc_1}
     (nil)
 -> 27)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87 88 89 90 93 94
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:762 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 0 ax [orig:87 D.25231 ] [87])
        (sign_extend:DI (reg:SI 0 ax [93]))) ge2fitman_sup.cpp:762 142 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg:DI 1 dx [orig:88 D.25231 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.25231 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:762 497 {*ashldi3_1}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) ge2fitman_sup.cpp:762 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.25232 ] [89])
                (plus:DI (reg/f:DI 0 ax [94])
                    (reg:DI 1 dx [orig:88 D.25231 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:762 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.25231 ] [88]))
        (nil)))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [orig:90 D.25233 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [orig:89 D.25232 ] [89]) [0 *_10+0 S8 A64])) ge2fitman_sup.cpp:762 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 D.25233 ] [90])) ge2fitman_sup.cpp:762 89 {*movdi_internal}
     (nil))
(call_insn 26 25 27 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b7594752b00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:762 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 27 26 28 5 147 "" [1 uses])
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:760 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 29 31 6 146 "" [1 uses])
(note 31 30 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 31 34 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:760 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) ge2fitman_sup.cpp:760 596 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 35 34 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 40 35 0 NOTE_INSN_DELETED)

;; Function void printHex(char*, int) (_Z8printHexPci, funcdef_no=1033, decl_uid=24071, symbol_order=240)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 16
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 28:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 37: point = 0
   Insn 36: point = 0
  BB 4
   Insn 34: point = 0
   Insn 33: point = 0
   Insn 32: point = 1
  BB 2
   Insn 40: point = 2
   Insn 9: point = 2
   Insn 8: point = 2
   Insn 7: point = 3
   Insn 3: point = 4
   Insn 2: point = 4
  BB 3
   Insn 28: point = 4
   Insn 27: point = 4
   Insn 26: point = 4
   Insn 25: point = 4
   Insn 24: point = 4
   Insn 23: point = 5
   Insn 22: point = 6
   Insn 21: point = 8
   Insn 20: point = 9
   Insn 19: point = 11
   Insn 18: point = 12
   Insn 17: point = 14
   Insn 16: point = 16
   Insn 15: point = 18
   Insn 14: point = 19
   Insn 13: point = 21
 r83: [17..19]
 r84: [15..16]
 r85: [13..14]
 r86: [5..12]
 r87: [7..9]
 r88: [4..6]
 r89: [2..3]
 r90: [20..21]
 r91: [17..18]
 r92: [10..11]
 r93: [7..8]
 r94: [0..1]
Compressing live ranges: from 22 to 18 - 81%
Ranges after the compression:
 r83: [14..15]
 r84: [12..13]
 r85: [10..11]
 r86: [4..9]
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [16..17]
 r91: [14..15]
 r92: [8..9]
 r93: [6..7]
 r94: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 23
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 32
changing reg in insn 33
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 37.


void printHex(char*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,8u} r1={7d,4u,1e} r2={5d,2u,1e} r4={4d,2u} r5={5d,3u} r6={1d,18u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={6d,1u} r18={2d} r19={2d} r20={1d,1u,2e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 225{175d,46u,4e} in 27{25 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])
        (reg:DI 5 di [ theThing ])) ge2fitman_sup.cpp:770 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
        (reg:SI 4 si [ size ])) ge2fitman_sup.cpp:770 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])) ge2fitman_sup.cpp:773 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])
        (reg/f:DI 0 ax [89])) ge2fitman_sup.cpp:773 89 {*movdi_internal}
     (nil))
(insn 9 8 40 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:774 90 {*movsi_internal}
     (nil))
(jump_insn 40 9 41 2 (set (pc)
        (label_ref 29)) ge2fitman_sup.cpp:774 636 {jump}
     (nil)
 -> 29)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 41 40 31)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 87 88 90 91 92 93
(code_label 31 41 12 3 151 "" [1 uses])
(note 12 31 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:775 90 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [orig:83 D.25234 ] [83])
        (sign_extend:DI (reg:SI 0 ax [90]))) ge2fitman_sup.cpp:775 142 {*extendsidi2_rex64}
     (nil))
(insn 15 14 16 3 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])) ge2fitman_sup.cpp:775 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg/f:DI 0 ax [orig:84 D.25235 ] [84])
                (plus:DI (reg/f:DI 0 ax [91])
                    (reg:DI 1 dx [orig:83 D.25234 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:775 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])
            (reg:DI 1 dx [orig:83 D.25234 ] [83]))
        (nil)))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:85 D.25236 ] [85])
        (mem:QI (reg/f:DI 0 ax [orig:84 D.25235 ] [84]) [0 *_7+0 S1 A8])) ge2fitman_sup.cpp:775 93 {*movqi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 ax [orig:86 D.25237 ] [86])
        (sign_extend:SI (reg:QI 0 ax [orig:85 D.25236 ] [85]))) ge2fitman_sup.cpp:775 148 {extendqisi2}
     (nil))
(insn 19 18 20 3 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:775 90 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 2 cx [orig:87 D.25234 ] [87])
        (sign_extend:DI (reg:SI 1 dx [92]))) ge2fitman_sup.cpp:775 142 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 3 (set (reg/f:DI 1 dx [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])) ge2fitman_sup.cpp:775 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg/f:DI 2 cx [orig:88 D.25235 ] [88])
                (plus:DI (reg:DI 2 cx [orig:87 D.25234 ] [87])
                    (reg/f:DI 1 dx [93])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:775 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])
            (reg:DI 2 cx [orig:87 D.25234 ] [87]))
        (nil)))
(insn 23 22 24 3 (set (reg:SI 1 dx)
        (reg:SI 0 ax [orig:86 D.25237 ] [86])) ge2fitman_sup.cpp:775 90 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:88 D.25235 ] [88])) ge2fitman_sup.cpp:775 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC113") [flags 0x2]  <var_decl 0x2b7595ccc720 *.LC113>)) ge2fitman_sup.cpp:775 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:775 93 {*movqi_internal}
     (nil))
(call_insn 27 26 28 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b759452fe00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:775 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 28 27 29 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:774 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94
(code_label 29 28 30 4 150 "" [1 uses])
(note 30 29 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 30 33 4 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:774 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [94])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32]))) ge2fitman_sup.cpp:774 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) ge2fitman_sup.cpp:774 596 {*jcc_1}
     (nil)
 -> 31)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg:SI 5 di)
        (const_int 10 [0xa])) ge2fitman_sup.cpp:778 90 {*movsi_internal}
     (nil))
(call_insn 37 36 42 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x2b7594532300 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:778 649 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 42 37 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1034, decl_uid=24367, symbol_order=264)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rzw {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,9u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 185{160d,25u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) ge2fitman_sup.cpp:779 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) ge2fitman_sup.cpp:779 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:779 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 21)
            (pc))) ge2fitman_sup.cpp:779 596 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) ge2fitman_sup.cpp:779 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 21)
            (pc))) ge2fitman_sup.cpp:779 596 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b7595ace000 __ioinit>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x2b7595629500 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/4.9/iostream:74 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x2b7595b44a18 __dso_handle>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b7595ace000 __ioinit>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x2b7595629700 __comp_dtor >)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 18 17 21 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x2b7595b02700 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/4.9/iostream:74 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 18 22 5 152 "" [2 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 22 0 NOTE_INSN_DELETED)

;; Function (static initializers for ge2fitman_sup.cpp) (_GLOBAL__sub_I__Z18endianCheck_systemP12Endian_Checkb, funcdef_no=1035, decl_uid=24373, symbol_order=373)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rzw {*call}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for ge2fitman_sup.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 96{88d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) ge2fitman_sup.cpp:779 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) ge2fitman_sup.cpp:779 90 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x2b7595b02600 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:779 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
