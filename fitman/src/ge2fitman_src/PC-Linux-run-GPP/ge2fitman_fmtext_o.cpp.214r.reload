
;; Function int read_data(int*, Preprocess*, IOFiles*, Data_file_header*, Data_block_header*, Precision2*, FILE**, Procpar_info*, Precision1*, float**, float**, int, InFile_struct*, bool) (_Z9read_dataPiP10PreprocessP7IOFilesP16Data_file_headerP17Data_block_headerP10Precision2PP8_IO_FILEP12Procpar_infoP10Precision1PPfSI_iP13InFile_structb, funcdef_no=1020, decl_uid=23962, symbol_order=227)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 9:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=793 from oldreg=89, assigning class GENERAL_REGS to r793
   44: {r793:DI=r793:DI<<0x6;clobber flags:CC;}
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1269: r793:DI=r88:DI
    Inserting insn reload after:
 1270: r89:DI=r793:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 70:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 83:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 96:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 109:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 122:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 135:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 151:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 156
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 162
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 164:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 165:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 175:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 184:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 192:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 199:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 208:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 216:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 223:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 230:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 236:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 237:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 244:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 251:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 258:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 260:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 267:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 274:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 276:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 279:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 281:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 282:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 289:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 290:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 296:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=794 from oldreg=165, assigning class GENERAL_REGS to r794
  296: {r794:DI=r794:DI<<0x6;clobber flags:CC;}
      REG_DEAD r164:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1271: r794:DI=r164:DI
    Inserting insn reload after:
 1272: r165:DI=r794:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 298
	 Choosing alt 0 in insn 298:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 299:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 302:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=795 from oldreg=169, assigning class GENERAL_REGS to r795
  302: {r795:DI=r795:DI<<0x6;clobber flags:CC;}
      REG_DEAD r168:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1273: r795:DI=r168:DI
    Inserting insn reload after:
 1274: r169:DI=r795:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 303:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 304
	 Choosing alt 0 in insn 304:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 306
	 Choosing alt 2 in insn 306:  (0) r  (1) 0  (2) mr {*muldi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 307:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 310:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=796 from oldreg=173, assigning class GENERAL_REGS to r796
  310: {r796:DI=r796:DI<<0x6;clobber flags:CC;}
      REG_DEAD r172:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1275: r796:DI=r172:DI
    Inserting insn reload after:
 1276: r173:DI=r796:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 311:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 312
	 Choosing alt 0 in insn 312:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 313:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 316:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=797 from oldreg=177, assigning class GENERAL_REGS to r797
  316: {r797:DI=r797:DI<<0x6;clobber flags:CC;}
      REG_DEAD r176:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1277: r797:DI=r176:DI
    Inserting insn reload after:
 1278: r177:DI=r797:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 318
	 Choosing alt 0 in insn 318:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 319:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 320:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=798 from oldreg=180, assigning class GENERAL_REGS to r798
  320: {r798:DI=r798:DI*r179:DI;clobber flags:CC;}
      REG_DEAD r179:DI
      REG_DEAD r175:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1279: r798:DI=r175:DI
    Inserting insn reload after:
 1280: r180:DI=r798:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 322:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 329:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 330
	 Choosing alt 0 in insn 330:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 333
	 Choosing alt 2 in insn 333:  (0) r  (1) 0  (2) mr {*muldi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 334:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 336:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 343:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 344
	 Choosing alt 0 in insn 344:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 349
	 Choosing alt 2 in insn 349:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 351:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 354:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 361:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 363:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 364:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) rzw {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 377:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 378:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 379:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 394:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 400:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 408:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 410:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 411:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 413:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 421:  (0) r  (1) rem {*movdi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) rzw {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 424:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 425:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 426:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 434:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=799 from oldreg=204, assigning class GENERAL_REGS to r799
  434: {r799:DI=r799:DI<<0x9;clobber flags:CC;}
      REG_DEAD r203:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1281: r799:DI=r203:DI
    Inserting insn reload after:
 1282: r204:DI=r799:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 435:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 436
	 Choosing alt 0 in insn 436:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 443:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 446:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=800 from oldreg=210, assigning class GENERAL_REGS to r800
  446: {r800:DI=r800:DI<<0x9;clobber flags:CC;}
      REG_DEAD r209:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1283: r800:DI=r209:DI
    Inserting insn reload after:
 1284: r210:DI=r800:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 448
	 Choosing alt 0 in insn 448:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 455:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 456:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 458:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) r  (1) rem {*movdi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) rzw {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 471:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 472:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 473:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 477:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 481:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 484:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 486:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 487:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 489:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 492:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 497:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 498:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 499
	 Choosing alt 0 in insn 499:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 500:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 506:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 513:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 514
	 Choosing alt 0 in insn 514:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 524:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 525
	 Choosing alt 0 in insn 525:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 527:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=801 from oldreg=644, assigning class GENERAL_REGS to r801
  527: {r801:SI=r801:SI-r235:SI;clobber flags:CC;}
      REG_DEAD r235:SI
      REG_DEAD r231:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1285: r801:SI=r231:SI
    Inserting insn reload after:
 1286: r644:SI=r801:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 533:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 534:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 537:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 539:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 542:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 543:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 544
	 Choosing alt 0 in insn 544:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 545:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 551:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 558:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 559
	 Choosing alt 0 in insn 559:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 562:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 569:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 570
	 Choosing alt 0 in insn 570:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 572:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=802 from oldreg=658, assigning class GENERAL_REGS to r802
  572: {r802:SI=r802:SI-r251:SI;clobber flags:CC;}
      REG_DEAD r251:SI
      REG_DEAD r247:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1287: r802:SI=r247:SI
    Inserting insn reload after:
 1288: r658:SI=r802:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 573:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 576:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 582:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 584
	 Choosing alt 0 in insn 584:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 585:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 590:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 591:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 593:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 596:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 598:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 599:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 600
	 Choosing alt 0 in insn 600:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 601:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 604:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=803 from oldreg=262, assigning class GENERAL_REGS to r803
  604: {r803:DI=r803:DI<<0x6;clobber flags:CC;}
      REG_DEAD r261:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1289: r803:DI=r261:DI
    Inserting insn reload after:
 1290: r262:DI=r803:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 605:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 606
	 Choosing alt 0 in insn 606:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 607:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 610:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 611:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 612:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=804 from oldreg=268, assigning class GENERAL_REGS to r804
  612: {r804:DI=r804:DI<<0x6;clobber flags:CC;}
      REG_DEAD r267:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1291: r804:DI=r267:DI
    Inserting insn reload after:
 1292: r268:DI=r804:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 613:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 614
	 Choosing alt 0 in insn 614:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 615:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 616:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=805 from oldreg=667, assigning class GENERAL_REGS to r805
  616: {r805:DI=r805:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1293: r805:DI=r270:DI
    Inserting insn reload after:
 1294: r667:DI=r805:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 617
	 Choosing alt 0 in insn 617:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 621:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 628:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 634:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 635:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=806 from oldreg=276, assigning class GENERAL_REGS to r806
  635: {r806:DI=r806:DI<<0x6;clobber flags:CC;}
      REG_DEAD r275:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1295: r806:DI=r275:DI
    Inserting insn reload after:
 1296: r276:DI=r806:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 636:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 637
	 Choosing alt 0 in insn 637:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 638:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 639:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 645:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=807 from oldreg=676, assigning class GENERAL_REGS to r807
  645: {r807:DI=r807:DI<<0x8;clobber flags:CC;}
      REG_DEAD r674:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1297: r807:DI=r674:DI
    Inserting insn reload after:
 1298: r676:DI=r807:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 646:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 647
	 Choosing alt 0 in insn 647:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 649:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 650:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 655:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 663:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 664:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 665:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 666
	 Choosing alt 0 in insn 666:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 667:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 669:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 671
	 Choosing alt 0 in insn 671:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 674:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 675:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 676
	 Choosing alt 0 in insn 676:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 679:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 682:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 685:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 688:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 689:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=808 from oldreg=283, assigning class GENERAL_REGS to r808
  689: {r808:DI=r808:DI<<0x6;clobber flags:CC;}
      REG_DEAD r282:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1299: r808:DI=r282:DI
    Inserting insn reload after:
 1300: r283:DI=r808:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 690:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 691
	 Choosing alt 0 in insn 691:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 692:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 693:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 695:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 699:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 702:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 707:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 708:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=809 from oldreg=306, assigning class GENERAL_REGS to r809
  708: {r809:DI=r809:DI<<0x6;clobber flags:CC;}
      REG_DEAD r305:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1301: r809:DI=r305:DI
    Inserting insn reload after:
 1302: r306:DI=r809:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 709:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 710
	 Choosing alt 0 in insn 710:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 711:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 713:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 719:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 720:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 721:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 722
	 Choosing alt 0 in insn 722:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 723:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 725:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 730:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 736:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 737:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=810 from oldreg=320, assigning class GENERAL_REGS to r810
  737: {r810:DI=r810:DI<<0x6;clobber flags:CC;}
      REG_DEAD r319:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1303: r810:DI=r319:DI
    Inserting insn reload after:
 1304: r320:DI=r810:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 738:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 739
	 Choosing alt 0 in insn 739:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 740:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 742:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 743:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 746:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 749:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 750:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 751
	 Choosing alt 0 in insn 751:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 755:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 756:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 757:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 758:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 759
	 Choosing alt 0 in insn 759:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 760:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 761:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 762:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 763:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 764
	 Choosing alt 0 in insn 764:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 765:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 766:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 767:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 768:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 769
	 Choosing alt 0 in insn 769:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 770:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 771:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 772:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 777:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 778:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 779:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=811 from oldreg=342, assigning class GENERAL_REGS to r811
  779: {r811:DI=r811:DI<<0x6;clobber flags:CC;}
      REG_DEAD r341:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1305: r811:DI=r341:DI
    Inserting insn reload after:
 1306: r342:DI=r811:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 780:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 781
	 Choosing alt 0 in insn 781:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 782:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 784:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 785:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 788:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 789:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 790:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 791:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 792:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 793
	 Choosing alt 0 in insn 793:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 796:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 797:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 798:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 799:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 800:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 801
	 Choosing alt 0 in insn 801:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 802:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 803:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 804:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 805:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 806
	 Choosing alt 0 in insn 806:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 807:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 808:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 809:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 810:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 811
	 Choosing alt 0 in insn 811:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 812:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 813:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 814:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 819:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 820:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 821:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 822:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 823:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 824
	 Choosing alt 0 in insn 824:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 825:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 826:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 827:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 828:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 829:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 832:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 835:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 838:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 839:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 840:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 841:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 842:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=812 from oldreg=301, assigning class GENERAL_REGS to r812
  842: {r812:DI=r812:DI<<0x6;clobber flags:CC;}
      REG_DEAD r300:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1307: r812:DI=r300:DI
    Inserting insn reload after:
 1308: r301:DI=r812:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 843:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 844
	 Choosing alt 0 in insn 844:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 845:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 846:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 848:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 852:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 853:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 854:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=813 from oldreg=372, assigning class GENERAL_REGS to r813
  854: {r813:DI=r813:DI<<0x6;clobber flags:CC;}
      REG_DEAD r371:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1309: r813:DI=r371:DI
    Inserting insn reload after:
 1310: r372:DI=r813:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 855:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 856
	 Choosing alt 0 in insn 856:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 857:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 858:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=814 from oldreg=717, assigning class GENERAL_REGS to r814
  858: {r814:DI=r814:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1311: r814:DI=r374:DI
    Inserting insn reload after:
 1312: r717:DI=r814:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 859
	 Choosing alt 0 in insn 859:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 860:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 863:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 864:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 865:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 866:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 867:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 868:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=815 from oldreg=377, assigning class GENERAL_REGS to r815
  868: {r815:DI=r815:DI<<0x6;clobber flags:CC;}
      REG_DEAD r376:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1313: r815:DI=r376:DI
    Inserting insn reload after:
 1314: r377:DI=r815:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 869:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 870
	 Choosing alt 0 in insn 870:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 871:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 873:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 874:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 877:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 878:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 879:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=816 from oldreg=383, assigning class GENERAL_REGS to r816
  879: {r816:DI=r816:DI<<0x6;clobber flags:CC;}
      REG_DEAD r382:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1315: r816:DI=r382:DI
    Inserting insn reload after:
 1316: r383:DI=r816:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 880:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 881
	 Choosing alt 0 in insn 881:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 882:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 883:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 884:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 885:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 886:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 890:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 891:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 892:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 893:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 894
	 Choosing alt 0 in insn 894:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 895:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 896:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 897:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 898:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 899
	 Choosing alt 0 in insn 899:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 900:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 901:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 902:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 903:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 904
	 Choosing alt 0 in insn 904:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 905:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 906:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 907:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 908:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 909:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 910:  (0) r  (1) rm {*movhi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 911:  (0) =*a  (1) *0 {extendhisi2}
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=2,overall=16,losers=2 -- refuse
	 Choosing alt 1 in insn 912:  (0) x  (1) r {*floatsisf2_sse}
      Creating newreg=817 from oldreg=404, assigning class SSE_REGS to r817
  912: r817:SF=float(r730:SI)
      REG_DEAD r730:SI
    Inserting insn reload after:
 1317: r404:SF=r817:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1317:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 913:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 914:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 918:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 925:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 926:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 927:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=818 from oldreg=406, assigning class GENERAL_REGS to r818
  927: {r818:DI=r818:DI<<0x6;clobber flags:CC;}
      REG_DEAD r405:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1318: r818:DI=r405:DI
    Inserting insn reload after:
 1319: r406:DI=r818:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 928:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 929
	 Choosing alt 0 in insn 929:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 930:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 932:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 933:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 936:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 940:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 941:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 942:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 943:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 944
	 Choosing alt 0 in insn 944:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 945:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 946:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 947:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 948:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 949:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 950:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=2,overall=16,losers=2 -- refuse
	 Choosing alt 1 in insn 951:  (0) x  (1) r {*floatdisf2_sse}
      Creating newreg=819 from oldreg=736, assigning class SSE_REGS to r819
  951: r819:SF=float(r424:DI)
      REG_DEAD r424:DI
    Inserting insn reload after:
 1320: r736:SF=r819:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1320:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 952:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 953:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 954:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 955:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 956:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 957
	 Choosing alt 0 in insn 957:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 958:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 959:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 960:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 961:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 962
	 Choosing alt 0 in insn 962:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 963:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 964:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 965:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 968:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 970:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 971:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 972:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=820 from oldreg=413, assigning class GENERAL_REGS to r820
  972: {r820:DI=r820:DI<<0x6;clobber flags:CC;}
      REG_DEAD r412:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1321: r820:DI=r412:DI
    Inserting insn reload after:
 1322: r413:DI=r820:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 973:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 974
	 Choosing alt 0 in insn 974:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 975:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 976:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 978:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 985:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 986:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 987:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=821 from oldreg=433, assigning class GENERAL_REGS to r821
  987: {r821:DI=r821:DI<<0x6;clobber flags:CC;}
      REG_DEAD r432:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1323: r821:DI=r432:DI
    Inserting insn reload after:
 1324: r433:DI=r821:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 988:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 989
	 Choosing alt 0 in insn 989:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 990:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 992:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 993:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 996:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1000:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1001:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1002:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1003:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1004
	 Choosing alt 0 in insn 1004:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1005:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=2,overall=16,losers=2 -- refuse
	 Choosing alt 1 in insn 1006:  (0) x  (1) r {*floatsisf2_sse}
      Creating newreg=822 from oldreg=748, assigning class SSE_REGS to r822
 1006: r822:SF=float(r447:SI)
      REG_DEAD r447:SI
    Inserting insn reload after:
 1325: r748:SF=r822:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1325:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1007:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1008:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1009:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1010:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1011:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1012
	 Choosing alt 0 in insn 1012:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1013:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1014:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1015:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1016:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1017
	 Choosing alt 0 in insn 1017:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1018:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1019:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1020:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1023:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1024:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1025:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1026:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1027:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=823 from oldreg=440, assigning class GENERAL_REGS to r823
 1027: {r823:DI=r823:DI<<0x6;clobber flags:CC;}
      REG_DEAD r439:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1326: r823:DI=r439:DI
    Inserting insn reload after:
 1327: r440:DI=r823:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1028:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1029
	 Choosing alt 0 in insn 1029:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1030:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1031:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1033:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1037:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1040:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1041:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1042:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1043:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1046:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1047:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1048:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1049:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1050:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1051:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1052:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1053:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=824 from oldreg=459, assigning class GENERAL_REGS to r824
 1053: {r824:DI=r824:DI<<0x6;clobber flags:CC;}
      REG_DEAD r458:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1328: r824:DI=r458:DI
    Inserting insn reload after:
 1329: r459:DI=r824:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1054:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1055
	 Choosing alt 0 in insn 1055:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1056:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1057:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1058:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1060:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1061:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1062:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1063:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1064
	 Choosing alt 0 in insn 1064:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1065:  (0) ?r  (1) rmF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1066:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1067:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=4,overall=18,losers=1,rld_nregs=0
            alt=5: Bad operand -- refuse
          alt=6,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=8,overall=12,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=9,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=1216,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=1216,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=13,overall=612,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=1215,losers=2 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
      Creating newreg=825, assigning class NO_REGS to secondary r825
 1072: r825:SF=r468:SF
      REG_DEAD r468:SF
    Inserting the sec. move after:
 1330: xmm0:SF=r825:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=624,losers=2 -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=7,overall=1,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1330:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1073:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1076:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1077:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1079:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1080:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1081:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1082:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1086:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1087:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1088:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1089:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1090
	 Choosing alt 0 in insn 1090:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1091:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1092:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1093:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1094:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1095
	 Choosing alt 0 in insn 1095:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1096:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1097:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1098:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1099:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1100
	 Choosing alt 0 in insn 1100:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1102:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1103:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1104:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1106:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1107:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1109:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1111
	 Choosing alt 0 in insn 1111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1113:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1114:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1115:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1117:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 1118:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=826 from oldreg=499, assigning class SSE_REGS to r826
 1118: r826:SF=r826:SF+r498:SF
      REG_DEAD r498:SF
      REG_DEAD r490:SF
    Inserting insn reload before:
 1331: r826:SF=r490:SF
    Inserting insn reload after:
 1332: r499:SF=r826:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1332:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1119:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1120:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1121:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1122:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1124
	 Choosing alt 0 in insn 1124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1126:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1127:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1128:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1129:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1130
	 Choosing alt 0 in insn 1130:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1133:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1135
	 Choosing alt 0 in insn 1135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1137:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1138:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1139:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1140:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1142:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1143:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1144:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1145:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1146:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1147
	 Choosing alt 0 in insn 1147:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1149:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1150:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1151:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1152:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1153:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1154:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 1155:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=827 from oldreg=526, assigning class SSE_REGS to r827
 1155: r827:SF=r827:SF+r525:SF
      REG_DEAD r525:SF
      REG_DEAD r516:SF
    Inserting insn reload before:
 1333: r827:SF=r516:SF
    Inserting insn reload after:
 1334: r526:SF=r827:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1334:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1156:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1157:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1160:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1161:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1162:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1163:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1164:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=828 from oldreg=472, assigning class GENERAL_REGS to r828
 1164: {r828:DI=r828:DI<<0x6;clobber flags:CC;}
      REG_DEAD r471:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1335: r828:DI=r471:DI
    Inserting insn reload after:
 1336: r472:DI=r828:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1165:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1166
	 Choosing alt 0 in insn 1166:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1168:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1170:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1173:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1177:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1178:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1181:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1184:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1185:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1186:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=829 from oldreg=216, assigning class GENERAL_REGS to r829
 1186: {r829:DI=r829:DI<<0x9;clobber flags:CC;}
      REG_DEAD r215:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1337: r829:DI=r215:DI
    Inserting insn reload after:
 1338: r216:DI=r829:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1188
	 Choosing alt 0 in insn 1188:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1189:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1191:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1196:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1199:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1200:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1202:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1205:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1207:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1208:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81

********** Pseudo live ranges #1: **********

  BB 81
   Insn 1216: point = 0
   Insn 1215: point = 0
   Insn 1211: point = 1
   Insn 1208: point = 3
   Insn 1207: point = 4
   Insn 1206: point = 4
   Insn 1205: point = 5
  BB 80
   Insn 1203: point = 6
   Insn 1202: point = 6
   Insn 1200: point = 7
   Insn 1199: point = 9
  BB 2
   Insn 1218: point = 10
   Insn 22: point = 10
   Insn 21: point = 10
   Insn 20: point = 10
   Insn 19: point = 10
   Insn 18: point = 10
   Insn 17: point = 10
   Insn 16: point = 10
   Insn 15: point = 10
   Insn 14: point = 10
   Insn 13: point = 10
   Insn 9: point = 10
   Insn 8: point = 11
   Insn 7: point = 12
   Insn 6: point = 12
   Insn 5: point = 12
   Insn 4: point = 12
   Insn 3: point = 12
   Insn 2: point = 12
  BB 79
   Insn 1196: point = 12
  BB 78
  BB 77
   Insn 1192: point = 12
   Insn 1191: point = 12
   Insn 1189: point = 13
   Insn 1188: point = 15
   Insn 1187: point = 17
   Insn 1338: point = 18
	Hard reg 1 is preferable by r829 with profit 1
   Insn 1186: point = 20
   Insn 1337: point = 20
	Hard reg 1 is preferable by r829 with profit 1
	Hard reg 0 is preferable by r829 with profit 1
   Insn 1185: point = 22
   Insn 1184: point = 24
  BB 30
   Insn 1236: point = 25
   Insn 477: point = 25
  BB 28
   Insn 1234: point = 25
   Insn 427: point = 25
   Insn 426: point = 25
   Insn 425: point = 25
   Insn 424: point = 25
   Insn 423: point = 25
   Insn 422: point = 25
   Insn 421: point = 26
   Insn 420: point = 26
   Insn 419: point = 27
   Insn 418: point = 28
   Insn 417: point = 29
   Insn 416: point = 30
   Insn 415: point = 31
   Insn 414: point = 32
   Insn 413: point = 32
   Insn 412: point = 33
   Insn 411: point = 34
   Insn 410: point = 35
   Insn 409: point = 36
   Insn 408: point = 37
   Insn 407: point = 38
   Insn 406: point = 39
   Insn 405: point = 39
   Insn 404: point = 40
   Insn 403: point = 42
   Insn 402: point = 44
   Insn 401: point = 46
   Insn 400: point = 48
  BB 24
   Insn 1232: point = 49
   Insn 380: point = 49
   Insn 379: point = 49
   Insn 378: point = 49
   Insn 377: point = 49
   Insn 376: point = 49
   Insn 375: point = 49
   Insn 374: point = 50
   Insn 373: point = 50
   Insn 372: point = 51
   Insn 371: point = 52
   Insn 370: point = 53
   Insn 369: point = 54
   Insn 368: point = 55
   Insn 367: point = 56
   Insn 366: point = 56
   Insn 365: point = 57
   Insn 364: point = 58
   Insn 363: point = 59
   Insn 362: point = 60
   Insn 361: point = 61
   Insn 360: point = 62
   Insn 359: point = 63
   Insn 358: point = 63
   Insn 357: point = 64
   Insn 356: point = 66
   Insn 355: point = 68
   Insn 354: point = 70
  BB 29
   Insn 474: point = 71
   Insn 473: point = 71
   Insn 472: point = 71
   Insn 471: point = 71
   Insn 470: point = 71
   Insn 469: point = 71
   Insn 468: point = 72
   Insn 467: point = 72
   Insn 466: point = 73
   Insn 465: point = 74
   Insn 464: point = 75
   Insn 463: point = 76
   Insn 462: point = 77
   Insn 461: point = 78
   Insn 460: point = 78
   Insn 459: point = 79
   Insn 458: point = 80
   Insn 457: point = 81
   Insn 456: point = 82
   Insn 455: point = 83
   Insn 454: point = 84
   Insn 453: point = 85
   Insn 452: point = 85
   Insn 451: point = 86
   Insn 450: point = 88
   Insn 449: point = 90
   Insn 448: point = 92
   Insn 447: point = 94
   Insn 1284: point = 95
	Hard reg 1 is preferable by r800 with profit 1
   Insn 446: point = 97
   Insn 1283: point = 97
	Hard reg 1 is preferable by r800 with profit 1
	Hard reg 0 is preferable by r800 with profit 1
   Insn 445: point = 99
   Insn 444: point = 101
   Insn 443: point = 102
   Insn 442: point = 103
   Insn 441: point = 104
   Insn 440: point = 104
   Insn 439: point = 105
   Insn 438: point = 107
   Insn 437: point = 109
   Insn 436: point = 111
   Insn 435: point = 113
   Insn 1282: point = 114
	Hard reg 1 is preferable by r799 with profit 1
   Insn 434: point = 116
   Insn 1281: point = 116
	Hard reg 1 is preferable by r799 with profit 1
	Hard reg 0 is preferable by r799 with profit 1
   Insn 433: point = 118
   Insn 432: point = 120
  BB 27
   Insn 397: point = 121
   Insn 396: point = 121
   Insn 395: point = 122
   Insn 394: point = 124
   Insn 393: point = 126
  BB 26
   Insn 391: point = 127
   Insn 390: point = 127
   Insn 389: point = 128
   Insn 388: point = 130
  BB 25
   Insn 386: point = 131
   Insn 385: point = 131
  BB 23
   Insn 352: point = 131
   Insn 351: point = 131
   Insn 350: point = 131
   Insn 349: point = 132
   Insn 348: point = 134
   Insn 347: point = 136
   Insn 346: point = 137
   Insn 345: point = 139
   Insn 344: point = 141
   Insn 343: point = 143
   Insn 342: point = 144
   Insn 341: point = 146
   Insn 340: point = 148
   Insn 339: point = 150
   Insn 338: point = 151
   Insn 337: point = 151
   Insn 336: point = 152
   Insn 335: point = 154
   Insn 334: point = 155
   Insn 333: point = 156
   Insn 332: point = 158
   Insn 331: point = 160
   Insn 330: point = 162
   Insn 329: point = 164
   Insn 328: point = 165
   Insn 327: point = 167
   Insn 326: point = 169
   Insn 325: point = 171
   Insn 324: point = 172
   Insn 323: point = 172
   Insn 322: point = 173
   Insn 321: point = 175
   Insn 1280: point = 176
	Hard reg 2 is preferable by r798 with profit 1
   Insn 320: point = 178
   Insn 1279: point = 179
	Hard reg 2 is preferable by r798 with profit 1
	Hard reg 1 is preferable by r798 with profit 1
   Insn 319: point = 181
   Insn 318: point = 183
   Insn 317: point = 185
   Insn 1278: point = 186
	Hard reg 2 is preferable by r797 with profit 1
   Insn 316: point = 188
   Insn 1277: point = 188
	Hard reg 2 is preferable by r797 with profit 1
	Hard reg 0 is preferable by r797 with profit 1
   Insn 315: point = 190
   Insn 314: point = 192
   Insn 313: point = 193
   Insn 312: point = 195
   Insn 311: point = 197
   Insn 1276: point = 198
	Hard reg 1 is preferable by r796 with profit 1
   Insn 310: point = 200
   Insn 1275: point = 200
	Hard reg 1 is preferable by r796 with profit 1
	Hard reg 0 is preferable by r796 with profit 1
   Insn 309: point = 202
   Insn 308: point = 204
   Insn 307: point = 205
   Insn 306: point = 206
   Insn 305: point = 208
   Insn 304: point = 210
   Insn 303: point = 212
   Insn 1274: point = 213
	Hard reg 2 is preferable by r795 with profit 1
   Insn 302: point = 215
   Insn 1273: point = 215
	Hard reg 2 is preferable by r795 with profit 1
	Hard reg 0 is preferable by r795 with profit 1
   Insn 301: point = 217
   Insn 300: point = 219
   Insn 299: point = 220
   Insn 298: point = 222
   Insn 297: point = 224
   Insn 1272: point = 225
	Hard reg 1 is preferable by r794 with profit 1
   Insn 296: point = 227
   Insn 1271: point = 227
	Hard reg 1 is preferable by r794 with profit 1
	Hard reg 0 is preferable by r794 with profit 1
   Insn 295: point = 229
   Insn 294: point = 231
  BB 22
   Insn 291: point = 232
   Insn 290: point = 232
   Insn 289: point = 232
  BB 21
   Insn 287: point = 232
   Insn 286: point = 232
   Insn 285: point = 233
   Insn 284: point = 234
   Insn 283: point = 234
   Insn 282: point = 235
   Insn 281: point = 235
   Insn 280: point = 237
   Insn 279: point = 238
  BB 18
   Insn 1230: point = 238
   Insn 260: point = 238
   Insn 259: point = 238
   Insn 258: point = 238
  BB 16
   Insn 1228: point = 238
   Insn 244: point = 238
  BB 14
   Insn 1226: point = 238
   Insn 230: point = 238
  BB 12
   Insn 1224: point = 238
   Insn 216: point = 238
  BB 9
   Insn 1222: point = 238
   Insn 192: point = 238
  BB 20
   Insn 276: point = 238
   Insn 275: point = 238
   Insn 274: point = 238
  BB 19
   Insn 272: point = 238
   Insn 271: point = 238
   Insn 270: point = 239
   Insn 269: point = 240
   Insn 268: point = 240
   Insn 267: point = 241
   Insn 266: point = 241
   Insn 265: point = 243
  BB 17
   Insn 256: point = 244
   Insn 255: point = 244
   Insn 254: point = 245
   Insn 253: point = 246
   Insn 252: point = 246
   Insn 251: point = 247
   Insn 250: point = 247
   Insn 249: point = 249
  BB 15
   Insn 242: point = 250
   Insn 241: point = 250
   Insn 240: point = 251
   Insn 239: point = 252
   Insn 238: point = 252
   Insn 237: point = 253
   Insn 236: point = 253
   Insn 235: point = 255
  BB 13
   Insn 228: point = 256
   Insn 227: point = 256
   Insn 226: point = 257
   Insn 225: point = 258
   Insn 224: point = 258
   Insn 223: point = 259
   Insn 222: point = 259
   Insn 221: point = 261
  BB 11
   Insn 213: point = 262
   Insn 212: point = 262
   Insn 211: point = 263
   Insn 210: point = 264
   Insn 209: point = 264
   Insn 208: point = 265
   Insn 207: point = 265
   Insn 206: point = 267
  BB 10
   Insn 204: point = 268
   Insn 203: point = 268
   Insn 202: point = 269
   Insn 201: point = 270
   Insn 200: point = 270
   Insn 199: point = 271
   Insn 198: point = 271
   Insn 197: point = 273
  BB 8
   Insn 189: point = 274
   Insn 188: point = 274
   Insn 187: point = 275
   Insn 186: point = 276
   Insn 185: point = 276
   Insn 184: point = 277
   Insn 183: point = 277
   Insn 182: point = 279
  BB 7
   Insn 180: point = 280
   Insn 179: point = 280
   Insn 178: point = 281
   Insn 177: point = 282
   Insn 176: point = 282
   Insn 175: point = 283
   Insn 174: point = 283
   Insn 173: point = 285
  BB 6
   Insn 171: point = 286
   Insn 170: point = 286
   Insn 169: point = 287
  BB 4
   Insn 1220: point = 288
   Insn 136: point = 288
   Insn 135: point = 288
   Insn 134: point = 289
   Insn 133: point = 291
   Insn 132: point = 292
   Insn 131: point = 292
   Insn 130: point = 293
   Insn 129: point = 295
   Insn 128: point = 297
   Insn 127: point = 298
   Insn 126: point = 300
   Insn 125: point = 301
   Insn 124: point = 303
   Insn 123: point = 305
   Insn 122: point = 306
   Insn 121: point = 307
   Insn 120: point = 309
   Insn 119: point = 310
   Insn 118: point = 310
   Insn 117: point = 311
   Insn 116: point = 313
   Insn 115: point = 315
   Insn 114: point = 316
   Insn 113: point = 318
   Insn 112: point = 319
   Insn 111: point = 321
   Insn 110: point = 323
   Insn 109: point = 324
   Insn 108: point = 325
   Insn 107: point = 327
   Insn 106: point = 328
   Insn 105: point = 328
   Insn 104: point = 329
   Insn 103: point = 331
   Insn 102: point = 333
   Insn 101: point = 334
   Insn 100: point = 336
   Insn 99: point = 337
   Insn 98: point = 339
   Insn 97: point = 341
   Insn 96: point = 342
   Insn 95: point = 343
   Insn 94: point = 345
   Insn 93: point = 346
   Insn 92: point = 346
   Insn 91: point = 347
   Insn 90: point = 349
   Insn 89: point = 351
   Insn 88: point = 352
   Insn 87: point = 354
   Insn 86: point = 355
   Insn 85: point = 357
   Insn 84: point = 359
   Insn 83: point = 360
   Insn 82: point = 361
   Insn 81: point = 363
   Insn 80: point = 364
   Insn 79: point = 364
   Insn 78: point = 365
   Insn 77: point = 367
   Insn 76: point = 369
   Insn 75: point = 370
   Insn 74: point = 372
   Insn 73: point = 373
   Insn 72: point = 375
   Insn 71: point = 377
   Insn 70: point = 378
   Insn 69: point = 379
   Insn 68: point = 381
   Insn 67: point = 382
   Insn 66: point = 382
   Insn 65: point = 383
   Insn 64: point = 385
   Insn 63: point = 387
   Insn 62: point = 388
   Insn 61: point = 390
   Insn 60: point = 391
   Insn 59: point = 393
   Insn 58: point = 395
   Insn 57: point = 396
   Insn 56: point = 397
   Insn 55: point = 398
   Insn 54: point = 398
   Insn 53: point = 399
   Insn 52: point = 401
   Insn 51: point = 403
   Insn 50: point = 404
   Insn 49: point = 405
   Insn 48: point = 407
   Insn 47: point = 409
   Insn 46: point = 411
   Insn 45: point = 413
   Insn 1270: point = 414
	Hard reg 1 is preferable by r793 with profit 1
   Insn 44: point = 416
   Insn 1269: point = 416
	Hard reg 1 is preferable by r793 with profit 1
	Hard reg 0 is preferable by r793 with profit 1
   Insn 43: point = 418
   Insn 42: point = 420
  BB 5
   Insn 165: point = 421
   Insn 164: point = 421
   Insn 163: point = 422
   Insn 162: point = 423
   Insn 161: point = 425
   Insn 160: point = 427
   Insn 159: point = 429
   Insn 158: point = 431
   Insn 157: point = 432
   Insn 156: point = 434
   Insn 155: point = 436
   Insn 154: point = 437
   Insn 153: point = 439
   Insn 152: point = 441
   Insn 151: point = 442
   Insn 150: point = 443
   Insn 149: point = 444
   Insn 148: point = 446
   Insn 147: point = 448
   Insn 146: point = 450
   Insn 145: point = 451
   Insn 144: point = 453
   Insn 143: point = 455
   Insn 142: point = 456
   Insn 141: point = 458
   Insn 140: point = 460
  BB 76
   Insn 1181: point = 461
  BB 75
   Insn 1179: point = 461
   Insn 1178: point = 461
   Insn 1177: point = 462
  BB 34
   Insn 1240: point = 463
   Insn 576: point = 463
  BB 32
   Insn 1238: point = 463
   Insn 528: point = 463
   Insn 1286: point = 464
	Hard reg 0 is preferable by r801 with profit 1
   Insn 527: point = 466
   Insn 1285: point = 467
	Hard reg 0 is preferable by r801 with profit 1
	Hard reg 2 is preferable by r801 with profit 1
   Insn 526: point = 469
   Insn 525: point = 471
   Insn 524: point = 473
   Insn 523: point = 474
   Insn 522: point = 476
   Insn 521: point = 478
   Insn 520: point = 480
   Insn 519: point = 481
   Insn 518: point = 481
   Insn 517: point = 482
   Insn 516: point = 484
   Insn 515: point = 485
   Insn 514: point = 487
   Insn 513: point = 489
   Insn 512: point = 490
   Insn 511: point = 492
   Insn 510: point = 494
   Insn 509: point = 496
   Insn 508: point = 497
   Insn 507: point = 497
   Insn 506: point = 498
   Insn 505: point = 500
   Insn 504: point = 501
   Insn 503: point = 501
   Insn 502: point = 502
   Insn 501: point = 503
   Insn 500: point = 503
   Insn 499: point = 505
   Insn 498: point = 507
   Insn 497: point = 508
   Insn 496: point = 510
   Insn 495: point = 512
   Insn 494: point = 513
   Insn 493: point = 515
   Insn 492: point = 517
   Insn 491: point = 519
   Insn 490: point = 520
   Insn 489: point = 522
   Insn 488: point = 523
   Insn 487: point = 525
   Insn 486: point = 526
   Insn 485: point = 527
   Insn 484: point = 527
  BB 33
   Insn 573: point = 527
   Insn 1288: point = 528
	Hard reg 0 is preferable by r802 with profit 1
   Insn 572: point = 530
   Insn 1287: point = 531
	Hard reg 0 is preferable by r802 with profit 1
	Hard reg 2 is preferable by r802 with profit 1
   Insn 571: point = 533
   Insn 570: point = 535
   Insn 569: point = 537
   Insn 568: point = 538
   Insn 567: point = 540
   Insn 566: point = 542
   Insn 565: point = 544
   Insn 564: point = 545
   Insn 563: point = 545
   Insn 562: point = 546
   Insn 561: point = 548
   Insn 560: point = 549
   Insn 559: point = 551
   Insn 558: point = 553
   Insn 557: point = 554
   Insn 556: point = 556
   Insn 555: point = 558
   Insn 554: point = 560
   Insn 553: point = 561
   Insn 552: point = 561
   Insn 551: point = 562
   Insn 550: point = 564
   Insn 549: point = 565
   Insn 548: point = 565
   Insn 547: point = 566
   Insn 546: point = 567
   Insn 545: point = 567
   Insn 544: point = 569
   Insn 543: point = 571
   Insn 542: point = 572
   Insn 541: point = 574
   Insn 540: point = 576
   Insn 539: point = 577
   Insn 538: point = 579
   Insn 537: point = 581
   Insn 536: point = 583
   Insn 535: point = 584
   Insn 534: point = 586
   Insn 533: point = 587
  BB 31
   Insn 482: point = 588
   Insn 481: point = 588
  BB 74
   Insn 1173: point = 588
  BB 73
   Insn 1171: point = 588
   Insn 1170: point = 588
   Insn 1168: point = 589
   Insn 1167: point = 591
   Insn 1166: point = 593
   Insn 1165: point = 595
   Insn 1336: point = 596
	Hard reg 2 is preferable by r828 with profit 1
   Insn 1164: point = 598
   Insn 1335: point = 598
	Hard reg 2 is preferable by r828 with profit 1
	Hard reg 1 is preferable by r828 with profit 1
   Insn 1163: point = 600
   Insn 1162: point = 602
   Insn 1161: point = 603
   Insn 1160: point = 605
  BB 71
   Insn 1266: point = 606
   Insn 1082: point = 606
   Insn 1081: point = 606
   Insn 1080: point = 606
   Insn 1079: point = 606
   Insn 1078: point = 606
   Insn 1077: point = 607
   Insn 1076: point = 609
  BB 70
   Insn 1073: point = 610
   Insn 1330: point = 610
	Hard reg 21 is preferable by r825 with profit 1
   Insn 1072: point = 611
	Hard reg 21 is preferable by r825 with profit 1
	Hard reg 0 is preferable by r825 with profit 1
   Insn 1071: point = 613
   Insn 1070: point = 614
   Insn 1069: point = 615
   Insn 1068: point = 616
   Insn 1067: point = 617
   Insn 1066: point = 618
   Insn 1065: point = 619
   Insn 1064: point = 621
   Insn 1063: point = 623
   Insn 1062: point = 624
   Insn 1061: point = 626
   Insn 1060: point = 628
   Insn 1059: point = 629
   Insn 1058: point = 631
   Insn 1057: point = 633
   Insn 1056: point = 635
   Insn 1055: point = 637
   Insn 1054: point = 639
   Insn 1329: point = 640
	Hard reg 1 is preferable by r824 with profit 1
   Insn 1053: point = 642
   Insn 1328: point = 642
	Hard reg 1 is preferable by r824 with profit 1
	Hard reg 0 is preferable by r824 with profit 1
   Insn 1052: point = 644
   Insn 1051: point = 646
   Insn 1050: point = 647
   Insn 1049: point = 649
   Insn 1048: point = 650
   Insn 1047: point = 650
   Insn 1046: point = 650
   Insn 1045: point = 650
   Insn 1044: point = 651
   Insn 1043: point = 652
   Insn 1042: point = 654
   Insn 1041: point = 655
   Insn 1040: point = 657
  BB 69
   Insn 1038: point = 658
   Insn 1037: point = 658
  BB 64
   Insn 1262: point = 658
  BB 63
   Insn 979: point = 658
   Insn 978: point = 658
   Insn 976: point = 659
   Insn 975: point = 661
   Insn 974: point = 663
   Insn 973: point = 665
   Insn 1322: point = 666
	Hard reg 2 is preferable by r820 with profit 1
   Insn 972: point = 668
   Insn 1321: point = 668
	Hard reg 2 is preferable by r820 with profit 1
	Hard reg 1 is preferable by r820 with profit 1
   Insn 971: point = 670
   Insn 970: point = 672
   Insn 969: point = 673
   Insn 968: point = 675
  BB 61
   Insn 1259: point = 676
   Insn 936: point = 676
  BB 62
   Insn 965: point = 676
   Insn 964: point = 676
   Insn 963: point = 677
   Insn 962: point = 678
   Insn 961: point = 680
   Insn 960: point = 682
   Insn 959: point = 684
   Insn 958: point = 685
   Insn 957: point = 687
   Insn 956: point = 689
   Insn 955: point = 690
   Insn 954: point = 692
   Insn 953: point = 694
   Insn 952: point = 695
   Insn 1320: point = 696
	Hard reg 0 is preferable by r819 with profit 1
   Insn 951: point = 698
   Insn 950: point = 700
   Insn 949: point = 702
   Insn 948: point = 704
   Insn 947: point = 706
   Insn 946: point = 708
   Insn 945: point = 709
   Insn 944: point = 711
   Insn 943: point = 713
   Insn 942: point = 714
   Insn 941: point = 716
   Insn 940: point = 718
  BB 59
   Insn 1257: point = 719
  BB 58
   Insn 919: point = 719
   Insn 918: point = 719
  BB 56
   Insn 1254: point = 719
   Insn 886: point = 719
   Insn 885: point = 720
   Insn 884: point = 722
   Insn 883: point = 724
   Insn 882: point = 726
   Insn 881: point = 728
   Insn 880: point = 730
   Insn 1316: point = 731
	Hard reg 1 is preferable by r816 with profit 1
   Insn 879: point = 733
   Insn 1315: point = 733
	Hard reg 1 is preferable by r816 with profit 1
	Hard reg 0 is preferable by r816 with profit 1
   Insn 878: point = 735
   Insn 877: point = 737
  BB 57
   Insn 914: point = 738
   Insn 913: point = 738
   Insn 1317: point = 739
	Hard reg 0 is preferable by r817 with profit 1
   Insn 912: point = 741
   Insn 911: point = 743
   Insn 910: point = 745
   Insn 909: point = 747
   Insn 908: point = 749
   Insn 907: point = 751
   Insn 906: point = 753
   Insn 905: point = 754
   Insn 904: point = 756
   Insn 903: point = 758
   Insn 902: point = 759
   Insn 901: point = 761
   Insn 900: point = 763
   Insn 899: point = 764
   Insn 898: point = 766
   Insn 897: point = 768
   Insn 896: point = 770
   Insn 895: point = 771
   Insn 894: point = 773
   Insn 893: point = 775
   Insn 892: point = 776
   Insn 891: point = 778
   Insn 890: point = 780
  BB 68
   Insn 1034: point = 781
   Insn 1033: point = 781
   Insn 1031: point = 782
   Insn 1030: point = 784
   Insn 1029: point = 786
   Insn 1028: point = 788
   Insn 1327: point = 789
	Hard reg 2 is preferable by r823 with profit 1
   Insn 1027: point = 791
   Insn 1326: point = 791
	Hard reg 2 is preferable by r823 with profit 1
	Hard reg 1 is preferable by r823 with profit 1
   Insn 1026: point = 793
   Insn 1025: point = 795
   Insn 1024: point = 796
   Insn 1023: point = 798
  BB 66
   Insn 1264: point = 799
   Insn 996: point = 799
  BB 65
   Insn 994: point = 799
   Insn 993: point = 799
   Insn 992: point = 800
   Insn 991: point = 802
   Insn 990: point = 804
   Insn 989: point = 806
   Insn 988: point = 808
   Insn 1324: point = 809
	Hard reg 1 is preferable by r821 with profit 1
   Insn 987: point = 811
   Insn 1323: point = 811
	Hard reg 1 is preferable by r821 with profit 1
	Hard reg 0 is preferable by r821 with profit 1
   Insn 986: point = 813
   Insn 985: point = 815
  BB 60
   Insn 934: point = 816
   Insn 933: point = 816
   Insn 932: point = 817
   Insn 931: point = 819
   Insn 930: point = 821
   Insn 929: point = 823
   Insn 928: point = 825
   Insn 1319: point = 826
	Hard reg 1 is preferable by r818 with profit 1
   Insn 927: point = 828
   Insn 1318: point = 828
	Hard reg 1 is preferable by r818 with profit 1
	Hard reg 0 is preferable by r818 with profit 1
   Insn 926: point = 830
   Insn 925: point = 832
  BB 55
   Insn 875: point = 833
   Insn 874: point = 833
   Insn 873: point = 834
   Insn 872: point = 836
   Insn 871: point = 838
   Insn 870: point = 840
   Insn 869: point = 842
   Insn 1314: point = 843
	Hard reg 1 is preferable by r815 with profit 1
   Insn 868: point = 845
   Insn 1313: point = 845
	Hard reg 1 is preferable by r815 with profit 1
	Hard reg 0 is preferable by r815 with profit 1
   Insn 867: point = 847
   Insn 866: point = 849
   Insn 865: point = 850
   Insn 864: point = 850
   Insn 863: point = 850
   Insn 862: point = 850
   Insn 861: point = 851
   Insn 860: point = 853
   Insn 859: point = 855
   Insn 1312: point = 857
	Hard reg 1 is preferable by r814 with profit 1
   Insn 858: point = 859
   Insn 1311: point = 859
   Insn 857: point = 860
   Insn 856: point = 862
   Insn 855: point = 864
   Insn 1310: point = 865
	Hard reg 1 is preferable by r813 with profit 1
   Insn 854: point = 867
   Insn 1309: point = 867
	Hard reg 1 is preferable by r813 with profit 1
	Hard reg 0 is preferable by r813 with profit 1
   Insn 853: point = 869
   Insn 852: point = 871
  BB 54
   Insn 849: point = 872
   Insn 848: point = 872
   Insn 846: point = 873
   Insn 845: point = 875
   Insn 844: point = 877
   Insn 843: point = 879
   Insn 1308: point = 880
	Hard reg 2 is preferable by r812 with profit 1
   Insn 842: point = 882
   Insn 1307: point = 882
	Hard reg 2 is preferable by r812 with profit 1
	Hard reg 1 is preferable by r812 with profit 1
   Insn 841: point = 884
   Insn 840: point = 886
   Insn 839: point = 887
   Insn 838: point = 889
  BB 45
   Insn 1246: point = 890
   Insn 702: point = 890
  BB 53
   Insn 835: point = 890
  BB 51
   Insn 1252: point = 890
   Insn 814: point = 890
   Insn 813: point = 891
   Insn 812: point = 893
   Insn 811: point = 895
   Insn 810: point = 897
   Insn 809: point = 898
   Insn 808: point = 900
   Insn 807: point = 902
   Insn 806: point = 903
   Insn 805: point = 905
   Insn 804: point = 907
   Insn 803: point = 909
   Insn 802: point = 910
   Insn 801: point = 912
   Insn 800: point = 914
   Insn 799: point = 915
   Insn 798: point = 917
   Insn 797: point = 919
   Insn 796: point = 920
   Insn 795: point = 920
   Insn 794: point = 921
   Insn 793: point = 922
   Insn 792: point = 924
   Insn 791: point = 925
   Insn 790: point = 927
   Insn 789: point = 929
   Insn 788: point = 930
  BB 49
   Insn 1250: point = 931
   Insn 772: point = 931
   Insn 771: point = 932
   Insn 770: point = 934
   Insn 769: point = 936
   Insn 768: point = 938
   Insn 767: point = 939
   Insn 766: point = 941
   Insn 765: point = 943
   Insn 764: point = 944
   Insn 763: point = 946
   Insn 762: point = 948
   Insn 761: point = 950
   Insn 760: point = 951
   Insn 759: point = 953
   Insn 758: point = 955
   Insn 757: point = 956
   Insn 756: point = 958
   Insn 755: point = 960
   Insn 754: point = 961
   Insn 753: point = 961
   Insn 752: point = 962
   Insn 751: point = 963
   Insn 750: point = 965
   Insn 749: point = 966
   Insn 748: point = 968
   Insn 747: point = 970
   Insn 746: point = 971
  BB 47
   Insn 1248: point = 972
   Insn 730: point = 972
   Insn 729: point = 972
   Insn 728: point = 973
   Insn 727: point = 974
   Insn 726: point = 976
   Insn 725: point = 978
   Insn 724: point = 980
   Insn 723: point = 981
   Insn 722: point = 983
   Insn 721: point = 985
   Insn 720: point = 986
   Insn 719: point = 988
   Insn 718: point = 990
   Insn 717: point = 991
  BB 52
   Insn 832: point = 992
   Insn 831: point = 992
   Insn 830: point = 993
   Insn 829: point = 994
   Insn 828: point = 996
   Insn 827: point = 998
   Insn 826: point = 1000
   Insn 825: point = 1001
   Insn 824: point = 1003
   Insn 823: point = 1005
   Insn 822: point = 1006
   Insn 821: point = 1008
   Insn 820: point = 1010
   Insn 819: point = 1011
  BB 50
   Insn 786: point = 1012
   Insn 785: point = 1012
   Insn 784: point = 1013
   Insn 783: point = 1015
   Insn 782: point = 1017
   Insn 781: point = 1019
   Insn 780: point = 1021
   Insn 1306: point = 1022
	Hard reg 1 is preferable by r811 with profit 1
   Insn 779: point = 1024
   Insn 1305: point = 1024
	Hard reg 1 is preferable by r811 with profit 1
	Hard reg 0 is preferable by r811 with profit 1
   Insn 778: point = 1026
   Insn 777: point = 1028
  BB 48
   Insn 744: point = 1029
   Insn 743: point = 1029
   Insn 742: point = 1030
   Insn 741: point = 1032
   Insn 740: point = 1034
   Insn 739: point = 1036
   Insn 738: point = 1038
   Insn 1304: point = 1039
	Hard reg 1 is preferable by r810 with profit 1
   Insn 737: point = 1041
   Insn 1303: point = 1041
	Hard reg 1 is preferable by r810 with profit 1
	Hard reg 0 is preferable by r810 with profit 1
   Insn 736: point = 1043
   Insn 735: point = 1045
  BB 46
   Insn 715: point = 1046
   Insn 714: point = 1046
   Insn 713: point = 1047
   Insn 712: point = 1049
   Insn 711: point = 1051
   Insn 710: point = 1053
   Insn 709: point = 1055
   Insn 1302: point = 1056
	Hard reg 1 is preferable by r809 with profit 1
   Insn 708: point = 1058
   Insn 1301: point = 1058
	Hard reg 1 is preferable by r809 with profit 1
	Hard reg 0 is preferable by r809 with profit 1
   Insn 707: point = 1060
   Insn 706: point = 1062
  BB 44
   Insn 700: point = 1063
   Insn 699: point = 1063
  BB 38
   Insn 1242: point = 1063
   Insn 650: point = 1063
   Insn 649: point = 1063
   Insn 648: point = 1063
   Insn 647: point = 1064
   Insn 646: point = 1066
   Insn 1298: point = 1067
	Hard reg 1 is preferable by r807 with profit 1
   Insn 645: point = 1069
   Insn 1297: point = 1069
	Hard reg 1 is preferable by r807 with profit 1
	Hard reg 0 is preferable by r807 with profit 1
   Insn 644: point = 1071
   Insn 643: point = 1073
  BB 43
   Insn 696: point = 1074
   Insn 695: point = 1074
   Insn 693: point = 1075
   Insn 692: point = 1077
   Insn 691: point = 1079
   Insn 690: point = 1081
   Insn 1300: point = 1082
	Hard reg 2 is preferable by r808 with profit 1
   Insn 689: point = 1084
   Insn 1299: point = 1084
	Hard reg 2 is preferable by r808 with profit 1
	Hard reg 1 is preferable by r808 with profit 1
   Insn 688: point = 1086
   Insn 687: point = 1088
   Insn 686: point = 1089
   Insn 685: point = 1091
  BB 39
   Insn 1244: point = 1092
   Insn 655: point = 1092
  BB 37
   Insn 641: point = 1092
   Insn 640: point = 1092
   Insn 639: point = 1093
   Insn 638: point = 1095
   Insn 637: point = 1097
   Insn 636: point = 1099
   Insn 1296: point = 1100
	Hard reg 2 is preferable by r806 with profit 1
   Insn 635: point = 1102
   Insn 1295: point = 1102
	Hard reg 2 is preferable by r806 with profit 1
	Hard reg 1 is preferable by r806 with profit 1
   Insn 634: point = 1104
   Insn 633: point = 1106
   Insn 632: point = 1107
   Insn 631: point = 1109
  BB 36
   Insn 628: point = 1110
   Insn 627: point = 1111
   Insn 626: point = 1112
   Insn 625: point = 1112
   Insn 624: point = 1113
   Insn 623: point = 1114
   Insn 622: point = 1115
   Insn 621: point = 1116
   Insn 620: point = 1117
   Insn 619: point = 1119
   Insn 618: point = 1121
   Insn 617: point = 1123
   Insn 1294: point = 1125
	Hard reg 2 is preferable by r805 with profit 1
   Insn 616: point = 1127
   Insn 1293: point = 1127
   Insn 615: point = 1128
   Insn 614: point = 1130
   Insn 613: point = 1132
   Insn 1292: point = 1133
	Hard reg 2 is preferable by r804 with profit 1
   Insn 612: point = 1135
   Insn 1291: point = 1135
	Hard reg 2 is preferable by r804 with profit 1
	Hard reg 0 is preferable by r804 with profit 1
   Insn 611: point = 1137
   Insn 610: point = 1139
   Insn 609: point = 1140
   Insn 608: point = 1142
   Insn 607: point = 1144
   Insn 606: point = 1146
   Insn 605: point = 1148
   Insn 1290: point = 1149
	Hard reg 2 is preferable by r803 with profit 1
   Insn 604: point = 1151
   Insn 1289: point = 1151
	Hard reg 2 is preferable by r803 with profit 1
	Hard reg 0 is preferable by r803 with profit 1
   Insn 603: point = 1153
   Insn 602: point = 1155
   Insn 601: point = 1156
   Insn 600: point = 1158
   Insn 599: point = 1160
   Insn 598: point = 1161
   Insn 597: point = 1163
   Insn 596: point = 1165
  BB 35
   Insn 594: point = 1166
   Insn 593: point = 1166
   Insn 592: point = 1166
   Insn 591: point = 1166
   Insn 590: point = 1166
   Insn 589: point = 1166
   Insn 588: point = 1167
   Insn 587: point = 1168
   Insn 586: point = 1168
   Insn 585: point = 1169
   Insn 584: point = 1171
   Insn 583: point = 1173
   Insn 582: point = 1174
   Insn 581: point = 1176
   Insn 580: point = 1178
  BB 42
   Insn 682: point = 1179
  BB 41
   Insn 679: point = 1179
   Insn 678: point = 1180
   Insn 677: point = 1182
   Insn 676: point = 1184
   Insn 675: point = 1186
   Insn 674: point = 1187
   Insn 673: point = 1189
   Insn 672: point = 1191
   Insn 671: point = 1192
   Insn 670: point = 1194
   Insn 669: point = 1196
   Insn 668: point = 1198
   Insn 667: point = 1199
   Insn 666: point = 1201
   Insn 665: point = 1203
   Insn 664: point = 1204
   Insn 663: point = 1206
   Insn 662: point = 1208
  BB 40
   Insn 660: point = 1209
   Insn 659: point = 1209
  BB 67
   Insn 1020: point = 1209
   Insn 1019: point = 1209
   Insn 1018: point = 1210
   Insn 1017: point = 1211
   Insn 1016: point = 1213
   Insn 1015: point = 1215
   Insn 1014: point = 1217
   Insn 1013: point = 1218
   Insn 1012: point = 1220
   Insn 1011: point = 1222
   Insn 1010: point = 1223
   Insn 1009: point = 1225
   Insn 1008: point = 1227
   Insn 1007: point = 1228
   Insn 1325: point = 1229
	Hard reg 0 is preferable by r822 with profit 1
   Insn 1006: point = 1231
   Insn 1005: point = 1233
   Insn 1004: point = 1235
   Insn 1003: point = 1237
   Insn 1002: point = 1238
   Insn 1001: point = 1240
   Insn 1000: point = 1242
  BB 72
   Insn 1157: point = 1243
   Insn 1156: point = 1243
   Insn 1334: point = 1244
	Hard reg 0 is preferable by r827 with profit 1
   Insn 1155: point = 1246
   Insn 1333: point = 1247
	Hard reg 0 is preferable by r827 with profit 1
	Hard reg 22 is preferable by r827 with profit 1
   Insn 1154: point = 1249
   Insn 1153: point = 1251
   Insn 1152: point = 1253
   Insn 1151: point = 1255
   Insn 1150: point = 1257
   Insn 1149: point = 1259
   Insn 1148: point = 1260
   Insn 1147: point = 1262
   Insn 1146: point = 1264
   Insn 1145: point = 1265
   Insn 1144: point = 1267
   Insn 1143: point = 1269
   Insn 1142: point = 1270
   Insn 1141: point = 1272
   Insn 1140: point = 1274
   Insn 1139: point = 1276
   Insn 1138: point = 1278
   Insn 1137: point = 1280
   Insn 1136: point = 1281
   Insn 1135: point = 1283
   Insn 1134: point = 1285
   Insn 1133: point = 1286
   Insn 1132: point = 1288
   Insn 1131: point = 1290
   Insn 1130: point = 1291
   Insn 1129: point = 1293
   Insn 1128: point = 1295
   Insn 1127: point = 1297
   Insn 1126: point = 1299
   Insn 1125: point = 1300
   Insn 1124: point = 1302
   Insn 1123: point = 1304
   Insn 1122: point = 1305
   Insn 1121: point = 1307
   Insn 1120: point = 1309
   Insn 1119: point = 1310
   Insn 1332: point = 1311
	Hard reg 0 is preferable by r826 with profit 1
   Insn 1118: point = 1313
   Insn 1331: point = 1314
	Hard reg 0 is preferable by r826 with profit 1
	Hard reg 22 is preferable by r826 with profit 1
   Insn 1117: point = 1316
   Insn 1116: point = 1318
   Insn 1115: point = 1320
   Insn 1114: point = 1322
   Insn 1113: point = 1324
   Insn 1112: point = 1325
   Insn 1111: point = 1327
   Insn 1110: point = 1329
   Insn 1109: point = 1330
   Insn 1108: point = 1332
   Insn 1107: point = 1334
   Insn 1106: point = 1335
   Insn 1105: point = 1337
   Insn 1104: point = 1339
   Insn 1103: point = 1341
   Insn 1102: point = 1343
   Insn 1101: point = 1344
   Insn 1100: point = 1346
   Insn 1099: point = 1348
   Insn 1098: point = 1349
   Insn 1097: point = 1351
   Insn 1096: point = 1353
   Insn 1095: point = 1354
   Insn 1094: point = 1356
   Insn 1093: point = 1358
   Insn 1092: point = 1360
   Insn 1091: point = 1361
   Insn 1090: point = 1363
   Insn 1089: point = 1365
   Insn 1088: point = 1366
   Insn 1087: point = 1368
   Insn 1086: point = 1370
  BB 3
   Insn 40: point = 1371
   Insn 39: point = 1371
   Insn 38: point = 1372
   Insn 37: point = 1374
   Insn 36: point = 1376
   Insn 35: point = 1377
   Insn 34: point = 1379
   Insn 33: point = 1381
   Insn 32: point = 1383
   Insn 31: point = 1384
   Insn 30: point = 1384
   Insn 29: point = 1384
   Insn 28: point = 1384
   Insn 27: point = 1385
   Insn 26: point = 1387
 r83: [6..7]
 r84: [1383..1385]
 r85: [1375..1377]
 r86: [1373..1374]
 r87: [1371..1372]
 r88: [417..418]
 r89: [412..414]
 r90: [410..411]
 r91: [408..409]
 r92: [406..407]
 r93: [400..401]
 r94: [398..399]
 r95: [392..393]
 r96: [389..391]
 r97: [378..388]
 r98: [384..385]
 r99: [382..383]
 r100: [378..379]
 r101: [374..375]
 r102: [371..373]
 r103: [360..370]
 r104: [366..367]
 r105: [364..365]
 r106: [360..361]
 r107: [356..357]
 r108: [353..355]
 r109: [342..352]
 r110: [348..349]
 r111: [346..347]
 r112: [342..343]
 r113: [338..339]
 r114: [335..337]
 r115: [324..334]
 r116: [330..331]
 r117: [328..329]
 r118: [324..325]
 r119: [320..321]
 r120: [317..319]
 r121: [306..316]
 r122: [312..313]
 r123: [310..311]
 r124: [306..307]
 r125: [302..303]
 r126: [299..301]
 r127: [288..298]
 r128: [294..295]
 r129: [292..293]
 r130: [288..289]
 r131: [457..458]
 r132: [454..456]
 r133: [452..453]
 r134: [445..451]
 r135: [447..448]
 r136: [445..446]
 r137: [442..444]
 r138: [438..439]
 r139: [435..437]
 r140: [433..434]
 r141: [424..432]
 r142: [428..429]
 r143: [426..427]
 r144: [424..425]
 r145: [421..423]
 r146: [282..283]
 r147: [280..281]
 r148: [276..277]
 r149: [274..275]
 r150: [270..271]
 r151: [268..269]
 r152: [264..265]
 r153: [262..263]
 r154: [258..259]
 r155: [256..257]
 r156: [252..253]
 r157: [250..251]
 r158: [246..247]
 r159: [244..245]
 r160: [240..241]
 r161: [238..239]
 r162: [234..235]
 r163: [232..233]
 r164: [228..229]
 r165: [223..225]
 r166: [221..222]
 r167: [207..220]
 r168: [216..217]
 r169: [211..213]
 r170: [209..210]
 r171: [207..208]
 r172: [201..202]
 r173: [196..198]
 r174: [194..195]
 r175: [180..193]
 r176: [189..190]
 r177: [184..186]
 r178: [182..183]
 r179: [178..181]
 r180: [157..176]
 r181: [171..173]
 r182: [163..165]
 r183: [161..162]
 r184: [159..160]
 r185: [157..158]
 r186: [150..152]
 r187: [142..144]
 r188: [140..141]
 r189: [138..139]
 r190: [133..137]
 r191: [133..134]
 r192: [131..132]
 r193: [67..68]
 r194: [65..66]
 r195: [63..64]
 r196: [127..128]
 r197: [123..124]
 r198: [121..122]
 r199: [45..46]
 r200: [43..44]
 r201: [41..42]
 r202: [39..40]
 r203: [117..118]
 r204: [112..114]
 r205: [110..111]
 r206: [108..109]
 r207: [106..107]
 r208: [104..105]
 r209: [98..99]
 r210: [93..95]
 r211: [91..92]
 r212: [89..90]
 r213: [87..88]
 r214: [85..86]
 r215: [21..22]
 r216: [16..18]
 r217: [14..15]
 r218: [12..13]
 r219: [521..523]
 r220: [514..520]
 r221: [516..517]
 r222: [514..515]
 r223: [502..513]
 r224: [509..510]
 r225: [506..508]
 r226: [504..505]
 r227: [501..503]
 r228: [496..498]
 r229: [488..490]
 r230: [486..487]
 r231: [468..485]
 r232: [480..482]
 r233: [472..474]
 r234: [470..471]
 r235: [466..469]
 r236: [578..584]
 r237: [580..581]
 r238: [578..579]
 r239: [566..577]
 r240: [573..574]
 r241: [570..572]
 r242: [568..569]
 r243: [565..567]
 r244: [560..562]
 r245: [552..554]
 r246: [550..551]
 r247: [532..549]
 r248: [544..546]
 r249: [536..538]
 r250: [534..535]
 r251: [530..533]
 r252: [1175..1176]
 r253: [1172..1174]
 r254: [1170..1171]
 r255: [1168..1169]
 r256: [1166..1167]
 r257: [1162..1163]
 r258: [1159..1161]
 r259: [1157..1158]
 r260: [1115..1156]
 r261: [1152..1153]
 r262: [1147..1149]
 r263: [1145..1146]
 r264: [1143..1144]
 r265: [1141..1142]
 r266: [1114..1140]
 r267: [1136..1137]
 r268: [1131..1133]
 r269: [1129..1130]
 r270: [1124..1128]
 r271: [1118..1119]
 r272: [1113..1117]
 r273: [1110..1111]
 r274: [1092..1107]
 r275: [1103..1104]
 r276: [1098..1100]
 r277: [1096..1097]
 r278: [1094..1095]
 r279: [1092..1093]
 r280: [1063..1064]
 r281: [1074..1089]
 r282: [1085..1086]
 r283: [1080..1082]
 r284: [1078..1079]
 r285: [1076..1077]
 r286: [1074..1075]
 r287: [1205..1206]
 r288: [1202..1204]
 r289: [1200..1201]
 r290: [1193..1199]
 r291: [1195..1196]
 r292: [1193..1194]
 r293: [1179..1192]
 r294: [1188..1189]
 r295: [1185..1187]
 r296: [1183..1184]
 r297: [1181..1182]
 r298: [1179..1180]
 r299: [872..887]
 r300: [883..884]
 r301: [878..880]
 r302: [876..877]
 r303: [874..875]
 r304: [872..873]
 r305: [1059..1060]
 r306: [1054..1056]
 r307: [1052..1053]
 r308: [1050..1051]
 r309: [1048..1049]
 r310: [1046..1047]
 r311: [973..991]
 r312: [987..988]
 r313: [984..986]
 r314: [982..983]
 r315: [975..981]
 r316: [977..978]
 r317: [975..976]
 r318: [972..974]
 r319: [1042..1043]
 r320: [1037..1039]
 r321: [1035..1036]
 r322: [1033..1034]
 r323: [1031..1032]
 r324: [1029..1030]
 r325: [962..971]
 r326: [967..968]
 r327: [964..966]
 r328: [961..963]
 r329: [957..958]
 r330: [954..956]
 r331: [952..953]
 r332: [945..951]
 r333: [947..948]
 r334: [945..946]
 r335: [931..944]
 r336: [940..941]
 r337: [937..939]
 r338: [935..936]
 r339: [933..934]
 r340: [931..932]
 r341: [1025..1026]
 r342: [1020..1022]
 r343: [1018..1019]
 r344: [1016..1017]
 r345: [1014..1015]
 r346: [1012..1013]
 r347: [921..930]
 r348: [926..927]
 r349: [923..925]
 r350: [920..922]
 r351: [916..917]
 r352: [913..915]
 r353: [911..912]
 r354: [904..910]
 r355: [906..907]
 r356: [904..905]
 r357: [890..903]
 r358: [899..900]
 r359: [896..898]
 r360: [894..895]
 r361: [892..893]
 r362: [890..891]
 r363: [993..1011]
 r364: [1007..1008]
 r365: [1004..1006]
 r366: [1002..1003]
 r367: [995..1001]
 r368: [997..998]
 r369: [995..996]
 r370: [992..994]
 r371: [868..869]
 r372: [863..865]
 r373: [861..862]
 r374: [856..860]
 r375: [850..851]
 r376: [846..847]
 r377: [841..843]
 r378: [839..840]
 r379: [837..838]
 r380: [835..836]
 r381: [833..834]
 r382: [734..735]
 r383: [729..731]
 r384: [727..728]
 r385: [725..726]
 r386: [723..724]
 r387: [721..722]
 r388: [719..720]
 r389: [777..778]
 r390: [774..776]
 r391: [772..773]
 r392: [765..771]
 r393: [767..768]
 r394: [765..766]
 r395: [738..764]
 r396: [760..761]
 r397: [757..759]
 r398: [755..756]
 r399: [748..754]
 r400: [750..751]
 r401: [748..749]
 r402: [746..747]
 r403: [744..745]
 r404: [738..739]
 r405: [829..830]
 r406: [824..826]
 r407: [822..823]
 r408: [820..821]
 r409: [818..819]
 r410: [816..817]
 r411: [658..673]
 r412: [669..670]
 r413: [664..666]
 r414: [662..663]
 r415: [660..661]
 r416: [658..659]
 r417: [715..716]
 r418: [712..714]
 r419: [710..711]
 r420: [703..709]
 r421: [705..706]
 r422: [703..704]
 r423: [701..702]
 r424: [699..700]
 r425: [691..692]
 r426: [688..690]
 r427: [686..687]
 r428: [679..685]
 r429: [681..682]
 r430: [679..680]
 r431: [676..678]
 r432: [812..813]
 r433: [807..809]
 r434: [805..806]
 r435: [803..804]
 r436: [801..802]
 r437: [799..800]
 r438: [781..796]
 r439: [792..793]
 r440: [787..789]
 r441: [785..786]
 r442: [783..784]
 r443: [781..782]
 r444: [1239..1240]
 r445: [1236..1238]
 r446: [1234..1235]
 r447: [1232..1233]
 r448: [1224..1225]
 r449: [1221..1223]
 r450: [1219..1220]
 r451: [1212..1218]
 r452: [1214..1215]
 r453: [1212..1213]
 r454: [1209..1211]
 r455: [651..655]
 r456: [650..652]
 r457: [616..647]
 r458: [643..644]
 r459: [638..640]
 r460: [636..637]
 r461: [634..635]
 r462: [632..633]
 r463: [630..631]
 r464: [613..629]
 r465: [625..626]
 r466: [622..624]
 r467: [620..621]
 r468: [612..619]
 r469: [606..607]
 r470: [588..603]
 r471: [599..600]
 r472: [594..596]
 r473: [592..593]
 r474: [590..591]
 r475: [588..589]
 r476: [1367..1368]
 r477: [1364..1366]
 r478: [1362..1363]
 r479: [1355..1361]
 r480: [1357..1358]
 r481: [1355..1356]
 r482: [1310..1354]
 r483: [1350..1351]
 r484: [1347..1349]
 r485: [1345..1346]
 r486: [1338..1344]
 r487: [1340..1341]
 r488: [1338..1339]
 r489: [1336..1337]
 r490: [1315..1335]
 r491: [1331..1332]
 r492: [1328..1330]
 r493: [1326..1327]
 r494: [1319..1325]
 r495: [1321..1322]
 r496: [1319..1320]
 r497: [1317..1318]
 r498: [1313..1316]
 r499: [1310..1311]
 r500: [1306..1307]
 r501: [1303..1305]
 r502: [1301..1302]
 r503: [1292..1300]
 r504: [1296..1297]
 r505: [1294..1295]
 r506: [1292..1293]
 r507: [1243..1291]
 r508: [1287..1288]
 r509: [1284..1286]
 r510: [1282..1283]
 r511: [1273..1281]
 r512: [1277..1278]
 r513: [1275..1276]
 r514: [1273..1274]
 r515: [1271..1272]
 r516: [1248..1270]
 r517: [1266..1267]
 r518: [1263..1265]
 r519: [1261..1262]
 r520: [1252..1260]
 r521: [1256..1257]
 r522: [1254..1255]
 r523: [1252..1253]
 r524: [1250..1251]
 r525: [1246..1249]
 r526: [1243..1244]
 r527: [2..3]
 r528: [0..1]
 r529: [10..11]
 r530: [1386..1387]
 r531: [1382..1384] [1378..1379]
 r532: [1380..1381]
 r533: [1375..1376]
 r534: [419..420]
 r535: [412..413]
 r536: [404..405]
 r537: [402..403]
 r538: [396..397]
 r539: [394..395]
 r540: [389..390]
 r541: [386..387]
 r542: [380..381]
 r543: [376..377]
 r544: [371..372]
 r545: [368..369]
 r546: [362..363]
 r547: [358..359]
 r548: [353..354]
 r549: [350..351]
 r550: [344..345]
 r551: [340..341]
 r552: [335..336]
 r553: [332..333]
 r554: [326..327]
 r555: [322..323]
 r556: [317..318]
 r557: [314..315]
 r558: [308..309]
 r559: [304..305]
 r560: [299..300]
 r561: [296..297]
 r562: [290..291]
 r563: [459..460]
 r564: [454..455]
 r565: [449..450]
 r566: [442..443]
 r567: [440..441]
 r568: [435..436]
 r569: [430..431]
 r570: [421..422]
 r571: [286..287]
 r572: [284..285]
 r573: [278..279]
 r574: [272..273]
 r575: [266..267]
 r576: [260..261]
 r577: [254..255]
 r578: [248..249]
 r579: [242..243]
 r580: [236..237]
 r581: [230..231]
 r582: [223..224]
 r583: [218..219]
 r584: [211..212]
 r585: [205..206]
 r586: [203..204]
 r587: [196..197]
 r588: [191..192]
 r589: [184..185]
 r590: [174..175]
 r591: [170..172] [166..167]
 r592: [168..169]
 r593: [163..164]
 r594: [155..156]
 r595: [153..154]
 r596: [149..151] [145..146]
 r597: [147..148]
 r598: [142..143]
 r599: [135..136]
 r600: [69..70]
 r601: [61..62]
 r602: [53..60]
 r603: [52..59]
 r604: [51..58]
 r605: [50..57]
 r606: [49..56]
 r607: [54..55]
 r608: [129..130]
 r609: [125..126]
 r610: [47..48]
 r611: [37..38]
 r612: [29..36]
 r613: [28..35]
 r614: [27..34]
 r615: [26..33]
 r616: [25..32]
 r617: [30..31]
 r618: [119..120]
 r619: [112..113]
 r620: [102..103]
 r621: [100..101]
 r622: [93..94]
 r623: [83..84]
 r624: [75..82]
 r625: [74..81]
 r626: [73..80]
 r627: [72..79]
 r628: [71..78]
 r629: [76..77]
 r630: [524..526]
 r631: [524..525]
 r632: [521..522]
 r633: [518..519]
 r634: [511..512]
 r635: [506..507]
 r636: [499..500]
 r637: [495..497] [491..492]
 r638: [493..494]
 r639: [488..489]
 r640: [483..484]
 r641: [479..481] [475..476]
 r642: [477..478]
 r643: [472..473]
 r644: [463..464]
 r645: [585..587]
 r646: [585..586]
 r647: [582..583]
 r648: [575..576]
 r649: [570..571]
 r650: [563..564]
 r651: [559..561] [555..556]
 r652: [557..558]
 r653: [552..553]
 r654: [547..548]
 r655: [543..545] [539..540]
 r656: [541..542]
 r657: [536..537]
 r658: [527..528]
 r659: [1177..1178]
 r660: [1172..1173]
 r661: [1164..1165]
 r662: [1159..1160]
 r663: [1154..1155]
 r664: [1147..1148]
 r665: [1138..1139]
 r666: [1131..1132]
 r667: [1124..1125]
 r668: [1122..1123]
 r669: [1120..1121]
 r670: [1112..1116]
 r671: [1108..1109]
 r672: [1105..1106]
 r673: [1098..1099]
 r674: [1070..1071]
 r675: [1072..1073]
 r676: [1065..1067]
 r677: [1065..1066]
 r678: [1207..1208]
 r679: [1202..1203]
 r680: [1197..1198]
 r681: [1190..1191]
 r682: [1185..1186]
 r683: [1090..1091]
 r684: [1087..1088]
 r685: [1080..1081]
 r686: [1061..1062]
 r687: [1054..1055]
 r688: [989..990]
 r689: [984..985]
 r690: [979..980]
 r691: [1044..1045]
 r692: [1037..1038]
 r693: [969..970]
 r694: [964..965]
 r695: [959..960]
 r696: [954..955]
 r697: [949..950]
 r698: [942..943]
 r699: [937..938]
 r700: [1027..1028]
 r701: [1020..1021]
 r702: [928..929]
 r703: [923..924]
 r704: [918..919]
 r705: [913..914]
 r706: [908..909]
 r707: [901..902]
 r708: [896..897]
 r709: [1009..1010]
 r710: [1004..1005]
 r711: [999..1000]
 r712: [888..889]
 r713: [885..886]
 r714: [878..879]
 r715: [870..871]
 r716: [863..864]
 r717: [856..857]
 r718: [854..855]
 r719: [852..853]
 r720: [848..849]
 r721: [841..842]
 r722: [736..737]
 r723: [729..730]
 r724: [779..780]
 r725: [774..775]
 r726: [769..770]
 r727: [762..763]
 r728: [757..758]
 r729: [752..753]
 r730: [742..743]
 r731: [831..832]
 r732: [824..825]
 r733: [717..718]
 r734: [712..713]
 r735: [707..708]
 r736: [695..696]
 r737: [693..694]
 r738: [688..689]
 r739: [683..684]
 r740: [676..677]
 r741: [674..675]
 r742: [671..672]
 r743: [664..665]
 r744: [814..815]
 r745: [807..808]
 r746: [1241..1242]
 r747: [1236..1237]
 r748: [1228..1229]
 r749: [1226..1227]
 r750: [1221..1222]
 r751: [1216..1217]
 r752: [1209..1210]
 r753: [797..798]
 r754: [794..795]
 r755: [787..788]
 r756: [656..657]
 r757: [653..654]
 r758: [648..649]
 r759: [645..646]
 r760: [638..639]
 r761: [627..628]
 r762: [622..623]
 r763: [615..618]
 r764: [614..617]
 r765: [608..609]
 r766: [1369..1370]
 r767: [1364..1365]
 r768: [1359..1360]
 r769: [1352..1353]
 r770: [1347..1348]
 r771: [1342..1343]
 r772: [1333..1334]
 r773: [1328..1329]
 r774: [1323..1324]
 r775: [1308..1309]
 r776: [1303..1304]
 r777: [1298..1299]
 r778: [1289..1290]
 r779: [1284..1285]
 r780: [1279..1280]
 r781: [1268..1269]
 r782: [1263..1264]
 r783: [1258..1259]
 r784: [604..605]
 r785: [601..602]
 r786: [594..595]
 r787: [461..462]
 r788: [23..24]
 r789: [16..17]
 r790: [8..9]
 r791: [4..5]
 r793: [415..416]
 r794: [226..227]
 r795: [214..215]
 r796: [199..200]
 r797: [187..188]
 r798: [177..179]
 r799: [115..116]
 r800: [96..97]
 r801: [465..467]
 r802: [529..531]
 r803: [1150..1151]
 r804: [1134..1135]
 r805: [1126..1127]
 r806: [1101..1102]
 r807: [1068..1069]
 r808: [1083..1084]
 r809: [1057..1058]
 r810: [1040..1041]
 r811: [1023..1024]
 r812: [881..882]
 r813: [866..867]
 r814: [858..859]
 r815: [844..845]
 r816: [732..733]
 r817: [740..741]
 r818: [827..828]
 r819: [697..698]
 r820: [667..668]
 r821: [810..811]
 r822: [1230..1231]
 r823: [790..791]
 r824: [641..642]
 r825: [610..611]
 r826: [1312..1314]
 r827: [1245..1247]
 r828: [597..598]
 r829: [19..20]
Compressing live ranges: from 1388 to 1188 - 85%
Ranges after the compression:
 r83: [6..7]
 r84: [1184..1185]
 r85: [1178..1179]
 r86: [1176..1177]
 r87: [1174..1175]
 r88: [356..357]
 r89: [352..353]
 r90: [350..351]
 r91: [348..349]
 r92: [346..347]
 r93: [340..341]
 r94: [338..339]
 r95: [332..333]
 r96: [330..331]
 r97: [320..329]
 r98: [326..327]
 r99: [324..325]
 r100: [320..321]
 r101: [316..317]
 r102: [314..315]
 r103: [304..313]
 r104: [310..311]
 r105: [308..309]
 r106: [304..305]
 r107: [300..301]
 r108: [298..299]
 r109: [288..297]
 r110: [294..295]
 r111: [292..293]
 r112: [288..289]
 r113: [284..285]
 r114: [282..283]
 r115: [272..281]
 r116: [278..279]
 r117: [276..277]
 r118: [272..273]
 r119: [268..269]
 r120: [266..267]
 r121: [256..265]
 r122: [262..263]
 r123: [260..261]
 r124: [256..257]
 r125: [252..253]
 r126: [250..251]
 r127: [240..249]
 r128: [246..247]
 r129: [244..245]
 r130: [240..241]
 r131: [390..391]
 r132: [388..389]
 r133: [386..387]
 r134: [380..385]
 r135: [382..383]
 r136: [380..381]
 r137: [378..379]
 r138: [374..375]
 r139: [372..373]
 r140: [370..371]
 r141: [362..369]
 r142: [366..367]
 r143: [364..365]
 r144: [362..363]
 r145: [360..361]
 r146: [234..235]
 r147: [232..233]
 r148: [228..229]
 r149: [226..227]
 r150: [222..223]
 r151: [220..221]
 r152: [216..217]
 r153: [214..215]
 r154: [210..211]
 r155: [208..209]
 r156: [204..205]
 r157: [202..203]
 r158: [198..199]
 r159: [196..197]
 r160: [192..193]
 r161: [190..191]
 r162: [186..187]
 r163: [184..185]
 r164: [180..181]
 r165: [176..177]
 r166: [174..175]
 r167: [162..173]
 r168: [170..171]
 r169: [166..167]
 r170: [164..165]
 r171: [162..163]
 r172: [156..157]
 r173: [152..153]
 r174: [150..151]
 r175: [138..149]
 r176: [146..147]
 r177: [142..143]
 r178: [140..141]
 r179: [136..139]
 r180: [120..135]
 r181: [132..133]
 r182: [126..127]
 r183: [124..125]
 r184: [122..123]
 r185: [120..121]
 r186: [114..115]
 r187: [108..109]
 r188: [106..107]
 r189: [104..105]
 r190: [100..103]
 r191: [100..101]
 r192: [98..99]
 r193: [46..47]
 r194: [44..45]
 r195: [42..43]
 r196: [94..95]
 r197: [90..91]
 r198: [88..89]
 r199: [34..35]
 r200: [32..33]
 r201: [30..31]
 r202: [28..29]
 r203: [84..85]
 r204: [80..81]
 r205: [78..79]
 r206: [76..77]
 r207: [74..75]
 r208: [72..73]
 r209: [66..67]
 r210: [62..63]
 r211: [60..61]
 r212: [58..59]
 r213: [56..57]
 r214: [54..55]
 r215: [20..21]
 r216: [16..17]
 r217: [14..15]
 r218: [12..13]
 r219: [442..443]
 r220: [436..441]
 r221: [438..439]
 r222: [436..437]
 r223: [426..435]
 r224: [432..433]
 r225: [430..431]
 r226: [428..429]
 r227: [426..427]
 r228: [422..423]
 r229: [416..417]
 r230: [414..415]
 r231: [400..413]
 r232: [410..411]
 r233: [404..405]
 r234: [402..403]
 r235: [398..401]
 r236: [486..491]
 r237: [488..489]
 r238: [486..487]
 r239: [476..485]
 r240: [482..483]
 r241: [480..481]
 r242: [478..479]
 r243: [476..477]
 r244: [472..473]
 r245: [466..467]
 r246: [464..465]
 r247: [450..463]
 r248: [460..461]
 r249: [454..455]
 r250: [452..453]
 r251: [448..451]
 r252: [1004..1005]
 r253: [1002..1003]
 r254: [1000..1001]
 r255: [998..999]
 r256: [996..997]
 r257: [992..993]
 r258: [990..991]
 r259: [988..989]
 r260: [952..987]
 r261: [984..985]
 r262: [980..981]
 r263: [978..979]
 r264: [976..977]
 r265: [974..975]
 r266: [952..973]
 r267: [970..971]
 r268: [966..967]
 r269: [964..965]
 r270: [960..963]
 r271: [954..955]
 r272: [952..953]
 r273: [950..951]
 r274: [934..947]
 r275: [944..945]
 r276: [940..941]
 r277: [938..939]
 r278: [936..937]
 r279: [934..935]
 r280: [908..909]
 r281: [918..931]
 r282: [928..929]
 r283: [924..925]
 r284: [922..923]
 r285: [920..921]
 r286: [918..919]
 r287: [1030..1031]
 r288: [1028..1029]
 r289: [1026..1027]
 r290: [1020..1025]
 r291: [1022..1023]
 r292: [1020..1021]
 r293: [1008..1019]
 r294: [1016..1017]
 r295: [1014..1015]
 r296: [1012..1013]
 r297: [1010..1011]
 r298: [1008..1009]
 r299: [744..757]
 r300: [754..755]
 r301: [750..751]
 r302: [748..749]
 r303: [746..747]
 r304: [744..745]
 r305: [904..905]
 r306: [900..901]
 r307: [898..899]
 r308: [896..897]
 r309: [894..895]
 r310: [892..893]
 r311: [828..843]
 r312: [840..841]
 r313: [838..839]
 r314: [836..837]
 r315: [830..835]
 r316: [832..833]
 r317: [830..831]
 r318: [828..829]
 r319: [888..889]
 r320: [884..885]
 r321: [882..883]
 r322: [880..881]
 r323: [878..879]
 r324: [876..877]
 r325: [820..827]
 r326: [824..825]
 r327: [822..823]
 r328: [820..821]
 r329: [816..817]
 r330: [814..815]
 r331: [812..813]
 r332: [806..811]
 r333: [808..809]
 r334: [806..807]
 r335: [794..805]
 r336: [802..803]
 r337: [800..801]
 r338: [798..799]
 r339: [796..797]
 r340: [794..795]
 r341: [872..873]
 r342: [868..869]
 r343: [866..867]
 r344: [864..865]
 r345: [862..863]
 r346: [860..861]
 r347: [786..793]
 r348: [790..791]
 r349: [788..789]
 r350: [786..787]
 r351: [782..783]
 r352: [780..781]
 r353: [778..779]
 r354: [772..777]
 r355: [774..775]
 r356: [772..773]
 r357: [760..771]
 r358: [768..769]
 r359: [766..767]
 r360: [764..765]
 r361: [762..763]
 r362: [760..761]
 r363: [844..859]
 r364: [856..857]
 r365: [854..855]
 r366: [852..853]
 r367: [846..851]
 r368: [848..849]
 r369: [846..847]
 r370: [844..845]
 r371: [740..741]
 r372: [736..737]
 r373: [734..735]
 r374: [730..733]
 r375: [724..725]
 r376: [720..721]
 r377: [716..717]
 r378: [714..715]
 r379: [712..713]
 r380: [710..711]
 r381: [708..709]
 r382: [618..619]
 r383: [614..615]
 r384: [612..613]
 r385: [610..611]
 r386: [608..609]
 r387: [606..607]
 r388: [604..605]
 r389: [656..657]
 r390: [654..655]
 r391: [652..653]
 r392: [646..651]
 r393: [648..649]
 r394: [646..647]
 r395: [622..645]
 r396: [642..643]
 r397: [640..641]
 r398: [638..639]
 r399: [632..637]
 r400: [634..635]
 r401: [632..633]
 r402: [630..631]
 r403: [628..629]
 r404: [622..623]
 r405: [704..705]
 r406: [700..701]
 r407: [698..699]
 r408: [696..697]
 r409: [694..695]
 r410: [692..693]
 r411: [550..563]
 r412: [560..561]
 r413: [556..557]
 r414: [554..555]
 r415: [552..553]
 r416: [550..551]
 r417: [600..601]
 r418: [598..599]
 r419: [596..597]
 r420: [590..595]
 r421: [592..593]
 r422: [590..591]
 r423: [588..589]
 r424: [586..587]
 r425: [578..579]
 r426: [576..577]
 r427: [574..575]
 r428: [568..573]
 r429: [570..571]
 r430: [568..569]
 r431: [566..567]
 r432: [688..689]
 r433: [684..685]
 r434: [682..683]
 r435: [680..681]
 r436: [678..679]
 r437: [676..677]
 r438: [660..673]
 r439: [670..671]
 r440: [666..667]
 r441: [664..665]
 r442: [662..663]
 r443: [660..661]
 r444: [1060..1061]
 r445: [1058..1059]
 r446: [1056..1057]
 r447: [1054..1055]
 r448: [1046..1047]
 r449: [1044..1045]
 r450: [1042..1043]
 r451: [1036..1041]
 r452: [1038..1039]
 r453: [1036..1037]
 r454: [1034..1035]
 r455: [544..547]
 r456: [544..545]
 r457: [516..541]
 r458: [538..539]
 r459: [534..535]
 r460: [532..533]
 r461: [530..531]
 r462: [528..529]
 r463: [526..527]
 r464: [516..525]
 r465: [522..523]
 r466: [520..521]
 r467: [518..519]
 r468: [516..517]
 r469: [510..511]
 r470: [494..507]
 r471: [504..505]
 r472: [500..501]
 r473: [498..499]
 r474: [496..497]
 r475: [494..495]
 r476: [1170..1171]
 r477: [1168..1169]
 r478: [1166..1167]
 r479: [1160..1165]
 r480: [1162..1163]
 r481: [1160..1161]
 r482: [1122..1159]
 r483: [1156..1157]
 r484: [1154..1155]
 r485: [1152..1153]
 r486: [1146..1151]
 r487: [1148..1149]
 r488: [1146..1147]
 r489: [1144..1145]
 r490: [1126..1143]
 r491: [1140..1141]
 r492: [1138..1139]
 r493: [1136..1137]
 r494: [1130..1135]
 r495: [1132..1133]
 r496: [1130..1131]
 r497: [1128..1129]
 r498: [1124..1127]
 r499: [1122..1123]
 r500: [1118..1119]
 r501: [1116..1117]
 r502: [1114..1115]
 r503: [1106..1113]
 r504: [1110..1111]
 r505: [1108..1109]
 r506: [1106..1107]
 r507: [1064..1105]
 r508: [1102..1103]
 r509: [1100..1101]
 r510: [1098..1099]
 r511: [1090..1097]
 r512: [1094..1095]
 r513: [1092..1093]
 r514: [1090..1091]
 r515: [1088..1089]
 r516: [1068..1087]
 r517: [1084..1085]
 r518: [1082..1083]
 r519: [1080..1081]
 r520: [1072..1079]
 r521: [1076..1077]
 r522: [1074..1075]
 r523: [1072..1073]
 r524: [1070..1071]
 r525: [1066..1069]
 r526: [1064..1065]
 r527: [2..3]
 r528: [0..1]
 r529: [10..11]
 r530: [1186..1187]
 r531: [1184..1185] [1180..1181]
 r532: [1182..1183]
 r533: [1178..1179]
 r534: [358..359]
 r535: [352..353]
 r536: [344..345]
 r537: [342..343]
 r538: [336..337]
 r539: [334..335]
 r540: [330..331]
 r541: [328..329]
 r542: [322..323]
 r543: [318..319]
 r544: [314..315]
 r545: [312..313]
 r546: [306..307]
 r547: [302..303]
 r548: [298..299]
 r549: [296..297]
 r550: [290..291]
 r551: [286..287]
 r552: [282..283]
 r553: [280..281]
 r554: [274..275]
 r555: [270..271]
 r556: [266..267]
 r557: [264..265]
 r558: [258..259]
 r559: [254..255]
 r560: [250..251]
 r561: [248..249]
 r562: [242..243]
 r563: [392..393]
 r564: [388..389]
 r565: [384..385]
 r566: [378..379]
 r567: [376..377]
 r568: [372..373]
 r569: [368..369]
 r570: [360..361]
 r571: [238..239]
 r572: [236..237]
 r573: [230..231]
 r574: [224..225]
 r575: [218..219]
 r576: [212..213]
 r577: [206..207]
 r578: [200..201]
 r579: [194..195]
 r580: [188..189]
 r581: [182..183]
 r582: [176..177]
 r583: [172..173]
 r584: [166..167]
 r585: [160..161]
 r586: [158..159]
 r587: [152..153]
 r588: [148..149]
 r589: [142..143]
 r590: [134..135]
 r591: [132..133] [128..129]
 r592: [130..131]
 r593: [126..127]
 r594: [118..119]
 r595: [116..117]
 r596: [114..115] [110..111]
 r597: [112..113]
 r598: [108..109]
 r599: [102..103]
 r600: [48..49]
 r601: [40..41]
 r602: [38..39]
 r603: [38..39]
 r604: [38..39]
 r605: [38..39]
 r606: [38..39]
 r607: [38..39]
 r608: [96..97]
 r609: [92..93]
 r610: [36..37]
 r611: [26..27]
 r612: [24..25]
 r613: [24..25]
 r614: [24..25]
 r615: [24..25]
 r616: [24..25]
 r617: [24..25]
 r618: [86..87]
 r619: [80..81]
 r620: [70..71]
 r621: [68..69]
 r622: [62..63]
 r623: [52..53]
 r624: [50..51]
 r625: [50..51]
 r626: [50..51]
 r627: [50..51]
 r628: [50..51]
 r629: [50..51]
 r630: [444..445]
 r631: [444..445]
 r632: [442..443]
 r633: [440..441]
 r634: [434..435]
 r635: [430..431]
 r636: [424..425]
 r637: [422..423] [418..419]
 r638: [420..421]
 r639: [416..417]
 r640: [412..413]
 r641: [410..411] [406..407]
 r642: [408..409]
 r643: [404..405]
 r644: [396..397]
 r645: [492..493]
 r646: [492..493]
 r647: [490..491]
 r648: [484..485]
 r649: [480..481]
 r650: [474..475]
 r651: [472..473] [468..469]
 r652: [470..471]
 r653: [466..467]
 r654: [462..463]
 r655: [460..461] [456..457]
 r656: [458..459]
 r657: [454..455]
 r658: [446..447]
 r659: [1006..1007]
 r660: [1002..1003]
 r661: [994..995]
 r662: [990..991]
 r663: [986..987]
 r664: [980..981]
 r665: [972..973]
 r666: [966..967]
 r667: [960..961]
 r668: [958..959]
 r669: [956..957]
 r670: [952..953]
 r671: [948..949]
 r672: [946..947]
 r673: [940..941]
 r674: [914..915]
 r675: [916..917]
 r676: [910..911]
 r677: [910..911]
 r678: [1032..1033]
 r679: [1028..1029]
 r680: [1024..1025]
 r681: [1018..1019]
 r682: [1014..1015]
 r683: [932..933]
 r684: [930..931]
 r685: [924..925]
 r686: [906..907]
 r687: [900..901]
 r688: [842..843]
 r689: [838..839]
 r690: [834..835]
 r691: [890..891]
 r692: [884..885]
 r693: [826..827]
 r694: [822..823]
 r695: [818..819]
 r696: [814..815]
 r697: [810..811]
 r698: [804..805]
 r699: [800..801]
 r700: [874..875]
 r701: [868..869]
 r702: [792..793]
 r703: [788..789]
 r704: [784..785]
 r705: [780..781]
 r706: [776..777]
 r707: [770..771]
 r708: [766..767]
 r709: [858..859]
 r710: [854..855]
 r711: [850..851]
 r712: [758..759]
 r713: [756..757]
 r714: [750..751]
 r715: [742..743]
 r716: [736..737]
 r717: [730..731]
 r718: [728..729]
 r719: [726..727]
 r720: [722..723]
 r721: [716..717]
 r722: [620..621]
 r723: [614..615]
 r724: [658..659]
 r725: [654..655]
 r726: [650..651]
 r727: [644..645]
 r728: [640..641]
 r729: [636..637]
 r730: [626..627]
 r731: [706..707]
 r732: [700..701]
 r733: [602..603]
 r734: [598..599]
 r735: [594..595]
 r736: [582..583]
 r737: [580..581]
 r738: [576..577]
 r739: [572..573]
 r740: [566..567]
 r741: [564..565]
 r742: [562..563]
 r743: [556..557]
 r744: [690..691]
 r745: [684..685]
 r746: [1062..1063]
 r747: [1058..1059]
 r748: [1050..1051]
 r749: [1048..1049]
 r750: [1044..1045]
 r751: [1040..1041]
 r752: [1034..1035]
 r753: [674..675]
 r754: [672..673]
 r755: [666..667]
 r756: [548..549]
 r757: [546..547]
 r758: [542..543]
 r759: [540..541]
 r760: [534..535]
 r761: [524..525]
 r762: [520..521]
 r763: [516..517]
 r764: [516..517]
 r765: [512..513]
 r766: [1172..1173]
 r767: [1168..1169]
 r768: [1164..1165]
 r769: [1158..1159]
 r770: [1154..1155]
 r771: [1150..1151]
 r772: [1142..1143]
 r773: [1138..1139]
 r774: [1134..1135]
 r775: [1120..1121]
 r776: [1116..1117]
 r777: [1112..1113]
 r778: [1104..1105]
 r779: [1100..1101]
 r780: [1096..1097]
 r781: [1086..1087]
 r782: [1082..1083]
 r783: [1078..1079]
 r784: [508..509]
 r785: [506..507]
 r786: [500..501]
 r787: [394..395]
 r788: [22..23]
 r789: [16..17]
 r790: [8..9]
 r791: [4..5]
 r793: [354..355]
 r794: [178..179]
 r795: [168..169]
 r796: [154..155]
 r797: [144..145]
 r798: [136..137]
 r799: [82..83]
 r800: [64..65]
 r801: [398..399]
 r802: [448..449]
 r803: [982..983]
 r804: [968..969]
 r805: [962..963]
 r806: [942..943]
 r807: [912..913]
 r808: [926..927]
 r809: [902..903]
 r810: [886..887]
 r811: [870..871]
 r812: [752..753]
 r813: [738..739]
 r814: [732..733]
 r815: [718..719]
 r816: [616..617]
 r817: [624..625]
 r818: [702..703]
 r819: [584..585]
 r820: [558..559]
 r821: [686..687]
 r822: [1052..1053]
 r823: [668..669]
 r824: [536..537]
 r825: [514..515]
 r826: [1124..1125]
 r827: [1066..1067]
 r828: [502..503]
 r829: [18..19]

********** Assignment #1: **********

	 Assigning to 793 (cl=GENERAL_REGS, orig=89, freq=3, tfirst=793, tfreq=3)...
	   Assign 0 to reload r793 (freq=3)
	 Assigning to 794 (cl=GENERAL_REGS, orig=165, freq=3, tfirst=794, tfreq=3)...
	   Assign 0 to reload r794 (freq=3)
	 Assigning to 795 (cl=GENERAL_REGS, orig=169, freq=3, tfirst=795, tfreq=3)...
	   Assign 0 to reload r795 (freq=3)
	 Assigning to 796 (cl=GENERAL_REGS, orig=173, freq=3, tfirst=796, tfreq=3)...
	   Assign 0 to reload r796 (freq=3)
	 Assigning to 797 (cl=GENERAL_REGS, orig=177, freq=3, tfirst=797, tfreq=3)...
	   Assign 0 to reload r797 (freq=3)
	 Assigning to 798 (cl=GENERAL_REGS, orig=180, freq=3, tfirst=798, tfreq=3)...
	   Assign 2 to reload r798 (freq=3)
	 Assigning to 799 (cl=GENERAL_REGS, orig=204, freq=3, tfirst=799, tfreq=3)...
	   Assign 0 to reload r799 (freq=3)
	 Assigning to 800 (cl=GENERAL_REGS, orig=210, freq=3, tfirst=800, tfreq=3)...
	   Assign 0 to reload r800 (freq=3)
	 Assigning to 801 (cl=GENERAL_REGS, orig=644, freq=3, tfirst=801, tfreq=3)...
	   Assign 2 to reload r801 (freq=3)
	 Assigning to 802 (cl=GENERAL_REGS, orig=658, freq=3, tfirst=802, tfreq=3)...
	   Assign 2 to reload r802 (freq=3)
	 Assigning to 803 (cl=GENERAL_REGS, orig=262, freq=3, tfirst=803, tfreq=3)...
	   Assign 0 to reload r803 (freq=3)
	 Assigning to 804 (cl=GENERAL_REGS, orig=268, freq=3, tfirst=804, tfreq=3)...
	   Assign 0 to reload r804 (freq=3)
	 Assigning to 805 (cl=GENERAL_REGS, orig=667, freq=3, tfirst=805, tfreq=3)...
	   Assign 2 to reload r805 (freq=3)
	 Assigning to 806 (cl=GENERAL_REGS, orig=276, freq=3, tfirst=806, tfreq=3)...
	   Assign 2 to reload r806 (freq=3)
	 Assigning to 807 (cl=GENERAL_REGS, orig=676, freq=3, tfirst=807, tfreq=3)...
	   Assign 0 to reload r807 (freq=3)
	 Assigning to 808 (cl=GENERAL_REGS, orig=283, freq=3, tfirst=808, tfreq=3)...
	   Assign 2 to reload r808 (freq=3)
	 Assigning to 809 (cl=GENERAL_REGS, orig=306, freq=3, tfirst=809, tfreq=3)...
	   Assign 0 to reload r809 (freq=3)
	 Assigning to 810 (cl=GENERAL_REGS, orig=320, freq=3, tfirst=810, tfreq=3)...
	   Assign 0 to reload r810 (freq=3)
	 Assigning to 811 (cl=GENERAL_REGS, orig=342, freq=3, tfirst=811, tfreq=3)...
	   Assign 0 to reload r811 (freq=3)
	 Assigning to 812 (cl=GENERAL_REGS, orig=301, freq=3, tfirst=812, tfreq=3)...
	   Assign 2 to reload r812 (freq=3)
	 Assigning to 813 (cl=GENERAL_REGS, orig=372, freq=3, tfirst=813, tfreq=3)...
	   Assign 0 to reload r813 (freq=3)
	 Assigning to 814 (cl=GENERAL_REGS, orig=717, freq=3, tfirst=814, tfreq=3)...
	   Assign 1 to reload r814 (freq=3)
	 Assigning to 815 (cl=GENERAL_REGS, orig=377, freq=3, tfirst=815, tfreq=3)...
	   Assign 0 to reload r815 (freq=3)
	 Assigning to 816 (cl=GENERAL_REGS, orig=383, freq=3, tfirst=816, tfreq=3)...
	   Assign 0 to reload r816 (freq=3)
	 Assigning to 818 (cl=GENERAL_REGS, orig=406, freq=3, tfirst=818, tfreq=3)...
	   Assign 0 to reload r818 (freq=3)
	 Assigning to 820 (cl=GENERAL_REGS, orig=413, freq=3, tfirst=820, tfreq=3)...
	   Assign 2 to reload r820 (freq=3)
	 Assigning to 821 (cl=GENERAL_REGS, orig=433, freq=3, tfirst=821, tfreq=3)...
	   Assign 0 to reload r821 (freq=3)
	 Assigning to 823 (cl=GENERAL_REGS, orig=440, freq=3, tfirst=823, tfreq=3)...
	   Assign 2 to reload r823 (freq=3)
	 Assigning to 824 (cl=GENERAL_REGS, orig=459, freq=3, tfirst=824, tfreq=3)...
	   Assign 0 to reload r824 (freq=3)
	 Assigning to 828 (cl=GENERAL_REGS, orig=472, freq=3, tfirst=828, tfreq=3)...
	   Assign 2 to reload r828 (freq=3)
	 Assigning to 829 (cl=GENERAL_REGS, orig=216, freq=3, tfirst=829, tfreq=3)...
	   Assign 0 to reload r829 (freq=3)
	 Assigning to 826 (cl=SSE_REGS, orig=499, freq=3, tfirst=826, tfreq=3)...
	   Assign 22 to reload r826 (freq=3)
	 Assigning to 827 (cl=SSE_REGS, orig=526, freq=3, tfirst=827, tfreq=3)...
	   Assign 22 to reload r827 (freq=3)
	 Assigning to 817 (cl=SSE_REGS, orig=404, freq=2, tfirst=817, tfreq=2)...
	   Assign 23 to reload r817 (freq=2)
	 Assigning to 819 (cl=SSE_REGS, orig=736, freq=2, tfirst=819, tfreq=2)...
	   Assign 24 to reload r819 (freq=2)
	 Assigning to 822 (cl=SSE_REGS, orig=748, freq=2, tfirst=822, tfreq=2)...
	   Assign 25 to reload r822 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 4):	 825
Changing spilled pseudos to memory in insn #1072
Changing spilled pseudos to memory in insn #1330
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 7 for insn #1330
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1330:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1072:  (0) ?m  (1) rF {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 1200
changing reg in insn 1202
changing reg in insn 27
changing reg in insn 32
changing reg in insn 30
changing reg in insn 28
changing reg in insn 32
changing reg in insn 30
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 62
changing reg in insn 70
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 75
changing reg in insn 75
changing reg in insn 83
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 88
changing reg in insn 96
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 101
changing reg in insn 109
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 114
changing reg in insn 114
changing reg in insn 122
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 127
changing reg in insn 127
changing reg in insn 127
changing reg in insn 135
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 134
changing reg in insn 135
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 174
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 183
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 198
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 207
changing reg in insn 209
changing reg in insn 211
changing reg in insn 212
changing reg in insn 222
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 236
changing reg in insn 238
changing reg in insn 240
changing reg in insn 241
changing reg in insn 250
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 266
changing reg in insn 268
changing reg in insn 270
changing reg in insn 271
changing reg in insn 281
changing reg in insn 283
changing reg in insn 285
changing reg in insn 286
changing reg in insn 295
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 299
changing reg in insn 301
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 309
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 315
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 322
changing reg in insn 325
changing reg in insn 323
changing reg in insn 325
changing reg in insn 328
changing reg in insn 330
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 332
changing reg in insn 332
changing reg in insn 336
changing reg in insn 339
changing reg in insn 337
changing reg in insn 339
changing reg in insn 342
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 348
changing reg in insn 349
changing reg in insn 350
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 358
changing reg in insn 389
changing reg in insn 390
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 403
changing reg in insn 403
changing reg in insn 404
changing reg in insn 404
changing reg in insn 405
changing reg in insn 433
changing reg in insn 436
changing reg in insn 436
changing reg in insn 437
changing reg in insn 437
changing reg in insn 438
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 445
changing reg in insn 448
changing reg in insn 448
changing reg in insn 449
changing reg in insn 449
changing reg in insn 450
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 452
changing reg in insn 1185
changing reg in insn 1188
changing reg in insn 1188
changing reg in insn 1189
changing reg in insn 1189
changing reg in insn 1191
changing reg in insn 488
changing reg in insn 490
changing reg in insn 490
changing reg in insn 490
changing reg in insn 494
changing reg in insn 492
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 502
changing reg in insn 496
changing reg in insn 497
changing reg in insn 497
changing reg in insn 499
changing reg in insn 499
changing reg in insn 500
changing reg in insn 500
changing reg in insn 503
changing reg in insn 506
changing reg in insn 509
changing reg in insn 507
changing reg in insn 509
changing reg in insn 512
changing reg in insn 514
changing reg in insn 514
changing reg in insn 515
changing reg in insn 515
changing reg in insn 517
changing reg in insn 520
changing reg in insn 518
changing reg in insn 520
changing reg in insn 523
changing reg in insn 525
changing reg in insn 525
changing reg in insn 526
changing reg in insn 526
changing reg in insn 527
changing reg in insn 535
changing reg in insn 539
changing reg in insn 537
changing reg in insn 538
changing reg in insn 538
changing reg in insn 539
changing reg in insn 539
changing reg in insn 547
changing reg in insn 541
changing reg in insn 542
changing reg in insn 542
changing reg in insn 544
changing reg in insn 544
changing reg in insn 545
changing reg in insn 545
changing reg in insn 548
changing reg in insn 551
changing reg in insn 554
changing reg in insn 552
changing reg in insn 554
changing reg in insn 557
changing reg in insn 559
changing reg in insn 559
changing reg in insn 560
changing reg in insn 560
changing reg in insn 562
changing reg in insn 565
changing reg in insn 563
changing reg in insn 565
changing reg in insn 568
changing reg in insn 570
changing reg in insn 570
changing reg in insn 571
changing reg in insn 571
changing reg in insn 572
changing reg in insn 581
changing reg in insn 582
changing reg in insn 582
changing reg in insn 584
changing reg in insn 584
changing reg in insn 585
changing reg in insn 585
changing reg in insn 586
changing reg in insn 588
changing reg in insn 589
changing reg in insn 597
changing reg in insn 598
changing reg in insn 598
changing reg in insn 600
changing reg in insn 600
changing reg in insn 601
changing reg in insn 601
changing reg in insn 622
changing reg in insn 603
changing reg in insn 606
changing reg in insn 606
changing reg in insn 607
changing reg in insn 607
changing reg in insn 608
changing reg in insn 608
changing reg in insn 609
changing reg in insn 609
changing reg in insn 623
changing reg in insn 611
changing reg in insn 614
changing reg in insn 614
changing reg in insn 615
changing reg in insn 615
changing reg in insn 619
changing reg in insn 620
changing reg in insn 620
changing reg in insn 624
changing reg in insn 627
changing reg in insn 632
changing reg in insn 640
changing reg in insn 634
changing reg in insn 637
changing reg in insn 637
changing reg in insn 638
changing reg in insn 638
changing reg in insn 639
changing reg in insn 639
changing reg in insn 640
changing reg in insn 647
changing reg in insn 648
changing reg in insn 686
changing reg in insn 695
changing reg in insn 688
changing reg in insn 691
changing reg in insn 691
changing reg in insn 692
changing reg in insn 692
changing reg in insn 693
changing reg in insn 693
changing reg in insn 695
changing reg in insn 663
changing reg in insn 664
changing reg in insn 664
changing reg in insn 666
changing reg in insn 666
changing reg in insn 667
changing reg in insn 667
changing reg in insn 669
changing reg in insn 670
changing reg in insn 670
changing reg in insn 671
changing reg in insn 679
changing reg in insn 673
changing reg in insn 674
changing reg in insn 674
changing reg in insn 676
changing reg in insn 676
changing reg in insn 677
changing reg in insn 677
changing reg in insn 678
changing reg in insn 678
changing reg in insn 679
changing reg in insn 839
changing reg in insn 848
changing reg in insn 841
changing reg in insn 844
changing reg in insn 844
changing reg in insn 845
changing reg in insn 845
changing reg in insn 846
changing reg in insn 846
changing reg in insn 848
changing reg in insn 707
changing reg in insn 710
changing reg in insn 710
changing reg in insn 711
changing reg in insn 711
changing reg in insn 712
changing reg in insn 712
changing reg in insn 713
changing reg in insn 713
changing reg in insn 714
changing reg in insn 717
changing reg in insn 728
changing reg in insn 719
changing reg in insn 720
changing reg in insn 720
changing reg in insn 722
changing reg in insn 722
changing reg in insn 723
changing reg in insn 723
changing reg in insn 727
changing reg in insn 725
changing reg in insn 726
changing reg in insn 726
changing reg in insn 727
changing reg in insn 727
changing reg in insn 729
changing reg in insn 736
changing reg in insn 739
changing reg in insn 739
changing reg in insn 740
changing reg in insn 740
changing reg in insn 741
changing reg in insn 741
changing reg in insn 742
changing reg in insn 742
changing reg in insn 743
changing reg in insn 746
changing reg in insn 752
changing reg in insn 748
changing reg in insn 749
changing reg in insn 749
changing reg in insn 751
changing reg in insn 751
changing reg in insn 753
changing reg in insn 756
changing reg in insn 757
changing reg in insn 757
changing reg in insn 759
changing reg in insn 759
changing reg in insn 760
changing reg in insn 760
changing reg in insn 762
changing reg in insn 763
changing reg in insn 763
changing reg in insn 764
changing reg in insn 772
changing reg in insn 766
changing reg in insn 767
changing reg in insn 767
changing reg in insn 769
changing reg in insn 769
changing reg in insn 770
changing reg in insn 770
changing reg in insn 771
changing reg in insn 771
changing reg in insn 772
changing reg in insn 778
changing reg in insn 781
changing reg in insn 781
changing reg in insn 782
changing reg in insn 782
changing reg in insn 783
changing reg in insn 783
changing reg in insn 784
changing reg in insn 784
changing reg in insn 785
changing reg in insn 788
changing reg in insn 794
changing reg in insn 790
changing reg in insn 791
changing reg in insn 791
changing reg in insn 793
changing reg in insn 793
changing reg in insn 795
changing reg in insn 798
changing reg in insn 799
changing reg in insn 799
changing reg in insn 801
changing reg in insn 801
changing reg in insn 802
changing reg in insn 802
changing reg in insn 804
changing reg in insn 805
changing reg in insn 805
changing reg in insn 806
changing reg in insn 814
changing reg in insn 808
changing reg in insn 809
changing reg in insn 809
changing reg in insn 811
changing reg in insn 811
changing reg in insn 812
changing reg in insn 812
changing reg in insn 813
changing reg in insn 813
changing reg in insn 814
changing reg in insn 819
changing reg in insn 830
changing reg in insn 821
changing reg in insn 822
changing reg in insn 822
changing reg in insn 824
changing reg in insn 824
changing reg in insn 825
changing reg in insn 825
changing reg in insn 829
changing reg in insn 827
changing reg in insn 828
changing reg in insn 828
changing reg in insn 829
changing reg in insn 829
changing reg in insn 831
changing reg in insn 853
changing reg in insn 856
changing reg in insn 856
changing reg in insn 857
changing reg in insn 857
changing reg in insn 861
changing reg in insn 862
changing reg in insn 867
changing reg in insn 870
changing reg in insn 870
changing reg in insn 871
changing reg in insn 871
changing reg in insn 872
changing reg in insn 872
changing reg in insn 873
changing reg in insn 873
changing reg in insn 874
changing reg in insn 878
changing reg in insn 881
changing reg in insn 881
changing reg in insn 882
changing reg in insn 882
changing reg in insn 883
changing reg in insn 884
changing reg in insn 884
changing reg in insn 885
changing reg in insn 885
changing reg in insn 886
changing reg in insn 891
changing reg in insn 892
changing reg in insn 892
changing reg in insn 894
changing reg in insn 894
changing reg in insn 895
changing reg in insn 895
changing reg in insn 897
changing reg in insn 898
changing reg in insn 898
changing reg in insn 899
changing reg in insn 913
changing reg in insn 901
changing reg in insn 902
changing reg in insn 902
changing reg in insn 904
changing reg in insn 904
changing reg in insn 905
changing reg in insn 905
changing reg in insn 909
changing reg in insn 907
changing reg in insn 908
changing reg in insn 908
changing reg in insn 909
changing reg in insn 909
changing reg in insn 910
changing reg in insn 910
changing reg in insn 911
changing reg in insn 913
changing reg in insn 926
changing reg in insn 929
changing reg in insn 929
changing reg in insn 930
changing reg in insn 930
changing reg in insn 931
changing reg in insn 931
changing reg in insn 932
changing reg in insn 932
changing reg in insn 933
changing reg in insn 969
changing reg in insn 978
changing reg in insn 971
changing reg in insn 974
changing reg in insn 974
changing reg in insn 975
changing reg in insn 975
changing reg in insn 976
changing reg in insn 976
changing reg in insn 978
changing reg in insn 941
changing reg in insn 942
changing reg in insn 942
changing reg in insn 944
changing reg in insn 944
changing reg in insn 945
changing reg in insn 945
changing reg in insn 949
changing reg in insn 947
changing reg in insn 948
changing reg in insn 948
changing reg in insn 949
changing reg in insn 949
changing reg in insn 950
changing reg in insn 950
changing reg in insn 951
changing reg in insn 954
changing reg in insn 955
changing reg in insn 955
changing reg in insn 957
changing reg in insn 957
changing reg in insn 958
changing reg in insn 958
changing reg in insn 960
changing reg in insn 961
changing reg in insn 961
changing reg in insn 962
changing reg in insn 964
changing reg in insn 986
changing reg in insn 989
changing reg in insn 989
changing reg in insn 990
changing reg in insn 990
changing reg in insn 991
changing reg in insn 991
changing reg in insn 992
changing reg in insn 992
changing reg in insn 993
changing reg in insn 1024
changing reg in insn 1033
changing reg in insn 1026
changing reg in insn 1029
changing reg in insn 1029
changing reg in insn 1030
changing reg in insn 1030
changing reg in insn 1031
changing reg in insn 1031
changing reg in insn 1033
changing reg in insn 1001
changing reg in insn 1002
changing reg in insn 1002
changing reg in insn 1004
changing reg in insn 1004
changing reg in insn 1005
changing reg in insn 1005
changing reg in insn 1006
changing reg in insn 1009
changing reg in insn 1010
changing reg in insn 1010
changing reg in insn 1012
changing reg in insn 1012
changing reg in insn 1013
changing reg in insn 1013
changing reg in insn 1015
changing reg in insn 1016
changing reg in insn 1016
changing reg in insn 1017
changing reg in insn 1019
changing reg in insn 1041
changing reg in insn 1044
changing reg in insn 1043
changing reg in insn 1045
changing reg in insn 1050
changing reg in insn 1068
changing reg in insn 1052
changing reg in insn 1055
changing reg in insn 1055
changing reg in insn 1056
changing reg in insn 1056
changing reg in insn 1057
changing reg in insn 1058
changing reg in insn 1058
changing reg in insn 1059
changing reg in insn 1059
changing reg in insn 1071
changing reg in insn 1061
changing reg in insn 1062
changing reg in insn 1062
changing reg in insn 1064
changing reg in insn 1064
changing reg in insn 1065
changing reg in insn 1065
changing reg in insn 1072
changing reg in insn 1077
changing reg in insn 1078
changing reg in insn 1161
changing reg in insn 1170
changing reg in insn 1163
changing reg in insn 1166
changing reg in insn 1166
changing reg in insn 1167
changing reg in insn 1167
changing reg in insn 1168
changing reg in insn 1168
changing reg in insn 1170
changing reg in insn 1087
changing reg in insn 1088
changing reg in insn 1088
changing reg in insn 1090
changing reg in insn 1090
changing reg in insn 1091
changing reg in insn 1091
changing reg in insn 1093
changing reg in insn 1094
changing reg in insn 1094
changing reg in insn 1095
changing reg in insn 1119
changing reg in insn 1097
changing reg in insn 1098
changing reg in insn 1098
changing reg in insn 1100
changing reg in insn 1100
changing reg in insn 1101
changing reg in insn 1101
changing reg in insn 1105
changing reg in insn 1103
changing reg in insn 1104
changing reg in insn 1104
changing reg in insn 1105
changing reg in insn 1105
changing reg in insn 1106
changing reg in insn 1106
changing reg in insn 1108
changing reg in insn 1109
changing reg in insn 1109
changing reg in insn 1111
changing reg in insn 1111
changing reg in insn 1112
changing reg in insn 1112
changing reg in insn 1116
changing reg in insn 1114
changing reg in insn 1115
changing reg in insn 1115
changing reg in insn 1116
changing reg in insn 1116
changing reg in insn 1117
changing reg in insn 1117
changing reg in insn 1118
changing reg in insn 1119
changing reg in insn 1121
changing reg in insn 1122
changing reg in insn 1122
changing reg in insn 1124
changing reg in insn 1124
changing reg in insn 1125
changing reg in insn 1125
changing reg in insn 1127
changing reg in insn 1128
changing reg in insn 1128
changing reg in insn 1129
changing reg in insn 1129
changing reg in insn 1130
changing reg in insn 1156
changing reg in insn 1132
changing reg in insn 1133
changing reg in insn 1133
changing reg in insn 1135
changing reg in insn 1135
changing reg in insn 1136
changing reg in insn 1136
changing reg in insn 1141
changing reg in insn 1138
changing reg in insn 1139
changing reg in insn 1139
changing reg in insn 1140
changing reg in insn 1140
changing reg in insn 1141
changing reg in insn 1141
changing reg in insn 1142
changing reg in insn 1142
changing reg in insn 1144
changing reg in insn 1145
changing reg in insn 1145
changing reg in insn 1147
changing reg in insn 1147
changing reg in insn 1148
changing reg in insn 1148
changing reg in insn 1153
changing reg in insn 1150
changing reg in insn 1151
changing reg in insn 1151
changing reg in insn 1152
changing reg in insn 1152
changing reg in insn 1153
changing reg in insn 1153
changing reg in insn 1154
changing reg in insn 1154
changing reg in insn 1155
changing reg in insn 1156
changing reg in insn 1208
changing reg in insn 1211
changing reg in insn 1211
changing reg in insn 1215
changing reg in insn 8
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 32
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 28
changing reg in insn 35
changing reg in insn 33
changing reg in insn 32
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 133
changing reg in insn 134
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 146
changing reg in insn 147
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 158
changing reg in insn 159
changing reg in insn 163
changing reg in insn 164
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 182
changing reg in insn 183
changing reg in insn 197
changing reg in insn 198
changing reg in insn 206
changing reg in insn 207
changing reg in insn 221
changing reg in insn 222
changing reg in insn 235
changing reg in insn 236
changing reg in insn 249
changing reg in insn 250
changing reg in insn 265
changing reg in insn 266
changing reg in insn 280
changing reg in insn 281
changing reg in insn 294
changing reg in insn 295
changing reg in insn 297
changing reg in insn 300
changing reg in insn 301
changing reg in insn 303
changing reg in insn 306
changing reg in insn 307
changing reg in insn 308
changing reg in insn 309
changing reg in insn 311
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 321
changing reg in insn 322
changing reg in insn 327
changing reg in insn 325
changing reg in insn 324
changing reg in insn 323
changing reg in insn 328
changing reg in insn 326
changing reg in insn 325
changing reg in insn 324
changing reg in insn 326
changing reg in insn 327
changing reg in insn 329
changing reg in insn 333
changing reg in insn 334
changing reg in insn 335
changing reg in insn 336
changing reg in insn 341
changing reg in insn 339
changing reg in insn 338
changing reg in insn 337
changing reg in insn 342
changing reg in insn 340
changing reg in insn 339
changing reg in insn 338
changing reg in insn 340
changing reg in insn 341
changing reg in insn 343
changing reg in insn 347
changing reg in insn 354
changing reg in insn 355
changing reg in insn 360
changing reg in insn 361
changing reg in insn 362
changing reg in insn 370
changing reg in insn 363
changing reg in insn 371
changing reg in insn 364
changing reg in insn 372
changing reg in insn 365
changing reg in insn 373
changing reg in insn 366
changing reg in insn 375
changing reg in insn 368
changing reg in insn 369
changing reg in insn 388
changing reg in insn 389
changing reg in insn 393
changing reg in insn 394
changing reg in insn 400
changing reg in insn 401
changing reg in insn 407
changing reg in insn 408
changing reg in insn 409
changing reg in insn 417
changing reg in insn 410
changing reg in insn 418
changing reg in insn 411
changing reg in insn 419
changing reg in insn 412
changing reg in insn 420
changing reg in insn 413
changing reg in insn 422
changing reg in insn 415
changing reg in insn 416
changing reg in insn 432
changing reg in insn 433
changing reg in insn 435
changing reg in insn 442
changing reg in insn 443
changing reg in insn 444
changing reg in insn 445
changing reg in insn 447
changing reg in insn 454
changing reg in insn 455
changing reg in insn 456
changing reg in insn 464
changing reg in insn 457
changing reg in insn 465
changing reg in insn 458
changing reg in insn 466
changing reg in insn 459
changing reg in insn 467
changing reg in insn 460
changing reg in insn 469
changing reg in insn 462
changing reg in insn 463
changing reg in insn 486
changing reg in insn 488
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 490
changing reg in insn 491
changing reg in insn 492
changing reg in insn 495
changing reg in insn 496
changing reg in insn 498
changing reg in insn 505
changing reg in insn 506
changing reg in insn 511
changing reg in insn 509
changing reg in insn 508
changing reg in insn 507
changing reg in insn 512
changing reg in insn 510
changing reg in insn 509
changing reg in insn 508
changing reg in insn 510
changing reg in insn 511
changing reg in insn 513
changing reg in insn 516
changing reg in insn 517
changing reg in insn 522
changing reg in insn 520
changing reg in insn 519
changing reg in insn 518
changing reg in insn 523
changing reg in insn 521
changing reg in insn 520
changing reg in insn 519
changing reg in insn 521
changing reg in insn 522
changing reg in insn 524
changing reg in insn 528
changing reg in insn 533
changing reg in insn 535
changing reg in insn 534
changing reg in insn 535
changing reg in insn 536
changing reg in insn 537
changing reg in insn 540
changing reg in insn 541
changing reg in insn 543
changing reg in insn 550
changing reg in insn 551
changing reg in insn 556
changing reg in insn 554
changing reg in insn 553
changing reg in insn 552
changing reg in insn 557
changing reg in insn 555
changing reg in insn 554
changing reg in insn 553
changing reg in insn 555
changing reg in insn 556
changing reg in insn 558
changing reg in insn 561
changing reg in insn 562
changing reg in insn 567
changing reg in insn 565
changing reg in insn 564
changing reg in insn 563
changing reg in insn 568
changing reg in insn 566
changing reg in insn 565
changing reg in insn 564
changing reg in insn 566
changing reg in insn 567
changing reg in insn 569
changing reg in insn 573
changing reg in insn 580
changing reg in insn 581
changing reg in insn 583
changing reg in insn 596
changing reg in insn 597
changing reg in insn 599
changing reg in insn 602
changing reg in insn 603
changing reg in insn 605
changing reg in insn 610
changing reg in insn 611
changing reg in insn 613
changing reg in insn 617
changing reg in insn 618
changing reg in insn 618
changing reg in insn 619
changing reg in insn 621
changing reg in insn 625
changing reg in insn 631
changing reg in insn 632
changing reg in insn 633
changing reg in insn 634
changing reg in insn 636
changing reg in insn 644
changing reg in insn 643
changing reg in insn 644
changing reg in insn 647
changing reg in insn 646
changing reg in insn 662
changing reg in insn 663
changing reg in insn 665
changing reg in insn 668
changing reg in insn 669
changing reg in insn 672
changing reg in insn 673
changing reg in insn 675
changing reg in insn 685
changing reg in insn 686
changing reg in insn 687
changing reg in insn 688
changing reg in insn 690
changing reg in insn 706
changing reg in insn 707
changing reg in insn 709
changing reg in insn 718
changing reg in insn 719
changing reg in insn 721
changing reg in insn 724
changing reg in insn 725
changing reg in insn 735
changing reg in insn 736
changing reg in insn 738
changing reg in insn 747
changing reg in insn 748
changing reg in insn 750
changing reg in insn 755
changing reg in insn 756
changing reg in insn 758
changing reg in insn 761
changing reg in insn 762
changing reg in insn 765
changing reg in insn 766
changing reg in insn 768
changing reg in insn 777
changing reg in insn 778
changing reg in insn 780
changing reg in insn 789
changing reg in insn 790
changing reg in insn 792
changing reg in insn 797
changing reg in insn 798
changing reg in insn 800
changing reg in insn 803
changing reg in insn 804
changing reg in insn 807
changing reg in insn 808
changing reg in insn 810
changing reg in insn 820
changing reg in insn 821
changing reg in insn 823
changing reg in insn 826
changing reg in insn 827
changing reg in insn 838
changing reg in insn 839
changing reg in insn 840
changing reg in insn 841
changing reg in insn 843
changing reg in insn 852
changing reg in insn 853
changing reg in insn 855
changing reg in insn 859
changing reg in insn 860
changing reg in insn 860
changing reg in insn 861
changing reg in insn 866
changing reg in insn 867
changing reg in insn 869
changing reg in insn 877
changing reg in insn 878
changing reg in insn 880
changing reg in insn 890
changing reg in insn 891
changing reg in insn 893
changing reg in insn 896
changing reg in insn 897
changing reg in insn 900
changing reg in insn 901
changing reg in insn 903
changing reg in insn 906
changing reg in insn 907
changing reg in insn 911
changing reg in insn 912
changing reg in insn 925
changing reg in insn 926
changing reg in insn 928
changing reg in insn 940
changing reg in insn 941
changing reg in insn 943
changing reg in insn 946
changing reg in insn 947
changing reg in insn 952
changing reg in insn 953
changing reg in insn 954
changing reg in insn 956
changing reg in insn 959
changing reg in insn 960
changing reg in insn 963
changing reg in insn 964
changing reg in insn 968
changing reg in insn 969
changing reg in insn 970
changing reg in insn 971
changing reg in insn 973
changing reg in insn 985
changing reg in insn 986
changing reg in insn 988
changing reg in insn 1000
changing reg in insn 1001
changing reg in insn 1003
changing reg in insn 1007
changing reg in insn 1008
changing reg in insn 1009
changing reg in insn 1011
changing reg in insn 1014
changing reg in insn 1015
changing reg in insn 1018
changing reg in insn 1019
changing reg in insn 1023
changing reg in insn 1024
changing reg in insn 1025
changing reg in insn 1026
changing reg in insn 1028
changing reg in insn 1040
changing reg in insn 1041
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1049
changing reg in insn 1050
changing reg in insn 1051
changing reg in insn 1052
changing reg in insn 1054
changing reg in insn 1060
changing reg in insn 1061
changing reg in insn 1063
changing reg in insn 1066
changing reg in insn 1069
changing reg in insn 1067
changing reg in insn 1070
changing reg in insn 1076
changing reg in insn 1077
changing reg in insn 1086
changing reg in insn 1087
changing reg in insn 1089
changing reg in insn 1092
changing reg in insn 1093
changing reg in insn 1096
changing reg in insn 1097
changing reg in insn 1099
changing reg in insn 1102
changing reg in insn 1103
changing reg in insn 1107
changing reg in insn 1108
changing reg in insn 1110
changing reg in insn 1113
changing reg in insn 1114
changing reg in insn 1120
changing reg in insn 1121
changing reg in insn 1123
changing reg in insn 1126
changing reg in insn 1127
changing reg in insn 1131
changing reg in insn 1132
changing reg in insn 1134
changing reg in insn 1137
changing reg in insn 1138
changing reg in insn 1143
changing reg in insn 1144
changing reg in insn 1146
changing reg in insn 1149
changing reg in insn 1150
changing reg in insn 1160
changing reg in insn 1161
changing reg in insn 1162
changing reg in insn 1163
changing reg in insn 1165
changing reg in insn 1177
changing reg in insn 1178
changing reg in insn 1184
changing reg in insn 1185
changing reg in insn 1187
changing reg in insn 1199
changing reg in insn 1200
changing reg in insn 1205
changing reg in insn 1206
deleting insn with uid = 1280.
deleting insn with uid = 372.
deleting insn with uid = 373.
deleting insn with uid = 419.
deleting insn with uid = 420.
deleting insn with uid = 466.
deleting insn with uid = 467.
deleting insn with uid = 1285.
deleting insn with uid = 1287.
deleting insn with uid = 1294.
deleting insn with uid = 624.
deleting insn with uid = 1296.
deleting insn with uid = 1300.
deleting insn with uid = 1308.
deleting insn with uid = 1312.
deleting insn with uid = 1322.
deleting insn with uid = 1327.
deleting insn with uid = 1044.
deleting insn with uid = 1068.
deleting insn with uid = 1069.
deleting insn with uid = 1070.
deleting insn with uid = 1071.
deleting insn with uid = 1331.
deleting insn with uid = 1333.
deleting insn with uid = 1336.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 132.
verify found no changes in insn with uid = 177.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 201.
verify found no changes in insn with uid = 210.
verify found no changes in insn with uid = 225.
verify found no changes in insn with uid = 239.
verify found no changes in insn with uid = 253.
verify found no changes in insn with uid = 259.
verify found no changes in insn with uid = 269.
verify found no changes in insn with uid = 275.
verify found no changes in insn with uid = 284.
verify found no changes in insn with uid = 291.
verify found no changes in insn with uid = 359.
verify found no changes in insn with uid = 376.
verify found no changes in insn with uid = 380.
verify found no changes in insn with uid = 406.
verify found no changes in insn with uid = 423.
verify found no changes in insn with uid = 427.
verify found no changes in insn with uid = 441.
verify found no changes in insn with uid = 453.
verify found no changes in insn with uid = 470.
verify found no changes in insn with uid = 474.
verify found no changes in insn with uid = 485.
verify found no changes in insn with uid = 504.
verify found no changes in insn with uid = 549.
verify found no changes in insn with uid = 587.
verify found no changes in insn with uid = 592.
verify found no changes in insn with uid = 626.
verify found no changes in insn with uid = 650.
verify found no changes in insn with uid = 730.
verify found no changes in insn with uid = 754.
verify found no changes in insn with uid = 796.
verify found no changes in insn with uid = 832.
verify found no changes in insn with uid = 865.
verify found no changes in insn with uid = 1048.
verify found no changes in insn with uid = 1073.
verify found no changes in insn with uid = 1081.
verify found no changes in insn with uid = 1207.


int read_data(int*, Preprocess*, IOFiles*, Data_file_header*, Data_block_header*, Precision2*, FILE**, Procpar_info*, Precision1*, float**, float**, int, InFile_struct*, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 37[r8] 38[r9]
;;  ref usage 	r0={592d,571u} r1={209d,172u,59e} r2={106d,61u,18e} r3={6d,6u} r4={74d,29u} r5={95d,50u} r6={1d,395u} r7={10d,141u} r8={45d} r9={45d} r10={45d} r11={45d} r12={45d} r13={45d} r14={45d} r15={45d} r16={40e} r17={348d,36u} r18={45d} r19={45d} r20={1d,1u,48e} r21={49d,3u} r22={50d,4u} r23={47d,1u} r24={47d,1u} r25={47d,1u} r26={46d} r27={46d} r28={46d} r29={45d} r30={45d} r31={45d} r32={45d} r33={45d} r34={45d} r35={45d} r36={45d} r37={52d,7u} r38={49d,4u} r39={45d} r40={45d} r45={45d} r46={45d} r47={45d} r48={45d} r49={45d} r50={45d} r51={45d} r52={45d} r53={45d} r54={45d} r55={45d} r56={45d} r57={45d} r58={45d} r59={45d} r60={45d} r61={45d} r62={45d} r63={45d} r64={45d} r65={45d} r66={45d} r67={45d} r68={45d} r69={45d} r70={45d} r71={45d} r72={45d} r73={45d} r74={45d} r75={45d} r76={45d} 
;;    total ref usage 5909{4261d,1483u,165e} in 1100{1055 regular + 45 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 529
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 ax [529])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [0 verbose+0 S4 A64])) ge2fitman_fmtext_o.cpp:25 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 verbose+0 S1 A32])
        (reg:QI 0 ax [529])) ge2fitman_fmtext_o.cpp:25 93 {*movqi_internal}
     (nil))
(note 10 9 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:28 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:29 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:30 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 numSets+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:31 90 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 dataSizeChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:32 90 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:33 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:34 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:35 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:53 93 {*movqi_internal}
     (nil))
(insn 22 21 1218 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:63 90 {*movsi_internal}
     (nil))
(jump_insn 1218 22 1219 2 (set (pc)
        (label_ref 1197)) ge2fitman_fmtext_o.cpp:63 636 {jump}
     (nil)
 -> 1197)
;;  succ:       80 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1219 1218 1201)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 530 531 532 533
(code_label 1201 1219 25 3 50 "" [1 uses])
(note 25 1201 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg:SI 0 ax [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:67 90 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 1 dx [orig:84 D.25097 ] [84])
        (sign_extend:DI (reg:SI 0 ax [530]))) ge2fitman_fmtext_o.cpp:67 142 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 3 (set (reg:DI 0 ax [531])
        (reg:DI 1 dx [orig:84 D.25097 ] [84])) ge2fitman_fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 29 28 30 3 (parallel [
            (set (reg:DI 0 ax [531])
                (ashift:DI (reg:DI 0 ax [531])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 497 {*ashldi3_1}
     (nil))
(insn 30 29 31 3 (parallel [
            (set (reg:DI 0 ax [531])
                (plus:DI (reg:DI 0 ax [531])
                    (reg:DI 1 dx [orig:84 D.25097 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.25097 ] [84])
            (const_int 9 [0x9]))
        (nil)))
(insn 31 30 32 3 (parallel [
            (set (reg:DI 0 ax [531])
                (ashift:DI (reg:DI 0 ax [531])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 497 {*ashldi3_1}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:DI 0 ax [531])
                (plus:DI (reg:DI 0 ax [531])
                    (reg:DI 1 dx [orig:84 D.25097 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.25097 ] [84])
            (const_int 19 [0x13]))
        (nil)))
(insn 33 32 34 3 (parallel [
            (set (reg:DI 0 ax [532])
                (ashift:DI (reg:DI 0 ax [531])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 497 {*ashldi3_1}
     (nil))
(insn 34 33 35 3 (set (reg:DI 0 ax [531])
        (reg:DI 0 ax [532])) ge2fitman_fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:DI 1 dx [orig:85 D.25097 ] [85])
        (reg:DI 0 ax [531])) ge2fitman_fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [533])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])) ge2fitman_fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.25098 ] [86])
                (plus:DI (reg/f:DI 0 ax [533])
                    (reg:DI 1 dx [orig:85 D.25097 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.25097 ] [85]))
        (nil)))
(insn 38 37 39 3 (set (reg:SI 0 ax [orig:87 D.25096 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:86 D.25098 ] [86])
                (const_int 20 [0x14])) [0 _39->file_type+0 S4 A32])) ge2fitman_fmtext_o.cpp:67 90 {*movsi_internal}
     (nil))
(insn 39 38 40 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 D.25096 ] [87])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:67 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 40 39 41 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1194)
            (pc))) ge2fitman_fmtext_o.cpp:67 596 {*jcc_1}
     (nil)
 -> 1194)
;;  succ:       4 (FALLTHRU)
;;              79
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562
(note 41 40 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 4 (set (reg:SI 0 ax [534])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 43 42 1269 4 (set (reg:DI 0 ax [orig:88 D.25097 ] [88])
        (sign_extend:DI (reg:SI 0 ax [534]))) ge2fitman_fmtext_o.cpp:73 142 {*extendsidi2_rex64}
     (nil))
(insn 1269 43 44 4 (set (reg:DI 0 ax [orig:89 D.25097 ] [89])
        (reg:DI 0 ax [orig:88 D.25097 ] [88])) ge2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 44 1269 1270 4 (parallel [
            (set (reg:DI 0 ax [orig:89 D.25097 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:89 D.25097 ] [89])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:73 497 {*ashldi3_1}
     (nil))
(insn 1270 44 45 4 (set (reg:DI 1 dx [orig:89 D.25097 ] [89])
        (reg:DI 0 ax [orig:89 D.25097 ] [89])) ge2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 45 1270 46 4 (set (reg/f:DI 0 ax [535])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.25099 ] [90])
                (plus:DI (reg/f:DI 0 ax [535])
                    (reg:DI 1 dx [orig:89 D.25097 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:73 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.25097 ] [89]))
        (nil)))
(insn 47 46 48 4 (set (reg:DI 0 ax [orig:91 D.25100 ] [91])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:90 D.25099 ] [90])
                (const_int 16 [0x10])) [0 _44->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SI 0 ax [orig:92 D.25096 ] [92])
        (reg:SI 0 ax [orig:91 D.25100 ] [91])) ge2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg:SI 0 ax [536])
                (ashift:SI (reg:SI 0 ax [orig:92 D.25096 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:73 496 {*ashlsi3_1}
     (nil))
(insn 50 49 51 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [536])) ge2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:SI 0 ax [537])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:80 90 {*movsi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 0 ax [orig:93 D.25097 ] [93])
        (sign_extend:DI (reg:SI 0 ax [537]))) ge2fitman_fmtext_o.cpp:80 142 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg:DI 0 ax [orig:94 D.25097 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.25097 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:80 497 {*ashldi3_1}
     (nil))
(insn 54 53 55 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:94 D.25097 ] [94])) ge2fitman_fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(call_insn 55 54 56 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:80 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 56 55 57 4 (set (reg/f:DI 0 ax [538])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:80 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [538])
        (nil)))
(insn 57 56 58 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])
        (reg/f:DI 0 ax [538])) ge2fitman_fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:91 90 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DI 0 ax [orig:95 D.25097 ] [95])
        (sign_extend:DI (reg:SI 0 ax [539]))) ge2fitman_fmtext_o.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 1 dx [orig:96 D.25097 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.25097 ] [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:91 497 {*ashldi3_1}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [540])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 out_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg/f:DI 3 bx [orig:97 D.25101 ] [97])
                (plus:DI (reg:DI 1 dx [orig:96 D.25097 ] [96])
                    (reg/f:DI 0 ax [540])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:91 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.25097 ] [96]))
        (nil)))
(insn 63 62 64 4 (set (reg:SI 0 ax [541])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:91 90 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DI 0 ax [orig:98 D.25097 ] [98])
        (sign_extend:DI (reg:SI 0 ax [541]))) ge2fitman_fmtext_o.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg:DI 0 ax [orig:99 D.25097 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 D.25097 ] [98])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:91 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:99 D.25097 ] [99])) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (nil))
(call_insn 67 66 68 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:91 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 68 67 69 4 (set (reg/f:DI 0 ax [542])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [542])
        (nil)))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [orig:100 D.25102 ] [100])
        (reg/f:DI 0 ax [542])) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:97 D.25101 ] [97]) [0 *_54+0 S8 A64])
        (reg/f:DI 0 ax [orig:100 D.25102 ] [100])) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg:SI 0 ax [543])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 0 ax [orig:101 D.25097 ] [101])
        (sign_extend:DI (reg:SI 0 ax [543]))) ge2fitman_fmtext_o.cpp:92 142 {*extendsidi2_rex64}
     (nil))
(insn 73 72 74 4 (parallel [
            (set (reg:DI 1 dx [orig:102 D.25097 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.25097 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:92 497 {*ashldi3_1}
     (nil))
(insn 74 73 75 4 (set (reg/f:DI 0 ax [544])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 scratch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (parallel [
            (set (reg/f:DI 3 bx [orig:103 D.25101 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 D.25097 ] [102])
                    (reg/f:DI 0 ax [544])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:92 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 32 [0x20])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.25097 ] [102]))
        (nil)))
(insn 76 75 77 4 (set (reg:SI 0 ax [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
(insn 77 76 78 4 (set (reg:DI 0 ax [orig:104 D.25097 ] [104])
        (sign_extend:DI (reg:SI 0 ax [545]))) ge2fitman_fmtext_o.cpp:92 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 4 (parallel [
            (set (reg:DI 0 ax [orig:105 D.25097 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 D.25097 ] [104])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:92 497 {*ashldi3_1}
     (nil))
(insn 79 78 80 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:105 D.25097 ] [105])) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn 80 79 81 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:92 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 4 (set (reg/f:DI 0 ax [546])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [546])
        (nil)))
(insn 82 81 83 4 (set (reg/f:DI 0 ax [orig:106 D.25102 ] [106])
        (reg/f:DI 0 ax [546])) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:103 D.25101 ] [103]) [0 *_61+0 S8 A64])
        (reg/f:DI 0 ax [orig:106 D.25102 ] [106])) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:SI 0 ax [547])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:94 90 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:DI 0 ax [orig:107 D.25097 ] [107])
        (sign_extend:DI (reg:SI 0 ax [547]))) ge2fitman_fmtext_o.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 4 (parallel [
            (set (reg:DI 1 dx [orig:108 D.25097 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:107 D.25097 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:94 497 {*ashldi3_1}
     (nil))
(insn 87 86 88 4 (set (reg/f:DI 0 ax [548])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg/f:DI 3 bx [orig:109 D.25103 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 D.25097 ] [108])
                    (reg/f:DI 0 ax [548])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:94 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.25097 ] [108]))
        (nil)))
(insn 89 88 90 4 (set (reg:SI 0 ax [549])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:94 90 {*movsi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:DI 0 ax [orig:110 D.25097 ] [110])
        (sign_extend:DI (reg:SI 0 ax [549]))) ge2fitman_fmtext_o.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 4 (parallel [
            (set (reg:DI 0 ax [orig:111 D.25097 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 D.25097 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:94 497 {*ashldi3_1}
     (nil))
(insn 92 91 93 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:111 D.25097 ] [111])) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(call_insn 93 92 94 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:94 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 94 93 95 4 (set (reg/f:DI 0 ax [550])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [550])
        (nil)))
(insn 95 94 96 4 (set (reg/f:DI 0 ax [orig:112 D.25102 ] [112])
        (reg/f:DI 0 ax [550])) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 96 95 97 4 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:109 D.25103 ] [109]) [0 _68->fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:112 D.25102 ] [112])) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:SI 0 ax [551])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:95 90 {*movsi_internal}
     (nil))
(insn 98 97 99 4 (set (reg:DI 0 ax [orig:113 D.25097 ] [113])
        (sign_extend:DI (reg:SI 0 ax [551]))) ge2fitman_fmtext_o.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 99 98 100 4 (parallel [
            (set (reg:DI 1 dx [orig:114 D.25097 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.25097 ] [113])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:95 497 {*ashldi3_1}
     (nil))
(insn 100 99 101 4 (set (reg/f:DI 0 ax [552])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg/f:DI 3 bx [orig:115 D.25104 ] [115])
                (plus:DI (reg:DI 1 dx [orig:114 D.25097 ] [114])
                    (reg/f:DI 0 ax [552])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:95 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.25097 ] [114]))
        (nil)))
(insn 102 101 103 4 (set (reg:SI 0 ax [553])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:95 90 {*movsi_internal}
     (nil))
(insn 103 102 104 4 (set (reg:DI 0 ax [orig:116 D.25097 ] [116])
        (sign_extend:DI (reg:SI 0 ax [553]))) ge2fitman_fmtext_o.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 4 (parallel [
            (set (reg:DI 0 ax [orig:117 D.25097 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 D.25097 ] [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:95 497 {*ashldi3_1}
     (nil))
(insn 105 104 106 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:117 D.25097 ] [117])) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (nil))
(call_insn 106 105 107 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:95 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 107 106 108 4 (set (reg/f:DI 0 ax [554])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [554])
        (nil)))
(insn 108 107 109 4 (set (reg/f:DI 0 ax [orig:118 D.25102 ] [118])
        (reg/f:DI 0 ax [554])) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (nil))
(insn 109 108 110 4 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:115 D.25104 ] [115]) [0 _75->fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:118 D.25102 ] [118])) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (nil))
(insn 110 109 111 4 (set (reg:SI 0 ax [555])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:98 90 {*movsi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:DI 0 ax [orig:119 D.25097 ] [119])
        (sign_extend:DI (reg:SI 0 ax [555]))) ge2fitman_fmtext_o.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 112 111 113 4 (parallel [
            (set (reg:DI 1 dx [orig:120 D.25097 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.25097 ] [119])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:98 497 {*ashldi3_1}
     (nil))
(insn 113 112 114 4 (set (reg/f:DI 0 ax [556])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (nil))
(insn 114 113 115 4 (parallel [
            (set (reg/f:DI 3 bx [orig:121 D.25103 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 D.25097 ] [120])
                    (reg/f:DI 0 ax [556])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.25097 ] [120]))
        (nil)))
(insn 115 114 116 4 (set (reg:SI 0 ax [557])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:98 90 {*movsi_internal}
     (nil))
(insn 116 115 117 4 (set (reg:DI 0 ax [orig:122 D.25097 ] [122])
        (sign_extend:DI (reg:SI 0 ax [557]))) ge2fitman_fmtext_o.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 117 116 118 4 (parallel [
            (set (reg:DI 0 ax [orig:123 D.25097 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:122 D.25097 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:98 497 {*ashldi3_1}
     (nil))
(insn 118 117 119 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:123 D.25097 ] [123])) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (nil))
(call_insn 119 118 120 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:98 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 120 119 121 4 (set (reg/f:DI 0 ax [558])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [558])
        (nil)))
(insn 121 120 122 4 (set (reg/f:DI 0 ax [orig:124 D.25102 ] [124])
        (reg/f:DI 0 ax [558])) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (nil))
(insn 122 121 123 4 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:121 D.25103 ] [121]) [0 _81->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:124 D.25102 ] [124])) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (nil))
(insn 123 122 124 4 (set (reg:SI 0 ax [559])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:99 90 {*movsi_internal}
     (nil))
(insn 124 123 125 4 (set (reg:DI 0 ax [orig:125 D.25097 ] [125])
        (sign_extend:DI (reg:SI 0 ax [559]))) ge2fitman_fmtext_o.cpp:99 142 {*extendsidi2_rex64}
     (nil))
(insn 125 124 126 4 (parallel [
            (set (reg:DI 1 dx [orig:126 D.25097 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.25097 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:99 497 {*ashldi3_1}
     (nil))
(insn 126 125 127 4 (set (reg/f:DI 0 ax [560])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 127 126 128 4 (parallel [
            (set (reg/f:DI 3 bx [orig:127 D.25104 ] [127])
                (plus:DI (reg:DI 1 dx [orig:126 D.25097 ] [126])
                    (reg/f:DI 0 ax [560])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:99 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.25097 ] [126]))
        (nil)))
(insn 128 127 129 4 (set (reg:SI 0 ax [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:99 90 {*movsi_internal}
     (nil))
(insn 129 128 130 4 (set (reg:DI 0 ax [orig:128 D.25097 ] [128])
        (sign_extend:DI (reg:SI 0 ax [561]))) ge2fitman_fmtext_o.cpp:99 142 {*extendsidi2_rex64}
     (nil))
(insn 130 129 131 4 (parallel [
            (set (reg:DI 0 ax [orig:129 D.25097 ] [129])
                (ashift:DI (reg:DI 0 ax [orig:128 D.25097 ] [128])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:99 497 {*ashldi3_1}
     (nil))
(insn 131 130 132 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:129 D.25097 ] [129])) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(call_insn 132 131 133 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:99 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 133 132 134 4 (set (reg/f:DI 0 ax [562])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [562])
        (nil)))
(insn 134 133 135 4 (set (reg/f:DI 0 ax [orig:130 D.25102 ] [130])
        (reg/f:DI 0 ax [562])) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 135 134 136 4 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:127 D.25104 ] [127]) [0 _87->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:130 D.25102 ] [130])) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 136 135 1220 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:104 90 {*movsi_internal}
     (nil))
(jump_insn 1220 136 1221 4 (set (pc)
        (label_ref 166)) ge2fitman_fmtext_o.cpp:104 636 {jump}
     (nil)
 -> 166)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1221 1220 168)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 563 564 565 566 567 568 569 570
(code_label 168 1221 139 5 5 "" [1 uses])
(note 139 168 140 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 5 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:105 90 {*movsi_internal}
     (nil))
(insn 141 140 142 5 (set (reg:DI 0 ax [orig:131 D.25097 ] [131])
        (sign_extend:DI (reg:SI 0 ax [563]))) ge2fitman_fmtext_o.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 5 (parallel [
            (set (reg:DI 1 dx [orig:132 D.25097 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:131 D.25097 ] [131])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:105 497 {*ashldi3_1}
     (nil))
(insn 143 142 144 5 (set (reg/f:DI 0 ax [564])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:105 89 {*movdi_internal}
     (nil))
(insn 144 143 145 5 (parallel [
            (set (reg/f:DI 0 ax [orig:133 D.25104 ] [133])
                (plus:DI (reg/f:DI 0 ax [564])
                    (reg:DI 1 dx [orig:132 D.25097 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:105 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:132 D.25097 ] [132]))
        (nil)))
(insn 145 144 146 5 (set (reg/f:DI 0 ax [orig:134 D.25105 ] [134])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:133 D.25104 ] [133]) [0 _94->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:105 89 {*movdi_internal}
     (nil))
(insn 146 145 147 5 (set (reg:SI 1 dx [565])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:105 90 {*movsi_internal}
     (nil))
(insn 147 146 148 5 (set (reg:DI 1 dx [orig:135 D.25097 ] [135])
        (sign_extend:DI (reg:SI 1 dx [565]))) ge2fitman_fmtext_o.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 5 (parallel [
            (set (reg:DI 1 dx [orig:136 D.25097 ] [136])
                (ashift:DI (reg:DI 1 dx [orig:135 D.25097 ] [135])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:105 497 {*ashldi3_1}
     (nil))
(insn 149 148 150 5 (parallel [
            (set (reg/f:DI 1 dx [orig:137 D.25105 ] [137])
                (plus:DI (reg:DI 1 dx [orig:136 D.25097 ] [136])
                    (reg/f:DI 0 ax [orig:134 D.25105 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:105 221 {*adddi_1}
     (nil))
(insn 150 149 151 5 (set (reg:SF 0 ax [566])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:105 129 {*movsf_internal}
     (nil))
(insn 151 150 152 5 (set (mem:SF (reg/f:DI 1 dx [orig:137 D.25105 ] [137]) [0 *_98+0 S4 A32])
        (reg:SF 0 ax [566])) ge2fitman_fmtext_o.cpp:105 129 {*movsf_internal}
     (nil))
(insn 152 151 153 5 (set (reg:SI 0 ax [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:106 90 {*movsi_internal}
     (nil))
(insn 153 152 154 5 (set (reg:DI 0 ax [orig:138 D.25097 ] [138])
        (sign_extend:DI (reg:SI 0 ax [567]))) ge2fitman_fmtext_o.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 5 (parallel [
            (set (reg:DI 1 dx [orig:139 D.25097 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.25097 ] [138])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 497 {*ashldi3_1}
     (nil))
(insn 155 154 156 5 (set (reg/f:DI 0 ax [568])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:106 89 {*movdi_internal}
     (nil))
(insn 156 155 157 5 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.25104 ] [140])
                (plus:DI (reg/f:DI 0 ax [568])
                    (reg:DI 1 dx [orig:139 D.25097 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.25097 ] [139]))
        (nil)))
(insn 157 156 158 5 (set (reg/f:DI 0 ax [orig:141 D.25105 ] [141])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:140 D.25104 ] [140]) [0 _101->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:106 89 {*movdi_internal}
     (nil))
(insn 158 157 159 5 (set (reg:SI 1 dx [569])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:106 90 {*movsi_internal}
     (nil))
(insn 159 158 160 5 (set (reg:DI 1 dx [orig:142 D.25106 ] [142])
        (sign_extend:DI (reg:SI 1 dx [569]))) ge2fitman_fmtext_o.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 5 (parallel [
            (set (reg:DI 1 dx [orig:143 D.25106 ] [143])
                (plus:DI (reg:DI 1 dx [orig:142 D.25106 ] [142])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 221 {*adddi_1}
     (nil))
(insn 161 160 162 5 (parallel [
            (set (reg:DI 1 dx [orig:144 D.25106 ] [144])
                (ashift:DI (reg:DI 1 dx [orig:143 D.25106 ] [143])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 497 {*ashldi3_1}
     (nil))
(insn 162 161 163 5 (parallel [
            (set (reg/f:DI 1 dx [orig:145 D.25105 ] [145])
                (plus:DI (reg:DI 1 dx [orig:144 D.25106 ] [144])
                    (reg/f:DI 0 ax [orig:141 D.25105 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 221 {*adddi_1}
     (nil))
(insn 163 162 164 5 (set (reg:SF 0 ax [570])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:106 129 {*movsf_internal}
     (nil))
(insn 164 163 165 5 (set (mem:SF (reg/f:DI 1 dx [orig:145 D.25105 ] [145]) [0 *_106+0 S4 A32])
        (reg:SF 0 ax [570])) ge2fitman_fmtext_o.cpp:106 129 {*movsf_internal}
     (nil))
(insn 165 164 166 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:104 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 571
(code_label 166 165 167 6 4 "" [1 uses])
(note 167 166 169 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 169 167 170 6 (set (reg:SI 0 ax [571])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:104 90 {*movsi_internal}
     (nil))
(insn 170 169 171 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [571])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32]))) ge2fitman_fmtext_o.cpp:104 7 {*cmpsi_1}
     (nil))
(jump_insn 171 170 172 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 168)
            (pc))) ge2fitman_fmtext_o.cpp:104 596 {*jcc_1}
     (nil)
 -> 168)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 146 147 572
(note 172 171 173 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 173 172 174 7 (set (reg/f:DI 0 ax [572])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:110 89 {*movdi_internal}
     (nil))
(insn 174 173 175 7 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.25107 ] [146])
                (plus:DI (reg/f:DI 0 ax [572])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:110 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 175 174 176 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b27d55435f0 *.LC1>)) ge2fitman_fmtext_o.cpp:110 89 {*movdi_internal}
     (nil))
(insn 176 175 177 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:146 D.25107 ] [146])) ge2fitman_fmtext_o.cpp:110 89 {*movdi_internal}
     (nil))
(call_insn/i 177 176 178 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:110 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 178 177 179 7 (set (reg:SI 0 ax [orig:147 D.25096 ] [147])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:110 90 {*movsi_internal}
     (nil))
(insn 179 178 180 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:147 D.25096 ] [147])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 180 179 181 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 190)
            (pc))) ge2fitman_fmtext_o.cpp:110 596 {*jcc_1}
     (nil)
 -> 190)
;;  succ:       9
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 148 149 573
(note 181 180 182 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 182 181 183 8 (set (reg/f:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:111 89 {*movdi_internal}
     (nil))
(insn 183 182 184 8 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.25107 ] [148])
                (plus:DI (reg/f:DI 0 ax [573])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:111 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 184 183 185 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b27d5543688 *.LC2>)) ge2fitman_fmtext_o.cpp:111 89 {*movdi_internal}
     (nil))
(insn 185 184 186 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:148 D.25107 ] [148])) ge2fitman_fmtext_o.cpp:111 89 {*movdi_internal}
     (nil))
(call_insn/i 186 185 187 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:111 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 187 186 188 8 (set (reg:SI 0 ax [orig:149 D.25096 ] [149])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:111 90 {*movsi_internal}
     (nil))
(insn 188 187 189 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:149 D.25096 ] [149])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 189 188 190 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 195)
            (pc))) ge2fitman_fmtext_o.cpp:110 596 {*jcc_1}
     (nil)
 -> 195)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 190 189 191 9 6 "" [1 uses])
(note 191 190 192 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 1222 9 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 39984 [0x9c30])) ge2fitman_fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(jump_insn 1222 192 1223 9 (set (pc)
        (label_ref 277)) ge2fitman_fmtext_o.cpp:112 636 {jump}
     (nil)
 -> 277)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1223 1222 195)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 150 151 574
(code_label 195 1223 196 10 7 "" [1 uses])
(note 196 195 197 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 197 196 198 10 (set (reg/f:DI 0 ax [574])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 198 197 199 10 (parallel [
            (set (reg/f:DI 0 ax [orig:150 D.25107 ] [150])
                (plus:DI (reg/f:DI 0 ax [574])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:113 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 199 198 200 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b27d5543720 *.LC3>)) ge2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 200 199 201 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:150 D.25107 ] [150])) ge2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(call_insn/i 201 200 202 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:113 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 202 201 203 10 (set (reg:SI 0 ax [orig:151 D.25096 ] [151])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:113 90 {*movsi_internal}
     (nil))
(insn 203 202 204 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:151 D.25096 ] [151])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:113 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 204 203 205 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 214)
            (pc))) ge2fitman_fmtext_o.cpp:113 596 {*jcc_1}
     (nil)
 -> 214)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 152 153 575
(note 205 204 206 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 11 (set (reg/f:DI 0 ax [575])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:114 89 {*movdi_internal}
     (nil))
(insn 207 206 208 11 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.25107 ] [152])
                (plus:DI (reg/f:DI 0 ax [575])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:114 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 208 207 209 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b27d55437b8 *.LC4>)) ge2fitman_fmtext_o.cpp:114 89 {*movdi_internal}
     (nil))
(insn 209 208 210 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:152 D.25107 ] [152])) ge2fitman_fmtext_o.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn/i 210 209 211 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:114 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 211 210 212 11 (set (reg:SI 0 ax [orig:153 D.25096 ] [153])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:114 90 {*movsi_internal}
     (nil))
(insn 212 211 213 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:153 D.25096 ] [153])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:113 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 213 212 214 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) ge2fitman_fmtext_o.cpp:113 596 {*jcc_1}
     (nil)
 -> 219)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 214 213 215 12 9 "" [1 uses])
(note 215 214 216 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 1224 12 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 60464 [0xec30])) ge2fitman_fmtext_o.cpp:115 89 {*movdi_internal}
     (nil))
(jump_insn 1224 216 1225 12 (set (pc)
        (label_ref 277)) ge2fitman_fmtext_o.cpp:115 636 {jump}
     (nil)
 -> 277)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1225 1224 219)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 154 155 576
(code_label 219 1225 220 13 10 "" [1 uses])
(note 220 219 221 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 13 (set (reg/f:DI 0 ax [576])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:116 89 {*movdi_internal}
     (nil))
(insn 222 221 223 13 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.25107 ] [154])
                (plus:DI (reg/f:DI 0 ax [576])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:116 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 223 222 224 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b27d5543850 *.LC5>)) ge2fitman_fmtext_o.cpp:116 89 {*movdi_internal}
     (nil))
(insn 224 223 225 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:154 D.25107 ] [154])) ge2fitman_fmtext_o.cpp:116 89 {*movdi_internal}
     (nil))
(call_insn/i 225 224 226 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:116 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 226 225 227 13 (set (reg:SI 0 ax [orig:155 D.25096 ] [155])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:116 90 {*movsi_internal}
     (nil))
(insn 227 226 228 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:155 D.25096 ] [155])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:116 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 228 227 229 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 233)
            (pc))) ge2fitman_fmtext_o.cpp:116 596 {*jcc_1}
     (nil)
 -> 233)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 229 228 230 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 230 229 1226 14 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 61464 [0xf018])) ge2fitman_fmtext_o.cpp:117 89 {*movdi_internal}
     (nil))
(jump_insn 1226 230 1227 14 (set (pc)
        (label_ref 277)) 636 {jump}
     (nil)
 -> 277)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1227 1226 233)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 156 157 577
(code_label 233 1227 234 15 11 "" [1 uses])
(note 234 233 235 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 15 (set (reg/f:DI 0 ax [577])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(insn 236 235 237 15 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.25107 ] [156])
                (plus:DI (reg/f:DI 0 ax [577])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:118 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 237 236 238 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b27d55438e8 *.LC6>)) ge2fitman_fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(insn 238 237 239 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:156 D.25107 ] [156])) ge2fitman_fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(call_insn/i 239 238 240 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:118 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 240 239 241 15 (set (reg:SI 0 ax [orig:157 D.25096 ] [157])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:118 90 {*movsi_internal}
     (nil))
(insn 241 240 242 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:157 D.25096 ] [157])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:118 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 242 241 243 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 247)
            (pc))) ge2fitman_fmtext_o.cpp:118 596 {*jcc_1}
     (nil)
 -> 247)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 243 242 244 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 244 243 1228 16 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 66072 [0x10218])) ge2fitman_fmtext_o.cpp:120 89 {*movdi_internal}
     (nil))
(jump_insn 1228 244 1229 16 (set (pc)
        (label_ref 277)) 636 {jump}
     (nil)
 -> 277)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1229 1228 247)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 158 159 578
(code_label 247 1229 248 17 12 "" [1 uses])
(note 248 247 249 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 17 (set (reg/f:DI 0 ax [578])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:121 89 {*movdi_internal}
     (nil))
(insn 250 249 251 17 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.25107 ] [158])
                (plus:DI (reg/f:DI 0 ax [578])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:121 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 251 250 252 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b27d5543980 *.LC7>)) ge2fitman_fmtext_o.cpp:121 89 {*movdi_internal}
     (nil))
(insn 252 251 253 17 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:158 D.25107 ] [158])) ge2fitman_fmtext_o.cpp:121 89 {*movdi_internal}
     (nil))
(call_insn/i 253 252 254 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:121 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 254 253 255 17 (set (reg:SI 0 ax [orig:159 D.25096 ] [159])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:121 90 {*movsi_internal}
     (nil))
(insn 255 254 256 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:159 D.25096 ] [159])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:121 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 256 255 257 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 263)
            (pc))) ge2fitman_fmtext_o.cpp:121 596 {*jcc_1}
     (nil)
 -> 263)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 257 256 258 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 258 257 259 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b27d5543980 *.LC7>)) ge2fitman_fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(call_insn 259 258 260 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:122 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 260 259 1230 18 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 149788 [0x2491c])) ge2fitman_fmtext_o.cpp:126 89 {*movdi_internal}
     (nil))
(jump_insn 1230 260 1231 18 (set (pc)
        (label_ref 277)) 636 {jump}
     (nil)
 -> 277)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1231 1230 263)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 160 161 579
(code_label 263 1231 264 19 13 "" [1 uses])
(note 264 263 265 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 19 (set (reg/f:DI 0 ax [579])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:128 89 {*movdi_internal}
     (nil))
(insn 266 265 267 19 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.25107 ] [160])
                (plus:DI (reg/f:DI 0 ax [579])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:128 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 267 266 268 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b27d5543a18 *.LC8>)) ge2fitman_fmtext_o.cpp:128 89 {*movdi_internal}
     (nil))
(insn 268 267 269 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:160 D.25107 ] [160])) ge2fitman_fmtext_o.cpp:128 89 {*movdi_internal}
     (nil))
(call_insn/i 269 268 270 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:128 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 270 269 271 19 (set (reg:SI 0 ax [orig:161 D.25096 ] [161])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:128 90 {*movsi_internal}
     (nil))
(insn 271 270 272 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:161 D.25096 ] [161])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:128 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 272 271 273 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 277)
            (pc))) ge2fitman_fmtext_o.cpp:128 596 {*jcc_1}
     (nil)
 -> 277)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 273 272 274 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b27d5543a18 *.LC8>)) ge2fitman_fmtext_o.cpp:129 89 {*movdi_internal}
     (nil))
(call_insn 275 274 276 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:129 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 276 275 277 20 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 149788 [0x2491c])) ge2fitman_fmtext_o.cpp:130 89 {*movdi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              9 [100.0%] 
;;              12 [100.0%] 
;;              14 [100.0%] 
;;              16 [100.0%] 
;;              19
;;              18 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 162 163 580
(code_label 277 276 278 21 8 "" [6 uses])
(note 278 277 279 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 280 21 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 149788 [0x2491c])) ge2fitman_fmtext_o.cpp:141 89 {*movdi_internal}
     (nil))
(insn 280 279 281 21 (set (reg/f:DI 0 ax [580])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 281 280 282 21 (parallel [
            (set (reg/f:DI 0 ax [orig:162 D.25107 ] [162])
                (plus:DI (reg/f:DI 0 ax [580])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:143 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 282 281 283 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b27d5543a18 *.LC8>)) ge2fitman_fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 283 282 284 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:162 D.25107 ] [162])) ge2fitman_fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(call_insn/i 284 283 285 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b27d3ec4300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:143 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 285 284 286 21 (set (reg:SI 0 ax [orig:163 D.25096 ] [163])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:143 90 {*movsi_internal}
     (nil))
(insn 286 285 287 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:163 D.25096 ] [163])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:143 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 287 286 288 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 292)
            (pc))) ge2fitman_fmtext_o.cpp:143 596 {*jcc_1}
     (nil)
 -> 292)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 288 287 289 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 289 288 290 22 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 145908 [0x239f4])) ge2fitman_fmtext_o.cpp:144 89 {*movdi_internal}
     (nil))
(insn 290 289 291 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b27d5543ab0 *.LC9>)) ge2fitman_fmtext_o.cpp:145 89 {*movdi_internal}
     (nil))
(call_insn 291 290 292 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:145 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599
(code_label 292 291 293 23 14 "" [1 uses])
(note 293 292 294 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 294 293 295 23 (set (reg:SI 0 ax [581])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
(insn 295 294 1271 23 (set (reg:DI 0 ax [orig:164 D.25097 ] [164])
        (sign_extend:DI (reg:SI 0 ax [581]))) ge2fitman_fmtext_o.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 1271 295 296 23 (set (reg:DI 0 ax [orig:165 D.25097 ] [165])
        (reg:DI 0 ax [orig:164 D.25097 ] [164])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 296 1271 1272 23 (parallel [
            (set (reg:DI 0 ax [orig:165 D.25097 ] [165])
                (ashift:DI (reg:DI 0 ax [orig:165 D.25097 ] [165])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 497 {*ashldi3_1}
     (nil))
(insn 1272 296 297 23 (set (reg:DI 1 dx [orig:165 D.25097 ] [165])
        (reg:DI 0 ax [orig:165 D.25097 ] [165])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 297 1272 298 23 (set (reg/f:DI 0 ax [582])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 298 297 299 23 (parallel [
            (set (reg/f:DI 0 ax [orig:166 D.25099 ] [166])
                (plus:DI (reg/f:DI 0 ax [582])
                    (reg:DI 1 dx [orig:165 D.25097 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:165 D.25097 ] [165]))
        (nil)))
(insn 299 298 300 23 (set (reg:DI 1 dx [orig:167 D.25100 ] [167])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:166 D.25099 ] [166])
                (const_int 24 [0x18])) [0 _137->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 300 299 301 23 (set (reg:SI 0 ax [583])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
(insn 301 300 1273 23 (set (reg:DI 0 ax [orig:168 D.25097 ] [168])
        (sign_extend:DI (reg:SI 0 ax [583]))) ge2fitman_fmtext_o.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 1273 301 302 23 (set (reg:DI 0 ax [orig:169 D.25097 ] [169])
        (reg:DI 0 ax [orig:168 D.25097 ] [168])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 302 1273 1274 23 (parallel [
            (set (reg:DI 0 ax [orig:169 D.25097 ] [169])
                (ashift:DI (reg:DI 0 ax [orig:169 D.25097 ] [169])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 497 {*ashldi3_1}
     (nil))
(insn 1274 302 303 23 (set (reg:DI 2 cx [orig:169 D.25097 ] [169])
        (reg:DI 0 ax [orig:169 D.25097 ] [169])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 303 1274 304 23 (set (reg/f:DI 0 ax [584])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 304 303 305 23 (parallel [
            (set (reg/f:DI 0 ax [orig:170 D.25099 ] [170])
                (plus:DI (reg/f:DI 0 ax [584])
                    (reg:DI 2 cx [orig:169 D.25097 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:169 D.25097 ] [169]))
        (nil)))
(insn 305 304 306 23 (set (reg:DI 0 ax [orig:171 D.25100 ] [171])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:170 D.25099 ] [170])
                (const_int 16 [0x10])) [0 _141->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 306 305 307 23 (parallel [
            (set (reg:DI 0 ax [585])
                (mult:DI (reg:DI 0 ax [orig:171 D.25100 ] [171])
                    (reg:DI 1 dx [orig:167 D.25100 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 307 {*muldi3_1}
     (nil))
(insn 307 306 308 23 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])
        (reg:DI 0 ax [585])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 308 307 309 23 (set (reg:SI 0 ax [586])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:167 90 {*movsi_internal}
     (nil))
(insn 309 308 1275 23 (set (reg:DI 0 ax [orig:172 D.25097 ] [172])
        (sign_extend:DI (reg:SI 0 ax [586]))) ge2fitman_fmtext_o.cpp:167 142 {*extendsidi2_rex64}
     (nil))
(insn 1275 309 310 23 (set (reg:DI 0 ax [orig:173 D.25097 ] [173])
        (reg:DI 0 ax [orig:172 D.25097 ] [172])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 310 1275 1276 23 (parallel [
            (set (reg:DI 0 ax [orig:173 D.25097 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:173 D.25097 ] [173])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 497 {*ashldi3_1}
     (nil))
(insn 1276 310 311 23 (set (reg:DI 1 dx [orig:173 D.25097 ] [173])
        (reg:DI 0 ax [orig:173 D.25097 ] [173])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 311 1276 312 23 (set (reg/f:DI 0 ax [587])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 312 311 313 23 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.25099 ] [174])
                (plus:DI (reg/f:DI 0 ax [587])
                    (reg:DI 1 dx [orig:173 D.25097 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:173 D.25097 ] [173]))
        (nil)))
(insn 313 312 314 23 (set (reg:DI 1 dx [orig:175 D.25100 ] [175])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:174 D.25099 ] [174])
                (const_int 24 [0x18])) [0 _146->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 314 313 315 23 (set (reg:SI 0 ax [588])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:167 90 {*movsi_internal}
     (nil))
(insn 315 314 1277 23 (set (reg:DI 0 ax [orig:176 D.25097 ] [176])
        (sign_extend:DI (reg:SI 0 ax [588]))) ge2fitman_fmtext_o.cpp:167 142 {*extendsidi2_rex64}
     (nil))
(insn 1277 315 316 23 (set (reg:DI 0 ax [orig:177 D.25097 ] [177])
        (reg:DI 0 ax [orig:176 D.25097 ] [176])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 316 1277 1278 23 (parallel [
            (set (reg:DI 0 ax [orig:177 D.25097 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:177 D.25097 ] [177])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 497 {*ashldi3_1}
     (nil))
(insn 1278 316 317 23 (set (reg:DI 2 cx [orig:177 D.25097 ] [177])
        (reg:DI 0 ax [orig:177 D.25097 ] [177])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 317 1278 318 23 (set (reg/f:DI 0 ax [589])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 318 317 319 23 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.25099 ] [178])
                (plus:DI (reg/f:DI 0 ax [589])
                    (reg:DI 2 cx [orig:177 D.25097 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:177 D.25097 ] [177]))
        (nil)))
(insn 319 318 1279 23 (set (reg:DI 0 ax [orig:179 D.25100 ] [179])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:178 D.25099 ] [178])
                (const_int 16 [0x10])) [0 _150->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 1279 319 320 23 (set (reg:DI 2 cx [orig:180 D.25100 ] [180])
        (reg:DI 1 dx [orig:175 D.25100 ] [175])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 320 1279 321 23 (parallel [
            (set (reg:DI 2 cx [orig:180 D.25100 ] [180])
                (mult:DI (reg:DI 2 cx [orig:180 D.25100 ] [180])
                    (reg:DI 0 ax [orig:179 D.25100 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 307 {*muldi3_1}
     (nil))
(insn 321 320 322 23 (set (reg:SI 0 ax [590])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:168 90 {*movsi_internal}
     (nil))
(insn 322 321 323 23 (set (reg:DI 1 dx [orig:181 D.25097 ] [181])
        (sign_extend:DI (reg:SI 0 ax [590]))) ge2fitman_fmtext_o.cpp:168 142 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 23 (set (reg:DI 0 ax [591])
        (reg:DI 1 dx [orig:181 D.25097 ] [181])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 324 323 325 23 (parallel [
            (set (reg:DI 0 ax [591])
                (ashift:DI (reg:DI 0 ax [591])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 497 {*ashldi3_1}
     (nil))
(insn 325 324 326 23 (parallel [
            (set (reg:DI 0 ax [591])
                (plus:DI (reg:DI 0 ax [591])
                    (reg:DI 1 dx [orig:181 D.25097 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:181 D.25097 ] [181])
            (const_int 5 [0x5]))
        (nil)))
(insn 326 325 327 23 (parallel [
            (set (reg:DI 0 ax [592])
                (ashift:DI (reg:DI 0 ax [591])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 497 {*ashldi3_1}
     (nil))
(insn 327 326 328 23 (set (reg:DI 0 ax [591])
        (reg:DI 0 ax [592])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 328 327 329 23 (set (reg:DI 1 dx [orig:182 D.25097 ] [182])
        (reg:DI 0 ax [591])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 329 328 330 23 (set (reg/f:DI 0 ax [593])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 330 329 331 23 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.25108 ] [183])
                (plus:DI (reg/f:DI 0 ax [593])
                    (reg:DI 1 dx [orig:182 D.25097 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.25097 ] [182]))
        (nil)))
(insn 331 330 332 23 (set (reg:SI 0 ax [orig:184 D.25096 ] [184])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:183 D.25108 ] [183])
                (const_int 4 [0x4])) [0 _155->num_unsup_sets+0 S4 A32])) ge2fitman_fmtext_o.cpp:168 90 {*movsi_internal}
     (nil))
(insn 332 331 333 23 (set (reg:DI 0 ax [orig:185 D.25100 ] [185])
        (sign_extend:DI (reg:SI 0 ax [orig:184 D.25096 ] [184]))) ge2fitman_fmtext_o.cpp:168 142 {*extendsidi2_rex64}
     (nil))
(insn 333 332 334 23 (parallel [
            (set (reg:DI 0 ax [594])
                (mult:DI (reg:DI 0 ax [orig:185 D.25100 ] [185])
                    (reg:DI 2 cx [orig:180 D.25100 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 307 {*muldi3_1}
     (nil))
(insn 334 333 335 23 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])
        (reg:DI 0 ax [594])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 335 334 336 23 (set (reg:SI 0 ax [595])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 336 335 337 23 (set (reg:DI 1 dx [orig:186 D.25097 ] [186])
        (sign_extend:DI (reg:SI 0 ax [595]))) ge2fitman_fmtext_o.cpp:174 142 {*extendsidi2_rex64}
     (nil))
(insn 337 336 338 23 (set (reg:DI 0 ax [596])
        (reg:DI 1 dx [orig:186 D.25097 ] [186])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 338 337 339 23 (parallel [
            (set (reg:DI 0 ax [596])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 497 {*ashldi3_1}
     (nil))
(insn 339 338 340 23 (parallel [
            (set (reg:DI 0 ax [596])
                (plus:DI (reg:DI 0 ax [596])
                    (reg:DI 1 dx [orig:186 D.25097 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:186 D.25097 ] [186])
            (const_int 5 [0x5]))
        (nil)))
(insn 340 339 341 23 (parallel [
            (set (reg:DI 0 ax [597])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 497 {*ashldi3_1}
     (nil))
(insn 341 340 342 23 (set (reg:DI 0 ax [596])
        (reg:DI 0 ax [597])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 342 341 343 23 (set (reg:DI 1 dx [orig:187 D.25097 ] [187])
        (reg:DI 0 ax [596])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 343 342 344 23 (set (reg/f:DI 0 ax [598])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 344 343 345 23 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.25108 ] [188])
                (plus:DI (reg/f:DI 0 ax [598])
                    (reg:DI 1 dx [orig:187 D.25097 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:187 D.25097 ] [187]))
        (nil)))
(insn 345 344 346 23 (set (reg:SI 0 ax [orig:189 D.25096 ] [189])
        (mem/j:SI (reg/f:DI 0 ax [orig:188 D.25108 ] [188]) [0 _161->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 346 345 347 23 (set (reg:SI 1 dx [orig:190 D.25109 ] [190])
        (reg:SI 0 ax [orig:189 D.25096 ] [189])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 347 346 348 23 (set (reg:DI 0 ax [599])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 348 347 349 23 (set (reg:SI 0 ax [orig:191 D.25109 ] [191])
        (reg:SI 0 ax [599])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 349 348 350 23 (parallel [
            (set (reg:SI 0 ax [orig:192 D.25109 ] [192])
                (mult:SI (reg:SI 0 ax [orig:191 D.25109 ] [191])
                    (reg:SI 1 dx [orig:190 D.25109 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 306 {*mulsi3_1}
     (nil))
(insn 350 349 351 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 dataSizeChannel+0 S4 A32])
        (reg:SI 0 ax [orig:192 D.25109 ] [192])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 351 350 352 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:232 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 352 351 353 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 383)
            (pc))) ge2fitman_fmtext_o.cpp:232 596 {*jcc_1}
     (nil)
 -> 383)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 193 194 195 600 601 602 603 604 605 606 607
(note 353 352 354 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 354 353 355 24 (set (reg/f:DI 0 ax [600])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 355 354 356 24 (set (reg:SI 0 ax [orig:193 D.25096 ] [193])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [600])
                (const_int 508 [0x1fc])) [0 procpar_info_167(D)->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:233 90 {*movsi_internal}
     (nil))
(insn 356 355 357 24 (set (reg:DI 0 ax [orig:194 D.25097 ] [194])
        (sign_extend:DI (reg:SI 0 ax [orig:193 D.25096 ] [193]))) ge2fitman_fmtext_o.cpp:233 142 {*extendsidi2_rex64}
     (nil))
(insn 357 356 358 24 (parallel [
            (set (reg:DI 0 ax [orig:195 D.25097 ] [195])
                (ashift:DI (reg:DI 0 ax [orig:194 D.25097 ] [194])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:233 497 {*ashldi3_1}
     (nil))
(insn 358 357 359 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:195 D.25097 ] [195])) ge2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(call_insn 359 358 360 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:233 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 360 359 361 24 (set (reg/f:DI 0 ax [601])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [601])
        (nil)))
(insn 361 360 362 24 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])
        (reg/f:DI 0 ax [601])) ge2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 362 361 363 24 (set (reg:DI 37 r8 [602])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 363 362 364 24 (set (reg:DI 5 di [603])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 364 363 365 24 (set (reg:DI 2 cx [604])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 365 364 366 24 (set (reg:DI 1 dx [605])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 366 365 367 24 (set (reg:DI 0 ax [606])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 367 366 368 24 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 368 367 369 24 (set (reg:SI 4 si [607])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 swap_bytes+0 S4 A64])) ge2fitman_fmtext_o.cpp:240 90 {*movsi_internal}
     (nil))
(insn 369 368 370 24 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 4 si [607])) ge2fitman_fmtext_o.cpp:240 69 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 370 369 371 24 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [602])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 371 370 374 24 (set (reg:DI 37 r8)
        (reg:DI 5 di [603])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 374 371 375 24 (set (reg:DI 4 si)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 375 374 376 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [606])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(call_insn 376 375 377 24 (call (mem:QI (symbol_ref:DI ("_Z9get_phasePfPP8_IO_FILEP16Data_file_headerP13InFile_structlP7IOFilesiP12Procpar_info") [flags 0x3]  <function_decl 0x2b27d5468d00 get_phase>) [0 get_phase S1 A8])
        (const_int 16 [0x10])) ge2fitman_fmtext_o.cpp:240 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 377 376 378 24 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:240 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 378 377 379 24 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:241 93 {*movqi_internal}
     (nil))
(insn 379 378 380 24 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b27d5543b48 *.LC10>)) ge2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(call_insn 380 379 1232 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:242 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1232 380 1233 24 (set (pc)
        (label_ref 475)) 636 {jump}
     (nil)
 -> 475)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1233 1232 383)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 383 1233 384 25 15 "" [1 uses])
(note 384 383 385 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 385 384 386 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:249 7 {*cmpsi_1}
     (nil))
(jump_insn 386 385 387 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 430)
            (pc))) ge2fitman_fmtext_o.cpp:249 596 {*jcc_1}
     (nil)
 -> 430)
;;  succ:       26 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 196 608
(note 387 386 388 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 388 387 389 26 (set (reg/f:DI 0 ax [608])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 389 388 390 26 (set (reg:SI 0 ax [orig:196 D.25096 ] [196])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [608])
                (const_int 508 [0x1fc])) [0 procpar_info_167(D)->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
(insn 390 389 391 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:196 D.25096 ] [196])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:249 7 {*cmpsi_1}
     (nil))
(jump_insn 391 390 392 26 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 398)
            (pc))) ge2fitman_fmtext_o.cpp:249 596 {*jcc_1}
     (nil)
 -> 398)
;;  succ:       28
;;              27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 197 198 609
(note 392 391 393 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 393 392 394 27 (set (reg/f:DI 0 ax [609])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 394 393 395 27 (parallel [
            (set (reg/f:DI 0 ax [orig:197 D.25110 ] [197])
                (plus:DI (reg/f:DI 0 ax [609])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:249 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 395 394 396 27 (set (reg:SI 0 ax [orig:198 D.25096 ] [198])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:197 D.25110 ] [197])
                (const_int 508 [0x1fc])) [0 _177->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
(insn 396 395 397 27 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:198 D.25096 ] [198])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:249 7 {*cmpsi_1}
     (nil))
(jump_insn 397 396 398 27 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 430)
            (pc))) ge2fitman_fmtext_o.cpp:249 596 {*jcc_1}
     (nil)
 -> 430)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;;              27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 199 200 201 202 610 611 612 613 614 615 616 617
(code_label 398 397 399 28 18 "" [1 uses])
(note 399 398 400 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 400 399 401 28 (set (reg/f:DI 0 ax [610])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 401 400 402 28 (parallel [
            (set (reg/f:DI 0 ax [orig:199 D.25110 ] [199])
                (plus:DI (reg/f:DI 0 ax [610])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:251 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 402 401 403 28 (set (reg:SI 0 ax [orig:200 D.25096 ] [200])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:199 D.25110 ] [199])
                (const_int 508 [0x1fc])) [0 _179->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:251 90 {*movsi_internal}
     (nil))
(insn 403 402 404 28 (set (reg:DI 0 ax [orig:201 D.25097 ] [201])
        (sign_extend:DI (reg:SI 0 ax [orig:200 D.25096 ] [200]))) ge2fitman_fmtext_o.cpp:251 142 {*extendsidi2_rex64}
     (nil))
(insn 404 403 405 28 (parallel [
            (set (reg:DI 0 ax [orig:202 D.25097 ] [202])
                (ashift:DI (reg:DI 0 ax [orig:201 D.25097 ] [201])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:251 497 {*ashldi3_1}
     (nil))
(insn 405 404 406 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:202 D.25097 ] [202])) ge2fitman_fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn 406 405 407 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:251 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 407 406 408 28 (set (reg/f:DI 0 ax [611])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:251 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [611])
        (nil)))
(insn 408 407 409 28 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])
        (reg/f:DI 0 ax [611])) ge2fitman_fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 409 408 410 28 (set (reg:DI 37 r8 [612])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 410 409 411 28 (set (reg:DI 5 di [613])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 411 410 412 28 (set (reg:DI 2 cx [614])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 412 411 413 28 (set (reg:DI 1 dx [615])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 413 412 414 28 (set (reg:DI 0 ax [616])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 414 413 415 28 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 415 414 416 28 (set (reg:SI 4 si [617])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 swap_bytes+0 S4 A64])) ge2fitman_fmtext_o.cpp:253 90 {*movsi_internal}
     (nil))
(insn 416 415 417 28 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 4 si [617])) ge2fitman_fmtext_o.cpp:253 69 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 417 416 418 28 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [612])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 418 417 421 28 (set (reg:DI 37 r8)
        (reg:DI 5 di [613])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 421 418 422 28 (set (reg:DI 4 si)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 422 421 423 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [616])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(call_insn 423 422 424 28 (call (mem:QI (symbol_ref:DI ("_Z9get_phasePfPP8_IO_FILEP16Data_file_headerP13InFile_structlP7IOFilesiP12Procpar_info") [flags 0x3]  <function_decl 0x2b27d5468d00 get_phase>) [0 get_phase S1 A8])
        (const_int 16 [0x10])) ge2fitman_fmtext_o.cpp:253 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 424 423 425 28 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:253 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 425 424 426 28 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:254 93 {*movqi_internal}
     (nil))
(insn 426 425 427 28 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b27d5543b48 *.LC10>)) ge2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(call_insn 427 426 1234 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:255 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1234 427 1235 28 (set (pc)
        (label_ref 475)) ge2fitman_fmtext_o.cpp:255 636 {jump}
     (nil)
 -> 475)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1235 1234 430)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;;              27
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 203 204 205 206 207 208 209 210 211 212 213 214 618 619 620 621 622 623 624 625 626 627 628 629
(code_label 430 1235 431 29 17 "" [2 uses])
(note 431 430 432 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 432 431 433 29 (set (reg:SI 0 ax [618])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:261 90 {*movsi_internal}
     (nil))
(insn 433 432 1281 29 (set (reg:DI 0 ax [orig:203 D.25097 ] [203])
        (sign_extend:DI (reg:SI 0 ax [618]))) ge2fitman_fmtext_o.cpp:261 142 {*extendsidi2_rex64}
     (nil))
(insn 1281 433 434 29 (set (reg:DI 0 ax [orig:204 D.25097 ] [204])
        (reg:DI 0 ax [orig:203 D.25097 ] [203])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(insn 434 1281 1282 29 (parallel [
            (set (reg:DI 0 ax [orig:204 D.25097 ] [204])
                (ashift:DI (reg:DI 0 ax [orig:204 D.25097 ] [204])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:261 497 {*ashldi3_1}
     (nil))
(insn 1282 434 435 29 (set (reg:DI 1 dx [orig:204 D.25097 ] [204])
        (reg:DI 0 ax [orig:204 D.25097 ] [204])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(insn 435 1282 436 29 (set (reg/f:DI 0 ax [619])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(insn 436 435 437 29 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.25110 ] [205])
                (plus:DI (reg/f:DI 0 ax [619])
                    (reg:DI 1 dx [orig:204 D.25097 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:261 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:204 D.25097 ] [204]))
        (nil)))
(insn 437 436 438 29 (set (reg:SI 0 ax [orig:206 D.25096 ] [206])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:205 D.25110 ] [205])
                (const_int 508 [0x1fc])) [0 _187->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:261 90 {*movsi_internal}
     (nil))
(insn 438 437 439 29 (set (reg:DI 0 ax [orig:207 D.25097 ] [207])
        (sign_extend:DI (reg:SI 0 ax [orig:206 D.25096 ] [206]))) ge2fitman_fmtext_o.cpp:261 142 {*extendsidi2_rex64}
     (nil))
(insn 439 438 440 29 (parallel [
            (set (reg:DI 0 ax [orig:208 D.25097 ] [208])
                (ashift:DI (reg:DI 0 ax [orig:207 D.25097 ] [207])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:261 497 {*ashldi3_1}
     (nil))
(insn 440 439 441 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:208 D.25097 ] [208])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(call_insn 441 440 442 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:261 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 442 441 443 29 (set (reg/f:DI 0 ax [620])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [620])
        (nil)))
(insn 443 442 444 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])
        (reg/f:DI 0 ax [620])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(insn 444 443 445 29 (set (reg:SI 0 ax [621])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:266 90 {*movsi_internal}
     (nil))
(insn 445 444 1283 29 (set (reg:DI 0 ax [orig:209 D.25097 ] [209])
        (sign_extend:DI (reg:SI 0 ax [621]))) ge2fitman_fmtext_o.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 1283 445 446 29 (set (reg:DI 0 ax [orig:210 D.25097 ] [210])
        (reg:DI 0 ax [orig:209 D.25097 ] [209])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 446 1283 1284 29 (parallel [
            (set (reg:DI 0 ax [orig:210 D.25097 ] [210])
                (ashift:DI (reg:DI 0 ax [orig:210 D.25097 ] [210])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:266 497 {*ashldi3_1}
     (nil))
(insn 1284 446 447 29 (set (reg:DI 1 dx [orig:210 D.25097 ] [210])
        (reg:DI 0 ax [orig:210 D.25097 ] [210])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 447 1284 448 29 (set (reg/f:DI 0 ax [622])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 448 447 449 29 (parallel [
            (set (reg/f:DI 0 ax [orig:211 D.25110 ] [211])
                (plus:DI (reg/f:DI 0 ax [622])
                    (reg:DI 1 dx [orig:210 D.25097 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:266 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:210 D.25097 ] [210]))
        (nil)))
(insn 449 448 450 29 (set (reg:SI 0 ax [orig:212 D.25096 ] [212])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:211 D.25110 ] [211])
                (const_int 508 [0x1fc])) [0 _194->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:266 90 {*movsi_internal}
     (nil))
(insn 450 449 451 29 (set (reg:DI 0 ax [orig:213 D.25097 ] [213])
        (sign_extend:DI (reg:SI 0 ax [orig:212 D.25096 ] [212]))) ge2fitman_fmtext_o.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 451 450 452 29 (parallel [
            (set (reg:DI 0 ax [orig:214 D.25097 ] [214])
                (ashift:DI (reg:DI 0 ax [orig:213 D.25097 ] [213])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:266 497 {*ashldi3_1}
     (nil))
(insn 452 451 453 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:214 D.25097 ] [214])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(call_insn 453 452 454 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:266 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 454 453 455 29 (set (reg/f:DI 0 ax [623])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [623])
        (nil)))
(insn 455 454 456 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])
        (reg/f:DI 0 ax [623])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 456 455 457 29 (set (reg:DI 37 r8 [624])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 457 456 458 29 (set (reg:DI 5 di [625])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 458 457 459 29 (set (reg:DI 2 cx [626])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 459 458 460 29 (set (reg:DI 1 dx [627])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 460 459 461 29 (set (reg:DI 0 ax [628])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 461 460 462 29 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 462 461 463 29 (set (reg:SI 4 si [629])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 swap_bytes+0 S4 A64])) ge2fitman_fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 463 462 464 29 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 4 si [629])) ge2fitman_fmtext_o.cpp:269 69 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 464 463 465 29 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [624])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 465 464 468 29 (set (reg:DI 37 r8)
        (reg:DI 5 di [625])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 468 465 469 29 (set (reg:DI 4 si)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 469 468 470 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [628])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(call_insn 470 469 471 29 (call (mem:QI (symbol_ref:DI ("_Z9get_phasePfPP8_IO_FILEP16Data_file_headerP13InFile_structlP7IOFilesiP12Procpar_info") [flags 0x3]  <function_decl 0x2b27d5468d00 get_phase>) [0 get_phase S1 A8])
        (const_int 16 [0x10])) ge2fitman_fmtext_o.cpp:269 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 471 470 472 29 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:269 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 472 471 473 29 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:270 93 {*movqi_internal}
     (nil))
(insn 473 472 474 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b27d5543b48 *.LC10>)) ge2fitman_fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(call_insn 474 473 475 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:271 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;;              24 [100.0%] 
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 475 474 476 30 16 "" [2 uses])
(note 476 475 477 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 477 476 1236 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:301 90 {*movsi_internal}
     (nil))
(jump_insn 1236 477 1237 30 (set (pc)
        (label_ref 1182)) ge2fitman_fmtext_o.cpp:301 636 {jump}
     (nil)
 -> 1182)
;;  succ:       77 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1237 1236 1190)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1190 1237 480 31 49 "" [1 uses])
(note 480 1190 481 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 481 480 482 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:325 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 482 481 483 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 531)
            (pc))) ge2fitman_fmtext_o.cpp:325 596 {*jcc_1}
     (nil)
 -> 531)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644
(note 483 482 484 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 484 483 485 32 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b27d5543be0 *.LC11>)) ge2fitman_fmtext_o.cpp:326 89 {*movdi_internal}
     (nil))
(call_insn 485 484 486 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:326 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 486 485 487 32 (set (reg:DI 1 dx [630])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 487 486 488 32 (set (reg:DI 0 ax [631])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 488 487 489 32 (parallel [
            (set (reg:DI 1 dx [orig:219 D.25100 ] [219])
                (plus:DI (reg:DI 1 dx [630])
                    (reg:DI 0 ax [631])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:331 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 baseline_set_size+0 S8 A64]))
        (nil)))
(insn 489 488 490 32 (set (reg:DI 0 ax [632])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:332 89 {*movdi_internal}
     (nil))
(insn 490 489 491 32 (parallel [
            (set (reg:DI 1 dx [orig:220 D.25100 ] [220])
                (plus:DI (reg:DI 1 dx [orig:219 D.25100 ] [219])
                    (reg:DI 0 ax [632])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:332 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg:DI 1 dx [orig:219 D.25100 ] [219])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 unsup_set_size+0 S8 A64]))
        (nil)))
(insn 491 490 492 32 (set (reg:SI 0 ax [633])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 dataSizeChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:332 90 {*movsi_internal}
     (nil))
(insn 492 491 493 32 (parallel [
            (set (reg:SI 0 ax [orig:221 D.25096 ] [221])
                (mult:SI (reg:SI 0 ax [633])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:332 306 {*mulsi3_1}
     (nil))
(insn 493 492 494 32 (set (reg:DI 0 ax [orig:222 D.25100 ] [222])
        (sign_extend:DI (reg:SI 0 ax [orig:221 D.25096 ] [221]))) ge2fitman_fmtext_o.cpp:332 142 {*extendsidi2_rex64}
     (nil))
(insn 494 493 495 32 (parallel [
            (set (reg:DI 2 cx [orig:223 D.25100 ] [223])
                (plus:DI (reg:DI 1 dx [orig:220 D.25100 ] [220])
                    (reg:DI 0 ax [orig:222 D.25100 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:332 221 {*adddi_1}
     (nil))
(insn 495 494 496 32 (set (reg:SI 0 ax [634])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:331 90 {*movsi_internal}
     (nil))
(insn 496 495 497 32 (set (reg:DI 0 ax [orig:224 D.25097 ] [224])
        (sign_extend:DI (reg:SI 0 ax [634]))) ge2fitman_fmtext_o.cpp:331 142 {*extendsidi2_rex64}
     (nil))
(insn 497 496 498 32 (parallel [
            (set (reg:DI 1 dx [orig:225 D.25097 ] [225])
                (ashift:DI (reg:DI 0 ax [orig:224 D.25097 ] [224])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:331 497 {*ashldi3_1}
     (nil))
(insn 498 497 499 32 (set (reg/f:DI 0 ax [635])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 499 498 500 32 (parallel [
            (set (reg/f:DI 0 ax [orig:226 D.25111 ] [226])
                (plus:DI (reg/f:DI 0 ax [635])
                    (reg:DI 1 dx [orig:225 D.25097 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:331 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:225 D.25097 ] [225]))
        (nil)))
(insn 500 499 501 32 (set (reg/f:DI 0 ax [orig:227 D.25112 ] [227])
        (mem/f:DI (reg/f:DI 0 ax [orig:226 D.25111 ] [226]) [0 *_212+0 S8 A64])) ge2fitman_fmtext_o.cpp:332 89 {*movdi_internal}
     (nil))
(insn 501 500 502 32 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:332 90 {*movsi_internal}
     (nil))
(insn 502 501 503 32 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:223 D.25100 ] [223])) ge2fitman_fmtext_o.cpp:332 89 {*movdi_internal}
     (nil))
(insn 503 502 504 32 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:227 D.25112 ] [227])) ge2fitman_fmtext_o.cpp:332 89 {*movdi_internal}
     (nil))
(call_insn 504 503 505 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b27d4102a00 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:332 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 505 504 506 32 (set (reg:SI 0 ax [636])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 506 505 507 32 (set (reg:DI 1 dx [orig:228 D.25097 ] [228])
        (sign_extend:DI (reg:SI 0 ax [636]))) ge2fitman_fmtext_o.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 507 506 508 32 (set (reg:DI 0 ax [637])
        (reg:DI 1 dx [orig:228 D.25097 ] [228])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 508 507 509 32 (parallel [
            (set (reg:DI 0 ax [637])
                (ashift:DI (reg:DI 0 ax [637])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 509 508 510 32 (parallel [
            (set (reg:DI 0 ax [637])
                (plus:DI (reg:DI 0 ax [637])
                    (reg:DI 1 dx [orig:228 D.25097 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:228 D.25097 ] [228])
            (const_int 5 [0x5]))
        (nil)))
(insn 510 509 511 32 (parallel [
            (set (reg:DI 0 ax [638])
                (ashift:DI (reg:DI 0 ax [637])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 511 510 512 32 (set (reg:DI 0 ax [637])
        (reg:DI 0 ax [638])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 512 511 513 32 (set (reg:DI 1 dx [orig:229 D.25097 ] [229])
        (reg:DI 0 ax [637])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 513 512 514 32 (set (reg/f:DI 0 ax [639])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 514 513 515 32 (parallel [
            (set (reg/f:DI 0 ax [orig:230 D.25108 ] [230])
                (plus:DI (reg/f:DI 0 ax [639])
                    (reg:DI 1 dx [orig:229 D.25097 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:229 D.25097 ] [229]))
        (nil)))
(insn 515 514 516 32 (set (reg:SI 2 cx [orig:231 D.25096 ] [231])
        (mem/j:SI (reg/f:DI 0 ax [orig:230 D.25108 ] [230]) [0 _216->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 516 515 517 32 (set (reg:SI 0 ax [640])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 517 516 518 32 (set (reg:DI 1 dx [orig:232 D.25097 ] [232])
        (sign_extend:DI (reg:SI 0 ax [640]))) ge2fitman_fmtext_o.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 518 517 519 32 (set (reg:DI 0 ax [641])
        (reg:DI 1 dx [orig:232 D.25097 ] [232])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 519 518 520 32 (parallel [
            (set (reg:DI 0 ax [641])
                (ashift:DI (reg:DI 0 ax [641])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 520 519 521 32 (parallel [
            (set (reg:DI 0 ax [641])
                (plus:DI (reg:DI 0 ax [641])
                    (reg:DI 1 dx [orig:232 D.25097 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:232 D.25097 ] [232])
            (const_int 5 [0x5]))
        (nil)))
(insn 521 520 522 32 (parallel [
            (set (reg:DI 0 ax [642])
                (ashift:DI (reg:DI 0 ax [641])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 522 521 523 32 (set (reg:DI 0 ax [641])
        (reg:DI 0 ax [642])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 523 522 524 32 (set (reg:DI 1 dx [orig:233 D.25097 ] [233])
        (reg:DI 0 ax [641])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 524 523 525 32 (set (reg/f:DI 0 ax [643])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 525 524 526 32 (parallel [
            (set (reg/f:DI 0 ax [orig:234 D.25108 ] [234])
                (plus:DI (reg/f:DI 0 ax [643])
                    (reg:DI 1 dx [orig:233 D.25097 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:233 D.25097 ] [233]))
        (nil)))
(insn 526 525 527 32 (set (reg:SI 0 ax [orig:235 D.25096 ] [235])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:234 D.25108 ] [234])
                (const_int 4 [0x4])) [0 _220->num_unsup_sets+0 S4 A32])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 527 526 1286 32 (parallel [
            (set (reg:SI 2 cx [644])
                (minus:SI (reg:SI 2 cx [644])
                    (reg:SI 0 ax [orig:235 D.25096 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 263 {*subsi_1}
     (nil))
(insn 1286 527 528 32 (set (reg:SI 0 ax [644])
        (reg:SI 2 cx [644])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 528 1286 1238 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [644])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(jump_insn 1238 528 1239 32 (set (pc)
        (label_ref 574)) 636 {jump}
     (nil)
 -> 574)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1239 1238 531)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 645 646 647 648 649 650 651 652 653 654 655 656 657 658
(code_label 531 1239 532 33 20 "" [1 uses])
(note 532 531 533 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 533 532 534 33 (set (reg:DI 1 dx [645])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 534 533 535 33 (set (reg:DI 0 ax [646])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 535 534 536 33 (parallel [
            (set (reg:DI 1 dx [orig:236 D.25100 ] [236])
                (plus:DI (reg:DI 1 dx [645])
                    (reg:DI 0 ax [646])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 baseline_set_size+0 S8 A64]))
        (nil)))
(insn 536 535 537 33 (set (reg:SI 0 ax [647])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 dataSizeChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:347 90 {*movsi_internal}
     (nil))
(insn 537 536 538 33 (parallel [
            (set (reg:SI 0 ax [orig:237 D.25096 ] [237])
                (mult:SI (reg:SI 0 ax [647])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 306 {*mulsi3_1}
     (nil))
(insn 538 537 539 33 (set (reg:DI 0 ax [orig:238 D.25100 ] [238])
        (sign_extend:DI (reg:SI 0 ax [orig:237 D.25096 ] [237]))) ge2fitman_fmtext_o.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 539 538 540 33 (parallel [
            (set (reg:DI 2 cx [orig:239 D.25100 ] [239])
                (plus:DI (reg:DI 1 dx [orig:236 D.25100 ] [236])
                    (reg:DI 0 ax [orig:238 D.25100 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 221 {*adddi_1}
     (nil))
(insn 540 539 541 33 (set (reg:SI 0 ax [648])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:347 90 {*movsi_internal}
     (nil))
(insn 541 540 542 33 (set (reg:DI 0 ax [orig:240 D.25097 ] [240])
        (sign_extend:DI (reg:SI 0 ax [648]))) ge2fitman_fmtext_o.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 542 541 543 33 (parallel [
            (set (reg:DI 1 dx [orig:241 D.25097 ] [241])
                (ashift:DI (reg:DI 0 ax [orig:240 D.25097 ] [240])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 497 {*ashldi3_1}
     (nil))
(insn 543 542 544 33 (set (reg/f:DI 0 ax [649])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 544 543 545 33 (parallel [
            (set (reg/f:DI 0 ax [orig:242 D.25111 ] [242])
                (plus:DI (reg/f:DI 0 ax [649])
                    (reg:DI 1 dx [orig:241 D.25097 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:241 D.25097 ] [241]))
        (nil)))
(insn 545 544 546 33 (set (reg/f:DI 0 ax [orig:243 D.25112 ] [243])
        (mem/f:DI (reg/f:DI 0 ax [orig:242 D.25111 ] [242]) [0 *_229+0 S8 A64])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 546 545 547 33 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:347 90 {*movsi_internal}
     (nil))
(insn 547 546 548 33 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:239 D.25100 ] [239])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 548 547 549 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:243 D.25112 ] [243])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(call_insn 549 548 550 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b27d4102a00 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:347 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 550 549 551 33 (set (reg:SI 0 ax [650])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 551 550 552 33 (set (reg:DI 1 dx [orig:244 D.25097 ] [244])
        (sign_extend:DI (reg:SI 0 ax [650]))) ge2fitman_fmtext_o.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 552 551 553 33 (set (reg:DI 0 ax [651])
        (reg:DI 1 dx [orig:244 D.25097 ] [244])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 553 552 554 33 (parallel [
            (set (reg:DI 0 ax [651])
                (ashift:DI (reg:DI 0 ax [651])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 554 553 555 33 (parallel [
            (set (reg:DI 0 ax [651])
                (plus:DI (reg:DI 0 ax [651])
                    (reg:DI 1 dx [orig:244 D.25097 ] [244])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:244 D.25097 ] [244])
            (const_int 5 [0x5]))
        (nil)))
(insn 555 554 556 33 (parallel [
            (set (reg:DI 0 ax [652])
                (ashift:DI (reg:DI 0 ax [651])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 556 555 557 33 (set (reg:DI 0 ax [651])
        (reg:DI 0 ax [652])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 557 556 558 33 (set (reg:DI 1 dx [orig:245 D.25097 ] [245])
        (reg:DI 0 ax [651])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 558 557 559 33 (set (reg/f:DI 0 ax [653])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 559 558 560 33 (parallel [
            (set (reg/f:DI 0 ax [orig:246 D.25108 ] [246])
                (plus:DI (reg/f:DI 0 ax [653])
                    (reg:DI 1 dx [orig:245 D.25097 ] [245])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:245 D.25097 ] [245]))
        (nil)))
(insn 560 559 561 33 (set (reg:SI 2 cx [orig:247 D.25096 ] [247])
        (mem/j:SI (reg/f:DI 0 ax [orig:246 D.25108 ] [246]) [0 _233->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 561 560 562 33 (set (reg:SI 0 ax [654])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 562 561 563 33 (set (reg:DI 1 dx [orig:248 D.25097 ] [248])
        (sign_extend:DI (reg:SI 0 ax [654]))) ge2fitman_fmtext_o.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 563 562 564 33 (set (reg:DI 0 ax [655])
        (reg:DI 1 dx [orig:248 D.25097 ] [248])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 564 563 565 33 (parallel [
            (set (reg:DI 0 ax [655])
                (ashift:DI (reg:DI 0 ax [655])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 565 564 566 33 (parallel [
            (set (reg:DI 0 ax [655])
                (plus:DI (reg:DI 0 ax [655])
                    (reg:DI 1 dx [orig:248 D.25097 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:248 D.25097 ] [248])
            (const_int 5 [0x5]))
        (nil)))
(insn 566 565 567 33 (parallel [
            (set (reg:DI 0 ax [656])
                (ashift:DI (reg:DI 0 ax [655])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 567 566 568 33 (set (reg:DI 0 ax [655])
        (reg:DI 0 ax [656])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 568 567 569 33 (set (reg:DI 1 dx [orig:249 D.25097 ] [249])
        (reg:DI 0 ax [655])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 569 568 570 33 (set (reg/f:DI 0 ax [657])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 570 569 571 33 (parallel [
            (set (reg/f:DI 0 ax [orig:250 D.25108 ] [250])
                (plus:DI (reg/f:DI 0 ax [657])
                    (reg:DI 1 dx [orig:249 D.25097 ] [249])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:249 D.25097 ] [249]))
        (nil)))
(insn 571 570 572 33 (set (reg:SI 0 ax [orig:251 D.25096 ] [251])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:250 D.25108 ] [250])
                (const_int 4 [0x4])) [0 _237->num_unsup_sets+0 S4 A32])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 572 571 1288 33 (parallel [
            (set (reg:SI 2 cx [658])
                (minus:SI (reg:SI 2 cx [658])
                    (reg:SI 0 ax [orig:251 D.25096 ] [251])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 263 {*subsi_1}
     (nil))
(insn 1288 572 573 33 (set (reg:SI 0 ax [658])
        (reg:SI 2 cx [658])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 573 1288 574 33 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [658])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;;              32 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 574 573 575 34 21 "" [1 uses])
(note 575 574 576 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 576 575 1240 34 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:364 90 {*movsi_internal}
     (nil))
(jump_insn 1240 576 1241 34 (set (pc)
        (label_ref 1174)) ge2fitman_fmtext_o.cpp:364 636 {jump}
     (nil)
 -> 1174)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1241 1240 1176)
;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 252 253 254 255 256 659 660
(code_label 1176 1241 579 35 48 "" [1 uses])
(note 579 1176 580 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 35 (set (reg:SI 0 ax [659])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:367 90 {*movsi_internal}
     (nil))
(insn 581 580 582 35 (set (reg:DI 0 ax [orig:252 D.25097 ] [252])
        (sign_extend:DI (reg:SI 0 ax [659]))) ge2fitman_fmtext_o.cpp:367 142 {*extendsidi2_rex64}
     (nil))
(insn 582 581 583 35 (parallel [
            (set (reg:DI 1 dx [orig:253 D.25097 ] [253])
                (ashift:DI (reg:DI 0 ax [orig:252 D.25097 ] [252])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:367 497 {*ashldi3_1}
     (nil))
(insn 583 582 584 35 (set (reg/f:DI 0 ax [660])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 584 583 585 35 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.25111 ] [254])
                (plus:DI (reg/f:DI 0 ax [660])
                    (reg:DI 1 dx [orig:253 D.25097 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:367 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:253 D.25097 ] [253]))
        (nil)))
(insn 585 584 586 35 (set (reg/f:DI 0 ax [orig:255 D.25112 ] [255])
        (mem/f:DI (reg/f:DI 0 ax [orig:254 D.25111 ] [254]) [0 *_243+0 S8 A64])) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 586 585 587 35 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:255 D.25112 ] [255])) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(call_insn 587 586 588 35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ftell") [flags 0x41]  <function_decl 0x2b27d4102b00 ftell>) [0 ftell S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:367 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 588 587 589 35 (set (reg:DI 0 ax [orig:256 D.25100 ] [256])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 589 588 590 35 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:256 D.25100 ] [256])) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 590 589 591 35 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b27d5543c78 *.LC12>)) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 591 590 592 35 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:367 93 {*movqi_internal}
     (nil))
(call_insn 592 591 593 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b27d3ecee00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:367 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 593 592 594 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:377 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 594 593 595 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 629)
            (pc))) ge2fitman_fmtext_o.cpp:377 596 {*jcc_1}
     (nil)
 -> 629)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 661 662 663 664 665 666 667 668 669 670
(note 595 594 596 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 596 595 597 36 (set (reg:SI 0 ax [661])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:380 90 {*movsi_internal}
     (nil))
(insn 597 596 598 36 (set (reg:DI 0 ax [orig:257 D.25097 ] [257])
        (sign_extend:DI (reg:SI 0 ax [661]))) ge2fitman_fmtext_o.cpp:380 142 {*extendsidi2_rex64}
     (nil))
(insn 598 597 599 36 (parallel [
            (set (reg:DI 1 dx [orig:258 D.25097 ] [258])
                (ashift:DI (reg:DI 0 ax [orig:257 D.25097 ] [257])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 497 {*ashldi3_1}
     (nil))
(insn 599 598 600 36 (set (reg/f:DI 0 ax [662])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 600 599 601 36 (parallel [
            (set (reg/f:DI 0 ax [orig:259 D.25111 ] [259])
                (plus:DI (reg/f:DI 0 ax [662])
                    (reg:DI 1 dx [orig:258 D.25097 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:258 D.25097 ] [258]))
        (nil)))
(insn 601 600 602 36 (set (reg/f:DI 1 dx [orig:260 D.25112 ] [260])
        (mem/f:DI (reg/f:DI 0 ax [orig:259 D.25111 ] [259]) [0 *_249+0 S8 A64])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 602 601 603 36 (set (reg:SI 0 ax [663])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:380 90 {*movsi_internal}
     (nil))
(insn 603 602 1289 36 (set (reg:DI 0 ax [orig:261 D.25097 ] [261])
        (sign_extend:DI (reg:SI 0 ax [663]))) ge2fitman_fmtext_o.cpp:380 142 {*extendsidi2_rex64}
     (nil))
(insn 1289 603 604 36 (set (reg:DI 0 ax [orig:262 D.25097 ] [262])
        (reg:DI 0 ax [orig:261 D.25097 ] [261])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 604 1289 1290 36 (parallel [
            (set (reg:DI 0 ax [orig:262 D.25097 ] [262])
                (ashift:DI (reg:DI 0 ax [orig:262 D.25097 ] [262])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 497 {*ashldi3_1}
     (nil))
(insn 1290 604 605 36 (set (reg:DI 2 cx [orig:262 D.25097 ] [262])
        (reg:DI 0 ax [orig:262 D.25097 ] [262])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 605 1290 606 36 (set (reg/f:DI 0 ax [664])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 606 605 607 36 (parallel [
            (set (reg/f:DI 0 ax [orig:263 D.25099 ] [263])
                (plus:DI (reg/f:DI 0 ax [664])
                    (reg:DI 2 cx [orig:262 D.25097 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:262 D.25097 ] [262]))
        (nil)))
(insn 607 606 608 36 (set (reg:DI 0 ax [orig:264 D.25100 ] [264])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:263 D.25099 ] [263])
                (const_int 16 [0x10])) [0 _253->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 608 607 609 36 (parallel [
            (set (reg:DI 0 ax [orig:265 D.25100 ] [265])
                (ashift:DI (reg:DI 0 ax [orig:264 D.25100 ] [264])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 497 {*ashldi3_1}
     (nil))
(insn 609 608 610 36 (set (reg:DI 5 di [orig:266 D.25097 ] [266])
        (reg:DI 0 ax [orig:265 D.25100 ] [265])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 610 609 611 36 (set (reg:SI 0 ax [665])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:379 90 {*movsi_internal}
     (nil))
(insn 611 610 1291 36 (set (reg:DI 0 ax [orig:267 D.25097 ] [267])
        (sign_extend:DI (reg:SI 0 ax [665]))) ge2fitman_fmtext_o.cpp:379 142 {*extendsidi2_rex64}
     (nil))
(insn 1291 611 612 36 (set (reg:DI 0 ax [orig:268 D.25097 ] [268])
        (reg:DI 0 ax [orig:267 D.25097 ] [267])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 612 1291 1292 36 (parallel [
            (set (reg:DI 0 ax [orig:268 D.25097 ] [268])
                (ashift:DI (reg:DI 0 ax [orig:268 D.25097 ] [268])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 497 {*ashldi3_1}
     (nil))
(insn 1292 612 613 36 (set (reg:DI 2 cx [orig:268 D.25097 ] [268])
        (reg:DI 0 ax [orig:268 D.25097 ] [268])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 613 1292 614 36 (set (reg/f:DI 0 ax [666])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 614 613 615 36 (parallel [
            (set (reg/f:DI 0 ax [orig:269 D.25099 ] [269])
                (plus:DI (reg/f:DI 0 ax [666])
                    (reg:DI 2 cx [orig:268 D.25097 ] [268])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:268 D.25097 ] [268]))
        (nil)))
(insn 615 614 1293 36 (set (reg:DI 0 ax [orig:270 D.25100 ] [270])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:269 D.25099 ] [269])
                (const_int 24 [0x18])) [0 _259->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1293 615 616 36 (set (reg:DI 2 cx [667])
        (reg:DI 0 ax [orig:270 D.25100 ] [270])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 616 1293 617 36 (parallel [
            (set (reg:DI 2 cx [667])
                (lshiftrt:DI (reg:DI 2 cx [667])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 531 {*lshrdi3_1}
     (nil))
(insn 617 616 618 36 (parallel [
            (set (reg:DI 0 ax [668])
                (plus:DI (reg:DI 0 ax [orig:270 D.25100 ] [270])
                    (reg:DI 2 cx [667])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 221 {*adddi_1}
     (nil))
(insn 618 617 619 36 (parallel [
            (set (reg:DI 0 ax [669])
                (ashiftrt:DI (reg:DI 0 ax [668])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 532 {*ashrdi3_1}
     (nil))
(insn 619 618 620 36 (set (reg:DI 0 ax [orig:271 D.25100 ] [271])
        (reg:DI 0 ax [669])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 620 619 621 36 (set (reg:DI 4 si [orig:272 D.25097 ] [272])
        (reg:DI 0 ax [orig:271 D.25100 ] [271])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 621 620 622 36 (set (reg:DI 0 ax [670])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 622 621 623 36 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:260 D.25112 ] [260])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 623 622 625 36 (set (reg:DI 1 dx)
        (reg:DI 5 di [orig:266 D.25097 ] [266])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 625 623 626 36 (set (reg:DI 5 di)
        (reg:DI 0 ax [670])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(call_insn 626 625 627 36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b27d4102500 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:380 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 627 626 628 36 (set (reg:DI 0 ax [orig:273 D.25097 ] [273])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 628 627 629 36 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 k+0 S4 A32])
        (reg:SI 0 ax [orig:273 D.25097 ] [273])) ge2fitman_fmtext_o.cpp:380 90 {*movsi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 274 275 276 277 278 279 671 672 673
(code_label 629 628 630 37 23 "" [1 uses])
(note 630 629 631 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 631 630 632 37 (set (reg:SI 0 ax [671])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 k+0 S4 A32])) ge2fitman_fmtext_o.cpp:383 90 {*movsi_internal}
     (nil))
(insn 632 631 633 37 (set (reg:DI 0 ax [orig:274 D.25100 ] [274])
        (sign_extend:DI (reg:SI 0 ax [671]))) ge2fitman_fmtext_o.cpp:383 142 {*extendsidi2_rex64}
     (nil))
(insn 633 632 634 37 (set (reg:SI 1 dx [672])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:383 90 {*movsi_internal}
     (nil))
(insn 634 633 1295 37 (set (reg:DI 1 dx [orig:275 D.25097 ] [275])
        (sign_extend:DI (reg:SI 1 dx [672]))) ge2fitman_fmtext_o.cpp:383 142 {*extendsidi2_rex64}
     (nil))
(insn 1295 634 635 37 (set (reg:DI 2 cx [orig:276 D.25097 ] [276])
        (reg:DI 1 dx [orig:275 D.25097 ] [275])) ge2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 635 1295 636 37 (parallel [
            (set (reg:DI 2 cx [orig:276 D.25097 ] [276])
                (ashift:DI (reg:DI 2 cx [orig:276 D.25097 ] [276])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:383 497 {*ashldi3_1}
     (nil))
(insn 636 635 637 37 (set (reg/f:DI 1 dx [673])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 637 636 638 37 (parallel [
            (set (reg/f:DI 1 dx [orig:277 D.25099 ] [277])
                (plus:DI (reg/f:DI 1 dx [673])
                    (reg:DI 2 cx [orig:276 D.25097 ] [276])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:383 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:276 D.25097 ] [276]))
        (nil)))
(insn 638 637 639 37 (set (reg:DI 1 dx [orig:278 D.25100 ] [278])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:277 D.25099 ] [277])
                (const_int 16 [0x10])) [0 _269->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 639 638 640 37 (parallel [
            (set (reg:DI 1 dx [orig:279 D.25100 ] [279])
                (ashift:DI (reg:DI 1 dx [orig:278 D.25100 ] [278])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:383 497 {*ashldi3_1}
     (nil))
(insn 640 639 641 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:274 D.25100 ] [274])
            (reg:DI 1 dx [orig:279 D.25100 ] [279]))) ge2fitman_fmtext_o.cpp:383 8 {*cmpdi_1}
     (nil))
(jump_insn 641 640 642 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 653)
            (pc))) ge2fitman_fmtext_o.cpp:383 596 {*jcc_1}
     (nil)
 -> 653)
;;  succ:       38 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 280 674 675 676 677
(note 642 641 643 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 643 642 644 38 (set (reg:SI 0 ax [675])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:384 90 {*movsi_internal}
     (nil))
(insn 644 643 1297 38 (set (reg:DI 0 ax [674])
        (sign_extend:DI (reg:SI 0 ax [675]))) ge2fitman_fmtext_o.cpp:384 142 {*extendsidi2_rex64}
     (nil))
(insn 1297 644 645 38 (set (reg:DI 0 ax [676])
        (reg:DI 0 ax [674])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(insn 645 1297 1298 38 (parallel [
            (set (reg:DI 0 ax [676])
                (ashift:DI (reg:DI 0 ax [676])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:384 497 {*ashldi3_1}
     (nil))
(insn 1298 645 646 38 (set (reg:DI 1 dx [676])
        (reg:DI 0 ax [676])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(insn 646 1298 647 38 (set (reg/f:DI 0 ax [677])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(insn 647 646 648 38 (parallel [
            (set (reg/f:DI 0 ax [orig:280 D.25113 ] [280])
                (plus:DI (reg/f:DI 0 ax [677])
                    (reg:DI 1 dx [676])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:384 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 file+0 S8 A64])
            (reg:DI 1 dx [676]))
        (nil)))
(insn 648 647 649 38 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:280 D.25113 ] [280])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(insn 649 648 650 38 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(call_insn 650 649 1242 38 (call (mem:QI (symbol_ref:DI ("_Z7exit_06PP8_IO_FILEPc") [flags 0x41]  <function_decl 0x2b27d5495d00 exit_06>) [0 exit_06 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:384 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 1242 650 1243 38 (set (pc)
        (label_ref 697)) 636 {jump}
     (nil)
 -> 697)
;;  succ:       44 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1243 1242 653)
;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 653 1243 654 39 24 "" [1 uses])
(note 654 653 655 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 655 654 1244 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:388 90 {*movsi_internal}
     (nil))
(jump_insn 1244 655 1245 39 (set (pc)
        (label_ref 683)) ge2fitman_fmtext_o.cpp:388 636 {jump}
     (nil)
 -> 683)
;;  succ:       43 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1245 1244 694)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 694 1245 658 40 28 "" [1 uses])
(note 658 694 659 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 659 658 660 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:390 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 660 659 661 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 680)
            (pc))) ge2fitman_fmtext_o.cpp:390 596 {*jcc_1}
     (nil)
 -> 680)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 287 288 289 290 291 292 293 294 295 296 297 298 678 679 680 681 682
(note 661 660 662 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 662 661 663 41 (set (reg:SI 0 ax [678])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 663 662 664 41 (set (reg:DI 0 ax [orig:287 D.25097 ] [287])
        (sign_extend:DI (reg:SI 0 ax [678]))) ge2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 664 663 665 41 (parallel [
            (set (reg:DI 1 dx [orig:288 D.25097 ] [288])
                (ashift:DI (reg:DI 0 ax [orig:287 D.25097 ] [287])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 497 {*ashldi3_1}
     (nil))
(insn 665 664 666 41 (set (reg/f:DI 0 ax [679])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 666 665 667 41 (parallel [
            (set (reg/f:DI 0 ax [orig:289 D.25103 ] [289])
                (plus:DI (reg/f:DI 0 ax [679])
                    (reg:DI 1 dx [orig:288 D.25097 ] [288])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:288 D.25097 ] [288]))
        (nil)))
(insn 667 666 668 41 (set (reg/f:DI 0 ax [orig:290 D.25114 ] [290])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:289 D.25103 ] [289]) [0 _282->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 668 667 669 41 (set (reg:SI 1 dx [680])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 669 668 670 41 (set (reg:DI 1 dx [orig:291 D.25097 ] [291])
        (sign_extend:DI (reg:SI 1 dx [680]))) ge2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 670 669 671 41 (parallel [
            (set (reg:DI 1 dx [orig:292 D.25097 ] [292])
                (ashift:DI (reg:DI 1 dx [orig:291 D.25097 ] [291])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 497 {*ashldi3_1}
     (nil))
(insn 671 670 672 41 (parallel [
            (set (reg/f:DI 1 dx [orig:293 D.25114 ] [293])
                (plus:DI (reg:DI 1 dx [orig:292 D.25097 ] [292])
                    (reg/f:DI 0 ax [orig:290 D.25114 ] [290])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 221 {*adddi_1}
     (nil))
(insn 672 671 673 41 (set (reg:SI 0 ax [681])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 673 672 674 41 (set (reg:DI 0 ax [orig:294 D.25097 ] [294])
        (sign_extend:DI (reg:SI 0 ax [681]))) ge2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 674 673 675 41 (parallel [
            (set (reg:DI 2 cx [orig:295 D.25097 ] [295])
                (ashift:DI (reg:DI 0 ax [orig:294 D.25097 ] [294])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 497 {*ashldi3_1}
     (nil))
(insn 675 674 676 41 (set (reg/f:DI 0 ax [682])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 676 675 677 41 (parallel [
            (set (reg/f:DI 0 ax [orig:296 D.25115 ] [296])
                (plus:DI (reg/f:DI 0 ax [682])
                    (reg:DI 2 cx [orig:295 D.25097 ] [295])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 2 cx [orig:295 D.25097 ] [295]))
        (nil)))
(insn 677 676 678 41 (set (reg:SI 0 ax [orig:297 D.25096 ] [297])
        (mem:SI (reg/f:DI 0 ax [orig:296 D.25115 ] [296]) [0 *_289+0 S4 A32])) ge2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 678 677 679 41 (set (reg:DI 0 ax [orig:298 D.25100 ] [298])
        (sign_extend:DI (reg:SI 0 ax [orig:297 D.25096 ] [297]))) ge2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 679 678 680 41 (set (mem:DI (reg/f:DI 1 dx [orig:293 D.25114 ] [293]) [0 *_286+0 S8 A64])
        (reg:DI 0 ax [orig:298 D.25100 ] [298])) ge2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;;              41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 680 679 681 42 27 "" [1 uses])
(note 681 680 682 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 682 681 683 42 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:388 220 {*addsi_1}
     (nil))
;;  succ:       43 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU,DFS_BACK)
;;              39 [100.0%] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 281 282 283 284 285 286 683 684 685
(code_label 683 682 684 43 26 "" [1 uses])
(note 684 683 685 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 685 684 686 43 (set (reg:SI 0 ax [683])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:388 90 {*movsi_internal}
     (nil))
(insn 686 685 687 43 (set (reg:DI 0 ax [orig:281 D.25100 ] [281])
        (sign_extend:DI (reg:SI 0 ax [683]))) ge2fitman_fmtext_o.cpp:388 142 {*extendsidi2_rex64}
     (nil))
(insn 687 686 688 43 (set (reg:SI 1 dx [684])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:388 90 {*movsi_internal}
     (nil))
(insn 688 687 1299 43 (set (reg:DI 1 dx [orig:282 D.25097 ] [282])
        (sign_extend:DI (reg:SI 1 dx [684]))) ge2fitman_fmtext_o.cpp:388 142 {*extendsidi2_rex64}
     (nil))
(insn 1299 688 689 43 (set (reg:DI 2 cx [orig:283 D.25097 ] [283])
        (reg:DI 1 dx [orig:282 D.25097 ] [282])) ge2fitman_fmtext_o.cpp:388 89 {*movdi_internal}
     (nil))
(insn 689 1299 690 43 (parallel [
            (set (reg:DI 2 cx [orig:283 D.25097 ] [283])
                (ashift:DI (reg:DI 2 cx [orig:283 D.25097 ] [283])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:388 497 {*ashldi3_1}
     (nil))
(insn 690 689 691 43 (set (reg/f:DI 1 dx [685])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:388 89 {*movdi_internal}
     (nil))
(insn 691 690 692 43 (parallel [
            (set (reg/f:DI 1 dx [orig:284 D.25099 ] [284])
                (plus:DI (reg/f:DI 1 dx [685])
                    (reg:DI 2 cx [orig:283 D.25097 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:388 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:283 D.25097 ] [283]))
        (nil)))
(insn 692 691 693 43 (set (reg:DI 1 dx [orig:285 D.25100 ] [285])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:284 D.25099 ] [284])
                (const_int 16 [0x10])) [0 _277->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:388 89 {*movdi_internal}
     (nil))
(insn 693 692 695 43 (parallel [
            (set (reg:DI 1 dx [orig:286 D.25100 ] [286])
                (ashift:DI (reg:DI 1 dx [orig:285 D.25100 ] [285])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:388 497 {*ashldi3_1}
     (nil))
(insn 695 693 696 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:281 D.25100 ] [281])
            (reg:DI 1 dx [orig:286 D.25100 ] [286]))) ge2fitman_fmtext_o.cpp:388 8 {*cmpdi_1}
     (nil))
(jump_insn 696 695 697 43 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 694)
            (pc))) ge2fitman_fmtext_o.cpp:388 596 {*jcc_1}
     (nil)
 -> 694)
;;  succ:       40
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;;              38 [100.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 697 696 698 44 25 "" [1 uses])
(note 698 697 699 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 699 698 700 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 56 [0x38])) [0 swap_bytes+0 S4 A64])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:406 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 700 699 701 44 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 850)
            (pc))) ge2fitman_fmtext_o.cpp:406 596 {*jcc_1}
     (nil)
 -> 850)
;;  succ:       45 (FALLTHRU)
;;              55
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 701 700 702 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 702 701 1246 45 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:407 90 {*movsi_internal}
     (nil))
(jump_insn 1246 702 1247 45 (set (pc)
        (label_ref 836)) ge2fitman_fmtext_o.cpp:407 636 {jump}
     (nil)
 -> 836)
;;  succ:       54 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1247 1246 847)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 305 306 307 308 309 310 686 687
(code_label 847 1247 705 46 35 "" [1 uses])
(note 705 847 706 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 706 705 707 46 (set (reg:SI 0 ax [686])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:408 90 {*movsi_internal}
     (nil))
(insn 707 706 1301 46 (set (reg:DI 0 ax [orig:305 D.25097 ] [305])
        (sign_extend:DI (reg:SI 0 ax [686]))) ge2fitman_fmtext_o.cpp:408 142 {*extendsidi2_rex64}
     (nil))
(insn 1301 707 708 46 (set (reg:DI 0 ax [orig:306 D.25097 ] [306])
        (reg:DI 0 ax [orig:305 D.25097 ] [305])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 708 1301 1302 46 (parallel [
            (set (reg:DI 0 ax [orig:306 D.25097 ] [306])
                (ashift:DI (reg:DI 0 ax [orig:306 D.25097 ] [306])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:408 497 {*ashldi3_1}
     (nil))
(insn 1302 708 709 46 (set (reg:DI 1 dx [orig:306 D.25097 ] [306])
        (reg:DI 0 ax [orig:306 D.25097 ] [306])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 709 1302 710 46 (set (reg/f:DI 0 ax [687])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 710 709 711 46 (parallel [
            (set (reg/f:DI 0 ax [orig:307 D.25099 ] [307])
                (plus:DI (reg/f:DI 0 ax [687])
                    (reg:DI 1 dx [orig:306 D.25097 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:408 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:306 D.25097 ] [306]))
        (nil)))
(insn 711 710 712 46 (set (reg:DI 0 ax [orig:308 D.25100 ] [308])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:307 D.25099 ] [307])
                (const_int 24 [0x18])) [0 _302->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 712 711 713 46 (set (reg:DI 0 ax [orig:309 D.25116 ] [309])
        (reg:DI 0 ax [orig:308 D.25100 ] [308])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 713 712 714 46 (parallel [
            (set (reg:DI 0 ax [orig:310 D.25116 ] [310])
                (plus:DI (reg:DI 0 ax [orig:309 D.25116 ] [309])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:408 221 {*adddi_1}
     (nil))
(insn 714 713 715 46 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:310 D.25116 ] [310])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:408 8 {*cmpdi_1}
     (nil))
(jump_insn 715 714 716 46 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 733)
            (pc))) ge2fitman_fmtext_o.cpp:408 596 {*jcc_1}
     (nil)
 -> 733)
;;  succ:       47 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 311 312 313 314 315 316 317 318 688 689 690
(note 716 715 717 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 717 716 718 47 (set (reg:SI 2 cx [orig:311 D.25096 ] [311])
        (const_int 2 [0x2])) ge2fitman_fmtext_o.cpp:409 90 {*movsi_internal}
     (nil))
(insn 718 717 719 47 (set (reg:SI 0 ax [688])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:409 90 {*movsi_internal}
     (nil))
(insn 719 718 720 47 (set (reg:DI 0 ax [orig:312 D.25097 ] [312])
        (sign_extend:DI (reg:SI 0 ax [688]))) ge2fitman_fmtext_o.cpp:409 142 {*extendsidi2_rex64}
     (nil))
(insn 720 719 721 47 (parallel [
            (set (reg:DI 1 dx [orig:313 D.25097 ] [313])
                (ashift:DI (reg:DI 0 ax [orig:312 D.25097 ] [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:409 497 {*ashldi3_1}
     (nil))
(insn 721 720 722 47 (set (reg/f:DI 0 ax [689])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 722 721 723 47 (parallel [
            (set (reg/f:DI 0 ax [orig:314 D.25103 ] [314])
                (plus:DI (reg/f:DI 0 ax [689])
                    (reg:DI 1 dx [orig:313 D.25097 ] [313])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:409 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:313 D.25097 ] [313]))
        (nil)))
(insn 723 722 724 47 (set (reg/f:DI 0 ax [orig:315 D.25117 ] [315])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:314 D.25103 ] [314]) [0 _309->sh+0 S8 A64])) ge2fitman_fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 724 723 725 47 (set (reg:SI 1 dx [690])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:409 90 {*movsi_internal}
     (nil))
(insn 725 724 726 47 (set (reg:DI 1 dx [orig:316 D.25097 ] [316])
        (sign_extend:DI (reg:SI 1 dx [690]))) ge2fitman_fmtext_o.cpp:409 142 {*extendsidi2_rex64}
     (nil))
(insn 726 725 727 47 (parallel [
            (set (reg:DI 1 dx [orig:317 D.25097 ] [317])
                (ashift:DI (reg:DI 1 dx [orig:316 D.25097 ] [316])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:409 497 {*ashldi3_1}
     (nil))
(insn 727 726 728 47 (parallel [
            (set (reg/f:DI 0 ax [orig:318 D.25118 ] [318])
                (plus:DI (reg/f:DI 0 ax [orig:315 D.25117 ] [315])
                    (reg:DI 1 dx [orig:317 D.25097 ] [317])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:409 221 {*adddi_1}
     (nil))
(insn 728 727 729 47 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:311 D.25096 ] [311])) ge2fitman_fmtext_o.cpp:409 90 {*movsi_internal}
     (nil))
(insn 729 728 730 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:318 D.25118 ] [318])) ge2fitman_fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(call_insn 730 729 1248 47 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b27d5490c00 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:409 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 1248 730 1249 47 (set (pc)
        (label_ref 833)) 636 {jump}
     (nil)
 -> 833)
;;  succ:       53 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1249 1248 733)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 319 320 321 322 323 324 691 692
(code_label 733 1249 734 48 31 "" [1 uses])
(note 734 733 735 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 735 734 736 48 (set (reg:SI 0 ax [691])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:411 90 {*movsi_internal}
     (nil))
(insn 736 735 1303 48 (set (reg:DI 0 ax [orig:319 D.25097 ] [319])
        (sign_extend:DI (reg:SI 0 ax [691]))) ge2fitman_fmtext_o.cpp:411 142 {*extendsidi2_rex64}
     (nil))
(insn 1303 736 737 48 (set (reg:DI 0 ax [orig:320 D.25097 ] [320])
        (reg:DI 0 ax [orig:319 D.25097 ] [319])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 737 1303 1304 48 (parallel [
            (set (reg:DI 0 ax [orig:320 D.25097 ] [320])
                (ashift:DI (reg:DI 0 ax [orig:320 D.25097 ] [320])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:411 497 {*ashldi3_1}
     (nil))
(insn 1304 737 738 48 (set (reg:DI 1 dx [orig:320 D.25097 ] [320])
        (reg:DI 0 ax [orig:320 D.25097 ] [320])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 738 1304 739 48 (set (reg/f:DI 0 ax [692])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 739 738 740 48 (parallel [
            (set (reg/f:DI 0 ax [orig:321 D.25099 ] [321])
                (plus:DI (reg/f:DI 0 ax [692])
                    (reg:DI 1 dx [orig:320 D.25097 ] [320])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:411 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:320 D.25097 ] [320]))
        (nil)))
(insn 740 739 741 48 (set (reg:DI 0 ax [orig:322 D.25100 ] [322])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:321 D.25099 ] [321])
                (const_int 24 [0x18])) [0 _316->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 741 740 742 48 (set (reg:DI 0 ax [orig:323 D.25116 ] [323])
        (reg:DI 0 ax [orig:322 D.25100 ] [322])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 742 741 743 48 (parallel [
            (set (reg:DI 0 ax [orig:324 D.25116 ] [324])
                (plus:DI (reg:DI 0 ax [orig:323 D.25116 ] [323])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:411 221 {*adddi_1}
     (nil))
(insn 743 742 744 48 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:324 D.25116 ] [324])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:411 8 {*cmpdi_1}
     (nil))
(jump_insn 744 743 745 48 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 775)
            (pc))) ge2fitman_fmtext_o.cpp:411 596 {*jcc_1}
     (nil)
 -> 775)
;;  succ:       49 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 693 694 695 696 697 698 699
(note 745 744 746 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 746 745 747 49 (set (reg:SI 2 cx [orig:325 D.25096 ] [325])
        (const_int 4 [0x4])) ge2fitman_fmtext_o.cpp:412 90 {*movsi_internal}
     (nil))
(insn 747 746 748 49 (set (reg:SI 0 ax [693])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:412 90 {*movsi_internal}
     (nil))
(insn 748 747 749 49 (set (reg:DI 0 ax [orig:326 D.25097 ] [326])
        (sign_extend:DI (reg:SI 0 ax [693]))) ge2fitman_fmtext_o.cpp:412 142 {*extendsidi2_rex64}
     (nil))
(insn 749 748 750 49 (parallel [
            (set (reg:DI 1 dx [orig:327 D.25097 ] [327])
                (ashift:DI (reg:DI 0 ax [orig:326 D.25097 ] [326])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:412 497 {*ashldi3_1}
     (nil))
(insn 750 749 751 49 (set (reg/f:DI 0 ax [694])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 751 750 752 49 (parallel [
            (set (reg/f:DI 0 ax [orig:328 D.25118 ] [328])
                (plus:DI (reg/f:DI 0 ax [694])
                    (reg:DI 1 dx [orig:327 D.25097 ] [327])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:412 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 1 dx [orig:327 D.25097 ] [327]))
        (nil)))
(insn 752 751 753 49 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:325 D.25096 ] [325])) ge2fitman_fmtext_o.cpp:412 90 {*movsi_internal}
     (nil))
(insn 753 752 754 49 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:328 D.25118 ] [328])) ge2fitman_fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(call_insn 754 753 755 49 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b27d5490c00 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:412 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 755 754 756 49 (set (reg:SI 0 ax [695])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:413 90 {*movsi_internal}
     (nil))
(insn 756 755 757 49 (set (reg:DI 0 ax [orig:329 D.25097 ] [329])
        (sign_extend:DI (reg:SI 0 ax [695]))) ge2fitman_fmtext_o.cpp:413 142 {*extendsidi2_rex64}
     (nil))
(insn 757 756 758 49 (parallel [
            (set (reg:DI 1 dx [orig:330 D.25097 ] [330])
                (ashift:DI (reg:DI 0 ax [orig:329 D.25097 ] [329])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 497 {*ashldi3_1}
     (nil))
(insn 758 757 759 49 (set (reg/f:DI 0 ax [696])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:413 89 {*movdi_internal}
     (nil))
(insn 759 758 760 49 (parallel [
            (set (reg/f:DI 0 ax [orig:331 D.25103 ] [331])
                (plus:DI (reg/f:DI 0 ax [696])
                    (reg:DI 1 dx [orig:330 D.25097 ] [330])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:330 D.25097 ] [330]))
        (nil)))
(insn 760 759 761 49 (set (reg/f:DI 0 ax [orig:332 D.25114 ] [332])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:331 D.25103 ] [331]) [0 _326->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:413 89 {*movdi_internal}
     (nil))
(insn 761 760 762 49 (set (reg:SI 1 dx [697])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:413 90 {*movsi_internal}
     (nil))
(insn 762 761 763 49 (set (reg:DI 1 dx [orig:333 D.25097 ] [333])
        (sign_extend:DI (reg:SI 1 dx [697]))) ge2fitman_fmtext_o.cpp:413 142 {*extendsidi2_rex64}
     (nil))
(insn 763 762 764 49 (parallel [
            (set (reg:DI 1 dx [orig:334 D.25097 ] [334])
                (ashift:DI (reg:DI 1 dx [orig:333 D.25097 ] [333])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 497 {*ashldi3_1}
     (nil))
(insn 764 763 765 49 (parallel [
            (set (reg/f:DI 1 dx [orig:335 D.25114 ] [335])
                (plus:DI (reg:DI 1 dx [orig:334 D.25097 ] [334])
                    (reg/f:DI 0 ax [orig:332 D.25114 ] [332])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 221 {*adddi_1}
     (nil))
(insn 765 764 766 49 (set (reg:SI 0 ax [698])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:413 90 {*movsi_internal}
     (nil))
(insn 766 765 767 49 (set (reg:DI 0 ax [orig:336 D.25097 ] [336])
        (sign_extend:DI (reg:SI 0 ax [698]))) ge2fitman_fmtext_o.cpp:413 142 {*extendsidi2_rex64}
     (nil))
(insn 767 766 768 49 (parallel [
            (set (reg:DI 2 cx [orig:337 D.25097 ] [337])
                (ashift:DI (reg:DI 0 ax [orig:336 D.25097 ] [336])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 497 {*ashldi3_1}
     (nil))
(insn 768 767 769 49 (set (reg/f:DI 0 ax [699])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:413 89 {*movdi_internal}
     (nil))
(insn 769 768 770 49 (parallel [
            (set (reg/f:DI 0 ax [orig:338 D.25115 ] [338])
                (plus:DI (reg/f:DI 0 ax [699])
                    (reg:DI 2 cx [orig:337 D.25097 ] [337])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 2 cx [orig:337 D.25097 ] [337]))
        (nil)))
(insn 770 769 771 49 (set (reg:SI 0 ax [orig:339 D.25096 ] [339])
        (mem:SI (reg/f:DI 0 ax [orig:338 D.25115 ] [338]) [0 *_333+0 S4 A32])) ge2fitman_fmtext_o.cpp:413 90 {*movsi_internal}
     (nil))
(insn 771 770 772 49 (set (reg:DI 0 ax [orig:340 D.25100 ] [340])
        (sign_extend:DI (reg:SI 0 ax [orig:339 D.25096 ] [339]))) ge2fitman_fmtext_o.cpp:413 142 {*extendsidi2_rex64}
     (nil))
(insn 772 771 1250 49 (set (mem:DI (reg/f:DI 1 dx [orig:335 D.25114 ] [335]) [0 *_330+0 S8 A64])
        (reg:DI 0 ax [orig:340 D.25100 ] [340])) ge2fitman_fmtext_o.cpp:413 89 {*movdi_internal}
     (nil))
(jump_insn 1250 772 1251 49 (set (pc)
        (label_ref 833)) 636 {jump}
     (nil)
 -> 833)
;;  succ:       53 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1251 1250 775)
;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 341 342 343 344 345 346 700 701
(code_label 775 1251 776 50 33 "" [1 uses])
(note 776 775 777 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 777 776 778 50 (set (reg:SI 0 ax [700])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:414 90 {*movsi_internal}
     (nil))
(insn 778 777 1305 50 (set (reg:DI 0 ax [orig:341 D.25097 ] [341])
        (sign_extend:DI (reg:SI 0 ax [700]))) ge2fitman_fmtext_o.cpp:414 142 {*extendsidi2_rex64}
     (nil))
(insn 1305 778 779 50 (set (reg:DI 0 ax [orig:342 D.25097 ] [342])
        (reg:DI 0 ax [orig:341 D.25097 ] [341])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 779 1305 1306 50 (parallel [
            (set (reg:DI 0 ax [orig:342 D.25097 ] [342])
                (ashift:DI (reg:DI 0 ax [orig:342 D.25097 ] [342])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:414 497 {*ashldi3_1}
     (nil))
(insn 1306 779 780 50 (set (reg:DI 1 dx [orig:342 D.25097 ] [342])
        (reg:DI 0 ax [orig:342 D.25097 ] [342])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 780 1306 781 50 (set (reg/f:DI 0 ax [701])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 781 780 782 50 (parallel [
            (set (reg/f:DI 0 ax [orig:343 D.25099 ] [343])
                (plus:DI (reg/f:DI 0 ax [701])
                    (reg:DI 1 dx [orig:342 D.25097 ] [342])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:414 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:342 D.25097 ] [342]))
        (nil)))
(insn 782 781 783 50 (set (reg:DI 0 ax [orig:344 D.25100 ] [344])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:343 D.25099 ] [343])
                (const_int 24 [0x18])) [0 _338->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 783 782 784 50 (set (reg:DI 0 ax [orig:345 D.25116 ] [345])
        (reg:DI 0 ax [orig:344 D.25100 ] [344])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 784 783 785 50 (parallel [
            (set (reg:DI 0 ax [orig:346 D.25116 ] [346])
                (plus:DI (reg:DI 0 ax [orig:345 D.25116 ] [345])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:414 221 {*adddi_1}
     (nil))
(insn 785 784 786 50 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:346 D.25116 ] [346])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:414 8 {*cmpdi_1}
     (nil))
(jump_insn 786 785 787 50 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 817)
            (pc))) ge2fitman_fmtext_o.cpp:414 596 {*jcc_1}
     (nil)
 -> 817)
;;  succ:       51 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 702 703 704 705 706 707 708
(note 787 786 788 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 788 787 789 51 (set (reg:SI 2 cx [orig:347 D.25096 ] [347])
        (const_int 4 [0x4])) ge2fitman_fmtext_o.cpp:415 90 {*movsi_internal}
     (nil))
(insn 789 788 790 51 (set (reg:SI 0 ax [702])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:415 90 {*movsi_internal}
     (nil))
(insn 790 789 791 51 (set (reg:DI 0 ax [orig:348 D.25097 ] [348])
        (sign_extend:DI (reg:SI 0 ax [702]))) ge2fitman_fmtext_o.cpp:415 142 {*extendsidi2_rex64}
     (nil))
(insn 791 790 792 51 (parallel [
            (set (reg:DI 1 dx [orig:349 D.25097 ] [349])
                (ashift:DI (reg:DI 0 ax [orig:348 D.25097 ] [348])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:415 497 {*ashldi3_1}
     (nil))
(insn 792 791 793 51 (set (reg/f:DI 0 ax [703])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 793 792 794 51 (parallel [
            (set (reg/f:DI 0 ax [orig:350 D.25118 ] [350])
                (plus:DI (reg/f:DI 0 ax [703])
                    (reg:DI 1 dx [orig:349 D.25097 ] [349])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:415 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 1 dx [orig:349 D.25097 ] [349]))
        (nil)))
(insn 794 793 795 51 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:347 D.25096 ] [347])) ge2fitman_fmtext_o.cpp:415 90 {*movsi_internal}
     (nil))
(insn 795 794 796 51 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:350 D.25118 ] [350])) ge2fitman_fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(call_insn 796 795 797 51 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b27d5490c00 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:415 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 797 796 798 51 (set (reg:SI 0 ax [704])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:416 90 {*movsi_internal}
     (nil))
(insn 798 797 799 51 (set (reg:DI 0 ax [orig:351 D.25097 ] [351])
        (sign_extend:DI (reg:SI 0 ax [704]))) ge2fitman_fmtext_o.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 799 798 800 51 (parallel [
            (set (reg:DI 1 dx [orig:352 D.25097 ] [352])
                (ashift:DI (reg:DI 0 ax [orig:351 D.25097 ] [351])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 497 {*ashldi3_1}
     (nil))
(insn 800 799 801 51 (set (reg/f:DI 0 ax [705])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:416 89 {*movdi_internal}
     (nil))
(insn 801 800 802 51 (parallel [
            (set (reg/f:DI 0 ax [orig:353 D.25103 ] [353])
                (plus:DI (reg/f:DI 0 ax [705])
                    (reg:DI 1 dx [orig:352 D.25097 ] [352])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:352 D.25097 ] [352]))
        (nil)))
(insn 802 801 803 51 (set (reg/f:DI 0 ax [orig:354 D.25114 ] [354])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:353 D.25103 ] [353]) [0 _348->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:416 89 {*movdi_internal}
     (nil))
(insn 803 802 804 51 (set (reg:SI 1 dx [706])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:416 90 {*movsi_internal}
     (nil))
(insn 804 803 805 51 (set (reg:DI 1 dx [orig:355 D.25097 ] [355])
        (sign_extend:DI (reg:SI 1 dx [706]))) ge2fitman_fmtext_o.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 805 804 806 51 (parallel [
            (set (reg:DI 1 dx [orig:356 D.25097 ] [356])
                (ashift:DI (reg:DI 1 dx [orig:355 D.25097 ] [355])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 497 {*ashldi3_1}
     (nil))
(insn 806 805 807 51 (parallel [
            (set (reg/f:DI 1 dx [orig:357 D.25114 ] [357])
                (plus:DI (reg:DI 1 dx [orig:356 D.25097 ] [356])
                    (reg/f:DI 0 ax [orig:354 D.25114 ] [354])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 221 {*adddi_1}
     (nil))
(insn 807 806 808 51 (set (reg:SI 0 ax [707])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:416 90 {*movsi_internal}
     (nil))
(insn 808 807 809 51 (set (reg:DI 0 ax [orig:358 D.25097 ] [358])
        (sign_extend:DI (reg:SI 0 ax [707]))) ge2fitman_fmtext_o.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 809 808 810 51 (parallel [
            (set (reg:DI 2 cx [orig:359 D.25097 ] [359])
                (ashift:DI (reg:DI 0 ax [orig:358 D.25097 ] [358])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 497 {*ashldi3_1}
     (nil))
(insn 810 809 811 51 (set (reg/f:DI 0 ax [708])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:416 89 {*movdi_internal}
     (nil))
(insn 811 810 812 51 (parallel [
            (set (reg/f:DI 0 ax [orig:360 D.25115 ] [360])
                (plus:DI (reg/f:DI 0 ax [708])
                    (reg:DI 2 cx [orig:359 D.25097 ] [359])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 2 cx [orig:359 D.25097 ] [359]))
        (nil)))
(insn 812 811 813 51 (set (reg:SI 0 ax [orig:361 D.25096 ] [361])
        (mem:SI (reg/f:DI 0 ax [orig:360 D.25115 ] [360]) [0 *_355+0 S4 A32])) ge2fitman_fmtext_o.cpp:416 90 {*movsi_internal}
     (nil))
(insn 813 812 814 51 (set (reg:DI 0 ax [orig:362 D.25100 ] [362])
        (sign_extend:DI (reg:SI 0 ax [orig:361 D.25096 ] [361]))) ge2fitman_fmtext_o.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 814 813 1252 51 (set (mem:DI (reg/f:DI 1 dx [orig:357 D.25114 ] [357]) [0 *_352+0 S8 A64])
        (reg:DI 0 ax [orig:362 D.25100 ] [362])) ge2fitman_fmtext_o.cpp:416 89 {*movdi_internal}
     (nil))
(jump_insn 1252 814 1253 51 (set (pc)
        (label_ref 833)) 636 {jump}
     (nil)
 -> 833)
;;  succ:       53 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1253 1252 817)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 363 364 365 366 367 368 369 370 709 710 711
(code_label 817 1253 818 52 34 "" [1 uses])
(note 818 817 819 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 819 818 820 52 (set (reg:SI 2 cx [orig:363 D.25096 ] [363])
        (const_int 8 [0x8])) ge2fitman_fmtext_o.cpp:418 90 {*movsi_internal}
     (nil))
(insn 820 819 821 52 (set (reg:SI 0 ax [709])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:418 90 {*movsi_internal}
     (nil))
(insn 821 820 822 52 (set (reg:DI 0 ax [orig:364 D.25097 ] [364])
        (sign_extend:DI (reg:SI 0 ax [709]))) ge2fitman_fmtext_o.cpp:418 142 {*extendsidi2_rex64}
     (nil))
(insn 822 821 823 52 (parallel [
            (set (reg:DI 1 dx [orig:365 D.25097 ] [365])
                (ashift:DI (reg:DI 0 ax [orig:364 D.25097 ] [364])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:418 497 {*ashldi3_1}
     (nil))
(insn 823 822 824 52 (set (reg/f:DI 0 ax [710])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 824 823 825 52 (parallel [
            (set (reg/f:DI 0 ax [orig:366 D.25103 ] [366])
                (plus:DI (reg/f:DI 0 ax [710])
                    (reg:DI 1 dx [orig:365 D.25097 ] [365])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:418 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:365 D.25097 ] [365]))
        (nil)))
(insn 825 824 826 52 (set (reg/f:DI 0 ax [orig:367 D.25114 ] [367])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:366 D.25103 ] [366]) [0 _361->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 826 825 827 52 (set (reg:SI 1 dx [711])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:418 90 {*movsi_internal}
     (nil))
(insn 827 826 828 52 (set (reg:DI 1 dx [orig:368 D.25097 ] [368])
        (sign_extend:DI (reg:SI 1 dx [711]))) ge2fitman_fmtext_o.cpp:418 142 {*extendsidi2_rex64}
     (nil))
(insn 828 827 829 52 (parallel [
            (set (reg:DI 1 dx [orig:369 D.25097 ] [369])
                (ashift:DI (reg:DI 1 dx [orig:368 D.25097 ] [368])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:418 497 {*ashldi3_1}
     (nil))
(insn 829 828 830 52 (parallel [
            (set (reg/f:DI 0 ax [orig:370 D.25118 ] [370])
                (plus:DI (reg/f:DI 0 ax [orig:367 D.25114 ] [367])
                    (reg:DI 1 dx [orig:369 D.25097 ] [369])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:418 221 {*adddi_1}
     (nil))
(insn 830 829 831 52 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:363 D.25096 ] [363])) ge2fitman_fmtext_o.cpp:418 90 {*movsi_internal}
     (nil))
(insn 831 830 832 52 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:370 D.25118 ] [370])) ge2fitman_fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(call_insn 832 831 833 52 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b27d5490c00 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:418 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       53 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;;              47 [100.0%] 
;;              49 [100.0%] 
;;              51 [100.0%] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 833 832 834 53 32 "" [3 uses])
(note 834 833 835 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 835 834 836 53 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:407 220 {*addsi_1}
     (nil))
;;  succ:       54 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU,DFS_BACK)
;;              45 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 299 300 301 302 303 304 712 713 714
(code_label 836 835 837 54 30 "" [1 uses])
(note 837 836 838 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 838 837 839 54 (set (reg:SI 0 ax [712])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:407 90 {*movsi_internal}
     (nil))
(insn 839 838 840 54 (set (reg:DI 0 ax [orig:299 D.25100 ] [299])
        (sign_extend:DI (reg:SI 0 ax [712]))) ge2fitman_fmtext_o.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 840 839 841 54 (set (reg:SI 1 dx [713])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:407 90 {*movsi_internal}
     (nil))
(insn 841 840 1307 54 (set (reg:DI 1 dx [orig:300 D.25097 ] [300])
        (sign_extend:DI (reg:SI 1 dx [713]))) ge2fitman_fmtext_o.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 1307 841 842 54 (set (reg:DI 2 cx [orig:301 D.25097 ] [301])
        (reg:DI 1 dx [orig:300 D.25097 ] [300])) ge2fitman_fmtext_o.cpp:407 89 {*movdi_internal}
     (nil))
(insn 842 1307 843 54 (parallel [
            (set (reg:DI 2 cx [orig:301 D.25097 ] [301])
                (ashift:DI (reg:DI 2 cx [orig:301 D.25097 ] [301])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:407 497 {*ashldi3_1}
     (nil))
(insn 843 842 844 54 (set (reg/f:DI 1 dx [714])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:407 89 {*movdi_internal}
     (nil))
(insn 844 843 845 54 (parallel [
            (set (reg/f:DI 1 dx [orig:302 D.25099 ] [302])
                (plus:DI (reg/f:DI 1 dx [714])
                    (reg:DI 2 cx [orig:301 D.25097 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:407 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:301 D.25097 ] [301]))
        (nil)))
(insn 845 844 846 54 (set (reg:DI 1 dx [orig:303 D.25100 ] [303])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:302 D.25099 ] [302])
                (const_int 16 [0x10])) [0 _297->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:407 89 {*movdi_internal}
     (nil))
(insn 846 845 848 54 (parallel [
            (set (reg:DI 1 dx [orig:304 D.25100 ] [304])
                (ashift:DI (reg:DI 1 dx [orig:303 D.25100 ] [303])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:407 497 {*ashldi3_1}
     (nil))
(insn 848 846 849 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:299 D.25100 ] [299])
            (reg:DI 1 dx [orig:304 D.25100 ] [304]))) ge2fitman_fmtext_o.cpp:407 8 {*cmpdi_1}
     (nil))
(jump_insn 849 848 850 54 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 847)
            (pc))) ge2fitman_fmtext_o.cpp:407 596 {*jcc_1}
     (nil)
 -> 847)
;;  succ:       46
;;              55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 371 372 373 374 375 376 377 378 379 380 381 715 716 717 718 719 720 721
(code_label 850 849 851 55 29 "" [1 uses])
(note 851 850 852 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 852 851 853 55 (set (reg:SI 0 ax [715])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:429 90 {*movsi_internal}
     (nil))
(insn 853 852 1309 55 (set (reg:DI 0 ax [orig:371 D.25097 ] [371])
        (sign_extend:DI (reg:SI 0 ax [715]))) ge2fitman_fmtext_o.cpp:429 142 {*extendsidi2_rex64}
     (nil))
(insn 1309 853 854 55 (set (reg:DI 0 ax [orig:372 D.25097 ] [372])
        (reg:DI 0 ax [orig:371 D.25097 ] [371])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 854 1309 1310 55 (parallel [
            (set (reg:DI 0 ax [orig:372 D.25097 ] [372])
                (ashift:DI (reg:DI 0 ax [orig:372 D.25097 ] [372])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 497 {*ashldi3_1}
     (nil))
(insn 1310 854 855 55 (set (reg:DI 1 dx [orig:372 D.25097 ] [372])
        (reg:DI 0 ax [orig:372 D.25097 ] [372])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 855 1310 856 55 (set (reg/f:DI 0 ax [716])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 856 855 857 55 (parallel [
            (set (reg/f:DI 0 ax [orig:373 D.25099 ] [373])
                (plus:DI (reg/f:DI 0 ax [716])
                    (reg:DI 1 dx [orig:372 D.25097 ] [372])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:372 D.25097 ] [372]))
        (nil)))
(insn 857 856 1311 55 (set (reg:DI 0 ax [orig:374 D.25100 ] [374])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:373 D.25099 ] [373])
                (const_int 24 [0x18])) [0 _369->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 1311 857 858 55 (set (reg:DI 1 dx [717])
        (reg:DI 0 ax [orig:374 D.25100 ] [374])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 858 1311 859 55 (parallel [
            (set (reg:DI 1 dx [717])
                (lshiftrt:DI (reg:DI 1 dx [717])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 531 {*lshrdi3_1}
     (nil))
(insn 859 858 860 55 (parallel [
            (set (reg:DI 0 ax [718])
                (plus:DI (reg:DI 0 ax [orig:374 D.25100 ] [374])
                    (reg:DI 1 dx [717])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 221 {*adddi_1}
     (nil))
(insn 860 859 861 55 (parallel [
            (set (reg:DI 0 ax [719])
                (ashiftrt:DI (reg:DI 0 ax [718])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 532 {*ashrdi3_1}
     (nil))
(insn 861 860 862 55 (set (reg:DI 0 ax [orig:375 D.25100 ] [375])
        (reg:DI 0 ax [719])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 862 861 863 55 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:375 D.25100 ] [375])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 863 862 864 55 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b27d5543d10 *.LC13>)) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 864 863 865 55 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:429 93 {*movqi_internal}
     (nil))
(call_insn 865 864 866 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b27d3ecee00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:429 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 866 865 867 55 (set (reg:SI 0 ax [720])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:433 90 {*movsi_internal}
     (nil))
(insn 867 866 1313 55 (set (reg:DI 0 ax [orig:376 D.25097 ] [376])
        (sign_extend:DI (reg:SI 0 ax [720]))) ge2fitman_fmtext_o.cpp:433 142 {*extendsidi2_rex64}
     (nil))
(insn 1313 867 868 55 (set (reg:DI 0 ax [orig:377 D.25097 ] [377])
        (reg:DI 0 ax [orig:376 D.25097 ] [376])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 868 1313 1314 55 (parallel [
            (set (reg:DI 0 ax [orig:377 D.25097 ] [377])
                (ashift:DI (reg:DI 0 ax [orig:377 D.25097 ] [377])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:433 497 {*ashldi3_1}
     (nil))
(insn 1314 868 869 55 (set (reg:DI 1 dx [orig:377 D.25097 ] [377])
        (reg:DI 0 ax [orig:377 D.25097 ] [377])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 869 1314 870 55 (set (reg/f:DI 0 ax [721])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 870 869 871 55 (parallel [
            (set (reg/f:DI 0 ax [orig:378 D.25099 ] [378])
                (plus:DI (reg/f:DI 0 ax [721])
                    (reg:DI 1 dx [orig:377 D.25097 ] [377])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:433 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:377 D.25097 ] [377]))
        (nil)))
(insn 871 870 872 55 (set (reg:DI 0 ax [orig:379 D.25100 ] [379])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:378 D.25099 ] [378])
                (const_int 24 [0x18])) [0 _374->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 872 871 873 55 (set (reg:DI 0 ax [orig:380 D.25116 ] [380])
        (reg:DI 0 ax [orig:379 D.25100 ] [379])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 873 872 874 55 (parallel [
            (set (reg:DI 0 ax [orig:381 D.25116 ] [381])
                (plus:DI (reg:DI 0 ax [orig:380 D.25116 ] [380])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:433 221 {*adddi_1}
     (nil))
(insn 874 873 875 55 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:381 D.25116 ] [381])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:433 8 {*cmpdi_1}
     (nil))
(jump_insn 875 874 876 55 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 923)
            (pc))) ge2fitman_fmtext_o.cpp:433 596 {*jcc_1}
     (nil)
 -> 923)
;;  succ:       56 (FALLTHRU)
;;              60
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 382 383 384 385 386 387 388 722 723
(note 876 875 877 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 877 876 878 56 (set (reg:SI 0 ax [722])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:434 90 {*movsi_internal}
     (nil))
(insn 878 877 1315 56 (set (reg:DI 0 ax [orig:382 D.25097 ] [382])
        (sign_extend:DI (reg:SI 0 ax [722]))) ge2fitman_fmtext_o.cpp:434 142 {*extendsidi2_rex64}
     (nil))
(insn 1315 878 879 56 (set (reg:DI 0 ax [orig:383 D.25097 ] [383])
        (reg:DI 0 ax [orig:382 D.25097 ] [382])) ge2fitman_fmtext_o.cpp:434 89 {*movdi_internal}
     (nil))
(insn 879 1315 1316 56 (parallel [
            (set (reg:DI 0 ax [orig:383 D.25097 ] [383])
                (ashift:DI (reg:DI 0 ax [orig:383 D.25097 ] [383])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 497 {*ashldi3_1}
     (nil))
(insn 1316 879 880 56 (set (reg:DI 1 dx [orig:383 D.25097 ] [383])
        (reg:DI 0 ax [orig:383 D.25097 ] [383])) ge2fitman_fmtext_o.cpp:434 89 {*movdi_internal}
     (nil))
(insn 880 1316 881 56 (set (reg/f:DI 0 ax [723])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:434 89 {*movdi_internal}
     (nil))
(insn 881 880 882 56 (parallel [
            (set (reg/f:DI 0 ax [orig:384 D.25099 ] [384])
                (plus:DI (reg/f:DI 0 ax [723])
                    (reg:DI 1 dx [orig:383 D.25097 ] [383])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:383 D.25097 ] [383]))
        (nil)))
(insn 882 881 883 56 (set (reg:DI 0 ax [orig:385 D.25100 ] [385])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:384 D.25099 ] [384])
                (const_int 16 [0x10])) [0 _380->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:434 89 {*movdi_internal}
     (nil))
(insn 883 882 884 56 (set (reg:SI 0 ax [orig:386 D.25109 ] [386])
        (reg:SI 0 ax [orig:385 D.25100 ] [385])) ge2fitman_fmtext_o.cpp:434 90 {*movsi_internal}
     (nil))
(insn 884 883 885 56 (parallel [
            (set (reg:SI 0 ax [orig:387 D.25109 ] [387])
                (ashift:SI (reg:SI 0 ax [orig:386 D.25109 ] [386])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 496 {*ashlsi3_1}
     (nil))
(insn 885 884 886 56 (parallel [
            (set (reg:SI 0 ax [orig:388 D.25109 ] [388])
                (plus:SI (reg:SI 0 ax [orig:387 D.25109 ] [387])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 220 {*addsi_1}
     (nil))
(insn 886 885 1254 56 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (reg:SI 0 ax [orig:388 D.25109 ] [388])) ge2fitman_fmtext_o.cpp:434 90 {*movsi_internal}
     (nil))
(jump_insn 1254 886 1255 56 (set (pc)
        (label_ref 915)) ge2fitman_fmtext_o.cpp:434 636 {jump}
     (nil)
 -> 915)
;;  succ:       58 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1255 1254 917)
;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       58
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 724 725 726 727 728 729 730
(code_label 917 1255 889 57 38 "" [1 uses])
(note 889 917 890 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 890 889 891 57 (set (reg:SI 0 ax [724])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:435 90 {*movsi_internal}
     (nil))
(insn 891 890 892 57 (set (reg:DI 0 ax [orig:389 D.25097 ] [389])
        (sign_extend:DI (reg:SI 0 ax [724]))) ge2fitman_fmtext_o.cpp:435 142 {*extendsidi2_rex64}
     (nil))
(insn 892 891 893 57 (parallel [
            (set (reg:DI 1 dx [orig:390 D.25097 ] [390])
                (ashift:DI (reg:DI 0 ax [orig:389 D.25097 ] [389])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 497 {*ashldi3_1}
     (nil))
(insn 893 892 894 57 (set (reg/f:DI 0 ax [725])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:435 89 {*movdi_internal}
     (nil))
(insn 894 893 895 57 (parallel [
            (set (reg/f:DI 0 ax [orig:391 D.25103 ] [391])
                (plus:DI (reg/f:DI 0 ax [725])
                    (reg:DI 1 dx [orig:390 D.25097 ] [390])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:390 D.25097 ] [390]))
        (nil)))
(insn 895 894 896 57 (set (reg/f:DI 0 ax [orig:392 D.25105 ] [392])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:391 D.25103 ] [391]) [0 _388->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:435 89 {*movdi_internal}
     (nil))
(insn 896 895 897 57 (set (reg:SI 1 dx [726])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:435 90 {*movsi_internal}
     (nil))
(insn 897 896 898 57 (set (reg:DI 1 dx [orig:393 D.25097 ] [393])
        (sign_extend:DI (reg:SI 1 dx [726]))) ge2fitman_fmtext_o.cpp:435 142 {*extendsidi2_rex64}
     (nil))
(insn 898 897 899 57 (parallel [
            (set (reg:DI 1 dx [orig:394 D.25097 ] [394])
                (ashift:DI (reg:DI 1 dx [orig:393 D.25097 ] [393])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 497 {*ashldi3_1}
     (nil))
(insn 899 898 900 57 (parallel [
            (set (reg/f:DI 1 dx [orig:395 D.25105 ] [395])
                (plus:DI (reg:DI 1 dx [orig:394 D.25097 ] [394])
                    (reg/f:DI 0 ax [orig:392 D.25105 ] [392])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 221 {*adddi_1}
     (nil))
(insn 900 899 901 57 (set (reg:SI 0 ax [727])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:435 90 {*movsi_internal}
     (nil))
(insn 901 900 902 57 (set (reg:DI 0 ax [orig:396 D.25097 ] [396])
        (sign_extend:DI (reg:SI 0 ax [727]))) ge2fitman_fmtext_o.cpp:435 142 {*extendsidi2_rex64}
     (nil))
(insn 902 901 903 57 (parallel [
            (set (reg:DI 2 cx [orig:397 D.25097 ] [397])
                (ashift:DI (reg:DI 0 ax [orig:396 D.25097 ] [396])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 497 {*ashldi3_1}
     (nil))
(insn 903 902 904 57 (set (reg/f:DI 0 ax [728])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:435 89 {*movdi_internal}
     (nil))
(insn 904 903 905 57 (parallel [
            (set (reg/f:DI 0 ax [orig:398 D.25103 ] [398])
                (plus:DI (reg/f:DI 0 ax [728])
                    (reg:DI 2 cx [orig:397 D.25097 ] [397])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:397 D.25097 ] [397]))
        (nil)))
(insn 905 904 906 57 (set (reg/f:DI 0 ax [orig:399 D.25117 ] [399])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:398 D.25103 ] [398]) [0 _395->sh+0 S8 A64])) ge2fitman_fmtext_o.cpp:435 89 {*movdi_internal}
     (nil))
(insn 906 905 907 57 (set (reg:SI 2 cx [729])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:435 90 {*movsi_internal}
     (nil))
(insn 907 906 908 57 (set (reg:DI 2 cx [orig:400 D.25097 ] [400])
        (sign_extend:DI (reg:SI 2 cx [729]))) ge2fitman_fmtext_o.cpp:435 142 {*extendsidi2_rex64}
     (nil))
(insn 908 907 909 57 (parallel [
            (set (reg:DI 2 cx [orig:401 D.25097 ] [401])
                (ashift:DI (reg:DI 2 cx [orig:400 D.25097 ] [400])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 497 {*ashldi3_1}
     (nil))
(insn 909 908 910 57 (parallel [
            (set (reg/f:DI 0 ax [orig:402 D.25117 ] [402])
                (plus:DI (reg/f:DI 0 ax [orig:399 D.25117 ] [399])
                    (reg:DI 2 cx [orig:401 D.25097 ] [401])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 221 {*adddi_1}
     (nil))
(insn 910 909 911 57 (set (reg:HI 0 ax [orig:403 D.25119 ] [403])
        (mem:HI (reg/f:DI 0 ax [orig:402 D.25117 ] [402]) [0 *_399+0 S2 A16])) ge2fitman_fmtext_o.cpp:435 92 {*movhi_internal}
     (nil))
(insn 911 910 912 57 (set (reg:SI 0 ax [730])
        (sign_extend:SI (reg:HI 0 ax [orig:403 D.25119 ] [403]))) ge2fitman_fmtext_o.cpp:435 146 {extendhisi2}
     (nil))
(insn 912 911 1317 57 (set (reg:SF 23 xmm2 [orig:404 D.25120 ] [404])
        (float:SF (reg:SI 0 ax [730]))) ge2fitman_fmtext_o.cpp:435 199 {*floatsisf2_sse}
     (nil))
(insn 1317 912 913 57 (set (reg:SF 0 ax [orig:404 D.25120 ] [404])
        (reg:SF 23 xmm2 [orig:404 D.25120 ] [404])) ge2fitman_fmtext_o.cpp:435 129 {*movsf_internal}
     (nil))
(insn 913 1317 914 57 (set (mem:SF (reg/f:DI 1 dx [orig:395 D.25105 ] [395]) [0 *_392+0 S4 A32])
        (reg:SF 0 ax [orig:404 D.25120 ] [404])) ge2fitman_fmtext_o.cpp:435 129 {*movsf_internal}
     (nil))
(insn 914 913 915 57 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 220 {*addsi_1}
     (nil))
;;  succ:       58 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 (FALLTHRU,DFS_BACK)
;;              56 [100.0%] 
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 915 914 916 58 37 "" [1 uses])
(note 916 915 918 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 918 916 919 58 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:434 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 919 918 1256 58 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 917)
            (pc))) ge2fitman_fmtext_o.cpp:434 596 {*jcc_1}
     (nil)
 -> 917)
;;  succ:       57
;;              59 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1256 919 1257 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1257 1256 1258 59 (set (pc)
        (label_ref 1035)) 636 {jump}
     (nil)
 -> 1035)
;;  succ:       69 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1258 1257 923)
;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 405 406 407 408 409 410 731 732
(code_label 923 1258 924 60 36 "" [1 uses])
(note 924 923 925 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 925 924 926 60 (set (reg:SI 0 ax [731])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(insn 926 925 1318 60 (set (reg:DI 0 ax [orig:405 D.25097 ] [405])
        (sign_extend:DI (reg:SI 0 ax [731]))) ge2fitman_fmtext_o.cpp:437 142 {*extendsidi2_rex64}
     (nil))
(insn 1318 926 927 60 (set (reg:DI 0 ax [orig:406 D.25097 ] [406])
        (reg:DI 0 ax [orig:405 D.25097 ] [405])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 927 1318 1319 60 (parallel [
            (set (reg:DI 0 ax [orig:406 D.25097 ] [406])
                (ashift:DI (reg:DI 0 ax [orig:406 D.25097 ] [406])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:437 497 {*ashldi3_1}
     (nil))
(insn 1319 927 928 60 (set (reg:DI 1 dx [orig:406 D.25097 ] [406])
        (reg:DI 0 ax [orig:406 D.25097 ] [406])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 928 1319 929 60 (set (reg/f:DI 0 ax [732])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 929 928 930 60 (parallel [
            (set (reg/f:DI 0 ax [orig:407 D.25099 ] [407])
                (plus:DI (reg/f:DI 0 ax [732])
                    (reg:DI 1 dx [orig:406 D.25097 ] [406])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:437 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:406 D.25097 ] [406]))
        (nil)))
(insn 930 929 931 60 (set (reg:DI 0 ax [orig:408 D.25100 ] [408])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:407 D.25099 ] [407])
                (const_int 24 [0x18])) [0 _405->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 931 930 932 60 (set (reg:DI 0 ax [orig:409 D.25116 ] [409])
        (reg:DI 0 ax [orig:408 D.25100 ] [408])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 932 931 933 60 (parallel [
            (set (reg:DI 0 ax [orig:410 D.25116 ] [410])
                (plus:DI (reg:DI 0 ax [orig:409 D.25116 ] [409])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:437 221 {*adddi_1}
     (nil))
(insn 933 932 934 60 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:410 D.25116 ] [410])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:437 8 {*cmpdi_1}
     (nil))
(jump_insn 934 933 935 60 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 983)
            (pc))) ge2fitman_fmtext_o.cpp:437 596 {*jcc_1}
     (nil)
 -> 983)
;;  succ:       61 (FALLTHRU)
;;              65
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 935 934 936 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 936 935 1259 61 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
(jump_insn 1259 936 1260 61 (set (pc)
        (label_ref 966)) ge2fitman_fmtext_o.cpp:438 636 {jump}
     (nil)
 -> 966)
;;  succ:       63 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1260 1259 977)
;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 733 734 735 736 737 738 739 740
(code_label 977 1260 939 62 42 "" [1 uses])
(note 939 977 940 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 940 939 941 62 (set (reg:SI 0 ax [733])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 941 940 942 62 (set (reg:DI 0 ax [orig:417 D.25097 ] [417])
        (sign_extend:DI (reg:SI 0 ax [733]))) ge2fitman_fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 942 941 943 62 (parallel [
            (set (reg:DI 1 dx [orig:418 D.25097 ] [418])
                (ashift:DI (reg:DI 0 ax [orig:417 D.25097 ] [417])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:439 497 {*ashldi3_1}
     (nil))
(insn 943 942 944 62 (set (reg/f:DI 0 ax [734])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 944 943 945 62 (parallel [
            (set (reg/f:DI 0 ax [orig:419 D.25103 ] [419])
                (plus:DI (reg/f:DI 0 ax [734])
                    (reg:DI 1 dx [orig:418 D.25097 ] [418])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:439 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:418 D.25097 ] [418]))
        (nil)))
(insn 945 944 946 62 (set (reg/f:DI 0 ax [orig:420 D.25114 ] [420])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:419 D.25103 ] [419]) [0 _418->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 946 945 947 62 (set (reg:SI 1 dx [735])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 947 946 948 62 (set (reg:DI 1 dx [orig:421 D.25097 ] [421])
        (sign_extend:DI (reg:SI 1 dx [735]))) ge2fitman_fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 948 947 949 62 (parallel [
            (set (reg:DI 1 dx [orig:422 D.25097 ] [422])
                (ashift:DI (reg:DI 1 dx [orig:421 D.25097 ] [421])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:439 497 {*ashldi3_1}
     (nil))
(insn 949 948 950 62 (parallel [
            (set (reg/f:DI 0 ax [orig:423 D.25114 ] [423])
                (plus:DI (reg/f:DI 0 ax [orig:420 D.25114 ] [420])
                    (reg:DI 1 dx [orig:422 D.25097 ] [422])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:439 221 {*adddi_1}
     (nil))
(insn 950 949 951 62 (set (reg:DI 0 ax [orig:424 D.25100 ] [424])
        (mem:DI (reg/f:DI 0 ax [orig:423 D.25114 ] [423]) [0 *_422+0 S8 A64])) ge2fitman_fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 951 950 1320 62 (set (reg:SF 24 xmm3 [736])
        (float:SF (reg:DI 0 ax [orig:424 D.25100 ] [424]))) ge2fitman_fmtext_o.cpp:439 200 {*floatdisf2_sse}
     (nil))
(insn 1320 951 952 62 (set (reg:SF 0 ax [736])
        (reg:SF 24 xmm3 [736])) ge2fitman_fmtext_o.cpp:439 129 {*movsf_internal}
     (nil))
(insn 952 1320 953 62 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])
        (reg:SF 0 ax [736])) ge2fitman_fmtext_o.cpp:439 129 {*movsf_internal}
     (nil))
(insn 953 952 954 62 (set (reg:SI 0 ax [737])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:440 90 {*movsi_internal}
     (nil))
(insn 954 953 955 62 (set (reg:DI 0 ax [orig:425 D.25097 ] [425])
        (sign_extend:DI (reg:SI 0 ax [737]))) ge2fitman_fmtext_o.cpp:440 142 {*extendsidi2_rex64}
     (nil))
(insn 955 954 956 62 (parallel [
            (set (reg:DI 1 dx [orig:426 D.25097 ] [426])
                (ashift:DI (reg:DI 0 ax [orig:425 D.25097 ] [425])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:440 497 {*ashldi3_1}
     (nil))
(insn 956 955 957 62 (set (reg/f:DI 0 ax [738])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:440 89 {*movdi_internal}
     (nil))
(insn 957 956 958 62 (parallel [
            (set (reg/f:DI 0 ax [orig:427 D.25103 ] [427])
                (plus:DI (reg/f:DI 0 ax [738])
                    (reg:DI 1 dx [orig:426 D.25097 ] [426])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:440 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:426 D.25097 ] [426]))
        (nil)))
(insn 958 957 959 62 (set (reg/f:DI 0 ax [orig:428 D.25105 ] [428])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:427 D.25103 ] [427]) [0 _427->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:440 89 {*movdi_internal}
     (nil))
(insn 959 958 960 62 (set (reg:SI 1 dx [739])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:440 90 {*movsi_internal}
     (nil))
(insn 960 959 961 62 (set (reg:DI 1 dx [orig:429 D.25097 ] [429])
        (sign_extend:DI (reg:SI 1 dx [739]))) ge2fitman_fmtext_o.cpp:440 142 {*extendsidi2_rex64}
     (nil))
(insn 961 960 962 62 (parallel [
            (set (reg:DI 1 dx [orig:430 D.25097 ] [430])
                (ashift:DI (reg:DI 1 dx [orig:429 D.25097 ] [429])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:440 497 {*ashldi3_1}
     (nil))
(insn 962 961 963 62 (parallel [
            (set (reg/f:DI 1 dx [orig:431 D.25105 ] [431])
                (plus:DI (reg:DI 1 dx [orig:430 D.25097 ] [430])
                    (reg/f:DI 0 ax [orig:428 D.25105 ] [428])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:440 221 {*adddi_1}
     (nil))
(insn 963 962 964 62 (set (reg:SF 0 ax [740])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])) ge2fitman_fmtext_o.cpp:440 129 {*movsf_internal}
     (nil))
(insn 964 963 965 62 (set (mem:SF (reg/f:DI 1 dx [orig:431 D.25105 ] [431]) [0 *_431+0 S4 A32])
        (reg:SF 0 ax [740])) ge2fitman_fmtext_o.cpp:440 129 {*movsf_internal}
     (nil))
(insn 965 964 966 62 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:438 220 {*addsi_1}
     (nil))
;;  succ:       63 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62 (FALLTHRU,DFS_BACK)
;;              61 [100.0%] 
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 411 412 413 414 415 416 741 742 743
(code_label 966 965 967 63 41 "" [1 uses])
(note 967 966 968 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 968 967 969 63 (set (reg:SI 0 ax [741])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
(insn 969 968 970 63 (set (reg:DI 0 ax [orig:411 D.25100 ] [411])
        (sign_extend:DI (reg:SI 0 ax [741]))) ge2fitman_fmtext_o.cpp:438 142 {*extendsidi2_rex64}
     (nil))
(insn 970 969 971 63 (set (reg:SI 1 dx [742])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
(insn 971 970 1321 63 (set (reg:DI 1 dx [orig:412 D.25097 ] [412])
        (sign_extend:DI (reg:SI 1 dx [742]))) ge2fitman_fmtext_o.cpp:438 142 {*extendsidi2_rex64}
     (nil))
(insn 1321 971 972 63 (set (reg:DI 2 cx [orig:413 D.25097 ] [413])
        (reg:DI 1 dx [orig:412 D.25097 ] [412])) ge2fitman_fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 972 1321 973 63 (parallel [
            (set (reg:DI 2 cx [orig:413 D.25097 ] [413])
                (ashift:DI (reg:DI 2 cx [orig:413 D.25097 ] [413])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:438 497 {*ashldi3_1}
     (nil))
(insn 973 972 974 63 (set (reg/f:DI 1 dx [743])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 974 973 975 63 (parallel [
            (set (reg/f:DI 1 dx [orig:414 D.25099 ] [414])
                (plus:DI (reg/f:DI 1 dx [743])
                    (reg:DI 2 cx [orig:413 D.25097 ] [413])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:438 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:413 D.25097 ] [413]))
        (nil)))
(insn 975 974 976 63 (set (reg:DI 1 dx [orig:415 D.25100 ] [415])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:414 D.25099 ] [414])
                (const_int 16 [0x10])) [0 _413->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 976 975 978 63 (parallel [
            (set (reg:DI 1 dx [orig:416 D.25100 ] [416])
                (ashift:DI (reg:DI 1 dx [orig:415 D.25100 ] [415])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:438 497 {*ashldi3_1}
     (nil))
(insn 978 976 979 63 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:411 D.25100 ] [411])
            (reg:DI 1 dx [orig:416 D.25100 ] [416]))) ge2fitman_fmtext_o.cpp:438 8 {*cmpdi_1}
     (nil))
(jump_insn 979 978 1261 63 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 977)
            (pc))) ge2fitman_fmtext_o.cpp:438 596 {*jcc_1}
     (nil)
 -> 977)
;;  succ:       62
;;              64 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1261 979 1262 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1262 1261 1263 64 (set (pc)
        (label_ref 1035)) 636 {jump}
     (nil)
 -> 1035)
;;  succ:       69 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1263 1262 983)
;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 432 433 434 435 436 437 744 745
(code_label 983 1263 984 65 40 "" [1 uses])
(note 984 983 985 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 985 984 986 65 (set (reg:SI 0 ax [744])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:444 90 {*movsi_internal}
     (nil))
(insn 986 985 1323 65 (set (reg:DI 0 ax [orig:432 D.25097 ] [432])
        (sign_extend:DI (reg:SI 0 ax [744]))) ge2fitman_fmtext_o.cpp:444 142 {*extendsidi2_rex64}
     (nil))
(insn 1323 986 987 65 (set (reg:DI 0 ax [orig:433 D.25097 ] [433])
        (reg:DI 0 ax [orig:432 D.25097 ] [432])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 987 1323 1324 65 (parallel [
            (set (reg:DI 0 ax [orig:433 D.25097 ] [433])
                (ashift:DI (reg:DI 0 ax [orig:433 D.25097 ] [433])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:444 497 {*ashldi3_1}
     (nil))
(insn 1324 987 988 65 (set (reg:DI 1 dx [orig:433 D.25097 ] [433])
        (reg:DI 0 ax [orig:433 D.25097 ] [433])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 988 1324 989 65 (set (reg/f:DI 0 ax [745])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 989 988 990 65 (parallel [
            (set (reg/f:DI 0 ax [orig:434 D.25099 ] [434])
                (plus:DI (reg/f:DI 0 ax [745])
                    (reg:DI 1 dx [orig:433 D.25097 ] [433])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:444 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:433 D.25097 ] [433]))
        (nil)))
(insn 990 989 991 65 (set (reg:DI 0 ax [orig:435 D.25100 ] [435])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:434 D.25099 ] [434])
                (const_int 24 [0x18])) [0 _435->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 991 990 992 65 (set (reg:DI 0 ax [orig:436 D.25116 ] [436])
        (reg:DI 0 ax [orig:435 D.25100 ] [435])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 992 991 993 65 (parallel [
            (set (reg:DI 0 ax [orig:437 D.25116 ] [437])
                (plus:DI (reg:DI 0 ax [orig:436 D.25116 ] [436])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:444 221 {*adddi_1}
     (nil))
(insn 993 992 994 65 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:437 D.25116 ] [437])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:444 8 {*cmpdi_1}
     (nil))
(jump_insn 994 993 995 65 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 1035)
            (pc))) ge2fitman_fmtext_o.cpp:444 596 {*jcc_1}
     (nil)
 -> 1035)
;;  succ:       66 (FALLTHRU)
;;              69
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 995 994 996 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 996 995 1264 66 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:445 90 {*movsi_internal}
     (nil))
(jump_insn 1264 996 1265 66 (set (pc)
        (label_ref 1021)) ge2fitman_fmtext_o.cpp:445 636 {jump}
     (nil)
 -> 1021)
;;  succ:       68 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1265 1264 1032)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 444 445 446 447 448 449 450 451 452 453 454 746 747 748 749 750 751 752
(code_label 1032 1265 999 67 44 "" [1 uses])
(note 999 1032 1000 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 1000 999 1001 67 (set (reg:SI 0 ax [746])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:447 90 {*movsi_internal}
     (nil))
(insn 1001 1000 1002 67 (set (reg:DI 0 ax [orig:444 D.25097 ] [444])
        (sign_extend:DI (reg:SI 0 ax [746]))) ge2fitman_fmtext_o.cpp:447 142 {*extendsidi2_rex64}
     (nil))
(insn 1002 1001 1003 67 (parallel [
            (set (reg:DI 1 dx [orig:445 D.25097 ] [445])
                (ashift:DI (reg:DI 0 ax [orig:444 D.25097 ] [444])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:447 497 {*ashldi3_1}
     (nil))
(insn 1003 1002 1004 67 (set (reg/f:DI 0 ax [747])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:447 89 {*movdi_internal}
     (nil))
(insn 1004 1003 1005 67 (parallel [
            (set (reg/f:DI 0 ax [orig:446 D.25115 ] [446])
                (plus:DI (reg/f:DI 0 ax [747])
                    (reg:DI 1 dx [orig:445 D.25097 ] [445])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:447 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 1 dx [orig:445 D.25097 ] [445]))
        (nil)))
(insn 1005 1004 1006 67 (set (reg:SI 0 ax [orig:447 D.25096 ] [447])
        (mem:SI (reg/f:DI 0 ax [orig:446 D.25115 ] [446]) [0 *_448+0 S4 A32])) ge2fitman_fmtext_o.cpp:447 90 {*movsi_internal}
     (nil))
(insn 1006 1005 1325 67 (set (reg:SF 25 xmm4 [748])
        (float:SF (reg:SI 0 ax [orig:447 D.25096 ] [447]))) ge2fitman_fmtext_o.cpp:447 199 {*floatsisf2_sse}
     (nil))
(insn 1325 1006 1007 67 (set (reg:SF 0 ax [748])
        (reg:SF 25 xmm4 [748])) ge2fitman_fmtext_o.cpp:447 129 {*movsf_internal}
     (nil))
(insn 1007 1325 1008 67 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])
        (reg:SF 0 ax [748])) ge2fitman_fmtext_o.cpp:447 129 {*movsf_internal}
     (nil))
(insn 1008 1007 1009 67 (set (reg:SI 0 ax [749])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:449 90 {*movsi_internal}
     (nil))
(insn 1009 1008 1010 67 (set (reg:DI 0 ax [orig:448 D.25097 ] [448])
        (sign_extend:DI (reg:SI 0 ax [749]))) ge2fitman_fmtext_o.cpp:449 142 {*extendsidi2_rex64}
     (nil))
(insn 1010 1009 1011 67 (parallel [
            (set (reg:DI 1 dx [orig:449 D.25097 ] [449])
                (ashift:DI (reg:DI 0 ax [orig:448 D.25097 ] [448])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:449 497 {*ashldi3_1}
     (nil))
(insn 1011 1010 1012 67 (set (reg/f:DI 0 ax [750])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:449 89 {*movdi_internal}
     (nil))
(insn 1012 1011 1013 67 (parallel [
            (set (reg/f:DI 0 ax [orig:450 D.25103 ] [450])
                (plus:DI (reg/f:DI 0 ax [750])
                    (reg:DI 1 dx [orig:449 D.25097 ] [449])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:449 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:449 D.25097 ] [449]))
        (nil)))
(insn 1013 1012 1014 67 (set (reg/f:DI 0 ax [orig:451 D.25105 ] [451])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:450 D.25103 ] [450]) [0 _453->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:449 89 {*movdi_internal}
     (nil))
(insn 1014 1013 1015 67 (set (reg:SI 1 dx [751])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:449 90 {*movsi_internal}
     (nil))
(insn 1015 1014 1016 67 (set (reg:DI 1 dx [orig:452 D.25097 ] [452])
        (sign_extend:DI (reg:SI 1 dx [751]))) ge2fitman_fmtext_o.cpp:449 142 {*extendsidi2_rex64}
     (nil))
(insn 1016 1015 1017 67 (parallel [
            (set (reg:DI 1 dx [orig:453 D.25097 ] [453])
                (ashift:DI (reg:DI 1 dx [orig:452 D.25097 ] [452])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:449 497 {*ashldi3_1}
     (nil))
(insn 1017 1016 1018 67 (parallel [
            (set (reg/f:DI 1 dx [orig:454 D.25105 ] [454])
                (plus:DI (reg:DI 1 dx [orig:453 D.25097 ] [453])
                    (reg/f:DI 0 ax [orig:451 D.25105 ] [451])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:449 221 {*adddi_1}
     (nil))
(insn 1018 1017 1019 67 (set (reg:SF 0 ax [752])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])) ge2fitman_fmtext_o.cpp:449 129 {*movsf_internal}
     (nil))
(insn 1019 1018 1020 67 (set (mem:SF (reg/f:DI 1 dx [orig:454 D.25105 ] [454]) [0 *_457+0 S4 A32])
        (reg:SF 0 ax [752])) ge2fitman_fmtext_o.cpp:449 129 {*movsf_internal}
     (nil))
(insn 1020 1019 1021 67 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:445 220 {*addsi_1}
     (nil))
;;  succ:       68 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU,DFS_BACK)
;;              66 [100.0%] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 438 439 440 441 442 443 753 754 755
(code_label 1021 1020 1022 68 43 "" [1 uses])
(note 1022 1021 1023 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 1023 1022 1024 68 (set (reg:SI 0 ax [753])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:445 90 {*movsi_internal}
     (nil))
(insn 1024 1023 1025 68 (set (reg:DI 0 ax [orig:438 D.25100 ] [438])
        (sign_extend:DI (reg:SI 0 ax [753]))) ge2fitman_fmtext_o.cpp:445 142 {*extendsidi2_rex64}
     (nil))
(insn 1025 1024 1026 68 (set (reg:SI 1 dx [754])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:445 90 {*movsi_internal}
     (nil))
(insn 1026 1025 1326 68 (set (reg:DI 1 dx [orig:439 D.25097 ] [439])
        (sign_extend:DI (reg:SI 1 dx [754]))) ge2fitman_fmtext_o.cpp:445 142 {*extendsidi2_rex64}
     (nil))
(insn 1326 1026 1027 68 (set (reg:DI 2 cx [orig:440 D.25097 ] [440])
        (reg:DI 1 dx [orig:439 D.25097 ] [439])) ge2fitman_fmtext_o.cpp:445 89 {*movdi_internal}
     (nil))
(insn 1027 1326 1028 68 (parallel [
            (set (reg:DI 2 cx [orig:440 D.25097 ] [440])
                (ashift:DI (reg:DI 2 cx [orig:440 D.25097 ] [440])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:445 497 {*ashldi3_1}
     (nil))
(insn 1028 1027 1029 68 (set (reg/f:DI 1 dx [755])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:445 89 {*movdi_internal}
     (nil))
(insn 1029 1028 1030 68 (parallel [
            (set (reg/f:DI 1 dx [orig:441 D.25099 ] [441])
                (plus:DI (reg/f:DI 1 dx [755])
                    (reg:DI 2 cx [orig:440 D.25097 ] [440])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:445 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:440 D.25097 ] [440]))
        (nil)))
(insn 1030 1029 1031 68 (set (reg:DI 1 dx [orig:442 D.25100 ] [442])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:441 D.25099 ] [441])
                (const_int 16 [0x10])) [0 _443->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:445 89 {*movdi_internal}
     (nil))
(insn 1031 1030 1033 68 (parallel [
            (set (reg:DI 1 dx [orig:443 D.25100 ] [443])
                (ashift:DI (reg:DI 1 dx [orig:442 D.25100 ] [442])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:445 497 {*ashldi3_1}
     (nil))
(insn 1033 1031 1034 68 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:438 D.25100 ] [438])
            (reg:DI 1 dx [orig:443 D.25100 ] [443]))) ge2fitman_fmtext_o.cpp:445 8 {*cmpdi_1}
     (nil))
(jump_insn 1034 1033 1035 68 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1032)
            (pc))) ge2fitman_fmtext_o.cpp:445 596 {*jcc_1}
     (nil)
 -> 1032)
;;  succ:       67
;;              69 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;;              59 [100.0%] 
;;              65
;;              64 [100.0%] 
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1035 1034 1036 69 39 "" [3 uses])
(note 1036 1035 1037 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 1037 1036 1038 69 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:457 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1038 1037 1039 69 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1074)
            (pc))) ge2fitman_fmtext_o.cpp:457 596 {*jcc_1}
     (nil)
 -> 1074)
;;  succ:       70 (FALLTHRU)
;;              71
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69 (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 455 456 457 458 459 460 461 462 463 464 465 466 467 468 756 757 758 759 760 761 762 763 764
(note 1039 1038 1040 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 1040 1039 1041 70 (set (reg:SI 0 ax [756])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 1041 1040 1042 70 (parallel [
            (set (reg:SI 1 dx [orig:455 D.25096 ] [455])
                (plus:SI (reg:SI 0 ax [756])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:464 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -68 [0xffffffffffffffbc])) [0 countChannel+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1042 1041 1043 70 (set (reg:SI 0 ax [757])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 1043 1042 1045 70 (parallel [
            (set (reg:SI 0 ax [orig:456 D.25096 ] [456])
                (plus:SI (reg:SI 0 ax [757])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:464 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 countFID+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1045 1043 1046 70 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:456 D.25096 ] [456])) ge2fitman_fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 1046 1045 1047 70 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b27d5543da8 *.LC14>)) ge2fitman_fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 1047 1046 1048 70 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:464 93 {*movqi_internal}
     (nil))
(call_insn 1048 1047 1049 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b27d3ecee00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:464 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 1049 1048 1050 70 (set (reg:SI 0 ax [758])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1050 1049 1051 70 (parallel [
            (set (reg:SI 2 cx [orig:457 D.25096 ] [457])
                (plus:SI (reg:SI 0 ax [758])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 countFID+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1051 1050 1052 70 (set (reg:SI 0 ax [759])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1052 1051 1328 70 (set (reg:DI 0 ax [orig:458 D.25097 ] [458])
        (sign_extend:DI (reg:SI 0 ax [759]))) ge2fitman_fmtext_o.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 1328 1052 1053 70 (set (reg:DI 0 ax [orig:459 D.25097 ] [459])
        (reg:DI 0 ax [orig:458 D.25097 ] [458])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1053 1328 1329 70 (parallel [
            (set (reg:DI 0 ax [orig:459 D.25097 ] [459])
                (ashift:DI (reg:DI 0 ax [orig:459 D.25097 ] [459])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 497 {*ashldi3_1}
     (nil))
(insn 1329 1053 1054 70 (set (reg:DI 1 dx [orig:459 D.25097 ] [459])
        (reg:DI 0 ax [orig:459 D.25097 ] [459])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1054 1329 1055 70 (set (reg/f:DI 0 ax [760])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1055 1054 1056 70 (parallel [
            (set (reg/f:DI 0 ax [orig:460 D.25099 ] [460])
                (plus:DI (reg/f:DI 0 ax [760])
                    (reg:DI 1 dx [orig:459 D.25097 ] [459])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:459 D.25097 ] [459]))
        (nil)))
(insn 1056 1055 1057 70 (set (reg:DI 0 ax [orig:461 D.25100 ] [461])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:460 D.25099 ] [460])
                (const_int 16 [0x10])) [0 _464->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1057 1056 1058 70 (set (reg:SI 0 ax [orig:462 D.25109 ] [462])
        (reg:SI 0 ax [orig:461 D.25100 ] [461])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1058 1057 1059 70 (parallel [
            (set (reg:SI 0 ax [orig:463 D.25109 ] [463])
                (ashift:SI (reg:SI 0 ax [orig:462 D.25109 ] [462])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 496 {*ashlsi3_1}
     (nil))
(insn 1059 1058 1060 70 (set (reg:SI 5 di [orig:464 D.25096 ] [464])
        (reg:SI 0 ax [orig:463 D.25109 ] [463])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1060 1059 1061 70 (set (reg:SI 0 ax [761])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1061 1060 1062 70 (set (reg:DI 0 ax [orig:465 D.25097 ] [465])
        (sign_extend:DI (reg:SI 0 ax [761]))) ge2fitman_fmtext_o.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 1062 1061 1063 70 (parallel [
            (set (reg:DI 1 dx [orig:466 D.25097 ] [466])
                (ashift:DI (reg:DI 0 ax [orig:465 D.25097 ] [465])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 497 {*ashldi3_1}
     (nil))
(insn 1063 1062 1064 70 (set (reg/f:DI 0 ax [762])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1064 1063 1065 70 (parallel [
            (set (reg/f:DI 0 ax [orig:467 D.25105 ] [467])
                (plus:DI (reg/f:DI 0 ax [762])
                    (reg:DI 1 dx [orig:466 D.25097 ] [466])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:466 D.25097 ] [466]))
        (nil)))
(insn 1065 1064 1066 70 (set (reg:SF 0 ax [orig:468 D.25120 ] [468])
        (mem:SF (reg/f:DI 0 ax [orig:467 D.25105 ] [467]) [0 *_471+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 129 {*movsf_internal}
     (nil))
(insn 1066 1065 1067 70 (set (reg:SI 1 dx [763])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1067 1066 1072 70 (set (reg:DI 4 si [764])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1072 1067 1330 70 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 %sfp+-136 S4 A32])
        (reg:SF 0 ax [orig:468 D.25120 ] [468])) ge2fitman_fmtext_o.cpp:477 129 {*movsf_internal}
     (nil))
(insn 1330 1072 1073 70 (set (reg:SF 21 xmm0)
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 %sfp+-136 S4 A32])) ge2fitman_fmtext_o.cpp:477 129 {*movsf_internal}
     (nil))
(call_insn 1073 1330 1074 70 (call (mem:QI (symbol_ref:DI ("_Z9fix_phasefiP10Precision1ii") [flags 0x3]  <function_decl 0x2b27d5468e00 fix_phase>) [0 fix_phase S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:477 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
;;  succ:       71 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69
;;              70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 469 765
(code_label 1074 1073 1075 71 45 "" [1 uses])
(note 1075 1074 1076 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 1076 1075 1077 71 (set (reg:SI 0 ax [765])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:480 90 {*movsi_internal}
     (nil))
(insn 1077 1076 1078 71 (parallel [
            (set (reg:SI 0 ax [orig:469 D.25096 ] [469])
                (plus:SI (reg:SI 0 ax [765])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:480 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 countFID+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1078 1077 1079 71 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:469 D.25096 ] [469])) ge2fitman_fmtext_o.cpp:480 90 {*movsi_internal}
     (nil))
(insn 1079 1078 1080 71 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b27d5543e40 *.LC15>)) ge2fitman_fmtext_o.cpp:480 89 {*movdi_internal}
     (nil))
(insn 1080 1079 1081 71 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:480 93 {*movqi_internal}
     (nil))
(call_insn 1081 1080 1082 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b27d3ecee00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:480 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 1082 1081 1266 71 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:516 90 {*movsi_internal}
     (nil))
(jump_insn 1266 1082 1267 71 (set (pc)
        (label_ref 1158)) ge2fitman_fmtext_o.cpp:516 636 {jump}
     (nil)
 -> 1158)
;;  succ:       73 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1267 1266 1169)
;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783
(code_label 1169 1267 1085 72 47 "" [1 uses])
(note 1085 1169 1086 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 1086 1085 1087 72 (set (reg:SI 0 ax [766])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1087 1086 1088 72 (set (reg:DI 0 ax [orig:476 D.25097 ] [476])
        (sign_extend:DI (reg:SI 0 ax [766]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1088 1087 1089 72 (parallel [
            (set (reg:DI 1 dx [orig:477 D.25097 ] [477])
                (ashift:DI (reg:DI 0 ax [orig:476 D.25097 ] [476])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 497 {*ashldi3_1}
     (nil))
(insn 1089 1088 1090 72 (set (reg/f:DI 0 ax [767])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1090 1089 1091 72 (parallel [
            (set (reg/f:DI 0 ax [orig:478 D.25104 ] [478])
                (plus:DI (reg/f:DI 0 ax [767])
                    (reg:DI 1 dx [orig:477 D.25097 ] [477])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:477 D.25097 ] [477]))
        (nil)))
(insn 1091 1090 1092 72 (set (reg/f:DI 0 ax [orig:479 D.25105 ] [479])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:478 D.25104 ] [478]) [0 _483->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1092 1091 1093 72 (set (reg:SI 1 dx [768])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1093 1092 1094 72 (set (reg:DI 1 dx [orig:480 D.25097 ] [480])
        (sign_extend:DI (reg:SI 1 dx [768]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1094 1093 1095 72 (parallel [
            (set (reg:DI 1 dx [orig:481 D.25097 ] [481])
                (ashift:DI (reg:DI 1 dx [orig:480 D.25097 ] [480])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 497 {*ashldi3_1}
     (nil))
(insn 1095 1094 1096 72 (parallel [
            (set (reg/f:DI 1 dx [orig:482 D.25105 ] [482])
                (plus:DI (reg:DI 1 dx [orig:481 D.25097 ] [481])
                    (reg/f:DI 0 ax [orig:479 D.25105 ] [479])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 221 {*adddi_1}
     (nil))
(insn 1096 1095 1097 72 (set (reg:SI 0 ax [769])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1097 1096 1098 72 (set (reg:DI 0 ax [orig:483 D.25097 ] [483])
        (sign_extend:DI (reg:SI 0 ax [769]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1098 1097 1099 72 (parallel [
            (set (reg:DI 2 cx [orig:484 D.25097 ] [484])
                (ashift:DI (reg:DI 0 ax [orig:483 D.25097 ] [483])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 497 {*ashldi3_1}
     (nil))
(insn 1099 1098 1100 72 (set (reg/f:DI 0 ax [770])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1100 1099 1101 72 (parallel [
            (set (reg/f:DI 0 ax [orig:485 D.25104 ] [485])
                (plus:DI (reg/f:DI 0 ax [770])
                    (reg:DI 2 cx [orig:484 D.25097 ] [484])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 2 cx [orig:484 D.25097 ] [484]))
        (nil)))
(insn 1101 1100 1102 72 (set (reg/f:DI 0 ax [orig:486 D.25105 ] [486])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:485 D.25104 ] [485]) [0 _490->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1102 1101 1103 72 (set (reg:SI 2 cx [771])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1103 1102 1104 72 (set (reg:DI 2 cx [orig:487 D.25097 ] [487])
        (sign_extend:DI (reg:SI 2 cx [771]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1104 1103 1105 72 (parallel [
            (set (reg:DI 2 cx [orig:488 D.25097 ] [488])
                (ashift:DI (reg:DI 2 cx [orig:487 D.25097 ] [487])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 497 {*ashldi3_1}
     (nil))
(insn 1105 1104 1106 72 (parallel [
            (set (reg/f:DI 0 ax [orig:489 D.25105 ] [489])
                (plus:DI (reg/f:DI 0 ax [orig:486 D.25105 ] [486])
                    (reg:DI 2 cx [orig:488 D.25097 ] [488])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 221 {*adddi_1}
     (nil))
(insn 1106 1105 1107 72 (set (reg:SF 22 xmm1 [orig:490 D.25120 ] [490])
        (mem:SF (reg/f:DI 0 ax [orig:489 D.25105 ] [489]) [0 *_494+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 129 {*movsf_internal}
     (nil))
(insn 1107 1106 1108 72 (set (reg:SI 0 ax [772])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1108 1107 1109 72 (set (reg:DI 0 ax [orig:491 D.25097 ] [491])
        (sign_extend:DI (reg:SI 0 ax [772]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1109 1108 1110 72 (parallel [
            (set (reg:DI 2 cx [orig:492 D.25097 ] [492])
                (ashift:DI (reg:DI 0 ax [orig:491 D.25097 ] [491])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 497 {*ashldi3_1}
     (nil))
(insn 1110 1109 1111 72 (set (reg/f:DI 0 ax [773])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1111 1110 1112 72 (parallel [
            (set (reg/f:DI 0 ax [orig:493 D.25103 ] [493])
                (plus:DI (reg/f:DI 0 ax [773])
                    (reg:DI 2 cx [orig:492 D.25097 ] [492])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:492 D.25097 ] [492]))
        (nil)))
(insn 1112 1111 1113 72 (set (reg/f:DI 0 ax [orig:494 D.25105 ] [494])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:493 D.25103 ] [493]) [0 _498->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1113 1112 1114 72 (set (reg:SI 2 cx [774])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1114 1113 1115 72 (set (reg:DI 2 cx [orig:495 D.25097 ] [495])
        (sign_extend:DI (reg:SI 2 cx [774]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1115 1114 1116 72 (parallel [
            (set (reg:DI 2 cx [orig:496 D.25097 ] [496])
                (ashift:DI (reg:DI 2 cx [orig:495 D.25097 ] [495])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 497 {*ashldi3_1}
     (nil))
(insn 1116 1115 1117 72 (parallel [
            (set (reg/f:DI 0 ax [orig:497 D.25105 ] [497])
                (plus:DI (reg/f:DI 0 ax [orig:494 D.25105 ] [494])
                    (reg:DI 2 cx [orig:496 D.25097 ] [496])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 221 {*adddi_1}
     (nil))
(insn 1117 1116 1118 72 (set (reg:SF 21 xmm0 [orig:498 D.25120 ] [498])
        (mem:SF (reg/f:DI 0 ax [orig:497 D.25105 ] [497]) [0 *_502+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 129 {*movsf_internal}
     (nil))
(insn 1118 1117 1332 72 (set (reg:SF 22 xmm1 [orig:499 D.25120 ] [499])
        (plus:SF (reg:SF 22 xmm1 [orig:499 D.25120 ] [499])
            (reg:SF 21 xmm0 [orig:498 D.25120 ] [498]))) ge2fitman_fmtext_o.cpp:521 775 {*fop_sf_comm_sse}
     (nil))
(insn 1332 1118 1119 72 (set (reg:SF 0 ax [orig:499 D.25120 ] [499])
        (reg:SF 22 xmm1 [orig:499 D.25120 ] [499])) ge2fitman_fmtext_o.cpp:521 129 {*movsf_internal}
     (nil))
(insn 1119 1332 1120 72 (set (mem:SF (reg/f:DI 1 dx [orig:482 D.25105 ] [482]) [0 *_487+0 S4 A32])
        (reg:SF 0 ax [orig:499 D.25120 ] [499])) ge2fitman_fmtext_o.cpp:521 129 {*movsf_internal}
     (nil))
(insn 1120 1119 1121 72 (set (reg:SI 0 ax [775])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1121 1120 1122 72 (set (reg:DI 0 ax [orig:500 D.25097 ] [500])
        (sign_extend:DI (reg:SI 0 ax [775]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1122 1121 1123 72 (parallel [
            (set (reg:DI 1 dx [orig:501 D.25097 ] [501])
                (ashift:DI (reg:DI 0 ax [orig:500 D.25097 ] [500])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 497 {*ashldi3_1}
     (nil))
(insn 1123 1122 1124 72 (set (reg/f:DI 0 ax [776])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1124 1123 1125 72 (parallel [
            (set (reg/f:DI 0 ax [orig:502 D.25104 ] [502])
                (plus:DI (reg/f:DI 0 ax [776])
                    (reg:DI 1 dx [orig:501 D.25097 ] [501])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:501 D.25097 ] [501]))
        (nil)))
(insn 1125 1124 1126 72 (set (reg/f:DI 0 ax [orig:503 D.25105 ] [503])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:502 D.25104 ] [502]) [0 _507->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1126 1125 1127 72 (set (reg:SI 1 dx [777])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1127 1126 1128 72 (set (reg:DI 1 dx [orig:504 D.25106 ] [504])
        (sign_extend:DI (reg:SI 1 dx [777]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1128 1127 1129 72 (parallel [
            (set (reg:DI 1 dx [orig:505 D.25106 ] [505])
                (plus:DI (reg:DI 1 dx [orig:504 D.25106 ] [504])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (nil))
(insn 1129 1128 1130 72 (parallel [
            (set (reg:DI 1 dx [orig:506 D.25106 ] [506])
                (ashift:DI (reg:DI 1 dx [orig:505 D.25106 ] [505])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 497 {*ashldi3_1}
     (nil))
(insn 1130 1129 1131 72 (parallel [
            (set (reg/f:DI 1 dx [orig:507 D.25105 ] [507])
                (plus:DI (reg:DI 1 dx [orig:506 D.25106 ] [506])
                    (reg/f:DI 0 ax [orig:503 D.25105 ] [503])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (nil))
(insn 1131 1130 1132 72 (set (reg:SI 0 ax [778])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1132 1131 1133 72 (set (reg:DI 0 ax [orig:508 D.25097 ] [508])
        (sign_extend:DI (reg:SI 0 ax [778]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1133 1132 1134 72 (parallel [
            (set (reg:DI 2 cx [orig:509 D.25097 ] [509])
                (ashift:DI (reg:DI 0 ax [orig:508 D.25097 ] [508])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 497 {*ashldi3_1}
     (nil))
(insn 1134 1133 1135 72 (set (reg/f:DI 0 ax [779])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1135 1134 1136 72 (parallel [
            (set (reg/f:DI 0 ax [orig:510 D.25104 ] [510])
                (plus:DI (reg/f:DI 0 ax [779])
                    (reg:DI 2 cx [orig:509 D.25097 ] [509])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 2 cx [orig:509 D.25097 ] [509]))
        (nil)))
(insn 1136 1135 1137 72 (set (reg/f:DI 0 ax [orig:511 D.25105 ] [511])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:510 D.25104 ] [510]) [0 _515->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1137 1136 1138 72 (set (reg:SI 2 cx [780])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1138 1137 1139 72 (set (reg:DI 2 cx [orig:512 D.25106 ] [512])
        (sign_extend:DI (reg:SI 2 cx [780]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1139 1138 1140 72 (parallel [
            (set (reg:DI 2 cx [orig:513 D.25106 ] [513])
                (plus:DI (reg:DI 2 cx [orig:512 D.25106 ] [512])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (nil))
(insn 1140 1139 1141 72 (parallel [
            (set (reg:DI 2 cx [orig:514 D.25106 ] [514])
                (ashift:DI (reg:DI 2 cx [orig:513 D.25106 ] [513])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 497 {*ashldi3_1}
     (nil))
(insn 1141 1140 1142 72 (parallel [
            (set (reg/f:DI 0 ax [orig:515 D.25105 ] [515])
                (plus:DI (reg/f:DI 0 ax [orig:511 D.25105 ] [511])
                    (reg:DI 2 cx [orig:514 D.25106 ] [514])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (nil))
(insn 1142 1141 1143 72 (set (reg:SF 22 xmm1 [orig:516 D.25120 ] [516])
        (mem:SF (reg/f:DI 0 ax [orig:515 D.25105 ] [515]) [0 *_520+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 129 {*movsf_internal}
     (nil))
(insn 1143 1142 1144 72 (set (reg:SI 0 ax [781])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1144 1143 1145 72 (set (reg:DI 0 ax [orig:517 D.25097 ] [517])
        (sign_extend:DI (reg:SI 0 ax [781]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1145 1144 1146 72 (parallel [
            (set (reg:DI 2 cx [orig:518 D.25097 ] [518])
                (ashift:DI (reg:DI 0 ax [orig:517 D.25097 ] [517])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 497 {*ashldi3_1}
     (nil))
(insn 1146 1145 1147 72 (set (reg/f:DI 0 ax [782])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1147 1146 1148 72 (parallel [
            (set (reg/f:DI 0 ax [orig:519 D.25103 ] [519])
                (plus:DI (reg/f:DI 0 ax [782])
                    (reg:DI 2 cx [orig:518 D.25097 ] [518])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:518 D.25097 ] [518]))
        (nil)))
(insn 1148 1147 1149 72 (set (reg/f:DI 0 ax [orig:520 D.25105 ] [520])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:519 D.25103 ] [519]) [0 _524->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1149 1148 1150 72 (set (reg:SI 2 cx [783])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1150 1149 1151 72 (set (reg:DI 2 cx [orig:521 D.25106 ] [521])
        (sign_extend:DI (reg:SI 2 cx [783]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1151 1150 1152 72 (parallel [
            (set (reg:DI 2 cx [orig:522 D.25106 ] [522])
                (plus:DI (reg:DI 2 cx [orig:521 D.25106 ] [521])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (nil))
(insn 1152 1151 1153 72 (parallel [
            (set (reg:DI 2 cx [orig:523 D.25106 ] [523])
                (ashift:DI (reg:DI 2 cx [orig:522 D.25106 ] [522])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 497 {*ashldi3_1}
     (nil))
(insn 1153 1152 1154 72 (parallel [
            (set (reg/f:DI 0 ax [orig:524 D.25105 ] [524])
                (plus:DI (reg/f:DI 0 ax [orig:520 D.25105 ] [520])
                    (reg:DI 2 cx [orig:523 D.25106 ] [523])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 221 {*adddi_1}
     (nil))
(insn 1154 1153 1155 72 (set (reg:SF 21 xmm0 [orig:525 D.25120 ] [525])
        (mem:SF (reg/f:DI 0 ax [orig:524 D.25105 ] [524]) [0 *_529+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 129 {*movsf_internal}
     (nil))
(insn 1155 1154 1334 72 (set (reg:SF 22 xmm1 [orig:526 D.25120 ] [526])
        (plus:SF (reg:SF 22 xmm1 [orig:526 D.25120 ] [526])
            (reg:SF 21 xmm0 [orig:525 D.25120 ] [525]))) ge2fitman_fmtext_o.cpp:522 775 {*fop_sf_comm_sse}
     (nil))
(insn 1334 1155 1156 72 (set (reg:SF 0 ax [orig:526 D.25120 ] [526])
        (reg:SF 22 xmm1 [orig:526 D.25120 ] [526])) ge2fitman_fmtext_o.cpp:522 129 {*movsf_internal}
     (nil))
(insn 1156 1334 1157 72 (set (mem:SF (reg/f:DI 1 dx [orig:507 D.25105 ] [507]) [0 *_512+0 S4 A32])
        (reg:SF 0 ax [orig:526 D.25120 ] [526])) ge2fitman_fmtext_o.cpp:522 129 {*movsf_internal}
     (nil))
(insn 1157 1156 1158 72 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:516 220 {*addsi_1}
     (nil))
;;  succ:       73 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU,DFS_BACK)
;;              71 [100.0%] 
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 470 471 472 473 474 475 784 785 786
(code_label 1158 1157 1159 73 46 "" [1 uses])
(note 1159 1158 1160 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1160 1159 1161 73 (set (reg:SI 0 ax [784])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:516 90 {*movsi_internal}
     (nil))
(insn 1161 1160 1162 73 (set (reg:DI 0 ax [orig:470 D.25100 ] [470])
        (sign_extend:DI (reg:SI 0 ax [784]))) ge2fitman_fmtext_o.cpp:516 142 {*extendsidi2_rex64}
     (nil))
(insn 1162 1161 1163 73 (set (reg:SI 1 dx [785])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:516 90 {*movsi_internal}
     (nil))
(insn 1163 1162 1335 73 (set (reg:DI 1 dx [orig:471 D.25097 ] [471])
        (sign_extend:DI (reg:SI 1 dx [785]))) ge2fitman_fmtext_o.cpp:516 142 {*extendsidi2_rex64}
     (nil))
(insn 1335 1163 1164 73 (set (reg:DI 2 cx [orig:472 D.25097 ] [472])
        (reg:DI 1 dx [orig:471 D.25097 ] [471])) ge2fitman_fmtext_o.cpp:516 89 {*movdi_internal}
     (nil))
(insn 1164 1335 1165 73 (parallel [
            (set (reg:DI 2 cx [orig:472 D.25097 ] [472])
                (ashift:DI (reg:DI 2 cx [orig:472 D.25097 ] [472])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:516 497 {*ashldi3_1}
     (nil))
(insn 1165 1164 1166 73 (set (reg/f:DI 1 dx [786])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:516 89 {*movdi_internal}
     (nil))
(insn 1166 1165 1167 73 (parallel [
            (set (reg/f:DI 1 dx [orig:473 D.25099 ] [473])
                (plus:DI (reg/f:DI 1 dx [786])
                    (reg:DI 2 cx [orig:472 D.25097 ] [472])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:516 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:472 D.25097 ] [472]))
        (nil)))
(insn 1167 1166 1168 73 (set (reg:DI 1 dx [orig:474 D.25100 ] [474])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:473 D.25099 ] [473])
                (const_int 16 [0x10])) [0 _478->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:516 89 {*movdi_internal}
     (nil))
(insn 1168 1167 1170 73 (parallel [
            (set (reg:DI 1 dx [orig:475 D.25100 ] [475])
                (ashift:DI (reg:DI 1 dx [orig:474 D.25100 ] [474])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:516 497 {*ashldi3_1}
     (nil))
(insn 1170 1168 1171 73 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:470 D.25100 ] [470])
            (reg:DI 1 dx [orig:475 D.25100 ] [475]))) ge2fitman_fmtext_o.cpp:516 8 {*cmpdi_1}
     (nil))
(jump_insn 1171 1170 1172 73 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1169)
            (pc))) ge2fitman_fmtext_o.cpp:516 596 {*jcc_1}
     (nil)
 -> 1169)
;;  succ:       72
;;              74 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1172 1171 1173 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 1173 1172 1174 74 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:364 220 {*addsi_1}
     (nil))
;;  succ:       75 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       74 (FALLTHRU,DFS_BACK)
;;              34 [100.0%] 
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 787
(code_label 1174 1173 1175 75 22 "" [1 uses])
(note 1175 1174 1177 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 1177 1175 1178 75 (set (reg:SI 0 ax [787])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:364 90 {*movsi_internal}
     (nil))
(insn 1178 1177 1179 75 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [787])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 numSets+0 S4 A32]))) ge2fitman_fmtext_o.cpp:364 7 {*cmpsi_1}
     (nil))
(jump_insn 1179 1178 1180 75 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1176)
            (pc))) ge2fitman_fmtext_o.cpp:364 596 {*jcc_1}
     (nil)
 -> 1176)
;;  succ:       35
;;              76 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1180 1179 1181 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 1181 1180 1182 76 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:301 220 {*addsi_1}
     (nil))
;;  succ:       77 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (FALLTHRU,DFS_BACK)
;;              30 [100.0%] 
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 215 216 217 218 788 789
(code_label 1182 1181 1183 77 19 "" [1 uses])
(note 1183 1182 1184 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1184 1183 1185 77 (set (reg:SI 0 ax [788])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:301 90 {*movsi_internal}
     (nil))
(insn 1185 1184 1337 77 (set (reg:DI 0 ax [orig:215 D.25097 ] [215])
        (sign_extend:DI (reg:SI 0 ax [788]))) ge2fitman_fmtext_o.cpp:301 142 {*extendsidi2_rex64}
     (nil))
(insn 1337 1185 1186 77 (set (reg:DI 0 ax [orig:216 D.25097 ] [216])
        (reg:DI 0 ax [orig:215 D.25097 ] [215])) ge2fitman_fmtext_o.cpp:301 89 {*movdi_internal}
     (nil))
(insn 1186 1337 1338 77 (parallel [
            (set (reg:DI 0 ax [orig:216 D.25097 ] [216])
                (ashift:DI (reg:DI 0 ax [orig:216 D.25097 ] [216])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:301 497 {*ashldi3_1}
     (nil))
(insn 1338 1186 1187 77 (set (reg:DI 1 dx [orig:216 D.25097 ] [216])
        (reg:DI 0 ax [orig:216 D.25097 ] [216])) ge2fitman_fmtext_o.cpp:301 89 {*movdi_internal}
     (nil))
(insn 1187 1338 1188 77 (set (reg/f:DI 0 ax [789])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:301 89 {*movdi_internal}
     (nil))
(insn 1188 1187 1189 77 (parallel [
            (set (reg/f:DI 0 ax [orig:217 D.25110 ] [217])
                (plus:DI (reg/f:DI 0 ax [789])
                    (reg:DI 1 dx [orig:216 D.25097 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:301 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:216 D.25097 ] [216]))
        (nil)))
(insn 1189 1188 1191 77 (set (reg:SI 0 ax [orig:218 D.25096 ] [218])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:217 D.25110 ] [217])
                (const_int 508 [0x1fc])) [0 _203->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:301 90 {*movsi_internal}
     (nil))
(insn 1191 1189 1192 77 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:218 D.25096 ] [218])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32]))) ge2fitman_fmtext_o.cpp:301 7 {*cmpsi_1}
     (nil))
(jump_insn 1192 1191 1193 77 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1190)
            (pc))) ge2fitman_fmtext_o.cpp:301 596 {*jcc_1}
     (nil)
 -> 1190)
;;  succ:       31
;;              78 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77 (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1193 1192 1194 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
;;  succ:       79 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1194 1193 1195 79 3 "" [1 uses])
(note 1195 1194 1196 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 1196 1195 1197 79 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:63 220 {*addsi_1}
     (nil))
;;  succ:       80 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 790
(code_label 1197 1196 1198 80 2 "" [1 uses])
(note 1198 1197 1199 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 1199 1198 1200 80 (set (reg/f:DI 0 ax [790])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 fid+0 S8 A64])) ge2fitman_fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(insn 1200 1199 1202 80 (set (reg:SI 0 ax [orig:83 D.25096 ] [83])
        (mem:SI (reg/f:DI 0 ax [790]) [0 *fid_34(D)+0 S4 A32])) ge2fitman_fmtext_o.cpp:63 90 {*movsi_internal}
     (nil))
(insn 1202 1200 1203 80 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.25096 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32]))) ge2fitman_fmtext_o.cpp:63 7 {*cmpsi_1}
     (nil))
(jump_insn 1203 1202 1204 80 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1201)
            (pc))) ge2fitman_fmtext_o.cpp:63 596 {*jcc_1}
     (nil)
 -> 1201)
;;  succ:       3
;;              81 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 527 528 791
(note 1204 1203 1205 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1205 1204 1206 81 (set (reg:DI 0 ax [791])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:578 89 {*movdi_internal}
     (nil))
(insn 1206 1205 1207 81 (set (reg:DI 5 di)
        (reg:DI 0 ax [791])) ge2fitman_fmtext_o.cpp:578 89 {*movdi_internal}
     (nil))
(call_insn 1207 1206 1208 81 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b27d3eee000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:578 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1208 1207 1211 81 (set (reg:SI 0 ax [orig:527 D.25096 ] [527])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 1211 1208 1215 81 (set (reg:SI 0 ax [orig:528 <retval> ] [528])
        (reg:SI 0 ax [orig:527 D.25096 ] [527])) ge2fitman_fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 1215 1211 1216 81 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:528 <retval> ] [528])) ge2fitman_fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
(insn 1216 1215 1268 81 (use (reg/i:SI 0 ax)) ge2fitman_fmtext_o.cpp:581 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1268 1216 0 NOTE_INSN_DELETED)

;; Function void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*) (_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess, funcdef_no=1021, decl_uid=23970, symbol_order=228)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 42:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 50:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=209 from oldreg=90, assigning class SSE_REGS to r209
   50: r209:SF=r209:SF/r89:SF
      REG_DEAD r89:SF
      REG_DEAD r87:SF
    Inserting insn reload before:
  268: r209:SF=r87:SF
    Inserting insn reload after:
  269: r90:SF=r209:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 59:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 61:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 63:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 80:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 86:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=210 from oldreg=166, assigning class CREG to r210
      Creating newreg=211 from oldreg=168, assigning class DIREG to r211
   86: {r210:DI=unspec[[r211:DI],r170:QI,0x1,r210:DI] 23;clobber r211:DI;clobber flags:CC;}
      REG_DEAD r170:QI
      REG_DEAD r169:DI
      REG_DEAD r168:DI
      REG_UNUSED r168:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  270: r210:DI=r169:DI
  272: r211:DI=r168:DI
    Inserting insn reload after:
  271: r166:DI=r210:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 92:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 99:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 106:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 110:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=212 from oldreg=175, assigning class CREG to r212
      Creating newreg=213 from oldreg=177, assigning class DIREG to r213
  110: {r212:DI=unspec[[r213:DI],r179:QI,0x1,r212:DI] 23;clobber r213:DI;clobber flags:CC;}
      REG_DEAD r179:QI
      REG_DEAD r178:DI
      REG_DEAD r177:DI
      REG_UNUSED r177:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  273: r212:DI=r178:DI
  275: r213:DI=r177:DI
    Inserting insn reload after:
  274: r175:DI=r212:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 114
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 116:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 128:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 131:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 134:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 137:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 140:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 143:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) r  (1) rm {extendhisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 152:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 157:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 160:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 169:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 177:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 182:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 188:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 200:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 201:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 202:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 206:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 207:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 208:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 218
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 219:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 223:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 232
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 233:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 237:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 241:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 245:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 256:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (1) rzw {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
  BB 3
   Insn 263: point = 0
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 23: point = 1
  BB 8
   Insn 258: point = 2
   Insn 257: point = 2
   Insn 256: point = 3
  BB 7
   Insn 254: point = 4
   Insn 253: point = 4
  BB 6
   Insn 251: point = 4
   Insn 250: point = 4
   Insn 248: point = 5
   Insn 247: point = 7
   Insn 246: point = 9
   Insn 245: point = 10
   Insn 244: point = 12
  BB 4
   Insn 265: point = 13
   Insn 210: point = 13
   Insn 209: point = 13
   Insn 208: point = 13
   Insn 207: point = 13
   Insn 206: point = 13
   Insn 205: point = 13
   Insn 204: point = 14
   Insn 203: point = 15
   Insn 202: point = 15
   Insn 201: point = 15
   Insn 200: point = 15
   Insn 199: point = 15
   Insn 198: point = 16
   Insn 197: point = 17
   Insn 196: point = 17
   Insn 195: point = 17
   Insn 194: point = 18
   Insn 193: point = 18
   Insn 192: point = 19
   Insn 191: point = 20
   Insn 190: point = 21
   Insn 189: point = 22
   Insn 188: point = 24
   Insn 187: point = 26
   Insn 186: point = 27
   Insn 185: point = 29
   Insn 184: point = 31
   Insn 183: point = 32
   Insn 182: point = 34
   Insn 181: point = 36
   Insn 180: point = 37
   Insn 179: point = 37
   Insn 178: point = 37
   Insn 177: point = 38
   Insn 176: point = 38
   Insn 175: point = 39
   Insn 174: point = 40
   Insn 173: point = 41
   Insn 172: point = 42
   Insn 171: point = 43
   Insn 170: point = 44
   Insn 169: point = 46
   Insn 168: point = 48
   Insn 167: point = 49
   Insn 166: point = 51
   Insn 165: point = 53
   Insn 164: point = 54
   Insn 163: point = 56
   Insn 162: point = 58
   Insn 161: point = 59
   Insn 160: point = 61
   Insn 159: point = 63
   Insn 158: point = 64
   Insn 157: point = 66
   Insn 156: point = 68
   Insn 155: point = 69
   Insn 154: point = 69
   Insn 153: point = 69
   Insn 152: point = 70
   Insn 151: point = 70
   Insn 150: point = 71
   Insn 149: point = 72
   Insn 148: point = 73
   Insn 147: point = 74
   Insn 146: point = 75
   Insn 145: point = 76
   Insn 144: point = 77
   Insn 143: point = 79
   Insn 142: point = 81
   Insn 141: point = 82
   Insn 140: point = 84
   Insn 139: point = 86
   Insn 138: point = 87
   Insn 137: point = 89
   Insn 136: point = 91
   Insn 135: point = 92
   Insn 134: point = 94
   Insn 133: point = 96
   Insn 132: point = 97
   Insn 131: point = 99
   Insn 130: point = 101
   Insn 129: point = 102
   Insn 128: point = 104
   Insn 127: point = 106
   Insn 126: point = 107
   Insn 125: point = 107
   Insn 124: point = 107
   Insn 123: point = 108
   Insn 122: point = 108
   Insn 121: point = 109
   Insn 120: point = 110
   Insn 119: point = 111
   Insn 118: point = 111
   Insn 117: point = 112
   Insn 116: point = 113
   Insn 115: point = 114
   Insn 114: point = 114
   Insn 112: point = 116
   Insn 111: point = 118
   Insn 274: point = 120
	Hard reg 0 is preferable by r212 with profit 1
   Insn 110: point = 122
   Insn 275: point = 124
	Hard reg 4 is preferable by r213 with profit 1
   Insn 273: point = 126
	Hard reg 0 is preferable by r212 with profit 1
	Hard reg 2 is preferable by r212 with profit 1
   Insn 109: point = 128
   Insn 108: point = 129
   Insn 107: point = 131
   Insn 113: point = 132
   Insn 106: point = 133
   Insn 105: point = 135
   Insn 104: point = 136
   Insn 103: point = 138
   Insn 102: point = 139
   Insn 101: point = 139
   Insn 100: point = 139
   Insn 99: point = 140
   Insn 98: point = 140
   Insn 97: point = 141
   Insn 96: point = 142
   Insn 95: point = 143
   Insn 94: point = 143
   Insn 93: point = 144
   Insn 92: point = 145
   Insn 91: point = 146
   Insn 90: point = 146
   Insn 88: point = 148
   Insn 87: point = 150
   Insn 271: point = 152
	Hard reg 0 is preferable by r210 with profit 1
   Insn 86: point = 154
   Insn 272: point = 156
	Hard reg 4 is preferable by r211 with profit 1
   Insn 270: point = 158
	Hard reg 0 is preferable by r210 with profit 1
	Hard reg 2 is preferable by r210 with profit 1
   Insn 85: point = 160
   Insn 84: point = 161
   Insn 83: point = 163
   Insn 89: point = 164
   Insn 82: point = 165
   Insn 81: point = 167
   Insn 80: point = 168
   Insn 79: point = 170
   Insn 78: point = 171
   Insn 77: point = 171
   Insn 76: point = 171
   Insn 75: point = 172
   Insn 74: point = 172
   Insn 73: point = 173
   Insn 72: point = 174
   Insn 71: point = 176
   Insn 70: point = 177
   Insn 69: point = 177
   Insn 68: point = 177
   Insn 67: point = 178
   Insn 66: point = 178
   Insn 65: point = 179
   Insn 64: point = 180
   Insn 63: point = 182
   Insn 62: point = 183
   Insn 61: point = 185
   Insn 60: point = 187
   Insn 59: point = 188
   Insn 58: point = 190
   Insn 57: point = 191
   Insn 56: point = 191
   Insn 55: point = 191
   Insn 54: point = 192
   Insn 53: point = 192
   Insn 52: point = 193
   Insn 51: point = 194
   Insn 269: point = 196
	Hard reg 21 is preferable by r209 with profit 1
   Insn 50: point = 198
   Insn 268: point = 199
	Hard reg 21 is preferable by r209 with profit 1
	Hard reg 22 is preferable by r209 with profit 1
   Insn 49: point = 201
   Insn 48: point = 203
   Insn 47: point = 205
   Insn 46: point = 206
   Insn 45: point = 208
   Insn 44: point = 209
   Insn 43: point = 209
   Insn 42: point = 209
   Insn 41: point = 209
   Insn 40: point = 209
   Insn 39: point = 210
   Insn 38: point = 211
   Insn 37: point = 211
   Insn 36: point = 211
   Insn 35: point = 212
   Insn 34: point = 212
   Insn 33: point = 213
   Insn 32: point = 214
   Insn 31: point = 216
   Insn 30: point = 218
  BB 2
   Insn 21: point = 219
   Insn 20: point = 219
   Insn 19: point = 220
   Insn 18: point = 221
   Insn 17: point = 221
   Insn 16: point = 222
   Insn 15: point = 223
   Insn 14: point = 223
   Insn 13: point = 224
   Insn 12: point = 224
   Insn 11: point = 225
   Insn 7: point = 225
   Insn 6: point = 225
   Insn 5: point = 225
   Insn 4: point = 225
   Insn 3: point = 225
   Insn 2: point = 225
  BB 5
   Insn 241: point = 225
   Insn 240: point = 225
   Insn 239: point = 225
   Insn 238: point = 225
   Insn 237: point = 226
   Insn 236: point = 226
   Insn 235: point = 227
   Insn 234: point = 228
   Insn 233: point = 230
   Insn 232: point = 232
   Insn 231: point = 234
   Insn 230: point = 235
   Insn 229: point = 237
   Insn 228: point = 239
   Insn 227: point = 241
   Insn 226: point = 242
   Insn 225: point = 242
   Insn 224: point = 242
   Insn 223: point = 243
   Insn 222: point = 243
   Insn 221: point = 244
   Insn 220: point = 245
   Insn 219: point = 247
   Insn 218: point = 249
   Insn 217: point = 251
   Insn 216: point = 252
   Insn 215: point = 254
   Insn 214: point = 256
 r83: [221..222]
 r84: [219..220]
 r85: [215..216]
 r86: [212..214]
 r87: [200..206]
 r88: [202..203]
 r89: [198..201]
 r90: [195..196]
 r91: [192..194]
 r92: [184..188]
 r93: [184..185]
 r94: [181..183]
 r95: [178..180]
 r96: [172..174]
 r97: [144..168]
 r98: [143..165]
 r99: [147..148]
 r100: [145..146]
 r101: [140..142]
 r102: [112..136]
 r103: [111..133]
 r104: [115..116]
 r105: [113..114]
 r106: [108..110]
 r107: [103..104]
 r108: [75..102]
 r109: [98..99]
 r110: [74..97]
 r111: [93..94]
 r112: [73..92]
 r113: [88..89]
 r114: [72..87]
 r115: [83..84]
 r116: [71..82]
 r117: [78..79]
 r118: [70..77]
 r119: [65..66]
 r120: [42..64]
 r121: [60..61]
 r122: [41..59]
 r123: [55..56]
 r124: [40..54]
 r125: [50..51]
 r126: [39..49]
 r127: [45..46]
 r128: [38..44]
 r129: [33..34]
 r130: [20..32]
 r131: [28..29]
 r132: [19..27]
 r133: [23..24]
 r134: [18..22]
 r135: [4..10]
 r136: [6..7]
 r137: [4..5]
 r138: [253..254]
 r139: [250..252]
 r140: [248..249]
 r141: [246..247]
 r142: [243..245]
 r143: [238..239]
 r144: [236..237]
 r145: [233..235]
 r146: [231..232]
 r147: [229..230]
 r148: [226..228]
 r149: [223..224]
 r150: [0..1]
 r151: [217..218]
 r152: [211..213]
 r153: [209..210]
 r154: [207..208]
 r155: [204..205]
 r156: [191..193]
 r157: [189..190]
 r158: [186..187]
 r159: [181..182]
 r160: [177..179]
 r161: [175..176]
 r162: [171..173]
 r163: [169..170]
 r164: [166..167]
 r165: [162..164]
 r166: [151..152]
 r167: [149..150]
 r168: [157..161]
 r169: [159..163]
 r170: [155..160]
 r171: [139..141]
 r172: [137..138]
 r173: [134..135]
 r174: [130..132]
 r175: [119..120]
 r176: [117..118]
 r177: [125..129]
 r178: [127..131]
 r179: [123..128]
 r180: [107..109]
 r181: [105..106]
 r182: [100..101]
 r183: [95..96]
 r184: [90..91]
 r185: [85..86]
 r186: [80..81]
 r187: [69..76]
 r188: [67..68]
 r189: [62..63]
 r190: [57..58]
 r191: [52..53]
 r192: [47..48]
 r193: [37..43]
 r194: [35..36]
 r195: [30..31]
 r196: [25..26]
 r197: [17..21]
 r198: [15..16]
 r199: [13..14]
 r200: [255..256]
 r201: [250..251]
 r202: [242..244]
 r203: [240..241]
 r204: [233..234]
 r205: [225..227]
 r206: [11..12]
 r207: [8..9]
 r208: [2..3]
 r209: [197..199]
 r210: [153..158]
 r211: [154..156]
 r212: [121..126]
 r213: [122..124]
Compressing live ranges: from 257 to 190 - 73%
Ranges after the compression:
 r83: [160..161]
 r84: [158..159]
 r85: [154..155]
 r86: [152..153]
 r87: [142..147]
 r88: [144..145]
 r89: [140..143]
 r90: [138..139]
 r91: [136..137]
 r92: [130..133]
 r93: [130..131]
 r94: [128..129]
 r95: [126..127]
 r96: [122..123]
 r97: [102..119]
 r98: [102..117]
 r99: [104..105]
 r100: [102..103]
 r101: [100..101]
 r102: [80..97]
 r103: [80..95]
 r104: [82..83]
 r105: [80..81]
 r106: [78..79]
 r107: [74..75]
 r108: [52..73]
 r109: [70..71]
 r110: [52..69]
 r111: [66..67]
 r112: [52..65]
 r113: [62..63]
 r114: [52..61]
 r115: [58..59]
 r116: [52..57]
 r117: [54..55]
 r118: [52..53]
 r119: [48..49]
 r120: [30..47]
 r121: [44..45]
 r122: [30..43]
 r123: [40..41]
 r124: [30..39]
 r125: [36..37]
 r126: [30..35]
 r127: [32..33]
 r128: [30..31]
 r129: [26..27]
 r130: [16..25]
 r131: [22..23]
 r132: [16..21]
 r133: [18..19]
 r134: [16..17]
 r135: [4..9]
 r136: [6..7]
 r137: [4..5]
 r138: [186..187]
 r139: [184..185]
 r140: [182..183]
 r141: [180..181]
 r142: [178..179]
 r143: [174..175]
 r144: [172..173]
 r145: [170..171]
 r146: [168..169]
 r147: [166..167]
 r148: [164..165]
 r149: [162..163]
 r150: [0..1]
 r151: [156..157]
 r152: [152..153]
 r153: [150..151]
 r154: [148..149]
 r155: [146..147]
 r156: [136..137]
 r157: [134..135]
 r158: [132..133]
 r159: [128..129]
 r160: [126..127]
 r161: [124..125]
 r162: [122..123]
 r163: [120..121]
 r164: [118..119]
 r165: [116..117]
 r166: [108..109]
 r167: [106..107]
 r168: [112..115]
 r169: [114..117]
 r170: [110..115]
 r171: [100..101]
 r172: [98..99]
 r173: [96..97]
 r174: [94..95]
 r175: [86..87]
 r176: [84..85]
 r177: [90..93]
 r178: [92..95]
 r179: [88..93]
 r180: [78..79]
 r181: [76..77]
 r182: [72..73]
 r183: [68..69]
 r184: [64..65]
 r185: [60..61]
 r186: [56..57]
 r187: [52..53]
 r188: [50..51]
 r189: [46..47]
 r190: [42..43]
 r191: [38..39]
 r192: [34..35]
 r193: [30..31]
 r194: [28..29]
 r195: [24..25]
 r196: [20..21]
 r197: [16..17]
 r198: [14..15]
 r199: [12..13]
 r200: [188..189]
 r201: [184..185]
 r202: [178..179]
 r203: [176..177]
 r204: [170..171]
 r205: [164..165]
 r206: [10..11]
 r207: [8..9]
 r208: [2..3]
 r209: [140..141]
 r210: [110..113]
 r211: [110..111]
 r212: [88..91]
 r213: [88..89]

********** Assignment #1: **********

	 Assigning to 210 (cl=CREG, orig=166, freq=3, tfirst=210, tfreq=3)...
	   Assign 2 to reload r210 (freq=3)
	 Assigning to 212 (cl=CREG, orig=175, freq=3, tfirst=212, tfreq=3)...
	   Assign 2 to reload r212 (freq=3)
	 Assigning to 211 (cl=DIREG, orig=168, freq=2, tfirst=211, tfreq=2)...
	   Assign 5 to reload r211 (freq=2)
	 Assigning to 213 (cl=DIREG, orig=177, freq=2, tfirst=213, tfreq=2)...
	   Assign 5 to reload r213 (freq=2)
	 Assigning to 209 (cl=SSE_REGS, orig=90, freq=3, tfirst=209, tfreq=3)...
	   Assign 22 to reload r209 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 72
changing reg in insn 74
changing reg in insn 80
changing reg in insn 93
changing reg in insn 82
changing reg in insn 94
changing reg in insn 89
changing reg in insn 88
changing reg in insn 90
changing reg in insn 92
changing reg in insn 91
changing reg in insn 96
changing reg in insn 98
changing reg in insn 104
changing reg in insn 117
changing reg in insn 106
changing reg in insn 118
changing reg in insn 113
changing reg in insn 112
changing reg in insn 114
changing reg in insn 116
changing reg in insn 115
changing reg in insn 120
changing reg in insn 122
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 146
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 147
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 148
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 149
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 150
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 151
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 172
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 173
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 174
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 175
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 176
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 191
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 192
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 193
changing reg in insn 245
changing reg in insn 250
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 250
changing reg in insn 215
changing reg in insn 216
changing reg in insn 216
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 222
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 236
changing reg in insn 12
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 89
changing reg in insn 84
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 84
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 97
changing reg in insn 100
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 113
changing reg in insn 108
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 108
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 121
changing reg in insn 124
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 131
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 153
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 178
changing reg in insn 181
changing reg in insn 182
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 195
changing reg in insn 198
changing reg in insn 199
changing reg in insn 204
changing reg in insn 205
changing reg in insn 214
changing reg in insn 215
changing reg in insn 217
changing reg in insn 221
changing reg in insn 224
changing reg in insn 227
changing reg in insn 228
changing reg in insn 231
changing reg in insn 235
changing reg in insn 238
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 256
changing reg in insn 257
deleting insn with uid = 16.
deleting insn with uid = 34.
deleting insn with uid = 268.
deleting insn with uid = 53.
deleting insn with uid = 66.
deleting insn with uid = 74.
deleting insn with uid = 270.
deleting insn with uid = 98.
deleting insn with uid = 273.
deleting insn with uid = 122.
deleting insn with uid = 146.
deleting insn with uid = 147.
deleting insn with uid = 148.
deleting insn with uid = 149.
deleting insn with uid = 150.
deleting insn with uid = 151.
deleting insn with uid = 172.
deleting insn with uid = 173.
deleting insn with uid = 174.
deleting insn with uid = 175.
deleting insn with uid = 176.
deleting insn with uid = 191.
deleting insn with uid = 192.
deleting insn with uid = 193.
deleting insn with uid = 222.
deleting insn with uid = 236.
starting the processing of deferred insns
ending the processing of deferred insns


void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 37[r8] 38[r9]
;;  ref usage 	r0={101d,86u} r1={33d,18u,2e} r2={27d,8u} r4={39d,20u} r5={43d,22u} r6={1d,69u} r7={1d,28u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r17={41d,4u} r18={19d} r19={19d} r20={1d,1u,6e} r21={46d,26u} r22={27d,7u} r23={23d,3u} r24={22d,2u} r25={22d,2u} r26={20d} r27={20d} r28={20d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={22d,3u} r38={20d,1u} r39={19d} r40={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r76={19d} 
;;    total ref usage 1825{1517d,300u,8e} in 225{206 regular + 19 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 149
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
        (reg:DI 4 si [ data ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 index1+0 S4 A32])
        (reg:SI 37 r8 [ index1 ])) ge2fitman_fmtext_o.cpp:589 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
        (reg:DI 38 r9 [ procpar_info ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:597 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])) ge2fitman_fmtext_o.cpp:599 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b27d55a78e8 *.LC16>)) ge2fitman_fmtext_o.cpp:599 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [149])) ge2fitman_fmtext_o.cpp:599 89 {*movdi_internal}
     (nil))
(call_insn 15 14 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b27d40f3300 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:599 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 15 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (reg/f:DI 0 ax [orig:83 D.25137 ] [83])) ge2fitman_fmtext_o.cpp:599 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:599 4 {*cmpdi_ccno_1}
     (nil))
(insn 19 18 20 2 (set (reg:QI 0 ax [orig:84 D.25138 ] [84])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:599 592 {*setcc_qi}
     (nil))
(insn 20 19 21 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.25138 ] [84])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:599 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) ge2fitman_fmtext_o.cpp:599 596 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 150
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])) ge2fitman_fmtext_o.cpp:600 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [150])) ge2fitman_fmtext_o.cpp:600 89 {*movdi_internal}
     (nil))
(call_insn 25 24 263 3 (call (mem:QI (symbol_ref:DI ("_Z7exit_08Pc") [flags 0x41]  <function_decl 0x2b27d5495f00 exit_08>) [0 exit_08 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:600 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 263 25 264 3 (set (pc)
        (label_ref 261)) 636 {jump}
     (nil)
 -> 261)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 264 263 28)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199
(code_label 28 264 29 4 53 "" [1 uses])
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:603 89 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 0 ax [orig:85 D.25139 ] [85])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [151])
                (const_int 324 [0x144])) [0 procpar_info_7(D)->num_points+0 S4 A32])) ge2fitman_fmtext_o.cpp:603 90 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 1 dx [orig:86 D.25139 ] [86])
                (ashift:SI (reg:SI 0 ax [orig:85 D.25139 ] [85])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:603 496 {*ashlsi3_1}
     (nil))
(insn 33 32 35 4 (set (reg:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:603 89 {*movdi_internal}
     (nil))
(insn 35 33 36 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b27d55a7980 *.LC17>)) ge2fitman_fmtext_o.cpp:603 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [152])) ge2fitman_fmtext_o.cpp:603 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:603 93 {*movqi_internal}
     (nil))
(call_insn 38 37 39 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:603 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 39 38 40 4 (set (reg:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [153])) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 1 dx)
        (const_int 2 [0x2])) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b27d55a7a18 *.LC18>)) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(call_insn 44 43 45 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b27d3ece700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:605 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SF 22 xmm1 [orig:87 D.25140 ] [87])
        (mem/j:SF (reg/f:DI 0 ax [154]) [0 procpar_info_7(D)->acquision_time+0 S4 A64])) ge2fitman_fmtext_o.cpp:607 129 {*movsf_internal}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SI 0 ax [orig:88 D.25139 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [155])
                (const_int 324 [0x144])) [0 procpar_info_7(D)->num_points+0 S4 A32])) ge2fitman_fmtext_o.cpp:607 90 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:SF 21 xmm0 [orig:89 D.25140 ] [89])
        (float:SF (reg:SI 0 ax [orig:88 D.25139 ] [88]))) ge2fitman_fmtext_o.cpp:607 199 {*floatsisf2_sse}
     (nil))
(insn 50 49 269 4 (set (reg:SF 22 xmm1 [orig:90 D.25140 ] [90])
        (div:SF (reg:SF 22 xmm1 [orig:90 D.25140 ] [90])
            (reg:SF 21 xmm0 [orig:89 D.25140 ] [89]))) ge2fitman_fmtext_o.cpp:607 782 {*fop_sf_1_sse}
     (nil))
(insn 269 50 51 4 (set (reg:SF 21 xmm0 [orig:90 D.25140 ] [90])
        (reg:SF 22 xmm1 [orig:90 D.25140 ] [90])) ge2fitman_fmtext_o.cpp:607 129 {*movsf_internal}
     (nil))
(insn 51 269 52 4 (set (reg:DF 21 xmm0 [orig:91 D.25141 ] [91])
        (float_extend:DF (reg:SF 21 xmm0 [orig:90 D.25140 ] [90]))) ge2fitman_fmtext_o.cpp:607 152 {*extendsfdf2_sse}
     (nil))
(insn 52 51 54 4 (set (reg:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 54 52 55 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2b27d55a7ab0 *.LC19>)) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [156])) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:607 93 {*movqi_internal}
     (nil))
(call_insn 57 56 58 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:607 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:609 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DF 22 xmm1 [orig:92 D.25141 ] [92])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [157])
                (const_int 328 [0x148])) [0 procpar_info_7(D)->main_frequency+0 S8 A64])) ge2fitman_fmtext_o.cpp:609 128 {*movdf_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:609 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DF 21 xmm0 [orig:93 D.25141 ] [93])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [158])
                (const_int 336 [0x150])) [0 procpar_info_7(D)->offset_frequency+0 S8 A64])) ge2fitman_fmtext_o.cpp:609 128 {*movdf_internal}
     (nil))
(insn 62 61 63 4 (set (reg:DF 21 xmm0 [orig:94 D.25141 ] [94])
        (plus:DF (reg:DF 21 xmm0 [orig:93 D.25141 ] [93])
            (reg:DF 22 xmm1 [orig:92 D.25141 ] [92]))) ge2fitman_fmtext_o.cpp:609 776 {*fop_df_comm_sse}
     (nil))
(insn 63 62 64 4 (set (reg:DF 22 xmm1 [159])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S8 A64])) ge2fitman_fmtext_o.cpp:610 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+7 [0x0.98968p+24])
        (nil)))
(insn 64 63 65 4 (set (reg:DF 21 xmm0 [orig:95 D.25141 ] [95])
        (div:DF (reg:DF 21 xmm0 [orig:94 D.25141 ] [94])
            (reg:DF 22 xmm1 [159]))) ge2fitman_fmtext_o.cpp:610 783 {*fop_df_1_sse}
     (nil))
(insn 65 64 67 4 (set (reg:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 67 65 68 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2b27d55a7b48 *.LC21>)) ge2fitman_fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [160])) ge2fitman_fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:610 93 {*movqi_internal}
     (nil))
(call_insn 70 69 71 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:610 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 71 70 72 4 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:612 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:SI 1 dx [orig:96 D.25139 ] [96])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 320 [0x140])) [0 procpar_info_7(D)->num_transients+0 S4 A64])) ge2fitman_fmtext_o.cpp:612 90 {*movsi_internal}
     (nil))
(insn 73 72 75 4 (set (reg:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:612 89 {*movdi_internal}
     (nil))
(insn 75 73 76 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b27d55a7980 *.LC17>)) ge2fitman_fmtext_o.cpp:612 89 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [162])) ge2fitman_fmtext_o.cpp:612 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:612 93 {*movqi_internal}
     (nil))
(call_insn 78 77 79 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:612 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 79 78 80 4 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 80 79 81 4 (parallel [
            (set (reg/f:DI 37 r8 [orig:97 D.25142 ] [97])
                (plus:DI (reg/f:DI 0 ax [163])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:615 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 440 [0x1b8]))
        (nil)))
(insn 81 80 82 4 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 82 81 89 4 (parallel [
            (set (reg/f:DI 1 dx [orig:98 D.25143 ] [98])
                (plus:DI (reg/f:DI 0 ax [164])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:615 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 404 [0x194]))
        (nil)))
(insn 89 82 83 4 (set (reg:DI 0 ax [165])
        (reg/f:DI 1 dx [orig:98 D.25143 ] [98])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 83 89 84 4 (set (reg:DI 2 cx [169])
        (const_int -1 [0xffffffffffffffff])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:DI 4 si [168])
        (reg:DI 0 ax [165])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 85 84 272 4 (set (reg:QI 0 ax [170])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:615 93 {*movqi_internal}
     (nil))
(insn 272 85 86 4 (set (reg:DI 5 di [168])
        (reg:DI 4 si [168])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 86 272 271 4 (parallel [
            (set (reg:DI 2 cx [166])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [168]) [0  A8])
                        (reg:QI 0 ax [170])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [166])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [168]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:615 923 {*strlenqi_1}
     (nil))
(insn 271 86 87 4 (set (reg:DI 0 ax [166])
        (reg:DI 2 cx [166])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 87 271 88 4 (set (reg:DI 0 ax [167])
        (not:DI (reg:DI 0 ax [166]))) ge2fitman_fmtext_o.cpp:615 479 {*one_cmpldi2_1}
     (nil))
(insn 88 87 90 4 (parallel [
            (set (reg:DI 0 ax [orig:99 D.25144 ] [99])
                (plus:DI (reg:DI 0 ax [167])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:615 221 {*adddi_1}
     (nil))
(insn 90 88 91 4 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.25145 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 D.25144 ] [99])
                    (reg/f:DI 1 dx [orig:98 D.25143 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:615 221 {*adddi_1}
     (nil))
(insn 91 90 92 4 (set (mem:HI (reg/f:DI 0 ax [orig:100 D.25145 ] [100]) [0 MEM[(void *)_23]+0 S2 A8])
        (const_int 8236 [0x202c])) ge2fitman_fmtext_o.cpp:615 92 {*movhi_internal}
     (nil))
(insn 92 91 93 4 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:100 D.25145 ] [100])
                (const_int 2 [0x2])) [0 MEM[(void *)_23]+2 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:615 93 {*movqi_internal}
     (nil))
(insn 93 92 94 4 (set (reg:DI 4 si)
        (reg/f:DI 37 r8 [orig:97 D.25142 ] [97])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 94 93 95 4 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:98 D.25143 ] [98])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(call_insn 95 94 96 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x2b27d3ec2d00 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:615 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 96 95 97 4 (set (reg/f:DI 1 dx [orig:101 D.25145 ] [101])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 97 96 99 4 (set (reg:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 99 97 100 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b27d55a7be0 *.LC22>)) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 100 99 101 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [171])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 101 100 102 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:615 93 {*movqi_internal}
     (nil))
(call_insn 102 101 103 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:615 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 103 102 104 4 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 104 103 105 4 (parallel [
            (set (reg/f:DI 37 r8 [orig:102 D.25146 ] [102])
                (plus:DI (reg/f:DI 0 ax [172])
                    (const_int 468 [0x1d4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:618 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 468 [0x1d4]))
        (nil)))
(insn 105 104 106 4 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 106 105 113 4 (parallel [
            (set (reg/f:DI 1 dx [orig:103 D.25147 ] [103])
                (plus:DI (reg/f:DI 0 ax [173])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:618 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 113 106 107 4 (set (reg:DI 0 ax [174])
        (reg/f:DI 1 dx [orig:103 D.25147 ] [103])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 107 113 108 4 (set (reg:DI 2 cx [178])
        (const_int -1 [0xffffffffffffffff])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 108 107 109 4 (set (reg:DI 4 si [177])
        (reg:DI 0 ax [174])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 109 108 275 4 (set (reg:QI 0 ax [179])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:618 93 {*movqi_internal}
     (nil))
(insn 275 109 110 4 (set (reg:DI 5 di [177])
        (reg:DI 4 si [177])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 110 275 274 4 (parallel [
            (set (reg:DI 2 cx [175])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [177]) [0  A8])
                        (reg:QI 0 ax [179])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [175])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [177]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:618 923 {*strlenqi_1}
     (nil))
(insn 274 110 111 4 (set (reg:DI 0 ax [175])
        (reg:DI 2 cx [175])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 111 274 112 4 (set (reg:DI 0 ax [176])
        (not:DI (reg:DI 0 ax [175]))) ge2fitman_fmtext_o.cpp:618 479 {*one_cmpldi2_1}
     (nil))
(insn 112 111 114 4 (parallel [
            (set (reg:DI 0 ax [orig:104 D.25144 ] [104])
                (plus:DI (reg:DI 0 ax [176])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:618 221 {*adddi_1}
     (nil))
(insn 114 112 115 4 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.25145 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 D.25144 ] [104])
                    (reg/f:DI 1 dx [orig:103 D.25147 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:618 221 {*adddi_1}
     (nil))
(insn 115 114 116 4 (set (mem:HI (reg/f:DI 0 ax [orig:105 D.25145 ] [105]) [0 MEM[(void *)_28]+0 S2 A8])
        (const_int 8236 [0x202c])) ge2fitman_fmtext_o.cpp:618 92 {*movhi_internal}
     (nil))
(insn 116 115 117 4 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:105 D.25145 ] [105])
                (const_int 2 [0x2])) [0 MEM[(void *)_28]+2 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:618 93 {*movqi_internal}
     (nil))
(insn 117 116 118 4 (set (reg:DI 4 si)
        (reg/f:DI 37 r8 [orig:102 D.25146 ] [102])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 118 117 119 4 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:103 D.25147 ] [103])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(call_insn 119 118 120 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x2b27d3ec2d00 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:618 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 120 119 121 4 (set (reg/f:DI 1 dx [orig:106 D.25145 ] [106])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 121 120 123 4 (set (reg:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 123 121 124 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b27d55a7be0 *.LC22>)) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 124 123 125 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [180])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 125 124 126 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:618 93 {*movqi_internal}
     (nil))
(call_insn 126 125 127 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:618 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 127 126 128 4 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 128 127 129 4 (set (reg:SF 21 xmm0 [orig:107 D.25140 ] [107])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [181])
                (const_int 400 [0x190])) [0 procpar_info_7(D)->vtheta+0 S4 A64])) ge2fitman_fmtext_o.cpp:622 129 {*movsf_internal}
     (nil))
(insn 129 128 130 4 (set (reg:DF 25 xmm4 [orig:108 D.25141 ] [108])
        (float_extend:DF (reg:SF 21 xmm0 [orig:107 D.25140 ] [107]))) ge2fitman_fmtext_o.cpp:622 152 {*extendsfdf2_sse}
     (nil))
(insn 130 129 131 4 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 131 130 132 4 (set (reg:SF 21 xmm0 [orig:109 D.25140 ] [109])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [182])
                (const_int 384 [0x180])) [0 procpar_info_7(D)->vox3+0 S4 A64])) ge2fitman_fmtext_o.cpp:622 129 {*movsf_internal}
     (nil))
(insn 132 131 133 4 (set (reg:DF 24 xmm3 [orig:110 D.25141 ] [110])
        (float_extend:DF (reg:SF 21 xmm0 [orig:109 D.25140 ] [109]))) ge2fitman_fmtext_o.cpp:622 152 {*extendsfdf2_sse}
     (nil))
(insn 133 132 134 4 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:SF 21 xmm0 [orig:111 D.25140 ] [111])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [183])
                (const_int 380 [0x17c])) [0 procpar_info_7(D)->vox2+0 S4 A32])) ge2fitman_fmtext_o.cpp:622 129 {*movsf_internal}
     (nil))
(insn 135 134 136 4 (set (reg:DF 23 xmm2 [orig:112 D.25141 ] [112])
        (float_extend:DF (reg:SF 21 xmm0 [orig:111 D.25140 ] [111]))) ge2fitman_fmtext_o.cpp:622 152 {*extendsfdf2_sse}
     (nil))
(insn 136 135 137 4 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 137 136 138 4 (set (reg:SF 21 xmm0 [orig:113 D.25140 ] [113])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [184])
                (const_int 376 [0x178])) [0 procpar_info_7(D)->vox1+0 S4 A64])) ge2fitman_fmtext_o.cpp:622 129 {*movsf_internal}
     (nil))
(insn 138 137 139 4 (set (reg:DF 22 xmm1 [orig:114 D.25141 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.25140 ] [113]))) ge2fitman_fmtext_o.cpp:622 152 {*extendsfdf2_sse}
     (nil))
(insn 139 138 140 4 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 140 139 141 4 (set (reg:SF 21 xmm0 [orig:115 D.25140 ] [115])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [185])
                (const_int 4 [0x4])) [0 preprocess_38(D)->scale_factor+0 S4 A32])) ge2fitman_fmtext_o.cpp:622 129 {*movsf_internal}
     (nil))
(insn 141 140 142 4 (set (reg:DF 21 xmm0 [orig:116 D.25141 ] [116])
        (float_extend:DF (reg:SF 21 xmm0 [orig:115 D.25140 ] [115]))) ge2fitman_fmtext_o.cpp:622 152 {*extendsfdf2_sse}
     (nil))
(insn 142 141 143 4 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 block_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 143 142 144 4 (set (reg:HI 0 ax [orig:117 D.25148 ] [117])
        (mem/j:HI (reg/f:DI 0 ax [186]) [0 block_header_41(D)->scale.number+0 S2 A64])) ge2fitman_fmtext_o.cpp:622 92 {*movhi_internal}
     (nil))
(insn 144 143 145 4 (set (reg:SI 1 dx [orig:118 D.25139 ] [118])
        (sign_extend:SI (reg:HI 0 ax [orig:117 D.25148 ] [117]))) ge2fitman_fmtext_o.cpp:622 146 {extendhisi2}
     (nil))
(insn 145 144 152 4 (set (reg:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 152 145 153 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b27d55a7c78 *.LC23>)) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 153 152 154 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [187])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 154 153 155 4 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) ge2fitman_fmtext_o.cpp:622 93 {*movqi_internal}
     (nil))
(call_insn 155 154 156 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:622 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 21 xmm0))
                        (expr_list:DF (use (reg:DF 22 xmm1))
                            (expr_list:DF (use (reg:DF 23 xmm2))
                                (expr_list:DF (use (reg:DF 24 xmm3))
                                    (expr_list:DF (use (reg:DF 25 xmm4))
                                        (nil)))))))))))
(insn 156 155 157 4 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 157 156 158 4 (set (reg:SF 21 xmm0 [orig:119 D.25140 ] [119])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [188])
                (const_int 372 [0x174])) [0 procpar_info_7(D)->pos3+0 S4 A32])) ge2fitman_fmtext_o.cpp:626 129 {*movsf_internal}
     (nil))
(insn 158 157 159 4 (set (reg:DF 25 xmm4 [orig:120 D.25141 ] [120])
        (float_extend:DF (reg:SF 21 xmm0 [orig:119 D.25140 ] [119]))) ge2fitman_fmtext_o.cpp:626 152 {*extendsfdf2_sse}
     (nil))
(insn 159 158 160 4 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 160 159 161 4 (set (reg:SF 21 xmm0 [orig:121 D.25140 ] [121])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [189])
                (const_int 368 [0x170])) [0 procpar_info_7(D)->pos2+0 S4 A64])) ge2fitman_fmtext_o.cpp:626 129 {*movsf_internal}
     (nil))
(insn 161 160 162 4 (set (reg:DF 24 xmm3 [orig:122 D.25141 ] [122])
        (float_extend:DF (reg:SF 21 xmm0 [orig:121 D.25140 ] [121]))) ge2fitman_fmtext_o.cpp:626 152 {*extendsfdf2_sse}
     (nil))
(insn 162 161 163 4 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 163 162 164 4 (set (reg:SF 21 xmm0 [orig:123 D.25140 ] [123])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [190])
                (const_int 364 [0x16c])) [0 procpar_info_7(D)->pos1+0 S4 A32])) ge2fitman_fmtext_o.cpp:626 129 {*movsf_internal}
     (nil))
(insn 164 163 165 4 (set (reg:DF 23 xmm2 [orig:124 D.25141 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.25140 ] [123]))) ge2fitman_fmtext_o.cpp:626 152 {*extendsfdf2_sse}
     (nil))
(insn 165 164 166 4 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 166 165 167 4 (set (reg:SF 21 xmm0 [orig:125 D.25140 ] [125])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [191])
                (const_int 348 [0x15c])) [0 procpar_info_7(D)->tr+0 S4 A32])) ge2fitman_fmtext_o.cpp:626 129 {*movsf_internal}
     (nil))
(insn 167 166 168 4 (set (reg:DF 22 xmm1 [orig:126 D.25141 ] [126])
        (float_extend:DF (reg:SF 21 xmm0 [orig:125 D.25140 ] [125]))) ge2fitman_fmtext_o.cpp:626 152 {*extendsfdf2_sse}
     (nil))
(insn 168 167 169 4 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 169 168 170 4 (set (reg:SF 21 xmm0 [orig:127 D.25140 ] [127])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [192])
                (const_int 344 [0x158])) [0 procpar_info_7(D)->te+0 S4 A64])) ge2fitman_fmtext_o.cpp:626 129 {*movsf_internal}
     (nil))
(insn 170 169 171 4 (set (reg:DF 21 xmm0 [orig:128 D.25141 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.25140 ] [127]))) ge2fitman_fmtext_o.cpp:626 152 {*extendsfdf2_sse}
     (nil))
(insn 171 170 177 4 (set (reg:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 177 171 178 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b27d55a7d10 *.LC24>)) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 178 177 179 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [193])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 179 178 180 4 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) ge2fitman_fmtext_o.cpp:626 93 {*movqi_internal}
     (nil))
(call_insn 180 179 181 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:626 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (expr_list:DF (use (reg:DF 24 xmm3))
                                (expr_list:DF (use (reg:DF 25 xmm4))
                                    (nil))))))))))
(insn 181 180 182 4 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 182 181 183 4 (set (reg:SF 21 xmm0 [orig:129 D.25140 ] [129])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [194])
                (const_int 356 [0x164])) [0 procpar_info_7(D)->R2+0 S4 A32])) ge2fitman_fmtext_o.cpp:629 129 {*movsf_internal}
     (nil))
(insn 183 182 184 4 (set (reg:DF 23 xmm2 [orig:130 D.25141 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.25140 ] [129]))) ge2fitman_fmtext_o.cpp:629 152 {*extendsfdf2_sse}
     (nil))
(insn 184 183 185 4 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 185 184 186 4 (set (reg:SF 21 xmm0 [orig:131 D.25140 ] [131])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [195])
                (const_int 352 [0x160])) [0 procpar_info_7(D)->R1+0 S4 A64])) ge2fitman_fmtext_o.cpp:629 129 {*movsf_internal}
     (nil))
(insn 186 185 187 4 (set (reg:DF 22 xmm1 [orig:132 D.25141 ] [132])
        (float_extend:DF (reg:SF 21 xmm0 [orig:131 D.25140 ] [131]))) ge2fitman_fmtext_o.cpp:629 152 {*extendsfdf2_sse}
     (nil))
(insn 187 186 188 4 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 188 187 189 4 (set (reg:SF 21 xmm0 [orig:133 D.25140 ] [133])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [196])
                (const_int 360 [0x168])) [0 procpar_info_7(D)->gain+0 S4 A64])) ge2fitman_fmtext_o.cpp:629 129 {*movsf_internal}
     (nil))
(insn 189 188 190 4 (set (reg:DF 21 xmm0 [orig:134 D.25141 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.25140 ] [133]))) ge2fitman_fmtext_o.cpp:629 152 {*extendsfdf2_sse}
     (nil))
(insn 190 189 194 4 (set (reg:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 194 190 195 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b27d55a7da8 *.LC25>)) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 195 194 196 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [197])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 196 195 197 4 (set (reg:QI 0 ax)
        (const_int 3 [0x3])) ge2fitman_fmtext_o.cpp:629 93 {*movqi_internal}
     (nil))
(call_insn 197 196 198 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:629 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (nil))))))))
(insn 198 197 199 4 (set (reg:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(insn 199 198 200 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [198])) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(insn 200 199 201 4 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(insn 201 200 202 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(insn 202 201 203 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x2b27d55a7e40 *.LC26>)) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(call_insn 203 202 204 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b27d3ece700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:631 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 204 203 205 4 (set (reg:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(insn 205 204 206 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [199])) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(insn 206 205 207 4 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(insn 207 206 208 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(insn 208 207 209 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b27d55a7ed8 *.LC27>)) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(call_insn 209 208 210 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b27d3ece700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:633 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 210 209 265 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:637 90 {*movsi_internal}
     (nil))
(jump_insn 265 210 266 4 (set (pc)
        (label_ref 242)) ge2fitman_fmtext_o.cpp:637 636 {jump}
     (nil)
 -> 242)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 266 265 249)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 138 139 140 141 142 143 144 145 146 147 148 200 201 202 203 204 205
(code_label 249 266 213 5 56 "" [1 uses])
(note 213 249 214 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 5 (set (reg:SI 0 ax [200])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) ge2fitman_fmtext_o.cpp:638 90 {*movsi_internal}
     (nil))
(insn 215 214 216 5 (set (reg:DI 0 ax [orig:138 D.25144 ] [138])
        (sign_extend:DI (reg:SI 0 ax [200]))) ge2fitman_fmtext_o.cpp:638 142 {*extendsidi2_rex64}
     (nil))
(insn 216 215 217 5 (parallel [
            (set (reg:DI 1 dx [orig:139 D.25144 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.25144 ] [138])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:638 497 {*ashldi3_1}
     (nil))
(insn 217 216 218 5 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])) ge2fitman_fmtext_o.cpp:638 89 {*movdi_internal}
     (nil))
(insn 218 217 219 5 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.25150 ] [140])
                (plus:DI (reg/f:DI 0 ax [201])
                    (reg:DI 1 dx [orig:139 D.25144 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:638 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.25144 ] [139]))
        (nil)))
(insn 219 218 220 5 (set (reg:SF 21 xmm0 [orig:141 D.25140 ] [141])
        (mem:SF (reg/f:DI 0 ax [orig:140 D.25150 ] [140]) [0 *_68+0 S4 A32])) ge2fitman_fmtext_o.cpp:638 129 {*movsf_internal}
     (nil))
(insn 220 219 221 5 (set (reg:DF 21 xmm0 [orig:142 D.25141 ] [142])
        (float_extend:DF (reg:SF 21 xmm0 [orig:141 D.25140 ] [141]))) ge2fitman_fmtext_o.cpp:638 152 {*extendsfdf2_sse}
     (nil))
(insn 221 220 223 5 (set (reg:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:638 89 {*movdi_internal}
     (nil))
(insn 223 221 224 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x2b27d55b4000 *.LC28>)) ge2fitman_fmtext_o.cpp:638 89 {*movdi_internal}
     (nil))
(insn 224 223 225 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [202])) ge2fitman_fmtext_o.cpp:638 89 {*movdi_internal}
     (nil))
(insn 225 224 226 5 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:638 93 {*movqi_internal}
     (nil))
(call_insn 226 225 227 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:638 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 227 226 228 5 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) ge2fitman_fmtext_o.cpp:639 90 {*movsi_internal}
     (nil))
(insn 228 227 229 5 (set (reg:DI 0 ax [orig:143 D.25151 ] [143])
        (sign_extend:DI (reg:SI 0 ax [203]))) ge2fitman_fmtext_o.cpp:639 142 {*extendsidi2_rex64}
     (nil))
(insn 229 228 230 5 (parallel [
            (set (reg:DI 0 ax [orig:144 D.25151 ] [144])
                (plus:DI (reg:DI 0 ax [orig:143 D.25151 ] [143])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:639 221 {*adddi_1}
     (nil))
(insn 230 229 231 5 (parallel [
            (set (reg:DI 1 dx [orig:145 D.25151 ] [145])
                (ashift:DI (reg:DI 0 ax [orig:144 D.25151 ] [144])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:639 497 {*ashldi3_1}
     (nil))
(insn 231 230 232 5 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])) ge2fitman_fmtext_o.cpp:639 89 {*movdi_internal}
     (nil))
(insn 232 231 233 5 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.25150 ] [146])
                (plus:DI (reg/f:DI 0 ax [204])
                    (reg:DI 1 dx [orig:145 D.25151 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:639 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:145 D.25151 ] [145]))
        (nil)))
(insn 233 232 234 5 (set (reg:SF 21 xmm0 [orig:147 D.25140 ] [147])
        (mem:SF (reg/f:DI 0 ax [orig:146 D.25150 ] [146]) [0 *_74+0 S4 A32])) ge2fitman_fmtext_o.cpp:639 129 {*movsf_internal}
     (nil))
(insn 234 233 235 5 (set (reg:DF 21 xmm0 [orig:148 D.25141 ] [148])
        (float_extend:DF (reg:SF 21 xmm0 [orig:147 D.25140 ] [147]))) ge2fitman_fmtext_o.cpp:639 152 {*extendsfdf2_sse}
     (nil))
(insn 235 234 237 5 (set (reg:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:639 89 {*movdi_internal}
     (nil))
(insn 237 235 238 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x2b27d55b4000 *.LC28>)) ge2fitman_fmtext_o.cpp:639 89 {*movdi_internal}
     (nil))
(insn 238 237 239 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [205])) ge2fitman_fmtext_o.cpp:639 89 {*movdi_internal}
     (nil))
(insn 239 238 240 5 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:639 93 {*movqi_internal}
     (nil))
(call_insn 240 239 241 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b27d3ec9d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:639 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 241 240 242 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:637 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 135 136 137 206 207
(code_label 242 241 243 6 55 "" [1 uses])
(note 243 242 244 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 244 243 245 6 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) ge2fitman_fmtext_o.cpp:637 90 {*movsi_internal}
     (nil))
(insn 245 244 246 6 (set (reg:DI 1 dx [orig:135 D.25149 ] [135])
        (sign_extend:DI (reg:SI 0 ax [206]))) ge2fitman_fmtext_o.cpp:637 142 {*extendsidi2_rex64}
     (nil))
(insn 246 245 247 6 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:637 89 {*movdi_internal}
     (nil))
(insn 247 246 248 6 (set (reg:DI 0 ax [orig:136 D.25149 ] [136])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [207])
                (const_int 16 [0x10])) [0 main_header_62(D)->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:637 89 {*movdi_internal}
     (nil))
(insn 248 247 250 6 (parallel [
            (set (reg:DI 0 ax [orig:137 D.25149 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 D.25149 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:637 497 {*ashldi3_1}
     (nil))
(insn 250 248 251 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 1 dx [orig:135 D.25149 ] [135])
            (reg:DI 0 ax [orig:137 D.25149 ] [137]))) ge2fitman_fmtext_o.cpp:637 8 {*cmpdi_1}
     (nil))
(jump_insn 251 250 252 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 249)
            (pc))) ge2fitman_fmtext_o.cpp:637 596 {*jcc_1}
     (nil)
 -> 249)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 252 251 253 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:641 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 254 253 255 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 261)
            (pc))) ge2fitman_fmtext_o.cpp:641 596 {*jcc_1}
     (nil)
 -> 261)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 208
(note 255 254 256 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 8 (set (reg:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:642 89 {*movdi_internal}
     (nil))
(insn 257 256 258 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [208])) ge2fitman_fmtext_o.cpp:642 89 {*movdi_internal}
     (nil))
(call_insn 258 257 261 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b27d40edf00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:642 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7
;;              3 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 261 258 262 9 52 "" [2 uses])
(note 262 261 267 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 267 262 0 NOTE_INSN_DELETED)

;; Function void get_phase(float*, FILE**, Data_file_header*, InFile_struct*, long int, IOFiles*, int, Procpar_info*) (_Z9get_phasePfPP8_IO_FILEP16Data_file_headerP13InFile_structlP7IOFilesiP12Procpar_info, funcdef_no=1022, decl_uid=23979, symbol_order=229)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) ?m  (1) rF {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 2 in insn 29:  (0) r  (1) 0  (2) mr {*muldi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 30:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 2 in insn 36:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 46:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=238 from oldreg=196, assigning class GENERAL_REGS to r238
   59: {r238:SI=r238:SI-r98:SI;clobber flags:CC;}
      REG_DEAD r98:SI
      REG_DEAD r97:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  337: r238:SI=r97:SI
    Inserting insn reload after:
  338: r196:SI=r238:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=239 from oldreg=200, assigning class GENERAL_REGS to r239
   71: {r239:DI=r239:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  339: r239:DI=r100:DI
    Inserting insn reload after:
  340: r200:DI=r239:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 78:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 101:  (0) r  (1) 0  (2) mr {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 104:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 151:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 174
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) rm {*movhi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {extendhisi2}
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=2,overall=16,losers=2 -- refuse
	 Choosing alt 1 in insn 182:  (0) x  (1) r {*floatsisf2_sse}
      Creating newreg=240 from oldreg=141, assigning class SSE_REGS to r240
  182: r240:SF=float(r215:SI)
      REG_DEAD r215:SI
    Inserting insn reload after:
  341: r141:SF=r240:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 341:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 183:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 184:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 202:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=2,overall=16,losers=2 -- refuse
	 Choosing alt 1 in insn 212:  (0) x  (1) r {*floatdisf2_sse}
      Creating newreg=241 from oldreg=218, assigning class SSE_REGS to r241
  212: r241:SF=float(r149:DI)
      REG_DEAD r149:DI
    Inserting insn reload after:
  342: r218:SF=r241:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 342:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 213:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 218
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 220:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 221:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 231:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 235:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 238:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 239:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 245:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=242 from oldreg=165, assigning class SSE_REGS to r242
  245: r242:SF=float_trunc(r164:DF)
      REG_DEAD r164:DF
    Inserting insn reload after:
  343: r165:SF=r242:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 343:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 246:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 251
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 253:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 254:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=243 from oldreg=225, assigning class SSE_REGS to r243
  254: r243:SF=r243:SF+r169:SF
      REG_DEAD r226:SF
      REG_DEAD r169:SF
    Inserting insn reload before:
  344: r243:SF=r226:SF
    Inserting insn reload after:
  345: r225:SF=r243:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 345:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 255:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 256:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 261:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 269:  (0) x  (1) m {*floatsisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 270:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 271:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=244 from oldreg=174, assigning class SSE_REGS to r244
  271: r244:SF=r244:SF/r173:SF
      REG_DEAD r230:SF
      REG_DEAD r173:SF
    Inserting insn reload before:
  346: r244:SF=r230:SF
    Inserting insn reload after:
  347: r174:SF=r244:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 347:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 272:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 273:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) rm {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 282:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 284:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 294
	 Choosing alt 0 in insn 294:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 295:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 296:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 297
	 Choosing alt 0 in insn 297:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 299:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 302:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 305:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 306:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 309:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 314:  (0) r  (1) rm {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30

********** Pseudo live ranges #1: **********

  BB 30
  BB 29
   Insn 315: point = 0
   Insn 314: point = 0
   Insn 313: point = 1
  BB 26
   Insn 334: point = 2
   Insn 286: point = 2
   Insn 285: point = 2
   Insn 284: point = 2
   Insn 283: point = 2
   Insn 282: point = 2
  BB 25
   Insn 280: point = 2
   Insn 279: point = 2
   Insn 277: point = 3
   Insn 276: point = 5
  BB 2
   Insn 319: point = 6
   Insn 38: point = 6
   Insn 37: point = 6
   Insn 36: point = 7
   Insn 35: point = 9
   Insn 34: point = 11
   Insn 33: point = 12
   Insn 32: point = 14
   Insn 31: point = 16
   Insn 30: point = 17
   Insn 29: point = 18
   Insn 28: point = 20
   Insn 27: point = 22
   Insn 26: point = 23
   Insn 25: point = 25
   Insn 24: point = 26
   Insn 23: point = 27
   Insn 22: point = 29
   Insn 21: point = 30
   Insn 20: point = 30
   Insn 19: point = 31
   Insn 18: point = 32
   Insn 17: point = 33
   Insn 16: point = 34
   Insn 15: point = 34
   Insn 14: point = 34
   Insn 13: point = 34
   Insn 12: point = 34
   Insn 11: point = 34
   Insn 7: point = 34
   Insn 6: point = 34
   Insn 5: point = 34
   Insn 4: point = 34
   Insn 3: point = 34
   Insn 2: point = 34
  BB 24
   Insn 273: point = 34
   Insn 272: point = 34
   Insn 347: point = 35
	Hard reg 0 is preferable by r244 with profit 1
   Insn 271: point = 37
   Insn 346: point = 38
	Hard reg 0 is preferable by r244 with profit 1
	Hard reg 22 is preferable by r244 with profit 1
   Insn 270: point = 40
   Insn 269: point = 41
   Insn 268: point = 42
   Insn 267: point = 44
   Insn 266: point = 45
   Insn 265: point = 47
   Insn 264: point = 49
  BB 23
   Insn 262: point = 50
   Insn 261: point = 50
   Insn 260: point = 51
  BB 3
   Insn 321: point = 52
   Insn 63: point = 52
   Insn 62: point = 52
   Insn 61: point = 53
   Insn 60: point = 54
   Insn 338: point = 55
	Hard reg 0 is preferable by r238 with profit 1
   Insn 59: point = 57
   Insn 337: point = 58
	Hard reg 0 is preferable by r238 with profit 1
	Hard reg 1 is preferable by r238 with profit 1
   Insn 58: point = 60
   Insn 57: point = 62
   Insn 56: point = 63
   Insn 55: point = 65
   Insn 54: point = 66
   Insn 53: point = 66
   Insn 52: point = 67
   Insn 51: point = 68
   Insn 50: point = 68
   Insn 49: point = 70
   Insn 48: point = 71
   Insn 47: point = 73
   Insn 46: point = 75
   Insn 45: point = 77
   Insn 44: point = 78
   Insn 43: point = 80
   Insn 42: point = 81
  BB 22
   Insn 256: point = 82
   Insn 255: point = 82
   Insn 345: point = 83
	Hard reg 0 is preferable by r243 with profit 1
   Insn 254: point = 85
   Insn 344: point = 86
	Hard reg 0 is preferable by r243 with profit 1
	Hard reg 22 is preferable by r243 with profit 1
   Insn 253: point = 88
   Insn 252: point = 89
   Insn 251: point = 91
   Insn 250: point = 93
   Insn 249: point = 94
   Insn 248: point = 96
   Insn 247: point = 98
   Insn 246: point = 99
   Insn 343: point = 100
	Hard reg 0 is preferable by r242 with profit 1
   Insn 245: point = 102
   Insn 244: point = 104
   Insn 243: point = 105
   Insn 242: point = 105
   Insn 241: point = 106
   Insn 240: point = 107
   Insn 239: point = 109
   Insn 238: point = 111
   Insn 237: point = 113
   Insn 236: point = 114
   Insn 235: point = 116
   Insn 234: point = 118
   Insn 233: point = 119
   Insn 232: point = 121
   Insn 231: point = 122
   Insn 230: point = 124
   Insn 229: point = 126
  BB 17
   Insn 330: point = 127
  BB 16
   Insn 189: point = 127
   Insn 188: point = 127
  BB 14
   Insn 327: point = 127
   Insn 166: point = 127
  BB 15
   Insn 184: point = 127
   Insn 183: point = 127
   Insn 341: point = 128
	Hard reg 0 is preferable by r240 with profit 1
   Insn 182: point = 130
   Insn 181: point = 132
   Insn 180: point = 134
   Insn 179: point = 136
   Insn 178: point = 138
   Insn 177: point = 140
   Insn 176: point = 142
   Insn 175: point = 143
   Insn 174: point = 144
   Insn 173: point = 146
   Insn 172: point = 148
   Insn 171: point = 150
   Insn 170: point = 151
  BB 21
   Insn 226: point = 152
   Insn 225: point = 152
  BB 19
   Insn 332: point = 152
   Insn 202: point = 152
  BB 18
   Insn 200: point = 152
   Insn 199: point = 152
   Insn 198: point = 153
   Insn 197: point = 155
   Insn 196: point = 157
   Insn 195: point = 159
  BB 13
   Insn 164: point = 160
   Insn 163: point = 160
   Insn 162: point = 161
   Insn 161: point = 163
   Insn 160: point = 165
   Insn 159: point = 167
  BB 12
   Insn 156: point = 168
   Insn 155: point = 168
  BB 7
   Insn 323: point = 168
   Insn 116: point = 168
  BB 11
   Insn 151: point = 168
  BB 9
   Insn 325: point = 168
   Insn 135: point = 168
   Insn 134: point = 168
   Insn 133: point = 169
   Insn 132: point = 170
   Insn 131: point = 172
   Insn 130: point = 174
   Insn 129: point = 176
   Insn 128: point = 177
   Insn 127: point = 178
  BB 10
   Insn 148: point = 179
   Insn 147: point = 179
   Insn 146: point = 180
   Insn 145: point = 181
   Insn 144: point = 183
   Insn 143: point = 185
   Insn 142: point = 187
   Insn 141: point = 188
   Insn 140: point = 189
  BB 8
   Insn 125: point = 190
   Insn 124: point = 190
   Insn 123: point = 191
   Insn 122: point = 193
   Insn 121: point = 195
   Insn 120: point = 197
  BB 6
   Insn 114: point = 198
   Insn 113: point = 198
   Insn 112: point = 198
   Insn 111: point = 198
   Insn 110: point = 199
   Insn 109: point = 200
   Insn 108: point = 200
   Insn 107: point = 202
   Insn 106: point = 203
   Insn 105: point = 205
   Insn 104: point = 207
   Insn 103: point = 209
   Insn 102: point = 210
   Insn 101: point = 212
   Insn 100: point = 214
   Insn 99: point = 216
   Insn 98: point = 218
   Insn 97: point = 219
   Insn 96: point = 221
   Insn 95: point = 222
  BB 5
   Insn 92: point = 223
   Insn 91: point = 223
   Insn 90: point = 224
   Insn 89: point = 225
   Insn 88: point = 226
  BB 4
   Insn 86: point = 227
   Insn 85: point = 227
   Insn 84: point = 228
   Insn 83: point = 229
   Insn 82: point = 230
   Insn 81: point = 231
   Insn 80: point = 231
   Insn 79: point = 232
   Insn 78: point = 233
   Insn 77: point = 233
   Insn 76: point = 234
   Insn 75: point = 235
   Insn 74: point = 237
   Insn 73: point = 239
   Insn 72: point = 241
   Insn 340: point = 243
	Hard reg 2 is preferable by r239 with profit 1
   Insn 71: point = 245
   Insn 339: point = 245
   Insn 70: point = 246
   Insn 69: point = 248
   Insn 68: point = 249
   Insn 67: point = 251
  BB 20
   Insn 221: point = 252
   Insn 220: point = 252
   Insn 219: point = 253
   Insn 218: point = 254
   Insn 217: point = 256
   Insn 216: point = 258
   Insn 215: point = 260
   Insn 214: point = 261
   Insn 213: point = 262
   Insn 342: point = 263
	Hard reg 0 is preferable by r241 with profit 1
   Insn 212: point = 265
   Insn 211: point = 267
   Insn 210: point = 269
   Insn 209: point = 271
   Insn 208: point = 273
   Insn 207: point = 275
   Insn 206: point = 276
  BB 28
   Insn 309: point = 277
  BB 27
   Insn 307: point = 277
   Insn 306: point = 277
   Insn 305: point = 277
   Insn 304: point = 277
   Insn 303: point = 278
   Insn 302: point = 279
   Insn 301: point = 281
   Insn 300: point = 282
   Insn 299: point = 284
   Insn 298: point = 285
   Insn 297: point = 287
   Insn 296: point = 289
   Insn 295: point = 290
   Insn 294: point = 292
   Insn 293: point = 294
   Insn 292: point = 295
   Insn 291: point = 297
   Insn 290: point = 299
 r83: [30..31]
 r84: [26..27]
 r85: [19..23]
 r86: [19..20]
 r87: [13..14]
 r88: [8..12]
 r89: [8..9]
 r90: [6..7]
 r91: [2..3]
 r92: [72..78]
 r93: [74..75]
 r94: [72..73]
 r95: [67..71]
 r96: [66..68]
 r97: [59..63]
 r98: [57..60]
 r99: [233..249]
 r100: [242..246]
 r101: [236..237]
 r102: [232..235]
 r103: [231..234]
 r104: [229..230]
 r105: [227..228]
 r106: [224..226]
 r107: [211..219]
 r108: [215..216]
 r109: [213..214]
 r110: [211..212]
 r111: [204..210]
 r112: [206..207]
 r113: [204..205]
 r114: [199..203]
 r115: [198..200]
 r116: [194..195]
 r117: [192..193]
 r118: [190..191]
 r119: [169..178]
 r120: [171..177]
 r121: [173..174]
 r122: [171..172]
 r123: [168..170]
 r124: [180..189]
 r125: [182..188]
 r126: [184..185]
 r127: [182..183]
 r128: [179..181]
 r129: [164..165]
 r130: [162..163]
 r131: [160..161]
 r132: [145..151]
 r133: [147..148]
 r134: [145..146]
 r135: [127..144]
 r136: [137..143]
 r137: [139..140]
 r138: [137..138]
 r139: [135..136]
 r140: [133..134]
 r141: [127..128]
 r142: [156..157]
 r143: [154..155]
 r144: [152..153]
 r145: [270..276]
 r146: [272..273]
 r147: [270..271]
 r148: [268..269]
 r149: [266..267]
 r150: [255..261]
 r151: [257..258]
 r152: [255..256]
 r153: [252..254]
 r154: [123..124]
 r155: [120..122]
 r156: [99..119]
 r157: [117..118]
 r158: [115..116]
 r159: [106..114]
 r160: [112..113]
 r161: [110..111]
 r162: [108..109]
 r163: [105..107]
 r164: [103..104]
 r165: [99..100]
 r166: [95..96]
 r167: [92..94]
 r168: [90..91]
 r169: [85..89]
 r170: [46..47]
 r171: [43..45]
 r172: [34..42]
 r173: [37..41]
 r174: [34..35]
 r175: [296..297]
 r176: [293..295]
 r177: [291..292]
 r178: [288..290]
 r179: [286..287]
 r180: [283..285]
 r181: [278..282]
 r182: [277..279]
 r183: [32..33]
 r184: [28..29]
 r185: [24..25]
 r186: [21..22]
 r187: [17..18]
 r188: [15..16]
 r189: [10..11]
 r190: [79..81]
 r191: [79..80]
 r192: [76..77]
 r193: [69..70]
 r194: [64..65]
 r195: [61..62]
 r196: [54..55]
 r197: [52..53]
 r198: [250..251]
 r199: [247..248]
 r200: [242..243]
 r201: [240..241]
 r202: [238..239]
 r203: [223..225]
 r204: [220..222]
 r205: [220..221]
 r206: [217..218]
 r207: [208..209]
 r208: [201..202]
 r209: [196..197]
 r210: [175..176]
 r211: [186..187]
 r212: [166..167]
 r213: [149..150]
 r214: [141..142]
 r215: [131..132]
 r216: [158..159]
 r217: [274..275]
 r218: [262..263]
 r219: [259..260]
 r220: [252..253]
 r221: [125..126]
 r222: [120..121]
 r223: [97..98]
 r224: [92..93]
 r225: [82..83]
 r226: [87..88]
 r227: [50..51]
 r228: [48..49]
 r229: [43..44]
 r230: [39..40]
 r231: [4..5]
 r232: [298..299]
 r233: [293..294]
 r234: [288..289]
 r235: [283..284]
 r236: [280..281]
 r237: [0..1]
 r238: [56..58]
 r239: [244..245]
 r240: [129..130]
 r241: [264..265]
 r242: [101..102]
 r243: [84..86]
 r244: [36..38]
Compressing live ranges: from 300 to 252 - 84%
Ranges after the compression:
 r83: [28..29]
 r84: [24..25]
 r85: [18..21]
 r86: [18..19]
 r87: [12..13]
 r88: [8..11]
 r89: [8..9]
 r90: [6..7]
 r91: [2..3]
 r92: [62..67]
 r93: [64..65]
 r94: [62..63]
 r95: [58..61]
 r96: [58..59]
 r97: [52..55]
 r98: [50..53]
 r99: [196..209]
 r100: [204..207]
 r101: [198..199]
 r102: [196..197]
 r103: [196..197]
 r104: [194..195]
 r105: [192..193]
 r106: [190..191]
 r107: [180..187]
 r108: [184..185]
 r109: [182..183]
 r110: [180..181]
 r111: [174..179]
 r112: [176..177]
 r113: [174..175]
 r114: [170..173]
 r115: [170..171]
 r116: [166..167]
 r117: [164..165]
 r118: [162..163]
 r119: [146..153]
 r120: [148..153]
 r121: [150..151]
 r122: [148..149]
 r123: [146..147]
 r124: [154..161]
 r125: [156..161]
 r126: [158..159]
 r127: [156..157]
 r128: [154..155]
 r129: [142..143]
 r130: [140..141]
 r131: [138..139]
 r132: [124..129]
 r133: [126..127]
 r134: [124..125]
 r135: [108..123]
 r136: [118..123]
 r137: [120..121]
 r138: [118..119]
 r139: [116..117]
 r140: [114..115]
 r141: [108..109]
 r142: [134..135]
 r143: [132..133]
 r144: [130..131]
 r145: [228..233]
 r146: [230..231]
 r147: [228..229]
 r148: [226..227]
 r149: [224..225]
 r150: [214..219]
 r151: [216..217]
 r152: [214..215]
 r153: [212..213]
 r154: [104..105]
 r155: [102..103]
 r156: [84..101]
 r157: [100..101]
 r158: [98..99]
 r159: [90..97]
 r160: [96..97]
 r161: [94..95]
 r162: [92..93]
 r163: [90..91]
 r164: [88..89]
 r165: [84..85]
 r166: [80..81]
 r167: [78..79]
 r168: [76..77]
 r169: [72..75]
 r170: [40..41]
 r171: [38..39]
 r172: [32..37]
 r173: [34..37]
 r174: [32..33]
 r175: [248..249]
 r176: [246..247]
 r177: [244..245]
 r178: [242..243]
 r179: [240..241]
 r180: [238..239]
 r181: [234..237]
 r182: [234..235]
 r183: [30..31]
 r184: [26..27]
 r185: [22..23]
 r186: [20..21]
 r187: [16..17]
 r188: [14..15]
 r189: [10..11]
 r190: [68..69]
 r191: [68..69]
 r192: [66..67]
 r193: [60..61]
 r194: [56..57]
 r195: [54..55]
 r196: [48..49]
 r197: [46..47]
 r198: [210..211]
 r199: [208..209]
 r200: [204..205]
 r201: [202..203]
 r202: [200..201]
 r203: [190..191]
 r204: [188..189]
 r205: [188..189]
 r206: [186..187]
 r207: [178..179]
 r208: [172..173]
 r209: [168..169]
 r210: [152..153]
 r211: [160..161]
 r212: [144..145]
 r213: [128..129]
 r214: [122..123]
 r215: [112..113]
 r216: [136..137]
 r217: [232..233]
 r218: [220..221]
 r219: [218..219]
 r220: [212..213]
 r221: [106..107]
 r222: [102..103]
 r223: [82..83]
 r224: [78..79]
 r225: [70..71]
 r226: [74..75]
 r227: [44..45]
 r228: [42..43]
 r229: [38..39]
 r230: [36..37]
 r231: [4..5]
 r232: [250..251]
 r233: [246..247]
 r234: [242..243]
 r235: [238..239]
 r236: [236..237]
 r237: [0..1]
 r238: [50..51]
 r239: [206..207]
 r240: [110..111]
 r241: [222..223]
 r242: [86..87]
 r243: [72..73]
 r244: [34..35]

********** Assignment #1: **********

	 Assigning to 238 (cl=GENERAL_REGS, orig=196, freq=3, tfirst=238, tfreq=3)...
	   Assign 1 to reload r238 (freq=3)
	 Assigning to 239 (cl=GENERAL_REGS, orig=200, freq=3, tfirst=239, tfreq=3)...
	   Assign 2 to reload r239 (freq=3)
	 Assigning to 243 (cl=SSE_REGS, orig=225, freq=3, tfirst=243, tfreq=3)...
	   Assign 22 to reload r243 (freq=3)
	 Assigning to 244 (cl=SSE_REGS, orig=174, freq=3, tfirst=244, tfreq=3)...
	   Assign 22 to reload r244 (freq=3)
	 Assigning to 240 (cl=SSE_REGS, orig=141, freq=2, tfirst=240, tfreq=2)...
	   Assign 23 to reload r240 (freq=2)
	 Assigning to 241 (cl=SSE_REGS, orig=218, freq=2, tfirst=241, tfreq=2)...
	   Assign 24 to reload r241 (freq=2)
	 Assigning to 242 (cl=SSE_REGS, orig=165, freq=2, tfirst=242, tfreq=2)...
	   Assign 25 to reload r242 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 277
changing reg in insn 279
changing reg in insn 44
changing reg in insn 48
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 52
changing reg in insn 50
changing reg in insn 53
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 68
changing reg in insn 77
changing reg in insn 70
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 79
changing reg in insn 76
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 90
changing reg in insn 97
changing reg in insn 102
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 106
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 110
changing reg in insn 108
changing reg in insn 111
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 127
changing reg in insn 133
changing reg in insn 128
changing reg in insn 132
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 134
changing reg in insn 140
changing reg in insn 146
changing reg in insn 141
changing reg in insn 145
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 147
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 183
changing reg in insn 175
changing reg in insn 179
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 206
changing reg in insn 210
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 220
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 233
changing reg in insn 233
changing reg in insn 233
changing reg in insn 246
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 241
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 242
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 254
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 268
changing reg in insn 268
changing reg in insn 268
changing reg in insn 272
changing reg in insn 269
changing reg in insn 271
changing reg in insn 272
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 294
changing reg in insn 294
changing reg in insn 295
changing reg in insn 295
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 300
changing reg in insn 300
changing reg in insn 303
changing reg in insn 302
changing reg in insn 304
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 89
changing reg in insn 91
changing reg in insn 95
changing reg in insn 97
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 103
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 120
changing reg in insn 121
changing reg in insn 129
changing reg in insn 130
changing reg in insn 142
changing reg in insn 143
changing reg in insn 159
changing reg in insn 160
changing reg in insn 171
changing reg in insn 172
changing reg in insn 176
changing reg in insn 177
changing reg in insn 181
changing reg in insn 182
changing reg in insn 195
changing reg in insn 196
changing reg in insn 207
changing reg in insn 208
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 219
changing reg in insn 220
changing reg in insn 229
changing reg in insn 230
changing reg in insn 232
changing reg in insn 233
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 255
changing reg in insn 253
changing reg in insn 260
changing reg in insn 261
changing reg in insn 264
changing reg in insn 265
changing reg in insn 267
changing reg in insn 268
changing reg in insn 270
changing reg in insn 276
changing reg in insn 277
changing reg in insn 290
changing reg in insn 291
changing reg in insn 293
changing reg in insn 296
changing reg in insn 299
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 313
changing reg in insn 314
deleting insn with uid = 22.
deleting insn with uid = 23.
deleting insn with uid = 337.
deleting insn with uid = 340.
deleting insn with uid = 74.
deleting insn with uid = 79.
deleting insn with uid = 82.
deleting insn with uid = 122.
deleting insn with uid = 161.
deleting insn with uid = 197.
deleting insn with uid = 241.
deleting insn with uid = 242.
deleting insn with uid = 244.
deleting insn with uid = 344.
deleting insn with uid = 346.
deleting insn with uid = 303.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 112.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 243.
verify found no changes in insn with uid = 283.
verify found no changes in insn with uid = 285.
verify found no changes in insn with uid = 307.


void get_phase(float*, FILE**, Data_file_header*, InFile_struct*, long int, IOFiles*, int, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 37[r8] 38[r9]
;;  ref usage 	r0={104d,95u} r1={48d,37u,4e} r2={22d,11u} r3={1d,1u} r4={19d,8u} r5={22d,11u} r6={1d,131u} r7={1d,41u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={69d,12u} r18={11d} r19={11d} r20={1d,1u,10e} r21={21d,10u} r22={19d,7u} r23={13d,1u} r24={13d,1u} r25={13d,1u} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={12d,1u} r38={12d,1u} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} 
;;    total ref usage 1383{999d,370u,14e} in 253{242 regular + 11 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 87 88 89 90 183 184 185 186 187 188 189
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])
        (reg:DI 5 di [ phase ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])
        (reg:DI 4 si [ in_file ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 infile_struct+0 S8 A64])
        (reg:DI 2 cx [ infile_struct ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 header_size+0 S8 A64])
        (reg:DI 37 r8 [ header_size ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 file+0 S8 A64])
        (reg:DI 38 r9 [ file ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:654 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:655 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:656 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 numSets+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:657 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dataSizeChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:658 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:659 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SF 0 ax [183])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:660 129 {*movsf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])
        (reg:SF 0 ax [183])) ge2fitman_fmtext_o.cpp:660 129 {*movsf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 0 ax [orig:83 D.25164 ] [83])
        (const_int 8 [0x8])) ge2fitman_fmtext_o.cpp:665 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:83 D.25164 ] [83])) ge2fitman_fmtext_o.cpp:665 89 {*movdi_internal}
     (nil))
(call_insn 21 20 24 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b27d3efa200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:665 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 21 25 2 (set (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:84 D.25165 ] [84])) ge2fitman_fmtext_o.cpp:665 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 1 dx [orig:85 D.25166 ] [85])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [185])
                (const_int 24 [0x18])) [0 main_header_17(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [orig:86 D.25166 ] [86])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [186])
                (const_int 16 [0x10])) [0 main_header_17(D)->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg:DI 0 ax [187])
                (mult:DI (reg:DI 0 ax [orig:86 D.25166 ] [86])
                    (reg:DI 1 dx [orig:85 D.25166 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:671 307 {*muldi3_1}
     (nil))
(insn 30 29 31 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])
        (reg:DI 0 ax [187])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:684 89 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 0 ax [orig:87 D.25167 ] [87])
        (mem/j:SI (reg/f:DI 0 ax [188]) [0 infile_struct_21(D)->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:684 90 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:SI 1 dx [orig:88 D.25168 ] [88])
        (reg:SI 0 ax [orig:87 D.25167 ] [87])) ge2fitman_fmtext_o.cpp:684 90 {*movsi_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DI 0 ax [189])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:684 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:SI 0 ax [orig:89 D.25168 ] [89])
        (reg:SI 0 ax [189])) ge2fitman_fmtext_o.cpp:684 90 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (parallel [
            (set (reg:SI 0 ax [orig:90 D.25168 ] [90])
                (mult:SI (reg:SI 0 ax [orig:89 D.25168 ] [89])
                    (reg:SI 1 dx [orig:88 D.25168 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:684 306 {*mulsi3_1}
     (nil))
(insn 37 36 38 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dataSizeChannel+0 S4 A32])
        (reg:SI 0 ax [orig:90 D.25168 ] [90])) ge2fitman_fmtext_o.cpp:684 90 {*movsi_internal}
     (nil))
(insn 38 37 319 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:693 90 {*movsi_internal}
     (nil))
(jump_insn 319 38 320 2 (set (pc)
        (label_ref 274)) ge2fitman_fmtext_o.cpp:693 636 {jump}
     (nil)
 -> 274)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 320 319 278)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 92 93 94 95 96 97 98 190 191 192 193 194 195 196 197
(code_label 278 320 41 3 73 "" [1 uses])
(note 41 278 42 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 3 (set (reg:DI 1 dx [190])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:DI 0 ax [191])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 1 dx [orig:92 D.25166 ] [92])
                (plus:DI (reg:DI 1 dx [190])
                    (reg:DI 0 ax [191])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:700 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -88 [0xffffffffffffffa8])) [0 header_size+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 baseline_set_size+0 S8 A64]))
        (nil)))
(insn 45 44 46 3 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dataSizeChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:700 90 {*movsi_internal}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg:SI 0 ax [orig:93 D.25167 ] [93])
                (mult:SI (reg:SI 0 ax [192])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:700 306 {*mulsi3_1}
     (nil))
(insn 47 46 48 3 (set (reg:DI 0 ax [orig:94 D.25166 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.25167 ] [93]))) ge2fitman_fmtext_o.cpp:700 142 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 3 (parallel [
            (set (reg:DI 2 cx [orig:95 D.25166 ] [95])
                (plus:DI (reg:DI 1 dx [orig:92 D.25166 ] [92])
                    (reg:DI 0 ax [orig:94 D.25166 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:700 221 {*adddi_1}
     (nil))
(insn 49 48 50 3 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 50 49 51 3 (set (reg/f:DI 0 ax [orig:96 D.25169 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [193]) [0 *in_file_35(D)+0 S8 A64])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:700 90 {*movsi_internal}
     (nil))
(insn 52 51 53 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:95 D.25166 ] [95])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 53 52 54 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 D.25169 ] [96])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(call_insn 54 53 55 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b27d4102a00 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:700 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 55 54 56 3 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:710 89 {*movdi_internal}
     (nil))
(insn 56 55 57 3 (set (reg:SI 1 dx [orig:97 D.25167 ] [97])
        (mem/j:SI (reg/f:DI 0 ax [194]) [0 infile_struct_21(D)->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:710 90 {*movsi_internal}
     (nil))
(insn 57 56 58 3 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:710 89 {*movdi_internal}
     (nil))
(insn 58 57 59 3 (set (reg:SI 0 ax [orig:98 D.25167 ] [98])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [195])
                (const_int 4 [0x4])) [0 infile_struct_21(D)->num_unsup_sets+0 S4 A32])) ge2fitman_fmtext_o.cpp:710 90 {*movsi_internal}
     (nil))
(insn 59 58 338 3 (parallel [
            (set (reg:SI 1 dx [196])
                (minus:SI (reg:SI 1 dx [196])
                    (reg:SI 0 ax [orig:98 D.25167 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:710 263 {*subsi_1}
     (nil))
(insn 338 59 60 3 (set (reg:SI 0 ax [196])
        (reg:SI 1 dx [196])) ge2fitman_fmtext_o.cpp:710 90 {*movsi_internal}
     (nil))
(insn 60 338 61 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [196])) ge2fitman_fmtext_o.cpp:710 90 {*movsi_internal}
     (nil))
(insn 61 60 62 3 (set (reg:SF 0 ax [197])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:716 129 {*movsf_internal}
     (nil))
(insn 62 61 63 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])
        (reg:SF 0 ax [197])) ge2fitman_fmtext_o.cpp:716 129 {*movsf_internal}
     (nil))
(insn 63 62 321 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:719 90 {*movsi_internal}
     (nil))
(jump_insn 321 63 322 3 (set (pc)
        (label_ref 257)) ge2fitman_fmtext_o.cpp:719 636 {jump}
     (nil)
 -> 257)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 322 321 259)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 99 100 101 102 103 104 105 198 199 200 201 202
(code_label 259 322 66 4 72 "" [1 uses])
(note 66 259 67 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 4 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg/f:DI 1 dx [orig:99 D.25169 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [198]) [0 *in_file_35(D)+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 70 69 339 4 (set (reg:DI 0 ax [orig:100 D.25166 ] [100])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [199])
                (const_int 24 [0x18])) [0 main_header_17(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 339 70 71 4 (set (reg:DI 2 cx [200])
        (reg:DI 0 ax [orig:100 D.25166 ] [100])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 71 339 72 4 (parallel [
            (set (reg:DI 2 cx [200])
                (lshiftrt:DI (reg:DI 2 cx [200])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:728 531 {*lshrdi3_1}
     (nil))
(insn 72 71 73 4 (parallel [
            (set (reg:DI 0 ax [201])
                (plus:DI (reg:DI 0 ax [orig:100 D.25166 ] [100])
                    (reg:DI 2 cx [200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:728 221 {*adddi_1}
     (nil))
(insn 73 72 75 4 (parallel [
            (set (reg:DI 0 ax [202])
                (ashiftrt:DI (reg:DI 0 ax [201])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:728 532 {*ashrdi3_1}
     (nil))
(insn 75 73 76 4 (set (reg:DI 4 si [orig:102 D.25164 ] [102])
        (reg:DI 0 ax [orig:101 D.25166 ] [101])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (set (reg/f:DI 0 ax [orig:103 D.25170 ] [103])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:99 D.25169 ] [99])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 78 77 80 4 (set (reg:DI 1 dx)
        (const_int 2 [0x2])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 80 78 81 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:103 D.25170 ] [103])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(call_insn 81 80 83 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b27d4102500 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:728 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 83 81 84 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:104 D.25164 ] [104])
            (const_int 2 [0x2]))) ge2fitman_fmtext_o.cpp:728 8 {*cmpdi_1}
     (nil))
(insn 84 83 85 4 (set (reg:QI 0 ax [orig:105 D.25171 ] [105])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:728 592 {*setcc_qi}
     (nil))
(insn 85 84 86 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:105 D.25171 ] [105])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:728 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 86 85 87 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 93)
            (pc))) ge2fitman_fmtext_o.cpp:728 596 {*jcc_1}
     (nil)
 -> 93)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 106 203
(note 87 86 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 5 (set (reg/f:DI 1 dx [orig:106 D.25172 ] [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:734 89 {*movdi_internal}
     (nil))
(insn 89 88 90 5 (set (reg:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:734 89 {*movdi_internal}
     (nil))
(insn 90 89 91 5 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:106 D.25172 ] [106])) ge2fitman_fmtext_o.cpp:734 89 {*movdi_internal}
     (nil))
(insn 91 90 92 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [203])) ge2fitman_fmtext_o.cpp:734 89 {*movdi_internal}
     (nil))
(call_insn 92 91 93 5 (call (mem:QI (symbol_ref:DI ("_Z7exit_06PP8_IO_FILEPc") [flags 0x41]  <function_decl 0x2b27d5495d00 exit_06>) [0 exit_06 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:734 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 107 108 109 110 111 112 113 114 115 204 205 206 207 208
(code_label 93 92 94 6 60 "" [1 uses])
(note 94 93 95 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 6 (set (reg:DI 1 dx [204])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:742 89 {*movdi_internal}
     (nil))
(insn 96 95 97 6 (set (reg:DI 0 ax [205])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:742 89 {*movdi_internal}
     (nil))
(insn 97 96 98 6 (parallel [
            (set (reg:DI 1 dx [orig:107 D.25166 ] [107])
                (plus:DI (reg:DI 1 dx [204])
                    (reg:DI 0 ax [205])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:742 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -88 [0xffffffffffffffa8])) [0 header_size+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 baseline_set_size+0 S8 A64]))
        (nil)))
(insn 98 97 99 6 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:743 90 {*movsi_internal}
     (nil))
(insn 99 98 100 6 (parallel [
            (set (reg:SI 0 ax [orig:108 D.25167 ] [108])
                (plus:SI (reg:SI 0 ax [206])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:743 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 countFID+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 100 99 101 6 (set (reg:DI 0 ax [orig:109 D.25166 ] [109])
        (sign_extend:DI (reg:SI 0 ax [orig:108 D.25167 ] [108]))) ge2fitman_fmtext_o.cpp:743 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 6 (parallel [
            (set (reg:DI 0 ax [orig:110 D.25166 ] [110])
                (mult:DI (reg:DI 0 ax [orig:109 D.25166 ] [109])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:743 307 {*muldi3_1}
     (nil))
(insn 102 101 103 6 (parallel [
            (set (reg:DI 1 dx [orig:111 D.25166 ] [111])
                (plus:DI (reg:DI 1 dx [orig:107 D.25166 ] [107])
                    (reg:DI 0 ax [orig:110 D.25166 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:742 221 {*adddi_1}
     (nil))
(insn 103 102 104 6 (set (reg:SI 0 ax [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dataSizeChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:743 90 {*movsi_internal}
     (nil))
(insn 104 103 105 6 (parallel [
            (set (reg:SI 0 ax [orig:112 D.25167 ] [112])
                (mult:SI (reg:SI 0 ax [207])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:743 306 {*mulsi3_1}
     (nil))
(insn 105 104 106 6 (set (reg:DI 0 ax [orig:113 D.25166 ] [113])
        (sign_extend:DI (reg:SI 0 ax [orig:112 D.25167 ] [112]))) ge2fitman_fmtext_o.cpp:743 142 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 6 (parallel [
            (set (reg:DI 2 cx [orig:114 D.25166 ] [114])
                (plus:DI (reg:DI 1 dx [orig:111 D.25166 ] [111])
                    (reg:DI 0 ax [orig:113 D.25166 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:743 221 {*adddi_1}
     (nil))
(insn 107 106 108 6 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:743 89 {*movdi_internal}
     (nil))
(insn 108 107 109 6 (set (reg/f:DI 0 ax [orig:115 D.25169 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [208]) [0 *in_file_35(D)+0 S8 A64])) ge2fitman_fmtext_o.cpp:743 89 {*movdi_internal}
     (nil))
(insn 109 108 110 6 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:743 90 {*movsi_internal}
     (nil))
(insn 110 109 111 6 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:114 D.25166 ] [114])) ge2fitman_fmtext_o.cpp:743 89 {*movdi_internal}
     (nil))
(insn 111 110 112 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:115 D.25169 ] [115])) ge2fitman_fmtext_o.cpp:743 89 {*movdi_internal}
     (nil))
(call_insn 112 111 113 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b27d4102a00 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:743 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 113 112 114 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 16 [0x10])) [0 swap_bytes+0 S4 A64])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:746 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 114 113 115 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 157)
            (pc))) ge2fitman_fmtext_o.cpp:746 596 {*jcc_1}
     (nil)
 -> 157)
;;  succ:       7 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 115 114 116 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 323 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:747 90 {*movsi_internal}
     (nil))
(jump_insn 323 116 324 7 (set (pc)
        (label_ref 152)) ge2fitman_fmtext_o.cpp:747 636 {jump}
     (nil)
 -> 152)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 324 323 154)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 118 209
(code_label 154 324 119 8 65 "" [1 uses])
(note 119 154 120 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 8 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:752 89 {*movdi_internal}
     (nil))
(insn 121 120 123 8 (set (reg:DI 0 ax [orig:116 D.25166 ] [116])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [209])
                (const_int 24 [0x18])) [0 main_header_17(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:752 89 {*movdi_internal}
     (nil))
(insn 123 121 124 8 (parallel [
            (set (reg:DI 0 ax [orig:118 D.25173 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 D.25173 ] [117])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:752 221 {*adddi_1}
     (nil))
(insn 124 123 125 8 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:118 D.25173 ] [118])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:752 8 {*cmpdi_1}
     (nil))
(jump_insn 125 124 126 8 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) ge2fitman_fmtext_o.cpp:752 596 {*jcc_1}
     (nil)
 -> 138)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 119 120 121 122 123 210
(note 126 125 127 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 9 (set (reg:SI 2 cx [orig:119 D.25167 ] [119])
        (const_int 2 [0x2])) ge2fitman_fmtext_o.cpp:753 90 {*movsi_internal}
     (nil))
(insn 128 127 129 9 (set (reg/f:DI 0 ax [orig:120 D.25174 ] [120])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.sh+0 S8 A64])) ge2fitman_fmtext_o.cpp:753 89 {*movdi_internal}
     (nil))
(insn 129 128 130 9 (set (reg:SI 1 dx [210])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:753 90 {*movsi_internal}
     (nil))
(insn 130 129 131 9 (set (reg:DI 1 dx [orig:121 D.25164 ] [121])
        (sign_extend:DI (reg:SI 1 dx [210]))) ge2fitman_fmtext_o.cpp:753 142 {*extendsidi2_rex64}
     (nil))
(insn 131 130 132 9 (parallel [
            (set (reg:DI 1 dx [orig:122 D.25164 ] [122])
                (ashift:DI (reg:DI 1 dx [orig:121 D.25164 ] [121])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:753 497 {*ashldi3_1}
     (nil))
(insn 132 131 133 9 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.25175 ] [123])
                (plus:DI (reg/f:DI 0 ax [orig:120 D.25174 ] [120])
                    (reg:DI 1 dx [orig:122 D.25164 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:753 221 {*adddi_1}
     (nil))
(insn 133 132 134 9 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:119 D.25167 ] [119])) ge2fitman_fmtext_o.cpp:753 90 {*movsi_internal}
     (nil))
(insn 134 133 135 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:123 D.25175 ] [123])) ge2fitman_fmtext_o.cpp:753 89 {*movdi_internal}
     (nil))
(call_insn 135 134 325 9 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b27d5490c00 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:753 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 325 135 326 9 (set (pc)
        (label_ref 149)) 636 {jump}
     (nil)
 -> 149)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 326 325 138)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 124 125 126 127 128 211
(code_label 138 326 139 10 63 "" [1 uses])
(note 139 138 140 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 10 (set (reg:SI 2 cx [orig:124 D.25167 ] [124])
        (const_int 8 [0x8])) ge2fitman_fmtext_o.cpp:755 90 {*movsi_internal}
     (nil))
(insn 141 140 142 10 (set (reg/f:DI 0 ax [orig:125 D.25176 ] [125])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:755 89 {*movdi_internal}
     (nil))
(insn 142 141 143 10 (set (reg:SI 1 dx [211])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:755 90 {*movsi_internal}
     (nil))
(insn 143 142 144 10 (set (reg:DI 1 dx [orig:126 D.25164 ] [126])
        (sign_extend:DI (reg:SI 1 dx [211]))) ge2fitman_fmtext_o.cpp:755 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 10 (parallel [
            (set (reg:DI 1 dx [orig:127 D.25164 ] [127])
                (ashift:DI (reg:DI 1 dx [orig:126 D.25164 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:755 497 {*ashldi3_1}
     (nil))
(insn 145 144 146 10 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.25175 ] [128])
                (plus:DI (reg/f:DI 0 ax [orig:125 D.25176 ] [125])
                    (reg:DI 1 dx [orig:127 D.25164 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:755 221 {*adddi_1}
     (nil))
(insn 146 145 147 10 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:124 D.25167 ] [124])) ge2fitman_fmtext_o.cpp:755 90 {*movsi_internal}
     (nil))
(insn 147 146 148 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:128 D.25175 ] [128])) ge2fitman_fmtext_o.cpp:755 89 {*movdi_internal}
     (nil))
(call_insn 148 147 149 10 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b27d5490c00 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:755 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 149 148 150 11 64 "" [1 uses])
(note 150 149 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:747 220 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 152 151 153 12 62 "" [1 uses])
(note 153 152 155 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 155 153 156 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:747 7 {*cmpsi_1}
     (nil))
(jump_insn 156 155 157 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) ge2fitman_fmtext_o.cpp:747 596 {*jcc_1}
     (nil)
 -> 154)
;;  succ:       8
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131 212
(code_label 157 156 158 13 61 "" [1 uses])
(note 158 157 159 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 13 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:777 89 {*movdi_internal}
     (nil))
(insn 160 159 162 13 (set (reg:DI 0 ax [orig:129 D.25166 ] [129])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [212])
                (const_int 24 [0x18])) [0 main_header_17(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:777 89 {*movdi_internal}
     (nil))
(insn 162 160 163 13 (parallel [
            (set (reg:DI 0 ax [orig:131 D.25173 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 D.25173 ] [130])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:777 221 {*adddi_1}
     (nil))
(insn 163 162 164 13 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:131 D.25173 ] [131])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:777 8 {*cmpdi_1}
     (nil))
(jump_insn 164 163 165 13 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) ge2fitman_fmtext_o.cpp:777 596 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       14 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 165 164 166 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 327 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:778 90 {*movsi_internal}
     (nil))
(jump_insn 327 166 328 14 (set (pc)
        (label_ref 185)) ge2fitman_fmtext_o.cpp:778 636 {jump}
     (nil)
 -> 185)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 328 327 187)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 133 134 135 136 137 138 139 140 141 213 214 215
(code_label 187 328 169 15 68 "" [1 uses])
(note 169 187 170 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 15 (set (reg/f:DI 0 ax [orig:132 D.25170 ] [132])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:779 89 {*movdi_internal}
     (nil))
(insn 171 170 172 15 (set (reg:SI 1 dx [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:779 90 {*movsi_internal}
     (nil))
(insn 172 171 173 15 (set (reg:DI 1 dx [orig:133 D.25164 ] [133])
        (sign_extend:DI (reg:SI 1 dx [213]))) ge2fitman_fmtext_o.cpp:779 142 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 15 (parallel [
            (set (reg:DI 1 dx [orig:134 D.25164 ] [134])
                (ashift:DI (reg:DI 1 dx [orig:133 D.25164 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:779 497 {*ashldi3_1}
     (nil))
(insn 174 173 175 15 (parallel [
            (set (reg/f:DI 1 dx [orig:135 D.25170 ] [135])
                (plus:DI (reg:DI 1 dx [orig:134 D.25164 ] [134])
                    (reg/f:DI 0 ax [orig:132 D.25170 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:779 221 {*adddi_1}
     (nil))
(insn 175 174 176 15 (set (reg/f:DI 0 ax [orig:136 D.25174 ] [136])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.sh+0 S8 A64])) ge2fitman_fmtext_o.cpp:779 89 {*movdi_internal}
     (nil))
(insn 176 175 177 15 (set (reg:SI 2 cx [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:779 90 {*movsi_internal}
     (nil))
(insn 177 176 178 15 (set (reg:DI 2 cx [orig:137 D.25164 ] [137])
        (sign_extend:DI (reg:SI 2 cx [214]))) ge2fitman_fmtext_o.cpp:779 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 15 (parallel [
            (set (reg:DI 2 cx [orig:138 D.25164 ] [138])
                (ashift:DI (reg:DI 2 cx [orig:137 D.25164 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:779 497 {*ashldi3_1}
     (nil))
(insn 179 178 180 15 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.25174 ] [139])
                (plus:DI (reg/f:DI 0 ax [orig:136 D.25174 ] [136])
                    (reg:DI 2 cx [orig:138 D.25164 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:779 221 {*adddi_1}
     (nil))
(insn 180 179 181 15 (set (reg:HI 0 ax [orig:140 D.25177 ] [140])
        (mem:HI (reg/f:DI 0 ax [orig:139 D.25174 ] [139]) [0 *_88+0 S2 A16])) ge2fitman_fmtext_o.cpp:779 92 {*movhi_internal}
     (nil))
(insn 181 180 182 15 (set (reg:SI 0 ax [215])
        (sign_extend:SI (reg:HI 0 ax [orig:140 D.25177 ] [140]))) ge2fitman_fmtext_o.cpp:779 146 {extendhisi2}
     (nil))
(insn 182 181 341 15 (set (reg:SF 23 xmm2 [orig:141 D.25178 ] [141])
        (float:SF (reg:SI 0 ax [215]))) ge2fitman_fmtext_o.cpp:779 199 {*floatsisf2_sse}
     (nil))
(insn 341 182 183 15 (set (reg:SF 0 ax [orig:141 D.25178 ] [141])
        (reg:SF 23 xmm2 [orig:141 D.25178 ] [141])) ge2fitman_fmtext_o.cpp:779 129 {*movsf_internal}
     (nil))
(insn 183 341 184 15 (set (mem:SF (reg/f:DI 1 dx [orig:135 D.25170 ] [135]) [0 *_84+0 S4 A32])
        (reg:SF 0 ax [orig:141 D.25178 ] [141])) ge2fitman_fmtext_o.cpp:779 129 {*movsf_internal}
     (nil))
(insn 184 183 185 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:778 220 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              14 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 185 184 186 16 67 "" [1 uses])
(note 186 185 188 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 188 186 189 16 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:778 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 189 188 329 16 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) ge2fitman_fmtext_o.cpp:778 596 {*jcc_1}
     (nil)
 -> 187)
;;  succ:       15
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 329 189 330 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(jump_insn 330 329 331 17 (set (pc)
        (label_ref 227)) 636 {jump}
     (nil)
 -> 227)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 331 330 193)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 144 216
(code_label 193 331 194 18 66 "" [1 uses])
(note 194 193 195 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 18 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:782 89 {*movdi_internal}
     (nil))
(insn 196 195 198 18 (set (reg:DI 0 ax [orig:142 D.25166 ] [142])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [216])
                (const_int 24 [0x18])) [0 main_header_17(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:782 89 {*movdi_internal}
     (nil))
(insn 198 196 199 18 (parallel [
            (set (reg:DI 0 ax [orig:144 D.25173 ] [144])
                (plus:DI (reg:DI 0 ax [orig:143 D.25173 ] [143])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:782 221 {*adddi_1}
     (nil))
(insn 199 198 200 18 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:144 D.25173 ] [144])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:782 8 {*cmpdi_1}
     (nil))
(jump_insn 200 199 201 18 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 227)
            (pc))) ge2fitman_fmtext_o.cpp:782 596 {*jcc_1}
     (nil)
 -> 227)
;;  succ:       19 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 201 200 202 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 332 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:783 90 {*movsi_internal}
     (nil))
(jump_insn 332 202 333 19 (set (pc)
        (label_ref 222)) ge2fitman_fmtext_o.cpp:783 636 {jump}
     (nil)
 -> 222)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 333 332 224)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 146 147 148 149 150 151 152 153 217 218 219 220
(code_label 224 333 205 20 71 "" [1 uses])
(note 205 224 206 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 20 (set (reg/f:DI 0 ax [orig:145 D.25176 ] [145])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:784 89 {*movdi_internal}
     (nil))
(insn 207 206 208 20 (set (reg:SI 1 dx [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:784 90 {*movsi_internal}
     (nil))
(insn 208 207 209 20 (set (reg:DI 1 dx [orig:146 D.25164 ] [146])
        (sign_extend:DI (reg:SI 1 dx [217]))) ge2fitman_fmtext_o.cpp:784 142 {*extendsidi2_rex64}
     (nil))
(insn 209 208 210 20 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25164 ] [147])
                (ashift:DI (reg:DI 1 dx [orig:146 D.25164 ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:784 497 {*ashldi3_1}
     (nil))
(insn 210 209 211 20 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.25176 ] [148])
                (plus:DI (reg/f:DI 0 ax [orig:145 D.25176 ] [145])
                    (reg:DI 1 dx [orig:147 D.25164 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:784 221 {*adddi_1}
     (nil))
(insn 211 210 212 20 (set (reg:DI 0 ax [orig:149 D.25166 ] [149])
        (mem:DI (reg/f:DI 0 ax [orig:148 D.25176 ] [148]) [0 *_99+0 S8 A64])) ge2fitman_fmtext_o.cpp:784 89 {*movdi_internal}
     (nil))
(insn 212 211 342 20 (set (reg:SF 24 xmm3 [218])
        (float:SF (reg:DI 0 ax [orig:149 D.25166 ] [149]))) ge2fitman_fmtext_o.cpp:784 200 {*floatdisf2_sse}
     (nil))
(insn 342 212 213 20 (set (reg:SF 0 ax [218])
        (reg:SF 24 xmm3 [218])) ge2fitman_fmtext_o.cpp:784 129 {*movsf_internal}
     (nil))
(insn 213 342 214 20 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 temp_float+0 S4 A32])
        (reg:SF 0 ax [218])) ge2fitman_fmtext_o.cpp:784 129 {*movsf_internal}
     (nil))
(insn 214 213 215 20 (set (reg/f:DI 0 ax [orig:150 D.25170 ] [150])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:785 89 {*movdi_internal}
     (nil))
(insn 215 214 216 20 (set (reg:SI 1 dx [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:785 90 {*movsi_internal}
     (nil))
(insn 216 215 217 20 (set (reg:DI 1 dx [orig:151 D.25164 ] [151])
        (sign_extend:DI (reg:SI 1 dx [219]))) ge2fitman_fmtext_o.cpp:785 142 {*extendsidi2_rex64}
     (nil))
(insn 217 216 218 20 (parallel [
            (set (reg:DI 1 dx [orig:152 D.25164 ] [152])
                (ashift:DI (reg:DI 1 dx [orig:151 D.25164 ] [151])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:785 497 {*ashldi3_1}
     (nil))
(insn 218 217 219 20 (parallel [
            (set (reg/f:DI 1 dx [orig:153 D.25170 ] [153])
                (plus:DI (reg:DI 1 dx [orig:152 D.25164 ] [152])
                    (reg/f:DI 0 ax [orig:150 D.25170 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:785 221 {*adddi_1}
     (nil))
(insn 219 218 220 20 (set (reg:SF 0 ax [220])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 temp_float+0 S4 A32])) ge2fitman_fmtext_o.cpp:785 129 {*movsf_internal}
     (nil))
(insn 220 219 221 20 (set (mem:SF (reg/f:DI 1 dx [orig:153 D.25170 ] [153]) [0 *_105+0 S4 A32])
        (reg:SF 0 ax [220])) ge2fitman_fmtext_o.cpp:785 129 {*movsf_internal}
     (nil))
(insn 221 220 222 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:783 220 {*addsi_1}
     (nil))
;;  succ:       21 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU,DFS_BACK)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 222 221 223 21 70 "" [1 uses])
(note 223 222 225 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 225 223 226 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:783 7 {*cmpsi_1}
     (nil))
(jump_insn 226 225 227 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 224)
            (pc))) ge2fitman_fmtext_o.cpp:783 596 {*jcc_1}
     (nil)
 -> 224)
;;  succ:       20
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              18
;;              17 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 221 222 223 224 225 226
(code_label 227 226 228 22 69 "" [2 uses])
(note 228 227 229 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 230 22 (set (reg:SI 0 ax [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:794 90 {*movsi_internal}
     (nil))
(insn 230 229 231 22 (set (reg:DI 0 ax [orig:154 D.25164 ] [154])
        (sign_extend:DI (reg:SI 0 ax [221]))) ge2fitman_fmtext_o.cpp:794 142 {*extendsidi2_rex64}
     (nil))
(insn 231 230 232 22 (parallel [
            (set (reg:DI 1 dx [orig:155 D.25164 ] [155])
                (ashift:DI (reg:DI 0 ax [orig:154 D.25164 ] [154])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:794 497 {*ashldi3_1}
     (nil))
(insn 232 231 233 22 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:794 89 {*movdi_internal}
     (nil))
(insn 233 232 234 22 (parallel [
            (set (reg/f:DI 3 bx [orig:156 D.25170 ] [156])
                (plus:DI (reg:DI 1 dx [orig:155 D.25164 ] [155])
                    (reg/f:DI 0 ax [222])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:794 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.25164 ] [155]))
        (nil)))
(insn 234 233 235 22 (set (reg/f:DI 0 ax [orig:157 D.25170 ] [157])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:794 89 {*movdi_internal}
     (nil))
(insn 235 234 236 22 (set (reg:SF 21 xmm0 [orig:158 D.25178 ] [158])
        (mem:SF (reg/f:DI 0 ax [orig:157 D.25170 ] [157]) [0 *_111+0 S4 A32])) ge2fitman_fmtext_o.cpp:794 129 {*movsf_internal}
     (nil))
(insn 236 235 237 22 (set (reg:DF 22 xmm1 [orig:159 D.25179 ] [159])
        (float_extend:DF (reg:SF 21 xmm0 [orig:158 D.25178 ] [158]))) ge2fitman_fmtext_o.cpp:794 152 {*extendsfdf2_sse}
     (nil))
(insn 237 236 238 22 (set (reg/f:DI 0 ax [orig:160 D.25170 ] [160])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:794 89 {*movdi_internal}
     (nil))
(insn 238 237 239 22 (parallel [
            (set (reg/f:DI 0 ax [orig:161 D.25170 ] [161])
                (plus:DI (reg/f:DI 0 ax [orig:160 D.25170 ] [160])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:794 221 {*adddi_1}
     (nil))
(insn 239 238 240 22 (set (reg:SF 21 xmm0 [orig:162 D.25178 ] [162])
        (mem:SF (reg/f:DI 0 ax [orig:161 D.25170 ] [161]) [0 *_115+0 S4 A32])) ge2fitman_fmtext_o.cpp:794 129 {*movsf_internal}
     (nil))
(insn 240 239 243 22 (set (reg:DF 21 xmm0 [orig:163 D.25179 ] [163])
        (float_extend:DF (reg:SF 21 xmm0 [orig:162 D.25178 ] [162]))) ge2fitman_fmtext_o.cpp:794 152 {*extendsfdf2_sse}
     (nil))
(call_insn 243 240 245 22 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b27d3e52100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:794 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 245 243 343 22 (set (reg:SF 25 xmm4 [orig:165 D.25178 ] [165])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:164 D.25179 ] [164]))) ge2fitman_fmtext_o.cpp:794 157 {*truncdfsf_fast_sse}
     (nil))
(insn 343 245 246 22 (set (reg:SF 0 ax [orig:165 D.25178 ] [165])
        (reg:SF 25 xmm4 [orig:165 D.25178 ] [165])) ge2fitman_fmtext_o.cpp:794 129 {*movsf_internal}
     (nil))
(insn 246 343 247 22 (set (mem:SF (reg/f:DI 3 bx [orig:156 D.25170 ] [156]) [0 *_110+0 S4 A32])
        (reg:SF 0 ax [orig:165 D.25178 ] [165])) ge2fitman_fmtext_o.cpp:794 129 {*movsf_internal}
     (nil))
(insn 247 246 248 22 (set (reg:SI 0 ax [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:795 90 {*movsi_internal}
     (nil))
(insn 248 247 249 22 (set (reg:DI 0 ax [orig:166 D.25164 ] [166])
        (sign_extend:DI (reg:SI 0 ax [223]))) ge2fitman_fmtext_o.cpp:795 142 {*extendsidi2_rex64}
     (nil))
(insn 249 248 250 22 (parallel [
            (set (reg:DI 1 dx [orig:167 D.25164 ] [167])
                (ashift:DI (reg:DI 0 ax [orig:166 D.25164 ] [166])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:795 497 {*ashldi3_1}
     (nil))
(insn 250 249 251 22 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:795 89 {*movdi_internal}
     (nil))
(insn 251 250 252 22 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.25170 ] [168])
                (plus:DI (reg/f:DI 0 ax [224])
                    (reg:DI 1 dx [orig:167 D.25164 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:795 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:167 D.25164 ] [167]))
        (nil)))
(insn 252 251 253 22 (set (reg:SF 21 xmm0 [orig:169 D.25178 ] [169])
        (mem:SF (reg/f:DI 0 ax [orig:168 D.25170 ] [168]) [0 *_122+0 S4 A32])) ge2fitman_fmtext_o.cpp:795 129 {*movsf_internal}
     (nil))
(insn 253 252 254 22 (set (reg:SF 22 xmm1 [226])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])) ge2fitman_fmtext_o.cpp:795 129 {*movsf_internal}
     (nil))
(insn 254 253 345 22 (set (reg:SF 22 xmm1 [225])
        (plus:SF (reg:SF 22 xmm1 [225])
            (reg:SF 21 xmm0 [orig:169 D.25178 ] [169]))) ge2fitman_fmtext_o.cpp:795 775 {*fop_sf_comm_sse}
     (nil))
(insn 345 254 255 22 (set (reg:SF 0 ax [225])
        (reg:SF 22 xmm1 [225])) ge2fitman_fmtext_o.cpp:795 129 {*movsf_internal}
     (nil))
(insn 255 345 256 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])
        (reg:SF 0 ax [225])) ge2fitman_fmtext_o.cpp:795 129 {*movsf_internal}
     (nil))
(insn 256 255 257 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:719 220 {*addsi_1}
     (nil))
;;  succ:       23 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 227
(code_label 257 256 258 23 59 "" [1 uses])
(note 258 257 260 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 260 258 261 23 (set (reg:SI 0 ax [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:719 90 {*movsi_internal}
     (nil))
(insn 261 260 262 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [227])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 numSets+0 S4 A32]))) ge2fitman_fmtext_o.cpp:719 7 {*cmpsi_1}
     (nil))
(jump_insn 262 261 263 23 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 259)
            (pc))) ge2fitman_fmtext_o.cpp:719 596 {*jcc_1}
     (nil)
 -> 259)
;;  succ:       4
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 170 171 172 173 174 228 229 230
(note 263 262 264 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 264 263 265 24 (set (reg:SI 0 ax [228])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:799 90 {*movsi_internal}
     (nil))
(insn 265 264 266 24 (set (reg:DI 0 ax [orig:170 D.25164 ] [170])
        (sign_extend:DI (reg:SI 0 ax [228]))) ge2fitman_fmtext_o.cpp:799 142 {*extendsidi2_rex64}
     (nil))
(insn 266 265 267 24 (parallel [
            (set (reg:DI 1 dx [orig:171 D.25164 ] [171])
                (ashift:DI (reg:DI 0 ax [orig:170 D.25164 ] [170])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:799 497 {*ashldi3_1}
     (nil))
(insn 267 266 268 24 (set (reg/f:DI 0 ax [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:799 89 {*movdi_internal}
     (nil))
(insn 268 267 269 24 (parallel [
            (set (reg/f:DI 1 dx [orig:172 D.25170 ] [172])
                (plus:DI (reg:DI 1 dx [orig:171 D.25164 ] [171])
                    (reg/f:DI 0 ax [229])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:799 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:171 D.25164 ] [171]))
        (nil)))
(insn 269 268 270 24 (set (reg:SF 21 xmm0 [orig:173 D.25178 ] [173])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32]))) ge2fitman_fmtext_o.cpp:799 199 {*floatsisf2_sse}
     (nil))
(insn 270 269 271 24 (set (reg:SF 22 xmm1 [230])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])) ge2fitman_fmtext_o.cpp:799 129 {*movsf_internal}
     (nil))
(insn 271 270 347 24 (set (reg:SF 22 xmm1 [orig:174 D.25178 ] [174])
        (div:SF (reg:SF 22 xmm1 [orig:174 D.25178 ] [174])
            (reg:SF 21 xmm0 [orig:173 D.25178 ] [173]))) ge2fitman_fmtext_o.cpp:799 782 {*fop_sf_1_sse}
     (nil))
(insn 347 271 272 24 (set (reg:SF 0 ax [orig:174 D.25178 ] [174])
        (reg:SF 22 xmm1 [orig:174 D.25178 ] [174])) ge2fitman_fmtext_o.cpp:799 129 {*movsf_internal}
     (nil))
(insn 272 347 273 24 (set (mem:SF (reg/f:DI 1 dx [orig:172 D.25170 ] [172]) [0 *_128+0 S4 A32])
        (reg:SF 0 ax [orig:174 D.25178 ] [174])) ge2fitman_fmtext_o.cpp:799 129 {*movsf_internal}
     (nil))
(insn 273 272 274 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:693 220 {*addsi_1}
     (nil))
;;  succ:       25 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 231
(code_label 274 273 275 25 58 "" [1 uses])
(note 275 274 276 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 25 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:693 89 {*movdi_internal}
     (nil))
(insn 277 276 279 25 (set (reg:SI 0 ax [orig:91 D.25167 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [231])
                (const_int 508 [0x1fc])) [0 procpar_info_28(D)->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:693 90 {*movsi_internal}
     (nil))
(insn 279 277 280 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:91 D.25167 ] [91])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32]))) ge2fitman_fmtext_o.cpp:693 7 {*cmpsi_1}
     (nil))
(jump_insn 280 279 281 25 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 278)
            (pc))) ge2fitman_fmtext_o.cpp:693 596 {*jcc_1}
     (nil)
 -> 278)
;;  succ:       3
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 281 280 282 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 283 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x2b27d55bc2f8 *.LC29>)) ge2fitman_fmtext_o.cpp:806 89 {*movdi_internal}
     (nil))
(call_insn 283 282 284 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:806 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 284 283 285 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x2b27d55bc390 *.LC30>)) ge2fitman_fmtext_o.cpp:808 89 {*movdi_internal}
     (nil))
(call_insn 285 284 286 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b27d3ed1900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:808 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 286 285 334 26 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:809 90 {*movsi_internal}
     (nil))
(jump_insn 334 286 335 26 (set (pc)
        (label_ref 310)) ge2fitman_fmtext_o.cpp:809 636 {jump}
     (nil)
 -> 310)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 335 334 312)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 175 176 177 178 179 180 181 182 232 233 234 235 236
(code_label 312 335 289 27 75 "" [1 uses])
(note 289 312 290 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 27 (set (reg:SI 0 ax [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])) ge2fitman_fmtext_o.cpp:810 90 {*movsi_internal}
     (nil))
(insn 291 290 292 27 (set (reg:DI 0 ax [orig:175 D.25164 ] [175])
        (sign_extend:DI (reg:SI 0 ax [232]))) ge2fitman_fmtext_o.cpp:810 142 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 27 (parallel [
            (set (reg:DI 1 dx [orig:176 D.25164 ] [176])
                (ashift:DI (reg:DI 0 ax [orig:175 D.25164 ] [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:810 497 {*ashldi3_1}
     (nil))
(insn 293 292 294 27 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:810 89 {*movdi_internal}
     (nil))
(insn 294 293 295 27 (parallel [
            (set (reg/f:DI 0 ax [orig:177 D.25170 ] [177])
                (plus:DI (reg/f:DI 0 ax [233])
                    (reg:DI 1 dx [orig:176 D.25164 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:810 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:176 D.25164 ] [176]))
        (nil)))
(insn 295 294 296 27 (set (reg:SF 22 xmm1 [orig:178 D.25178 ] [178])
        (mem:SF (reg/f:DI 0 ax [orig:177 D.25170 ] [177]) [0 *_135+0 S4 A32])) ge2fitman_fmtext_o.cpp:810 129 {*movsf_internal}
     (nil))
(insn 296 295 297 27 (set (reg:SF 21 xmm0 [234])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC31") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:810 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.8e+2 [0x0.b4p+8])
        (nil)))
(insn 297 296 298 27 (set (reg:SF 21 xmm0 [orig:179 D.25178 ] [179])
        (mult:SF (reg:SF 21 xmm0 [234])
            (reg:SF 22 xmm1 [orig:178 D.25178 ] [178]))) ge2fitman_fmtext_o.cpp:810 775 {*fop_sf_comm_sse}
     (nil))
(insn 298 297 299 27 (set (reg:DF 21 xmm0 [orig:180 D.25179 ] [180])
        (float_extend:DF (reg:SF 21 xmm0 [orig:179 D.25178 ] [179]))) ge2fitman_fmtext_o.cpp:810 152 {*extendsfdf2_sse}
     (nil))
(insn 299 298 300 27 (set (reg:DF 22 xmm1 [235])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC32") [flags 0x2]) [0  S8 A64])) ge2fitman_fmtext_o.cpp:810 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 300 299 301 27 (set (reg:DF 21 xmm0 [orig:181 D.25179 ] [181])
        (div:DF (reg:DF 21 xmm0 [orig:180 D.25179 ] [180])
            (reg:DF 22 xmm1 [235]))) ge2fitman_fmtext_o.cpp:810 783 {*fop_df_1_sse}
     (nil))
(insn 301 300 302 27 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])) ge2fitman_fmtext_o.cpp:810 90 {*movsi_internal}
     (nil))
(insn 302 301 304 27 (parallel [
            (set (reg:SI 0 ax [orig:182 D.25167 ] [182])
                (plus:SI (reg:SI 0 ax [236])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:810 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 counter+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 304 302 305 27 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:182 D.25167 ] [182])) ge2fitman_fmtext_o.cpp:810 90 {*movsi_internal}
     (nil))
(insn 305 304 306 27 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x2b27d55bc428 *.LC33>)) ge2fitman_fmtext_o.cpp:810 89 {*movdi_internal}
     (nil))
(insn 306 305 307 27 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:810 93 {*movqi_internal}
     (nil))
(call_insn 307 306 308 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b27d3ecee00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:810 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 308 307 309 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 309 308 310 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:809 220 {*addsi_1}
     (nil))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              26 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 237
(code_label 310 309 311 29 74 "" [1 uses])
(note 311 310 313 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 313 311 314 29 (set (reg:SI 0 ax [237])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])) ge2fitman_fmtext_o.cpp:809 90 {*movsi_internal}
     (nil))
(insn 314 313 315 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [237])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32]))) ge2fitman_fmtext_o.cpp:809 7 {*cmpsi_1}
     (nil))
(jump_insn 315 314 316 29 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 312)
            (pc))) ge2fitman_fmtext_o.cpp:809 596 {*jcc_1}
     (nil)
 -> 312)
;;  succ:       27
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 316 315 336 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 336 316 0 NOTE_INSN_DELETED)

;; Function void fix_phase(float, int, Precision1*, int, int) (_Z9fix_phasefiP10Precision1ii, funcdef_no=1023, decl_uid=23985, symbol_order=230)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1225,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=615,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=3,overall=1223,losers=2 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=4,overall=614,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=20,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 2:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 23
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 29:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=176, assigning class NO_REGS to secondary r176
   32: r176:DF=r156:DF
      REG_DEAD r156:DF
    Inserting the sec. move after:
  142: xmm1:DF=r176:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 142:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1223,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=616,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=5,overall=1221,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=12,overall=1,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 35:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 49:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=177, assigning class NO_REGS to secondary r177
   50: r177:DF=r160:DF
      REG_DEAD r160:DF
    Inserting the sec. move after:
  143: xmm1:DF=r177:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 143:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=178 from oldreg=92, assigning class SSE_REGS to r178
      Making reload reg 178 for reg 92 optional
   54: r104:DF=r103:DF+r178:DF
      REG_DEAD r103:DF
      REG_DEAD r92:DF
    Inserting insn reload before:
  144: r178:DF=r92:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=11,overall=2,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 144:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 58:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=179, assigning class SSE_REGS to r179
   58: r179:SF=float_trunc(r105:DF)
      REG_DEAD r105:DF
    Inserting insn reload after:
  145: [frame:DI-0x18]=r179:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 145:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 69:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 75
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 82:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 88:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=180, assigning class SSE_REGS to r180
   88: r180:SF=float_trunc(r125:DF)
      REG_DEAD r125:DF
    Inserting insn reload after:
  146: [frame:DI-0x14]=r180:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 146:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 90:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=181 from oldreg=167, assigning class SSE_REGS to r181
   90: r181:SF=r181:SF-[frame:DI-0x24]
      REG_DEAD r168:SF
    Inserting insn reload before:
  147: r181:SF=r168:SF
    Inserting insn reload after:
  148: r167:SF=r181:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 148:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 96
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 102:  (0) =x  (1) xm {*extendsfdf2_sse}
      Creating newreg=182 from oldreg=133, assigning class SSE_REGS to r182
  102: r182:DF=float_extend([frame:DI-0x18])
    Inserting insn reload after:
  149: r133:DF=r182:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=5,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=2,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 149:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rzw {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=183 from oldreg=133, assigning class SSE_REGS to r183
      Making reload reg 183 for reg 133 optional
  107: r136:DF=r135:DF*r183:DF
      REG_DEAD r135:DF
      REG_DEAD r133:DF
    Inserting insn reload before:
  150: r183:DF=r133:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=11,overall=2,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 150:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 108:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=184 from oldreg=137, assigning class SSE_REGS to r184
  108: r184:SF=float_trunc(r136:DF)
      REG_DEAD r136:DF
    Inserting insn reload after:
  151: r137:SF=r184:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 151:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 109:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 114
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 121:  (0) =x  (1) xm {*extendsfdf2_sse}
      Creating newreg=185 from oldreg=146, assigning class SSE_REGS to r185
  121: r185:DF=float_extend([frame:DI-0x18])
    Inserting insn reload after:
  152: r146:DF=r185:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=5,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=2,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 152:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (1) rzw {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=186 from oldreg=146, assigning class SSE_REGS to r186
      Making reload reg 186 for reg 146 optional
  126: r149:DF=r148:DF*r186:DF
      REG_DEAD r148:DF
      REG_DEAD r146:DF
    Inserting insn reload before:
  153: r186:DF=r146:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=11,overall=2,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 153:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 127:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=187 from oldreg=150, assigning class SSE_REGS to r187
  127: r187:SF=float_trunc(r149:DF)
      REG_DEAD r149:DF
    Inserting insn reload after:
  154: r150:SF=r187:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 154:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 128:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 129:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) r  (1) rm {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=188 from oldreg=146, assigning class SSE_REGS to inheritance r188
    Original reg change 146->188 (bb3):
  152: r188:DF=r185:DF
    Add original<-inheritance after:
  155: r146:DF=r188:DF

    Inheritance reuse change 146->188 (bb3):
  153: r186:DF=r188:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=189 from oldreg=133, assigning class SSE_REGS to inheritance r189
    Original reg change 133->189 (bb3):
  149: r189:DF=r182:DF
    Add original<-inheritance after:
  156: r133:DF=r189:DF

    Inheritance reuse change 133->189 (bb3):
  150: r183:DF=r189:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=190 from oldreg=92, assigning class SSE_REGS to inheritance r190
    Original reg change 92->190 (bb3):
   35: r190:DF=xmm0:DF
      REG_DEAD xmm0:DF
    Add original<-inheritance after:
  157: r92:DF=r190:DF

    Inheritance reuse change 92->190 (bb3):
  144: r178:DF=r190:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   155: r146:DF=r188:DF
deleting insn with uid = 155.
	    Removing dead insn:
   156: r133:DF=r189:DF
deleting insn with uid = 156.
	    Removing dead insn:
   157: r92:DF=r190:DF
deleting insn with uid = 157.
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 4
   Insn 135: point = 0
   Insn 134: point = 0
   Insn 133: point = 1
  BB 2
   Insn 139: point = 2
   Insn 15: point = 2
   Insn 14: point = 2
   Insn 13: point = 3
   Insn 12: point = 4
   Insn 11: point = 5
   Insn 10: point = 6
   Insn 6: point = 6
   Insn 5: point = 6
   Insn 4: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 3
   Insn 129: point = 6
   Insn 128: point = 6
   Insn 154: point = 7
	Hard reg 0 is preferable by r187 with profit 1
   Insn 127: point = 9
   Insn 126: point = 11
   Insn 153: point = 13
	   Creating copy r186<-r188@1
   Insn 125: point = 15
   Insn 124: point = 16
   Insn 123: point = 16
   Insn 122: point = 17
   Insn 152: point = 18
	   Creating copy r185->r188@1
   Insn 121: point = 20
   Insn 120: point = 21
   Insn 119: point = 23
   Insn 118: point = 25
   Insn 117: point = 27
   Insn 116: point = 29
   Insn 115: point = 30
   Insn 114: point = 32
   Insn 113: point = 34
   Insn 112: point = 35
   Insn 111: point = 37
   Insn 110: point = 39
   Insn 109: point = 40
   Insn 151: point = 41
	Hard reg 0 is preferable by r184 with profit 1
   Insn 108: point = 43
   Insn 107: point = 45
   Insn 150: point = 47
	   Creating copy r183<-r189@1
   Insn 106: point = 49
   Insn 105: point = 50
   Insn 104: point = 50
   Insn 103: point = 51
   Insn 149: point = 52
	   Creating copy r182->r189@1
   Insn 102: point = 54
   Insn 101: point = 55
   Insn 100: point = 57
   Insn 99: point = 59
   Insn 98: point = 61
   Insn 97: point = 62
   Insn 96: point = 64
   Insn 95: point = 66
   Insn 94: point = 67
   Insn 93: point = 69
   Insn 92: point = 71
   Insn 91: point = 72
   Insn 148: point = 73
	Hard reg 0 is preferable by r181 with profit 1
   Insn 90: point = 75
   Insn 147: point = 75
	Hard reg 0 is preferable by r181 with profit 1
	Hard reg 21 is preferable by r181 with profit 1
   Insn 89: point = 77
   Insn 146: point = 78
   Insn 88: point = 79
   Insn 87: point = 81
   Insn 86: point = 82
   Insn 85: point = 82
   Insn 84: point = 83
   Insn 83: point = 84
   Insn 82: point = 86
   Insn 81: point = 88
   Insn 80: point = 90
   Insn 79: point = 92
   Insn 78: point = 94
   Insn 77: point = 96
   Insn 76: point = 97
   Insn 75: point = 99
   Insn 74: point = 101
   Insn 73: point = 102
   Insn 72: point = 104
   Insn 71: point = 106
   Insn 70: point = 107
   Insn 69: point = 109
   Insn 68: point = 111
   Insn 67: point = 113
   Insn 66: point = 115
   Insn 65: point = 117
   Insn 64: point = 118
   Insn 63: point = 120
   Insn 62: point = 122
   Insn 61: point = 123
   Insn 60: point = 125
   Insn 59: point = 127
   Insn 145: point = 128
   Insn 58: point = 129
   Insn 57: point = 131
   Insn 56: point = 132
   Insn 55: point = 132
   Insn 54: point = 133
   Insn 144: point = 135
	   Creating copy r178<-r190@1
   Insn 53: point = 137
   Insn 52: point = 138
   Insn 51: point = 138
   Insn 143: point = 139
	Hard reg 22 is preferable by r177 with profit 1
   Insn 50: point = 140
	Hard reg 22 is preferable by r177 with profit 1
	Hard reg 0 is preferable by r177 with profit 1
   Insn 49: point = 142
   Insn 48: point = 143
   Insn 47: point = 145
   Insn 46: point = 147
   Insn 45: point = 149
   Insn 44: point = 151
   Insn 43: point = 153
   Insn 42: point = 155
   Insn 41: point = 156
   Insn 40: point = 158
   Insn 39: point = 160
   Insn 38: point = 161
   Insn 37: point = 163
   Insn 36: point = 165
   Insn 35: point = 166
	Hard reg 21 is preferable by r190 with profit 1
   Insn 34: point = 167
   Insn 33: point = 167
   Insn 142: point = 168
	Hard reg 22 is preferable by r176 with profit 1
   Insn 32: point = 169
	Hard reg 22 is preferable by r176 with profit 1
	Hard reg 0 is preferable by r176 with profit 1
   Insn 31: point = 171
   Insn 30: point = 172
   Insn 29: point = 174
   Insn 28: point = 176
   Insn 27: point = 178
   Insn 26: point = 180
   Insn 25: point = 182
   Insn 24: point = 183
   Insn 23: point = 185
   Insn 22: point = 187
   Insn 21: point = 188
   Insn 20: point = 190
   Insn 19: point = 192
 r83: [189..190]
 r84: [186..188]
 r85: [184..185]
 r86: [177..183]
 r87: [179..180]
 r88: [177..178]
 r89: [175..176]
 r90: [173..174]
 r91: [167..172]
 r93: [162..163]
 r94: [159..161]
 r95: [157..158]
 r96: [148..156]
 r97: [152..153]
 r98: [150..151]
 r99: [148..149]
 r100: [146..147]
 r101: [144..145]
 r102: [138..143]
 r103: [134..137]
 r104: [132..133]
 r105: [130..131]
 r106: [124..125]
 r107: [121..123]
 r108: [119..120]
 r109: [112..118]
 r110: [114..115]
 r111: [112..113]
 r112: [110..111]
 r113: [108..109]
 r114: [83..107]
 r115: [103..104]
 r116: [100..102]
 r117: [98..99]
 r118: [89..97]
 r119: [93..94]
 r120: [91..92]
 r121: [89..90]
 r122: [87..88]
 r123: [85..86]
 r124: [82..84]
 r125: [80..81]
 r126: [68..69]
 r127: [65..67]
 r128: [63..64]
 r129: [56..62]
 r130: [58..59]
 r131: [56..57]
 r132: [40..55]
 r134: [50..51]
 r135: [46..49]
 r136: [44..45]
 r137: [40..41]
 r138: [36..37]
 r139: [33..35]
 r140: [31..32]
 r141: [22..30]
 r142: [26..27]
 r143: [24..25]
 r144: [22..23]
 r145: [6..21]
 r147: [16..17]
 r148: [12..15]
 r149: [10..11]
 r150: [6..7]
 r151: [4..5]
 r152: [2..3]
 r153: [191..192]
 r154: [186..187]
 r155: [181..182]
 r156: [170..171]
 r157: [164..165]
 r158: [159..160]
 r159: [154..155]
 r160: [141..142]
 r161: [126..127]
 r162: [121..122]
 r163: [116..117]
 r164: [105..106]
 r165: [100..101]
 r166: [95..96]
 r167: [72..73]
 r168: [76..77]
 r169: [70..71]
 r170: [65..66]
 r171: [60..61]
 r172: [38..39]
 r173: [33..34]
 r174: [28..29]
 r175: [0..1]
 r176: [168..169]
 r177: [139..140]
 r178: [134..135]
 r179: [128..129]
 r180: [78..79]
 r181: [74..75]
 r182: [53..54]
 r183: [46..47]
 r184: [42..43]
 r185: [19..20]
 r186: [12..13]
 r187: [8..9]
 r188: [14..18]
 r189: [48..52]
 r190: [136..166]
Compressing live ranges: from 193 to 170 - 88%
Ranges after the compression:
 r83: [166..167]
 r84: [164..165]
 r85: [162..163]
 r86: [156..161]
 r87: [158..159]
 r88: [156..157]
 r89: [154..155]
 r90: [152..153]
 r91: [148..151]
 r93: [144..145]
 r94: [142..143]
 r95: [140..141]
 r96: [132..139]
 r97: [136..137]
 r98: [134..135]
 r99: [132..133]
 r100: [130..131]
 r101: [128..129]
 r102: [124..127]
 r103: [120..123]
 r104: [118..119]
 r105: [116..117]
 r106: [110..111]
 r107: [108..109]
 r108: [106..107]
 r109: [100..105]
 r110: [102..103]
 r111: [100..101]
 r112: [98..99]
 r113: [96..97]
 r114: [74..95]
 r115: [92..93]
 r116: [90..91]
 r117: [88..89]
 r118: [80..87]
 r119: [84..85]
 r120: [82..83]
 r121: [80..81]
 r122: [78..79]
 r123: [76..77]
 r124: [74..75]
 r125: [72..73]
 r126: [60..61]
 r127: [58..59]
 r128: [56..57]
 r129: [50..55]
 r130: [52..53]
 r131: [50..51]
 r132: [36..49]
 r134: [46..47]
 r135: [42..45]
 r136: [40..41]
 r137: [36..37]
 r138: [32..33]
 r139: [30..31]
 r140: [28..29]
 r141: [20..27]
 r142: [24..25]
 r143: [22..23]
 r144: [20..21]
 r145: [6..19]
 r147: [16..17]
 r148: [12..15]
 r149: [10..11]
 r150: [6..7]
 r151: [4..5]
 r152: [2..3]
 r153: [168..169]
 r154: [164..165]
 r155: [160..161]
 r156: [150..151]
 r157: [146..147]
 r158: [142..143]
 r159: [138..139]
 r160: [126..127]
 r161: [112..113]
 r162: [108..109]
 r163: [104..105]
 r164: [94..95]
 r165: [90..91]
 r166: [86..87]
 r167: [64..65]
 r168: [68..69]
 r169: [62..63]
 r170: [58..59]
 r171: [54..55]
 r172: [34..35]
 r173: [30..31]
 r174: [26..27]
 r175: [0..1]
 r176: [148..149]
 r177: [124..125]
 r178: [120..121]
 r179: [114..115]
 r180: [70..71]
 r181: [66..67]
 r182: [48..49]
 r183: [42..43]
 r184: [38..39]
 r185: [18..19]
 r186: [12..13]
 r187: [8..9]
 r188: [14..17]
 r189: [44..47]
 r190: [122..147]

********** Assignment #1: **********

	 Assigning to 181 (cl=SSE_REGS, orig=167, freq=3, tfirst=181, tfreq=3)...
	   Assign 21 to reload r181 (freq=3)
	 Assigning to 178 (cl=SSE_REGS, orig=92, freq=2, tfirst=178, tfreq=2)...
	   Assign 23 to optional reload r178 (freq=2)
	Hard reg 21 is preferable by r190 with profit 1
	Hard reg 23 is preferable by r190 with profit 1
	 Assigning to 190 (cl=SSE_REGS, orig=92, freq=2, tfirst=178, tfreq=2)...
	 Assigning to 179 (cl=SSE_REGS, orig=179, freq=2, tfirst=179, tfreq=2)...
	   Assign 24 to reload r179 (freq=2)
	 Assigning to 180 (cl=SSE_REGS, orig=180, freq=2, tfirst=180, tfreq=2)...
	   Assign 25 to reload r180 (freq=2)
	 Assigning to 182 (cl=SSE_REGS, orig=133, freq=2, tfirst=182, tfreq=2)...
	   Assign 26 to reload r182 (freq=2)
	Hard reg 26 is preferable by r189 with profit 1
	Hard reg 26 is preferable by r183 with profit 1
	 Assigning to 183 (cl=SSE_REGS, orig=133, freq=2, tfirst=182, tfreq=2)...
	   Assign 26 to optional reload r183 (freq=2)
	Hard reg 26 is preferable by r189 with profit 2
	 Assigning to 189 (cl=SSE_REGS, orig=133, freq=2, tfirst=182, tfreq=2)...
	 Assigning to 184 (cl=SSE_REGS, orig=137, freq=2, tfirst=184, tfreq=2)...
	   Assign 27 to reload r184 (freq=2)
	 Assigning to 185 (cl=SSE_REGS, orig=146, freq=2, tfirst=185, tfreq=2)...
	   Assign 28 to reload r185 (freq=2)
	Hard reg 28 is preferable by r188 with profit 1
	Hard reg 28 is preferable by r186 with profit 1
	 Assigning to 186 (cl=SSE_REGS, orig=146, freq=2, tfirst=185, tfreq=2)...
	   Assign 28 to optional reload r186 (freq=2)
	Hard reg 28 is preferable by r188 with profit 2
	 Assigning to 188 (cl=SSE_REGS, orig=146, freq=2, tfirst=185, tfreq=2)...
	 Assigning to 187 (cl=SSE_REGS, orig=150, freq=2, tfirst=187, tfreq=2)...
	   Assign 23 to reload r187 (freq=2)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 3 (0.00%)
   Insn after restoring regs:
  153: r186:DF=r146:DF
      REG_DEAD r146:DF
   Insn after restoring regs:
  152: r146:DF=r185:DF
      REG_DEAD r185:DF
   Insn after restoring regs:
  150: r183:DF=r133:DF
      REG_DEAD r133:DF
   Insn after restoring regs:
  149: r133:DF=r182:DF
      REG_DEAD r182:DF
   Insn after restoring regs:
  144: r178:DF=r92:DF
      REG_DEAD r92:DF
   Insn after restoring regs:
   35: r92:DF=xmm0:DF
      REG_DEAD xmm0:DF
Remove optional reload reg 178
  Restoring original insn:
   54: r104:DF=r103:DF+r92:DF
      REG_DEAD r92:DF
      REG_DEAD r103:DF
  Deleting move 144
  144: r178:DF=r92:DF
      REG_DEAD r92:DF
deleting insn with uid = 144.
Remove optional reload reg 183
  Restoring original insn:
  107: r136:DF=r135:DF*r133:DF
      REG_DEAD r133:DF
      REG_DEAD r135:DF
  Deleting move 150
  150: r183:DF=r133:DF
      REG_DEAD r133:DF
deleting insn with uid = 150.
Remove optional reload reg 186
  Restoring original insn:
  126: r149:DF=r148:DF*r146:DF
      REG_DEAD r146:DF
      REG_DEAD r148:DF
  Deleting move 153
  153: r186:DF=r146:DF
      REG_DEAD r146:DF
deleting insn with uid = 153.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=191 from oldreg=146, assigning class SSE_REGS to r191
      Making reload reg 191 for reg 146 optional
  126: r149:DF=r148:DF*r191:DF
      REG_DEAD r146:DF
      REG_DEAD r148:DF
    Inserting insn reload before:
  158: r191:DF=r146:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=11,overall=2,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 158:  (0) v  (1) m {*movdf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=192 from oldreg=133, assigning class SSE_REGS to r192
      Making reload reg 192 for reg 133 optional
  107: r136:DF=r135:DF*r192:DF
      REG_DEAD r133:DF
      REG_DEAD r135:DF
    Inserting insn reload before:
  159: r192:DF=r133:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=11,overall=2,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 159:  (0) v  (1) m {*movdf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 54:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=193 from oldreg=92, assigning class SSE_REGS to r193
      Making reload reg 193 for reg 92 optional
   54: r104:DF=r103:DF+r193:DF
      REG_DEAD r92:DF
      REG_DEAD r103:DF
    Inserting insn reload before:
  160: r193:DF=r92:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=11,overall=2,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 160:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=194 from oldreg=146, assigning class SSE_REGS to inheritance r194
    Original reg change 146->194 (bb3):
  152: r194:DF=r185:DF
      REG_DEAD r185:DF
    Add original<-inheritance after:
  161: r146:DF=r194:DF

    Inheritance reuse change 146->194 (bb3):
  158: r191:DF=r194:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=195 from oldreg=133, assigning class SSE_REGS to inheritance r195
    Original reg change 133->195 (bb3):
  149: r195:DF=r182:DF
      REG_DEAD r182:DF
    Add original<-inheritance after:
  162: r133:DF=r195:DF

    Inheritance reuse change 133->195 (bb3):
  159: r192:DF=r195:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=196 from oldreg=92, assigning class SSE_REGS to inheritance r196
    Original reg change 92->196 (bb3):
   35: r196:DF=xmm0:DF
      REG_DEAD xmm0:DF
    Add original<-inheritance after:
  163: r92:DF=r196:DF

    Inheritance reuse change 92->196 (bb3):
  160: r193:DF=r196:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   161: r146:DF=r194:DF
deleting insn with uid = 161.
	    Removing dead insn:
   162: r133:DF=r195:DF
deleting insn with uid = 162.
	    Removing dead insn:
   163: r92:DF=r196:DF
deleting insn with uid = 163.
EBB 4
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
  BB 4
   Insn 135: point = 0
   Insn 134: point = 0
   Insn 133: point = 1
  BB 2
   Insn 139: point = 2
   Insn 15: point = 2
   Insn 14: point = 2
   Insn 13: point = 3
   Insn 12: point = 4
   Insn 11: point = 5
   Insn 10: point = 6
   Insn 6: point = 6
   Insn 5: point = 6
   Insn 4: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 3
   Insn 129: point = 6
   Insn 128: point = 6
   Insn 154: point = 7
	Hard reg 0 is preferable by r187 with profit 1
   Insn 127: point = 9
   Insn 126: point = 11
   Insn 158: point = 13
	   Creating copy r191<-r194@1
   Insn 125: point = 15
   Insn 124: point = 16
   Insn 123: point = 16
   Insn 122: point = 17
   Insn 152: point = 18
	   Creating copy r185->r194@1
   Insn 121: point = 20
   Insn 120: point = 21
   Insn 119: point = 23
   Insn 118: point = 25
   Insn 117: point = 27
   Insn 116: point = 29
   Insn 115: point = 30
   Insn 114: point = 32
   Insn 113: point = 34
   Insn 112: point = 35
   Insn 111: point = 37
   Insn 110: point = 39
   Insn 109: point = 40
   Insn 151: point = 41
	Hard reg 0 is preferable by r184 with profit 1
   Insn 108: point = 43
   Insn 107: point = 45
   Insn 159: point = 47
	   Creating copy r192<-r195@1
   Insn 106: point = 49
   Insn 105: point = 50
   Insn 104: point = 50
   Insn 103: point = 51
   Insn 149: point = 52
	   Creating copy r182->r195@1
   Insn 102: point = 54
   Insn 101: point = 55
   Insn 100: point = 57
   Insn 99: point = 59
   Insn 98: point = 61
   Insn 97: point = 62
   Insn 96: point = 64
   Insn 95: point = 66
   Insn 94: point = 67
   Insn 93: point = 69
   Insn 92: point = 71
   Insn 91: point = 72
   Insn 148: point = 73
	Hard reg 0 is preferable by r181 with profit 1
   Insn 90: point = 75
   Insn 147: point = 75
	Hard reg 0 is preferable by r181 with profit 1
	Hard reg 21 is preferable by r181 with profit 1
   Insn 89: point = 77
   Insn 146: point = 78
   Insn 88: point = 79
   Insn 87: point = 81
   Insn 86: point = 82
   Insn 85: point = 82
   Insn 84: point = 83
   Insn 83: point = 84
   Insn 82: point = 86
   Insn 81: point = 88
   Insn 80: point = 90
   Insn 79: point = 92
   Insn 78: point = 94
   Insn 77: point = 96
   Insn 76: point = 97
   Insn 75: point = 99
   Insn 74: point = 101
   Insn 73: point = 102
   Insn 72: point = 104
   Insn 71: point = 106
   Insn 70: point = 107
   Insn 69: point = 109
   Insn 68: point = 111
   Insn 67: point = 113
   Insn 66: point = 115
   Insn 65: point = 117
   Insn 64: point = 118
   Insn 63: point = 120
   Insn 62: point = 122
   Insn 61: point = 123
   Insn 60: point = 125
   Insn 59: point = 127
   Insn 145: point = 128
   Insn 58: point = 129
   Insn 57: point = 131
   Insn 56: point = 132
   Insn 55: point = 132
   Insn 54: point = 133
   Insn 160: point = 135
	   Creating copy r193<-r196@1
   Insn 53: point = 137
   Insn 52: point = 138
   Insn 51: point = 138
   Insn 143: point = 139
	Hard reg 22 is preferable by r177 with profit 1
   Insn 50: point = 140
	Hard reg 22 is preferable by r177 with profit 1
	Hard reg 0 is preferable by r177 with profit 1
   Insn 49: point = 142
   Insn 48: point = 143
   Insn 47: point = 145
   Insn 46: point = 147
   Insn 45: point = 149
   Insn 44: point = 151
   Insn 43: point = 153
   Insn 42: point = 155
   Insn 41: point = 156
   Insn 40: point = 158
   Insn 39: point = 160
   Insn 38: point = 161
   Insn 37: point = 163
   Insn 36: point = 165
   Insn 35: point = 166
	Hard reg 21 is preferable by r196 with profit 1
   Insn 34: point = 167
   Insn 33: point = 167
   Insn 142: point = 168
	Hard reg 22 is preferable by r176 with profit 1
   Insn 32: point = 169
	Hard reg 22 is preferable by r176 with profit 1
	Hard reg 0 is preferable by r176 with profit 1
   Insn 31: point = 171
   Insn 30: point = 172
   Insn 29: point = 174
   Insn 28: point = 176
   Insn 27: point = 178
   Insn 26: point = 180
   Insn 25: point = 182
   Insn 24: point = 183
   Insn 23: point = 185
   Insn 22: point = 187
   Insn 21: point = 188
   Insn 20: point = 190
   Insn 19: point = 192
 r83: [189..190]
 r84: [186..188]
 r85: [184..185]
 r86: [177..183]
 r87: [179..180]
 r88: [177..178]
 r89: [175..176]
 r90: [173..174]
 r91: [167..172]
 r93: [162..163]
 r94: [159..161]
 r95: [157..158]
 r96: [148..156]
 r97: [152..153]
 r98: [150..151]
 r99: [148..149]
 r100: [146..147]
 r101: [144..145]
 r102: [138..143]
 r103: [134..137]
 r104: [132..133]
 r105: [130..131]
 r106: [124..125]
 r107: [121..123]
 r108: [119..120]
 r109: [112..118]
 r110: [114..115]
 r111: [112..113]
 r112: [110..111]
 r113: [108..109]
 r114: [83..107]
 r115: [103..104]
 r116: [100..102]
 r117: [98..99]
 r118: [89..97]
 r119: [93..94]
 r120: [91..92]
 r121: [89..90]
 r122: [87..88]
 r123: [85..86]
 r124: [82..84]
 r125: [80..81]
 r126: [68..69]
 r127: [65..67]
 r128: [63..64]
 r129: [56..62]
 r130: [58..59]
 r131: [56..57]
 r132: [40..55]
 r134: [50..51]
 r135: [46..49]
 r136: [44..45]
 r137: [40..41]
 r138: [36..37]
 r139: [33..35]
 r140: [31..32]
 r141: [22..30]
 r142: [26..27]
 r143: [24..25]
 r144: [22..23]
 r145: [6..21]
 r147: [16..17]
 r148: [12..15]
 r149: [10..11]
 r150: [6..7]
 r151: [4..5]
 r152: [2..3]
 r153: [191..192]
 r154: [186..187]
 r155: [181..182]
 r156: [170..171]
 r157: [164..165]
 r158: [159..160]
 r159: [154..155]
 r160: [141..142]
 r161: [126..127]
 r162: [121..122]
 r163: [116..117]
 r164: [105..106]
 r165: [100..101]
 r166: [95..96]
 r167: [72..73]
 r168: [76..77]
 r169: [70..71]
 r170: [65..66]
 r171: [60..61]
 r172: [38..39]
 r173: [33..34]
 r174: [28..29]
 r175: [0..1]
 r176: [168..169]
 r177: [139..140]
 r179: [128..129]
 r180: [78..79]
 r181: [74..75]
 r182: [53..54]
 r184: [42..43]
 r185: [19..20]
 r187: [8..9]
 r191: [12..13]
 r192: [46..47]
 r193: [134..135]
 r194: [14..18]
 r195: [48..52]
 r196: [136..166]
Compressing live ranges: from 193 to 170 - 88%
Ranges after the compression:
 r83: [166..167]
 r84: [164..165]
 r85: [162..163]
 r86: [156..161]
 r87: [158..159]
 r88: [156..157]
 r89: [154..155]
 r90: [152..153]
 r91: [148..151]
 r93: [144..145]
 r94: [142..143]
 r95: [140..141]
 r96: [132..139]
 r97: [136..137]
 r98: [134..135]
 r99: [132..133]
 r100: [130..131]
 r101: [128..129]
 r102: [124..127]
 r103: [120..123]
 r104: [118..119]
 r105: [116..117]
 r106: [110..111]
 r107: [108..109]
 r108: [106..107]
 r109: [100..105]
 r110: [102..103]
 r111: [100..101]
 r112: [98..99]
 r113: [96..97]
 r114: [74..95]
 r115: [92..93]
 r116: [90..91]
 r117: [88..89]
 r118: [80..87]
 r119: [84..85]
 r120: [82..83]
 r121: [80..81]
 r122: [78..79]
 r123: [76..77]
 r124: [74..75]
 r125: [72..73]
 r126: [60..61]
 r127: [58..59]
 r128: [56..57]
 r129: [50..55]
 r130: [52..53]
 r131: [50..51]
 r132: [36..49]
 r134: [46..47]
 r135: [42..45]
 r136: [40..41]
 r137: [36..37]
 r138: [32..33]
 r139: [30..31]
 r140: [28..29]
 r141: [20..27]
 r142: [24..25]
 r143: [22..23]
 r144: [20..21]
 r145: [6..19]
 r147: [16..17]
 r148: [12..15]
 r149: [10..11]
 r150: [6..7]
 r151: [4..5]
 r152: [2..3]
 r153: [168..169]
 r154: [164..165]
 r155: [160..161]
 r156: [150..151]
 r157: [146..147]
 r158: [142..143]
 r159: [138..139]
 r160: [126..127]
 r161: [112..113]
 r162: [108..109]
 r163: [104..105]
 r164: [94..95]
 r165: [90..91]
 r166: [86..87]
 r167: [64..65]
 r168: [68..69]
 r169: [62..63]
 r170: [58..59]
 r171: [54..55]
 r172: [34..35]
 r173: [30..31]
 r174: [26..27]
 r175: [0..1]
 r176: [148..149]
 r177: [124..125]
 r179: [114..115]
 r180: [70..71]
 r181: [66..67]
 r182: [48..49]
 r184: [38..39]
 r185: [18..19]
 r187: [8..9]
 r191: [12..13]
 r192: [42..43]
 r193: [120..121]
 r194: [14..17]
 r195: [44..47]
 r196: [122..147]

********** Assignment #2: **********

	 Assigning to 191 (cl=SSE_REGS, orig=146, freq=2, tfirst=191, tfreq=2)...
	   Assign 23 to optional reload r191 (freq=2)
	Hard reg 23 is preferable by r194 with profit 1
	 Assigning to 194 (cl=SSE_REGS, orig=146, freq=2, tfirst=191, tfreq=2)...
	 Assigning to 192 (cl=SSE_REGS, orig=133, freq=2, tfirst=192, tfreq=2)...
	   Assign 24 to optional reload r192 (freq=2)
	Hard reg 24 is preferable by r195 with profit 1
	 Assigning to 195 (cl=SSE_REGS, orig=133, freq=2, tfirst=192, tfreq=2)...
	 Assigning to 193 (cl=SSE_REGS, orig=92, freq=2, tfirst=193, tfreq=2)...
	   Assign 25 to optional reload r193 (freq=2)
	Hard reg 21 is preferable by r196 with profit 1
	Hard reg 25 is preferable by r196 with profit 1
	 Assigning to 196 (cl=SSE_REGS, orig=92, freq=2, tfirst=193, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 3 (0.00%)
   Insn after restoring regs:
  158: r191:DF=r146:DF
      REG_DEAD r146:DF
   Insn after restoring regs:
  152: r146:DF=r185:DF
      REG_DEAD r185:DF
   Insn after restoring regs:
  159: r192:DF=r133:DF
      REG_DEAD r133:DF
   Insn after restoring regs:
  149: r133:DF=r182:DF
      REG_DEAD r182:DF
   Insn after restoring regs:
  160: r193:DF=r92:DF
      REG_DEAD r92:DF
   Insn after restoring regs:
   35: r92:DF=xmm0:DF
      REG_DEAD xmm0:DF
Keep optional reload reg 178
Keep optional reload reg 183
Keep optional reload reg 186
Remove optional reload reg 191
  Restoring original insn:
  126: r149:DF=r148:DF*r146:DF
      REG_DEAD r146:DF
      REG_DEAD r148:DF
  Deleting move 158
  158: r191:DF=r146:DF
      REG_DEAD r146:DF
deleting insn with uid = 158.
Remove optional reload reg 192
  Restoring original insn:
  107: r136:DF=r135:DF*r133:DF
      REG_DEAD r133:DF
      REG_DEAD r135:DF
  Deleting move 159
  159: r192:DF=r133:DF
      REG_DEAD r133:DF
deleting insn with uid = 159.
Remove optional reload reg 193
  Restoring original insn:
   54: r104:DF=r103:DF+r92:DF
      REG_DEAD r92:DF
      REG_DEAD r103:DF
  Deleting move 160
  160: r193:DF=r92:DF
      REG_DEAD r92:DF
deleting insn with uid = 160.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 54:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
  BB 4
   Insn 135: point = 0
   Insn 134: point = 0
   Insn 133: point = 1
  BB 2
   Insn 139: point = 2
   Insn 15: point = 2
   Insn 14: point = 2
   Insn 13: point = 3
   Insn 12: point = 4
   Insn 11: point = 5
   Insn 10: point = 6
   Insn 6: point = 6
   Insn 5: point = 6
   Insn 4: point = 6
   Insn 3: point = 6
   Insn 2: point = 6
  BB 3
   Insn 129: point = 6
   Insn 128: point = 6
   Insn 154: point = 7
   Insn 127: point = 9
   Insn 126: point = 11
   Insn 125: point = 13
   Insn 124: point = 14
   Insn 123: point = 14
   Insn 122: point = 15
   Insn 152: point = 16
   Insn 121: point = 18
   Insn 120: point = 19
   Insn 119: point = 21
   Insn 118: point = 23
   Insn 117: point = 25
   Insn 116: point = 27
   Insn 115: point = 28
   Insn 114: point = 30
   Insn 113: point = 32
   Insn 112: point = 33
   Insn 111: point = 35
   Insn 110: point = 37
   Insn 109: point = 38
   Insn 151: point = 39
   Insn 108: point = 41
   Insn 107: point = 43
   Insn 106: point = 45
   Insn 105: point = 46
   Insn 104: point = 46
   Insn 103: point = 47
   Insn 149: point = 48
   Insn 102: point = 50
   Insn 101: point = 51
   Insn 100: point = 53
   Insn 99: point = 55
   Insn 98: point = 57
   Insn 97: point = 58
   Insn 96: point = 60
   Insn 95: point = 62
   Insn 94: point = 63
   Insn 93: point = 65
   Insn 92: point = 67
   Insn 91: point = 68
   Insn 148: point = 69
   Insn 90: point = 71
   Insn 147: point = 71
   Insn 89: point = 73
   Insn 146: point = 74
   Insn 88: point = 75
   Insn 87: point = 77
   Insn 86: point = 78
   Insn 85: point = 78
   Insn 84: point = 79
   Insn 83: point = 80
   Insn 82: point = 82
   Insn 81: point = 84
   Insn 80: point = 86
   Insn 79: point = 88
   Insn 78: point = 90
   Insn 77: point = 92
   Insn 76: point = 93
   Insn 75: point = 95
   Insn 74: point = 97
   Insn 73: point = 98
   Insn 72: point = 100
   Insn 71: point = 102
   Insn 70: point = 103
   Insn 69: point = 105
   Insn 68: point = 107
   Insn 67: point = 109
   Insn 66: point = 111
   Insn 65: point = 113
   Insn 64: point = 114
   Insn 63: point = 116
   Insn 62: point = 118
   Insn 61: point = 119
   Insn 60: point = 121
   Insn 59: point = 123
   Insn 145: point = 124
   Insn 58: point = 125
   Insn 57: point = 127
   Insn 56: point = 128
   Insn 55: point = 128
   Insn 54: point = 129
   Insn 53: point = 131
   Insn 52: point = 132
   Insn 51: point = 132
   Insn 143: point = 133
   Insn 50: point = 134
   Insn 49: point = 136
   Insn 48: point = 137
   Insn 47: point = 139
   Insn 46: point = 141
   Insn 45: point = 143
   Insn 44: point = 145
   Insn 43: point = 147
   Insn 42: point = 149
   Insn 41: point = 150
   Insn 40: point = 152
   Insn 39: point = 154
   Insn 38: point = 155
   Insn 37: point = 157
   Insn 36: point = 159
   Insn 35: point = 160
   Insn 34: point = 161
   Insn 33: point = 161
   Insn 142: point = 162
   Insn 32: point = 163
   Insn 31: point = 165
   Insn 30: point = 166
   Insn 29: point = 168
   Insn 28: point = 170
   Insn 27: point = 172
   Insn 26: point = 174
   Insn 25: point = 176
   Insn 24: point = 177
   Insn 23: point = 179
   Insn 22: point = 181
   Insn 21: point = 182
   Insn 20: point = 184
   Insn 19: point = 186
 r92: [130..160]
 r133: [44..48]
 r146: [12..16]
 r176: [162..163]
 r177: [133..134]
Compressing live ranges: from 187 to 8 - 4%
Ranges after the compression:
 r92: [4..5]
 r133: [2..3]
 r146: [0..1]
 r176: [6..7]
 r177: [4..5]
  Slot 0 regnos (width = 8):	 92	 176	 146	 133
  Slot 1 regnos (width = 8):	 177
Changing spilled pseudos to memory in insn #32
Changing spilled pseudos to memory in insn #142
Changing spilled pseudos to memory in insn #35
Changing spilled pseudos to memory in insn #50
Changing spilled pseudos to memory in insn #143
Changing spilled pseudos to memory in insn #54
Changing spilled pseudos to memory in insn #149
Changing spilled pseudos to memory in insn #107
Changing spilled pseudos to memory in insn #152
Changing spilled pseudos to memory in insn #126
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #126
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
Reusing alternative 12 for insn #152
          alt=12,overall=0,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 152:  (0) m  (1) v {*movdf_internal}
Reusing alternative 0 for insn #107
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
Reusing alternative 12 for insn #149
          alt=12,overall=0,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 149:  (0) m  (1) v {*movdf_internal}
Reusing alternative 0 for insn #54
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
Reusing alternative 11 for insn #143
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 143:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 50:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 12 for insn #35
          alt=12,overall=0,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 35:  (0) m  (1) v {*movdf_internal}
Reusing alternative 11 for insn #142
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 142:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 32:  (0) ?m  (1) rC {*movdf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 46
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 68
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 84
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 81
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 109
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 120
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 128
changing reg in insn 122
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 49
changing reg in insn 50
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 65
changing reg in insn 66
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 91
changing reg in insn 89
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 116
changing reg in insn 117
changing reg in insn 133
changing reg in insn 134
deleting insn with uid = 33.
deleting insn with uid = 51.
deleting insn with uid = 53.
deleting insn with uid = 55.
deleting insn with uid = 57.
deleting insn with uid = 84.
deleting insn with uid = 85.
deleting insn with uid = 87.
deleting insn with uid = 147.
deleting insn with uid = 104.
deleting insn with uid = 106.
deleting insn with uid = 123.
deleting insn with uid = 125.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 124.


void fix_phase(float, int, Precision1*, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={49d,42u} r1={34d,28u,6e} r2={7d,1u} r3={2d,2u} r4={7d,1u} r5={7d,1u} r6={1d,55u} r7={1d,11u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={35d,1u} r18={6d} r19={6d} r20={1d,1u,6e} r21={21d,21u} r22={10d,3u} r23={8d,1u} r24={8d,1u} r25={8d,1u} r26={8d,1u} r27={8d,1u} r28={8d,1u} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} 
;;    total ref usage 734{549d,173u,12e} in 123{117 regular + 6 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  def 	 151 152
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 phase_applied+0 S4 A32])
        (reg:SF 21 xmm0 [ phase_applied ])) ge2fitman_fmtext_o.cpp:823 129 {*movsf_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 num_points+0 S4 A32])
        (reg:SI 5 di [ num_points ])) ge2fitman_fmtext_o.cpp:823 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])
        (reg:DI 4 si [ in_data ])) ge2fitman_fmtext_o.cpp:823 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])
        (reg:SI 1 dx [ fid ])) ge2fitman_fmtext_o.cpp:823 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countFID+0 S4 A32])
        (reg:SI 2 cx [ countFID ])) ge2fitman_fmtext_o.cpp:823 90 {*movsi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:824 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SF 0 ax [151])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:825 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data_magnitude+0 S4 A32])
        (reg:SF 0 ax [151])) ge2fitman_fmtext_o.cpp:825 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SF 0 ax [152])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:826 129 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32])
        (reg:SF 0 ax [152])) ge2fitman_fmtext_o.cpp:826 129 {*movsf_internal}
     (nil))
(insn 15 14 139 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:830 90 {*movsi_internal}
     (nil))
(jump_insn 139 15 140 2 (set (pc)
        (label_ref 130)) ge2fitman_fmtext_o.cpp:830 636 {jump}
     (nil)
 -> 130)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 140 139 132)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174
(code_label 132 140 18 3 78 "" [1 uses])
(note 18 132 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg:SI 0 ax [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 90 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 0 ax [orig:83 D.25183 ] [83])
        (sign_extend:DI (reg:SI 0 ax [153]))) ge2fitman_fmtext_o.cpp:831 142 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 1 dx [orig:84 D.25183 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 D.25183 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 497 {*ashldi3_1}
     (nil))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:831 89 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.25184 ] [85])
                (plus:DI (reg/f:DI 0 ax [154])
                    (reg:DI 1 dx [orig:84 D.25183 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.25183 ] [84]))
        (nil)))
(insn 24 23 25 3 (set (reg/f:DI 0 ax [orig:86 D.25185 ] [86])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:85 D.25184 ] [85]) [0 _11->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:831 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:SI 1 dx [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 1 dx [orig:87 D.25183 ] [87])
        (sign_extend:DI (reg:SI 1 dx [155]))) ge2fitman_fmtext_o.cpp:831 142 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 3 (parallel [
            (set (reg:DI 1 dx [orig:88 D.25183 ] [88])
                (ashift:DI (reg:DI 1 dx [orig:87 D.25183 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 497 {*ashldi3_1}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.25185 ] [89])
                (plus:DI (reg/f:DI 0 ax [orig:86 D.25185 ] [86])
                    (reg:DI 1 dx [orig:88 D.25183 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 221 {*adddi_1}
     (nil))
(insn 29 28 30 3 (set (reg:SF 21 xmm0 [orig:90 D.25186 ] [90])
        (mem:SF (reg/f:DI 0 ax [orig:89 D.25185 ] [89]) [0 *_15+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 129 {*movsf_internal}
     (nil))
(insn 30 29 31 3 (set (reg:DF 21 xmm0 [orig:91 D.25187 ] [91])
        (float_extend:DF (reg:SF 21 xmm0 [orig:90 D.25186 ] [90]))) ge2fitman_fmtext_o.cpp:831 152 {*extendsfdf2_sse}
     (nil))
(insn 31 30 32 3 (set (reg:DF 0 ax [156])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S8 A64])) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 32 31 142 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64])
        (reg:DF 0 ax [156])) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (nil))
(insn 142 32 34 3 (set (reg:DF 22 xmm1)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64])) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (nil))
(call_insn 34 142 35 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("pow") [flags 0x41]  <function_decl 0x2b27d3e87f00 pow>) [0 __builtin_pow S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:831 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 35 34 163 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64])
        (reg:DF 21 xmm0)) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (nil))
(note 163 35 157 3 NOTE_INSN_DELETED)
(note 157 163 36 3 NOTE_INSN_DELETED)
(insn 36 157 37 3 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 90 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:DI 0 ax [orig:93 D.25183 ] [93])
        (sign_extend:DI (reg:SI 0 ax [157]))) ge2fitman_fmtext_o.cpp:831 142 {*extendsidi2_rex64}
     (nil))
(insn 38 37 39 3 (parallel [
            (set (reg:DI 1 dx [orig:94 D.25183 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.25183 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 497 {*ashldi3_1}
     (nil))
(insn 39 38 40 3 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:831 89 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.25184 ] [95])
                (plus:DI (reg/f:DI 0 ax [158])
                    (reg:DI 1 dx [orig:94 D.25183 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.25183 ] [94]))
        (nil)))
(insn 41 40 42 3 (set (reg/f:DI 0 ax [orig:96 D.25185 ] [96])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:95 D.25184 ] [95]) [0 _21->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:831 89 {*movdi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:SI 1 dx [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 90 {*movsi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:DI 1 dx [orig:97 D.25188 ] [97])
        (sign_extend:DI (reg:SI 1 dx [159]))) ge2fitman_fmtext_o.cpp:831 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 1 dx [orig:98 D.25188 ] [98])
                (plus:DI (reg:DI 1 dx [orig:97 D.25188 ] [97])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 221 {*adddi_1}
     (nil))
(insn 45 44 46 3 (parallel [
            (set (reg:DI 1 dx [orig:99 D.25188 ] [99])
                (ashift:DI (reg:DI 1 dx [orig:98 D.25188 ] [98])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 497 {*ashldi3_1}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.25185 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:96 D.25185 ] [96])
                    (reg:DI 1 dx [orig:99 D.25188 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 221 {*adddi_1}
     (nil))
(insn 47 46 48 3 (set (reg:SF 21 xmm0 [orig:101 D.25186 ] [101])
        (mem:SF (reg/f:DI 0 ax [orig:100 D.25185 ] [100]) [0 *_26+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 129 {*movsf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DF 21 xmm0 [orig:102 D.25187 ] [102])
        (float_extend:DF (reg:SF 21 xmm0 [orig:101 D.25186 ] [101]))) ge2fitman_fmtext_o.cpp:831 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 3 (set (reg:DF 0 ax [160])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S8 A64])) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 50 49 143 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 %sfp+-56 S8 A64])
        (reg:DF 0 ax [160])) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (nil))
(insn 143 50 52 3 (set (reg:DF 22 xmm1)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 %sfp+-56 S8 A64])) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (nil))
(call_insn 52 143 144 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("pow") [flags 0x41]  <function_decl 0x2b27d3e87f00 pow>) [0 __builtin_pow S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:831 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(note 144 52 160 3 NOTE_INSN_DELETED)
(note 160 144 54 3 NOTE_INSN_DELETED)
(insn 54 160 56 3 (set (reg:DF 21 xmm0 [orig:104 D.25187 ] [104])
        (plus:DF (reg:DF 21 xmm0 [orig:103 D.25187 ] [103])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64]))) ge2fitman_fmtext_o.cpp:831 776 {*fop_df_comm_sse}
     (nil))
(call_insn 56 54 58 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b27d3e98900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:831 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 58 56 145 3 (set (reg:SF 24 xmm3 [179])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:105 D.25187 ] [105]))) ge2fitman_fmtext_o.cpp:831 157 {*truncdfsf_fast_sse}
     (nil))
(insn 145 58 59 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data_magnitude+0 S4 A32])
        (reg:SF 24 xmm3 [179])) ge2fitman_fmtext_o.cpp:831 129 {*movsf_internal}
     (nil))
(insn 59 145 60 3 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 90 {*movsi_internal}
     (nil))
(insn 60 59 61 3 (set (reg:DI 0 ax [orig:106 D.25183 ] [106])
        (sign_extend:DI (reg:SI 0 ax [161]))) ge2fitman_fmtext_o.cpp:832 142 {*extendsidi2_rex64}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg:DI 1 dx [orig:107 D.25183 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.25183 ] [106])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 497 {*ashldi3_1}
     (nil))
(insn 62 61 63 3 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:832 89 {*movdi_internal}
     (nil))
(insn 63 62 64 3 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.25184 ] [108])
                (plus:DI (reg/f:DI 0 ax [162])
                    (reg:DI 1 dx [orig:107 D.25183 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.25183 ] [107]))
        (nil)))
(insn 64 63 65 3 (set (reg/f:DI 0 ax [orig:109 D.25185 ] [109])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:108 D.25184 ] [108]) [0 _35->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:832 89 {*movdi_internal}
     (nil))
(insn 65 64 66 3 (set (reg:SI 1 dx [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 90 {*movsi_internal}
     (nil))
(insn 66 65 67 3 (set (reg:DI 1 dx [orig:110 D.25183 ] [110])
        (sign_extend:DI (reg:SI 1 dx [163]))) ge2fitman_fmtext_o.cpp:832 142 {*extendsidi2_rex64}
     (nil))
(insn 67 66 68 3 (parallel [
            (set (reg:DI 1 dx [orig:111 D.25183 ] [111])
                (ashift:DI (reg:DI 1 dx [orig:110 D.25183 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 497 {*ashldi3_1}
     (nil))
(insn 68 67 69 3 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.25185 ] [112])
                (plus:DI (reg/f:DI 0 ax [orig:109 D.25185 ] [109])
                    (reg:DI 1 dx [orig:111 D.25183 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 221 {*adddi_1}
     (nil))
(insn 69 68 70 3 (set (reg:SF 21 xmm0 [orig:113 D.25186 ] [113])
        (mem:SF (reg/f:DI 0 ax [orig:112 D.25185 ] [112]) [0 *_39+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 129 {*movsf_internal}
     (nil))
(insn 70 69 71 3 (set (reg:DF 22 xmm1 [orig:114 D.25187 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.25186 ] [113]))) ge2fitman_fmtext_o.cpp:832 152 {*extendsfdf2_sse}
     (nil))
(insn 71 70 72 3 (set (reg:SI 0 ax [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 90 {*movsi_internal}
     (nil))
(insn 72 71 73 3 (set (reg:DI 0 ax [orig:115 D.25183 ] [115])
        (sign_extend:DI (reg:SI 0 ax [164]))) ge2fitman_fmtext_o.cpp:832 142 {*extendsidi2_rex64}
     (nil))
(insn 73 72 74 3 (parallel [
            (set (reg:DI 1 dx [orig:116 D.25183 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.25183 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 497 {*ashldi3_1}
     (nil))
(insn 74 73 75 3 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:832 89 {*movdi_internal}
     (nil))
(insn 75 74 76 3 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.25184 ] [117])
                (plus:DI (reg/f:DI 0 ax [165])
                    (reg:DI 1 dx [orig:116 D.25183 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.25183 ] [116]))
        (nil)))
(insn 76 75 77 3 (set (reg/f:DI 0 ax [orig:118 D.25185 ] [118])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:117 D.25184 ] [117]) [0 _44->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:832 89 {*movdi_internal}
     (nil))
(insn 77 76 78 3 (set (reg:SI 1 dx [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 90 {*movsi_internal}
     (nil))
(insn 78 77 79 3 (set (reg:DI 1 dx [orig:119 D.25188 ] [119])
        (sign_extend:DI (reg:SI 1 dx [166]))) ge2fitman_fmtext_o.cpp:832 142 {*extendsidi2_rex64}
     (nil))
(insn 79 78 80 3 (parallel [
            (set (reg:DI 1 dx [orig:120 D.25188 ] [120])
                (plus:DI (reg:DI 1 dx [orig:119 D.25188 ] [119])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 221 {*adddi_1}
     (nil))
(insn 80 79 81 3 (parallel [
            (set (reg:DI 1 dx [orig:121 D.25188 ] [121])
                (ashift:DI (reg:DI 1 dx [orig:120 D.25188 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 497 {*ashldi3_1}
     (nil))
(insn 81 80 82 3 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.25185 ] [122])
                (plus:DI (reg/f:DI 0 ax [orig:118 D.25185 ] [118])
                    (reg:DI 1 dx [orig:121 D.25188 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 221 {*adddi_1}
     (nil))
(insn 82 81 83 3 (set (reg:SF 21 xmm0 [orig:123 D.25186 ] [123])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.25185 ] [122]) [0 *_49+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 129 {*movsf_internal}
     (nil))
(insn 83 82 86 3 (set (reg:DF 21 xmm0 [orig:124 D.25187 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.25186 ] [123]))) ge2fitman_fmtext_o.cpp:832 152 {*extendsfdf2_sse}
     (nil))
(call_insn 86 83 88 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b27d3e52100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:832 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 88 86 146 3 (set (reg:SF 25 xmm4 [180])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:125 D.25187 ] [125]))) ge2fitman_fmtext_o.cpp:832 157 {*truncdfsf_fast_sse}
     (nil))
(insn 146 88 89 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32])
        (reg:SF 25 xmm4 [180])) ge2fitman_fmtext_o.cpp:832 129 {*movsf_internal}
     (nil))
(insn 89 146 90 3 (set (reg:SF 21 xmm0 [168])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32])) ge2fitman_fmtext_o.cpp:841 129 {*movsf_internal}
     (nil))
(insn 90 89 148 3 (set (reg:SF 21 xmm0 [167])
        (minus:SF (reg:SF 21 xmm0 [167])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 phase_applied+0 S4 A32]))) ge2fitman_fmtext_o.cpp:841 782 {*fop_sf_1_sse}
     (nil))
(insn 148 90 91 3 (set (reg:SF 0 ax [167])
        (reg:SF 21 xmm0 [167])) ge2fitman_fmtext_o.cpp:841 129 {*movsf_internal}
     (nil))
(insn 91 148 92 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32])
        (reg:SF 0 ax [167])) ge2fitman_fmtext_o.cpp:841 129 {*movsf_internal}
     (nil))
(insn 92 91 93 3 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:845 90 {*movsi_internal}
     (nil))
(insn 93 92 94 3 (set (reg:DI 0 ax [orig:126 D.25183 ] [126])
        (sign_extend:DI (reg:SI 0 ax [169]))) ge2fitman_fmtext_o.cpp:845 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 3 (parallel [
            (set (reg:DI 1 dx [orig:127 D.25183 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 D.25183 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:845 497 {*ashldi3_1}
     (nil))
(insn 95 94 96 3 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:845 89 {*movdi_internal}
     (nil))
(insn 96 95 97 3 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.25184 ] [128])
                (plus:DI (reg/f:DI 0 ax [170])
                    (reg:DI 1 dx [orig:127 D.25183 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:845 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.25183 ] [127]))
        (nil)))
(insn 97 96 98 3 (set (reg/f:DI 0 ax [orig:129 D.25185 ] [129])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:128 D.25184 ] [128]) [0 _58->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:845 89 {*movdi_internal}
     (nil))
(insn 98 97 99 3 (set (reg:SI 1 dx [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:845 90 {*movsi_internal}
     (nil))
(insn 99 98 100 3 (set (reg:DI 1 dx [orig:130 D.25183 ] [130])
        (sign_extend:DI (reg:SI 1 dx [171]))) ge2fitman_fmtext_o.cpp:845 142 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 3 (parallel [
            (set (reg:DI 1 dx [orig:131 D.25183 ] [131])
                (ashift:DI (reg:DI 1 dx [orig:130 D.25183 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:845 497 {*ashldi3_1}
     (nil))
(insn 101 100 102 3 (parallel [
            (set (reg/f:DI 3 bx [orig:132 D.25185 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:129 D.25185 ] [129])
                    (reg:DI 1 dx [orig:131 D.25183 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:845 221 {*adddi_1}
     (nil))
(insn 102 101 149 3 (set (reg:DF 26 xmm5 [orig:133 D.25187 ] [133])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 data_magnitude+0 S4 A32]))) ge2fitman_fmtext_o.cpp:845 152 {*extendsfdf2_sse}
     (nil))
(insn 149 102 162 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64])
        (reg:DF 26 xmm5 [orig:133 D.25187 ] [133])) ge2fitman_fmtext_o.cpp:845 128 {*movdf_internal}
     (nil))
(note 162 149 156 3 NOTE_INSN_DELETED)
(note 156 162 103 3 NOTE_INSN_DELETED)
(insn 103 156 105 3 (set (reg:DF 21 xmm0 [orig:134 D.25187 ] [134])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32]))) ge2fitman_fmtext_o.cpp:845 152 {*extendsfdf2_sse}
     (nil))
(call_insn/u 105 103 150 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b27d3e57400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:845 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(note 150 105 159 3 NOTE_INSN_DELETED)
(note 159 150 107 3 NOTE_INSN_DELETED)
(insn 107 159 108 3 (set (reg:DF 21 xmm0 [orig:136 D.25187 ] [136])
        (mult:DF (reg:DF 21 xmm0 [orig:135 D.25187 ] [135])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64]))) ge2fitman_fmtext_o.cpp:845 776 {*fop_df_comm_sse}
     (nil))
(insn 108 107 151 3 (set (reg:SF 27 xmm6 [orig:137 D.25186 ] [137])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:136 D.25187 ] [136]))) ge2fitman_fmtext_o.cpp:845 157 {*truncdfsf_fast_sse}
     (nil))
(insn 151 108 109 3 (set (reg:SF 0 ax [orig:137 D.25186 ] [137])
        (reg:SF 27 xmm6 [orig:137 D.25186 ] [137])) ge2fitman_fmtext_o.cpp:845 129 {*movsf_internal}
     (nil))
(insn 109 151 110 3 (set (mem:SF (reg/f:DI 3 bx [orig:132 D.25185 ] [132]) [0 *_62+0 S4 A32])
        (reg:SF 0 ax [orig:137 D.25186 ] [137])) ge2fitman_fmtext_o.cpp:845 129 {*movsf_internal}
     (nil))
(insn 110 109 111 3 (set (reg:SI 0 ax [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:846 90 {*movsi_internal}
     (nil))
(insn 111 110 112 3 (set (reg:DI 0 ax [orig:138 D.25183 ] [138])
        (sign_extend:DI (reg:SI 0 ax [172]))) ge2fitman_fmtext_o.cpp:846 142 {*extendsidi2_rex64}
     (nil))
(insn 112 111 113 3 (parallel [
            (set (reg:DI 1 dx [orig:139 D.25183 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.25183 ] [138])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 497 {*ashldi3_1}
     (nil))
(insn 113 112 114 3 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:846 89 {*movdi_internal}
     (nil))
(insn 114 113 115 3 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.25184 ] [140])
                (plus:DI (reg/f:DI 0 ax [173])
                    (reg:DI 1 dx [orig:139 D.25183 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.25183 ] [139]))
        (nil)))
(insn 115 114 116 3 (set (reg/f:DI 0 ax [orig:141 D.25185 ] [141])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:140 D.25184 ] [140]) [0 _70->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:846 89 {*movdi_internal}
     (nil))
(insn 116 115 117 3 (set (reg:SI 1 dx [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:846 90 {*movsi_internal}
     (nil))
(insn 117 116 118 3 (set (reg:DI 1 dx [orig:142 D.25188 ] [142])
        (sign_extend:DI (reg:SI 1 dx [174]))) ge2fitman_fmtext_o.cpp:846 142 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 3 (parallel [
            (set (reg:DI 1 dx [orig:143 D.25188 ] [143])
                (plus:DI (reg:DI 1 dx [orig:142 D.25188 ] [142])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 221 {*adddi_1}
     (nil))
(insn 119 118 120 3 (parallel [
            (set (reg:DI 1 dx [orig:144 D.25188 ] [144])
                (ashift:DI (reg:DI 1 dx [orig:143 D.25188 ] [143])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 497 {*ashldi3_1}
     (nil))
(insn 120 119 121 3 (parallel [
            (set (reg/f:DI 3 bx [orig:145 D.25185 ] [145])
                (plus:DI (reg/f:DI 0 ax [orig:141 D.25185 ] [141])
                    (reg:DI 1 dx [orig:144 D.25188 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 221 {*adddi_1}
     (nil))
(insn 121 120 152 3 (set (reg:DF 28 xmm7 [orig:146 D.25187 ] [146])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 data_magnitude+0 S4 A32]))) ge2fitman_fmtext_o.cpp:846 152 {*extendsfdf2_sse}
     (nil))
(insn 152 121 161 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64])
        (reg:DF 28 xmm7 [orig:146 D.25187 ] [146])) ge2fitman_fmtext_o.cpp:846 128 {*movdf_internal}
     (nil))
(note 161 152 155 3 NOTE_INSN_DELETED)
(note 155 161 122 3 NOTE_INSN_DELETED)
(insn 122 155 124 3 (set (reg:DF 21 xmm0 [orig:147 D.25187 ] [147])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32]))) ge2fitman_fmtext_o.cpp:846 152 {*extendsfdf2_sse}
     (nil))
(call_insn/u 124 122 153 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b27d3e95e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:846 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(note 153 124 158 3 NOTE_INSN_DELETED)
(note 158 153 126 3 NOTE_INSN_DELETED)
(insn 126 158 127 3 (set (reg:DF 21 xmm0 [orig:149 D.25187 ] [149])
        (mult:DF (reg:DF 21 xmm0 [orig:148 D.25187 ] [148])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64]))) ge2fitman_fmtext_o.cpp:846 776 {*fop_df_comm_sse}
     (nil))
(insn 127 126 154 3 (set (reg:SF 23 xmm2 [orig:150 D.25186 ] [150])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:149 D.25187 ] [149]))) ge2fitman_fmtext_o.cpp:846 157 {*truncdfsf_fast_sse}
     (nil))
(insn 154 127 128 3 (set (reg:SF 0 ax [orig:150 D.25186 ] [150])
        (reg:SF 23 xmm2 [orig:150 D.25186 ] [150])) ge2fitman_fmtext_o.cpp:846 129 {*movsf_internal}
     (nil))
(insn 128 154 129 3 (set (mem:SF (reg/f:DI 3 bx [orig:145 D.25185 ] [145]) [0 *_75+0 S4 A32])
        (reg:SF 0 ax [orig:150 D.25186 ] [150])) ge2fitman_fmtext_o.cpp:846 129 {*movsf_internal}
     (nil))
(insn 129 128 130 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:830 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 175
(code_label 130 129 131 4 77 "" [1 uses])
(note 131 130 133 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 133 131 134 4 (set (reg:SI 0 ax [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:830 90 {*movsi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [175])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 num_points+0 S4 A32]))) ge2fitman_fmtext_o.cpp:830 7 {*cmpsi_1}
     (nil))
(jump_insn 135 134 136 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 132)
            (pc))) ge2fitman_fmtext_o.cpp:830 596 {*jcc_1}
     (nil)
 -> 132)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 136 135 141 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 141 136 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1024, decl_uid=24300, symbol_order=254)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rzw {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,9u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 185{160d,25u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) ge2fitman_fmtext_o.cpp:849 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) ge2fitman_fmtext_o.cpp:849 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:849 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 21)
            (pc))) ge2fitman_fmtext_o.cpp:849 596 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) ge2fitman_fmtext_o.cpp:849 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 21)
            (pc))) ge2fitman_fmtext_o.cpp:849 596 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b27d546c000 __ioinit>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x2b27d4fc5900 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/4.9/iostream:74 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x2b27d54b6d10 __dso_handle>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x2b27d546c000 __ioinit>)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x2b27d4fc5b00 __comp_dtor >)) /usr/include/c++/4.9/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 18 17 21 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x2b27d549ef00 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/4.9/iostream:74 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 18 22 5 79 "" [2 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 23 22 0 NOTE_INSN_DELETED)

;; Function (static initializers for ge2fitman_fmtext_o.cpp) (_GLOBAL__sub_I__Z9read_dataPiP10PreprocessP7IOFilesP16Data_file_headerP17Data_block_headerP10Precision2PP8_IO_FILEP12Procpar_infoP10Precision1PPfSI_iP13InFile_structb, funcdef_no=1025, decl_uid=24306, symbol_order=363)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rzw {*call}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for ge2fitman_fmtext_o.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 96{88d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) ge2fitman_fmtext_o.cpp:849 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:849 90 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x2b27d549ee00 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:849 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
