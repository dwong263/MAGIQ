
;; Function int pre_process(int*, Preprocess*, Procpar_info*, float**, float**) (_Z11pre_processPiP10PreprocessP12Procpar_infoPPfS5_, funcdef_no=1021, decl_uid=24410, cgraph_uid=226, symbol_order=227)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 23:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 31:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 41:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 50:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 56:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 57:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 58:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 59:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 60:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 61:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 77:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 96
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 103:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 116:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 118
	 Choosing alt 0 in insn 118:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 119
	 Choosing alt 0 in insn 119:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 122:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 123:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 124:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 131:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 132:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 135:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 152
	 Choosing alt 0 in insn 152:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 157:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 164:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 171:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 172:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 173:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 174:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 175
	 Choosing alt 0 in insn 175:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 176:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 200
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 201:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 202:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 203
	 Choosing alt 0 in insn 203:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 204:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 210:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 217:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 224:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 225:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 227:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 251
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 253:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 255:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 261:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 268:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=418, assigning class NO_REGS to secondary r418
  269: r418:DF=r330:DF
      REG_DEAD r330:DF
    Inserting the sec. move after:
  664: xmm0:DF=r418:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 664:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 270:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 273:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 274:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 275:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 276:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 0 in insn 277:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 278:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 302
	 Choosing alt 0 in insn 302:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 303:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 304:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 305
	 Choosing alt 0 in insn 305:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 306:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 321:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 325:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=419 from oldreg=190, assigning class GENERAL_REGS to r419
  325: {r419:DI=r419:DI<<0x9;clobber flags:CC;}
      REG_DEAD r189:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  665: r419:DI=r189:DI
    Inserting insn reload after:
  666: r190:DI=r419:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 326:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 330:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 331:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 332
	 Choosing alt 0 in insn 332:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 333:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 339:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 349
	 Choosing alt 0 in insn 349:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 356:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=420 from oldreg=201, assigning class GENERAL_REGS to r420
  356: {r420:DI=r420:DI<<0x9;clobber flags:CC;}
      REG_DEAD r200:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  667: r420:DI=r200:DI
    Inserting insn reload after:
  668: r201:DI=r420:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 361:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 364:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 371:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 388:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=421 from oldreg=212, assigning class GENERAL_REGS to r421
  388: {r421:DI=r421:DI<<0x9;clobber flags:CC;}
      REG_DEAD r211:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  669: r421:DI=r211:DI
    Inserting insn reload after:
  670: r212:DI=r421:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 389:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 393:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 394:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 395
	 Choosing alt 0 in insn 395:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 396:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 399:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 400:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 401
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 402:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 409:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 421:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 423:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 425:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 426:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 434:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 439:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 440:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 442:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 443:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 445:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 462:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 463:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 464:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 467:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 469:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 470:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 480:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 484:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 498
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 505:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=422 from oldreg=244, assigning class GENERAL_REGS to r422
  505: {r422:DI=r422:DI<<0x9;clobber flags:CC;}
      REG_DEAD r243:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  671: r422:DI=r243:DI
    Inserting insn reload after:
  672: r244:DI=r422:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 506:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 510:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 511:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 512
	 Choosing alt 0 in insn 512:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 513:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 519:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 526:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 527:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 530:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 534:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 535:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 536:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 537:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 540:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 544:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 549:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 550:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 551:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 556:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 557:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 558:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 559:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 560:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 570:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 572:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 574:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 578:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 587:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 588
	 Choosing alt 0 in insn 588:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 593:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 594:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 595:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 597:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 598:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 599:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 607:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51

********** Pseudo live ranges #1: **********

  BB 51
   Insn 621: point = 0
   Insn 620: point = 0
   Insn 616: point = 1
   Insn 613: point = 3
  BB 47
   Insn 575: point = 4
   Insn 574: point = 4
   Insn 573: point = 5
   Insn 572: point = 7
  BB 50
   Insn 661: point = 8
   Insn 607: point = 8
  BB 49
   Insn 604: point = 8
   Insn 603: point = 8
   Insn 602: point = 9
   Insn 601: point = 10
   Insn 600: point = 11
   Insn 599: point = 12
   Insn 598: point = 13
   Insn 597: point = 14
   Insn 596: point = 16
   Insn 595: point = 17
   Insn 594: point = 19
   Insn 593: point = 21
  BB 48
   Insn 591: point = 22
   Insn 590: point = 22
   Insn 589: point = 23
   Insn 588: point = 25
   Insn 587: point = 27
   Insn 586: point = 28
   Insn 585: point = 30
   Insn 584: point = 32
   Insn 583: point = 34
   Insn 582: point = 35
   Insn 581: point = 35
   Insn 580: point = 35
   Insn 579: point = 35
   Insn 578: point = 36
   Insn 577: point = 38
  BB 46
   Insn 570: point = 39
  BB 45
   Insn 567: point = 39
   Insn 566: point = 39
   Insn 565: point = 40
   Insn 564: point = 41
   Insn 563: point = 42
   Insn 562: point = 43
   Insn 561: point = 44
   Insn 560: point = 45
   Insn 559: point = 47
   Insn 558: point = 48
   Insn 557: point = 50
   Insn 556: point = 52
  BB 44
   Insn 553: point = 53
   Insn 552: point = 53
   Insn 551: point = 54
   Insn 550: point = 56
   Insn 549: point = 58
  BB 43
   Insn 547: point = 59
   Insn 546: point = 59
   Insn 545: point = 60
   Insn 544: point = 62
  BB 42
   Insn 542: point = 63
   Insn 541: point = 63
   Insn 540: point = 64
  BB 41
   Insn 539: point = 66
   Insn 538: point = 66
   Insn 537: point = 67
   Insn 536: point = 68
   Insn 535: point = 70
   Insn 534: point = 72
  BB 40
   Insn 532: point = 73
   Insn 531: point = 73
   Insn 530: point = 74
  BB 39
   Insn 529: point = 76
   Insn 528: point = 76
   Insn 527: point = 77
   Insn 526: point = 78
   Insn 525: point = 80
  BB 35
   Insn 485: point = 81
   Insn 484: point = 81
   Insn 483: point = 82
   Insn 482: point = 84
  BB 38
   Insn 659: point = 85
   Insn 519: point = 85
  BB 37
   Insn 516: point = 85
   Insn 515: point = 85
   Insn 514: point = 86
   Insn 513: point = 87
   Insn 512: point = 89
   Insn 511: point = 91
   Insn 510: point = 92
   Insn 509: point = 94
   Insn 508: point = 96
   Insn 507: point = 97
   Insn 506: point = 99
   Insn 672: point = 100
	Hard reg 1 is preferable by r422 with profit 1
   Insn 505: point = 102
   Insn 671: point = 102
	Hard reg 1 is preferable by r422 with profit 1
	Hard reg 0 is preferable by r422 with profit 1
   Insn 504: point = 104
   Insn 503: point = 106
  BB 36
   Insn 501: point = 107
   Insn 500: point = 107
   Insn 499: point = 108
   Insn 498: point = 110
   Insn 497: point = 112
   Insn 496: point = 113
   Insn 495: point = 115
   Insn 494: point = 117
   Insn 493: point = 119
   Insn 492: point = 120
   Insn 491: point = 120
   Insn 490: point = 120
   Insn 489: point = 120
   Insn 488: point = 121
   Insn 487: point = 123
  BB 34
   Insn 480: point = 124
  BB 33
   Insn 477: point = 124
   Insn 476: point = 124
   Insn 475: point = 125
   Insn 474: point = 126
   Insn 473: point = 127
   Insn 472: point = 128
   Insn 471: point = 129
   Insn 470: point = 130
   Insn 469: point = 131
   Insn 468: point = 133
   Insn 467: point = 134
   Insn 466: point = 136
   Insn 465: point = 138
   Insn 464: point = 139
   Insn 463: point = 141
   Insn 462: point = 143
  BB 32
   Insn 460: point = 144
   Insn 459: point = 144
   Insn 458: point = 145
   Insn 457: point = 147
  BB 31
   Insn 454: point = 148
   Insn 453: point = 148
   Insn 452: point = 149
   Insn 451: point = 150
   Insn 450: point = 151
   Insn 449: point = 152
   Insn 448: point = 153
   Insn 447: point = 154
   Insn 446: point = 155
   Insn 445: point = 157
   Insn 444: point = 158
   Insn 443: point = 160
   Insn 442: point = 162
   Insn 441: point = 163
   Insn 440: point = 165
   Insn 439: point = 167
  BB 30
   Insn 437: point = 168
   Insn 436: point = 168
   Insn 435: point = 169
   Insn 434: point = 171
  BB 29
   Insn 431: point = 172
   Insn 430: point = 172
   Insn 429: point = 173
   Insn 428: point = 174
   Insn 427: point = 175
   Insn 426: point = 176
   Insn 425: point = 177
   Insn 424: point = 178
   Insn 423: point = 180
   Insn 422: point = 181
   Insn 421: point = 183
   Insn 420: point = 185
  BB 28
   Insn 418: point = 186
   Insn 417: point = 186
   Insn 416: point = 187
   Insn 415: point = 189
  BB 3
   Insn 15: point = 190
   Insn 14: point = 190
   Insn 13: point = 191
   Insn 12: point = 193
  BB 27
   Insn 657: point = 194
   Insn 409: point = 194
  BB 26
   Insn 406: point = 194
   Insn 405: point = 194
   Insn 404: point = 195
   Insn 403: point = 196
   Insn 402: point = 197
   Insn 401: point = 199
   Insn 400: point = 201
   Insn 399: point = 202
   Insn 398: point = 204
   Insn 397: point = 206
   Insn 396: point = 207
   Insn 395: point = 209
   Insn 394: point = 211
   Insn 393: point = 212
   Insn 392: point = 214
   Insn 391: point = 216
   Insn 390: point = 217
   Insn 389: point = 219
   Insn 670: point = 220
	Hard reg 1 is preferable by r421 with profit 1
   Insn 388: point = 222
   Insn 669: point = 222
	Hard reg 1 is preferable by r421 with profit 1
	Hard reg 0 is preferable by r421 with profit 1
   Insn 387: point = 224
   Insn 386: point = 226
  BB 25
   Insn 384: point = 227
   Insn 383: point = 227
   Insn 382: point = 228
   Insn 381: point = 230
   Insn 380: point = 232
   Insn 379: point = 233
   Insn 378: point = 235
   Insn 377: point = 237
   Insn 376: point = 239
   Insn 375: point = 240
   Insn 374: point = 240
   Insn 373: point = 240
   Insn 372: point = 240
   Insn 371: point = 241
   Insn 370: point = 243
  BB 24
   Insn 367: point = 244
   Insn 366: point = 244
   Insn 365: point = 245
   Insn 364: point = 246
   Insn 363: point = 248
   Insn 362: point = 250
   Insn 361: point = 251
   Insn 360: point = 253
   Insn 359: point = 255
   Insn 358: point = 256
   Insn 357: point = 258
   Insn 668: point = 259
	Hard reg 1 is preferable by r420 with profit 1
   Insn 356: point = 261
   Insn 667: point = 261
	Hard reg 1 is preferable by r420 with profit 1
	Hard reg 0 is preferable by r420 with profit 1
   Insn 355: point = 263
   Insn 354: point = 265
  BB 23
   Insn 352: point = 266
   Insn 351: point = 266
   Insn 350: point = 267
   Insn 349: point = 269
   Insn 348: point = 271
   Insn 347: point = 272
   Insn 346: point = 274
   Insn 345: point = 276
   Insn 344: point = 278
   Insn 343: point = 279
   Insn 342: point = 279
   Insn 341: point = 279
   Insn 340: point = 279
   Insn 339: point = 280
   Insn 338: point = 282
   Insn 337: point = 283
   Insn 336: point = 283
   Insn 335: point = 284
   Insn 334: point = 285
   Insn 333: point = 286
   Insn 332: point = 288
   Insn 331: point = 290
   Insn 330: point = 291
   Insn 329: point = 293
   Insn 328: point = 295
   Insn 327: point = 296
   Insn 326: point = 298
   Insn 666: point = 299
	Hard reg 2 is preferable by r419 with profit 1
   Insn 325: point = 301
   Insn 665: point = 301
	Hard reg 2 is preferable by r419 with profit 1
	Hard reg 0 is preferable by r419 with profit 1
   Insn 324: point = 303
   Insn 323: point = 305
   Insn 322: point = 306
   Insn 321: point = 308
   Insn 320: point = 309
   Insn 319: point = 311
   Insn 318: point = 313
   Insn 317: point = 315
   Insn 316: point = 316
   Insn 315: point = 316
   Insn 314: point = 316
   Insn 313: point = 316
   Insn 312: point = 317
   Insn 311: point = 319
  BB 21
   Insn 263: point = 320
   Insn 262: point = 320
   Insn 261: point = 321
  BB 22
   Insn 655: point = 322
   Insn 306: point = 322
   Insn 305: point = 323
   Insn 304: point = 325
   Insn 303: point = 326
   Insn 302: point = 328
   Insn 301: point = 330
   Insn 300: point = 331
   Insn 299: point = 333
   Insn 298: point = 335
   Insn 297: point = 337
   Insn 296: point = 338
   Insn 295: point = 338
   Insn 294: point = 338
   Insn 293: point = 338
   Insn 292: point = 339
   Insn 291: point = 341
   Insn 290: point = 342
   Insn 289: point = 344
   Insn 288: point = 345
   Insn 287: point = 347
   Insn 286: point = 349
   Insn 285: point = 351
   Insn 284: point = 352
   Insn 283: point = 352
   Insn 282: point = 352
   Insn 281: point = 352
   Insn 280: point = 353
   Insn 279: point = 355
   Insn 278: point = 356
   Insn 277: point = 357
   Insn 276: point = 359
   Insn 275: point = 360
   Insn 274: point = 361
   Insn 273: point = 362
   Insn 272: point = 363
   Insn 271: point = 363
   Insn 270: point = 363
   Insn 664: point = 363
	Hard reg 21 is preferable by r418 with profit 1
   Insn 269: point = 364
	Hard reg 21 is preferable by r418 with profit 1
	Hard reg 0 is preferable by r418 with profit 1
   Insn 268: point = 366
  BB 13
   Insn 644: point = 367
  BB 12
   Insn 166: point = 367
   Insn 165: point = 367
   Insn 164: point = 368
  BB 14
   Insn 646: point = 369
   Insn 204: point = 369
   Insn 203: point = 370
   Insn 202: point = 372
   Insn 201: point = 373
   Insn 200: point = 375
   Insn 199: point = 377
   Insn 198: point = 378
   Insn 197: point = 380
   Insn 196: point = 382
   Insn 195: point = 384
   Insn 194: point = 385
   Insn 193: point = 385
   Insn 192: point = 385
   Insn 191: point = 385
   Insn 190: point = 386
   Insn 189: point = 388
   Insn 188: point = 389
   Insn 187: point = 391
   Insn 186: point = 392
   Insn 185: point = 394
   Insn 184: point = 396
   Insn 183: point = 398
   Insn 182: point = 399
   Insn 181: point = 399
   Insn 180: point = 399
   Insn 179: point = 399
   Insn 178: point = 400
   Insn 177: point = 402
   Insn 176: point = 403
   Insn 175: point = 404
   Insn 174: point = 406
   Insn 173: point = 407
   Insn 172: point = 408
   Insn 171: point = 409
  BB 11
  BB 16
   Insn 648: point = 410
  BB 19
   Insn 650: point = 410
  BB 18
   Insn 219: point = 410
   Insn 218: point = 410
   Insn 217: point = 411
  BB 20
   Insn 652: point = 412
   Insn 255: point = 412
   Insn 254: point = 413
   Insn 253: point = 415
   Insn 252: point = 416
   Insn 251: point = 418
   Insn 250: point = 420
   Insn 249: point = 421
   Insn 248: point = 423
   Insn 247: point = 425
   Insn 246: point = 427
   Insn 245: point = 428
   Insn 244: point = 428
   Insn 243: point = 428
   Insn 242: point = 428
   Insn 241: point = 429
   Insn 240: point = 431
   Insn 239: point = 432
   Insn 238: point = 434
   Insn 237: point = 435
   Insn 236: point = 437
   Insn 235: point = 439
   Insn 234: point = 441
   Insn 233: point = 442
   Insn 232: point = 442
   Insn 231: point = 442
   Insn 230: point = 442
   Insn 229: point = 443
   Insn 228: point = 445
   Insn 227: point = 446
   Insn 226: point = 447
   Insn 225: point = 449
   Insn 224: point = 450
  BB 17
  BB 15
   Insn 212: point = 451
   Insn 211: point = 451
   Insn 210: point = 452
  BB 10
   Insn 159: point = 453
   Insn 158: point = 453
   Insn 157: point = 454
  BB 9
   Insn 155: point = 455
   Insn 154: point = 455
   Insn 153: point = 456
   Insn 152: point = 458
   Insn 151: point = 460
   Insn 150: point = 461
   Insn 149: point = 463
   Insn 148: point = 465
   Insn 147: point = 467
   Insn 146: point = 468
   Insn 145: point = 468
   Insn 144: point = 468
   Insn 143: point = 468
   Insn 142: point = 469
   Insn 141: point = 471
  BB 5
   Insn 65: point = 472
   Insn 64: point = 472
  BB 8
   Insn 641: point = 472
   Insn 135: point = 472
  BB 7
   Insn 132: point = 472
   Insn 131: point = 473
  BB 6
   Insn 126: point = 474
   Insn 125: point = 474
   Insn 124: point = 475
   Insn 123: point = 476
   Insn 122: point = 477
   Insn 121: point = 478
   Insn 120: point = 478
   Insn 119: point = 479
   Insn 118: point = 481
   Insn 117: point = 483
   Insn 116: point = 485
   Insn 115: point = 487
   Insn 114: point = 489
   Insn 113: point = 491
   Insn 112: point = 493
   Insn 111: point = 495
   Insn 110: point = 496
   Insn 109: point = 498
   Insn 108: point = 500
   Insn 107: point = 501
   Insn 106: point = 503
   Insn 105: point = 505
   Insn 104: point = 506
   Insn 103: point = 508
   Insn 102: point = 510
   Insn 101: point = 512
   Insn 100: point = 514
   Insn 99: point = 516
   Insn 98: point = 518
   Insn 97: point = 519
   Insn 96: point = 521
   Insn 95: point = 523
   Insn 94: point = 524
   Insn 93: point = 526
   Insn 92: point = 528
   Insn 91: point = 529
   Insn 90: point = 531
   Insn 89: point = 533
   Insn 88: point = 535
   Insn 87: point = 537
   Insn 86: point = 539
   Insn 85: point = 541
   Insn 84: point = 542
   Insn 83: point = 544
   Insn 82: point = 546
   Insn 81: point = 547
   Insn 80: point = 549
   Insn 79: point = 551
   Insn 78: point = 552
   Insn 77: point = 554
   Insn 76: point = 556
   Insn 75: point = 558
   Insn 74: point = 560
   Insn 73: point = 562
   Insn 72: point = 563
   Insn 71: point = 565
   Insn 70: point = 567
   Insn 69: point = 568
   Insn 68: point = 570
   Insn 67: point = 572
  BB 4
   Insn 62: point = 573
   Insn 61: point = 573
   Insn 60: point = 574
   Insn 59: point = 575
   Insn 58: point = 576
   Insn 57: point = 577
   Insn 56: point = 578
   Insn 55: point = 579
   Insn 54: point = 579
   Insn 53: point = 580
   Insn 52: point = 582
   Insn 51: point = 584
   Insn 50: point = 586
   Insn 49: point = 588
   Insn 48: point = 590
   Insn 47: point = 592
   Insn 46: point = 594
   Insn 45: point = 595
   Insn 44: point = 597
   Insn 43: point = 599
   Insn 42: point = 600
   Insn 41: point = 602
   Insn 40: point = 604
   Insn 39: point = 606
   Insn 38: point = 608
   Insn 37: point = 610
   Insn 36: point = 611
   Insn 35: point = 613
   Insn 34: point = 615
   Insn 33: point = 616
   Insn 32: point = 618
   Insn 31: point = 620
   Insn 30: point = 622
   Insn 29: point = 624
   Insn 28: point = 626
   Insn 27: point = 627
   Insn 26: point = 629
   Insn 25: point = 631
   Insn 24: point = 632
   Insn 23: point = 634
   Insn 22: point = 636
   Insn 21: point = 638
   Insn 20: point = 640
   Insn 19: point = 641
   Insn 18: point = 643
   Insn 17: point = 645
  BB 2
   Insn 10: point = 646
   Insn 6: point = 646
   Insn 5: point = 646
   Insn 4: point = 646
   Insn 3: point = 646
   Insn 2: point = 646
 r87: [190..191]
 r88: [642..643]
 r89: [639..641]
 r90: [637..638]
 r91: [635..636]
 r92: [633..634]
 r93: [617..632]
 r94: [628..629]
 r95: [625..627]
 r96: [623..624]
 r97: [621..622]
 r98: [619..620]
 r99: [617..618]
 r100: [581..616]
 r101: [612..613]
 r102: [609..611]
 r103: [607..608]
 r104: [605..606]
 r105: [603..604]
 r106: [601..602]
 r107: [583..600]
 r108: [596..597]
 r109: [593..595]
 r110: [591..592]
 r111: [589..590]
 r112: [587..588]
 r113: [585..586]
 r114: [583..584]
 r115: [581..582]
 r116: [579..580]
 r117: [569..570]
 r118: [566..568]
 r119: [564..565]
 r120: [557..563]
 r121: [559..560]
 r122: [557..558]
 r123: [555..556]
 r124: [553..554]
 r125: [530..552]
 r126: [548..549]
 r127: [545..547]
 r128: [543..544]
 r129: [536..542]
 r130: [538..539]
 r131: [536..537]
 r132: [534..535]
 r133: [532..533]
 r134: [530..531]
 r135: [480..529]
 r136: [525..526]
 r137: [522..524]
 r138: [520..521]
 r139: [511..519]
 r140: [515..516]
 r141: [513..514]
 r142: [511..512]
 r143: [509..510]
 r144: [507..508]
 r145: [482..506]
 r146: [502..503]
 r147: [499..501]
 r148: [497..498]
 r149: [488..496]
 r150: [492..493]
 r151: [490..491]
 r152: [488..489]
 r153: [486..487]
 r154: [484..485]
 r155: [482..483]
 r156: [480..481]
 r157: [478..479]
 r158: [467..469]
 r159: [459..461]
 r160: [457..458]
 r161: [455..456]
 r162: [441..443]
 r163: [433..435]
 r164: [412..432]
 r165: [427..429]
 r166: [419..421]
 r167: [417..418]
 r168: [414..416]
 r169: [412..413]
 r170: [398..400]
 r171: [390..392]
 r172: [369..389]
 r173: [384..386]
 r174: [376..378]
 r175: [374..375]
 r176: [371..373]
 r177: [369..370]
 r178: [351..353]
 r179: [343..345]
 r180: [322..342]
 r181: [337..339]
 r182: [329..331]
 r183: [327..328]
 r184: [324..326]
 r185: [322..323]
 r186: [315..317]
 r187: [307..309]
 r188: [285..306]
 r189: [302..303]
 r190: [297..299]
 r191: [284..296]
 r192: [292..293]
 r193: [289..291]
 r194: [287..288]
 r195: [283..286]
 r196: [278..280]
 r197: [270..272]
 r198: [268..269]
 r199: [266..267]
 r200: [262..263]
 r201: [257..259]
 r202: [245..256]
 r203: [252..253]
 r204: [249..251]
 r205: [247..248]
 r206: [244..246]
 r207: [239..241]
 r208: [231..233]
 r209: [229..230]
 r210: [227..228]
 r211: [223..224]
 r212: [218..220]
 r213: [196..217]
 r214: [213..214]
 r215: [210..212]
 r216: [208..209]
 r217: [195..207]
 r218: [203..204]
 r219: [200..202]
 r220: [198..199]
 r221: [194..197]
 r222: [186..187]
 r223: [182..183]
 r224: [173..181]
 r225: [172..178]
 r226: [168..169]
 r227: [164..165]
 r228: [150..163]
 r229: [159..160]
 r230: [149..158]
 r231: [148..155]
 r232: [144..145]
 r233: [140..141]
 r234: [126..139]
 r235: [135..136]
 r236: [125..134]
 r237: [124..131]
 r238: [81..82]
 r239: [119..121]
 r240: [111..113]
 r241: [109..110]
 r242: [107..108]
 r243: [103..104]
 r244: [98..100]
 r245: [86..97]
 r246: [93..94]
 r247: [90..92]
 r248: [88..89]
 r249: [85..87]
 r250: [73..78]
 r251: [69..70]
 r252: [63..68]
 r253: [59..60]
 r254: [55..56]
 r255: [53..54]
 r256: [49..50]
 r257: [40..48]
 r258: [39..45]
 r259: [4..5]
 r260: [34..36]
 r261: [26..28]
 r262: [24..25]
 r263: [22..23]
 r264: [18..19]
 r265: [9..17]
 r266: [8..14]
 r267: [2..3]
 r268: [0..1]
 r269: [192..193]
 r270: [644..645]
 r271: [639..640]
 r272: [630..631]
 r273: [625..626]
 r274: [614..615]
 r275: [609..610]
 r276: [598..599]
 r277: [593..594]
 r278: [577..578]
 r279: [575..576]
 r280: [573..574]
 r281: [571..572]
 r282: [566..567]
 r283: [561..562]
 r284: [550..551]
 r285: [545..546]
 r286: [540..541]
 r287: [527..528]
 r288: [522..523]
 r289: [517..518]
 r290: [504..505]
 r291: [499..500]
 r292: [494..495]
 r293: [476..477]
 r294: [474..475]
 r295: [472..473]
 r296: [470..471]
 r297: [466..468] [462..463]
 r298: [464..465]
 r299: [459..460]
 r300: [453..454]
 r301: [367..368]
 r302: [408..409]
 r303: [403..404]
 r304: [405..407]
 r305: [405..406]
 r306: [401..402]
 r307: [397..399] [393..394]
 r308: [395..396]
 r309: [390..391]
 r310: [387..388]
 r311: [383..385] [379..380]
 r312: [381..382]
 r313: [376..377]
 r314: [371..372]
 r315: [451..452]
 r316: [410..411]
 r317: [446..447]
 r318: [448..450]
 r319: [448..449]
 r320: [444..445]
 r321: [440..442] [436..437]
 r322: [438..439]
 r323: [433..434]
 r324: [430..431]
 r325: [426..428] [422..423]
 r326: [424..425]
 r327: [419..420]
 r328: [414..415]
 r329: [320..321]
 r330: [365..366]
 r331: [361..362]
 r332: [356..357]
 r333: [358..360]
 r334: [358..359]
 r335: [354..355]
 r336: [350..352] [346..347]
 r337: [348..349]
 r338: [343..344]
 r339: [340..341]
 r340: [336..338] [332..333]
 r341: [334..335]
 r342: [329..330]
 r343: [324..325]
 r344: [318..319]
 r345: [314..316] [310..311]
 r346: [312..313]
 r347: [307..308]
 r348: [304..305]
 r349: [297..298]
 r350: [294..295]
 r351: [289..290]
 r352: [281..282]
 r353: [277..279] [273..274]
 r354: [275..276]
 r355: [270..271]
 r356: [264..265]
 r357: [257..258]
 r358: [254..255]
 r359: [249..250]
 r360: [242..243]
 r361: [238..240] [234..235]
 r362: [236..237]
 r363: [231..232]
 r364: [225..226]
 r365: [218..219]
 r366: [215..216]
 r367: [210..211]
 r368: [205..206]
 r369: [200..201]
 r370: [188..189]
 r371: [184..185]
 r372: [179..180]
 r373: [175..177]
 r374: [174..176]
 r375: [170..171]
 r376: [166..167]
 r377: [161..162]
 r378: [156..157]
 r379: [152..154]
 r380: [151..153]
 r381: [146..147]
 r382: [142..143]
 r383: [137..138]
 r384: [132..133]
 r385: [128..130]
 r386: [127..129]
 r387: [83..84]
 r388: [122..123]
 r389: [118..120] [114..115]
 r390: [116..117]
 r391: [111..112]
 r392: [105..106]
 r393: [98..99]
 r394: [95..96]
 r395: [90..91]
 r396: [79..80]
 r397: [76..77]
 r398: [73..74]
 r399: [71..72]
 r400: [66..67]
 r401: [63..64]
 r402: [61..62]
 r403: [57..58]
 r404: [51..52]
 r405: [46..47]
 r406: [42..44]
 r407: [41..43]
 r408: [6..7]
 r409: [37..38]
 r410: [33..35] [29..30]
 r411: [31..32]
 r412: [26..27]
 r413: [20..21]
 r414: [15..16]
 r415: [11..13]
 r416: [10..12]
 r418: [363..364]
 r419: [300..301]
 r420: [260..261]
 r421: [221..222]
 r422: [101..102]
Compressing live ranges: from 646 to 524 - 81%
Ranges after the compression:
 r87: [142..143]
 r88: [520..521]
 r89: [518..519]
 r90: [516..517]
 r91: [514..515]
 r92: [512..513]
 r93: [498..511]
 r94: [508..509]
 r95: [506..507]
 r96: [504..505]
 r97: [502..503]
 r98: [500..501]
 r99: [498..499]
 r100: [466..497]
 r101: [494..495]
 r102: [492..493]
 r103: [490..491]
 r104: [488..489]
 r105: [486..487]
 r106: [484..485]
 r107: [468..483]
 r108: [480..481]
 r109: [478..479]
 r110: [476..477]
 r111: [474..475]
 r112: [472..473]
 r113: [470..471]
 r114: [468..469]
 r115: [466..467]
 r116: [464..465]
 r117: [454..455]
 r118: [452..453]
 r119: [450..451]
 r120: [444..449]
 r121: [446..447]
 r122: [444..445]
 r123: [442..443]
 r124: [440..441]
 r125: [420..439]
 r126: [436..437]
 r127: [434..435]
 r128: [432..433]
 r129: [426..431]
 r130: [428..429]
 r131: [426..427]
 r132: [424..425]
 r133: [422..423]
 r134: [420..421]
 r135: [376..419]
 r136: [416..417]
 r137: [414..415]
 r138: [412..413]
 r139: [404..411]
 r140: [408..409]
 r141: [406..407]
 r142: [404..405]
 r143: [402..403]
 r144: [400..401]
 r145: [378..399]
 r146: [396..397]
 r147: [394..395]
 r148: [392..393]
 r149: [384..391]
 r150: [388..389]
 r151: [386..387]
 r152: [384..385]
 r153: [382..383]
 r154: [380..381]
 r155: [378..379]
 r156: [376..377]
 r157: [374..375]
 r158: [364..365]
 r159: [358..359]
 r160: [356..357]
 r161: [354..355]
 r162: [342..343]
 r163: [336..337]
 r164: [320..335]
 r165: [332..333]
 r166: [326..327]
 r167: [324..325]
 r168: [322..323]
 r169: [320..321]
 r170: [308..309]
 r171: [302..303]
 r172: [286..301]
 r173: [298..299]
 r174: [292..293]
 r175: [290..291]
 r176: [288..289]
 r177: [286..287]
 r178: [270..271]
 r179: [264..265]
 r180: [248..263]
 r181: [260..261]
 r182: [254..255]
 r183: [252..253]
 r184: [250..251]
 r185: [248..249]
 r186: [242..243]
 r187: [236..237]
 r188: [218..235]
 r189: [232..233]
 r190: [228..229]
 r191: [218..227]
 r192: [224..225]
 r193: [222..223]
 r194: [220..221]
 r195: [218..219]
 r196: [214..215]
 r197: [208..209]
 r198: [206..207]
 r199: [204..205]
 r200: [200..201]
 r201: [196..197]
 r202: [186..195]
 r203: [192..193]
 r204: [190..191]
 r205: [188..189]
 r206: [186..187]
 r207: [182..183]
 r208: [176..177]
 r209: [174..175]
 r210: [172..173]
 r211: [168..169]
 r212: [164..165]
 r213: [146..163]
 r214: [160..161]
 r215: [158..159]
 r216: [156..157]
 r217: [146..155]
 r218: [152..153]
 r219: [150..151]
 r220: [148..149]
 r221: [146..147]
 r222: [138..139]
 r223: [134..135]
 r224: [130..133]
 r225: [130..131]
 r226: [126..127]
 r227: [122..123]
 r228: [114..121]
 r229: [118..119]
 r230: [114..117]
 r231: [114..115]
 r232: [110..111]
 r233: [106..107]
 r234: [98..105]
 r235: [102..103]
 r236: [98..101]
 r237: [98..99]
 r238: [62..63]
 r239: [94..95]
 r240: [88..89]
 r241: [86..87]
 r242: [84..85]
 r243: [80..81]
 r244: [76..77]
 r245: [66..75]
 r246: [72..73]
 r247: [70..71]
 r248: [68..69]
 r249: [66..67]
 r250: [56..59]
 r251: [52..53]
 r252: [48..51]
 r253: [44..45]
 r254: [40..41]
 r255: [38..39]
 r256: [34..35]
 r257: [30..33]
 r258: [30..31]
 r259: [4..5]
 r260: [26..27]
 r261: [20..21]
 r262: [18..19]
 r263: [16..17]
 r264: [12..13]
 r265: [8..11]
 r266: [8..9]
 r267: [2..3]
 r268: [0..1]
 r269: [144..145]
 r270: [522..523]
 r271: [518..519]
 r272: [510..511]
 r273: [506..507]
 r274: [496..497]
 r275: [492..493]
 r276: [482..483]
 r277: [478..479]
 r278: [462..463]
 r279: [460..461]
 r280: [458..459]
 r281: [456..457]
 r282: [452..453]
 r283: [448..449]
 r284: [438..439]
 r285: [434..435]
 r286: [430..431]
 r287: [418..419]
 r288: [414..415]
 r289: [410..411]
 r290: [398..399]
 r291: [394..395]
 r292: [390..391]
 r293: [372..373]
 r294: [370..371]
 r295: [368..369]
 r296: [366..367]
 r297: [364..365] [360..361]
 r298: [362..363]
 r299: [358..359]
 r300: [352..353]
 r301: [284..285]
 r302: [316..317]
 r303: [312..313]
 r304: [314..315]
 r305: [314..315]
 r306: [310..311]
 r307: [308..309] [304..305]
 r308: [306..307]
 r309: [302..303]
 r310: [300..301]
 r311: [298..299] [294..295]
 r312: [296..297]
 r313: [292..293]
 r314: [288..289]
 r315: [350..351]
 r316: [318..319]
 r317: [346..347]
 r318: [348..349]
 r319: [348..349]
 r320: [344..345]
 r321: [342..343] [338..339]
 r322: [340..341]
 r323: [336..337]
 r324: [334..335]
 r325: [332..333] [328..329]
 r326: [330..331]
 r327: [326..327]
 r328: [322..323]
 r329: [246..247]
 r330: [282..283]
 r331: [278..279]
 r332: [274..275]
 r333: [276..277]
 r334: [276..277]
 r335: [272..273]
 r336: [270..271] [266..267]
 r337: [268..269]
 r338: [264..265]
 r339: [262..263]
 r340: [260..261] [256..257]
 r341: [258..259]
 r342: [254..255]
 r343: [250..251]
 r344: [244..245]
 r345: [242..243] [238..239]
 r346: [240..241]
 r347: [236..237]
 r348: [234..235]
 r349: [228..229]
 r350: [226..227]
 r351: [222..223]
 r352: [216..217]
 r353: [214..215] [210..211]
 r354: [212..213]
 r355: [208..209]
 r356: [202..203]
 r357: [196..197]
 r358: [194..195]
 r359: [190..191]
 r360: [184..185]
 r361: [182..183] [178..179]
 r362: [180..181]
 r363: [176..177]
 r364: [170..171]
 r365: [164..165]
 r366: [162..163]
 r367: [158..159]
 r368: [154..155]
 r369: [150..151]
 r370: [140..141]
 r371: [136..137]
 r372: [132..133]
 r373: [130..131]
 r374: [130..131]
 r375: [128..129]
 r376: [124..125]
 r377: [120..121]
 r378: [116..117]
 r379: [114..115]
 r380: [114..115]
 r381: [112..113]
 r382: [108..109]
 r383: [104..105]
 r384: [100..101]
 r385: [98..99]
 r386: [98..99]
 r387: [64..65]
 r388: [96..97]
 r389: [94..95] [90..91]
 r390: [92..93]
 r391: [88..89]
 r392: [82..83]
 r393: [76..77]
 r394: [74..75]
 r395: [70..71]
 r396: [60..61]
 r397: [58..59]
 r398: [56..57]
 r399: [54..55]
 r400: [50..51]
 r401: [48..49]
 r402: [46..47]
 r403: [42..43]
 r404: [36..37]
 r405: [32..33]
 r406: [30..31]
 r407: [30..31]
 r408: [6..7]
 r409: [28..29]
 r410: [26..27] [22..23]
 r411: [24..25]
 r412: [20..21]
 r413: [14..15]
 r414: [10..11]
 r415: [8..9]
 r416: [8..9]
 r418: [280..281]
 r419: [230..231]
 r420: [198..199]
 r421: [166..167]
 r422: [78..79]

********** Assignment #1: **********

	 Assigning to 419 (cl=GENERAL_REGS, orig=190, freq=3, tfirst=419, tfreq=3)...
	   Assign 0 to reload r419 (freq=3)
	 Assigning to 420 (cl=GENERAL_REGS, orig=201, freq=3, tfirst=420, tfreq=3)...
	   Assign 0 to reload r420 (freq=3)
	 Assigning to 421 (cl=GENERAL_REGS, orig=212, freq=3, tfirst=421, tfreq=3)...
	   Assign 0 to reload r421 (freq=3)
	 Assigning to 422 (cl=GENERAL_REGS, orig=244, freq=3, tfirst=422, tfreq=3)...
	   Assign 0 to reload r422 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 8):	 418
Changing spilled pseudos to memory in insn #269
Changing spilled pseudos to memory in insn #664
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 14 for insn #664
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 664:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 269:  (0) ?m  (1) rC {*movdf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 33
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 76
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 91
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 88
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 102
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 115
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 142
changing reg in insn 147
changing reg in insn 145
changing reg in insn 143
changing reg in insn 147
changing reg in insn 145
changing reg in insn 150
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 229
changing reg in insn 234
changing reg in insn 232
changing reg in insn 230
changing reg in insn 234
changing reg in insn 232
changing reg in insn 237
changing reg in insn 239
changing reg in insn 239
changing reg in insn 239
changing reg in insn 255
changing reg in insn 241
changing reg in insn 246
changing reg in insn 244
changing reg in insn 242
changing reg in insn 246
changing reg in insn 244
changing reg in insn 249
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 254
changing reg in insn 254
changing reg in insn 255
changing reg in insn 178
changing reg in insn 183
changing reg in insn 181
changing reg in insn 179
changing reg in insn 183
changing reg in insn 181
changing reg in insn 186
changing reg in insn 188
changing reg in insn 188
changing reg in insn 188
changing reg in insn 204
changing reg in insn 190
changing reg in insn 195
changing reg in insn 193
changing reg in insn 191
changing reg in insn 195
changing reg in insn 193
changing reg in insn 198
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 280
changing reg in insn 285
changing reg in insn 283
changing reg in insn 281
changing reg in insn 285
changing reg in insn 283
changing reg in insn 288
changing reg in insn 290
changing reg in insn 290
changing reg in insn 290
changing reg in insn 306
changing reg in insn 292
changing reg in insn 297
changing reg in insn 295
changing reg in insn 293
changing reg in insn 297
changing reg in insn 295
changing reg in insn 300
changing reg in insn 302
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 305
changing reg in insn 306
changing reg in insn 312
changing reg in insn 317
changing reg in insn 315
changing reg in insn 313
changing reg in insn 317
changing reg in insn 315
changing reg in insn 320
changing reg in insn 322
changing reg in insn 322
changing reg in insn 322
changing reg in insn 334
changing reg in insn 324
changing reg in insn 327
changing reg in insn 327
changing reg in insn 327
changing reg in insn 335
changing reg in insn 329
changing reg in insn 330
changing reg in insn 330
changing reg in insn 332
changing reg in insn 332
changing reg in insn 333
changing reg in insn 333
changing reg in insn 336
changing reg in insn 339
changing reg in insn 344
changing reg in insn 342
changing reg in insn 340
changing reg in insn 344
changing reg in insn 342
changing reg in insn 347
changing reg in insn 349
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 351
changing reg in insn 355
changing reg in insn 358
changing reg in insn 358
changing reg in insn 358
changing reg in insn 365
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 363
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 366
changing reg in insn 371
changing reg in insn 376
changing reg in insn 374
changing reg in insn 372
changing reg in insn 376
changing reg in insn 374
changing reg in insn 379
changing reg in insn 381
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 383
changing reg in insn 387
changing reg in insn 390
changing reg in insn 390
changing reg in insn 390
changing reg in insn 403
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 404
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 401
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 405
changing reg in insn 416
changing reg in insn 417
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 429
changing reg in insn 424
changing reg in insn 430
changing reg in insn 435
changing reg in insn 436
changing reg in insn 440
changing reg in insn 441
changing reg in insn 441
changing reg in insn 451
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 452
changing reg in insn 446
changing reg in insn 453
changing reg in insn 458
changing reg in insn 459
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 474
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 475
changing reg in insn 469
changing reg in insn 476
changing reg in insn 483
changing reg in insn 484
changing reg in insn 488
changing reg in insn 493
changing reg in insn 491
changing reg in insn 489
changing reg in insn 493
changing reg in insn 491
changing reg in insn 496
changing reg in insn 498
changing reg in insn 498
changing reg in insn 499
changing reg in insn 499
changing reg in insn 500
changing reg in insn 504
changing reg in insn 507
changing reg in insn 507
changing reg in insn 507
changing reg in insn 514
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 512
changing reg in insn 512
changing reg in insn 513
changing reg in insn 513
changing reg in insn 515
changing reg in insn 526
changing reg in insn 531
changing reg in insn 528
changing reg in insn 535
changing reg in insn 536
changing reg in insn 536
changing reg in insn 541
changing reg in insn 538
changing reg in insn 545
changing reg in insn 546
changing reg in insn 550
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 557
changing reg in insn 558
changing reg in insn 558
changing reg in insn 565
changing reg in insn 560
changing reg in insn 566
changing reg in insn 573
changing reg in insn 574
changing reg in insn 578
changing reg in insn 583
changing reg in insn 581
changing reg in insn 579
changing reg in insn 583
changing reg in insn 581
changing reg in insn 586
changing reg in insn 588
changing reg in insn 588
changing reg in insn 589
changing reg in insn 589
changing reg in insn 590
changing reg in insn 594
changing reg in insn 595
changing reg in insn 595
changing reg in insn 602
changing reg in insn 597
changing reg in insn 603
changing reg in insn 613
changing reg in insn 616
changing reg in insn 616
changing reg in insn 620
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 111
changing reg in insn 112
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 131
changing reg in insn 132
changing reg in insn 141
changing reg in insn 142
changing reg in insn 149
changing reg in insn 147
changing reg in insn 146
changing reg in insn 145
changing reg in insn 144
changing reg in insn 143
changing reg in insn 150
changing reg in insn 148
changing reg in insn 147
changing reg in insn 146
changing reg in insn 145
changing reg in insn 144
changing reg in insn 148
changing reg in insn 149
changing reg in insn 151
changing reg in insn 157
changing reg in insn 158
changing reg in insn 164
changing reg in insn 165
changing reg in insn 171
changing reg in insn 172
changing reg in insn 175
changing reg in insn 176
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 178
changing reg in insn 185
changing reg in insn 183
changing reg in insn 182
changing reg in insn 181
changing reg in insn 180
changing reg in insn 179
changing reg in insn 186
changing reg in insn 184
changing reg in insn 183
changing reg in insn 182
changing reg in insn 181
changing reg in insn 180
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 197
changing reg in insn 195
changing reg in insn 194
changing reg in insn 193
changing reg in insn 192
changing reg in insn 191
changing reg in insn 198
changing reg in insn 196
changing reg in insn 195
changing reg in insn 194
changing reg in insn 193
changing reg in insn 192
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 202
changing reg in insn 210
changing reg in insn 211
changing reg in insn 217
changing reg in insn 218
changing reg in insn 226
changing reg in insn 227
changing reg in insn 224
changing reg in insn 226
changing reg in insn 225
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 236
changing reg in insn 234
changing reg in insn 233
changing reg in insn 232
changing reg in insn 231
changing reg in insn 230
changing reg in insn 237
changing reg in insn 235
changing reg in insn 234
changing reg in insn 233
changing reg in insn 232
changing reg in insn 231
changing reg in insn 235
changing reg in insn 236
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 248
changing reg in insn 246
changing reg in insn 245
changing reg in insn 244
changing reg in insn 243
changing reg in insn 242
changing reg in insn 249
changing reg in insn 247
changing reg in insn 246
changing reg in insn 245
changing reg in insn 244
changing reg in insn 243
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 253
changing reg in insn 254
changing reg in insn 261
changing reg in insn 262
changing reg in insn 268
changing reg in insn 269
changing reg in insn 273
changing reg in insn 274
changing reg in insn 277
changing reg in insn 278
changing reg in insn 275
changing reg in insn 276
changing reg in insn 279
changing reg in insn 280
changing reg in insn 287
changing reg in insn 285
changing reg in insn 284
changing reg in insn 283
changing reg in insn 282
changing reg in insn 281
changing reg in insn 288
changing reg in insn 286
changing reg in insn 285
changing reg in insn 284
changing reg in insn 283
changing reg in insn 282
changing reg in insn 286
changing reg in insn 287
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 292
changing reg in insn 299
changing reg in insn 297
changing reg in insn 296
changing reg in insn 295
changing reg in insn 294
changing reg in insn 293
changing reg in insn 300
changing reg in insn 298
changing reg in insn 297
changing reg in insn 296
changing reg in insn 295
changing reg in insn 294
changing reg in insn 298
changing reg in insn 299
changing reg in insn 301
changing reg in insn 304
changing reg in insn 311
changing reg in insn 312
changing reg in insn 319
changing reg in insn 317
changing reg in insn 316
changing reg in insn 315
changing reg in insn 314
changing reg in insn 313
changing reg in insn 320
changing reg in insn 318
changing reg in insn 317
changing reg in insn 316
changing reg in insn 315
changing reg in insn 314
changing reg in insn 318
changing reg in insn 319
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 324
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 331
changing reg in insn 338
changing reg in insn 339
changing reg in insn 346
changing reg in insn 344
changing reg in insn 343
changing reg in insn 342
changing reg in insn 341
changing reg in insn 340
changing reg in insn 347
changing reg in insn 345
changing reg in insn 344
changing reg in insn 343
changing reg in insn 342
changing reg in insn 341
changing reg in insn 345
changing reg in insn 346
changing reg in insn 348
changing reg in insn 354
changing reg in insn 355
changing reg in insn 357
changing reg in insn 358
changing reg in insn 359
changing reg in insn 360
changing reg in insn 362
changing reg in insn 370
changing reg in insn 371
changing reg in insn 378
changing reg in insn 376
changing reg in insn 375
changing reg in insn 374
changing reg in insn 373
changing reg in insn 372
changing reg in insn 379
changing reg in insn 377
changing reg in insn 376
changing reg in insn 375
changing reg in insn 374
changing reg in insn 373
changing reg in insn 377
changing reg in insn 378
changing reg in insn 380
changing reg in insn 386
changing reg in insn 387
changing reg in insn 389
changing reg in insn 390
changing reg in insn 391
changing reg in insn 392
changing reg in insn 394
changing reg in insn 397
changing reg in insn 398
changing reg in insn 400
changing reg in insn 415
changing reg in insn 416
changing reg in insn 420
changing reg in insn 421
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 426
changing reg in insn 428
changing reg in insn 434
changing reg in insn 435
changing reg in insn 439
changing reg in insn 440
changing reg in insn 442
changing reg in insn 443
changing reg in insn 445
changing reg in insn 446
changing reg in insn 447
changing reg in insn 449
changing reg in insn 448
changing reg in insn 450
changing reg in insn 457
changing reg in insn 458
changing reg in insn 462
changing reg in insn 463
changing reg in insn 465
changing reg in insn 466
changing reg in insn 468
changing reg in insn 469
changing reg in insn 470
changing reg in insn 472
changing reg in insn 471
changing reg in insn 473
changing reg in insn 482
changing reg in insn 483
changing reg in insn 487
changing reg in insn 488
changing reg in insn 495
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 489
changing reg in insn 496
changing reg in insn 494
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 503
changing reg in insn 504
changing reg in insn 506
changing reg in insn 507
changing reg in insn 508
changing reg in insn 509
changing reg in insn 511
changing reg in insn 525
changing reg in insn 526
changing reg in insn 527
changing reg in insn 528
changing reg in insn 530
changing reg in insn 531
changing reg in insn 534
changing reg in insn 535
changing reg in insn 537
changing reg in insn 538
changing reg in insn 540
changing reg in insn 541
changing reg in insn 544
changing reg in insn 545
changing reg in insn 549
changing reg in insn 550
changing reg in insn 556
changing reg in insn 557
changing reg in insn 559
changing reg in insn 560
changing reg in insn 561
changing reg in insn 563
changing reg in insn 562
changing reg in insn 564
changing reg in insn 572
changing reg in insn 573
changing reg in insn 577
changing reg in insn 578
changing reg in insn 585
changing reg in insn 583
changing reg in insn 582
changing reg in insn 581
changing reg in insn 580
changing reg in insn 579
changing reg in insn 586
changing reg in insn 584
changing reg in insn 583
changing reg in insn 582
changing reg in insn 581
changing reg in insn 580
changing reg in insn 584
changing reg in insn 585
changing reg in insn 587
changing reg in insn 593
changing reg in insn 594
changing reg in insn 596
changing reg in insn 597
changing reg in insn 598
changing reg in insn 600
changing reg in insn 599
changing reg in insn 601
deleting insn with uid = 54.
deleting insn with uid = 120.
deleting insn with uid = 334.
deleting insn with uid = 403.
deleting insn with uid = 427.
deleting insn with uid = 428.
deleting insn with uid = 429.
deleting insn with uid = 450.
deleting insn with uid = 451.
deleting insn with uid = 452.
deleting insn with uid = 473.
deleting insn with uid = 474.
deleting insn with uid = 475.
deleting insn with uid = 563.
deleting insn with uid = 564.
deleting insn with uid = 565.
deleting insn with uid = 600.
deleting insn with uid = 601.
deleting insn with uid = 602.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 272.
verify found no changes in insn with uid = 337.
verify found no changes in insn with uid = 367.
verify found no changes in insn with uid = 406.
verify found no changes in insn with uid = 431.
verify found no changes in insn with uid = 454.
verify found no changes in insn with uid = 477.
verify found no changes in insn with uid = 516.
verify found no changes in insn with uid = 567.
verify found no changes in insn with uid = 604.


int pre_process(int*, Preprocess*, Procpar_info*, float**, float**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 37[r8]
;;  ref usage 	r0={275d,263u} r1={71d,83u,47e} r2={27d,15u,4e} r4={24d,12u,2e} r5={25d,13u} r6={1d,191u} r7={1d,63u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={167d,24u} r18={12d} r19={12d} r20={1d,1u,38e} r21={55d,46u} r22={27d,14u} r23={15d,2u} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={15d,3u} r38={13d} r39={12d} r40={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} 
;;    total ref usage 2275{1454d,730u,91e} in 515{503 regular + 12 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
        (reg:DI 2 cx [ out_data ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
        (reg:DI 37 r8 [ scratch_data ])) ge2fitman_preproc.cpp:19 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 410 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:30 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              27 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 269
(code_label 410 10 11 3 19 "" [1 uses])
(note 11 410 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) ge2fitman_preproc.cpp:30 89 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:SI 0 ax [orig:87 D.25995 ] [87])
        (mem:SI (reg/f:DI 0 ax [269]) [0 *fid_27(D)+0 S4 A32])) ge2fitman_preproc.cpp:30 90 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.25995 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:30 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 413)
            (pc))) ge2fitman_preproc.cpp:30 612 {*jcc_1}
     (nil)
 -> 413)
;;  succ:       28
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 270 271 272 273 274 275 276 277 278 279 280
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:38 90 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 0 ax [orig:88 D.25996 ] [88])
        (sign_extend:DI (reg:SI 0 ax [270]))) ge2fitman_preproc.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 1 dx [orig:89 D.25996 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.25996 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:38 512 {*ashldi3_1}
     (nil))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.25997 ] [90])
                (plus:DI (reg/f:DI 0 ax [271])
                    (reg:DI 1 dx [orig:89 D.25996 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:38 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.25996 ] [89]))
        (nil)))
(insn 22 21 23 4 (set (reg/f:DI 0 ax [orig:91 D.25998 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 D.25997 ] [90]) [0 *_32+0 S8 A64])) ge2fitman_preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SF 21 xmm0 [orig:92 D.25999 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.25998 ] [91]) [0 *_33+0 S4 A32])) ge2fitman_preproc.cpp:38 129 {*movsf_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DF 22 xmm1 [orig:93 D.26000 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.25999 ] [92]))) ge2fitman_preproc.cpp:38 152 {*extendsfdf2_sse}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:38 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 0 ax [orig:94 D.25996 ] [94])
        (sign_extend:DI (reg:SI 0 ax [272]))) ge2fitman_preproc.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 1 dx [orig:95 D.25996 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.25996 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:38 512 {*ashldi3_1}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.25997 ] [96])
                (plus:DI (reg/f:DI 0 ax [273])
                    (reg:DI 1 dx [orig:95 D.25996 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:38 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.25996 ] [95]))
        (nil)))
(insn 30 29 31 4 (set (reg/f:DI 0 ax [orig:97 D.25998 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 D.25997 ] [96]) [0 *_38+0 S8 A64])) ge2fitman_preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SF 21 xmm0 [orig:98 D.25999 ] [98])
        (mem:SF (reg/f:DI 0 ax [orig:97 D.25998 ] [97]) [0 *_39+0 S4 A32])) ge2fitman_preproc.cpp:38 129 {*movsf_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DF 21 xmm0 [orig:99 D.26000 ] [99])
        (float_extend:DF (reg:SF 21 xmm0 [orig:98 D.25999 ] [98]))) ge2fitman_preproc.cpp:38 152 {*extendsfdf2_sse}
     (nil))
(insn 33 32 34 4 (set (reg:DF 22 xmm1 [orig:100 D.26000 ] [100])
        (mult:DF (reg:DF 22 xmm1 [orig:93 D.26000 ] [93])
            (reg:DF 21 xmm0 [orig:99 D.26000 ] [99]))) ge2fitman_preproc.cpp:38 798 {*fop_df_comm_sse}
     (nil))
(insn 34 33 35 4 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:39 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 0 ax [orig:101 D.25996 ] [101])
        (sign_extend:DI (reg:SI 0 ax [274]))) ge2fitman_preproc.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 1 dx [orig:102 D.25996 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.25996 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 512 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:39 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.25997 ] [103])
                (plus:DI (reg/f:DI 0 ax [275])
                    (reg:DI 1 dx [orig:102 D.25996 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.25996 ] [102]))
        (nil)))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [orig:104 D.25998 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.25997 ] [103]) [0 *_45+0 S8 A64])) ge2fitman_preproc.cpp:39 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.25998 ] [105])
                (plus:DI (reg/f:DI 0 ax [orig:104 D.25998 ] [104])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 218 {*adddi_1}
     (nil))
(insn 41 40 42 4 (set (reg:SF 21 xmm0 [orig:106 D.25999 ] [106])
        (mem:SF (reg/f:DI 0 ax [orig:105 D.25998 ] [105]) [0 *_47+0 S4 A32])) ge2fitman_preproc.cpp:39 129 {*movsf_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DF 23 xmm2 [orig:107 D.26000 ] [107])
        (float_extend:DF (reg:SF 21 xmm0 [orig:106 D.25999 ] [106]))) ge2fitman_preproc.cpp:39 152 {*extendsfdf2_sse}
     (nil))
(insn 43 42 44 4 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:39 90 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 0 ax [orig:108 D.25996 ] [108])
        (sign_extend:DI (reg:SI 0 ax [276]))) ge2fitman_preproc.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 1 dx [orig:109 D.25996 ] [109])
                (ashift:DI (reg:DI 0 ax [orig:108 D.25996 ] [108])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 512 {*ashldi3_1}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:39 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.25997 ] [110])
                (plus:DI (reg/f:DI 0 ax [277])
                    (reg:DI 1 dx [orig:109 D.25996 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:109 D.25996 ] [109]))
        (nil)))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [orig:111 D.25998 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [orig:110 D.25997 ] [110]) [0 *_52+0 S8 A64])) ge2fitman_preproc.cpp:39 89 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.25998 ] [112])
                (plus:DI (reg/f:DI 0 ax [orig:111 D.25998 ] [111])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:39 218 {*adddi_1}
     (nil))
(insn 50 49 51 4 (set (reg:SF 21 xmm0 [orig:113 D.25999 ] [113])
        (mem:SF (reg/f:DI 0 ax [orig:112 D.25998 ] [112]) [0 *_54+0 S4 A32])) ge2fitman_preproc.cpp:39 129 {*movsf_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DF 21 xmm0 [orig:114 D.26000 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.25999 ] [113]))) ge2fitman_preproc.cpp:39 152 {*extendsfdf2_sse}
     (nil))
(insn 52 51 53 4 (set (reg:DF 21 xmm0 [orig:115 D.26000 ] [115])
        (mult:DF (reg:DF 21 xmm0 [orig:114 D.26000 ] [114])
            (reg:DF 23 xmm2 [orig:107 D.26000 ] [107]))) ge2fitman_preproc.cpp:39 798 {*fop_df_comm_sse}
     (nil))
(insn 53 52 55 4 (set (reg:DF 21 xmm0 [orig:116 D.26000 ] [116])
        (plus:DF (reg:DF 21 xmm0 [orig:115 D.26000 ] [115])
            (reg:DF 22 xmm1 [orig:100 D.26000 ] [100]))) ge2fitman_preproc.cpp:38 798 {*fop_df_comm_sse}
     (nil))
(call_insn 55 53 56 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:39 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 56 55 57 4 (set (reg:DF 0 ax [278])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:39 128 {*movdf_internal}
     (nil))
(insn 57 56 58 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])
        (reg:DF 0 ax [278])) ge2fitman_preproc.cpp:39 128 {*movdf_internal}
     (nil))
(insn 58 57 59 4 (set (reg:DF 21 xmm0 [279])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) ge2fitman_preproc.cpp:40 128 {*movdf_internal}
     (nil))
(insn 59 58 60 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [279])) ge2fitman_preproc.cpp:40 128 {*movdf_internal}
     (nil))
(insn 60 59 61 4 (set (reg:DF 21 xmm0 [280])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:42 128 {*movdf_internal}
     (nil))
(insn 61 60 62 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [280])) ge2fitman_preproc.cpp:42 128 {*movdf_internal}
     (nil))
(insn 62 61 136 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
        (const_int 2 [0x2])) ge2fitman_preproc.cpp:46 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              8 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 136 62 63 5 6 "" [1 uses])
(note 63 136 64 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
            (const_int 48 [0x30]))) ge2fitman_preproc.cpp:46 7 {*cmpsi_1}
     (nil))
(jump_insn 65 64 66 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) ge2fitman_preproc.cpp:46 612 {*jcc_1}
     (nil)
 -> 139)
;;  succ:       9
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 281 282 283 284 285 286 287 288 289 290 291 292 293 294
(note 66 65 67 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 6 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:51 90 {*movsi_internal}
     (nil))
(insn 68 67 69 6 (set (reg:DI 0 ax [orig:117 D.25996 ] [117])
        (sign_extend:DI (reg:SI 0 ax [281]))) ge2fitman_preproc.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 6 (parallel [
            (set (reg:DI 1 dx [orig:118 D.25996 ] [118])
                (ashift:DI (reg:DI 0 ax [orig:117 D.25996 ] [117])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 6 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:51 89 {*movdi_internal}
     (nil))
(insn 71 70 72 6 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.25997 ] [119])
                (plus:DI (reg/f:DI 0 ax [282])
                    (reg:DI 1 dx [orig:118 D.25996 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.25996 ] [118]))
        (nil)))
(insn 72 71 73 6 (set (reg/f:DI 0 ax [orig:120 D.25998 ] [120])
        (mem/f:DI (reg/f:DI 0 ax [orig:119 D.25997 ] [119]) [0 *_66+0 S8 A64])) ge2fitman_preproc.cpp:51 89 {*movdi_internal}
     (nil))
(insn 73 72 74 6 (set (reg:SI 1 dx [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) ge2fitman_preproc.cpp:51 90 {*movsi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:DI 1 dx [orig:121 D.25996 ] [121])
        (sign_extend:DI (reg:SI 1 dx [283]))) ge2fitman_preproc.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 6 (parallel [
            (set (reg:DI 1 dx [orig:122 D.25996 ] [122])
                (ashift:DI (reg:DI 1 dx [orig:121 D.25996 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 512 {*ashldi3_1}
     (nil))
(insn 76 75 77 6 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.25998 ] [123])
                (plus:DI (reg/f:DI 0 ax [orig:120 D.25998 ] [120])
                    (reg:DI 1 dx [orig:122 D.25996 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 218 {*adddi_1}
     (nil))
(insn 77 76 78 6 (set (reg:SF 21 xmm0 [orig:124 D.25999 ] [124])
        (mem:SF (reg/f:DI 0 ax [orig:123 D.25998 ] [123]) [0 *_70+0 S4 A32])) ge2fitman_preproc.cpp:51 129 {*movsf_internal}
     (nil))
(insn 78 77 79 6 (set (reg:DF 22 xmm1 [orig:125 D.26000 ] [125])
        (float_extend:DF (reg:SF 21 xmm0 [orig:124 D.25999 ] [124]))) ge2fitman_preproc.cpp:51 152 {*extendsfdf2_sse}
     (nil))
(insn 79 78 80 6 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:51 90 {*movsi_internal}
     (nil))
(insn 80 79 81 6 (set (reg:DI 0 ax [orig:126 D.25996 ] [126])
        (sign_extend:DI (reg:SI 0 ax [284]))) ge2fitman_preproc.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 6 (parallel [
            (set (reg:DI 1 dx [orig:127 D.25996 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 D.25996 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 512 {*ashldi3_1}
     (nil))
(insn 82 81 83 6 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:51 89 {*movdi_internal}
     (nil))
(insn 83 82 84 6 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.25997 ] [128])
                (plus:DI (reg/f:DI 0 ax [285])
                    (reg:DI 1 dx [orig:127 D.25996 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.25996 ] [127]))
        (nil)))
(insn 84 83 85 6 (set (reg/f:DI 0 ax [orig:129 D.25998 ] [129])
        (mem/f:DI (reg/f:DI 0 ax [orig:128 D.25997 ] [128]) [0 *_75+0 S8 A64])) ge2fitman_preproc.cpp:51 89 {*movdi_internal}
     (nil))
(insn 85 84 86 6 (set (reg:SI 1 dx [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) ge2fitman_preproc.cpp:51 90 {*movsi_internal}
     (nil))
(insn 86 85 87 6 (set (reg:DI 1 dx [orig:130 D.25996 ] [130])
        (sign_extend:DI (reg:SI 1 dx [286]))) ge2fitman_preproc.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 87 86 88 6 (parallel [
            (set (reg:DI 1 dx [orig:131 D.25996 ] [131])
                (ashift:DI (reg:DI 1 dx [orig:130 D.25996 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 512 {*ashldi3_1}
     (nil))
(insn 88 87 89 6 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.25998 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:129 D.25998 ] [129])
                    (reg:DI 1 dx [orig:131 D.25996 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:51 218 {*adddi_1}
     (nil))
(insn 89 88 90 6 (set (reg:SF 21 xmm0 [orig:133 D.25999 ] [133])
        (mem:SF (reg/f:DI 0 ax [orig:132 D.25998 ] [132]) [0 *_79+0 S4 A32])) ge2fitman_preproc.cpp:51 129 {*movsf_internal}
     (nil))
(insn 90 89 91 6 (set (reg:DF 21 xmm0 [orig:134 D.26000 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.25999 ] [133]))) ge2fitman_preproc.cpp:51 152 {*extendsfdf2_sse}
     (nil))
(insn 91 90 92 6 (set (reg:DF 22 xmm1 [orig:135 D.26000 ] [135])
        (mult:DF (reg:DF 22 xmm1 [orig:125 D.26000 ] [125])
            (reg:DF 21 xmm0 [orig:134 D.26000 ] [134]))) ge2fitman_preproc.cpp:51 798 {*fop_df_comm_sse}
     (nil))
(insn 92 91 93 6 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:DI 0 ax [orig:136 D.25996 ] [136])
        (sign_extend:DI (reg:SI 0 ax [287]))) ge2fitman_preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg:DI 1 dx [orig:137 D.25996 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 D.25996 ] [136])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 512 {*ashldi3_1}
     (nil))
(insn 95 94 96 6 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 96 95 97 6 (parallel [
            (set (reg/f:DI 0 ax [orig:138 D.25997 ] [138])
                (plus:DI (reg/f:DI 0 ax [288])
                    (reg:DI 1 dx [orig:137 D.25996 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.25996 ] [137]))
        (nil)))
(insn 97 96 98 6 (set (reg/f:DI 0 ax [orig:139 D.25998 ] [139])
        (mem/f:DI (reg/f:DI 0 ax [orig:138 D.25997 ] [138]) [0 *_85+0 S8 A64])) ge2fitman_preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 98 97 99 6 (set (reg:SI 1 dx [289])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) ge2fitman_preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 99 98 100 6 (set (reg:DI 1 dx [orig:140 D.26001 ] [140])
        (sign_extend:DI (reg:SI 1 dx [289]))) ge2fitman_preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 6 (parallel [
            (set (reg:DI 1 dx [orig:141 D.26001 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 D.26001 ] [140])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 218 {*adddi_1}
     (nil))
(insn 101 100 102 6 (parallel [
            (set (reg:DI 1 dx [orig:142 D.26001 ] [142])
                (ashift:DI (reg:DI 1 dx [orig:141 D.26001 ] [141])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 512 {*ashldi3_1}
     (nil))
(insn 102 101 103 6 (parallel [
            (set (reg/f:DI 0 ax [orig:143 D.25998 ] [143])
                (plus:DI (reg/f:DI 0 ax [orig:139 D.25998 ] [139])
                    (reg:DI 1 dx [orig:142 D.26001 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 218 {*adddi_1}
     (nil))
(insn 103 102 104 6 (set (reg:SF 21 xmm0 [orig:144 D.25999 ] [144])
        (mem:SF (reg/f:DI 0 ax [orig:143 D.25998 ] [143]) [0 *_90+0 S4 A32])) ge2fitman_preproc.cpp:52 129 {*movsf_internal}
     (nil))
(insn 104 103 105 6 (set (reg:DF 23 xmm2 [orig:145 D.26000 ] [145])
        (float_extend:DF (reg:SF 21 xmm0 [orig:144 D.25999 ] [144]))) ge2fitman_preproc.cpp:52 152 {*extendsfdf2_sse}
     (nil))
(insn 105 104 106 6 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 106 105 107 6 (set (reg:DI 0 ax [orig:146 D.25996 ] [146])
        (sign_extend:DI (reg:SI 0 ax [290]))) ge2fitman_preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 6 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25996 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:146 D.25996 ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 512 {*ashldi3_1}
     (nil))
(insn 108 107 109 6 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 109 108 110 6 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.25997 ] [148])
                (plus:DI (reg/f:DI 0 ax [291])
                    (reg:DI 1 dx [orig:147 D.25996 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.25996 ] [147]))
        (nil)))
(insn 110 109 111 6 (set (reg/f:DI 0 ax [orig:149 D.25998 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [orig:148 D.25997 ] [148]) [0 *_95+0 S8 A64])) ge2fitman_preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 111 110 112 6 (set (reg:SI 1 dx [292])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) ge2fitman_preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 112 111 113 6 (set (reg:DI 1 dx [orig:150 D.26001 ] [150])
        (sign_extend:DI (reg:SI 1 dx [292]))) ge2fitman_preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 6 (parallel [
            (set (reg:DI 1 dx [orig:151 D.26001 ] [151])
                (plus:DI (reg:DI 1 dx [orig:150 D.26001 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 218 {*adddi_1}
     (nil))
(insn 114 113 115 6 (parallel [
            (set (reg:DI 1 dx [orig:152 D.26001 ] [152])
                (ashift:DI (reg:DI 1 dx [orig:151 D.26001 ] [151])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 512 {*ashldi3_1}
     (nil))
(insn 115 114 116 6 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.25998 ] [153])
                (plus:DI (reg/f:DI 0 ax [orig:149 D.25998 ] [149])
                    (reg:DI 1 dx [orig:152 D.26001 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:52 218 {*adddi_1}
     (nil))
(insn 116 115 117 6 (set (reg:SF 21 xmm0 [orig:154 D.25999 ] [154])
        (mem:SF (reg/f:DI 0 ax [orig:153 D.25998 ] [153]) [0 *_100+0 S4 A32])) ge2fitman_preproc.cpp:52 129 {*movsf_internal}
     (nil))
(insn 117 116 118 6 (set (reg:DF 21 xmm0 [orig:155 D.26000 ] [155])
        (float_extend:DF (reg:SF 21 xmm0 [orig:154 D.25999 ] [154]))) ge2fitman_preproc.cpp:52 152 {*extendsfdf2_sse}
     (nil))
(insn 118 117 119 6 (set (reg:DF 21 xmm0 [orig:156 D.26000 ] [156])
        (mult:DF (reg:DF 21 xmm0 [orig:155 D.26000 ] [155])
            (reg:DF 23 xmm2 [orig:145 D.26000 ] [145]))) ge2fitman_preproc.cpp:52 798 {*fop_df_comm_sse}
     (nil))
(insn 119 118 121 6 (set (reg:DF 21 xmm0 [orig:157 D.26000 ] [157])
        (plus:DF (reg:DF 21 xmm0 [orig:156 D.26000 ] [156])
            (reg:DF 22 xmm1 [orig:135 D.26000 ] [135]))) ge2fitman_preproc.cpp:51 798 {*fop_df_comm_sse}
     (nil))
(call_insn 121 119 122 6 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:52 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 122 121 123 6 (set (reg:DF 0 ax [293])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:52 128 {*movdf_internal}
     (nil))
(insn 123 122 124 6 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])
        (reg:DF 0 ax [293])) ge2fitman_preproc.cpp:52 128 {*movdf_internal}
     (nil))
(insn 124 123 125 6 (set (reg:DF 21 xmm0 [294])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) ge2fitman_preproc.cpp:53 128 {*movdf_internal}
     (nil))
(insn 125 124 126 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [294])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) ge2fitman_preproc.cpp:53 56 {*cmpiudf_sse}
     (nil))
(jump_insn 126 125 130 6 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 133)
            (pc))) ge2fitman_preproc.cpp:53 612 {*jcc_1}
     (nil)
 -> 133)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 295
(note 130 126 131 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 7 (set (reg:DF 21 xmm0 [295])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) ge2fitman_preproc.cpp:54 128 {*movdf_internal}
     (nil))
(insn 132 131 133 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [295])) ge2fitman_preproc.cpp:54 128 {*movdf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 133 132 134 8 4 "" [1 uses])
(note 134 133 135 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 135 134 641 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:46 217 {*addsi_1}
     (nil))
(jump_insn 641 135 642 8 (set (pc)
        (label_ref 136)) ge2fitman_preproc.cpp:46 654 {jump}
     (nil)
 -> 136)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 642 641 139)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 160 161 296 297 298 299
(code_label 139 642 140 9 3 "" [1 uses])
(note 140 139 141 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 9 (set (reg:SI 0 ax [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:58 90 {*movsi_internal}
     (nil))
(insn 142 141 143 9 (set (reg:DI 1 dx [orig:158 D.25996 ] [158])
        (sign_extend:DI (reg:SI 0 ax [296]))) ge2fitman_preproc.cpp:58 142 {*extendsidi2_rex64}
     (nil))
(insn 143 142 144 9 (set (reg:DI 0 ax [297])
        (reg:DI 1 dx [orig:158 D.25996 ] [158])) ge2fitman_preproc.cpp:58 89 {*movdi_internal}
     (nil))
(insn 144 143 145 9 (parallel [
            (set (reg:DI 0 ax [297])
                (ashift:DI (reg:DI 0 ax [297])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 512 {*ashldi3_1}
     (nil))
(insn 145 144 146 9 (parallel [
            (set (reg:DI 0 ax [297])
                (plus:DI (reg:DI 0 ax [297])
                    (reg:DI 1 dx [orig:158 D.25996 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:158 D.25996 ] [158])
            (const_int 9 [0x9]))
        (nil)))
(insn 146 145 147 9 (parallel [
            (set (reg:DI 0 ax [297])
                (ashift:DI (reg:DI 0 ax [297])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 512 {*ashldi3_1}
     (nil))
(insn 147 146 148 9 (parallel [
            (set (reg:DI 0 ax [297])
                (plus:DI (reg:DI 0 ax [297])
                    (reg:DI 1 dx [orig:158 D.25996 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:158 D.25996 ] [158])
            (const_int 19 [0x13]))
        (nil)))
(insn 148 147 149 9 (parallel [
            (set (reg:DI 0 ax [298])
                (ashift:DI (reg:DI 0 ax [297])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 512 {*ashldi3_1}
     (nil))
(insn 149 148 150 9 (set (reg:DI 0 ax [297])
        (reg:DI 0 ax [298])) ge2fitman_preproc.cpp:58 89 {*movdi_internal}
     (nil))
(insn 150 149 151 9 (set (reg:DI 1 dx [orig:159 D.25996 ] [159])
        (reg:DI 0 ax [297])) ge2fitman_preproc.cpp:58 89 {*movdi_internal}
     (nil))
(insn 151 150 152 9 (set (reg/f:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:58 89 {*movdi_internal}
     (nil))
(insn 152 151 153 9 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.26002 ] [160])
                (plus:DI (reg/f:DI 0 ax [299])
                    (reg:DI 1 dx [orig:159 D.25996 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:58 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.25996 ] [159]))
        (nil)))
(insn 153 152 154 9 (set (reg:SI 0 ax [orig:161 D.25995 ] [161])
        (mem/j:SI (reg/f:DI 0 ax [orig:160 D.26002 ] [160]) [0 _112->fid_scale+0 S4 A32])) ge2fitman_preproc.cpp:58 90 {*movsi_internal}
     (nil))
(insn 154 153 155 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:161 D.25995 ] [161])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:58 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 155 154 156 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 259)
            (pc))) ge2fitman_preproc.cpp:58 612 {*jcc_1}
     (nil)
 -> 259)
;;  succ:       10 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 300
(note 156 155 157 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 157 156 158 10 (set (reg:DF 21 xmm0 [300])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:63 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 158 157 159 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [300])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) ge2fitman_preproc.cpp:63 56 {*cmpiudf_sse}
     (nil))
(jump_insn 159 158 626 10 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 643)
            (pc))) ge2fitman_preproc.cpp:63 612 {*jcc_1}
     (nil)
 -> 643)
;;  succ:       11 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 626 159 205 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 301
(code_label 205 626 163 12 11 "" [1 uses])
(note 163 205 164 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 12 (set (reg:DF 21 xmm0 [301])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:64 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 165 164 166 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [301])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) ge2fitman_preproc.cpp:64 56 {*cmpiudf_sse}
     (nil))
(jump_insn 166 165 627 12 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 638)
            (pc))) ge2fitman_preproc.cpp:64 612 {*jcc_1}
     (nil)
 -> 638)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 627 166 644 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(jump_insn 644 627 645 13 (set (pc)
        (label_ref 259)) 654 {jump}
     (nil)
 -> 259)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 645 644 638)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 170 171 172 173 174 175 176 177 302 303 304 305 306 307 308 309 310 311 312 313 314
(code_label 638 645 170 14 33 "" [1 uses])
(note 170 638 171 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 171 170 172 14 (set (reg:DF 21 xmm0 [302])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:71 128 {*movdf_internal}
     (nil))
(insn 172 171 173 14 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [302])) ge2fitman_preproc.cpp:71 128 {*movdf_internal}
     (nil))
(insn 173 172 174 14 (set (reg:DF 22 xmm1 [304])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:73 128 {*movdf_internal}
     (nil))
(insn 174 173 175 14 (set (reg:DF 21 xmm0 [305])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:73 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 175 174 176 14 (set (reg:DF 21 xmm0 [303])
        (mult:DF (reg:DF 21 xmm0 [305])
            (reg:DF 22 xmm1 [304]))) ge2fitman_preproc.cpp:73 798 {*fop_df_comm_sse}
     (nil))
(insn 176 175 177 14 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [303])) ge2fitman_preproc.cpp:73 128 {*movdf_internal}
     (nil))
(insn 177 176 178 14 (set (reg:SI 0 ax [306])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:74 90 {*movsi_internal}
     (nil))
(insn 178 177 179 14 (set (reg:DI 1 dx [orig:170 D.25996 ] [170])
        (sign_extend:DI (reg:SI 0 ax [306]))) ge2fitman_preproc.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 179 178 180 14 (set (reg:DI 0 ax [307])
        (reg:DI 1 dx [orig:170 D.25996 ] [170])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 180 179 181 14 (parallel [
            (set (reg:DI 0 ax [307])
                (ashift:DI (reg:DI 0 ax [307])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 181 180 182 14 (parallel [
            (set (reg:DI 0 ax [307])
                (plus:DI (reg:DI 0 ax [307])
                    (reg:DI 1 dx [orig:170 D.25996 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:170 D.25996 ] [170])
            (const_int 9 [0x9]))
        (nil)))
(insn 182 181 183 14 (parallel [
            (set (reg:DI 0 ax [307])
                (ashift:DI (reg:DI 0 ax [307])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 183 182 184 14 (parallel [
            (set (reg:DI 0 ax [307])
                (plus:DI (reg:DI 0 ax [307])
                    (reg:DI 1 dx [orig:170 D.25996 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:170 D.25996 ] [170])
            (const_int 19 [0x13]))
        (nil)))
(insn 184 183 185 14 (parallel [
            (set (reg:DI 0 ax [308])
                (ashift:DI (reg:DI 0 ax [307])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 185 184 186 14 (set (reg:DI 0 ax [307])
        (reg:DI 0 ax [308])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 186 185 187 14 (set (reg:DI 1 dx [orig:171 D.25996 ] [171])
        (reg:DI 0 ax [307])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 187 186 188 14 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 188 187 189 14 (parallel [
            (set (reg/f:DI 2 cx [orig:172 D.26002 ] [172])
                (plus:DI (reg:DI 1 dx [orig:171 D.25996 ] [171])
                    (reg/f:DI 0 ax [309])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:171 D.25996 ] [171]))
        (nil)))
(insn 189 188 190 14 (set (reg:SI 0 ax [310])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:74 90 {*movsi_internal}
     (nil))
(insn 190 189 191 14 (set (reg:DI 1 dx [orig:173 D.25996 ] [173])
        (sign_extend:DI (reg:SI 0 ax [310]))) ge2fitman_preproc.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 191 190 192 14 (set (reg:DI 0 ax [311])
        (reg:DI 1 dx [orig:173 D.25996 ] [173])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 192 191 193 14 (parallel [
            (set (reg:DI 0 ax [311])
                (ashift:DI (reg:DI 0 ax [311])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 193 192 194 14 (parallel [
            (set (reg:DI 0 ax [311])
                (plus:DI (reg:DI 0 ax [311])
                    (reg:DI 1 dx [orig:173 D.25996 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:173 D.25996 ] [173])
            (const_int 9 [0x9]))
        (nil)))
(insn 194 193 195 14 (parallel [
            (set (reg:DI 0 ax [311])
                (ashift:DI (reg:DI 0 ax [311])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 195 194 196 14 (parallel [
            (set (reg:DI 0 ax [311])
                (plus:DI (reg:DI 0 ax [311])
                    (reg:DI 1 dx [orig:173 D.25996 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:173 D.25996 ] [173])
            (const_int 19 [0x13]))
        (nil)))
(insn 196 195 197 14 (parallel [
            (set (reg:DI 0 ax [312])
                (ashift:DI (reg:DI 0 ax [311])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 197 196 198 14 (set (reg:DI 0 ax [311])
        (reg:DI 0 ax [312])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 198 197 199 14 (set (reg:DI 1 dx [orig:174 D.25996 ] [174])
        (reg:DI 0 ax [311])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 199 198 200 14 (set (reg/f:DI 0 ax [313])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:74 89 {*movdi_internal}
     (nil))
(insn 200 199 201 14 (parallel [
            (set (reg/f:DI 0 ax [orig:175 D.26002 ] [175])
                (plus:DI (reg/f:DI 0 ax [313])
                    (reg:DI 1 dx [orig:174 D.25996 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:174 D.25996 ] [174]))
        (nil)))
(insn 201 200 202 14 (set (reg:SF 22 xmm1 [orig:176 D.25999 ] [176])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:175 D.26002 ] [175])
                (const_int 4 [0x4])) [0 _131->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:74 129 {*movsf_internal}
     (nil))
(insn 202 201 203 14 (set (reg:SF 21 xmm0 [314])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:74 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 203 202 204 14 (set (reg:SF 21 xmm0 [orig:177 D.25999 ] [177])
        (mult:SF (reg:SF 21 xmm0 [314])
            (reg:SF 22 xmm1 [orig:176 D.25999 ] [176]))) ge2fitman_preproc.cpp:74 797 {*fop_sf_comm_sse}
     (nil))
(insn 204 203 646 14 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:172 D.26002 ] [172])
                (const_int 4 [0x4])) [0 _128->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [orig:177 D.25999 ] [177])) ge2fitman_preproc.cpp:74 129 {*movsf_internal}
     (nil))
(jump_insn 646 204 647 14 (set (pc)
        (label_ref 205)) ge2fitman_preproc.cpp:64 654 {jump}
     (nil)
 -> 205)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 647 646 643)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 315
(code_label 643 647 209 15 36 "" [1 uses])
(note 209 643 210 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 15 (set (reg:DF 21 xmm0 [315])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:76 128 {*movdf_internal}
     (nil))
(insn 211 210 212 15 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [315])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64]))) ge2fitman_preproc.cpp:76 56 {*cmpiudf_sse}
     (nil))
(jump_insn 212 211 629 15 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 215)
            (pc))) ge2fitman_preproc.cpp:76 612 {*jcc_1}
     (nil)
 -> 215)
;;  succ:       17
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 629 212 648 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(jump_insn 648 629 649 16 (set (pc)
        (label_ref 259)) 654 {jump}
     (nil)
 -> 259)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 649 648 215)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 215 649 630 17 12 "" [1 uses])
(note 630 215 256 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              20 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 316
(code_label 256 630 216 18 14 "" [1 uses])
(note 216 256 217 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 217 216 218 18 (set (reg:DF 21 xmm0 [316])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:77 128 {*movdf_internal}
     (nil))
(insn 218 217 219 18 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [316])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64]))) ge2fitman_preproc.cpp:77 56 {*cmpiudf_sse}
     (nil))
(jump_insn 219 218 631 18 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 639)
            (pc))) ge2fitman_preproc.cpp:77 612 {*jcc_1}
     (nil)
 -> 639)
;;  succ:       20
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 631 219 650 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(jump_insn 650 631 651 19 (set (pc)
        (label_ref 259)) 654 {jump}
     (nil)
 -> 259)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 651 650 639)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 163 164 165 166 167 168 169 317 318 319 320 321 322 323 324 325 326 327 328
(code_label 639 651 223 20 34 "" [1 uses])
(note 223 639 224 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 20 (set (reg:DF 21 xmm0 [318])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:78 128 {*movdf_internal}
     (nil))
(insn 225 224 226 20 (set (reg:DF 22 xmm1 [319])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:78 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 226 225 227 20 (set (reg:DF 21 xmm0 [317])
        (div:DF (reg:DF 21 xmm0 [318])
            (reg:DF 22 xmm1 [319]))) ge2fitman_preproc.cpp:78 805 {*fop_df_1_sse}
     (nil))
(insn 227 226 228 20 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [317])) ge2fitman_preproc.cpp:78 128 {*movdf_internal}
     (nil))
(insn 228 227 229 20 (set (reg:SI 0 ax [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:79 90 {*movsi_internal}
     (nil))
(insn 229 228 230 20 (set (reg:DI 1 dx [orig:162 D.25996 ] [162])
        (sign_extend:DI (reg:SI 0 ax [320]))) ge2fitman_preproc.cpp:79 142 {*extendsidi2_rex64}
     (nil))
(insn 230 229 231 20 (set (reg:DI 0 ax [321])
        (reg:DI 1 dx [orig:162 D.25996 ] [162])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 231 230 232 20 (parallel [
            (set (reg:DI 0 ax [321])
                (ashift:DI (reg:DI 0 ax [321])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 232 231 233 20 (parallel [
            (set (reg:DI 0 ax [321])
                (plus:DI (reg:DI 0 ax [321])
                    (reg:DI 1 dx [orig:162 D.25996 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:162 D.25996 ] [162])
            (const_int 9 [0x9]))
        (nil)))
(insn 233 232 234 20 (parallel [
            (set (reg:DI 0 ax [321])
                (ashift:DI (reg:DI 0 ax [321])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 234 233 235 20 (parallel [
            (set (reg:DI 0 ax [321])
                (plus:DI (reg:DI 0 ax [321])
                    (reg:DI 1 dx [orig:162 D.25996 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:162 D.25996 ] [162])
            (const_int 19 [0x13]))
        (nil)))
(insn 235 234 236 20 (parallel [
            (set (reg:DI 0 ax [322])
                (ashift:DI (reg:DI 0 ax [321])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 236 235 237 20 (set (reg:DI 0 ax [321])
        (reg:DI 0 ax [322])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 237 236 238 20 (set (reg:DI 1 dx [orig:163 D.25996 ] [163])
        (reg:DI 0 ax [321])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 238 237 239 20 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 239 238 240 20 (parallel [
            (set (reg/f:DI 2 cx [orig:164 D.26002 ] [164])
                (plus:DI (reg:DI 1 dx [orig:163 D.25996 ] [163])
                    (reg/f:DI 0 ax [323])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:163 D.25996 ] [163]))
        (nil)))
(insn 240 239 241 20 (set (reg:SI 0 ax [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:79 90 {*movsi_internal}
     (nil))
(insn 241 240 242 20 (set (reg:DI 1 dx [orig:165 D.25996 ] [165])
        (sign_extend:DI (reg:SI 0 ax [324]))) ge2fitman_preproc.cpp:79 142 {*extendsidi2_rex64}
     (nil))
(insn 242 241 243 20 (set (reg:DI 0 ax [325])
        (reg:DI 1 dx [orig:165 D.25996 ] [165])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 243 242 244 20 (parallel [
            (set (reg:DI 0 ax [325])
                (ashift:DI (reg:DI 0 ax [325])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 244 243 245 20 (parallel [
            (set (reg:DI 0 ax [325])
                (plus:DI (reg:DI 0 ax [325])
                    (reg:DI 1 dx [orig:165 D.25996 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:165 D.25996 ] [165])
            (const_int 9 [0x9]))
        (nil)))
(insn 245 244 246 20 (parallel [
            (set (reg:DI 0 ax [325])
                (ashift:DI (reg:DI 0 ax [325])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 246 245 247 20 (parallel [
            (set (reg:DI 0 ax [325])
                (plus:DI (reg:DI 0 ax [325])
                    (reg:DI 1 dx [orig:165 D.25996 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:165 D.25996 ] [165])
            (const_int 19 [0x13]))
        (nil)))
(insn 247 246 248 20 (parallel [
            (set (reg:DI 0 ax [326])
                (ashift:DI (reg:DI 0 ax [325])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 248 247 249 20 (set (reg:DI 0 ax [325])
        (reg:DI 0 ax [326])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 249 248 250 20 (set (reg:DI 1 dx [orig:166 D.25996 ] [166])
        (reg:DI 0 ax [325])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 250 249 251 20 (set (reg/f:DI 0 ax [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:79 89 {*movdi_internal}
     (nil))
(insn 251 250 252 20 (parallel [
            (set (reg/f:DI 0 ax [orig:167 D.26002 ] [167])
                (plus:DI (reg/f:DI 0 ax [327])
                    (reg:DI 1 dx [orig:166 D.25996 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.25996 ] [166]))
        (nil)))
(insn 252 251 253 20 (set (reg:SF 21 xmm0 [orig:168 D.25999 ] [168])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:167 D.26002 ] [167])
                (const_int 4 [0x4])) [0 _120->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:79 129 {*movsf_internal}
     (nil))
(insn 253 252 254 20 (set (reg:SF 22 xmm1 [328])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:79 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 254 253 255 20 (set (reg:SF 21 xmm0 [orig:169 D.25999 ] [169])
        (div:SF (reg:SF 21 xmm0 [orig:168 D.25999 ] [168])
            (reg:SF 22 xmm1 [328]))) ge2fitman_preproc.cpp:79 804 {*fop_sf_1_sse}
     (nil))
(insn 255 254 652 20 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:164 D.26002 ] [164])
                (const_int 4 [0x4])) [0 _117->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [orig:169 D.25999 ] [169])) ge2fitman_preproc.cpp:79 129 {*movsf_internal}
     (nil))
(jump_insn 652 255 653 20 (set (pc)
        (label_ref 256)) ge2fitman_preproc.cpp:77 654 {jump}
     (nil)
 -> 256)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 653 652 259)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;;              19 [100.0%] 
;;              16 [100.0%] 
;;              13 [100.0%] 
;;              22 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 329
(code_label 259 653 260 21 7 "" [5 uses])
(note 260 259 261 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 261 260 262 21 (set (reg:DF 21 xmm0 [329])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:88 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 262 261 263 21 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [329])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) ge2fitman_preproc.cpp:88 56 {*cmpiudf_sse}
     (nil))
(jump_insn 263 262 267 21 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 654)
            (pc))) ge2fitman_preproc.cpp:88 612 {*jcc_1}
     (nil)
 -> 654)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 178 179 180 181 182 183 184 185 330 331 332 333 334 335 336 337 338 339 340 341 342 343
(note 267 263 268 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 268 267 269 22 (set (reg:DF 0 ax [330])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:92 128 {*movdf_internal}
     (nil))
(insn 269 268 664 22 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A64])
        (reg:DF 0 ax [330])) ge2fitman_preproc.cpp:92 128 {*movdf_internal}
     (nil))
(insn 664 269 270 22 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 %sfp+-80 S8 A64])) ge2fitman_preproc.cpp:92 128 {*movdf_internal}
     (nil))
(insn 270 664 271 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fe355947ab0 *.LC4>)) ge2fitman_preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 271 270 272 22 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:92 93 {*movqi_internal}
     (nil))
(call_insn 272 271 273 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fe3570c75e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:92 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 21 xmm0))
                (nil)))))
(insn 273 272 274 22 (set (reg:DF 21 xmm0 [331])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:95 128 {*movdf_internal}
     (nil))
(insn 274 273 275 22 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [331])) ge2fitman_preproc.cpp:95 128 {*movdf_internal}
     (nil))
(insn 275 274 276 22 (set (reg:DF 22 xmm1 [333])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) ge2fitman_preproc.cpp:97 128 {*movdf_internal}
     (nil))
(insn 276 275 277 22 (set (reg:DF 21 xmm0 [334])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:97 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 277 276 278 22 (set (reg:DF 21 xmm0 [332])
        (mult:DF (reg:DF 21 xmm0 [334])
            (reg:DF 22 xmm1 [333]))) ge2fitman_preproc.cpp:97 798 {*fop_df_comm_sse}
     (nil))
(insn 278 277 279 22 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [332])) ge2fitman_preproc.cpp:97 128 {*movdf_internal}
     (nil))
(insn 279 278 280 22 (set (reg:SI 0 ax [335])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:98 90 {*movsi_internal}
     (nil))
(insn 280 279 281 22 (set (reg:DI 1 dx [orig:178 D.25996 ] [178])
        (sign_extend:DI (reg:SI 0 ax [335]))) ge2fitman_preproc.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 281 280 282 22 (set (reg:DI 0 ax [336])
        (reg:DI 1 dx [orig:178 D.25996 ] [178])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 282 281 283 22 (parallel [
            (set (reg:DI 0 ax [336])
                (ashift:DI (reg:DI 0 ax [336])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 512 {*ashldi3_1}
     (nil))
(insn 283 282 284 22 (parallel [
            (set (reg:DI 0 ax [336])
                (plus:DI (reg:DI 0 ax [336])
                    (reg:DI 1 dx [orig:178 D.25996 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:178 D.25996 ] [178])
            (const_int 9 [0x9]))
        (nil)))
(insn 284 283 285 22 (parallel [
            (set (reg:DI 0 ax [336])
                (ashift:DI (reg:DI 0 ax [336])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 512 {*ashldi3_1}
     (nil))
(insn 285 284 286 22 (parallel [
            (set (reg:DI 0 ax [336])
                (plus:DI (reg:DI 0 ax [336])
                    (reg:DI 1 dx [orig:178 D.25996 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:178 D.25996 ] [178])
            (const_int 19 [0x13]))
        (nil)))
(insn 286 285 287 22 (parallel [
            (set (reg:DI 0 ax [337])
                (ashift:DI (reg:DI 0 ax [336])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 512 {*ashldi3_1}
     (nil))
(insn 287 286 288 22 (set (reg:DI 0 ax [336])
        (reg:DI 0 ax [337])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 288 287 289 22 (set (reg:DI 1 dx [orig:179 D.25996 ] [179])
        (reg:DI 0 ax [336])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 289 288 290 22 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 290 289 291 22 (parallel [
            (set (reg/f:DI 2 cx [orig:180 D.26002 ] [180])
                (plus:DI (reg:DI 1 dx [orig:179 D.25996 ] [179])
                    (reg/f:DI 0 ax [338])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:179 D.25996 ] [179]))
        (nil)))
(insn 291 290 292 22 (set (reg:SI 0 ax [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:98 90 {*movsi_internal}
     (nil))
(insn 292 291 293 22 (set (reg:DI 1 dx [orig:181 D.25996 ] [181])
        (sign_extend:DI (reg:SI 0 ax [339]))) ge2fitman_preproc.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 293 292 294 22 (set (reg:DI 0 ax [340])
        (reg:DI 1 dx [orig:181 D.25996 ] [181])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 294 293 295 22 (parallel [
            (set (reg:DI 0 ax [340])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 512 {*ashldi3_1}
     (nil))
(insn 295 294 296 22 (parallel [
            (set (reg:DI 0 ax [340])
                (plus:DI (reg:DI 0 ax [340])
                    (reg:DI 1 dx [orig:181 D.25996 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:181 D.25996 ] [181])
            (const_int 9 [0x9]))
        (nil)))
(insn 296 295 297 22 (parallel [
            (set (reg:DI 0 ax [340])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 512 {*ashldi3_1}
     (nil))
(insn 297 296 298 22 (parallel [
            (set (reg:DI 0 ax [340])
                (plus:DI (reg:DI 0 ax [340])
                    (reg:DI 1 dx [orig:181 D.25996 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:181 D.25996 ] [181])
            (const_int 19 [0x13]))
        (nil)))
(insn 298 297 299 22 (parallel [
            (set (reg:DI 0 ax [341])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 512 {*ashldi3_1}
     (nil))
(insn 299 298 300 22 (set (reg:DI 0 ax [340])
        (reg:DI 0 ax [341])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 300 299 301 22 (set (reg:DI 1 dx [orig:182 D.25996 ] [182])
        (reg:DI 0 ax [340])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 301 300 302 22 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 302 301 303 22 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.26002 ] [183])
                (plus:DI (reg/f:DI 0 ax [342])
                    (reg:DI 1 dx [orig:182 D.25996 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.25996 ] [182]))
        (nil)))
(insn 303 302 304 22 (set (reg:SF 22 xmm1 [orig:184 D.25999 ] [184])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:183 D.26002 ] [183])
                (const_int 4 [0x4])) [0 _143->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:98 129 {*movsf_internal}
     (nil))
(insn 304 303 305 22 (set (reg:SF 21 xmm0 [343])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:98 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 305 304 306 22 (set (reg:SF 21 xmm0 [orig:185 D.25999 ] [185])
        (mult:SF (reg:SF 21 xmm0 [343])
            (reg:SF 22 xmm1 [orig:184 D.25999 ] [184]))) ge2fitman_preproc.cpp:98 797 {*fop_sf_comm_sse}
     (nil))
(insn 306 305 655 22 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:180 D.26002 ] [180])
                (const_int 4 [0x4])) [0 _140->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [orig:185 D.25999 ] [185])) ge2fitman_preproc.cpp:98 129 {*movsf_internal}
     (nil))
(jump_insn 655 306 656 22 (set (pc)
        (label_ref 259)) ge2fitman_preproc.cpp:88 654 {jump}
     (nil)
 -> 259)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 656 655 654)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 186 187 188 189 190 191 192 193 194 195 196 197 198 199 344 345 346 347 348 349 350 351 352 353 354 355
(code_label 654 656 310 23 37 "" [1 uses])
(note 310 654 311 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 311 310 312 23 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:101 90 {*movsi_internal}
     (nil))
(insn 312 311 313 23 (set (reg:DI 1 dx [orig:186 D.25996 ] [186])
        (sign_extend:DI (reg:SI 0 ax [344]))) ge2fitman_preproc.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 313 312 314 23 (set (reg:DI 0 ax [345])
        (reg:DI 1 dx [orig:186 D.25996 ] [186])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 314 313 315 23 (parallel [
            (set (reg:DI 0 ax [345])
                (ashift:DI (reg:DI 0 ax [345])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 512 {*ashldi3_1}
     (nil))
(insn 315 314 316 23 (parallel [
            (set (reg:DI 0 ax [345])
                (plus:DI (reg:DI 0 ax [345])
                    (reg:DI 1 dx [orig:186 D.25996 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:186 D.25996 ] [186])
            (const_int 9 [0x9]))
        (nil)))
(insn 316 315 317 23 (parallel [
            (set (reg:DI 0 ax [345])
                (ashift:DI (reg:DI 0 ax [345])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 512 {*ashldi3_1}
     (nil))
(insn 317 316 318 23 (parallel [
            (set (reg:DI 0 ax [345])
                (plus:DI (reg:DI 0 ax [345])
                    (reg:DI 1 dx [orig:186 D.25996 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:186 D.25996 ] [186])
            (const_int 19 [0x13]))
        (nil)))
(insn 318 317 319 23 (parallel [
            (set (reg:DI 0 ax [346])
                (ashift:DI (reg:DI 0 ax [345])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 512 {*ashldi3_1}
     (nil))
(insn 319 318 320 23 (set (reg:DI 0 ax [345])
        (reg:DI 0 ax [346])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 320 319 321 23 (set (reg:DI 1 dx [orig:187 D.25996 ] [187])
        (reg:DI 0 ax [345])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 321 320 322 23 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 322 321 323 23 (parallel [
            (set (reg/f:DI 1 dx [orig:188 D.26002 ] [188])
                (plus:DI (reg:DI 1 dx [orig:187 D.25996 ] [187])
                    (reg/f:DI 0 ax [347])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:187 D.25996 ] [187]))
        (nil)))
(insn 323 322 324 23 (set (reg:SI 0 ax [348])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:101 90 {*movsi_internal}
     (nil))
(insn 324 323 665 23 (set (reg:DI 0 ax [orig:189 D.25996 ] [189])
        (sign_extend:DI (reg:SI 0 ax [348]))) ge2fitman_preproc.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 665 324 325 23 (set (reg:DI 0 ax [orig:190 D.25996 ] [190])
        (reg:DI 0 ax [orig:189 D.25996 ] [189])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 325 665 666 23 (parallel [
            (set (reg:DI 0 ax [orig:190 D.25996 ] [190])
                (ashift:DI (reg:DI 0 ax [orig:190 D.25996 ] [190])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 512 {*ashldi3_1}
     (nil))
(insn 666 325 326 23 (set (reg:DI 2 cx [orig:190 D.25996 ] [190])
        (reg:DI 0 ax [orig:190 D.25996 ] [190])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 326 666 327 23 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 327 326 328 23 (parallel [
            (set (reg/f:DI 2 cx [orig:191 D.26003 ] [191])
                (plus:DI (reg:DI 2 cx [orig:190 D.25996 ] [190])
                    (reg/f:DI 0 ax [349])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 2 cx [orig:190 D.25996 ] [190]))
        (nil)))
(insn 328 327 329 23 (set (reg:SI 0 ax [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:101 90 {*movsi_internal}
     (nil))
(insn 329 328 330 23 (set (reg:DI 0 ax [orig:192 D.25996 ] [192])
        (sign_extend:DI (reg:SI 0 ax [350]))) ge2fitman_preproc.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 330 329 331 23 (parallel [
            (set (reg:DI 4 si [orig:193 D.25996 ] [193])
                (ashift:DI (reg:DI 0 ax [orig:192 D.25996 ] [192])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 512 {*ashldi3_1}
     (nil))
(insn 331 330 332 23 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 332 331 333 23 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.25997 ] [194])
                (plus:DI (reg/f:DI 0 ax [351])
                    (reg:DI 4 si [orig:193 D.25996 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:101 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 4 si [orig:193 D.25996 ] [193]))
        (nil)))
(insn 333 332 335 23 (set (reg/f:DI 0 ax [orig:195 D.25998 ] [195])
        (mem/f:DI (reg/f:DI 0 ax [orig:194 D.25997 ] [194]) [0 *_156+0 S8 A64])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 335 333 336 23 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:191 D.26003 ] [191])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(insn 336 335 337 23 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:195 D.25998 ] [195])) ge2fitman_preproc.cpp:101 89 {*movdi_internal}
     (nil))
(call_insn 337 336 338 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5scalePfP12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fe355c51a20 scale>) [0 scale S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:101 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 338 337 339 23 (set (reg:SI 0 ax [352])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:105 90 {*movsi_internal}
     (nil))
(insn 339 338 340 23 (set (reg:DI 1 dx [orig:196 D.25996 ] [196])
        (sign_extend:DI (reg:SI 0 ax [352]))) ge2fitman_preproc.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 340 339 341 23 (set (reg:DI 0 ax [353])
        (reg:DI 1 dx [orig:196 D.25996 ] [196])) ge2fitman_preproc.cpp:105 89 {*movdi_internal}
     (nil))
(insn 341 340 342 23 (parallel [
            (set (reg:DI 0 ax [353])
                (ashift:DI (reg:DI 0 ax [353])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 512 {*ashldi3_1}
     (nil))
(insn 342 341 343 23 (parallel [
            (set (reg:DI 0 ax [353])
                (plus:DI (reg:DI 0 ax [353])
                    (reg:DI 1 dx [orig:196 D.25996 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:196 D.25996 ] [196])
            (const_int 9 [0x9]))
        (nil)))
(insn 343 342 344 23 (parallel [
            (set (reg:DI 0 ax [353])
                (ashift:DI (reg:DI 0 ax [353])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 512 {*ashldi3_1}
     (nil))
(insn 344 343 345 23 (parallel [
            (set (reg:DI 0 ax [353])
                (plus:DI (reg:DI 0 ax [353])
                    (reg:DI 1 dx [orig:196 D.25996 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:196 D.25996 ] [196])
            (const_int 19 [0x13]))
        (nil)))
(insn 345 344 346 23 (parallel [
            (set (reg:DI 0 ax [354])
                (ashift:DI (reg:DI 0 ax [353])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 512 {*ashldi3_1}
     (nil))
(insn 346 345 347 23 (set (reg:DI 0 ax [353])
        (reg:DI 0 ax [354])) ge2fitman_preproc.cpp:105 89 {*movdi_internal}
     (nil))
(insn 347 346 348 23 (set (reg:DI 1 dx [orig:197 D.25996 ] [197])
        (reg:DI 0 ax [353])) ge2fitman_preproc.cpp:105 89 {*movdi_internal}
     (nil))
(insn 348 347 349 23 (set (reg/f:DI 0 ax [355])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:105 89 {*movdi_internal}
     (nil))
(insn 349 348 350 23 (parallel [
            (set (reg/f:DI 0 ax [orig:198 D.26002 ] [198])
                (plus:DI (reg/f:DI 0 ax [355])
                    (reg:DI 1 dx [orig:197 D.25996 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:105 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:197 D.25996 ] [197]))
        (nil)))
(insn 350 349 351 23 (set (reg:SI 0 ax [orig:199 D.25995 ] [199])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.26002 ] [198])
                (const_int 16 [0x10])) [0 _161->bc+0 S4 A32])) ge2fitman_preproc.cpp:105 90 {*movsi_internal}
     (nil))
(insn 351 350 352 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:199 D.25995 ] [199])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:105 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 352 351 353 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 368)
            (pc))) ge2fitman_preproc.cpp:105 612 {*jcc_1}
     (nil)
 -> 368)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 200 201 202 203 204 205 206 356 357 358 359
(note 353 352 354 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 354 353 355 24 (set (reg:SI 0 ax [356])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:106 90 {*movsi_internal}
     (nil))
(insn 355 354 667 24 (set (reg:DI 0 ax [orig:200 D.25996 ] [200])
        (sign_extend:DI (reg:SI 0 ax [356]))) ge2fitman_preproc.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 667 355 356 24 (set (reg:DI 0 ax [orig:201 D.25996 ] [201])
        (reg:DI 0 ax [orig:200 D.25996 ] [200])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 356 667 668 24 (parallel [
            (set (reg:DI 0 ax [orig:201 D.25996 ] [201])
                (ashift:DI (reg:DI 0 ax [orig:201 D.25996 ] [201])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:106 512 {*ashldi3_1}
     (nil))
(insn 668 356 357 24 (set (reg:DI 1 dx [orig:201 D.25996 ] [201])
        (reg:DI 0 ax [orig:201 D.25996 ] [201])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 357 668 358 24 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 358 357 359 24 (parallel [
            (set (reg/f:DI 1 dx [orig:202 D.26003 ] [202])
                (plus:DI (reg:DI 1 dx [orig:201 D.25996 ] [201])
                    (reg/f:DI 0 ax [357])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:106 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:201 D.25996 ] [201]))
        (nil)))
(insn 359 358 360 24 (set (reg:SI 0 ax [358])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:106 90 {*movsi_internal}
     (nil))
(insn 360 359 361 24 (set (reg:DI 0 ax [orig:203 D.25996 ] [203])
        (sign_extend:DI (reg:SI 0 ax [358]))) ge2fitman_preproc.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 361 360 362 24 (parallel [
            (set (reg:DI 2 cx [orig:204 D.25996 ] [204])
                (ashift:DI (reg:DI 0 ax [orig:203 D.25996 ] [203])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:106 512 {*ashldi3_1}
     (nil))
(insn 362 361 363 24 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 363 362 364 24 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.25997 ] [205])
                (plus:DI (reg/f:DI 0 ax [359])
                    (reg:DI 2 cx [orig:204 D.25996 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:106 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:204 D.25996 ] [204]))
        (nil)))
(insn 364 363 365 24 (set (reg/f:DI 0 ax [orig:206 D.25998 ] [206])
        (mem/f:DI (reg/f:DI 0 ax [orig:205 D.25997 ] [205]) [0 *_168+0 S8 A64])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 365 364 366 24 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:202 D.26003 ] [202])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(insn 366 365 367 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:206 D.25998 ] [206])) ge2fitman_preproc.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn 367 366 368 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16baseline_correctPfP12Procpar_info") [flags 0x3]  <function_decl 0x7fe355c780d8 baseline_correct>) [0 baseline_correct S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:106 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 208 209 210 360 361 362 363
(code_label 368 367 369 25 17 "" [1 uses])
(note 369 368 370 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 370 369 371 25 (set (reg:SI 0 ax [360])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:111 90 {*movsi_internal}
     (nil))
(insn 371 370 372 25 (set (reg:DI 1 dx [orig:207 D.25996 ] [207])
        (sign_extend:DI (reg:SI 0 ax [360]))) ge2fitman_preproc.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 372 371 373 25 (set (reg:DI 0 ax [361])
        (reg:DI 1 dx [orig:207 D.25996 ] [207])) ge2fitman_preproc.cpp:111 89 {*movdi_internal}
     (nil))
(insn 373 372 374 25 (parallel [
            (set (reg:DI 0 ax [361])
                (ashift:DI (reg:DI 0 ax [361])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 512 {*ashldi3_1}
     (nil))
(insn 374 373 375 25 (parallel [
            (set (reg:DI 0 ax [361])
                (plus:DI (reg:DI 0 ax [361])
                    (reg:DI 1 dx [orig:207 D.25996 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:207 D.25996 ] [207])
            (const_int 9 [0x9]))
        (nil)))
(insn 375 374 376 25 (parallel [
            (set (reg:DI 0 ax [361])
                (ashift:DI (reg:DI 0 ax [361])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 512 {*ashldi3_1}
     (nil))
(insn 376 375 377 25 (parallel [
            (set (reg:DI 0 ax [361])
                (plus:DI (reg:DI 0 ax [361])
                    (reg:DI 1 dx [orig:207 D.25996 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:207 D.25996 ] [207])
            (const_int 19 [0x13]))
        (nil)))
(insn 377 376 378 25 (parallel [
            (set (reg:DI 0 ax [362])
                (ashift:DI (reg:DI 0 ax [361])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 512 {*ashldi3_1}
     (nil))
(insn 378 377 379 25 (set (reg:DI 0 ax [361])
        (reg:DI 0 ax [362])) ge2fitman_preproc.cpp:111 89 {*movdi_internal}
     (nil))
(insn 379 378 380 25 (set (reg:DI 1 dx [orig:208 D.25996 ] [208])
        (reg:DI 0 ax [361])) ge2fitman_preproc.cpp:111 89 {*movdi_internal}
     (nil))
(insn 380 379 381 25 (set (reg/f:DI 0 ax [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:111 89 {*movdi_internal}
     (nil))
(insn 381 380 382 25 (parallel [
            (set (reg/f:DI 0 ax [orig:209 D.26002 ] [209])
                (plus:DI (reg/f:DI 0 ax [363])
                    (reg:DI 1 dx [orig:208 D.25996 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:111 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:208 D.25996 ] [208]))
        (nil)))
(insn 382 381 383 25 (set (reg:SI 0 ax [orig:210 D.25995 ] [210])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:209 D.26002 ] [209])
                (const_int 32 [0x20])) [0 _173->max_normalize+0 S4 A32])) ge2fitman_preproc.cpp:111 90 {*movsi_internal}
     (nil))
(insn 383 382 384 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:210 D.25995 ] [210])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:111 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 384 383 385 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) ge2fitman_preproc.cpp:111 612 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 211 212 213 214 215 216 217 218 219 220 221 364 365 366 367 368 369
(note 385 384 386 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 387 26 (set (reg:SI 0 ax [364])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 387 386 669 26 (set (reg:DI 0 ax [orig:211 D.25996 ] [211])
        (sign_extend:DI (reg:SI 0 ax [364]))) ge2fitman_preproc.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 669 387 388 26 (set (reg:DI 0 ax [orig:212 D.25996 ] [212])
        (reg:DI 0 ax [orig:211 D.25996 ] [211])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 388 669 670 26 (parallel [
            (set (reg:DI 0 ax [orig:212 D.25996 ] [212])
                (ashift:DI (reg:DI 0 ax [orig:212 D.25996 ] [212])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 512 {*ashldi3_1}
     (nil))
(insn 670 388 389 26 (set (reg:DI 1 dx [orig:212 D.25996 ] [212])
        (reg:DI 0 ax [orig:212 D.25996 ] [212])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 389 670 390 26 (set (reg/f:DI 0 ax [365])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 390 389 391 26 (parallel [
            (set (reg/f:DI 1 dx [orig:213 D.26003 ] [213])
                (plus:DI (reg:DI 1 dx [orig:212 D.25996 ] [212])
                    (reg/f:DI 0 ax [365])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:212 D.25996 ] [212]))
        (nil)))
(insn 391 390 392 26 (set (reg:SI 0 ax [366])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 392 391 393 26 (set (reg:DI 0 ax [orig:214 D.25996 ] [214])
        (sign_extend:DI (reg:SI 0 ax [366]))) ge2fitman_preproc.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 393 392 394 26 (parallel [
            (set (reg:DI 2 cx [orig:215 D.25996 ] [215])
                (ashift:DI (reg:DI 0 ax [orig:214 D.25996 ] [214])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 512 {*ashldi3_1}
     (nil))
(insn 394 393 395 26 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 395 394 396 26 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.25997 ] [216])
                (plus:DI (reg/f:DI 0 ax [367])
                    (reg:DI 2 cx [orig:215 D.25996 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (reg:DI 2 cx [orig:215 D.25996 ] [215]))
        (nil)))
(insn 396 395 397 26 (set (reg/f:DI 2 cx [orig:217 D.25998 ] [217])
        (mem/f:DI (reg/f:DI 0 ax [orig:216 D.25997 ] [216]) [0 *_181+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 397 396 398 26 (set (reg:SI 0 ax [368])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 398 397 399 26 (set (reg:DI 0 ax [orig:218 D.25996 ] [218])
        (sign_extend:DI (reg:SI 0 ax [368]))) ge2fitman_preproc.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 399 398 400 26 (parallel [
            (set (reg:DI 4 si [orig:219 D.25996 ] [219])
                (ashift:DI (reg:DI 0 ax [orig:218 D.25996 ] [218])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 512 {*ashldi3_1}
     (nil))
(insn 400 399 401 26 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 401 400 402 26 (parallel [
            (set (reg/f:DI 0 ax [orig:220 D.25997 ] [220])
                (plus:DI (reg/f:DI 0 ax [369])
                    (reg:DI 4 si [orig:219 D.25996 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:112 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 4 si [orig:219 D.25996 ] [219]))
        (nil)))
(insn 402 401 404 26 (set (reg/f:DI 0 ax [orig:221 D.25998 ] [221])
        (mem/f:DI (reg/f:DI 0 ax [orig:220 D.25997 ] [220]) [0 *_185+0 S8 A64])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 404 402 405 26 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:217 D.25998 ] [217])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 405 404 406 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:221 D.25998 ] [221])) ge2fitman_preproc.cpp:112 89 {*movdi_internal}
     (nil))
(call_insn 406 405 407 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9normalizePfS_P12Procpar_info") [flags 0x3]  <function_decl 0x7fe355c51af8 normalize>) [0 normalize S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:112 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;;              26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 407 406 408 27 18 "" [1 uses])
(note 408 407 409 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 409 408 657 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:30 217 {*addsi_1}
     (nil))
(jump_insn 657 409 658 27 (set (pc)
        (label_ref 410)) ge2fitman_preproc.cpp:30 654 {jump}
     (nil)
 -> 410)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 658 657 413)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 222 370
(code_label 413 658 414 28 2 "" [1 uses])
(note 414 413 415 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 415 414 416 28 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:119 89 {*movdi_internal}
     (nil))
(insn 416 415 417 28 (set (reg:SI 0 ax [orig:222 D.25995 ] [222])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [370])
                (const_int 12 [0xc])) [0 preprocess_111(D)->pre_ecc+0 S4 A32])) ge2fitman_preproc.cpp:119 90 {*movsi_internal}
     (nil))
(insn 417 416 418 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:222 D.25995 ] [222])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:119 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 418 417 419 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 432)
            (pc))) ge2fitman_preproc.cpp:119 612 {*jcc_1}
     (nil)
 -> 432)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 223 224 225 371 372 373 374
(note 419 418 420 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 420 419 421 29 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 421 420 422 29 (parallel [
            (set (reg/f:DI 0 ax [orig:223 D.25997 ] [223])
                (plus:DI (reg/f:DI 0 ax [371])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:121 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 422 421 423 29 (set (reg/f:DI 4 si [orig:224 D.25998 ] [224])
        (mem/f:DI (reg/f:DI 0 ax [orig:223 D.25997 ] [223]) [0 *_190+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 423 422 424 29 (set (reg/f:DI 0 ax [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 424 423 425 29 (set (reg/f:DI 0 ax [orig:225 D.25998 ] [225])
        (mem/f:DI (reg/f:DI 0 ax [372]) [0 *out_data_31(D)+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 425 424 426 29 (set (reg:DI 2 cx [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 426 425 430 29 (set (reg:DI 1 dx [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 430 426 431 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:225 D.25998 ] [225])) ge2fitman_preproc.cpp:121 89 {*movdi_internal}
     (nil))
(call_insn 431 430 432 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z14ecc_correctionPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fe355c51bd0 ecc_correction>) [0 ecc_correction S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:121 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;;              29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 226 375
(code_label 432 431 433 30 20 "" [1 uses])
(note 433 432 434 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 434 433 435 30 (set (reg/f:DI 0 ax [375])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:125 89 {*movdi_internal}
     (nil))
(insn 435 434 436 30 (set (reg:SI 0 ax [orig:226 D.25995 ] [226])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [375])
                (const_int 36 [0x24])) [0 preprocess_111(D)->pre_quality+0 S4 A32])) ge2fitman_preproc.cpp:125 90 {*movsi_internal}
     (nil))
(insn 436 435 437 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:226 D.25995 ] [226])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:125 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 437 436 438 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 455)
            (pc))) ge2fitman_preproc.cpp:125 612 {*jcc_1}
     (nil)
 -> 455)
;;  succ:       31 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 227 228 229 230 231 376 377 378 379 380
(note 438 437 439 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 439 438 440 31 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 440 439 441 31 (parallel [
            (set (reg/f:DI 0 ax [orig:227 D.25997 ] [227])
                (plus:DI (reg/f:DI 0 ax [376])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:127 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 441 440 442 31 (set (reg/f:DI 1 dx [orig:228 D.25998 ] [228])
        (mem/f:DI (reg/f:DI 0 ax [orig:227 D.25997 ] [227]) [0 *_195+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 442 441 443 31 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 443 442 444 31 (parallel [
            (set (reg/f:DI 0 ax [orig:229 D.25997 ] [229])
                (plus:DI (reg/f:DI 0 ax [377])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:127 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 444 443 445 31 (set (reg/f:DI 4 si [orig:230 D.25998 ] [230])
        (mem/f:DI (reg/f:DI 0 ax [orig:229 D.25997 ] [229]) [0 *_197+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 445 444 446 31 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 446 445 447 31 (set (reg/f:DI 0 ax [orig:231 D.25998 ] [231])
        (mem/f:DI (reg/f:DI 0 ax [378]) [0 *out_data_31(D)+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 447 446 448 31 (set (reg:DI 5 di [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 448 447 449 31 (set (reg:DI 2 cx [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 449 448 453 31 (set (reg:DI 37 r8)
        (reg:DI 5 di [379])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(insn 453 449 454 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:231 D.25998 ] [231])) ge2fitman_preproc.cpp:127 89 {*movdi_internal}
     (nil))
(call_insn 454 453 455 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z7qualityPfS_S_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fe355c51ca8 quality>) [0 quality S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:127 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;;              31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 232 381
(code_label 455 454 456 32 21 "" [1 uses])
(note 456 455 457 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 457 456 458 32 (set (reg/f:DI 0 ax [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 458 457 459 32 (set (reg:SI 0 ax [orig:232 D.25995 ] [232])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [381])
                (const_int 40 [0x28])) [0 preprocess_111(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:131 90 {*movsi_internal}
     (nil))
(insn 459 458 460 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:232 D.25995 ] [232])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:131 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 460 459 461 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) ge2fitman_preproc.cpp:131 612 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 233 234 235 236 237 382 383 384 385 386
(note 461 460 462 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 462 461 463 33 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 463 462 464 33 (parallel [
            (set (reg/f:DI 0 ax [orig:233 D.25997 ] [233])
                (plus:DI (reg/f:DI 0 ax [382])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:133 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 464 463 465 33 (set (reg/f:DI 1 dx [orig:234 D.25998 ] [234])
        (mem/f:DI (reg/f:DI 0 ax [orig:233 D.25997 ] [233]) [0 *_202+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 465 464 466 33 (set (reg/f:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 466 465 467 33 (parallel [
            (set (reg/f:DI 0 ax [orig:235 D.25997 ] [235])
                (plus:DI (reg/f:DI 0 ax [383])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:133 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 467 466 468 33 (set (reg/f:DI 4 si [orig:236 D.25998 ] [236])
        (mem/f:DI (reg/f:DI 0 ax [orig:235 D.25997 ] [235]) [0 *_204+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 468 467 469 33 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 469 468 470 33 (set (reg/f:DI 0 ax [orig:237 D.25998 ] [237])
        (mem/f:DI (reg/f:DI 0 ax [384]) [0 *out_data_31(D)+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 470 469 471 33 (set (reg:DI 5 di [385])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 471 470 472 33 (set (reg:DI 2 cx [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 472 471 476 33 (set (reg:DI 37 r8)
        (reg:DI 5 di [385])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(insn 476 472 477 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:237 D.25998 ] [237])) ge2fitman_preproc.cpp:133 89 {*movdi_internal}
     (nil))
(call_insn 477 476 478 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5queccPfS_S_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fe355c51d80 quecc>) [0 quecc S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:133 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;;              33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 478 477 479 34 22 "" [1 uses])
(note 479 478 480 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 520 34 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:139 90 {*movsi_internal}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              38 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 387
(code_label 520 480 481 35 25 "" [1 uses])
(note 481 520 482 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 482 481 483 35 (set (reg/f:DI 0 ax [387])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) ge2fitman_preproc.cpp:139 89 {*movdi_internal}
     (nil))
(insn 483 482 484 35 (set (reg:SI 0 ax [orig:238 D.25995 ] [238])
        (mem:SI (reg/f:DI 0 ax [387]) [0 *fid_27(D)+0 S4 A32])) ge2fitman_preproc.cpp:139 90 {*movsi_internal}
     (nil))
(insn 484 483 485 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:238 D.25995 ] [238])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:139 7 {*cmpsi_1}
     (nil))
(jump_insn 485 484 486 35 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 523)
            (pc))) ge2fitman_preproc.cpp:139 612 {*jcc_1}
     (nil)
 -> 523)
;;  succ:       39
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 240 241 242 388 389 390 391
(note 486 485 487 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 487 486 488 36 (set (reg:SI 0 ax [388])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:141 90 {*movsi_internal}
     (nil))
(insn 488 487 489 36 (set (reg:DI 1 dx [orig:239 D.25996 ] [239])
        (sign_extend:DI (reg:SI 0 ax [388]))) ge2fitman_preproc.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 489 488 490 36 (set (reg:DI 0 ax [389])
        (reg:DI 1 dx [orig:239 D.25996 ] [239])) ge2fitman_preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 490 489 491 36 (parallel [
            (set (reg:DI 0 ax [389])
                (ashift:DI (reg:DI 0 ax [389])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 512 {*ashldi3_1}
     (nil))
(insn 491 490 492 36 (parallel [
            (set (reg:DI 0 ax [389])
                (plus:DI (reg:DI 0 ax [389])
                    (reg:DI 1 dx [orig:239 D.25996 ] [239])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:239 D.25996 ] [239])
            (const_int 9 [0x9]))
        (nil)))
(insn 492 491 493 36 (parallel [
            (set (reg:DI 0 ax [389])
                (ashift:DI (reg:DI 0 ax [389])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 512 {*ashldi3_1}
     (nil))
(insn 493 492 494 36 (parallel [
            (set (reg:DI 0 ax [389])
                (plus:DI (reg:DI 0 ax [389])
                    (reg:DI 1 dx [orig:239 D.25996 ] [239])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:239 D.25996 ] [239])
            (const_int 19 [0x13]))
        (nil)))
(insn 494 493 495 36 (parallel [
            (set (reg:DI 0 ax [390])
                (ashift:DI (reg:DI 0 ax [389])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 512 {*ashldi3_1}
     (nil))
(insn 495 494 496 36 (set (reg:DI 0 ax [389])
        (reg:DI 0 ax [390])) ge2fitman_preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 496 495 497 36 (set (reg:DI 1 dx [orig:240 D.25996 ] [240])
        (reg:DI 0 ax [389])) ge2fitman_preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 497 496 498 36 (set (reg/f:DI 0 ax [391])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 498 497 499 36 (parallel [
            (set (reg/f:DI 0 ax [orig:241 D.26002 ] [241])
                (plus:DI (reg/f:DI 0 ax [391])
                    (reg:DI 1 dx [orig:240 D.25996 ] [240])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:240 D.25996 ] [240]))
        (nil)))
(insn 499 498 500 36 (set (reg:SI 0 ax [orig:242 D.25995 ] [242])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:241 D.26002 ] [241])
                (const_int 68 [0x44])) [0 _212->tilt+0 S4 A32])) ge2fitman_preproc.cpp:141 90 {*movsi_internal}
     (nil))
(insn 500 499 501 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:242 D.25995 ] [242])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:141 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 501 500 502 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 517)
            (pc))) ge2fitman_preproc.cpp:141 612 {*jcc_1}
     (nil)
 -> 517)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 243 244 245 246 247 248 249 392 393 394 395
(note 502 501 503 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 503 502 504 37 (set (reg:SI 0 ax [392])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:143 90 {*movsi_internal}
     (nil))
(insn 504 503 671 37 (set (reg:DI 0 ax [orig:243 D.25996 ] [243])
        (sign_extend:DI (reg:SI 0 ax [392]))) ge2fitman_preproc.cpp:143 142 {*extendsidi2_rex64}
     (nil))
(insn 671 504 505 37 (set (reg:DI 0 ax [orig:244 D.25996 ] [244])
        (reg:DI 0 ax [orig:243 D.25996 ] [243])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 505 671 672 37 (parallel [
            (set (reg:DI 0 ax [orig:244 D.25996 ] [244])
                (ashift:DI (reg:DI 0 ax [orig:244 D.25996 ] [244])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:143 512 {*ashldi3_1}
     (nil))
(insn 672 505 506 37 (set (reg:DI 1 dx [orig:244 D.25996 ] [244])
        (reg:DI 0 ax [orig:244 D.25996 ] [244])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 506 672 507 37 (set (reg/f:DI 0 ax [393])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 507 506 508 37 (parallel [
            (set (reg/f:DI 1 dx [orig:245 D.26003 ] [245])
                (plus:DI (reg:DI 1 dx [orig:244 D.25996 ] [244])
                    (reg/f:DI 0 ax [393])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:143 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:244 D.25996 ] [244]))
        (nil)))
(insn 508 507 509 37 (set (reg:SI 0 ax [394])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:143 90 {*movsi_internal}
     (nil))
(insn 509 508 510 37 (set (reg:DI 0 ax [orig:246 D.25996 ] [246])
        (sign_extend:DI (reg:SI 0 ax [394]))) ge2fitman_preproc.cpp:143 142 {*extendsidi2_rex64}
     (nil))
(insn 510 509 511 37 (parallel [
            (set (reg:DI 2 cx [orig:247 D.25996 ] [247])
                (ashift:DI (reg:DI 0 ax [orig:246 D.25996 ] [246])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:143 512 {*ashldi3_1}
     (nil))
(insn 511 510 512 37 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 512 511 513 37 (parallel [
            (set (reg/f:DI 0 ax [orig:248 D.25997 ] [248])
                (plus:DI (reg/f:DI 0 ax [395])
                    (reg:DI 2 cx [orig:247 D.25996 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:143 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:247 D.25996 ] [247]))
        (nil)))
(insn 513 512 514 37 (set (reg/f:DI 0 ax [orig:249 D.25998 ] [249])
        (mem/f:DI (reg/f:DI 0 ax [orig:248 D.25997 ] [248]) [0 *_219+0 S8 A64])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 514 513 515 37 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:245 D.26003 ] [245])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(insn 515 514 516 37 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:249 D.25998 ] [249])) ge2fitman_preproc.cpp:143 89 {*movdi_internal}
     (nil))
(call_insn 516 515 517 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16baseline_correctPfP12Procpar_info") [flags 0x3]  <function_decl 0x7fe355c780d8 baseline_correct>) [0 baseline_correct S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:143 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;;              37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 517 516 518 38 24 "" [1 uses])
(note 518 517 519 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 519 518 659 38 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:139 217 {*addsi_1}
     (nil))
(jump_insn 659 519 660 38 (set (pc)
        (label_ref 520)) ge2fitman_preproc.cpp:139 654 {jump}
     (nil)
 -> 520)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 660 659 523)
;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 250 396 397
(code_label 523 660 524 39 23 "" [1 uses])
(note 524 523 525 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 525 524 526 39 (set (reg/f:DI 0 ax [396])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:150 89 {*movdi_internal}
     (nil))
(insn 526 525 527 39 (set (reg:SF 21 xmm0 [orig:250 D.25999 ] [250])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [396])
                (const_int 28 [0x1c])) [0 preprocess_111(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (nil))
(insn 527 526 528 39 (set (reg:SF 22 xmm1 [397])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 528 527 529 39 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:250 D.25999 ] [250])
            (reg:SF 22 xmm1 [397]))) ge2fitman_preproc.cpp:150 55 {*cmpiusf_sse}
     (nil))
(jump_insn 529 528 635 39 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 612 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       45
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 250

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 250
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 250
;; lr  def 	 17 [flags] 398
(note 635 529 530 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 530 635 531 40 (set (reg:SF 22 xmm1 [398])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 531 530 532 40 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:250 D.25999 ] [250])
            (reg:SF 22 xmm1 [398]))) ge2fitman_preproc.cpp:150 55 {*cmpiusf_sse}
     (nil))
(jump_insn 532 531 533 40 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 612 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       45
;;              41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 251 252 399 400
(note 533 532 534 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 41 (set (reg/f:DI 0 ax [399])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:150 89 {*movdi_internal}
     (nil))
(insn 535 534 536 41 (parallel [
            (set (reg/f:DI 0 ax [orig:251 D.26002 ] [251])
                (plus:DI (reg/f:DI 0 ax [399])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:150 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 536 535 537 41 (set (reg:SF 21 xmm0 [orig:252 D.25999 ] [252])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:251 D.26002 ] [251])
                (const_int 28 [0x1c])) [0 _224->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (nil))
(insn 537 536 538 41 (set (reg:SF 22 xmm1 [400])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 538 537 539 41 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:252 D.25999 ] [252])
            (reg:SF 22 xmm1 [400]))) ge2fitman_preproc.cpp:150 55 {*cmpiusf_sse}
     (nil))
(jump_insn 539 538 636 41 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 612 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       45
;;              42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 252

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 252
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 252
;; lr  def 	 17 [flags] 401
(note 636 539 540 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 540 636 541 42 (set (reg:SF 22 xmm1 [401])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:150 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 541 540 542 42 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:252 D.25999 ] [252])
            (reg:SF 22 xmm1 [401]))) ge2fitman_preproc.cpp:150 55 {*cmpiusf_sse}
     (nil))
(jump_insn 542 541 543 42 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 612 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       45
;;              43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 253 402
(note 543 542 544 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 544 543 545 43 (set (reg/f:DI 0 ax [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:151 89 {*movdi_internal}
     (nil))
(insn 545 544 546 43 (set (reg:SI 0 ax [orig:253 D.25995 ] [253])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [402])
                (const_int 52 [0x34])) [0 preprocess_111(D)->pre_quecc_if+0 S4 A32])) ge2fitman_preproc.cpp:151 90 {*movsi_internal}
     (nil))
(insn 546 545 547 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:253 D.25995 ] [253])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:150 7 {*cmpsi_1}
     (nil))
(jump_insn 547 546 548 43 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) ge2fitman_preproc.cpp:150 612 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       45
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 254 255 403
(note 548 547 549 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 549 548 550 44 (set (reg/f:DI 0 ax [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:151 89 {*movdi_internal}
     (nil))
(insn 550 549 551 44 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.26002 ] [254])
                (plus:DI (reg/f:DI 0 ax [403])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:151 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 551 550 552 44 (set (reg:SI 0 ax [orig:255 D.25995 ] [255])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:254 D.26002 ] [254])
                (const_int 52 [0x34])) [0 _227->pre_quecc_if+0 S4 A32])) ge2fitman_preproc.cpp:151 90 {*movsi_internal}
     (nil))
(insn 552 551 553 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:255 D.25995 ] [255])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:151 7 {*cmpsi_1}
     (nil))
(jump_insn 553 552 554 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 568)
            (pc))) ge2fitman_preproc.cpp:151 612 {*jcc_1}
     (nil)
 -> 568)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;;              42
;;              43
;;              44 (FALLTHRU)
;;              39
;;              41
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 256 257 258 404 405 406 407
(code_label 554 553 555 45 26 "" [5 uses])
(note 555 554 556 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 556 555 557 45 (set (reg/f:DI 0 ax [404])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 557 556 558 45 (parallel [
            (set (reg/f:DI 0 ax [orig:256 D.25997 ] [256])
                (plus:DI (reg/f:DI 0 ax [404])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:153 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 558 557 559 45 (set (reg/f:DI 4 si [orig:257 D.25998 ] [257])
        (mem/f:DI (reg/f:DI 0 ax [orig:256 D.25997 ] [256]) [0 *_229+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 559 558 560 45 (set (reg/f:DI 0 ax [405])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 560 559 561 45 (set (reg/f:DI 0 ax [orig:258 D.25998 ] [258])
        (mem/f:DI (reg/f:DI 0 ax [405]) [0 *out_data_31(D)+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 561 560 562 45 (set (reg:DI 2 cx [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 562 561 566 45 (set (reg:DI 1 dx [407])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(insn 566 562 567 45 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:258 D.25998 ] [258])) ge2fitman_preproc.cpp:153 89 {*movdi_internal}
     (nil))
(call_insn 567 566 568 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6filterPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fe355c78000 filter>) [0 filter S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:153 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 568 567 569 46 27 "" [1 uses])
(note 569 568 570 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 570 569 608 46 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:158 90 {*movsi_internal}
     (nil))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;;              50 [100.0%] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 259 408
(code_label 608 570 571 47 30 "" [1 uses])
(note 571 608 572 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 572 571 573 47 (set (reg/f:DI 0 ax [408])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) ge2fitman_preproc.cpp:158 89 {*movdi_internal}
     (nil))
(insn 573 572 574 47 (set (reg:SI 0 ax [orig:259 D.25995 ] [259])
        (mem:SI (reg/f:DI 0 ax [408]) [0 *fid_27(D)+0 S4 A32])) ge2fitman_preproc.cpp:158 90 {*movsi_internal}
     (nil))
(insn 574 573 575 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:259 D.25995 ] [259])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:158 7 {*cmpsi_1}
     (nil))
(jump_insn 575 574 576 47 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 611)
            (pc))) ge2fitman_preproc.cpp:158 612 {*jcc_1}
     (nil)
 -> 611)
;;  succ:       51
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 260 261 262 263 409 410 411 412
(note 576 575 577 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 577 576 578 48 (set (reg:SI 0 ax [409])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:159 90 {*movsi_internal}
     (nil))
(insn 578 577 579 48 (set (reg:DI 1 dx [orig:260 D.25996 ] [260])
        (sign_extend:DI (reg:SI 0 ax [409]))) ge2fitman_preproc.cpp:159 142 {*extendsidi2_rex64}
     (nil))
(insn 579 578 580 48 (set (reg:DI 0 ax [410])
        (reg:DI 1 dx [orig:260 D.25996 ] [260])) ge2fitman_preproc.cpp:159 89 {*movdi_internal}
     (nil))
(insn 580 579 581 48 (parallel [
            (set (reg:DI 0 ax [410])
                (ashift:DI (reg:DI 0 ax [410])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 512 {*ashldi3_1}
     (nil))
(insn 581 580 582 48 (parallel [
            (set (reg:DI 0 ax [410])
                (plus:DI (reg:DI 0 ax [410])
                    (reg:DI 1 dx [orig:260 D.25996 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:260 D.25996 ] [260])
            (const_int 9 [0x9]))
        (nil)))
(insn 582 581 583 48 (parallel [
            (set (reg:DI 0 ax [410])
                (ashift:DI (reg:DI 0 ax [410])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 512 {*ashldi3_1}
     (nil))
(insn 583 582 584 48 (parallel [
            (set (reg:DI 0 ax [410])
                (plus:DI (reg:DI 0 ax [410])
                    (reg:DI 1 dx [orig:260 D.25996 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:260 D.25996 ] [260])
            (const_int 19 [0x13]))
        (nil)))
(insn 584 583 585 48 (parallel [
            (set (reg:DI 0 ax [411])
                (ashift:DI (reg:DI 0 ax [410])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 512 {*ashldi3_1}
     (nil))
(insn 585 584 586 48 (set (reg:DI 0 ax [410])
        (reg:DI 0 ax [411])) ge2fitman_preproc.cpp:159 89 {*movdi_internal}
     (nil))
(insn 586 585 587 48 (set (reg:DI 1 dx [orig:261 D.25996 ] [261])
        (reg:DI 0 ax [410])) ge2fitman_preproc.cpp:159 89 {*movdi_internal}
     (nil))
(insn 587 586 588 48 (set (reg/f:DI 0 ax [412])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:159 89 {*movdi_internal}
     (nil))
(insn 588 587 589 48 (parallel [
            (set (reg/f:DI 0 ax [orig:262 D.26002 ] [262])
                (plus:DI (reg/f:DI 0 ax [412])
                    (reg:DI 1 dx [orig:261 D.25996 ] [261])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:159 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:261 D.25996 ] [261]))
        (nil)))
(insn 589 588 590 48 (set (reg:SI 0 ax [orig:263 D.25995 ] [263])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:262 D.26002 ] [262])
                (const_int 24 [0x18])) [0 _237->data_zero_fill+0 S4 A32])) ge2fitman_preproc.cpp:159 90 {*movsi_internal}
     (nil))
(insn 590 589 591 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:263 D.25995 ] [263])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:159 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 591 590 592 48 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 605)
            (pc))) ge2fitman_preproc.cpp:159 612 {*jcc_1}
     (nil)
 -> 605)
;;  succ:       49 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 264 265 266 413 414 415 416
(note 592 591 593 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 593 592 594 49 (set (reg/f:DI 0 ax [413])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 594 593 595 49 (parallel [
            (set (reg/f:DI 0 ax [orig:264 D.25997 ] [264])
                (plus:DI (reg/f:DI 0 ax [413])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:160 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 595 594 596 49 (set (reg/f:DI 4 si [orig:265 D.25998 ] [265])
        (mem/f:DI (reg/f:DI 0 ax [orig:264 D.25997 ] [264]) [0 *_239+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 596 595 597 49 (set (reg/f:DI 0 ax [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 597 596 598 49 (set (reg/f:DI 0 ax [orig:266 D.25998 ] [266])
        (mem/f:DI (reg/f:DI 0 ax [414]) [0 *out_data_31(D)+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 598 597 599 49 (set (reg:DI 2 cx [415])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 599 598 603 49 (set (reg:DI 1 dx [416])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(insn 603 599 604 49 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:266 D.25998 ] [266])) ge2fitman_preproc.cpp:160 89 {*movdi_internal}
     (nil))
(call_insn 604 603 605 49 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9zero_fillPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fe355c51e58 zero_fill>) [0 zero_fill S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:160 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;;              49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 605 604 606 50 29 "" [1 uses])
(note 606 605 607 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 607 606 661 50 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:158 217 {*addsi_1}
     (nil))
(jump_insn 661 607 662 50 (set (pc)
        (label_ref 608)) ge2fitman_preproc.cpp:158 654 {jump}
     (nil)
 -> 608)
;;  succ:       47 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 662 661 611)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 267 268
(code_label 611 662 612 51 28 "" [1 uses])
(note 612 611 613 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 613 612 616 51 (set (reg:SI 0 ax [orig:267 D.25995 ] [267])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:164 90 {*movsi_internal}
     (nil))
(insn 616 613 620 51 (set (reg:SI 0 ax [orig:268 <retval> ] [268])
        (reg:SI 0 ax [orig:267 D.25995 ] [267])) ge2fitman_preproc.cpp:164 90 {*movsi_internal}
     (nil))
(insn 620 616 621 51 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:268 <retval> ] [268])) ge2fitman_preproc.cpp:165 90 {*movsi_internal}
     (nil))
(insn 621 620 663 51 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:165 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 663 621 0 NOTE_INSN_DELETED)

;; Function int scale(float*, Procpar_info*, Preprocess*) (_Z5scalePfP12Procpar_infoP10Preprocess, funcdef_no=1022, decl_uid=24414, cgraph_uid=227, symbol_order=228)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 10:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 29:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 31:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 33:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 50:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 56:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 60:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 72:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 73:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 76:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) x  (1) xm {*cmpiusf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 95:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 102:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 106:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 109:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 114:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 117:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 137:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 139
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 140:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 144:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 147:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 148:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 150:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 151
	 Choosing alt 0 in insn 151:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 153:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 154:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 159:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 168
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 172:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 174
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 175:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 176:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 178:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 188
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 189:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 193:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 203:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 205
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 206:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 207:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 210:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) x  (1) xm {*cmpiusf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 222
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 223:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 227:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 228:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 229:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 234:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 236
	 Choosing alt 0 in insn 236:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 237:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 238:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 241:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 244:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 249:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 252:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 257:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 267:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 269:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 274:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 276
	 Choosing alt 0 in insn 276:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 277:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 280:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 282:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 284
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 285:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 286:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 287:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 289
	 Choosing alt 0 in insn 289:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 291:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 292:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 297:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 304:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 305:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 307
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 310:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 312:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 313:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 314
	 Choosing alt 0 in insn 314:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 315:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 316:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 317
	 Choosing alt 0 in insn 317:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 318:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 323:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21

********** Pseudo live ranges #1: **********

  BB 21
   Insn 337: point = 0
   Insn 336: point = 0
   Insn 332: point = 1
   Insn 329: point = 3
  BB 3
   Insn 17: point = 4
   Insn 16: point = 4
   Insn 15: point = 5
   Insn 14: point = 7
   Insn 13: point = 9
  BB 20
   Insn 357: point = 10
   Insn 323: point = 10
  BB 18
   Insn 355: point = 10
   Insn 297: point = 10
   Insn 296: point = 11
   Insn 295: point = 13
   Insn 294: point = 14
   Insn 293: point = 14
   Insn 292: point = 15
   Insn 291: point = 17
   Insn 290: point = 18
   Insn 289: point = 20
   Insn 288: point = 22
   Insn 287: point = 24
   Insn 286: point = 25
   Insn 285: point = 27
   Insn 284: point = 29
   Insn 283: point = 31
   Insn 282: point = 32
   Insn 281: point = 34
   Insn 280: point = 36
   Insn 279: point = 38
   Insn 278: point = 40
   Insn 277: point = 41
   Insn 276: point = 43
   Insn 275: point = 45
   Insn 274: point = 46
   Insn 273: point = 48
   Insn 272: point = 50
   Insn 271: point = 52
   Insn 270: point = 54
   Insn 269: point = 55
   Insn 268: point = 57
   Insn 267: point = 58
   Insn 266: point = 60
   Insn 265: point = 62
   Insn 264: point = 64
  BB 19
   Insn 318: point = 65
   Insn 317: point = 66
   Insn 316: point = 68
   Insn 315: point = 69
   Insn 314: point = 71
   Insn 313: point = 73
   Insn 312: point = 74
   Insn 311: point = 76
   Insn 310: point = 78
   Insn 309: point = 80
   Insn 308: point = 82
   Insn 307: point = 83
   Insn 306: point = 85
   Insn 305: point = 86
   Insn 304: point = 88
   Insn 303: point = 90
   Insn 302: point = 92
  BB 17
   Insn 262: point = 93
   Insn 261: point = 93
   Insn 260: point = 94
   Insn 259: point = 96
   Insn 258: point = 98
   Insn 257: point = 99
   Insn 256: point = 101
  BB 16
   Insn 254: point = 102
   Insn 253: point = 102
   Insn 252: point = 103
   Insn 251: point = 105
   Insn 250: point = 106
   Insn 249: point = 107
   Insn 248: point = 108
  BB 15
   Insn 246: point = 109
   Insn 245: point = 109
   Insn 244: point = 110
   Insn 243: point = 112
   Insn 242: point = 113
   Insn 241: point = 114
   Insn 240: point = 115
   Insn 239: point = 117
   Insn 238: point = 119
   Insn 237: point = 120
   Insn 236: point = 122
   Insn 235: point = 124
   Insn 234: point = 125
   Insn 233: point = 127
   Insn 232: point = 129
   Insn 231: point = 131
   Insn 230: point = 133
   Insn 229: point = 134
   Insn 228: point = 135
   Insn 227: point = 137
   Insn 226: point = 139
   Insn 225: point = 140
   Insn 224: point = 142
   Insn 223: point = 143
   Insn 222: point = 145
   Insn 221: point = 147
   Insn 220: point = 148
   Insn 219: point = 150
   Insn 218: point = 152
   Insn 217: point = 154
  BB 14
   Insn 212: point = 155
   Insn 211: point = 155
   Insn 210: point = 156
  BB 13
   Insn 209: point = 158
   Insn 208: point = 158
   Insn 207: point = 159
   Insn 206: point = 160
   Insn 205: point = 162
   Insn 204: point = 164
   Insn 203: point = 165
   Insn 202: point = 167
   Insn 201: point = 169
   Insn 200: point = 171
  BB 12
   Insn 195: point = 172
   Insn 194: point = 172
   Insn 193: point = 173
   Insn 192: point = 174
   Insn 191: point = 176
   Insn 190: point = 178
   Insn 189: point = 179
   Insn 188: point = 181
   Insn 187: point = 183
   Insn 186: point = 184
   Insn 185: point = 186
   Insn 184: point = 188
   Insn 183: point = 190
  BB 10
   Insn 353: point = 191
   Insn 159: point = 191
   Insn 158: point = 192
   Insn 157: point = 194
   Insn 156: point = 195
   Insn 155: point = 195
   Insn 154: point = 196
   Insn 153: point = 198
   Insn 152: point = 199
   Insn 151: point = 201
   Insn 150: point = 203
   Insn 149: point = 205
   Insn 148: point = 206
   Insn 147: point = 208
   Insn 146: point = 210
   Insn 145: point = 212
   Insn 144: point = 213
   Insn 143: point = 215
   Insn 142: point = 217
   Insn 141: point = 219
   Insn 140: point = 220
   Insn 139: point = 222
   Insn 138: point = 224
   Insn 137: point = 225
   Insn 136: point = 227
   Insn 135: point = 229
   Insn 134: point = 231
   Insn 133: point = 232
   Insn 132: point = 234
   Insn 131: point = 235
   Insn 130: point = 237
   Insn 129: point = 239
  BB 11
   Insn 178: point = 240
   Insn 177: point = 241
   Insn 176: point = 243
   Insn 175: point = 244
   Insn 174: point = 246
   Insn 173: point = 248
   Insn 172: point = 249
   Insn 171: point = 251
   Insn 170: point = 253
   Insn 169: point = 255
   Insn 168: point = 256
   Insn 167: point = 258
   Insn 166: point = 259
   Insn 165: point = 261
   Insn 164: point = 263
  BB 9
   Insn 127: point = 264
   Insn 126: point = 264
   Insn 125: point = 265
   Insn 124: point = 267
   Insn 123: point = 269
   Insn 122: point = 270
   Insn 121: point = 272
  BB 8
   Insn 119: point = 273
   Insn 118: point = 273
   Insn 117: point = 274
   Insn 116: point = 276
   Insn 115: point = 277
   Insn 114: point = 278
   Insn 113: point = 279
  BB 7
   Insn 111: point = 280
   Insn 110: point = 280
   Insn 109: point = 281
   Insn 108: point = 283
   Insn 107: point = 284
   Insn 106: point = 285
   Insn 105: point = 286
   Insn 104: point = 288
   Insn 103: point = 290
   Insn 102: point = 291
   Insn 101: point = 293
   Insn 100: point = 295
   Insn 99: point = 296
   Insn 98: point = 298
   Insn 97: point = 300
   Insn 96: point = 302
   Insn 95: point = 303
   Insn 94: point = 304
   Insn 93: point = 306
   Insn 92: point = 308
   Insn 91: point = 309
   Insn 90: point = 311
   Insn 89: point = 312
   Insn 88: point = 314
   Insn 87: point = 316
   Insn 86: point = 317
   Insn 85: point = 319
   Insn 84: point = 321
   Insn 83: point = 323
  BB 6
   Insn 78: point = 324
   Insn 77: point = 324
   Insn 76: point = 325
  BB 5
   Insn 75: point = 327
   Insn 74: point = 327
   Insn 73: point = 328
   Insn 72: point = 329
   Insn 71: point = 331
   Insn 70: point = 333
   Insn 69: point = 334
   Insn 68: point = 336
   Insn 67: point = 338
  BB 4
   Insn 62: point = 339
   Insn 61: point = 339
   Insn 60: point = 340
   Insn 59: point = 341
   Insn 58: point = 343
   Insn 57: point = 345
   Insn 56: point = 346
   Insn 55: point = 348
   Insn 54: point = 350
   Insn 53: point = 351
   Insn 52: point = 353
   Insn 51: point = 355
   Insn 50: point = 356
   Insn 49: point = 357
   Insn 48: point = 359
   Insn 47: point = 361
   Insn 46: point = 362
   Insn 45: point = 364
   Insn 44: point = 366
   Insn 43: point = 367
   Insn 42: point = 369
   Insn 41: point = 371
   Insn 40: point = 373
   Insn 39: point = 374
   Insn 38: point = 376
   Insn 37: point = 377
   Insn 36: point = 379
   Insn 35: point = 381
   Insn 34: point = 383
   Insn 33: point = 384
   Insn 32: point = 385
   Insn 31: point = 387
   Insn 30: point = 389
   Insn 29: point = 390
   Insn 28: point = 392
   Insn 27: point = 394
   Insn 26: point = 395
   Insn 25: point = 397
   Insn 24: point = 399
   Insn 23: point = 400
   Insn 22: point = 402
   Insn 21: point = 403
   Insn 20: point = 405
   Insn 19: point = 407
  BB 2
   Insn 11: point = 408
   Insn 10: point = 408
   Insn 9: point = 409
   Insn 8: point = 410
   Insn 4: point = 410
   Insn 3: point = 410
   Insn 2: point = 410
 r87: [6..7]
 r88: [4..5]
 r89: [404..405]
 r90: [401..403]
 r91: [384..400]
 r92: [396..397]
 r93: [393..395]
 r94: [391..392]
 r95: [386..390]
 r96: [386..387]
 r97: [384..385]
 r98: [380..381]
 r99: [378..379]
 r100: [375..377]
 r101: [356..374]
 r102: [370..371]
 r103: [368..369]
 r104: [365..367]
 r105: [363..364]
 r106: [358..362]
 r107: [358..359]
 r108: [356..357]
 r109: [352..353]
 r110: [349..351]
 r111: [347..348]
 r112: [344..346]
 r113: [342..343]
 r114: [339..341]
 r115: [335..336]
 r116: [332..334]
 r117: [330..331]
 r118: [324..329]
 r119: [320..321]
 r120: [318..319]
 r121: [315..317]
 r122: [313..314]
 r123: [310..312]
 r124: [305..309]
 r125: [305..306]
 r126: [299..300]
 r127: [297..298]
 r128: [294..296]
 r129: [292..293]
 r130: [289..291]
 r131: [287..288]
 r132: [284..286]
 r133: [282..283]
 r134: [280..281]
 r135: [277..279]
 r136: [275..276]
 r137: [273..274]
 r138: [264..270]
 r139: [266..267]
 r140: [264..265]
 r141: [236..237]
 r142: [233..235]
 r143: [191..232]
 r144: [228..229]
 r145: [226..227]
 r146: [223..225]
 r147: [221..222]
 r148: [207..220]
 r149: [216..217]
 r150: [214..215]
 r151: [211..213]
 r152: [209..210]
 r153: [207..208]
 r154: [202..206]
 r155: [202..203]
 r156: [200..201]
 r157: [197..199]
 r158: [195..196]
 r159: [193..194]
 r160: [191..192]
 r161: [260..261]
 r162: [257..259]
 r163: [240..256]
 r164: [252..253]
 r165: [250..251]
 r166: [247..249]
 r167: [245..246]
 r168: [242..244]
 r169: [240..241]
 r170: [187..188]
 r171: [185..186]
 r172: [182..184]
 r173: [180..181]
 r174: [177..179]
 r175: [175..176]
 r176: [172..174]
 r177: [168..169]
 r178: [166..167]
 r179: [163..165]
 r180: [161..162]
 r181: [155..160]
 r182: [151..152]
 r183: [149..150]
 r184: [146..148]
 r185: [144..145]
 r186: [141..143]
 r187: [136..140]
 r188: [136..137]
 r189: [130..131]
 r190: [128..129]
 r191: [126..127]
 r192: [123..125]
 r193: [121..122]
 r194: [118..120]
 r195: [116..117]
 r196: [113..115]
 r197: [111..112]
 r198: [109..110]
 r199: [106..108]
 r200: [104..105]
 r201: [102..103]
 r202: [93..99]
 r203: [95..96]
 r204: [93..94]
 r205: [61..62]
 r206: [59..60]
 r207: [56..58]
 r208: [10..55]
 r209: [51..52]
 r210: [49..50]
 r211: [47..48]
 r212: [44..46]
 r213: [42..43]
 r214: [26..41]
 r215: [37..38]
 r216: [35..36]
 r217: [33..34]
 r218: [30..32]
 r219: [28..29]
 r220: [26..27]
 r221: [21..25]
 r222: [21..22]
 r223: [19..20]
 r224: [16..18]
 r225: [14..15]
 r226: [12..13]
 r227: [10..11]
 r228: [89..90]
 r229: [87..88]
 r230: [84..86]
 r231: [65..83]
 r232: [79..80]
 r233: [77..78]
 r234: [75..76]
 r235: [72..74]
 r236: [70..71]
 r237: [67..69]
 r238: [65..66]
 r239: [2..3]
 r240: [0..1]
 r241: [408..409]
 r242: [8..9]
 r243: [406..407]
 r244: [401..402]
 r245: [398..399]
 r246: [393..394]
 r247: [388..389]
 r248: [382..383]
 r249: [375..376]
 r250: [372..373]
 r251: [365..366]
 r252: [360..361]
 r253: [354..355]
 r254: [349..350]
 r255: [344..345]
 r256: [339..340]
 r257: [337..338]
 r258: [332..333]
 r259: [327..328]
 r260: [324..325]
 r261: [322..323]
 r262: [315..316]
 r263: [310..311]
 r264: [307..308]
 r265: [303..304]
 r266: [301..302]
 r267: [294..295]
 r268: [289..290]
 r269: [284..285]
 r270: [277..278]
 r271: [271..272]
 r272: [268..269]
 r273: [238..239]
 r274: [233..234]
 r275: [230..231]
 r276: [223..224]
 r277: [218..219]
 r278: [211..212]
 r279: [204..205]
 r280: [197..198]
 r281: [262..263]
 r282: [257..258]
 r283: [254..255]
 r284: [247..248]
 r285: [242..243]
 r286: [189..190]
 r287: [182..183]
 r288: [177..178]
 r289: [172..173]
 r290: [170..171]
 r291: [163..164]
 r292: [158..159]
 r293: [155..156]
 r294: [153..154]
 r295: [146..147]
 r296: [141..142]
 r297: [138..139]
 r298: [134..135]
 r299: [132..133]
 r300: [123..124]
 r301: [118..119]
 r302: [113..114]
 r303: [106..107]
 r304: [100..101]
 r305: [97..98]
 r306: [63..64]
 r307: [56..57]
 r308: [53..54]
 r309: [44..45]
 r310: [39..40]
 r311: [30..31]
 r312: [23..24]
 r313: [16..17]
 r314: [91..92]
 r315: [84..85]
 r316: [81..82]
 r317: [72..73]
 r318: [67..68]
Compressing live ranges: from 410 to 352 - 85%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [346..347]
 r90: [344..345]
 r91: [330..343]
 r92: [340..341]
 r93: [338..339]
 r94: [336..337]
 r95: [332..335]
 r96: [332..333]
 r97: [330..331]
 r98: [326..327]
 r99: [324..325]
 r100: [322..323]
 r101: [306..321]
 r102: [318..319]
 r103: [316..317]
 r104: [314..315]
 r105: [312..313]
 r106: [308..311]
 r107: [308..309]
 r108: [306..307]
 r109: [302..303]
 r110: [300..301]
 r111: [298..299]
 r112: [296..297]
 r113: [294..295]
 r114: [292..293]
 r115: [288..289]
 r116: [286..287]
 r117: [284..285]
 r118: [280..283]
 r119: [276..277]
 r120: [274..275]
 r121: [272..273]
 r122: [270..271]
 r123: [268..269]
 r124: [264..267]
 r125: [264..265]
 r126: [258..259]
 r127: [256..257]
 r128: [254..255]
 r129: [252..253]
 r130: [250..251]
 r131: [248..249]
 r132: [246..247]
 r133: [244..245]
 r134: [242..243]
 r135: [240..241]
 r136: [238..239]
 r137: [236..237]
 r138: [228..233]
 r139: [230..231]
 r140: [228..229]
 r141: [204..205]
 r142: [202..203]
 r143: [166..201]
 r144: [198..199]
 r145: [196..197]
 r146: [194..195]
 r147: [192..193]
 r148: [180..191]
 r149: [188..189]
 r150: [186..187]
 r151: [184..185]
 r152: [182..183]
 r153: [180..181]
 r154: [176..179]
 r155: [176..177]
 r156: [174..175]
 r157: [172..173]
 r158: [170..171]
 r159: [168..169]
 r160: [166..167]
 r161: [224..225]
 r162: [222..223]
 r163: [208..221]
 r164: [218..219]
 r165: [216..217]
 r166: [214..215]
 r167: [212..213]
 r168: [210..211]
 r169: [208..209]
 r170: [162..163]
 r171: [160..161]
 r172: [158..159]
 r173: [156..157]
 r174: [154..155]
 r175: [152..153]
 r176: [150..151]
 r177: [146..147]
 r178: [144..145]
 r179: [142..143]
 r180: [140..141]
 r181: [136..139]
 r182: [132..133]
 r183: [130..131]
 r184: [128..129]
 r185: [126..127]
 r186: [124..125]
 r187: [120..123]
 r188: [120..121]
 r189: [114..115]
 r190: [112..113]
 r191: [110..111]
 r192: [108..109]
 r193: [106..107]
 r194: [104..105]
 r195: [102..103]
 r196: [100..101]
 r197: [98..99]
 r198: [96..97]
 r199: [94..95]
 r200: [92..93]
 r201: [90..91]
 r202: [82..87]
 r203: [84..85]
 r204: [82..83]
 r205: [54..55]
 r206: [52..53]
 r207: [50..51]
 r208: [10..49]
 r209: [46..47]
 r210: [44..45]
 r211: [42..43]
 r212: [40..41]
 r213: [38..39]
 r214: [24..37]
 r215: [34..35]
 r216: [32..33]
 r217: [30..31]
 r218: [28..29]
 r219: [26..27]
 r220: [24..25]
 r221: [20..23]
 r222: [20..21]
 r223: [18..19]
 r224: [16..17]
 r225: [14..15]
 r226: [12..13]
 r227: [10..11]
 r228: [78..79]
 r229: [76..77]
 r230: [74..75]
 r231: [58..73]
 r232: [70..71]
 r233: [68..69]
 r234: [66..67]
 r235: [64..65]
 r236: [62..63]
 r237: [60..61]
 r238: [58..59]
 r239: [2..3]
 r240: [0..1]
 r241: [350..351]
 r242: [8..9]
 r243: [348..349]
 r244: [344..345]
 r245: [342..343]
 r246: [338..339]
 r247: [334..335]
 r248: [328..329]
 r249: [322..323]
 r250: [320..321]
 r251: [314..315]
 r252: [310..311]
 r253: [304..305]
 r254: [300..301]
 r255: [296..297]
 r256: [292..293]
 r257: [290..291]
 r258: [286..287]
 r259: [282..283]
 r260: [280..281]
 r261: [278..279]
 r262: [272..273]
 r263: [268..269]
 r264: [266..267]
 r265: [262..263]
 r266: [260..261]
 r267: [254..255]
 r268: [250..251]
 r269: [246..247]
 r270: [240..241]
 r271: [234..235]
 r272: [232..233]
 r273: [206..207]
 r274: [202..203]
 r275: [200..201]
 r276: [194..195]
 r277: [190..191]
 r278: [184..185]
 r279: [178..179]
 r280: [172..173]
 r281: [226..227]
 r282: [222..223]
 r283: [220..221]
 r284: [214..215]
 r285: [210..211]
 r286: [164..165]
 r287: [158..159]
 r288: [154..155]
 r289: [150..151]
 r290: [148..149]
 r291: [142..143]
 r292: [138..139]
 r293: [136..137]
 r294: [134..135]
 r295: [128..129]
 r296: [124..125]
 r297: [122..123]
 r298: [118..119]
 r299: [116..117]
 r300: [108..109]
 r301: [104..105]
 r302: [100..101]
 r303: [94..95]
 r304: [88..89]
 r305: [86..87]
 r306: [56..57]
 r307: [50..51]
 r308: [48..49]
 r309: [40..41]
 r310: [36..37]
 r311: [28..29]
 r312: [22..23]
 r313: [16..17]
 r314: [80..81]
 r315: [74..75]
 r316: [72..73]
 r317: [64..65]
 r318: [60..61]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 23
changing reg in insn 33
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 39
changing reg in insn 50
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 77
changing reg in insn 74
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 91
changing reg in insn 94
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 122
changing reg in insn 126
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 133
changing reg in insn 133
changing reg in insn 133
changing reg in insn 159
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 148
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 178
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 194
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 211
changing reg in insn 208
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 222
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 225
changing reg in insn 225
changing reg in insn 225
changing reg in insn 228
changing reg in insn 227
changing reg in insn 228
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 239
changing reg in insn 239
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 245
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 253
changing reg in insn 257
changing reg in insn 261
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 269
changing reg in insn 269
changing reg in insn 269
changing reg in insn 297
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 286
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 284
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 307
changing reg in insn 307
changing reg in insn 318
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 314
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 317
changing reg in insn 318
changing reg in insn 329
changing reg in insn 332
changing reg in insn 332
changing reg in insn 336
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 114
changing reg in insn 115
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 138
changing reg in insn 141
changing reg in insn 142
changing reg in insn 145
changing reg in insn 149
changing reg in insn 150
changing reg in insn 153
changing reg in insn 154
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 176
changing reg in insn 183
changing reg in insn 184
changing reg in insn 187
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 194
changing reg in insn 200
changing reg in insn 201
changing reg in insn 204
changing reg in insn 207
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 217
changing reg in insn 218
changing reg in insn 221
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 235
changing reg in insn 238
changing reg in insn 239
changing reg in insn 241
changing reg in insn 242
changing reg in insn 249
changing reg in insn 250
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 259
changing reg in insn 264
changing reg in insn 265
changing reg in insn 268
changing reg in insn 269
changing reg in insn 270
changing reg in insn 271
changing reg in insn 275
changing reg in insn 278
changing reg in insn 279
changing reg in insn 283
changing reg in insn 287
changing reg in insn 288
changing reg in insn 291
changing reg in insn 292
changing reg in insn 302
changing reg in insn 303
changing reg in insn 306
changing reg in insn 308
changing reg in insn 309
changing reg in insn 313
changing reg in insn 316
deleting insn with uid = 155.
deleting insn with uid = 157.
deleting insn with uid = 293.
deleting insn with uid = 295.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 294.


int scale(float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={122d,120u} r1={36d,34u,18e} r2={7d,4u,4e} r3={2d,2u} r4={3d,1u} r5={3d,1u} r6={1d,91u} r7={1d,23u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={99d,17u} r18={2d} r19={2d} r20={1d,1u,24e} r21={48d,49u} r22={31d,28u,6e} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 913{490d,371u,52e} in 282{280 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 241
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) ge2fitman_preproc.cpp:170 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])
        (reg:DI 4 si [ procpar_info ])) ge2fitman_preproc.cpp:170 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])
        (reg:DI 1 dx [ preprocess ])) ge2fitman_preproc.cpp:170 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:172 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 21 xmm0 [241])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:173 129 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 half+0 S4 A32])
        (reg:SF 21 xmm0 [241])) ge2fitman_preproc.cpp:173 129 {*movsf_internal}
     (nil))
(insn 11 10 324 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:175 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              20 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 242
(code_label 324 11 12 3 50 "" [1 uses])
(note 12 324 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:175 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:SI 0 ax [orig:87 D.26006 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [242])
                (const_int 324 [0x144])) [0 procpar_info_11(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:175 90 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.26006 ] [88])
                (ashift:SI (reg:SI 0 ax [orig:87 D.26006 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:175 511 {*ashlsi3_1}
     (nil))
(insn 16 15 17 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.26006 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:175 7 {*cmpsi_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 327)
            (pc))) ge2fitman_preproc.cpp:175 612 {*jcc_1}
     (nil)
 -> 327)
;;  succ:       21
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 243 244 245 246 247 248 249 250 251 252 253 254 255 256
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 0 ax [orig:89 D.26007 ] [89])
        (sign_extend:DI (reg:SI 0 ax [243]))) ge2fitman_preproc.cpp:177 142 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg:DI 1 dx [orig:90 D.26007 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.26007 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:177 512 {*ashldi3_1}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 0 ax [244])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg/f:DI 1 dx [orig:91 D.26008 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 D.26007 ] [90])
                    (reg/f:DI 0 ax [244])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:177 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.26007 ] [90]))
        (nil)))
(insn 24 23 25 4 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 0 ax [orig:92 D.26007 ] [92])
        (sign_extend:DI (reg:SI 0 ax [245]))) ge2fitman_preproc.cpp:177 142 {*extendsidi2_rex64}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg:DI 2 cx [orig:93 D.26007 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.26007 ] [92])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:177 512 {*ashldi3_1}
     (nil))
(insn 27 26 28 4 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.26008 ] [94])
                (plus:DI (reg/f:DI 0 ax [246])
                    (reg:DI 2 cx [orig:93 D.26007 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:177 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:93 D.26007 ] [93]))
        (nil)))
(insn 29 28 30 4 (set (reg:SF 22 xmm1 [orig:95 D.26009 ] [95])
        (mem:SF (reg/f:DI 0 ax [orig:94 D.26008 ] [94]) [0 *_20+0 S4 A32])) ge2fitman_preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 30 29 31 4 (set (reg/f:DI 0 ax [247])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SF 21 xmm0 [orig:96 D.26009 ] [96])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [247])
                (const_int 4 [0x4])) [0 preprocess_22(D)->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SF 21 xmm0 [orig:97 D.26009 ] [97])
        (mult:SF (reg:SF 21 xmm0 [orig:96 D.26009 ] [96])
            (reg:SF 22 xmm1 [orig:95 D.26009 ] [95]))) ge2fitman_preproc.cpp:177 797 {*fop_sf_comm_sse}
     (nil))
(insn 33 32 34 4 (set (mem:SF (reg/f:DI 1 dx [orig:91 D.26008 ] [91]) [0 *_17+0 S4 A32])
        (reg:SF 21 xmm0 [orig:97 D.26009 ] [97])) ge2fitman_preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 34 33 35 4 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:178 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 0 ax [orig:98 D.26010 ] [98])
        (sign_extend:DI (reg:SI 0 ax [248]))) ge2fitman_preproc.cpp:178 142 {*extendsidi2_rex64}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 0 ax [orig:99 D.26010 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 D.26010 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 218 {*adddi_1}
     (nil))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 1 dx [orig:100 D.26010 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 D.26010 ] [99])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 512 {*ashldi3_1}
     (nil))
(insn 38 37 39 4 (set (reg/f:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:178 89 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg/f:DI 1 dx [orig:101 D.26008 ] [101])
                (plus:DI (reg:DI 1 dx [orig:100 D.26010 ] [100])
                    (reg/f:DI 0 ax [249])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.26010 ] [100]))
        (nil)))
(insn 40 39 41 4 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:178 90 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 0 ax [orig:102 D.26010 ] [102])
        (sign_extend:DI (reg:SI 0 ax [250]))) ge2fitman_preproc.cpp:178 142 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg:DI 0 ax [orig:103 D.26010 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 D.26010 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 218 {*adddi_1}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 2 cx [orig:104 D.26010 ] [104])
                (ashift:DI (reg:DI 0 ax [orig:103 D.26010 ] [103])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 512 {*ashldi3_1}
     (nil))
(insn 44 43 45 4 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:178 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.26008 ] [105])
                (plus:DI (reg/f:DI 0 ax [251])
                    (reg:DI 2 cx [orig:104 D.26010 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:178 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:104 D.26010 ] [104]))
        (nil)))
(insn 46 45 47 4 (set (reg:SF 22 xmm1 [orig:106 D.26009 ] [106])
        (mem:SF (reg/f:DI 0 ax [orig:105 D.26008 ] [105]) [0 *_33+0 S4 A32])) ge2fitman_preproc.cpp:178 129 {*movsf_internal}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [252])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:178 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SF 21 xmm0 [orig:107 D.26009 ] [107])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [252])
                (const_int 4 [0x4])) [0 preprocess_22(D)->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:178 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg:SF 21 xmm0 [orig:108 D.26009 ] [108])
        (mult:SF (reg:SF 21 xmm0 [orig:107 D.26009 ] [107])
            (reg:SF 22 xmm1 [orig:106 D.26009 ] [106]))) ge2fitman_preproc.cpp:178 797 {*fop_sf_comm_sse}
     (nil))
(insn 50 49 51 4 (set (mem:SF (reg/f:DI 1 dx [orig:101 D.26008 ] [101]) [0 *_29+0 S4 A32])
        (reg:SF 21 xmm0 [orig:108 D.26009 ] [108])) ge2fitman_preproc.cpp:178 129 {*movsf_internal}
     (nil))
(insn 51 50 52 4 (set (reg:SI 0 ax [253])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:180 90 {*movsi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 0 ax [orig:109 D.26007 ] [109])
        (sign_extend:DI (reg:SI 0 ax [253]))) ge2fitman_preproc.cpp:180 142 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg:DI 1 dx [orig:110 D.26007 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 D.26007 ] [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 512 {*ashldi3_1}
     (nil))
(insn 54 53 55 4 (set (reg/f:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:180 89 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.26008 ] [111])
                (plus:DI (reg/f:DI 0 ax [254])
                    (reg:DI 1 dx [orig:110 D.26007 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.26007 ] [110]))
        (nil)))
(insn 56 55 57 4 (set (reg:SF 22 xmm1 [orig:112 D.26009 ] [112])
        (mem:SF (reg/f:DI 0 ax [orig:111 D.26008 ] [111]) [0 *_40+0 S4 A32])) ge2fitman_preproc.cpp:180 129 {*movsf_internal}
     (nil))
(insn 57 56 58 4 (set (reg:V4SF 21 xmm0 [255])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:180 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 58 57 59 4 (parallel [
            (set (reg:SF 21 xmm0 [orig:113 D.26009 ] [113])
                (abs:SF (reg:SF 22 xmm1 [orig:112 D.26009 ] [112])))
            (use (reg:V4SF 21 xmm0 [255]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:112 D.26009 ] [112]))
        (nil)))
(insn 59 58 60 4 (set (reg:DF 21 xmm0 [orig:114 D.26011 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.26009 ] [113]))) ge2fitman_preproc.cpp:180 152 {*extendsfdf2_sse}
     (nil))
(insn 60 59 61 4 (set (reg:DF 22 xmm1 [256])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:180 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 61 60 62 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [256])
            (reg:DF 21 xmm0 [orig:114 D.26011 ] [114]))) ge2fitman_preproc.cpp:180 56 {*cmpiudf_sse}
     (nil))
(jump_insn 62 61 66 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 181)
            (pc))) ge2fitman_preproc.cpp:180 612 {*jcc_1}
     (nil)
 -> 181)
;;  succ:       5 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 118 257 258 259
(note 66 62 67 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 5 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:180 90 {*movsi_internal}
     (nil))
(insn 68 67 69 5 (set (reg:DI 0 ax [orig:115 D.26007 ] [115])
        (sign_extend:DI (reg:SI 0 ax [257]))) ge2fitman_preproc.cpp:180 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 5 (parallel [
            (set (reg:DI 1 dx [orig:116 D.26007 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.26007 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 5 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:180 89 {*movdi_internal}
     (nil))
(insn 71 70 72 5 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.26008 ] [117])
                (plus:DI (reg/f:DI 0 ax [258])
                    (reg:DI 1 dx [orig:116 D.26007 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:180 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.26007 ] [116]))
        (nil)))
(insn 72 71 73 5 (set (reg:SF 21 xmm0 [orig:118 D.26009 ] [118])
        (mem:SF (reg/f:DI 0 ax [orig:117 D.26008 ] [117]) [0 *_46+0 S4 A32])) ge2fitman_preproc.cpp:180 129 {*movsf_internal}
     (nil))
(insn 73 72 74 5 (set (reg:SF 22 xmm1 [259])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:180 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 74 73 75 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:118 D.26009 ] [118])
            (reg:SF 22 xmm1 [259]))) ge2fitman_preproc.cpp:180 55 {*cmpiusf_sse}
     (nil))
(jump_insn 75 74 341 5 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 350)
            (pc))) ge2fitman_preproc.cpp:180 612 {*jcc_1}
     (nil)
 -> 350)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 118
;; lr  def 	 17 [flags] 260
(note 341 75 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 341 77 6 (set (reg:SF 22 xmm1 [260])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:180 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 77 76 78 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:118 D.26009 ] [118])
            (reg:SF 22 xmm1 [260]))) ge2fitman_preproc.cpp:180 55 {*cmpiusf_sse}
     (nil))
(jump_insn 78 77 350 6 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 181)
            (pc))) ge2fitman_preproc.cpp:180 612 {*jcc_1}
     (nil)
 -> 181)
;;  succ:       7 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 261 262 263 264 265 266 267 268 269
(code_label 350 78 82 7 53 "" [1 uses])
(note 82 350 83 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 7 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:181 90 {*movsi_internal}
     (nil))
(insn 84 83 85 7 (set (reg:DI 0 ax [orig:119 D.26010 ] [119])
        (sign_extend:DI (reg:SI 0 ax [261]))) ge2fitman_preproc.cpp:181 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 7 (parallel [
            (set (reg:DI 0 ax [orig:120 D.26010 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 D.26010 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:181 218 {*adddi_1}
     (nil))
(insn 86 85 87 7 (parallel [
            (set (reg:DI 1 dx [orig:121 D.26010 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.26010 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:181 512 {*ashldi3_1}
     (nil))
(insn 87 86 88 7 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:181 89 {*movdi_internal}
     (nil))
(insn 88 87 89 7 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.26008 ] [122])
                (plus:DI (reg/f:DI 0 ax [262])
                    (reg:DI 1 dx [orig:121 D.26010 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:181 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.26010 ] [121]))
        (nil)))
(insn 89 88 90 7 (set (reg:SF 22 xmm1 [orig:123 D.26009 ] [123])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.26008 ] [122]) [0 *_51+0 S4 A32])) ge2fitman_preproc.cpp:181 129 {*movsf_internal}
     (nil))
(insn 90 89 91 7 (set (reg:V4SF 21 xmm0 [263])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:181 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 91 90 92 7 (parallel [
            (set (reg:SF 21 xmm0 [orig:124 D.26009 ] [124])
                (abs:SF (reg:SF 22 xmm1 [orig:123 D.26009 ] [123])))
            (use (reg:V4SF 21 xmm0 [263]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:181 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:123 D.26009 ] [123]))
        (nil)))
(insn 92 91 93 7 (set (reg/f:DI 0 ax [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:181 89 {*movdi_internal}
     (nil))
(insn 93 92 94 7 (set (reg:SF 22 xmm1 [orig:125 D.26009 ] [125])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [264])
                (const_int 4 [0x4])) [0 preprocess_22(D)->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:181 129 {*movsf_internal}
     (nil))
(insn 94 93 95 7 (set (reg:SF 21 xmm0 [265])
        (mult:SF (reg:SF 21 xmm0 [orig:124 D.26009 ] [124])
            (reg:SF 22 xmm1 [orig:125 D.26009 ] [125]))) ge2fitman_preproc.cpp:181 797 {*fop_sf_comm_sse}
     (nil))
(insn 95 94 96 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])
        (reg:SF 21 xmm0 [265])) ge2fitman_preproc.cpp:181 129 {*movsf_internal}
     (nil))
(insn 96 95 97 7 (set (reg:SI 0 ax [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:183 90 {*movsi_internal}
     (nil))
(insn 97 96 98 7 (set (reg:DI 0 ax [orig:126 D.26007 ] [126])
        (sign_extend:DI (reg:SI 0 ax [266]))) ge2fitman_preproc.cpp:183 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 7 (parallel [
            (set (reg:DI 0 ax [orig:127 D.26007 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 D.26007 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 512 {*ashldi3_1}
     (nil))
(insn 99 98 100 7 (parallel [
            (set (reg:DI 1 dx [orig:128 D.26010 ] [128])
                (plus:DI (reg:DI 0 ax [orig:127 D.26007 ] [127])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 218 {*adddi_1}
     (nil))
(insn 100 99 101 7 (set (reg/f:DI 0 ax [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:183 89 {*movdi_internal}
     (nil))
(insn 101 100 102 7 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.26008 ] [129])
                (plus:DI (reg/f:DI 0 ax [267])
                    (reg:DI 1 dx [orig:128 D.26010 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:128 D.26010 ] [128]))
        (nil)))
(insn 102 101 103 7 (set (reg:SF 22 xmm1 [orig:130 D.26009 ] [130])
        (mem:SF (reg/f:DI 0 ax [orig:129 D.26008 ] [129]) [0 *_59+0 S4 A32])) ge2fitman_preproc.cpp:183 129 {*movsf_internal}
     (nil))
(insn 103 102 104 7 (set (reg:V4SF 21 xmm0 [268])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:183 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 104 103 105 7 (parallel [
            (set (reg:SF 21 xmm0 [orig:131 D.26009 ] [131])
                (abs:SF (reg:SF 22 xmm1 [orig:130 D.26009 ] [130])))
            (use (reg:V4SF 21 xmm0 [268]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:130 D.26009 ] [130]))
        (nil)))
(insn 105 104 106 7 (set (reg:DF 21 xmm0 [orig:132 D.26011 ] [132])
        (float_extend:DF (reg:SF 21 xmm0 [orig:131 D.26009 ] [131]))) ge2fitman_preproc.cpp:183 152 {*extendsfdf2_sse}
     (nil))
(insn 106 105 107 7 (set (reg:DF 22 xmm1 [269])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:183 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 107 106 108 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [269])
            (reg:DF 21 xmm0 [orig:132 D.26011 ] [132]))) ge2fitman_preproc.cpp:183 56 {*cmpiudf_sse}
     (nil))
(insn 108 107 109 7 (set (reg:QI 0 ax [orig:133 D.26012 ] [133])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) ge2fitman_preproc.cpp:183 607 {*setcc_qi}
     (nil))
(insn 109 108 110 7 (parallel [
            (set (reg:QI 0 ax [orig:134 D.26012 ] [134])
                (xor:QI (reg:QI 0 ax [orig:133 D.26012 ] [133])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 406 {*xorqi_1}
     (nil))
(insn 110 109 111 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:134 D.26012 ] [134])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:183 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 111 110 112 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 162)
            (pc))) ge2fitman_preproc.cpp:183 612 {*jcc_1}
     (nil)
 -> 162)
;;  succ:       8 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 135 136 137 270
(note 112 111 113 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 8 (set (reg:DF 21 xmm0 [orig:135 D.26011 ] [135])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) ge2fitman_preproc.cpp:183 152 {*extendsfdf2_sse}
     (nil))
(insn 114 113 115 8 (set (reg:DF 22 xmm1 [270])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:183 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 115 114 116 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [270])
            (reg:DF 21 xmm0 [orig:135 D.26011 ] [135]))) ge2fitman_preproc.cpp:183 56 {*cmpiudf_sse}
     (nil))
(insn 116 115 117 8 (set (reg:QI 0 ax [orig:136 D.26012 ] [136])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) ge2fitman_preproc.cpp:183 607 {*setcc_qi}
     (nil))
(insn 117 116 118 8 (parallel [
            (set (reg:QI 0 ax [orig:137 D.26012 ] [137])
                (xor:QI (reg:QI 0 ax [orig:136 D.26012 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 406 {*xorqi_1}
     (nil))
(insn 118 117 119 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:137 D.26012 ] [137])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:183 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 119 118 120 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 162)
            (pc))) ge2fitman_preproc.cpp:183 612 {*jcc_1}
     (nil)
 -> 162)
;;  succ:       9 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 271 272
(note 120 119 121 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 9 (set (reg:SI 0 ax [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:183 90 {*movsi_internal}
     (nil))
(insn 122 121 123 9 (parallel [
            (set (reg:SI 1 dx [orig:138 D.26006 ] [138])
                (plus:SI (reg:SI 0 ax [271])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 123 122 124 9 (set (reg/f:DI 0 ax [272])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:183 89 {*movdi_internal}
     (nil))
(insn 124 123 125 9 (set (reg:SI 0 ax [orig:139 D.26006 ] [139])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [272])
                (const_int 324 [0x144])) [0 procpar_info_11(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:183 90 {*movsi_internal}
     (nil))
(insn 125 124 126 9 (parallel [
            (set (reg:SI 0 ax [orig:140 D.26006 ] [140])
                (ashift:SI (reg:SI 0 ax [orig:139 D.26006 ] [139])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:183 511 {*ashlsi3_1}
     (nil))
(insn 126 125 127 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:138 D.26006 ] [138])
            (reg:SI 0 ax [orig:140 D.26006 ] [140]))) ge2fitman_preproc.cpp:183 7 {*cmpsi_1}
     (nil))
(jump_insn 127 126 128 9 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 162)
            (pc))) ge2fitman_preproc.cpp:183 612 {*jcc_1}
     (nil)
 -> 162)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 273 274 275 276 277 278 279 280
(note 128 127 129 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 10 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:185 90 {*movsi_internal}
     (nil))
(insn 130 129 131 10 (set (reg:DI 0 ax [orig:141 D.26007 ] [141])
        (sign_extend:DI (reg:SI 0 ax [273]))) ge2fitman_preproc.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 131 130 132 10 (parallel [
            (set (reg:DI 1 dx [orig:142 D.26007 ] [142])
                (ashift:DI (reg:DI 0 ax [orig:141 D.26007 ] [141])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 512 {*ashldi3_1}
     (nil))
(insn 132 131 133 10 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:185 89 {*movdi_internal}
     (nil))
(insn 133 132 134 10 (parallel [
            (set (reg/f:DI 3 bx [orig:143 D.26008 ] [143])
                (plus:DI (reg:DI 1 dx [orig:142 D.26007 ] [142])
                    (reg/f:DI 0 ax [274])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:142 D.26007 ] [142]))
        (nil)))
(insn 134 133 135 10 (set (reg:SI 0 ax [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:185 90 {*movsi_internal}
     (nil))
(insn 135 134 136 10 (set (reg:DI 0 ax [orig:144 D.26007 ] [144])
        (sign_extend:DI (reg:SI 0 ax [275]))) ge2fitman_preproc.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 136 135 137 10 (parallel [
            (set (reg:DI 0 ax [orig:145 D.26007 ] [145])
                (ashift:DI (reg:DI 0 ax [orig:144 D.26007 ] [144])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 512 {*ashldi3_1}
     (nil))
(insn 137 136 138 10 (parallel [
            (set (reg:DI 1 dx [orig:146 D.26010 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 D.26007 ] [145])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 218 {*adddi_1}
     (nil))
(insn 138 137 139 10 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:185 89 {*movdi_internal}
     (nil))
(insn 139 138 140 10 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.26008 ] [147])
                (plus:DI (reg/f:DI 0 ax [276])
                    (reg:DI 1 dx [orig:146 D.26010 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:146 D.26010 ] [146]))
        (nil)))
(insn 140 139 141 10 (set (reg:SF 22 xmm1 [orig:148 D.26009 ] [148])
        (mem:SF (reg/f:DI 0 ax [orig:147 D.26008 ] [147]) [0 *_77+0 S4 A32])) ge2fitman_preproc.cpp:185 129 {*movsf_internal}
     (nil))
(insn 141 140 142 10 (set (reg:SI 0 ax [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:185 90 {*movsi_internal}
     (nil))
(insn 142 141 143 10 (set (reg:DI 0 ax [orig:149 D.26007 ] [149])
        (sign_extend:DI (reg:SI 0 ax [277]))) ge2fitman_preproc.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 143 142 144 10 (parallel [
            (set (reg:DI 0 ax [orig:150 D.26007 ] [150])
                (ashift:DI (reg:DI 0 ax [orig:149 D.26007 ] [149])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 512 {*ashldi3_1}
     (nil))
(insn 144 143 145 10 (parallel [
            (set (reg:DI 1 dx [orig:151 D.26010 ] [151])
                (plus:DI (reg:DI 0 ax [orig:150 D.26007 ] [150])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 218 {*adddi_1}
     (nil))
(insn 145 144 146 10 (set (reg/f:DI 0 ax [278])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:185 89 {*movdi_internal}
     (nil))
(insn 146 145 147 10 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.26008 ] [152])
                (plus:DI (reg/f:DI 0 ax [278])
                    (reg:DI 1 dx [orig:151 D.26010 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:185 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.26010 ] [151]))
        (nil)))
(insn 147 146 148 10 (set (reg:SF 21 xmm0 [orig:153 D.26009 ] [153])
        (mem:SF (reg/f:DI 0 ax [orig:152 D.26008 ] [152]) [0 *_82+0 S4 A32])) ge2fitman_preproc.cpp:185 129 {*movsf_internal}
     (nil))
(insn 148 147 149 10 (set (reg:SF 22 xmm1 [orig:154 D.26009 ] [154])
        (mult:SF (reg:SF 22 xmm1 [orig:148 D.26009 ] [148])
            (reg:SF 21 xmm0 [orig:153 D.26009 ] [153]))) ge2fitman_preproc.cpp:185 797 {*fop_sf_comm_sse}
     (nil))
(insn 149 148 150 10 (set (reg:SF 21 xmm0 [279])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])) ge2fitman_preproc.cpp:186 129 {*movsf_internal}
     (nil))
(insn 150 149 151 10 (set (reg:SF 21 xmm0 [orig:155 D.26009 ] [155])
        (mult:SF (reg:SF 21 xmm0 [279])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) ge2fitman_preproc.cpp:186 797 {*fop_sf_comm_sse}
     (nil))
(insn 151 150 152 10 (set (reg:SF 21 xmm0 [orig:156 D.26009 ] [156])
        (plus:SF (reg:SF 21 xmm0 [orig:155 D.26009 ] [155])
            (reg:SF 22 xmm1 [orig:154 D.26009 ] [154]))) ge2fitman_preproc.cpp:185 797 {*fop_sf_comm_sse}
     (nil))
(insn 152 151 153 10 (set (reg:DF 21 xmm0 [orig:157 D.26011 ] [157])
        (float_extend:DF (reg:SF 21 xmm0 [orig:156 D.26009 ] [156]))) ge2fitman_preproc.cpp:185 152 {*extendsfdf2_sse}
     (nil))
(insn 153 152 154 10 (set (reg:DF 22 xmm1 [280])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:185 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 154 153 156 10 (set (reg:DF 21 xmm0 [orig:158 D.26011 ] [158])
        (mult:DF (reg:DF 21 xmm0 [orig:157 D.26011 ] [157])
            (reg:DF 22 xmm1 [280]))) ge2fitman_preproc.cpp:185 798 {*fop_df_comm_sse}
     (nil))
(call_insn 156 154 158 10 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:185 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 158 156 159 10 (set (reg:SF 21 xmm0 [orig:160 D.26009 ] [160])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:159 D.26011 ] [159]))) ge2fitman_preproc.cpp:186 157 {*truncdfsf_fast_sse}
     (nil))
(insn 159 158 353 10 (set (mem:SF (reg/f:DI 3 bx [orig:143 D.26008 ] [143]) [0 *_73+0 S4 A32])
        (reg:SF 21 xmm0 [orig:160 D.26009 ] [160])) ge2fitman_preproc.cpp:186 129 {*movsf_internal}
     (nil))
(jump_insn 353 159 354 10 (set (pc)
        (label_ref 181)) ge2fitman_preproc.cpp:186 654 {jump}
     (nil)
 -> 181)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 354 353 162)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8
;;              9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 161 162 163 164 165 166 167 168 169 281 282 283 284 285
(code_label 162 354 163 11 43 "" [3 uses])
(note 163 162 164 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 11 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:188 90 {*movsi_internal}
     (nil))
(insn 165 164 166 11 (set (reg:DI 0 ax [orig:161 D.26007 ] [161])
        (sign_extend:DI (reg:SI 0 ax [281]))) ge2fitman_preproc.cpp:188 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 11 (parallel [
            (set (reg:DI 1 dx [orig:162 D.26007 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.26007 ] [161])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 512 {*ashldi3_1}
     (nil))
(insn 167 166 168 11 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:188 89 {*movdi_internal}
     (nil))
(insn 168 167 169 11 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.26008 ] [163])
                (plus:DI (reg/f:DI 0 ax [282])
                    (reg:DI 1 dx [orig:162 D.26007 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.26007 ] [162]))
        (nil)))
(insn 169 168 170 11 (set (reg:SI 1 dx [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:188 90 {*movsi_internal}
     (nil))
(insn 170 169 171 11 (set (reg:DI 1 dx [orig:164 D.26007 ] [164])
        (sign_extend:DI (reg:SI 1 dx [283]))) ge2fitman_preproc.cpp:188 142 {*extendsidi2_rex64}
     (nil))
(insn 171 170 172 11 (parallel [
            (set (reg:DI 1 dx [orig:165 D.26007 ] [165])
                (ashift:DI (reg:DI 1 dx [orig:164 D.26007 ] [164])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 512 {*ashldi3_1}
     (nil))
(insn 172 171 173 11 (parallel [
            (set (reg:DI 2 cx [orig:166 D.26010 ] [166])
                (plus:DI (reg:DI 1 dx [orig:165 D.26007 ] [165])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 218 {*adddi_1}
     (nil))
(insn 173 172 174 11 (set (reg/f:DI 1 dx [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:188 89 {*movdi_internal}
     (nil))
(insn 174 173 175 11 (parallel [
            (set (reg/f:DI 1 dx [orig:167 D.26008 ] [167])
                (plus:DI (reg/f:DI 1 dx [284])
                    (reg:DI 2 cx [orig:166 D.26010 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:188 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:166 D.26010 ] [166]))
        (nil)))
(insn 175 174 176 11 (set (reg:SF 22 xmm1 [orig:168 D.26009 ] [168])
        (mem:SF (reg/f:DI 1 dx [orig:167 D.26008 ] [167]) [0 *_99+0 S4 A32])) ge2fitman_preproc.cpp:188 129 {*movsf_internal}
     (nil))
(insn 176 175 177 11 (set (reg:SF 21 xmm0 [285])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:188 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 177 176 178 11 (set (reg:SF 21 xmm0 [orig:169 D.26009 ] [169])
        (mult:SF (reg:SF 21 xmm0 [285])
            (reg:SF 22 xmm1 [orig:168 D.26009 ] [168]))) ge2fitman_preproc.cpp:188 797 {*fop_sf_comm_sse}
     (nil))
(insn 178 177 181 11 (set (mem:SF (reg/f:DI 0 ax [orig:163 D.26008 ] [163]) [0 *_95+0 S4 A32])
        (reg:SF 21 xmm0 [orig:169 D.26009 ] [169])) ge2fitman_preproc.cpp:188 129 {*movsf_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              4
;;              6
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 170 171 172 173 174 175 176 286 287 288 289
(code_label 181 178 182 12 40 "" [3 uses])
(note 182 181 183 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 183 182 184 12 (set (reg:SI 0 ax [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:192 90 {*movsi_internal}
     (nil))
(insn 184 183 185 12 (set (reg:DI 0 ax [orig:170 D.26010 ] [170])
        (sign_extend:DI (reg:SI 0 ax [286]))) ge2fitman_preproc.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 185 184 186 12 (parallel [
            (set (reg:DI 0 ax [orig:171 D.26010 ] [171])
                (plus:DI (reg:DI 0 ax [orig:170 D.26010 ] [170])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 218 {*adddi_1}
     (nil))
(insn 186 185 187 12 (parallel [
            (set (reg:DI 1 dx [orig:172 D.26010 ] [172])
                (ashift:DI (reg:DI 0 ax [orig:171 D.26010 ] [171])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 512 {*ashldi3_1}
     (nil))
(insn 187 186 188 12 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:192 89 {*movdi_internal}
     (nil))
(insn 188 187 189 12 (parallel [
            (set (reg/f:DI 0 ax [orig:173 D.26008 ] [173])
                (plus:DI (reg/f:DI 0 ax [287])
                    (reg:DI 1 dx [orig:172 D.26010 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:172 D.26010 ] [172]))
        (nil)))
(insn 189 188 190 12 (set (reg:SF 22 xmm1 [orig:174 D.26009 ] [174])
        (mem:SF (reg/f:DI 0 ax [orig:173 D.26008 ] [173]) [0 *_106+0 S4 A32])) ge2fitman_preproc.cpp:192 129 {*movsf_internal}
     (nil))
(insn 190 189 191 12 (set (reg:V4SF 21 xmm0 [288])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:192 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 191 190 192 12 (parallel [
            (set (reg:SF 21 xmm0 [orig:175 D.26009 ] [175])
                (abs:SF (reg:SF 22 xmm1 [orig:174 D.26009 ] [174])))
            (use (reg:V4SF 21 xmm0 [288]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:174 D.26009 ] [174]))
        (nil)))
(insn 192 191 193 12 (set (reg:DF 21 xmm0 [orig:176 D.26011 ] [176])
        (float_extend:DF (reg:SF 21 xmm0 [orig:175 D.26009 ] [175]))) ge2fitman_preproc.cpp:192 152 {*extendsfdf2_sse}
     (nil))
(insn 193 192 194 12 (set (reg:DF 22 xmm1 [289])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:192 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 194 193 195 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [289])
            (reg:DF 21 xmm0 [orig:176 D.26011 ] [176]))) ge2fitman_preproc.cpp:192 56 {*cmpiudf_sse}
     (nil))
(jump_insn 195 194 199 12 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 321)
            (pc))) ge2fitman_preproc.cpp:192 612 {*jcc_1}
     (nil)
 -> 321)
;;  succ:       13 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 177 178 179 180 181 290 291 292
(note 199 195 200 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 200 199 201 13 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:192 90 {*movsi_internal}
     (nil))
(insn 201 200 202 13 (set (reg:DI 0 ax [orig:177 D.26010 ] [177])
        (sign_extend:DI (reg:SI 0 ax [290]))) ge2fitman_preproc.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 202 201 203 13 (parallel [
            (set (reg:DI 0 ax [orig:178 D.26010 ] [178])
                (plus:DI (reg:DI 0 ax [orig:177 D.26010 ] [177])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 218 {*adddi_1}
     (nil))
(insn 203 202 204 13 (parallel [
            (set (reg:DI 1 dx [orig:179 D.26010 ] [179])
                (ashift:DI (reg:DI 0 ax [orig:178 D.26010 ] [178])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 512 {*ashldi3_1}
     (nil))
(insn 204 203 205 13 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:192 89 {*movdi_internal}
     (nil))
(insn 205 204 206 13 (parallel [
            (set (reg/f:DI 0 ax [orig:180 D.26008 ] [180])
                (plus:DI (reg/f:DI 0 ax [291])
                    (reg:DI 1 dx [orig:179 D.26010 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:192 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:179 D.26010 ] [179]))
        (nil)))
(insn 206 205 207 13 (set (reg:SF 21 xmm0 [orig:181 D.26009 ] [181])
        (mem:SF (reg/f:DI 0 ax [orig:180 D.26008 ] [180]) [0 *_113+0 S4 A32])) ge2fitman_preproc.cpp:192 129 {*movsf_internal}
     (nil))
(insn 207 206 208 13 (set (reg:SF 22 xmm1 [292])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:192 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 208 207 209 13 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:181 D.26009 ] [181])
            (reg:SF 22 xmm1 [292]))) ge2fitman_preproc.cpp:192 55 {*cmpiusf_sse}
     (nil))
(jump_insn 209 208 346 13 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 352)
            (pc))) ge2fitman_preproc.cpp:192 612 {*jcc_1}
     (nil)
 -> 352)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 181
;; lr  def 	 17 [flags] 293
(note 346 209 210 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 210 346 211 14 (set (reg:SF 22 xmm1 [293])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:192 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 211 210 212 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:181 D.26009 ] [181])
            (reg:SF 22 xmm1 [293]))) ge2fitman_preproc.cpp:192 55 {*cmpiusf_sse}
     (nil))
(jump_insn 212 211 352 14 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 321)
            (pc))) ge2fitman_preproc.cpp:192 612 {*jcc_1}
     (nil)
 -> 321)
;;  succ:       15 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 294 295 296 297 298 299 300 301 302
(code_label 352 212 216 15 55 "" [1 uses])
(note 216 352 217 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 217 216 218 15 (set (reg:SI 0 ax [294])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:193 90 {*movsi_internal}
     (nil))
(insn 218 217 219 15 (set (reg:DI 0 ax [orig:182 D.26010 ] [182])
        (sign_extend:DI (reg:SI 0 ax [294]))) ge2fitman_preproc.cpp:193 142 {*extendsidi2_rex64}
     (nil))
(insn 219 218 220 15 (parallel [
            (set (reg:DI 0 ax [orig:183 D.26010 ] [183])
                (plus:DI (reg:DI 0 ax [orig:182 D.26010 ] [182])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:193 218 {*adddi_1}
     (nil))
(insn 220 219 221 15 (parallel [
            (set (reg:DI 1 dx [orig:184 D.26010 ] [184])
                (ashift:DI (reg:DI 0 ax [orig:183 D.26010 ] [183])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:193 512 {*ashldi3_1}
     (nil))
(insn 221 220 222 15 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:193 89 {*movdi_internal}
     (nil))
(insn 222 221 223 15 (parallel [
            (set (reg/f:DI 0 ax [orig:185 D.26008 ] [185])
                (plus:DI (reg/f:DI 0 ax [295])
                    (reg:DI 1 dx [orig:184 D.26010 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:193 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:184 D.26010 ] [184]))
        (nil)))
(insn 223 222 224 15 (set (reg:SF 22 xmm1 [orig:186 D.26009 ] [186])
        (mem:SF (reg/f:DI 0 ax [orig:185 D.26008 ] [185]) [0 *_118+0 S4 A32])) ge2fitman_preproc.cpp:193 129 {*movsf_internal}
     (nil))
(insn 224 223 225 15 (set (reg:V4SF 21 xmm0 [296])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:193 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 225 224 226 15 (parallel [
            (set (reg:SF 21 xmm0 [orig:187 D.26009 ] [187])
                (abs:SF (reg:SF 22 xmm1 [orig:186 D.26009 ] [186])))
            (use (reg:V4SF 21 xmm0 [296]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:193 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:186 D.26009 ] [186]))
        (nil)))
(insn 226 225 227 15 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:193 89 {*movdi_internal}
     (nil))
(insn 227 226 228 15 (set (reg:SF 22 xmm1 [orig:188 D.26009 ] [188])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [297])
                (const_int 4 [0x4])) [0 preprocess_22(D)->scale_factor+0 S4 A32])) ge2fitman_preproc.cpp:193 129 {*movsf_internal}
     (nil))
(insn 228 227 229 15 (set (reg:SF 21 xmm0 [298])
        (mult:SF (reg:SF 21 xmm0 [orig:187 D.26009 ] [187])
            (reg:SF 22 xmm1 [orig:188 D.26009 ] [188]))) ge2fitman_preproc.cpp:193 797 {*fop_sf_comm_sse}
     (nil))
(insn 229 228 230 15 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])
        (reg:SF 21 xmm0 [298])) ge2fitman_preproc.cpp:193 129 {*movsf_internal}
     (nil))
(insn 230 229 231 15 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:195 90 {*movsi_internal}
     (nil))
(insn 231 230 232 15 (set (reg:DI 0 ax [orig:189 D.26010 ] [189])
        (sign_extend:DI (reg:SI 0 ax [299]))) ge2fitman_preproc.cpp:195 142 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 15 (parallel [
            (set (reg:DI 0 ax [orig:190 D.26010 ] [190])
                (plus:DI (reg:DI 0 ax [orig:189 D.26010 ] [189])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 218 {*adddi_1}
     (nil))
(insn 233 232 234 15 (parallel [
            (set (reg:DI 0 ax [orig:191 D.26010 ] [191])
                (ashift:DI (reg:DI 0 ax [orig:190 D.26010 ] [190])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 512 {*ashldi3_1}
     (nil))
(insn 234 233 235 15 (parallel [
            (set (reg:DI 1 dx [orig:192 D.26010 ] [192])
                (plus:DI (reg:DI 0 ax [orig:191 D.26010 ] [191])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 218 {*adddi_1}
     (nil))
(insn 235 234 236 15 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:195 89 {*movdi_internal}
     (nil))
(insn 236 235 237 15 (parallel [
            (set (reg/f:DI 0 ax [orig:193 D.26008 ] [193])
                (plus:DI (reg/f:DI 0 ax [300])
                    (reg:DI 1 dx [orig:192 D.26010 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:192 D.26010 ] [192]))
        (nil)))
(insn 237 236 238 15 (set (reg:SF 22 xmm1 [orig:194 D.26009 ] [194])
        (mem:SF (reg/f:DI 0 ax [orig:193 D.26008 ] [193]) [0 *_127+0 S4 A32])) ge2fitman_preproc.cpp:195 129 {*movsf_internal}
     (nil))
(insn 238 237 239 15 (set (reg:V4SF 21 xmm0 [301])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:195 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 239 238 240 15 (parallel [
            (set (reg:SF 21 xmm0 [orig:195 D.26009 ] [195])
                (abs:SF (reg:SF 22 xmm1 [orig:194 D.26009 ] [194])))
            (use (reg:V4SF 21 xmm0 [301]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:194 D.26009 ] [194]))
        (nil)))
(insn 240 239 241 15 (set (reg:DF 21 xmm0 [orig:196 D.26011 ] [196])
        (float_extend:DF (reg:SF 21 xmm0 [orig:195 D.26009 ] [195]))) ge2fitman_preproc.cpp:195 152 {*extendsfdf2_sse}
     (nil))
(insn 241 240 242 15 (set (reg:DF 22 xmm1 [302])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:195 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 242 241 243 15 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [302])
            (reg:DF 21 xmm0 [orig:196 D.26011 ] [196]))) ge2fitman_preproc.cpp:195 56 {*cmpiudf_sse}
     (nil))
(insn 243 242 244 15 (set (reg:QI 0 ax [orig:197 D.26012 ] [197])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) ge2fitman_preproc.cpp:195 607 {*setcc_qi}
     (nil))
(insn 244 243 245 15 (parallel [
            (set (reg:QI 0 ax [orig:198 D.26012 ] [198])
                (xor:QI (reg:QI 0 ax [orig:197 D.26012 ] [197])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 406 {*xorqi_1}
     (nil))
(insn 245 244 246 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:198 D.26012 ] [198])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:195 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 246 245 247 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 300)
            (pc))) ge2fitman_preproc.cpp:195 612 {*jcc_1}
     (nil)
 -> 300)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 199 200 201 303
(note 247 246 248 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 249 16 (set (reg:DF 21 xmm0 [orig:199 D.26011 ] [199])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) ge2fitman_preproc.cpp:195 152 {*extendsfdf2_sse}
     (nil))
(insn 249 248 250 16 (set (reg:DF 22 xmm1 [303])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:195 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 250 249 251 16 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [303])
            (reg:DF 21 xmm0 [orig:199 D.26011 ] [199]))) ge2fitman_preproc.cpp:195 56 {*cmpiudf_sse}
     (nil))
(insn 251 250 252 16 (set (reg:QI 0 ax [orig:200 D.26012 ] [200])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) ge2fitman_preproc.cpp:195 607 {*setcc_qi}
     (nil))
(insn 252 251 253 16 (parallel [
            (set (reg:QI 0 ax [orig:201 D.26012 ] [201])
                (xor:QI (reg:QI 0 ax [orig:200 D.26012 ] [200])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 406 {*xorqi_1}
     (nil))
(insn 253 252 254 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:201 D.26012 ] [201])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:195 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 254 253 255 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 300)
            (pc))) ge2fitman_preproc.cpp:195 612 {*jcc_1}
     (nil)
 -> 300)
;;  succ:       17 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 202 203 204 304 305
(note 255 254 256 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 17 (set (reg:SI 0 ax [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:195 90 {*movsi_internal}
     (nil))
(insn 257 256 258 17 (parallel [
            (set (reg:SI 1 dx [orig:202 D.26006 ] [202])
                (plus:SI (reg:SI 0 ax [304])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 258 257 259 17 (set (reg/f:DI 0 ax [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:195 89 {*movdi_internal}
     (nil))
(insn 259 258 260 17 (set (reg:SI 0 ax [orig:203 D.26006 ] [203])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [305])
                (const_int 324 [0x144])) [0 procpar_info_11(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:195 90 {*movsi_internal}
     (nil))
(insn 260 259 261 17 (parallel [
            (set (reg:SI 0 ax [orig:204 D.26006 ] [204])
                (ashift:SI (reg:SI 0 ax [orig:203 D.26006 ] [203])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:195 511 {*ashlsi3_1}
     (nil))
(insn 261 260 262 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:202 D.26006 ] [202])
            (reg:SI 0 ax [orig:204 D.26006 ] [204]))) ge2fitman_preproc.cpp:195 7 {*cmpsi_1}
     (nil))
(jump_insn 262 261 263 17 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 300)
            (pc))) ge2fitman_preproc.cpp:195 612 {*jcc_1}
     (nil)
 -> 300)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 306 307 308 309 310 311 312 313
(note 263 262 264 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 264 263 265 18 (set (reg:SI 0 ax [306])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:197 90 {*movsi_internal}
     (nil))
(insn 265 264 266 18 (set (reg:DI 0 ax [orig:205 D.26010 ] [205])
        (sign_extend:DI (reg:SI 0 ax [306]))) ge2fitman_preproc.cpp:197 142 {*extendsidi2_rex64}
     (nil))
(insn 266 265 267 18 (parallel [
            (set (reg:DI 0 ax [orig:206 D.26010 ] [206])
                (plus:DI (reg:DI 0 ax [orig:205 D.26010 ] [205])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 218 {*adddi_1}
     (nil))
(insn 267 266 268 18 (parallel [
            (set (reg:DI 1 dx [orig:207 D.26010 ] [207])
                (ashift:DI (reg:DI 0 ax [orig:206 D.26010 ] [206])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 512 {*ashldi3_1}
     (nil))
(insn 268 267 269 18 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:197 89 {*movdi_internal}
     (nil))
(insn 269 268 270 18 (parallel [
            (set (reg/f:DI 3 bx [orig:208 D.26008 ] [208])
                (plus:DI (reg:DI 1 dx [orig:207 D.26010 ] [207])
                    (reg/f:DI 0 ax [307])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:207 D.26010 ] [207]))
        (nil)))
(insn 270 269 271 18 (set (reg:SI 0 ax [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:197 90 {*movsi_internal}
     (nil))
(insn 271 270 272 18 (set (reg:DI 0 ax [orig:209 D.26010 ] [209])
        (sign_extend:DI (reg:SI 0 ax [308]))) ge2fitman_preproc.cpp:197 142 {*extendsidi2_rex64}
     (nil))
(insn 272 271 273 18 (parallel [
            (set (reg:DI 0 ax [orig:210 D.26010 ] [210])
                (plus:DI (reg:DI 0 ax [orig:209 D.26010 ] [209])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 218 {*adddi_1}
     (nil))
(insn 273 272 274 18 (parallel [
            (set (reg:DI 0 ax [orig:211 D.26010 ] [211])
                (ashift:DI (reg:DI 0 ax [orig:210 D.26010 ] [210])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 512 {*ashldi3_1}
     (nil))
(insn 274 273 275 18 (parallel [
            (set (reg:DI 1 dx [orig:212 D.26010 ] [212])
                (plus:DI (reg:DI 0 ax [orig:211 D.26010 ] [211])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 218 {*adddi_1}
     (nil))
(insn 275 274 276 18 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:197 89 {*movdi_internal}
     (nil))
(insn 276 275 277 18 (parallel [
            (set (reg/f:DI 0 ax [orig:213 D.26008 ] [213])
                (plus:DI (reg/f:DI 0 ax [309])
                    (reg:DI 1 dx [orig:212 D.26010 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:212 D.26010 ] [212]))
        (nil)))
(insn 277 276 278 18 (set (reg:SF 22 xmm1 [orig:214 D.26009 ] [214])
        (mem:SF (reg/f:DI 0 ax [orig:213 D.26008 ] [213]) [0 *_147+0 S4 A32])) ge2fitman_preproc.cpp:197 129 {*movsf_internal}
     (nil))
(insn 278 277 279 18 (set (reg:SI 0 ax [310])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:197 90 {*movsi_internal}
     (nil))
(insn 279 278 280 18 (set (reg:DI 0 ax [orig:215 D.26010 ] [215])
        (sign_extend:DI (reg:SI 0 ax [310]))) ge2fitman_preproc.cpp:197 142 {*extendsidi2_rex64}
     (nil))
(insn 280 279 281 18 (parallel [
            (set (reg:DI 0 ax [orig:216 D.26010 ] [216])
                (plus:DI (reg:DI 0 ax [orig:215 D.26010 ] [215])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 218 {*adddi_1}
     (nil))
(insn 281 280 282 18 (parallel [
            (set (reg:DI 0 ax [orig:217 D.26010 ] [217])
                (ashift:DI (reg:DI 0 ax [orig:216 D.26010 ] [216])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 512 {*ashldi3_1}
     (nil))
(insn 282 281 283 18 (parallel [
            (set (reg:DI 1 dx [orig:218 D.26010 ] [218])
                (plus:DI (reg:DI 0 ax [orig:217 D.26010 ] [217])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 218 {*adddi_1}
     (nil))
(insn 283 282 284 18 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:197 89 {*movdi_internal}
     (nil))
(insn 284 283 285 18 (parallel [
            (set (reg/f:DI 0 ax [orig:219 D.26008 ] [219])
                (plus:DI (reg/f:DI 0 ax [311])
                    (reg:DI 1 dx [orig:218 D.26010 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:197 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.26010 ] [218]))
        (nil)))
(insn 285 284 286 18 (set (reg:SF 21 xmm0 [orig:220 D.26009 ] [220])
        (mem:SF (reg/f:DI 0 ax [orig:219 D.26008 ] [219]) [0 *_153+0 S4 A32])) ge2fitman_preproc.cpp:197 129 {*movsf_internal}
     (nil))
(insn 286 285 287 18 (set (reg:SF 22 xmm1 [orig:221 D.26009 ] [221])
        (mult:SF (reg:SF 22 xmm1 [orig:214 D.26009 ] [214])
            (reg:SF 21 xmm0 [orig:220 D.26009 ] [220]))) ge2fitman_preproc.cpp:197 797 {*fop_sf_comm_sse}
     (nil))
(insn 287 286 288 18 (set (reg:SF 21 xmm0 [312])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])) ge2fitman_preproc.cpp:198 129 {*movsf_internal}
     (nil))
(insn 288 287 289 18 (set (reg:SF 21 xmm0 [orig:222 D.26009 ] [222])
        (mult:SF (reg:SF 21 xmm0 [312])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) ge2fitman_preproc.cpp:198 797 {*fop_sf_comm_sse}
     (nil))
(insn 289 288 290 18 (set (reg:SF 21 xmm0 [orig:223 D.26009 ] [223])
        (plus:SF (reg:SF 21 xmm0 [orig:222 D.26009 ] [222])
            (reg:SF 22 xmm1 [orig:221 D.26009 ] [221]))) ge2fitman_preproc.cpp:197 797 {*fop_sf_comm_sse}
     (nil))
(insn 290 289 291 18 (set (reg:DF 21 xmm0 [orig:224 D.26011 ] [224])
        (float_extend:DF (reg:SF 21 xmm0 [orig:223 D.26009 ] [223]))) ge2fitman_preproc.cpp:197 152 {*extendsfdf2_sse}
     (nil))
(insn 291 290 292 18 (set (reg:DF 22 xmm1 [313])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:197 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 292 291 294 18 (set (reg:DF 21 xmm0 [orig:225 D.26011 ] [225])
        (mult:DF (reg:DF 21 xmm0 [orig:224 D.26011 ] [224])
            (reg:DF 22 xmm1 [313]))) ge2fitman_preproc.cpp:197 798 {*fop_df_comm_sse}
     (nil))
(call_insn 294 292 296 18 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:197 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 296 294 297 18 (set (reg:SF 21 xmm0 [orig:227 D.26009 ] [227])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:226 D.26011 ] [226]))) ge2fitman_preproc.cpp:198 157 {*truncdfsf_fast_sse}
     (nil))
(insn 297 296 355 18 (set (mem:SF (reg/f:DI 3 bx [orig:208 D.26008 ] [208]) [0 *_142+0 S4 A32])
        (reg:SF 21 xmm0 [orig:227 D.26009 ] [227])) ge2fitman_preproc.cpp:198 129 {*movsf_internal}
     (nil))
(jump_insn 355 297 356 18 (set (pc)
        (label_ref 321)) ge2fitman_preproc.cpp:198 654 {jump}
     (nil)
 -> 321)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 356 355 300)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;;              16
;;              17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 228 229 230 231 232 233 234 235 236 237 238 314 315 316 317 318
(code_label 300 356 301 19 48 "" [3 uses])
(note 301 300 302 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 19 (set (reg:SI 0 ax [314])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:200 90 {*movsi_internal}
     (nil))
(insn 303 302 304 19 (set (reg:DI 0 ax [orig:228 D.26010 ] [228])
        (sign_extend:DI (reg:SI 0 ax [314]))) ge2fitman_preproc.cpp:200 142 {*extendsidi2_rex64}
     (nil))
(insn 304 303 305 19 (parallel [
            (set (reg:DI 0 ax [orig:229 D.26010 ] [229])
                (plus:DI (reg:DI 0 ax [orig:228 D.26010 ] [228])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 218 {*adddi_1}
     (nil))
(insn 305 304 306 19 (parallel [
            (set (reg:DI 1 dx [orig:230 D.26010 ] [230])
                (ashift:DI (reg:DI 0 ax [orig:229 D.26010 ] [229])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 512 {*ashldi3_1}
     (nil))
(insn 306 305 307 19 (set (reg/f:DI 0 ax [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:200 89 {*movdi_internal}
     (nil))
(insn 307 306 308 19 (parallel [
            (set (reg/f:DI 0 ax [orig:231 D.26008 ] [231])
                (plus:DI (reg/f:DI 0 ax [315])
                    (reg:DI 1 dx [orig:230 D.26010 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:230 D.26010 ] [230]))
        (nil)))
(insn 308 307 309 19 (set (reg:SI 1 dx [316])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:200 90 {*movsi_internal}
     (nil))
(insn 309 308 310 19 (set (reg:DI 1 dx [orig:232 D.26010 ] [232])
        (sign_extend:DI (reg:SI 1 dx [316]))) ge2fitman_preproc.cpp:200 142 {*extendsidi2_rex64}
     (nil))
(insn 310 309 311 19 (parallel [
            (set (reg:DI 1 dx [orig:233 D.26010 ] [233])
                (plus:DI (reg:DI 1 dx [orig:232 D.26010 ] [232])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 218 {*adddi_1}
     (nil))
(insn 311 310 312 19 (parallel [
            (set (reg:DI 1 dx [orig:234 D.26010 ] [234])
                (ashift:DI (reg:DI 1 dx [orig:233 D.26010 ] [233])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 512 {*ashldi3_1}
     (nil))
(insn 312 311 313 19 (parallel [
            (set (reg:DI 2 cx [orig:235 D.26010 ] [235])
                (plus:DI (reg:DI 1 dx [orig:234 D.26010 ] [234])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 218 {*adddi_1}
     (nil))
(insn 313 312 314 19 (set (reg/f:DI 1 dx [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:200 89 {*movdi_internal}
     (nil))
(insn 314 313 315 19 (parallel [
            (set (reg/f:DI 1 dx [orig:236 D.26008 ] [236])
                (plus:DI (reg/f:DI 1 dx [317])
                    (reg:DI 2 cx [orig:235 D.26010 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:200 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:235 D.26010 ] [235]))
        (nil)))
(insn 315 314 316 19 (set (reg:SF 22 xmm1 [orig:237 D.26009 ] [237])
        (mem:SF (reg/f:DI 1 dx [orig:236 D.26008 ] [236]) [0 *_172+0 S4 A32])) ge2fitman_preproc.cpp:200 129 {*movsf_internal}
     (nil))
(insn 316 315 317 19 (set (reg:SF 21 xmm0 [318])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:200 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 317 316 318 19 (set (reg:SF 21 xmm0 [orig:238 D.26009 ] [238])
        (mult:SF (reg:SF 21 xmm0 [318])
            (reg:SF 22 xmm1 [orig:237 D.26009 ] [237]))) ge2fitman_preproc.cpp:200 797 {*fop_sf_comm_sse}
     (nil))
(insn 318 317 321 19 (set (mem:SF (reg/f:DI 0 ax [orig:231 D.26008 ] [231]) [0 *_167+0 S4 A32])
        (reg:SF 21 xmm0 [orig:238 D.26009 ] [238])) ge2fitman_preproc.cpp:200 129 {*movsf_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              12
;;              14
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 321 318 322 20 45 "" [3 uses])
(note 322 321 323 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 323 322 357 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:175 217 {*addsi_1}
     (nil))
(jump_insn 357 323 358 20 (set (pc)
        (label_ref 324)) ge2fitman_preproc.cpp:175 654 {jump}
     (nil)
 -> 324)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 358 357 327)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 239 240
(code_label 327 358 328 21 39 "" [1 uses])
(note 328 327 329 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 332 21 (set (reg:SI 0 ax [orig:239 D.26006 ] [239])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:205 90 {*movsi_internal}
     (nil))
(insn 332 329 336 21 (set (reg:SI 0 ax [orig:240 <retval> ] [240])
        (reg:SI 0 ax [orig:239 D.26006 ] [239])) ge2fitman_preproc.cpp:205 90 {*movsi_internal}
     (nil))
(insn 336 332 337 21 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:240 <retval> ] [240])) ge2fitman_preproc.cpp:206 90 {*movsi_internal}
     (nil))
(insn 337 336 359 21 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:206 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 359 337 0 NOTE_INSN_DELETED)

;; Function int baseline_correct(float*, Procpar_info*) (_Z16baseline_correctPfP12Procpar_info, funcdef_no=1023, decl_uid=24448, cgraph_uid=228, symbol_order=229)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 10:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 11:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 12:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 41:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 42:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 44:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 51:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 52:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 54:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 55:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) x  (1) m {*floatsidf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 62:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 65:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 66:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=164 from oldreg=149, assigning class SSE_REGS to r164
   66: r164:SF=r164:SF/r104:SF
      REG_DEAD r150:SF
      REG_DEAD r104:SF
    Inserting insn reload before:
  132: r164:SF=r150:SF
    Inserting insn reload after:
  133: r149:SF=r164:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 67:  (0) m  (1) v {*movsf_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) x  (1) m {*floatsidf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 69:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 72:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 73:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=165 from oldreg=152, assigning class SSE_REGS to r165
   73: r165:SF=r165:SF/r107:SF
      REG_DEAD r153:SF
      REG_DEAD r107:SF
    Inserting insn reload before:
  134: r165:SF=r153:SF
    Inserting insn reload after:
  135: r152:SF=r165:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 74:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 87
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 95:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 110:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 111:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 125: point = 0
   Insn 124: point = 0
   Insn 120: point = 1
   Insn 117: point = 3
  BB 6
   Insn 81: point = 4
   Insn 80: point = 4
   Insn 79: point = 5
   Insn 78: point = 7
   Insn 77: point = 9
  BB 7
   Insn 129: point = 10
   Insn 111: point = 10
   Insn 110: point = 10
   Insn 109: point = 11
   Insn 108: point = 13
   Insn 107: point = 15
   Insn 106: point = 17
   Insn 105: point = 18
   Insn 104: point = 20
   Insn 103: point = 22
   Insn 102: point = 24
   Insn 101: point = 25
   Insn 100: point = 27
   Insn 99: point = 28
   Insn 98: point = 30
   Insn 97: point = 32
   Insn 96: point = 34
   Insn 95: point = 35
   Insn 94: point = 36
   Insn 93: point = 38
   Insn 92: point = 40
   Insn 91: point = 42
   Insn 90: point = 43
   Insn 89: point = 45
   Insn 88: point = 47
   Insn 87: point = 48
   Insn 86: point = 50
   Insn 85: point = 51
   Insn 84: point = 53
   Insn 83: point = 55
  BB 5
   Insn 75: point = 56
   Insn 74: point = 56
   Insn 135: point = 57
	Hard reg 21 is preferable by r165 with profit 1
   Insn 73: point = 59
   Insn 134: point = 60
	Hard reg 21 is preferable by r165 with profit 1
	Hard reg 22 is preferable by r165 with profit 1
   Insn 72: point = 62
   Insn 71: point = 63
   Insn 70: point = 65
   Insn 69: point = 67
   Insn 68: point = 68
   Insn 67: point = 69
   Insn 133: point = 70
	Hard reg 21 is preferable by r164 with profit 1
   Insn 66: point = 72
   Insn 132: point = 73
	Hard reg 21 is preferable by r164 with profit 1
	Hard reg 22 is preferable by r164 with profit 1
   Insn 65: point = 75
   Insn 64: point = 76
   Insn 63: point = 78
   Insn 62: point = 80
   Insn 61: point = 81
  BB 3
   Insn 34: point = 82
   Insn 33: point = 82
   Insn 32: point = 83
   Insn 31: point = 85
   Insn 30: point = 87
  BB 4
   Insn 127: point = 88
   Insn 55: point = 88
   Insn 54: point = 88
   Insn 53: point = 89
   Insn 52: point = 91
   Insn 51: point = 92
   Insn 50: point = 94
   Insn 49: point = 96
   Insn 48: point = 97
   Insn 47: point = 99
   Insn 46: point = 101
   Insn 45: point = 103
   Insn 44: point = 104
   Insn 43: point = 105
   Insn 42: point = 107
   Insn 41: point = 108
   Insn 40: point = 110
   Insn 39: point = 112
   Insn 38: point = 113
   Insn 37: point = 115
   Insn 36: point = 117
  BB 2
   Insn 28: point = 118
   Insn 27: point = 119
   Insn 24: point = 121
   Insn 23: point = 123
   Insn 22: point = 125
   Insn 21: point = 126
   Insn 20: point = 127
   Insn 19: point = 129
   Insn 18: point = 130
   Insn 17: point = 130
   Insn 16: point = 131
   Insn 15: point = 133
   Insn 14: point = 135
   Insn 13: point = 137
   Insn 12: point = 138
   Insn 11: point = 139
   Insn 10: point = 140
   Insn 9: point = 141
   Insn 8: point = 142
   Insn 7: point = 142
   Insn 3: point = 142
   Insn 2: point = 142
 r87: [134..135]
 r88: [132..133]
 r89: [122..123]
 r90: [120..121]
 r91: [84..85]
 r92: [82..83]
 r93: [114..115]
 r94: [111..113]
 r95: [109..110]
 r96: [106..108]
 r97: [100..101]
 r98: [98..99]
 r99: [95..97]
 r100: [93..94]
 r101: [90..92]
 r102: [79..81]
 r103: [77..78]
 r104: [72..76]
 r105: [66..68]
 r106: [64..65]
 r107: [59..63]
 r108: [6..7]
 r109: [4..5]
 r110: [52..53]
 r111: [49..51]
 r112: [35..48]
 r113: [44..45]
 r114: [41..43]
 r115: [39..40]
 r116: [37..38]
 r117: [35..36]
 r118: [31..32]
 r119: [29..30]
 r120: [26..28]
 r121: [10..25]
 r122: [21..22]
 r123: [19..20]
 r124: [16..18]
 r125: [14..15]
 r126: [12..13]
 r127: [10..11]
 r128: [2..3]
 r129: [0..1]
 r130: [140..141]
 r131: [138..139]
 r132: [136..137]
 r133: [128..131]
 r134: [129..130]
 r135: [126..127]
 r136: [124..125]
 r138: [118..119]
 r139: [86..87]
 r140: [116..117]
 r141: [111..112]
 r142: [104..105]
 r143: [106..107]
 r144: [102..103]
 r145: [95..96]
 r146: [88..89]
 r147: [90..91]
 r148: [79..80]
 r149: [69..70]
 r150: [74..75]
 r151: [66..67]
 r152: [56..57]
 r153: [61..62]
 r154: [8..9]
 r155: [54..55]
 r156: [49..50]
 r157: [46..47]
 r158: [41..42]
 r159: [33..34]
 r160: [26..27]
 r161: [23..24]
 r162: [16..17]
 r164: [71..73]
 r165: [58..60]
Compressing live ranges: from 142 to 124 - 87%
Ranges after the compression:
 r87: [116..117]
 r88: [114..115]
 r89: [106..107]
 r90: [104..105]
 r91: [72..73]
 r92: [70..71]
 r93: [98..99]
 r94: [96..97]
 r95: [94..95]
 r96: [92..93]
 r97: [86..87]
 r98: [84..85]
 r99: [82..83]
 r100: [80..81]
 r101: [78..79]
 r102: [68..69]
 r103: [66..67]
 r104: [62..65]
 r105: [58..59]
 r106: [56..57]
 r107: [52..55]
 r108: [6..7]
 r109: [4..5]
 r110: [46..47]
 r111: [44..45]
 r112: [32..43]
 r113: [40..41]
 r114: [38..39]
 r115: [36..37]
 r116: [34..35]
 r117: [32..33]
 r118: [28..29]
 r119: [26..27]
 r120: [24..25]
 r121: [10..23]
 r122: [20..21]
 r123: [18..19]
 r124: [16..17]
 r125: [14..15]
 r126: [12..13]
 r127: [10..11]
 r128: [2..3]
 r129: [0..1]
 r130: [122..123]
 r131: [120..121]
 r132: [118..119]
 r133: [112..113]
 r134: [112..113]
 r135: [110..111]
 r136: [108..109]
 r138: [102..103]
 r139: [74..75]
 r140: [100..101]
 r141: [96..97]
 r142: [90..91]
 r143: [92..93]
 r144: [88..89]
 r145: [82..83]
 r146: [76..77]
 r147: [78..79]
 r148: [68..69]
 r149: [60..61]
 r150: [64..65]
 r151: [58..59]
 r152: [50..51]
 r153: [54..55]
 r154: [8..9]
 r155: [48..49]
 r156: [44..45]
 r157: [42..43]
 r158: [38..39]
 r159: [30..31]
 r160: [24..25]
 r161: [22..23]
 r162: [16..17]
 r164: [62..63]
 r165: [52..53]

********** Assignment #1: **********

	 Assigning to 164 (cl=SSE_REGS, orig=149, freq=3, tfirst=164, tfreq=3)...
	   Assign 22 to reload r164 (freq=3)
	 Assigning to 165 (cl=SSE_REGS, orig=152, freq=3, tfirst=165, tfreq=3)...
	   Assign 22 to reload r165 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 95
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 110
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 117
changing reg in insn 120
changing reg in insn 120
changing reg in insn 124
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 16
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 52
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 74
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
deleting insn with uid = 132.
deleting insn with uid = 134.
starting the processing of deferred insns
ending the processing of deferred insns


int baseline_correct(float*, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={38d,40u} r1={15d,14u,4e} r2={3d,2u,2e} r4={1d,1u} r5={1d,1u} r6={1d,52u} r7={1d,8u} r17={27d,3u} r20={1d,1u,6e} r21={19d,18u} r22={9d,8u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 284{124d,148u,12e} in 104{104 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 130 131 132 133 134 135 136 138
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) ge2fitman_preproc.cpp:210 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])
        (reg:DI 4 si [ procpar_info ])) ge2fitman_preproc.cpp:210 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:212 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:212 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 21 xmm0 [130])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:213 129 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 21 xmm0 [130])) ge2fitman_preproc.cpp:213 129 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SF 21 xmm0 [131])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:214 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 21 xmm0 [131])) ge2fitman_preproc.cpp:214 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:216 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:87 D.26013 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [132])
                (const_int 324 [0x144])) [0 procpar_info_11(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:216 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 0 ax [orig:88 D.26013 ] [88])
                (ashift:SI (reg:SI 0 ax [orig:87 D.26013 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:216 511 {*ashlsi3_1}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [133])
        (reg:SI 0 ax [orig:88 D.26013 ] [88])) ge2fitman_preproc.cpp:216 90 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 1 dx [134])
                (plus:SI (reg:SI 0 ax [133])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:216 217 {*addsi_1}
     (nil))
(insn 18 17 19 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [133])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:216 3 {*cmpsi_ccno_1}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 ax [133])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [134])
            (reg:SI 0 ax [133]))) ge2fitman_preproc.cpp:216 953 {*movsicc_noc}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [135])
                (ashiftrt:SI (reg:SI 0 ax [133])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:216 545 {*ashrsi3_1}
     (nil))
(insn 21 20 22 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])
        (reg:SI 0 ax [135])) ge2fitman_preproc.cpp:216 90 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:218 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 0 ax [orig:89 D.26013 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [136])
                (const_int 324 [0x144])) [0 procpar_info_11(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:218 90 {*movsi_internal}
     (nil))
(insn 24 23 27 2 (parallel [
            (set (reg:SI 0 ax [orig:90 D.26013 ] [90])
                (ashift:SI (reg:SI 0 ax [orig:89 D.26013 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:218 511 {*ashlsi3_1}
     (nil))
(insn 27 24 28 2 (parallel [
            (set (reg:SI 0 ax [138])
                (minus:SI (reg:SI 0 ax [orig:90 D.26013 ] [90])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:218 260 {*subsi_1}
     (nil))
(insn 28 27 56 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (reg:SI 0 ax [138])) ge2fitman_preproc.cpp:218 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 139
(code_label 56 28 29 3 58 "" [1 uses])
(note 29 56 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 3 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:218 89 {*movdi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:SI 0 ax [orig:91 D.26013 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 324 [0x144])) [0 procpar_info_11(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:218 90 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:SI 0 ax [orig:92 D.26013 ] [92])
                (ashift:SI (reg:SI 0 ax [orig:91 D.26013 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:218 511 {*ashlsi3_1}
     (nil))
(insn 33 32 34 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:92 D.26013 ] [92])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:218 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) ge2fitman_preproc.cpp:218 612 {*jcc_1}
     (nil)
 -> 59)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 100 101 140 141 142 143 144 145 146 147
(note 35 34 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 4 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:220 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:DI 0 ax [orig:93 D.26014 ] [93])
        (sign_extend:DI (reg:SI 0 ax [140]))) ge2fitman_preproc.cpp:220 142 {*extendsidi2_rex64}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 1 dx [orig:94 D.26014 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.26014 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:220 512 {*ashldi3_1}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:220 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.26015 ] [95])
                (plus:DI (reg/f:DI 0 ax [141])
                    (reg:DI 1 dx [orig:94 D.26014 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:220 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.26014 ] [94]))
        (nil)))
(insn 41 40 42 4 (set (reg:SF 21 xmm0 [orig:96 D.26016 ] [96])
        (mem:SF (reg/f:DI 0 ax [orig:95 D.26015 ] [95]) [0 *_23+0 S4 A32])) ge2fitman_preproc.cpp:220 129 {*movsf_internal}
     (nil))
(insn 42 41 43 4 (set (reg:SF 22 xmm1 [143])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])) ge2fitman_preproc.cpp:220 129 {*movsf_internal}
     (nil))
(insn 43 42 44 4 (set (reg:SF 21 xmm0 [142])
        (plus:SF (reg:SF 21 xmm0 [orig:96 D.26016 ] [96])
            (reg:SF 22 xmm1 [143]))) ge2fitman_preproc.cpp:220 797 {*fop_sf_comm_sse}
     (nil))
(insn 44 43 45 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 21 xmm0 [142])) ge2fitman_preproc.cpp:220 129 {*movsf_internal}
     (nil))
(insn 45 44 46 4 (set (reg:SI 0 ax [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:221 90 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:DI 0 ax [orig:97 D.26017 ] [97])
        (sign_extend:DI (reg:SI 0 ax [144]))) ge2fitman_preproc.cpp:221 142 {*extendsidi2_rex64}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 0 ax [orig:98 D.26017 ] [98])
                (plus:DI (reg:DI 0 ax [orig:97 D.26017 ] [97])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:221 218 {*adddi_1}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 1 dx [orig:99 D.26017 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 D.26017 ] [98])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:221 512 {*ashldi3_1}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:221 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.26015 ] [100])
                (plus:DI (reg/f:DI 0 ax [145])
                    (reg:DI 1 dx [orig:99 D.26017 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:221 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.26017 ] [99]))
        (nil)))
(insn 51 50 52 4 (set (reg:SF 21 xmm0 [orig:101 D.26016 ] [101])
        (mem:SF (reg/f:DI 0 ax [orig:100 D.26015 ] [100]) [0 *_29+0 S4 A32])) ge2fitman_preproc.cpp:221 129 {*movsf_internal}
     (nil))
(insn 52 51 53 4 (set (reg:SF 22 xmm1 [147])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])) ge2fitman_preproc.cpp:221 129 {*movsf_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SF 21 xmm0 [146])
        (plus:SF (reg:SF 21 xmm0 [orig:101 D.26016 ] [101])
            (reg:SF 22 xmm1 [147]))) ge2fitman_preproc.cpp:221 797 {*fop_sf_comm_sse}
     (nil))
(insn 54 53 55 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 21 xmm0 [146])) ge2fitman_preproc.cpp:221 129 {*movsf_internal}
     (nil))
(insn 55 54 127 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:218 217 {*addsi_1}
     (nil))
(jump_insn 127 55 128 4 (set (pc)
        (label_ref 56)) ge2fitman_preproc.cpp:218 654 {jump}
     (nil)
 -> 56)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 128 127 59)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 102 103 104 105 106 107 148 149 150 151 152 153
(code_label 59 128 60 5 57 "" [1 uses])
(note 60 59 61 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 5 (set (reg:DF 21 xmm0 [orig:102 D.26018 ] [102])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32]))) ge2fitman_preproc.cpp:224 201 {*floatsidf2_sse}
     (nil))
(insn 62 61 63 5 (set (reg:DF 22 xmm1 [148])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:224 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 63 62 64 5 (set (reg:DF 21 xmm0 [orig:103 D.26018 ] [103])
        (div:DF (reg:DF 21 xmm0 [orig:102 D.26018 ] [102])
            (reg:DF 22 xmm1 [148]))) ge2fitman_preproc.cpp:224 805 {*fop_df_1_sse}
     (nil))
(insn 64 63 65 5 (set (reg:SF 21 xmm0 [orig:104 D.26016 ] [104])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:103 D.26018 ] [103]))) ge2fitman_preproc.cpp:224 157 {*truncdfsf_fast_sse}
     (nil))
(insn 65 64 66 5 (set (reg:SF 22 xmm1 [150])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])) ge2fitman_preproc.cpp:224 129 {*movsf_internal}
     (nil))
(insn 66 65 133 5 (set (reg:SF 22 xmm1 [149])
        (div:SF (reg:SF 22 xmm1 [149])
            (reg:SF 21 xmm0 [orig:104 D.26016 ] [104]))) ge2fitman_preproc.cpp:224 804 {*fop_sf_1_sse}
     (nil))
(insn 133 66 67 5 (set (reg:SF 21 xmm0 [149])
        (reg:SF 22 xmm1 [149])) ge2fitman_preproc.cpp:224 129 {*movsf_internal}
     (nil))
(insn 67 133 68 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 21 xmm0 [149])) ge2fitman_preproc.cpp:224 129 {*movsf_internal}
     (nil))
(insn 68 67 69 5 (set (reg:DF 21 xmm0 [orig:105 D.26018 ] [105])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32]))) ge2fitman_preproc.cpp:225 201 {*floatsidf2_sse}
     (nil))
(insn 69 68 70 5 (set (reg:DF 22 xmm1 [151])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:225 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 70 69 71 5 (set (reg:DF 21 xmm0 [orig:106 D.26018 ] [106])
        (div:DF (reg:DF 21 xmm0 [orig:105 D.26018 ] [105])
            (reg:DF 22 xmm1 [151]))) ge2fitman_preproc.cpp:225 805 {*fop_df_1_sse}
     (nil))
(insn 71 70 72 5 (set (reg:SF 21 xmm0 [orig:107 D.26016 ] [107])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:106 D.26018 ] [106]))) ge2fitman_preproc.cpp:225 157 {*truncdfsf_fast_sse}
     (nil))
(insn 72 71 73 5 (set (reg:SF 22 xmm1 [153])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])) ge2fitman_preproc.cpp:225 129 {*movsf_internal}
     (nil))
(insn 73 72 135 5 (set (reg:SF 22 xmm1 [152])
        (div:SF (reg:SF 22 xmm1 [152])
            (reg:SF 21 xmm0 [orig:107 D.26016 ] [107]))) ge2fitman_preproc.cpp:225 804 {*fop_sf_1_sse}
     (nil))
(insn 135 73 74 5 (set (reg:SF 21 xmm0 [152])
        (reg:SF 22 xmm1 [152])) ge2fitman_preproc.cpp:225 129 {*movsf_internal}
     (nil))
(insn 74 135 75 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 21 xmm0 [152])) ge2fitman_preproc.cpp:225 129 {*movsf_internal}
     (nil))
(insn 75 74 112 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:227 90 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 109 154
(code_label 112 75 76 6 60 "" [1 uses])
(note 76 112 77 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 6 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:227 89 {*movdi_internal}
     (nil))
(insn 78 77 79 6 (set (reg:SI 0 ax [orig:108 D.26013 ] [108])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [154])
                (const_int 324 [0x144])) [0 procpar_info_11(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:227 90 {*movsi_internal}
     (nil))
(insn 79 78 80 6 (parallel [
            (set (reg:SI 0 ax [orig:109 D.26013 ] [109])
                (ashift:SI (reg:SI 0 ax [orig:108 D.26013 ] [108])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:227 511 {*ashlsi3_1}
     (nil))
(insn 80 79 81 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:109 D.26013 ] [109])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:227 7 {*cmpsi_1}
     (nil))
(jump_insn 81 80 82 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) ge2fitman_preproc.cpp:227 612 {*jcc_1}
     (nil)
 -> 115)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 155 156 157 158 159 160 161 162
(note 82 81 83 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 7 (set (reg:SI 0 ax [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:229 90 {*movsi_internal}
     (nil))
(insn 84 83 85 7 (set (reg:DI 0 ax [orig:110 D.26014 ] [110])
        (sign_extend:DI (reg:SI 0 ax [155]))) ge2fitman_preproc.cpp:229 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 7 (parallel [
            (set (reg:DI 1 dx [orig:111 D.26014 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 D.26014 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:229 512 {*ashldi3_1}
     (nil))
(insn 86 85 87 7 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:229 89 {*movdi_internal}
     (nil))
(insn 87 86 88 7 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.26015 ] [112])
                (plus:DI (reg/f:DI 0 ax [156])
                    (reg:DI 1 dx [orig:111 D.26014 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:229 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.26014 ] [111]))
        (nil)))
(insn 88 87 89 7 (set (reg:SI 1 dx [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:229 90 {*movsi_internal}
     (nil))
(insn 89 88 90 7 (set (reg:DI 1 dx [orig:113 D.26014 ] [113])
        (sign_extend:DI (reg:SI 1 dx [157]))) ge2fitman_preproc.cpp:229 142 {*extendsidi2_rex64}
     (nil))
(insn 90 89 91 7 (parallel [
            (set (reg:DI 2 cx [orig:114 D.26014 ] [114])
                (ashift:DI (reg:DI 1 dx [orig:113 D.26014 ] [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:229 512 {*ashldi3_1}
     (nil))
(insn 91 90 92 7 (set (reg/f:DI 1 dx [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:229 89 {*movdi_internal}
     (nil))
(insn 92 91 93 7 (parallel [
            (set (reg/f:DI 1 dx [orig:115 D.26015 ] [115])
                (plus:DI (reg/f:DI 1 dx [158])
                    (reg:DI 2 cx [orig:114 D.26014 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:229 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:114 D.26014 ] [114]))
        (nil)))
(insn 93 92 94 7 (set (reg:SF 21 xmm0 [orig:116 D.26016 ] [116])
        (mem:SF (reg/f:DI 1 dx [orig:115 D.26015 ] [115]) [0 *_49+0 S4 A32])) ge2fitman_preproc.cpp:229 129 {*movsf_internal}
     (nil))
(insn 94 93 95 7 (set (reg:SF 21 xmm0 [orig:117 D.26016 ] [117])
        (minus:SF (reg:SF 21 xmm0 [orig:116 D.26016 ] [116])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32]))) ge2fitman_preproc.cpp:229 804 {*fop_sf_1_sse}
     (nil))
(insn 95 94 96 7 (set (mem:SF (reg/f:DI 0 ax [orig:112 D.26015 ] [112]) [0 *_46+0 S4 A32])
        (reg:SF 21 xmm0 [orig:117 D.26016 ] [117])) ge2fitman_preproc.cpp:229 129 {*movsf_internal}
     (nil))
(insn 96 95 97 7 (set (reg:SI 0 ax [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:230 90 {*movsi_internal}
     (nil))
(insn 97 96 98 7 (set (reg:DI 0 ax [orig:118 D.26017 ] [118])
        (sign_extend:DI (reg:SI 0 ax [159]))) ge2fitman_preproc.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 7 (parallel [
            (set (reg:DI 0 ax [orig:119 D.26017 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 D.26017 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 218 {*adddi_1}
     (nil))
(insn 99 98 100 7 (parallel [
            (set (reg:DI 1 dx [orig:120 D.26017 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.26017 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 512 {*ashldi3_1}
     (nil))
(insn 100 99 101 7 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:230 89 {*movdi_internal}
     (nil))
(insn 101 100 102 7 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.26015 ] [121])
                (plus:DI (reg/f:DI 0 ax [160])
                    (reg:DI 1 dx [orig:120 D.26017 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.26017 ] [120]))
        (nil)))
(insn 102 101 103 7 (set (reg:SI 1 dx [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:230 90 {*movsi_internal}
     (nil))
(insn 103 102 104 7 (set (reg:DI 1 dx [orig:122 D.26017 ] [122])
        (sign_extend:DI (reg:SI 1 dx [161]))) ge2fitman_preproc.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 7 (parallel [
            (set (reg:DI 1 dx [orig:123 D.26017 ] [123])
                (plus:DI (reg:DI 1 dx [orig:122 D.26017 ] [122])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 218 {*adddi_1}
     (nil))
(insn 105 104 106 7 (parallel [
            (set (reg:DI 2 cx [orig:124 D.26017 ] [124])
                (ashift:DI (reg:DI 1 dx [orig:123 D.26017 ] [123])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 512 {*ashldi3_1}
     (nil))
(insn 106 105 107 7 (set (reg/f:DI 1 dx [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:230 89 {*movdi_internal}
     (nil))
(insn 107 106 108 7 (parallel [
            (set (reg/f:DI 1 dx [orig:125 D.26015 ] [125])
                (plus:DI (reg/f:DI 1 dx [162])
                    (reg:DI 2 cx [orig:124 D.26017 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:230 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:124 D.26017 ] [124]))
        (nil)))
(insn 108 107 109 7 (set (reg:SF 21 xmm0 [orig:126 D.26016 ] [126])
        (mem:SF (reg/f:DI 1 dx [orig:125 D.26015 ] [125]) [0 *_60+0 S4 A32])) ge2fitman_preproc.cpp:230 129 {*movsf_internal}
     (nil))
(insn 109 108 110 7 (set (reg:SF 21 xmm0 [orig:127 D.26016 ] [127])
        (minus:SF (reg:SF 21 xmm0 [orig:126 D.26016 ] [126])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32]))) ge2fitman_preproc.cpp:230 804 {*fop_sf_1_sse}
     (nil))
(insn 110 109 111 7 (set (mem:SF (reg/f:DI 0 ax [orig:121 D.26015 ] [121]) [0 *_56+0 S4 A32])
        (reg:SF 21 xmm0 [orig:127 D.26016 ] [127])) ge2fitman_preproc.cpp:230 129 {*movsf_internal}
     (nil))
(insn 111 110 129 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:227 217 {*addsi_1}
     (nil))
(jump_insn 129 111 130 7 (set (pc)
        (label_ref 112)) ge2fitman_preproc.cpp:227 654 {jump}
     (nil)
 -> 112)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 130 129 115)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 128 129
(code_label 115 130 116 8 59 "" [1 uses])
(note 116 115 117 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 120 8 (set (reg:SI 0 ax [orig:128 D.26013 ] [128])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:233 90 {*movsi_internal}
     (nil))
(insn 120 117 124 8 (set (reg:SI 0 ax [orig:129 <retval> ] [129])
        (reg:SI 0 ax [orig:128 D.26013 ] [128])) ge2fitman_preproc.cpp:233 90 {*movsi_internal}
     (nil))
(insn 124 120 125 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:129 <retval> ] [129])) ge2fitman_preproc.cpp:234 90 {*movsi_internal}
     (nil))
(insn 125 124 131 8 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:234 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 131 125 0 NOTE_INSN_DELETED)

;; Function int ecc_correction(float*, float*, Procpar_info*, Preprocess*) (_Z14ecc_correctionPfS_P12Procpar_infoP10Preprocess, funcdef_no=1024, decl_uid=24423, cgraph_uid=229, symbol_order=230)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 10:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 11:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 12:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 13:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 14:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 15:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 16:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 17:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 18:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 19:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 20:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 21:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 35:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 42:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 51:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 59:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 65:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 66:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 72:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 80:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 85:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 86:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 91
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 92:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 99:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 116:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 118
	 Choosing alt 0 in insn 118:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 119
	 Choosing alt 0 in insn 119:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 122:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 123:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 129:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 137:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 142:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 143:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 144:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 146:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 147:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 149:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 155:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=245 from oldreg=164, assigning class SSE_REGS to r245
  155: r245:SF=float_trunc([frame:DI-0x40])
    Inserting insn reload after:
  223: r164:SF=r245:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 223:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 156:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=246, assigning class NO_REGS to secondary r246
  157: r246:DF=r234:DF
      REG_DEAD r234:DF
    Inserting the sec. move after:
  224: xmm0:DF=r246:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 224:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=247 from oldreg=164, assigning class SSE_REGS to r247
      Making reload reg 247 for reg 164 optional
  161: r167:SF=r166:SF*r247:SF
      REG_DEAD r166:SF
      REG_DEAD r164:SF
    Inserting insn reload before:
  225: r247:SF=r164:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 225:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 162:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 169:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=248 from oldreg=172, assigning class SSE_REGS to r248
  169: r248:SF=float_trunc([frame:DI-0x40])
    Inserting insn reload after:
  226: r172:SF=r248:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 226:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 170:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=249, assigning class NO_REGS to secondary r249
  171: r249:DF=r237:DF
      REG_DEAD r237:DF
    Inserting the sec. move after:
  227: xmm0:DF=r249:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 227:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 175
	 Choosing alt 0 in insn 175:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=250 from oldreg=172, assigning class SSE_REGS to r250
      Making reload reg 250 for reg 172 optional
  175: r175:SF=r174:SF*r250:SF
      REG_DEAD r174:SF
      REG_DEAD r172:SF
    Inserting insn reload before:
  228: r250:SF=r172:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 228:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 176:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 182:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=251 from oldreg=179, assigning class SSE_REGS to r251
  182: r251:SF=float_trunc([frame:DI-0x38])
    Inserting insn reload after:
  229: r179:SF=r251:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 229:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 183:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=252, assigning class NO_REGS to secondary r252
  184: r252:DF=r240:DF
      REG_DEAD r240:DF
    Inserting the sec. move after:
  230: xmm0:DF=r252:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 230:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 188
	 Choosing alt 0 in insn 188:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=253 from oldreg=179, assigning class SSE_REGS to r253
      Making reload reg 253 for reg 179 optional
  188: r182:SF=r181:SF*r253:SF
      REG_DEAD r181:SF
      REG_DEAD r179:SF
    Inserting insn reload before:
  231: r253:SF=r179:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 231:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 189:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 196:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=254 from oldreg=187, assigning class SSE_REGS to r254
  196: r254:SF=float_trunc([frame:DI-0x38])
    Inserting insn reload after:
  232: r187:SF=r254:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 232:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 197:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=255, assigning class NO_REGS to secondary r255
  198: r255:DF=r243:DF
      REG_DEAD r243:DF
    Inserting the sec. move after:
  233: xmm0:DF=r255:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 233:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=256 from oldreg=187, assigning class SSE_REGS to r256
      Making reload reg 256 for reg 187 optional
  202: r190:SF=r189:SF*r256:SF
      REG_DEAD r189:SF
      REG_DEAD r187:SF
    Inserting insn reload before:
  234: r256:SF=r187:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 234:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 203:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 204:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=257 from oldreg=187, assigning class SSE_REGS to inheritance r257
    Original reg change 187->257 (bb4):
  232: r257:SF=r254:SF
    Add original<-inheritance after:
  235: r187:SF=r257:SF

    Inheritance reuse change 187->257 (bb4):
  234: r256:SF=r257:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=258 from oldreg=179, assigning class SSE_REGS to inheritance r258
    Original reg change 179->258 (bb4):
  229: r258:SF=r251:SF
    Add original<-inheritance after:
  236: r179:SF=r258:SF

    Inheritance reuse change 179->258 (bb4):
  231: r253:SF=r258:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=259 from oldreg=172, assigning class SSE_REGS to inheritance r259
    Original reg change 172->259 (bb4):
  226: r259:SF=r248:SF
    Add original<-inheritance after:
  237: r172:SF=r259:SF

    Inheritance reuse change 172->259 (bb4):
  228: r250:SF=r259:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=260 from oldreg=164, assigning class SSE_REGS to inheritance r260
    Original reg change 164->260 (bb4):
  223: r260:SF=r245:SF
    Add original<-inheritance after:
  238: r164:SF=r260:SF

    Inheritance reuse change 164->260 (bb4):
  225: r247:SF=r260:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   235: r187:SF=r257:SF
deleting insn with uid = 235.
	    Removing dead insn:
   236: r179:SF=r258:SF
deleting insn with uid = 236.
	    Removing dead insn:
   237: r172:SF=r259:SF
deleting insn with uid = 237.
	    Removing dead insn:
   238: r164:SF=r260:SF
deleting insn with uid = 238.
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 218: point = 0
   Insn 217: point = 0
   Insn 213: point = 1
   Insn 210: point = 3
  BB 3
   Insn 28: point = 4
   Insn 27: point = 4
   Insn 26: point = 5
   Insn 25: point = 7
   Insn 24: point = 9
  BB 4
   Insn 220: point = 10
   Insn 204: point = 10
   Insn 203: point = 10
   Insn 202: point = 11
   Insn 234: point = 13
	   Creating copy r256<-r257@1
   Insn 201: point = 15
   Insn 200: point = 17
   Insn 199: point = 18
   Insn 233: point = 18
	Hard reg 21 is preferable by r255 with profit 1
   Insn 198: point = 19
	Hard reg 21 is preferable by r255 with profit 1
	Hard reg 0 is preferable by r255 with profit 1
   Insn 197: point = 21
   Insn 232: point = 22
	   Creating copy r254->r257@1
   Insn 196: point = 24
   Insn 195: point = 25
   Insn 194: point = 27
   Insn 193: point = 28
   Insn 192: point = 30
   Insn 191: point = 32
   Insn 190: point = 34
   Insn 189: point = 35
   Insn 188: point = 36
   Insn 231: point = 38
	   Creating copy r253<-r258@1
   Insn 187: point = 40
   Insn 186: point = 42
   Insn 185: point = 43
   Insn 230: point = 43
	Hard reg 21 is preferable by r252 with profit 1
   Insn 184: point = 44
	Hard reg 21 is preferable by r252 with profit 1
	Hard reg 0 is preferable by r252 with profit 1
   Insn 183: point = 46
   Insn 229: point = 47
	   Creating copy r251->r258@1
   Insn 182: point = 49
   Insn 181: point = 50
   Insn 180: point = 52
   Insn 179: point = 53
   Insn 178: point = 55
   Insn 177: point = 57
   Insn 176: point = 58
   Insn 175: point = 59
   Insn 228: point = 61
	   Creating copy r250<-r259@1
   Insn 174: point = 63
   Insn 173: point = 65
   Insn 172: point = 66
   Insn 227: point = 66
	Hard reg 21 is preferable by r249 with profit 1
   Insn 171: point = 67
	Hard reg 21 is preferable by r249 with profit 1
	Hard reg 0 is preferable by r249 with profit 1
   Insn 170: point = 69
   Insn 226: point = 70
	   Creating copy r248->r259@1
   Insn 169: point = 72
   Insn 168: point = 73
   Insn 167: point = 75
   Insn 166: point = 76
   Insn 165: point = 78
   Insn 164: point = 80
   Insn 163: point = 82
   Insn 162: point = 83
   Insn 161: point = 84
   Insn 225: point = 86
	   Creating copy r247<-r260@1
   Insn 160: point = 88
   Insn 159: point = 90
   Insn 158: point = 91
   Insn 224: point = 91
	Hard reg 21 is preferable by r246 with profit 1
   Insn 157: point = 92
	Hard reg 21 is preferable by r246 with profit 1
	Hard reg 0 is preferable by r246 with profit 1
   Insn 156: point = 94
   Insn 223: point = 95
	   Creating copy r245->r260@1
   Insn 155: point = 97
   Insn 154: point = 98
   Insn 153: point = 100
   Insn 152: point = 101
   Insn 151: point = 103
   Insn 150: point = 105
   Insn 149: point = 106
   Insn 148: point = 107
   Insn 147: point = 109
   Insn 146: point = 110
   Insn 145: point = 111
   Insn 144: point = 113
   Insn 143: point = 114
   Insn 142: point = 115
   Insn 141: point = 116
   Insn 140: point = 116
   Insn 139: point = 117
   Insn 138: point = 118
   Insn 137: point = 120
   Insn 136: point = 122
   Insn 135: point = 124
   Insn 134: point = 125
   Insn 133: point = 127
   Insn 132: point = 129
   Insn 131: point = 131
   Insn 130: point = 132
   Insn 129: point = 134
   Insn 128: point = 136
   Insn 127: point = 138
   Insn 126: point = 139
   Insn 125: point = 141
   Insn 124: point = 143
   Insn 123: point = 144
   Insn 122: point = 145
   Insn 121: point = 146
   Insn 120: point = 146
   Insn 119: point = 147
   Insn 118: point = 149
   Insn 117: point = 151
   Insn 116: point = 153
   Insn 115: point = 155
   Insn 114: point = 157
   Insn 113: point = 158
   Insn 112: point = 160
   Insn 111: point = 162
   Insn 110: point = 164
   Insn 109: point = 165
   Insn 108: point = 167
   Insn 107: point = 169
   Insn 106: point = 171
   Insn 105: point = 172
   Insn 104: point = 174
   Insn 103: point = 176
   Insn 102: point = 178
   Insn 101: point = 179
   Insn 100: point = 181
   Insn 99: point = 183
   Insn 98: point = 185
   Insn 97: point = 187
   Insn 96: point = 188
   Insn 95: point = 190
   Insn 94: point = 192
   Insn 93: point = 193
   Insn 92: point = 195
   Insn 91: point = 197
   Insn 90: point = 199
   Insn 89: point = 200
   Insn 88: point = 202
   Insn 87: point = 204
   Insn 86: point = 205
   Insn 85: point = 206
   Insn 84: point = 207
   Insn 83: point = 207
   Insn 82: point = 208
   Insn 81: point = 209
   Insn 80: point = 211
   Insn 79: point = 213
   Insn 78: point = 215
   Insn 77: point = 216
   Insn 76: point = 218
   Insn 75: point = 220
   Insn 74: point = 222
   Insn 73: point = 223
   Insn 72: point = 225
   Insn 71: point = 227
   Insn 70: point = 229
   Insn 69: point = 230
   Insn 68: point = 232
   Insn 67: point = 234
   Insn 66: point = 235
   Insn 65: point = 236
   Insn 64: point = 237
   Insn 63: point = 237
   Insn 62: point = 238
   Insn 61: point = 240
   Insn 60: point = 242
   Insn 59: point = 244
   Insn 58: point = 246
   Insn 57: point = 248
   Insn 56: point = 249
   Insn 55: point = 251
   Insn 54: point = 253
   Insn 53: point = 255
   Insn 52: point = 256
   Insn 51: point = 258
   Insn 50: point = 260
   Insn 49: point = 262
   Insn 48: point = 263
   Insn 47: point = 265
   Insn 46: point = 267
   Insn 45: point = 269
   Insn 44: point = 270
   Insn 43: point = 272
   Insn 42: point = 274
   Insn 41: point = 276
   Insn 40: point = 278
   Insn 39: point = 279
   Insn 38: point = 281
   Insn 37: point = 283
   Insn 36: point = 284
   Insn 35: point = 286
   Insn 34: point = 288
   Insn 33: point = 290
   Insn 32: point = 291
   Insn 31: point = 293
   Insn 30: point = 295
  BB 2
   Insn 22: point = 296
   Insn 21: point = 296
   Insn 20: point = 297
   Insn 19: point = 298
   Insn 18: point = 299
   Insn 17: point = 300
   Insn 16: point = 301
   Insn 15: point = 302
   Insn 14: point = 303
   Insn 13: point = 304
   Insn 12: point = 305
   Insn 11: point = 306
   Insn 10: point = 307
   Insn 9: point = 308
   Insn 5: point = 308
   Insn 4: point = 308
   Insn 3: point = 308
   Insn 2: point = 308
 r87: [6..7]
 r88: [4..5]
 r89: [292..293]
 r90: [289..291]
 r91: [287..288]
 r92: [285..286]
 r93: [271..284]
 r94: [280..281]
 r95: [277..279]
 r96: [275..276]
 r97: [273..274]
 r98: [271..272]
 r99: [239..270]
 r100: [266..267]
 r101: [264..265]
 r102: [261..263]
 r103: [259..260]
 r104: [257..258]
 r105: [241..256]
 r106: [252..253]
 r107: [250..251]
 r108: [247..249]
 r109: [245..246]
 r110: [243..244]
 r111: [241..242]
 r112: [239..240]
 r113: [237..238]
 r114: [231..232]
 r115: [228..230]
 r116: [226..227]
 r117: [224..225]
 r118: [208..223]
 r119: [219..220]
 r120: [217..218]
 r121: [214..216]
 r122: [212..213]
 r123: [210..211]
 r124: [207..209]
 r125: [201..202]
 r126: [198..200]
 r127: [196..197]
 r128: [194..195]
 r129: [180..193]
 r130: [189..190]
 r131: [186..188]
 r132: [184..185]
 r133: [182..183]
 r134: [180..181]
 r135: [148..179]
 r136: [175..176]
 r137: [173..174]
 r138: [170..172]
 r139: [168..169]
 r140: [166..167]
 r141: [150..165]
 r142: [161..162]
 r143: [159..160]
 r144: [156..158]
 r145: [154..155]
 r146: [152..153]
 r147: [150..151]
 r148: [148..149]
 r149: [146..147]
 r150: [140..141]
 r151: [137..139]
 r152: [135..136]
 r153: [133..134]
 r154: [117..132]
 r155: [128..129]
 r156: [126..127]
 r157: [123..125]
 r158: [121..122]
 r159: [119..120]
 r160: [116..118]
 r161: [102..103]
 r162: [99..101]
 r163: [83..98]
 r165: [89..90]
 r166: [85..88]
 r167: [83..84]
 r168: [79..80]
 r169: [77..78]
 r170: [74..76]
 r171: [58..73]
 r173: [64..65]
 r174: [60..63]
 r175: [58..59]
 r176: [54..55]
 r177: [51..53]
 r178: [35..50]
 r180: [41..42]
 r181: [37..40]
 r182: [35..36]
 r183: [31..32]
 r184: [29..30]
 r185: [26..28]
 r186: [10..25]
 r188: [16..17]
 r189: [12..15]
 r190: [10..11]
 r191: [2..3]
 r192: [0..1]
 r193: [306..307]
 r194: [304..305]
 r195: [302..303]
 r196: [300..301]
 r197: [298..299]
 r198: [296..297]
 r199: [8..9]
 r200: [294..295]
 r201: [289..290]
 r202: [282..283]
 r203: [277..278]
 r204: [268..269]
 r205: [261..262]
 r206: [254..255]
 r207: [247..248]
 r208: [235..236]
 r209: [233..234]
 r210: [228..229]
 r211: [221..222]
 r212: [214..215]
 r213: [205..206]
 r214: [203..204]
 r215: [198..199]
 r216: [191..192]
 r217: [186..187]
 r218: [177..178]
 r219: [170..171]
 r220: [163..164]
 r221: [156..157]
 r222: [144..145]
 r223: [142..143]
 r224: [137..138]
 r225: [130..131]
 r226: [123..124]
 r227: [114..115]
 r228: [110..111]
 r229: [112..113]
 r230: [106..107]
 r231: [108..109]
 r232: [104..105]
 r233: [99..100]
 r234: [93..94]
 r235: [81..82]
 r236: [74..75]
 r237: [68..69]
 r238: [56..57]
 r239: [51..52]
 r240: [45..46]
 r241: [33..34]
 r242: [26..27]
 r243: [20..21]
 r245: [96..97]
 r246: [91..92]
 r247: [85..86]
 r248: [71..72]
 r249: [66..67]
 r250: [60..61]
 r251: [48..49]
 r252: [43..44]
 r253: [37..38]
 r254: [23..24]
 r255: [18..19]
 r256: [12..13]
 r257: [14..22]
 r258: [39..47]
 r259: [62..70]
 r260: [87..95]
Compressing live ranges: from 308 to 274 - 88%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [258..259]
 r90: [256..257]
 r91: [254..255]
 r92: [252..253]
 r93: [240..251]
 r94: [248..249]
 r95: [246..247]
 r96: [244..245]
 r97: [242..243]
 r98: [240..241]
 r99: [212..239]
 r100: [236..237]
 r101: [234..235]
 r102: [232..233]
 r103: [230..231]
 r104: [228..229]
 r105: [214..227]
 r106: [224..225]
 r107: [222..223]
 r108: [220..221]
 r109: [218..219]
 r110: [216..217]
 r111: [214..215]
 r112: [212..213]
 r113: [210..211]
 r114: [204..205]
 r115: [202..203]
 r116: [200..201]
 r117: [198..199]
 r118: [184..197]
 r119: [194..195]
 r120: [192..193]
 r121: [190..191]
 r122: [188..189]
 r123: [186..187]
 r124: [184..185]
 r125: [178..179]
 r126: [176..177]
 r127: [174..175]
 r128: [172..173]
 r129: [160..171]
 r130: [168..169]
 r131: [166..167]
 r132: [164..165]
 r133: [162..163]
 r134: [160..161]
 r135: [132..159]
 r136: [156..157]
 r137: [154..155]
 r138: [152..153]
 r139: [150..151]
 r140: [148..149]
 r141: [134..147]
 r142: [144..145]
 r143: [142..143]
 r144: [140..141]
 r145: [138..139]
 r146: [136..137]
 r147: [134..135]
 r148: [132..133]
 r149: [130..131]
 r150: [124..125]
 r151: [122..123]
 r152: [120..121]
 r153: [118..119]
 r154: [104..117]
 r155: [114..115]
 r156: [112..113]
 r157: [110..111]
 r158: [108..109]
 r159: [106..107]
 r160: [104..105]
 r161: [90..91]
 r162: [88..89]
 r163: [74..87]
 r165: [80..81]
 r166: [76..79]
 r167: [74..75]
 r168: [70..71]
 r169: [68..69]
 r170: [66..67]
 r171: [52..65]
 r173: [58..59]
 r174: [54..57]
 r175: [52..53]
 r176: [48..49]
 r177: [46..47]
 r178: [32..45]
 r180: [38..39]
 r181: [34..37]
 r182: [32..33]
 r183: [28..29]
 r184: [26..27]
 r185: [24..25]
 r186: [10..23]
 r188: [16..17]
 r189: [12..15]
 r190: [10..11]
 r191: [2..3]
 r192: [0..1]
 r193: [272..273]
 r194: [270..271]
 r195: [268..269]
 r196: [266..267]
 r197: [264..265]
 r198: [262..263]
 r199: [8..9]
 r200: [260..261]
 r201: [256..257]
 r202: [250..251]
 r203: [246..247]
 r204: [238..239]
 r205: [232..233]
 r206: [226..227]
 r207: [220..221]
 r208: [208..209]
 r209: [206..207]
 r210: [202..203]
 r211: [196..197]
 r212: [190..191]
 r213: [182..183]
 r214: [180..181]
 r215: [176..177]
 r216: [170..171]
 r217: [166..167]
 r218: [158..159]
 r219: [152..153]
 r220: [146..147]
 r221: [140..141]
 r222: [128..129]
 r223: [126..127]
 r224: [122..123]
 r225: [116..117]
 r226: [110..111]
 r227: [102..103]
 r228: [98..99]
 r229: [100..101]
 r230: [94..95]
 r231: [96..97]
 r232: [92..93]
 r233: [88..89]
 r234: [84..85]
 r235: [72..73]
 r236: [66..67]
 r237: [62..63]
 r238: [50..51]
 r239: [46..47]
 r240: [42..43]
 r241: [30..31]
 r242: [24..25]
 r243: [20..21]
 r245: [86..87]
 r246: [82..83]
 r247: [76..77]
 r248: [64..65]
 r249: [60..61]
 r250: [54..55]
 r251: [44..45]
 r252: [40..41]
 r253: [34..35]
 r254: [22..23]
 r255: [18..19]
 r256: [12..13]
 r257: [14..21]
 r258: [36..43]
 r259: [56..63]
 r260: [78..85]

********** Assignment #1: **********

	 Assigning to 245 (cl=SSE_REGS, orig=164, freq=2, tfirst=245, tfreq=2)...
	   Assign 24 to reload r245 (freq=2)
	Hard reg 24 is preferable by r260 with profit 1
	Hard reg 24 is preferable by r247 with profit 1
	 Assigning to 247 (cl=SSE_REGS, orig=164, freq=2, tfirst=245, tfreq=2)...
	   Assign 24 to optional reload r247 (freq=2)
	Hard reg 24 is preferable by r260 with profit 2
	 Assigning to 260 (cl=SSE_REGS, orig=164, freq=2, tfirst=245, tfreq=2)...
	 Assigning to 248 (cl=SSE_REGS, orig=172, freq=2, tfirst=248, tfreq=2)...
	   Assign 25 to reload r248 (freq=2)
	Hard reg 25 is preferable by r259 with profit 1
	Hard reg 25 is preferable by r250 with profit 1
	 Assigning to 250 (cl=SSE_REGS, orig=172, freq=2, tfirst=248, tfreq=2)...
	   Assign 25 to optional reload r250 (freq=2)
	Hard reg 25 is preferable by r259 with profit 2
	 Assigning to 259 (cl=SSE_REGS, orig=172, freq=2, tfirst=248, tfreq=2)...
	 Assigning to 251 (cl=SSE_REGS, orig=179, freq=2, tfirst=251, tfreq=2)...
	   Assign 26 to reload r251 (freq=2)
	Hard reg 26 is preferable by r258 with profit 1
	Hard reg 26 is preferable by r253 with profit 1
	 Assigning to 253 (cl=SSE_REGS, orig=179, freq=2, tfirst=251, tfreq=2)...
	   Assign 26 to optional reload r253 (freq=2)
	Hard reg 26 is preferable by r258 with profit 2
	 Assigning to 258 (cl=SSE_REGS, orig=179, freq=2, tfirst=251, tfreq=2)...
	 Assigning to 254 (cl=SSE_REGS, orig=187, freq=2, tfirst=254, tfreq=2)...
	   Assign 27 to reload r254 (freq=2)
	Hard reg 27 is preferable by r257 with profit 1
	Hard reg 27 is preferable by r256 with profit 1
	 Assigning to 256 (cl=SSE_REGS, orig=187, freq=2, tfirst=254, tfreq=2)...
	   Assign 27 to optional reload r256 (freq=2)
	Hard reg 27 is preferable by r257 with profit 2
	 Assigning to 257 (cl=SSE_REGS, orig=187, freq=2, tfirst=254, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  234: r256:SF=r187:SF
      REG_DEAD r187:SF
   Insn after restoring regs:
  232: r187:SF=r254:SF
      REG_DEAD r254:SF
   Insn after restoring regs:
  231: r253:SF=r179:SF
      REG_DEAD r179:SF
   Insn after restoring regs:
  229: r179:SF=r251:SF
      REG_DEAD r251:SF
   Insn after restoring regs:
  228: r250:SF=r172:SF
      REG_DEAD r172:SF
   Insn after restoring regs:
  226: r172:SF=r248:SF
      REG_DEAD r248:SF
   Insn after restoring regs:
  225: r247:SF=r164:SF
      REG_DEAD r164:SF
   Insn after restoring regs:
  223: r164:SF=r245:SF
      REG_DEAD r245:SF
Remove optional reload reg 247
  Restoring original insn:
  161: r167:SF=r166:SF*r164:SF
      REG_DEAD r164:SF
      REG_DEAD r166:SF
  Deleting move 225
  225: r247:SF=r164:SF
      REG_DEAD r164:SF
deleting insn with uid = 225.
Remove optional reload reg 250
  Restoring original insn:
  175: r175:SF=r174:SF*r172:SF
      REG_DEAD r172:SF
      REG_DEAD r174:SF
  Deleting move 228
  228: r250:SF=r172:SF
      REG_DEAD r172:SF
deleting insn with uid = 228.
Remove optional reload reg 253
  Restoring original insn:
  188: r182:SF=r181:SF*r179:SF
      REG_DEAD r179:SF
      REG_DEAD r181:SF
  Deleting move 231
  231: r253:SF=r179:SF
      REG_DEAD r179:SF
deleting insn with uid = 231.
Remove optional reload reg 256
  Restoring original insn:
  202: r190:SF=r189:SF*r187:SF
      REG_DEAD r187:SF
      REG_DEAD r189:SF
  Deleting move 234
  234: r256:SF=r187:SF
      REG_DEAD r187:SF
deleting insn with uid = 234.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=261 from oldreg=187, assigning class SSE_REGS to r261
      Making reload reg 261 for reg 187 optional
  202: r190:SF=r189:SF*r261:SF
      REG_DEAD r187:SF
      REG_DEAD r189:SF
    Inserting insn reload before:
  239: r261:SF=r187:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 239:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=262 from oldreg=179, assigning class SSE_REGS to r262
      Making reload reg 262 for reg 179 optional
  188: r182:SF=r181:SF*r262:SF
      REG_DEAD r179:SF
      REG_DEAD r181:SF
    Inserting insn reload before:
  240: r262:SF=r179:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 240:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=263 from oldreg=172, assigning class SSE_REGS to r263
      Making reload reg 263 for reg 172 optional
  175: r175:SF=r174:SF*r263:SF
      REG_DEAD r172:SF
      REG_DEAD r174:SF
    Inserting insn reload before:
  241: r263:SF=r172:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 241:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 161:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=264 from oldreg=164, assigning class SSE_REGS to r264
      Making reload reg 264 for reg 164 optional
  161: r167:SF=r166:SF*r264:SF
      REG_DEAD r164:SF
      REG_DEAD r166:SF
    Inserting insn reload before:
  242: r264:SF=r164:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 242:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=265 from oldreg=187, assigning class SSE_REGS to inheritance r265
    Original reg change 187->265 (bb4):
  232: r265:SF=r254:SF
      REG_DEAD r254:SF
    Add original<-inheritance after:
  243: r187:SF=r265:SF

    Inheritance reuse change 187->265 (bb4):
  239: r261:SF=r265:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=266 from oldreg=179, assigning class SSE_REGS to inheritance r266
    Original reg change 179->266 (bb4):
  229: r266:SF=r251:SF
      REG_DEAD r251:SF
    Add original<-inheritance after:
  244: r179:SF=r266:SF

    Inheritance reuse change 179->266 (bb4):
  240: r262:SF=r266:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=267 from oldreg=172, assigning class SSE_REGS to inheritance r267
    Original reg change 172->267 (bb4):
  226: r267:SF=r248:SF
      REG_DEAD r248:SF
    Add original<-inheritance after:
  245: r172:SF=r267:SF

    Inheritance reuse change 172->267 (bb4):
  241: r263:SF=r267:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=268 from oldreg=164, assigning class SSE_REGS to inheritance r268
    Original reg change 164->268 (bb4):
  223: r268:SF=r245:SF
      REG_DEAD r245:SF
    Add original<-inheritance after:
  246: r164:SF=r268:SF

    Inheritance reuse change 164->268 (bb4):
  242: r264:SF=r268:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   243: r187:SF=r265:SF
deleting insn with uid = 243.
	    Removing dead insn:
   244: r179:SF=r266:SF
deleting insn with uid = 244.
	    Removing dead insn:
   245: r172:SF=r267:SF
deleting insn with uid = 245.
	    Removing dead insn:
   246: r164:SF=r268:SF
deleting insn with uid = 246.
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
   Insn 218: point = 0
   Insn 217: point = 0
   Insn 213: point = 1
   Insn 210: point = 3
  BB 3
   Insn 28: point = 4
   Insn 27: point = 4
   Insn 26: point = 5
   Insn 25: point = 7
   Insn 24: point = 9
  BB 4
   Insn 220: point = 10
   Insn 204: point = 10
   Insn 203: point = 10
   Insn 202: point = 11
   Insn 239: point = 13
	   Creating copy r261<-r265@1
   Insn 201: point = 15
   Insn 200: point = 17
   Insn 199: point = 18
   Insn 233: point = 18
	Hard reg 21 is preferable by r255 with profit 1
   Insn 198: point = 19
	Hard reg 21 is preferable by r255 with profit 1
	Hard reg 0 is preferable by r255 with profit 1
   Insn 197: point = 21
   Insn 232: point = 22
	   Creating copy r254->r265@1
   Insn 196: point = 24
   Insn 195: point = 25
   Insn 194: point = 27
   Insn 193: point = 28
   Insn 192: point = 30
   Insn 191: point = 32
   Insn 190: point = 34
   Insn 189: point = 35
   Insn 188: point = 36
   Insn 240: point = 38
	   Creating copy r262<-r266@1
   Insn 187: point = 40
   Insn 186: point = 42
   Insn 185: point = 43
   Insn 230: point = 43
	Hard reg 21 is preferable by r252 with profit 1
   Insn 184: point = 44
	Hard reg 21 is preferable by r252 with profit 1
	Hard reg 0 is preferable by r252 with profit 1
   Insn 183: point = 46
   Insn 229: point = 47
	   Creating copy r251->r266@1
   Insn 182: point = 49
   Insn 181: point = 50
   Insn 180: point = 52
   Insn 179: point = 53
   Insn 178: point = 55
   Insn 177: point = 57
   Insn 176: point = 58
   Insn 175: point = 59
   Insn 241: point = 61
	   Creating copy r263<-r267@1
   Insn 174: point = 63
   Insn 173: point = 65
   Insn 172: point = 66
   Insn 227: point = 66
	Hard reg 21 is preferable by r249 with profit 1
   Insn 171: point = 67
	Hard reg 21 is preferable by r249 with profit 1
	Hard reg 0 is preferable by r249 with profit 1
   Insn 170: point = 69
   Insn 226: point = 70
	   Creating copy r248->r267@1
   Insn 169: point = 72
   Insn 168: point = 73
   Insn 167: point = 75
   Insn 166: point = 76
   Insn 165: point = 78
   Insn 164: point = 80
   Insn 163: point = 82
   Insn 162: point = 83
   Insn 161: point = 84
   Insn 242: point = 86
	   Creating copy r264<-r268@1
   Insn 160: point = 88
   Insn 159: point = 90
   Insn 158: point = 91
   Insn 224: point = 91
	Hard reg 21 is preferable by r246 with profit 1
   Insn 157: point = 92
	Hard reg 21 is preferable by r246 with profit 1
	Hard reg 0 is preferable by r246 with profit 1
   Insn 156: point = 94
   Insn 223: point = 95
	   Creating copy r245->r268@1
   Insn 155: point = 97
   Insn 154: point = 98
   Insn 153: point = 100
   Insn 152: point = 101
   Insn 151: point = 103
   Insn 150: point = 105
   Insn 149: point = 106
   Insn 148: point = 107
   Insn 147: point = 109
   Insn 146: point = 110
   Insn 145: point = 111
   Insn 144: point = 113
   Insn 143: point = 114
   Insn 142: point = 115
   Insn 141: point = 116
   Insn 140: point = 116
   Insn 139: point = 117
   Insn 138: point = 118
   Insn 137: point = 120
   Insn 136: point = 122
   Insn 135: point = 124
   Insn 134: point = 125
   Insn 133: point = 127
   Insn 132: point = 129
   Insn 131: point = 131
   Insn 130: point = 132
   Insn 129: point = 134
   Insn 128: point = 136
   Insn 127: point = 138
   Insn 126: point = 139
   Insn 125: point = 141
   Insn 124: point = 143
   Insn 123: point = 144
   Insn 122: point = 145
   Insn 121: point = 146
   Insn 120: point = 146
   Insn 119: point = 147
   Insn 118: point = 149
   Insn 117: point = 151
   Insn 116: point = 153
   Insn 115: point = 155
   Insn 114: point = 157
   Insn 113: point = 158
   Insn 112: point = 160
   Insn 111: point = 162
   Insn 110: point = 164
   Insn 109: point = 165
   Insn 108: point = 167
   Insn 107: point = 169
   Insn 106: point = 171
   Insn 105: point = 172
   Insn 104: point = 174
   Insn 103: point = 176
   Insn 102: point = 178
   Insn 101: point = 179
   Insn 100: point = 181
   Insn 99: point = 183
   Insn 98: point = 185
   Insn 97: point = 187
   Insn 96: point = 188
   Insn 95: point = 190
   Insn 94: point = 192
   Insn 93: point = 193
   Insn 92: point = 195
   Insn 91: point = 197
   Insn 90: point = 199
   Insn 89: point = 200
   Insn 88: point = 202
   Insn 87: point = 204
   Insn 86: point = 205
   Insn 85: point = 206
   Insn 84: point = 207
   Insn 83: point = 207
   Insn 82: point = 208
   Insn 81: point = 209
   Insn 80: point = 211
   Insn 79: point = 213
   Insn 78: point = 215
   Insn 77: point = 216
   Insn 76: point = 218
   Insn 75: point = 220
   Insn 74: point = 222
   Insn 73: point = 223
   Insn 72: point = 225
   Insn 71: point = 227
   Insn 70: point = 229
   Insn 69: point = 230
   Insn 68: point = 232
   Insn 67: point = 234
   Insn 66: point = 235
   Insn 65: point = 236
   Insn 64: point = 237
   Insn 63: point = 237
   Insn 62: point = 238
   Insn 61: point = 240
   Insn 60: point = 242
   Insn 59: point = 244
   Insn 58: point = 246
   Insn 57: point = 248
   Insn 56: point = 249
   Insn 55: point = 251
   Insn 54: point = 253
   Insn 53: point = 255
   Insn 52: point = 256
   Insn 51: point = 258
   Insn 50: point = 260
   Insn 49: point = 262
   Insn 48: point = 263
   Insn 47: point = 265
   Insn 46: point = 267
   Insn 45: point = 269
   Insn 44: point = 270
   Insn 43: point = 272
   Insn 42: point = 274
   Insn 41: point = 276
   Insn 40: point = 278
   Insn 39: point = 279
   Insn 38: point = 281
   Insn 37: point = 283
   Insn 36: point = 284
   Insn 35: point = 286
   Insn 34: point = 288
   Insn 33: point = 290
   Insn 32: point = 291
   Insn 31: point = 293
   Insn 30: point = 295
  BB 2
   Insn 22: point = 296
   Insn 21: point = 296
   Insn 20: point = 297
   Insn 19: point = 298
   Insn 18: point = 299
   Insn 17: point = 300
   Insn 16: point = 301
   Insn 15: point = 302
   Insn 14: point = 303
   Insn 13: point = 304
   Insn 12: point = 305
   Insn 11: point = 306
   Insn 10: point = 307
   Insn 9: point = 308
   Insn 5: point = 308
   Insn 4: point = 308
   Insn 3: point = 308
   Insn 2: point = 308
 r87: [6..7]
 r88: [4..5]
 r89: [292..293]
 r90: [289..291]
 r91: [287..288]
 r92: [285..286]
 r93: [271..284]
 r94: [280..281]
 r95: [277..279]
 r96: [275..276]
 r97: [273..274]
 r98: [271..272]
 r99: [239..270]
 r100: [266..267]
 r101: [264..265]
 r102: [261..263]
 r103: [259..260]
 r104: [257..258]
 r105: [241..256]
 r106: [252..253]
 r107: [250..251]
 r108: [247..249]
 r109: [245..246]
 r110: [243..244]
 r111: [241..242]
 r112: [239..240]
 r113: [237..238]
 r114: [231..232]
 r115: [228..230]
 r116: [226..227]
 r117: [224..225]
 r118: [208..223]
 r119: [219..220]
 r120: [217..218]
 r121: [214..216]
 r122: [212..213]
 r123: [210..211]
 r124: [207..209]
 r125: [201..202]
 r126: [198..200]
 r127: [196..197]
 r128: [194..195]
 r129: [180..193]
 r130: [189..190]
 r131: [186..188]
 r132: [184..185]
 r133: [182..183]
 r134: [180..181]
 r135: [148..179]
 r136: [175..176]
 r137: [173..174]
 r138: [170..172]
 r139: [168..169]
 r140: [166..167]
 r141: [150..165]
 r142: [161..162]
 r143: [159..160]
 r144: [156..158]
 r145: [154..155]
 r146: [152..153]
 r147: [150..151]
 r148: [148..149]
 r149: [146..147]
 r150: [140..141]
 r151: [137..139]
 r152: [135..136]
 r153: [133..134]
 r154: [117..132]
 r155: [128..129]
 r156: [126..127]
 r157: [123..125]
 r158: [121..122]
 r159: [119..120]
 r160: [116..118]
 r161: [102..103]
 r162: [99..101]
 r163: [83..98]
 r165: [89..90]
 r166: [85..88]
 r167: [83..84]
 r168: [79..80]
 r169: [77..78]
 r170: [74..76]
 r171: [58..73]
 r173: [64..65]
 r174: [60..63]
 r175: [58..59]
 r176: [54..55]
 r177: [51..53]
 r178: [35..50]
 r180: [41..42]
 r181: [37..40]
 r182: [35..36]
 r183: [31..32]
 r184: [29..30]
 r185: [26..28]
 r186: [10..25]
 r188: [16..17]
 r189: [12..15]
 r190: [10..11]
 r191: [2..3]
 r192: [0..1]
 r193: [306..307]
 r194: [304..305]
 r195: [302..303]
 r196: [300..301]
 r197: [298..299]
 r198: [296..297]
 r199: [8..9]
 r200: [294..295]
 r201: [289..290]
 r202: [282..283]
 r203: [277..278]
 r204: [268..269]
 r205: [261..262]
 r206: [254..255]
 r207: [247..248]
 r208: [235..236]
 r209: [233..234]
 r210: [228..229]
 r211: [221..222]
 r212: [214..215]
 r213: [205..206]
 r214: [203..204]
 r215: [198..199]
 r216: [191..192]
 r217: [186..187]
 r218: [177..178]
 r219: [170..171]
 r220: [163..164]
 r221: [156..157]
 r222: [144..145]
 r223: [142..143]
 r224: [137..138]
 r225: [130..131]
 r226: [123..124]
 r227: [114..115]
 r228: [110..111]
 r229: [112..113]
 r230: [106..107]
 r231: [108..109]
 r232: [104..105]
 r233: [99..100]
 r234: [93..94]
 r235: [81..82]
 r236: [74..75]
 r237: [68..69]
 r238: [56..57]
 r239: [51..52]
 r240: [45..46]
 r241: [33..34]
 r242: [26..27]
 r243: [20..21]
 r245: [96..97]
 r246: [91..92]
 r248: [71..72]
 r249: [66..67]
 r251: [48..49]
 r252: [43..44]
 r254: [23..24]
 r255: [18..19]
 r261: [12..13]
 r262: [37..38]
 r263: [60..61]
 r264: [85..86]
 r265: [14..22]
 r266: [39..47]
 r267: [62..70]
 r268: [87..95]
Compressing live ranges: from 308 to 274 - 88%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [258..259]
 r90: [256..257]
 r91: [254..255]
 r92: [252..253]
 r93: [240..251]
 r94: [248..249]
 r95: [246..247]
 r96: [244..245]
 r97: [242..243]
 r98: [240..241]
 r99: [212..239]
 r100: [236..237]
 r101: [234..235]
 r102: [232..233]
 r103: [230..231]
 r104: [228..229]
 r105: [214..227]
 r106: [224..225]
 r107: [222..223]
 r108: [220..221]
 r109: [218..219]
 r110: [216..217]
 r111: [214..215]
 r112: [212..213]
 r113: [210..211]
 r114: [204..205]
 r115: [202..203]
 r116: [200..201]
 r117: [198..199]
 r118: [184..197]
 r119: [194..195]
 r120: [192..193]
 r121: [190..191]
 r122: [188..189]
 r123: [186..187]
 r124: [184..185]
 r125: [178..179]
 r126: [176..177]
 r127: [174..175]
 r128: [172..173]
 r129: [160..171]
 r130: [168..169]
 r131: [166..167]
 r132: [164..165]
 r133: [162..163]
 r134: [160..161]
 r135: [132..159]
 r136: [156..157]
 r137: [154..155]
 r138: [152..153]
 r139: [150..151]
 r140: [148..149]
 r141: [134..147]
 r142: [144..145]
 r143: [142..143]
 r144: [140..141]
 r145: [138..139]
 r146: [136..137]
 r147: [134..135]
 r148: [132..133]
 r149: [130..131]
 r150: [124..125]
 r151: [122..123]
 r152: [120..121]
 r153: [118..119]
 r154: [104..117]
 r155: [114..115]
 r156: [112..113]
 r157: [110..111]
 r158: [108..109]
 r159: [106..107]
 r160: [104..105]
 r161: [90..91]
 r162: [88..89]
 r163: [74..87]
 r165: [80..81]
 r166: [76..79]
 r167: [74..75]
 r168: [70..71]
 r169: [68..69]
 r170: [66..67]
 r171: [52..65]
 r173: [58..59]
 r174: [54..57]
 r175: [52..53]
 r176: [48..49]
 r177: [46..47]
 r178: [32..45]
 r180: [38..39]
 r181: [34..37]
 r182: [32..33]
 r183: [28..29]
 r184: [26..27]
 r185: [24..25]
 r186: [10..23]
 r188: [16..17]
 r189: [12..15]
 r190: [10..11]
 r191: [2..3]
 r192: [0..1]
 r193: [272..273]
 r194: [270..271]
 r195: [268..269]
 r196: [266..267]
 r197: [264..265]
 r198: [262..263]
 r199: [8..9]
 r200: [260..261]
 r201: [256..257]
 r202: [250..251]
 r203: [246..247]
 r204: [238..239]
 r205: [232..233]
 r206: [226..227]
 r207: [220..221]
 r208: [208..209]
 r209: [206..207]
 r210: [202..203]
 r211: [196..197]
 r212: [190..191]
 r213: [182..183]
 r214: [180..181]
 r215: [176..177]
 r216: [170..171]
 r217: [166..167]
 r218: [158..159]
 r219: [152..153]
 r220: [146..147]
 r221: [140..141]
 r222: [128..129]
 r223: [126..127]
 r224: [122..123]
 r225: [116..117]
 r226: [110..111]
 r227: [102..103]
 r228: [98..99]
 r229: [100..101]
 r230: [94..95]
 r231: [96..97]
 r232: [92..93]
 r233: [88..89]
 r234: [84..85]
 r235: [72..73]
 r236: [66..67]
 r237: [62..63]
 r238: [50..51]
 r239: [46..47]
 r240: [42..43]
 r241: [30..31]
 r242: [24..25]
 r243: [20..21]
 r245: [86..87]
 r246: [82..83]
 r248: [64..65]
 r249: [60..61]
 r251: [44..45]
 r252: [40..41]
 r254: [22..23]
 r255: [18..19]
 r261: [12..13]
 r262: [34..35]
 r263: [54..55]
 r264: [76..77]
 r265: [14..21]
 r266: [36..43]
 r267: [56..63]
 r268: [78..85]

********** Assignment #2: **********

	 Assigning to 261 (cl=SSE_REGS, orig=187, freq=2, tfirst=261, tfreq=2)...
	   Assign 28 to optional reload r261 (freq=2)
	Hard reg 28 is preferable by r265 with profit 1
	 Assigning to 265 (cl=SSE_REGS, orig=187, freq=2, tfirst=261, tfreq=2)...
	 Assigning to 262 (cl=SSE_REGS, orig=179, freq=2, tfirst=262, tfreq=2)...
	   Assign 24 to optional reload r262 (freq=2)
	Hard reg 24 is preferable by r266 with profit 1
	 Assigning to 266 (cl=SSE_REGS, orig=179, freq=2, tfirst=262, tfreq=2)...
	 Assigning to 263 (cl=SSE_REGS, orig=172, freq=2, tfirst=263, tfreq=2)...
	   Assign 25 to optional reload r263 (freq=2)
	Hard reg 25 is preferable by r267 with profit 1
	 Assigning to 267 (cl=SSE_REGS, orig=172, freq=2, tfirst=263, tfreq=2)...
	 Assigning to 264 (cl=SSE_REGS, orig=164, freq=2, tfirst=264, tfreq=2)...
	   Assign 26 to optional reload r264 (freq=2)
	Hard reg 26 is preferable by r268 with profit 1
	 Assigning to 268 (cl=SSE_REGS, orig=164, freq=2, tfirst=264, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  239: r261:SF=r187:SF
      REG_DEAD r187:SF
   Insn after restoring regs:
  232: r187:SF=r254:SF
      REG_DEAD r254:SF
   Insn after restoring regs:
  240: r262:SF=r179:SF
      REG_DEAD r179:SF
   Insn after restoring regs:
  229: r179:SF=r251:SF
      REG_DEAD r251:SF
   Insn after restoring regs:
  241: r263:SF=r172:SF
      REG_DEAD r172:SF
   Insn after restoring regs:
  226: r172:SF=r248:SF
      REG_DEAD r248:SF
   Insn after restoring regs:
  242: r264:SF=r164:SF
      REG_DEAD r164:SF
   Insn after restoring regs:
  223: r164:SF=r245:SF
      REG_DEAD r245:SF
Keep optional reload reg 247
Keep optional reload reg 250
Keep optional reload reg 253
Keep optional reload reg 256
Remove optional reload reg 261
  Restoring original insn:
  202: r190:SF=r189:SF*r187:SF
      REG_DEAD r187:SF
      REG_DEAD r189:SF
  Deleting move 239
  239: r261:SF=r187:SF
      REG_DEAD r187:SF
deleting insn with uid = 239.
Remove optional reload reg 262
  Restoring original insn:
  188: r182:SF=r181:SF*r179:SF
      REG_DEAD r179:SF
      REG_DEAD r181:SF
  Deleting move 240
  240: r262:SF=r179:SF
      REG_DEAD r179:SF
deleting insn with uid = 240.
Remove optional reload reg 263
  Restoring original insn:
  175: r175:SF=r174:SF*r172:SF
      REG_DEAD r172:SF
      REG_DEAD r174:SF
  Deleting move 241
  241: r263:SF=r172:SF
      REG_DEAD r172:SF
deleting insn with uid = 241.
Remove optional reload reg 264
  Restoring original insn:
  161: r167:SF=r166:SF*r164:SF
      REG_DEAD r164:SF
      REG_DEAD r166:SF
  Deleting move 242
  242: r264:SF=r164:SF
      REG_DEAD r164:SF
deleting insn with uid = 242.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 161:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
   Insn 218: point = 0
   Insn 217: point = 0
   Insn 213: point = 1
   Insn 210: point = 3
  BB 3
   Insn 28: point = 4
   Insn 27: point = 4
   Insn 26: point = 5
   Insn 25: point = 7
   Insn 24: point = 9
  BB 4
   Insn 220: point = 10
   Insn 204: point = 10
   Insn 203: point = 10
   Insn 202: point = 11
   Insn 201: point = 13
   Insn 200: point = 15
   Insn 199: point = 16
   Insn 233: point = 16
   Insn 198: point = 17
   Insn 197: point = 19
   Insn 232: point = 20
   Insn 196: point = 22
   Insn 195: point = 23
   Insn 194: point = 25
   Insn 193: point = 26
   Insn 192: point = 28
   Insn 191: point = 30
   Insn 190: point = 32
   Insn 189: point = 33
   Insn 188: point = 34
   Insn 187: point = 36
   Insn 186: point = 38
   Insn 185: point = 39
   Insn 230: point = 39
   Insn 184: point = 40
   Insn 183: point = 42
   Insn 229: point = 43
   Insn 182: point = 45
   Insn 181: point = 46
   Insn 180: point = 48
   Insn 179: point = 49
   Insn 178: point = 51
   Insn 177: point = 53
   Insn 176: point = 54
   Insn 175: point = 55
   Insn 174: point = 57
   Insn 173: point = 59
   Insn 172: point = 60
   Insn 227: point = 60
   Insn 171: point = 61
   Insn 170: point = 63
   Insn 226: point = 64
   Insn 169: point = 66
   Insn 168: point = 67
   Insn 167: point = 69
   Insn 166: point = 70
   Insn 165: point = 72
   Insn 164: point = 74
   Insn 163: point = 76
   Insn 162: point = 77
   Insn 161: point = 78
   Insn 160: point = 80
   Insn 159: point = 82
   Insn 158: point = 83
   Insn 224: point = 83
   Insn 157: point = 84
   Insn 156: point = 86
   Insn 223: point = 87
   Insn 155: point = 89
   Insn 154: point = 90
   Insn 153: point = 92
   Insn 152: point = 93
   Insn 151: point = 95
   Insn 150: point = 97
   Insn 149: point = 98
   Insn 148: point = 99
   Insn 147: point = 101
   Insn 146: point = 102
   Insn 145: point = 103
   Insn 144: point = 105
   Insn 143: point = 106
   Insn 142: point = 107
   Insn 141: point = 108
   Insn 140: point = 108
   Insn 139: point = 109
   Insn 138: point = 110
   Insn 137: point = 112
   Insn 136: point = 114
   Insn 135: point = 116
   Insn 134: point = 117
   Insn 133: point = 119
   Insn 132: point = 121
   Insn 131: point = 123
   Insn 130: point = 124
   Insn 129: point = 126
   Insn 128: point = 128
   Insn 127: point = 130
   Insn 126: point = 131
   Insn 125: point = 133
   Insn 124: point = 135
   Insn 123: point = 136
   Insn 122: point = 137
   Insn 121: point = 138
   Insn 120: point = 138
   Insn 119: point = 139
   Insn 118: point = 141
   Insn 117: point = 143
   Insn 116: point = 145
   Insn 115: point = 147
   Insn 114: point = 149
   Insn 113: point = 150
   Insn 112: point = 152
   Insn 111: point = 154
   Insn 110: point = 156
   Insn 109: point = 157
   Insn 108: point = 159
   Insn 107: point = 161
   Insn 106: point = 163
   Insn 105: point = 164
   Insn 104: point = 166
   Insn 103: point = 168
   Insn 102: point = 170
   Insn 101: point = 171
   Insn 100: point = 173
   Insn 99: point = 175
   Insn 98: point = 177
   Insn 97: point = 179
   Insn 96: point = 180
   Insn 95: point = 182
   Insn 94: point = 184
   Insn 93: point = 185
   Insn 92: point = 187
   Insn 91: point = 189
   Insn 90: point = 191
   Insn 89: point = 192
   Insn 88: point = 194
   Insn 87: point = 196
   Insn 86: point = 197
   Insn 85: point = 198
   Insn 84: point = 199
   Insn 83: point = 199
   Insn 82: point = 200
   Insn 81: point = 201
   Insn 80: point = 203
   Insn 79: point = 205
   Insn 78: point = 207
   Insn 77: point = 208
   Insn 76: point = 210
   Insn 75: point = 212
   Insn 74: point = 214
   Insn 73: point = 215
   Insn 72: point = 217
   Insn 71: point = 219
   Insn 70: point = 221
   Insn 69: point = 222
   Insn 68: point = 224
   Insn 67: point = 226
   Insn 66: point = 227
   Insn 65: point = 228
   Insn 64: point = 229
   Insn 63: point = 229
   Insn 62: point = 230
   Insn 61: point = 232
   Insn 60: point = 234
   Insn 59: point = 236
   Insn 58: point = 238
   Insn 57: point = 240
   Insn 56: point = 241
   Insn 55: point = 243
   Insn 54: point = 245
   Insn 53: point = 247
   Insn 52: point = 248
   Insn 51: point = 250
   Insn 50: point = 252
   Insn 49: point = 254
   Insn 48: point = 255
   Insn 47: point = 257
   Insn 46: point = 259
   Insn 45: point = 261
   Insn 44: point = 262
   Insn 43: point = 264
   Insn 42: point = 266
   Insn 41: point = 268
   Insn 40: point = 270
   Insn 39: point = 271
   Insn 38: point = 273
   Insn 37: point = 275
   Insn 36: point = 276
   Insn 35: point = 278
   Insn 34: point = 280
   Insn 33: point = 282
   Insn 32: point = 283
   Insn 31: point = 285
   Insn 30: point = 287
  BB 2
   Insn 22: point = 288
   Insn 21: point = 288
   Insn 20: point = 289
   Insn 19: point = 290
   Insn 18: point = 291
   Insn 17: point = 292
   Insn 16: point = 293
   Insn 15: point = 294
   Insn 14: point = 295
   Insn 13: point = 296
   Insn 12: point = 297
   Insn 11: point = 298
   Insn 10: point = 299
   Insn 9: point = 300
   Insn 5: point = 300
   Insn 4: point = 300
   Insn 3: point = 300
   Insn 2: point = 300
 r164: [79..87]
 r172: [56..64]
 r179: [35..43]
 r187: [12..20]
 r246: [83..84]
 r249: [60..61]
 r252: [39..40]
 r255: [16..17]
Compressing live ranges: from 300 to 8 - 2%
Ranges after the compression:
 r164: [6..7]
 r172: [4..5]
 r179: [2..3]
 r187: [0..1]
 r246: [6..7]
 r249: [4..5]
 r252: [2..3]
 r255: [0..1]
  Slot 0 regnos (width = 4):	 164	 187	 179	 172
  Slot 1 regnos (width = 8):	 246	 255	 252	 249
Changing spilled pseudos to memory in insn #223
Changing spilled pseudos to memory in insn #157
Changing spilled pseudos to memory in insn #224
Changing spilled pseudos to memory in insn #161
Changing spilled pseudos to memory in insn #226
Changing spilled pseudos to memory in insn #171
Changing spilled pseudos to memory in insn #227
Changing spilled pseudos to memory in insn #175
Changing spilled pseudos to memory in insn #229
Changing spilled pseudos to memory in insn #184
Changing spilled pseudos to memory in insn #230
Changing spilled pseudos to memory in insn #188
Changing spilled pseudos to memory in insn #232
Changing spilled pseudos to memory in insn #198
Changing spilled pseudos to memory in insn #233
Changing spilled pseudos to memory in insn #202
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #202
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #233
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 233:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 198:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #232
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 232:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #188
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #230
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 230:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 184:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #229
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 229:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #175
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #227
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 227:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 171:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #226
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 226:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #161
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #224
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 224:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 157:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #223
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 223:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 44
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 82
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 101
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 139
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 140
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 154
changing reg in insn 154
changing reg in insn 154
changing reg in insn 162
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 168
changing reg in insn 176
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 181
changing reg in insn 181
changing reg in insn 189
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 195
changing reg in insn 195
changing reg in insn 195
changing reg in insn 203
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 210
changing reg in insn 213
changing reg in insn 213
changing reg in insn 217
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 57
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 74
changing reg in insn 75
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 131
changing reg in insn 132
changing reg in insn 135
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 149
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 177
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 190
changing reg in insn 191
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 198
deleting insn with uid = 63.
deleting insn with uid = 82.
deleting insn with uid = 83.
deleting insn with uid = 120.
deleting insn with uid = 139.
deleting insn with uid = 140.
deleting insn with uid = 159.
deleting insn with uid = 173.
deleting insn with uid = 186.
deleting insn with uid = 200.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 158.
verify found no changes in insn with uid = 172.
verify found no changes in insn with uid = 185.
verify found no changes in insn with uid = 199.


int ecc_correction(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={91d,83u} r1={25d,17u,16e} r2={9d,1u} r3={4d,4u} r4={9d,1u} r5={9d,1u} r6={1d,87u} r7={1d,13u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={51d,1u} r18={8d} r19={8d} r20={1d,1u,16e} r21={53d,52u} r22={15d,6u} r23={11d,2u} r24={10d,1u} r25={10d,1u} r26={10d,1u} r27={10d,1u} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 1100{795d,273u,32e} in 201{193 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 193 194 195 196 197 198
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) ge2fitman_preproc.cpp:239 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:241 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DF 21 xmm0 [193])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:242 128 {*movdf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64])
        (reg:DF 21 xmm0 [193])) ge2fitman_preproc.cpp:242 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DF 21 xmm0 [194])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:242 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [194])) ge2fitman_preproc.cpp:242 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DF 21 xmm0 [195])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])
        (reg:DF 21 xmm0 [195])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DF 21 xmm0 [196])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [196])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DF 21 xmm0 [197])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 21 xmm0 [197])) ge2fitman_preproc.cpp:243 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DF 21 xmm0 [198])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:244 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [198])) ge2fitman_preproc.cpp:244 128 {*movdf_internal}
     (nil))
(insn 22 21 205 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:247 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 199
(code_label 205 22 23 3 64 "" [1 uses])
(note 23 205 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:247 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:SI 0 ax [orig:87 D.26019 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [199])
                (const_int 324 [0x144])) [0 procpar_info_12(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:247 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.26019 ] [88])
                (ashift:SI (reg:SI 0 ax [orig:87 D.26019 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:247 511 {*ashlsi3_1}
     (nil))
(insn 27 26 28 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.26019 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:247 7 {*cmpsi_1}
     (nil))
(jump_insn 28 27 29 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 208)
            (pc))) ge2fitman_preproc.cpp:247 612 {*jcc_1}
     (nil)
 -> 208)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg:SI 0 ax [200])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:249 90 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 0 ax [orig:89 D.26020 ] [89])
        (sign_extend:DI (reg:SI 0 ax [200]))) ge2fitman_preproc.cpp:249 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 1 dx [orig:90 D.26020 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.26020 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:249 512 {*ashldi3_1}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:249 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.26021 ] [91])
                (plus:DI (reg/f:DI 0 ax [201])
                    (reg:DI 1 dx [orig:90 D.26020 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:249 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.26020 ] [90]))
        (nil)))
(insn 35 34 36 4 (set (reg:SF 21 xmm0 [orig:92 D.26022 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.26021 ] [91]) [0 *_18+0 S4 A32])) ge2fitman_preproc.cpp:249 129 {*movsf_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DF 22 xmm1 [orig:93 D.26023 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.26022 ] [92]))) ge2fitman_preproc.cpp:249 152 {*extendsfdf2_sse}
     (nil))
(insn 37 36 38 4 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:249 90 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 0 ax [orig:94 D.26020 ] [94])
        (sign_extend:DI (reg:SI 0 ax [202]))) ge2fitman_preproc.cpp:249 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 1 dx [orig:95 D.26020 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.26020 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:249 512 {*ashldi3_1}
     (nil))
(insn 40 39 41 4 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:249 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.26021 ] [96])
                (plus:DI (reg/f:DI 0 ax [203])
                    (reg:DI 1 dx [orig:95 D.26020 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:249 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.26020 ] [95]))
        (nil)))
(insn 42 41 43 4 (set (reg:SF 21 xmm0 [orig:97 D.26022 ] [97])
        (mem:SF (reg/f:DI 0 ax [orig:96 D.26021 ] [96]) [0 *_23+0 S4 A32])) ge2fitman_preproc.cpp:249 129 {*movsf_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DF 21 xmm0 [orig:98 D.26023 ] [98])
        (float_extend:DF (reg:SF 21 xmm0 [orig:97 D.26022 ] [97]))) ge2fitman_preproc.cpp:249 152 {*extendsfdf2_sse}
     (nil))
(insn 44 43 45 4 (set (reg:DF 22 xmm1 [orig:99 D.26023 ] [99])
        (mult:DF (reg:DF 22 xmm1 [orig:93 D.26023 ] [93])
            (reg:DF 21 xmm0 [orig:98 D.26023 ] [98]))) ge2fitman_preproc.cpp:249 798 {*fop_df_comm_sse}
     (nil))
(insn 45 44 46 4 (set (reg:SI 0 ax [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:250 90 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:DI 0 ax [orig:100 D.26024 ] [100])
        (sign_extend:DI (reg:SI 0 ax [204]))) ge2fitman_preproc.cpp:250 142 {*extendsidi2_rex64}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 0 ax [orig:101 D.26024 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 D.26024 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 218 {*adddi_1}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 1 dx [orig:102 D.26024 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.26024 ] [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 512 {*ashldi3_1}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:250 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.26021 ] [103])
                (plus:DI (reg/f:DI 0 ax [205])
                    (reg:DI 1 dx [orig:102 D.26024 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.26024 ] [102]))
        (nil)))
(insn 51 50 52 4 (set (reg:SF 21 xmm0 [orig:104 D.26022 ] [104])
        (mem:SF (reg/f:DI 0 ax [orig:103 D.26021 ] [103]) [0 *_30+0 S4 A32])) ge2fitman_preproc.cpp:250 129 {*movsf_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DF 23 xmm2 [orig:105 D.26023 ] [105])
        (float_extend:DF (reg:SF 21 xmm0 [orig:104 D.26022 ] [104]))) ge2fitman_preproc.cpp:250 152 {*extendsfdf2_sse}
     (nil))
(insn 53 52 54 4 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:250 90 {*movsi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:DI 0 ax [orig:106 D.26024 ] [106])
        (sign_extend:DI (reg:SI 0 ax [206]))) ge2fitman_preproc.cpp:250 142 {*extendsidi2_rex64}
     (nil))
(insn 55 54 56 4 (parallel [
            (set (reg:DI 0 ax [orig:107 D.26024 ] [107])
                (plus:DI (reg:DI 0 ax [orig:106 D.26024 ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 218 {*adddi_1}
     (nil))
(insn 56 55 57 4 (parallel [
            (set (reg:DI 1 dx [orig:108 D.26024 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:107 D.26024 ] [107])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 512 {*ashldi3_1}
     (nil))
(insn 57 56 58 4 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:250 89 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.26021 ] [109])
                (plus:DI (reg/f:DI 0 ax [207])
                    (reg:DI 1 dx [orig:108 D.26024 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:250 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.26024 ] [108]))
        (nil)))
(insn 59 58 60 4 (set (reg:SF 21 xmm0 [orig:110 D.26022 ] [110])
        (mem:SF (reg/f:DI 0 ax [orig:109 D.26021 ] [109]) [0 *_36+0 S4 A32])) ge2fitman_preproc.cpp:250 129 {*movsf_internal}
     (nil))
(insn 60 59 61 4 (set (reg:DF 21 xmm0 [orig:111 D.26023 ] [111])
        (float_extend:DF (reg:SF 21 xmm0 [orig:110 D.26022 ] [110]))) ge2fitman_preproc.cpp:250 152 {*extendsfdf2_sse}
     (nil))
(insn 61 60 62 4 (set (reg:DF 21 xmm0 [orig:112 D.26023 ] [112])
        (mult:DF (reg:DF 21 xmm0 [orig:111 D.26023 ] [111])
            (reg:DF 23 xmm2 [orig:105 D.26023 ] [105]))) ge2fitman_preproc.cpp:250 798 {*fop_df_comm_sse}
     (nil))
(insn 62 61 64 4 (set (reg:DF 21 xmm0 [orig:113 D.26023 ] [113])
        (plus:DF (reg:DF 21 xmm0 [orig:112 D.26023 ] [112])
            (reg:DF 22 xmm1 [orig:99 D.26023 ] [99]))) ge2fitman_preproc.cpp:249 798 {*fop_df_comm_sse}
     (nil))
(call_insn 64 62 65 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:250 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 65 64 66 4 (set (reg:DF 0 ax [208])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:250 128 {*movdf_internal}
     (nil))
(insn 66 65 67 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [208])) ge2fitman_preproc.cpp:250 128 {*movdf_internal}
     (nil))
(insn 67 66 68 4 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:252 90 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 0 ax [orig:114 D.26020 ] [114])
        (sign_extend:DI (reg:SI 0 ax [209]))) ge2fitman_preproc.cpp:252 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:DI 1 dx [orig:115 D.26020 ] [115])
                (ashift:DI (reg:DI 0 ax [orig:114 D.26020 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 4 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:252 89 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.26021 ] [116])
                (plus:DI (reg/f:DI 0 ax [210])
                    (reg:DI 1 dx [orig:115 D.26020 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.26020 ] [115]))
        (nil)))
(insn 72 71 73 4 (set (reg:SF 21 xmm0 [orig:117 D.26022 ] [117])
        (mem:SF (reg/f:DI 0 ax [orig:116 D.26021 ] [116]) [0 *_45+0 S4 A32])) ge2fitman_preproc.cpp:252 129 {*movsf_internal}
     (nil))
(insn 73 72 74 4 (set (reg:DF 22 xmm1 [orig:118 D.26023 ] [118])
        (float_extend:DF (reg:SF 21 xmm0 [orig:117 D.26022 ] [117]))) ge2fitman_preproc.cpp:252 152 {*extendsfdf2_sse}
     (nil))
(insn 74 73 75 4 (set (reg:SI 0 ax [211])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:252 90 {*movsi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:DI 0 ax [orig:119 D.26024 ] [119])
        (sign_extend:DI (reg:SI 0 ax [211]))) ge2fitman_preproc.cpp:252 142 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg:DI 0 ax [orig:120 D.26024 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 D.26024 ] [119])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 218 {*adddi_1}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg:DI 1 dx [orig:121 D.26024 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.26024 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 512 {*ashldi3_1}
     (nil))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:252 89 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.26021 ] [122])
                (plus:DI (reg/f:DI 0 ax [212])
                    (reg:DI 1 dx [orig:121 D.26024 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:252 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.26024 ] [121]))
        (nil)))
(insn 80 79 81 4 (set (reg:SF 21 xmm0 [orig:123 D.26022 ] [123])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.26021 ] [122]) [0 *_51+0 S4 A32])) ge2fitman_preproc.cpp:252 129 {*movsf_internal}
     (nil))
(insn 81 80 84 4 (set (reg:DF 21 xmm0 [orig:124 D.26023 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.26022 ] [123]))) ge2fitman_preproc.cpp:252 152 {*extendsfdf2_sse}
     (nil))
(call_insn 84 81 85 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fe35704f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:252 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 85 84 86 4 (set (reg:DF 0 ax [213])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:252 128 {*movdf_internal}
     (nil))
(insn 86 85 87 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [213])) ge2fitman_preproc.cpp:252 128 {*movdf_internal}
     (nil))
(insn 87 86 88 4 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:254 90 {*movsi_internal}
     (nil))
(insn 88 87 89 4 (set (reg:DI 0 ax [orig:125 D.26020 ] [125])
        (sign_extend:DI (reg:SI 0 ax [214]))) ge2fitman_preproc.cpp:254 142 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 4 (parallel [
            (set (reg:DI 1 dx [orig:126 D.26020 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.26020 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:254 512 {*ashldi3_1}
     (nil))
(insn 90 89 91 4 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:254 89 {*movdi_internal}
     (nil))
(insn 91 90 92 4 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.26021 ] [127])
                (plus:DI (reg/f:DI 0 ax [215])
                    (reg:DI 1 dx [orig:126 D.26020 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:254 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.26020 ] [126]))
        (nil)))
(insn 92 91 93 4 (set (reg:SF 21 xmm0 [orig:128 D.26022 ] [128])
        (mem:SF (reg/f:DI 0 ax [orig:127 D.26021 ] [127]) [0 *_59+0 S4 A32])) ge2fitman_preproc.cpp:254 129 {*movsf_internal}
     (nil))
(insn 93 92 94 4 (set (reg:DF 22 xmm1 [orig:129 D.26023 ] [129])
        (float_extend:DF (reg:SF 21 xmm0 [orig:128 D.26022 ] [128]))) ge2fitman_preproc.cpp:254 152 {*extendsfdf2_sse}
     (nil))
(insn 94 93 95 4 (set (reg:SI 0 ax [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:254 90 {*movsi_internal}
     (nil))
(insn 95 94 96 4 (set (reg:DI 0 ax [orig:130 D.26020 ] [130])
        (sign_extend:DI (reg:SI 0 ax [216]))) ge2fitman_preproc.cpp:254 142 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 4 (parallel [
            (set (reg:DI 1 dx [orig:131 D.26020 ] [131])
                (ashift:DI (reg:DI 0 ax [orig:130 D.26020 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:254 512 {*ashldi3_1}
     (nil))
(insn 97 96 98 4 (set (reg/f:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:254 89 {*movdi_internal}
     (nil))
(insn 98 97 99 4 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.26021 ] [132])
                (plus:DI (reg/f:DI 0 ax [217])
                    (reg:DI 1 dx [orig:131 D.26020 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:254 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.26020 ] [131]))
        (nil)))
(insn 99 98 100 4 (set (reg:SF 21 xmm0 [orig:133 D.26022 ] [133])
        (mem:SF (reg/f:DI 0 ax [orig:132 D.26021 ] [132]) [0 *_64+0 S4 A32])) ge2fitman_preproc.cpp:254 129 {*movsf_internal}
     (nil))
(insn 100 99 101 4 (set (reg:DF 21 xmm0 [orig:134 D.26023 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.26022 ] [133]))) ge2fitman_preproc.cpp:254 152 {*extendsfdf2_sse}
     (nil))
(insn 101 100 102 4 (set (reg:DF 22 xmm1 [orig:135 D.26023 ] [135])
        (mult:DF (reg:DF 22 xmm1 [orig:129 D.26023 ] [129])
            (reg:DF 21 xmm0 [orig:134 D.26023 ] [134]))) ge2fitman_preproc.cpp:254 798 {*fop_df_comm_sse}
     (nil))
(insn 102 101 103 4 (set (reg:SI 0 ax [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:255 90 {*movsi_internal}
     (nil))
(insn 103 102 104 4 (set (reg:DI 0 ax [orig:136 D.26024 ] [136])
        (sign_extend:DI (reg:SI 0 ax [218]))) ge2fitman_preproc.cpp:255 142 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 4 (parallel [
            (set (reg:DI 0 ax [orig:137 D.26024 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 D.26024 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 218 {*adddi_1}
     (nil))
(insn 105 104 106 4 (parallel [
            (set (reg:DI 1 dx [orig:138 D.26024 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:137 D.26024 ] [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 512 {*ashldi3_1}
     (nil))
(insn 106 105 107 4 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:255 89 {*movdi_internal}
     (nil))
(insn 107 106 108 4 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.26021 ] [139])
                (plus:DI (reg/f:DI 0 ax [219])
                    (reg:DI 1 dx [orig:138 D.26024 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:138 D.26024 ] [138]))
        (nil)))
(insn 108 107 109 4 (set (reg:SF 21 xmm0 [orig:140 D.26022 ] [140])
        (mem:SF (reg/f:DI 0 ax [orig:139 D.26021 ] [139]) [0 *_71+0 S4 A32])) ge2fitman_preproc.cpp:255 129 {*movsf_internal}
     (nil))
(insn 109 108 110 4 (set (reg:DF 23 xmm2 [orig:141 D.26023 ] [141])
        (float_extend:DF (reg:SF 21 xmm0 [orig:140 D.26022 ] [140]))) ge2fitman_preproc.cpp:255 152 {*extendsfdf2_sse}
     (nil))
(insn 110 109 111 4 (set (reg:SI 0 ax [220])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:255 90 {*movsi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:DI 0 ax [orig:142 D.26024 ] [142])
        (sign_extend:DI (reg:SI 0 ax [220]))) ge2fitman_preproc.cpp:255 142 {*extendsidi2_rex64}
     (nil))
(insn 112 111 113 4 (parallel [
            (set (reg:DI 0 ax [orig:143 D.26024 ] [143])
                (plus:DI (reg:DI 0 ax [orig:142 D.26024 ] [142])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 218 {*adddi_1}
     (nil))
(insn 113 112 114 4 (parallel [
            (set (reg:DI 1 dx [orig:144 D.26024 ] [144])
                (ashift:DI (reg:DI 0 ax [orig:143 D.26024 ] [143])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 512 {*ashldi3_1}
     (nil))
(insn 114 113 115 4 (set (reg/f:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:255 89 {*movdi_internal}
     (nil))
(insn 115 114 116 4 (parallel [
            (set (reg/f:DI 0 ax [orig:145 D.26021 ] [145])
                (plus:DI (reg/f:DI 0 ax [221])
                    (reg:DI 1 dx [orig:144 D.26024 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:255 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:144 D.26024 ] [144]))
        (nil)))
(insn 116 115 117 4 (set (reg:SF 21 xmm0 [orig:146 D.26022 ] [146])
        (mem:SF (reg/f:DI 0 ax [orig:145 D.26021 ] [145]) [0 *_77+0 S4 A32])) ge2fitman_preproc.cpp:255 129 {*movsf_internal}
     (nil))
(insn 117 116 118 4 (set (reg:DF 21 xmm0 [orig:147 D.26023 ] [147])
        (float_extend:DF (reg:SF 21 xmm0 [orig:146 D.26022 ] [146]))) ge2fitman_preproc.cpp:255 152 {*extendsfdf2_sse}
     (nil))
(insn 118 117 119 4 (set (reg:DF 21 xmm0 [orig:148 D.26023 ] [148])
        (mult:DF (reg:DF 21 xmm0 [orig:147 D.26023 ] [147])
            (reg:DF 23 xmm2 [orig:141 D.26023 ] [141]))) ge2fitman_preproc.cpp:255 798 {*fop_df_comm_sse}
     (nil))
(insn 119 118 121 4 (set (reg:DF 21 xmm0 [orig:149 D.26023 ] [149])
        (plus:DF (reg:DF 21 xmm0 [orig:148 D.26023 ] [148])
            (reg:DF 22 xmm1 [orig:135 D.26023 ] [135]))) ge2fitman_preproc.cpp:254 798 {*fop_df_comm_sse}
     (nil))
(call_insn 121 119 122 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:255 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 122 121 123 4 (set (reg:DF 0 ax [222])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:255 128 {*movdf_internal}
     (nil))
(insn 123 122 124 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [222])) ge2fitman_preproc.cpp:255 128 {*movdf_internal}
     (nil))
(insn 124 123 125 4 (set (reg:SI 0 ax [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:257 90 {*movsi_internal}
     (nil))
(insn 125 124 126 4 (set (reg:DI 0 ax [orig:150 D.26020 ] [150])
        (sign_extend:DI (reg:SI 0 ax [223]))) ge2fitman_preproc.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 4 (parallel [
            (set (reg:DI 1 dx [orig:151 D.26020 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.26020 ] [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 127 126 128 4 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:257 89 {*movdi_internal}
     (nil))
(insn 128 127 129 4 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.26021 ] [152])
                (plus:DI (reg/f:DI 0 ax [224])
                    (reg:DI 1 dx [orig:151 D.26020 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.26020 ] [151]))
        (nil)))
(insn 129 128 130 4 (set (reg:SF 21 xmm0 [orig:153 D.26022 ] [153])
        (mem:SF (reg/f:DI 0 ax [orig:152 D.26021 ] [152]) [0 *_86+0 S4 A32])) ge2fitman_preproc.cpp:257 129 {*movsf_internal}
     (nil))
(insn 130 129 131 4 (set (reg:DF 22 xmm1 [orig:154 D.26023 ] [154])
        (float_extend:DF (reg:SF 21 xmm0 [orig:153 D.26022 ] [153]))) ge2fitman_preproc.cpp:257 152 {*extendsfdf2_sse}
     (nil))
(insn 131 130 132 4 (set (reg:SI 0 ax [225])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:257 90 {*movsi_internal}
     (nil))
(insn 132 131 133 4 (set (reg:DI 0 ax [orig:155 D.26024 ] [155])
        (sign_extend:DI (reg:SI 0 ax [225]))) ge2fitman_preproc.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 133 132 134 4 (parallel [
            (set (reg:DI 0 ax [orig:156 D.26024 ] [156])
                (plus:DI (reg:DI 0 ax [orig:155 D.26024 ] [155])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 218 {*adddi_1}
     (nil))
(insn 134 133 135 4 (parallel [
            (set (reg:DI 1 dx [orig:157 D.26024 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 D.26024 ] [156])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 135 134 136 4 (set (reg/f:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:257 89 {*movdi_internal}
     (nil))
(insn 136 135 137 4 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.26021 ] [158])
                (plus:DI (reg/f:DI 0 ax [226])
                    (reg:DI 1 dx [orig:157 D.26024 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:257 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:157 D.26024 ] [157]))
        (nil)))
(insn 137 136 138 4 (set (reg:SF 21 xmm0 [orig:159 D.26022 ] [159])
        (mem:SF (reg/f:DI 0 ax [orig:158 D.26021 ] [158]) [0 *_92+0 S4 A32])) ge2fitman_preproc.cpp:257 129 {*movsf_internal}
     (nil))
(insn 138 137 141 4 (set (reg:DF 21 xmm0 [orig:160 D.26023 ] [160])
        (float_extend:DF (reg:SF 21 xmm0 [orig:159 D.26022 ] [159]))) ge2fitman_preproc.cpp:257 152 {*extendsfdf2_sse}
     (nil))
(call_insn 141 138 142 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fe35704f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:257 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 142 141 143 4 (set (reg:DF 0 ax [227])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:257 128 {*movdf_internal}
     (nil))
(insn 143 142 144 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [227])) ge2fitman_preproc.cpp:257 128 {*movdf_internal}
     (nil))
(insn 144 143 145 4 (set (reg:DF 21 xmm0 [229])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])) ge2fitman_preproc.cpp:259 128 {*movdf_internal}
     (nil))
(insn 145 144 146 4 (set (reg:DF 21 xmm0 [228])
        (minus:DF (reg:DF 21 xmm0 [229])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:259 805 {*fop_df_1_sse}
     (nil))
(insn 146 145 147 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 21 xmm0 [228])) ge2fitman_preproc.cpp:259 128 {*movdf_internal}
     (nil))
(insn 147 146 148 4 (set (reg:DF 21 xmm0 [231])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])) ge2fitman_preproc.cpp:260 128 {*movdf_internal}
     (nil))
(insn 148 147 149 4 (set (reg:DF 21 xmm0 [230])
        (minus:DF (reg:DF 21 xmm0 [231])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:260 805 {*fop_df_1_sse}
     (nil))
(insn 149 148 150 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [230])) ge2fitman_preproc.cpp:260 128 {*movdf_internal}
     (nil))
(insn 150 149 151 4 (set (reg:SI 0 ax [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:262 90 {*movsi_internal}
     (nil))
(insn 151 150 152 4 (set (reg:DI 0 ax [orig:161 D.26020 ] [161])
        (sign_extend:DI (reg:SI 0 ax [232]))) ge2fitman_preproc.cpp:262 142 {*extendsidi2_rex64}
     (nil))
(insn 152 151 153 4 (parallel [
            (set (reg:DI 1 dx [orig:162 D.26020 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.26020 ] [161])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:262 512 {*ashldi3_1}
     (nil))
(insn 153 152 154 4 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:262 89 {*movdi_internal}
     (nil))
(insn 154 153 155 4 (parallel [
            (set (reg/f:DI 3 bx [orig:163 D.26021 ] [163])
                (plus:DI (reg:DI 1 dx [orig:162 D.26020 ] [162])
                    (reg/f:DI 0 ax [233])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:262 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.26020 ] [162]))
        (nil)))
(insn 155 154 223 4 (set (reg:SF 24 xmm3 [orig:164 D.26022 ] [164])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64]))) ge2fitman_preproc.cpp:262 157 {*truncdfsf_fast_sse}
     (nil))
(insn 223 155 246 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 24 xmm3 [orig:164 D.26022 ] [164])) ge2fitman_preproc.cpp:262 129 {*movsf_internal}
     (nil))
(note 246 223 238 4 NOTE_INSN_DELETED)
(note 238 246 156 4 NOTE_INSN_DELETED)
(insn 156 238 157 4 (set (reg:DF 0 ax [234])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) ge2fitman_preproc.cpp:262 128 {*movdf_internal}
     (nil))
(insn 157 156 224 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [234])) ge2fitman_preproc.cpp:262 128 {*movdf_internal}
     (nil))
(insn 224 157 158 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) ge2fitman_preproc.cpp:262 128 {*movdf_internal}
     (nil))
(call_insn/u 158 224 160 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fe3570545e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:262 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 160 158 225 4 (set (reg:SF 21 xmm0 [orig:166 D.26022 ] [166])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:165 D.26023 ] [165]))) ge2fitman_preproc.cpp:262 157 {*truncdfsf_fast_sse}
     (nil))
(note 225 160 242 4 NOTE_INSN_DELETED)
(note 242 225 161 4 NOTE_INSN_DELETED)
(insn 161 242 162 4 (set (reg:SF 21 xmm0 [orig:167 D.26022 ] [167])
        (mult:SF (reg:SF 21 xmm0 [orig:166 D.26022 ] [166])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) ge2fitman_preproc.cpp:262 797 {*fop_sf_comm_sse}
     (nil))
(insn 162 161 163 4 (set (mem:SF (reg/f:DI 3 bx [orig:163 D.26021 ] [163]) [0 *_101+0 S4 A32])
        (reg:SF 21 xmm0 [orig:167 D.26022 ] [167])) ge2fitman_preproc.cpp:262 129 {*movsf_internal}
     (nil))
(insn 163 162 164 4 (set (reg:SI 0 ax [235])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:263 90 {*movsi_internal}
     (nil))
(insn 164 163 165 4 (set (reg:DI 0 ax [orig:168 D.26024 ] [168])
        (sign_extend:DI (reg:SI 0 ax [235]))) ge2fitman_preproc.cpp:263 142 {*extendsidi2_rex64}
     (nil))
(insn 165 164 166 4 (parallel [
            (set (reg:DI 0 ax [orig:169 D.26024 ] [169])
                (plus:DI (reg:DI 0 ax [orig:168 D.26024 ] [168])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:263 218 {*adddi_1}
     (nil))
(insn 166 165 167 4 (parallel [
            (set (reg:DI 1 dx [orig:170 D.26024 ] [170])
                (ashift:DI (reg:DI 0 ax [orig:169 D.26024 ] [169])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:263 512 {*ashldi3_1}
     (nil))
(insn 167 166 168 4 (set (reg/f:DI 0 ax [236])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:263 89 {*movdi_internal}
     (nil))
(insn 168 167 169 4 (parallel [
            (set (reg/f:DI 3 bx [orig:171 D.26021 ] [171])
                (plus:DI (reg:DI 1 dx [orig:170 D.26024 ] [170])
                    (reg/f:DI 0 ax [236])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:263 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:170 D.26024 ] [170]))
        (nil)))
(insn 169 168 226 4 (set (reg:SF 25 xmm4 [orig:172 D.26022 ] [172])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64]))) ge2fitman_preproc.cpp:263 157 {*truncdfsf_fast_sse}
     (nil))
(insn 226 169 245 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 25 xmm4 [orig:172 D.26022 ] [172])) ge2fitman_preproc.cpp:263 129 {*movsf_internal}
     (nil))
(note 245 226 237 4 NOTE_INSN_DELETED)
(note 237 245 170 4 NOTE_INSN_DELETED)
(insn 170 237 171 4 (set (reg:DF 0 ax [237])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) ge2fitman_preproc.cpp:263 128 {*movdf_internal}
     (nil))
(insn 171 170 227 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [237])) ge2fitman_preproc.cpp:263 128 {*movdf_internal}
     (nil))
(insn 227 171 172 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) ge2fitman_preproc.cpp:263 128 {*movdf_internal}
     (nil))
(call_insn/u 172 227 174 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fe3570915e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:263 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 174 172 228 4 (set (reg:SF 21 xmm0 [orig:174 D.26022 ] [174])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:173 D.26023 ] [173]))) ge2fitman_preproc.cpp:263 157 {*truncdfsf_fast_sse}
     (nil))
(note 228 174 241 4 NOTE_INSN_DELETED)
(note 241 228 175 4 NOTE_INSN_DELETED)
(insn 175 241 176 4 (set (reg:SF 21 xmm0 [orig:175 D.26022 ] [175])
        (mult:SF (reg:SF 21 xmm0 [orig:174 D.26022 ] [174])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) ge2fitman_preproc.cpp:263 797 {*fop_sf_comm_sse}
     (nil))
(insn 176 175 177 4 (set (mem:SF (reg/f:DI 3 bx [orig:171 D.26021 ] [171]) [0 *_110+0 S4 A32])
        (reg:SF 21 xmm0 [orig:175 D.26022 ] [175])) ge2fitman_preproc.cpp:263 129 {*movsf_internal}
     (nil))
(insn 177 176 178 4 (set (reg:SI 0 ax [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:265 90 {*movsi_internal}
     (nil))
(insn 178 177 179 4 (set (reg:DI 0 ax [orig:176 D.26020 ] [176])
        (sign_extend:DI (reg:SI 0 ax [238]))) ge2fitman_preproc.cpp:265 142 {*extendsidi2_rex64}
     (nil))
(insn 179 178 180 4 (parallel [
            (set (reg:DI 1 dx [orig:177 D.26020 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.26020 ] [176])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:265 512 {*ashldi3_1}
     (nil))
(insn 180 179 181 4 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:265 89 {*movdi_internal}
     (nil))
(insn 181 180 182 4 (parallel [
            (set (reg/f:DI 3 bx [orig:178 D.26021 ] [178])
                (plus:DI (reg:DI 1 dx [orig:177 D.26020 ] [177])
                    (reg/f:DI 0 ax [239])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:265 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.26020 ] [177]))
        (nil)))
(insn 182 181 229 4 (set (reg:SF 26 xmm5 [orig:179 D.26022 ] [179])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:265 157 {*truncdfsf_fast_sse}
     (nil))
(insn 229 182 244 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 26 xmm5 [orig:179 D.26022 ] [179])) ge2fitman_preproc.cpp:265 129 {*movsf_internal}
     (nil))
(note 244 229 236 4 NOTE_INSN_DELETED)
(note 236 244 183 4 NOTE_INSN_DELETED)
(insn 183 236 184 4 (set (reg:DF 0 ax [240])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) ge2fitman_preproc.cpp:265 128 {*movdf_internal}
     (nil))
(insn 184 183 230 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [240])) ge2fitman_preproc.cpp:265 128 {*movdf_internal}
     (nil))
(insn 230 184 185 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) ge2fitman_preproc.cpp:265 128 {*movdf_internal}
     (nil))
(call_insn/u 185 230 187 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fe3570545e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:265 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 187 185 231 4 (set (reg:SF 21 xmm0 [orig:181 D.26022 ] [181])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:180 D.26023 ] [180]))) ge2fitman_preproc.cpp:265 157 {*truncdfsf_fast_sse}
     (nil))
(note 231 187 240 4 NOTE_INSN_DELETED)
(note 240 231 188 4 NOTE_INSN_DELETED)
(insn 188 240 189 4 (set (reg:SF 21 xmm0 [orig:182 D.26022 ] [182])
        (mult:SF (reg:SF 21 xmm0 [orig:181 D.26022 ] [181])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) ge2fitman_preproc.cpp:265 797 {*fop_sf_comm_sse}
     (nil))
(insn 189 188 190 4 (set (mem:SF (reg/f:DI 3 bx [orig:178 D.26021 ] [178]) [0 *_118+0 S4 A32])
        (reg:SF 21 xmm0 [orig:182 D.26022 ] [182])) ge2fitman_preproc.cpp:265 129 {*movsf_internal}
     (nil))
(insn 190 189 191 4 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:266 90 {*movsi_internal}
     (nil))
(insn 191 190 192 4 (set (reg:DI 0 ax [orig:183 D.26024 ] [183])
        (sign_extend:DI (reg:SI 0 ax [241]))) ge2fitman_preproc.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 192 191 193 4 (parallel [
            (set (reg:DI 0 ax [orig:184 D.26024 ] [184])
                (plus:DI (reg:DI 0 ax [orig:183 D.26024 ] [183])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:266 218 {*adddi_1}
     (nil))
(insn 193 192 194 4 (parallel [
            (set (reg:DI 1 dx [orig:185 D.26024 ] [185])
                (ashift:DI (reg:DI 0 ax [orig:184 D.26024 ] [184])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:266 512 {*ashldi3_1}
     (nil))
(insn 194 193 195 4 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:266 89 {*movdi_internal}
     (nil))
(insn 195 194 196 4 (parallel [
            (set (reg/f:DI 3 bx [orig:186 D.26021 ] [186])
                (plus:DI (reg:DI 1 dx [orig:185 D.26024 ] [185])
                    (reg/f:DI 0 ax [242])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:266 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:185 D.26024 ] [185]))
        (nil)))
(insn 196 195 232 4 (set (reg:SF 27 xmm6 [orig:187 D.26022 ] [187])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:266 157 {*truncdfsf_fast_sse}
     (nil))
(insn 232 196 243 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 27 xmm6 [orig:187 D.26022 ] [187])) ge2fitman_preproc.cpp:266 129 {*movsf_internal}
     (nil))
(note 243 232 235 4 NOTE_INSN_DELETED)
(note 235 243 197 4 NOTE_INSN_DELETED)
(insn 197 235 198 4 (set (reg:DF 0 ax [243])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) ge2fitman_preproc.cpp:266 128 {*movdf_internal}
     (nil))
(insn 198 197 233 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [243])) ge2fitman_preproc.cpp:266 128 {*movdf_internal}
     (nil))
(insn 233 198 199 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) ge2fitman_preproc.cpp:266 128 {*movdf_internal}
     (nil))
(call_insn/u 199 233 201 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fe3570915e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:266 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 201 199 234 4 (set (reg:SF 21 xmm0 [orig:189 D.26022 ] [189])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:188 D.26023 ] [188]))) ge2fitman_preproc.cpp:266 157 {*truncdfsf_fast_sse}
     (nil))
(note 234 201 239 4 NOTE_INSN_DELETED)
(note 239 234 202 4 NOTE_INSN_DELETED)
(insn 202 239 203 4 (set (reg:SF 21 xmm0 [orig:190 D.26022 ] [190])
        (mult:SF (reg:SF 21 xmm0 [orig:189 D.26022 ] [189])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) ge2fitman_preproc.cpp:266 797 {*fop_sf_comm_sse}
     (nil))
(insn 203 202 204 4 (set (mem:SF (reg/f:DI 3 bx [orig:186 D.26021 ] [186]) [0 *_127+0 S4 A32])
        (reg:SF 21 xmm0 [orig:190 D.26022 ] [190])) ge2fitman_preproc.cpp:266 129 {*movsf_internal}
     (nil))
(insn 204 203 220 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:247 217 {*addsi_1}
     (nil))
(jump_insn 220 204 221 4 (set (pc)
        (label_ref 205)) ge2fitman_preproc.cpp:247 654 {jump}
     (nil)
 -> 205)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 221 220 208)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 191 192
(code_label 208 221 209 5 63 "" [1 uses])
(note 209 208 210 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 213 5 (set (reg:SI 0 ax [orig:191 D.26019 ] [191])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:269 90 {*movsi_internal}
     (nil))
(insn 213 210 217 5 (set (reg:SI 0 ax [orig:192 <retval> ] [192])
        (reg:SI 0 ax [orig:191 D.26019 ] [191])) ge2fitman_preproc.cpp:269 90 {*movsi_internal}
     (nil))
(insn 217 213 218 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:192 <retval> ] [192])) ge2fitman_preproc.cpp:271 90 {*movsi_internal}
     (nil))
(insn 218 217 222 5 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:271 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 222 218 0 NOTE_INSN_DELETED)

;; Function int zero_fill(float*, float*, Procpar_info*, Preprocess*) (_Z9zero_fillPfS_P12Procpar_infoP10Preprocess, funcdef_no=1025, decl_uid=24440, cgraph_uid=230, symbol_order=231)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 40:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 41:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 49:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 50:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 64: point = 0
   Insn 63: point = 0
   Insn 59: point = 1
  BB 3
   Insn 66: point = 4
   Insn 20: point = 4
   Insn 19: point = 5
   Insn 18: point = 5
  BB 7
   Insn 56: point = 5
  BB 5
   Insn 33: point = 6
   Insn 32: point = 6
   Insn 31: point = 7
   Insn 30: point = 9
  BB 6
   Insn 68: point = 10
   Insn 50: point = 10
   Insn 49: point = 10
   Insn 48: point = 11
   Insn 47: point = 12
   Insn 46: point = 14
   Insn 45: point = 15
   Insn 44: point = 17
   Insn 43: point = 19
   Insn 42: point = 21
   Insn 41: point = 22
   Insn 40: point = 23
   Insn 39: point = 24
   Insn 38: point = 26
   Insn 37: point = 27
   Insn 36: point = 29
   Insn 35: point = 31
  BB 4
   Insn 28: point = 32
   Insn 27: point = 33
   Insn 26: point = 35
   Insn 25: point = 37
  BB 2
   Insn 16: point = 38
   Insn 15: point = 38
   Insn 14: point = 39
   Insn 13: point = 41
   Insn 12: point = 43
   Insn 11: point = 44
   Insn 10: point = 46
   Insn 9: point = 47
   Insn 5: point = 47
   Insn 4: point = 47
   Insn 3: point = 47
   Insn 2: point = 47
 r87: [2..5]
 r88: [38..44]
 r89: [40..41]
 r90: [38..39]
 r91: [34..35]
 r92: [6..7]
 r93: [28..29]
 r94: [25..27]
 r95: [22..24]
 r96: [18..19]
 r97: [16..17]
 r98: [13..15]
 r99: [10..12]
 r100: [0..1]
 r101: [45..46]
 r102: [42..43]
 r103: [36..37]
 r104: [32..33]
 r105: [8..9]
 r106: [30..31]
 r107: [25..26]
 r108: [22..23]
 r109: [20..21]
 r110: [13..14]
 r111: [10..11]
Compressing live ranges: from 47 to 40 - 85%
Ranges after the compression:
 r87: [2..3]
 r88: [32..37]
 r89: [34..35]
 r90: [32..33]
 r91: [28..29]
 r92: [4..5]
 r93: [22..23]
 r94: [20..21]
 r95: [18..19]
 r96: [14..15]
 r97: [12..13]
 r98: [10..11]
 r99: [8..9]
 r100: [0..1]
 r101: [38..39]
 r102: [36..37]
 r103: [30..31]
 r104: [26..27]
 r105: [6..7]
 r106: [24..25]
 r107: [20..21]
 r108: [18..19]
 r109: [16..17]
 r110: [10..11]
 r111: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 56
changing reg in insn 20
changing reg in insn 59
changing reg in insn 11
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 59
changing reg in insn 63
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.


int zero_fill(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={24d,22u} r1={5d,4u,2e} r2={2d,1u} r4={2d,1u} r5={3d,2u} r6={1d,25u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={11d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={4d,2u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 201{128d,69u,4e} in 45{44 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 101 102
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:274 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:274 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:274 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) ge2fitman_preproc.cpp:274 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:276 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:280 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [orig:88 D.26025 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 24 [0x18])) [0 preprocess_7(D)->data_zero_fill+0 S4 A32])) ge2fitman_preproc.cpp:280 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:280 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:89 D.26025 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 324 [0x144])) [0 procpar_info_9(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:280 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 0 ax [orig:90 D.26025 ] [90])
                (ashift:SI (reg:SI 0 ax [orig:89 D.26025 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:280 511 {*ashlsi3_1}
     (nil))
(insn 15 14 16 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:88 D.26025 ] [88])
            (reg:SI 0 ax [orig:90 D.26025 ] [90]))) ge2fitman_preproc.cpp:280 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) ge2fitman_preproc.cpp:280 612 {*jcc_1}
     (nil)
 -> 23)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fe355cfd7e0 *.LC12>)) ge2fitman_preproc.cpp:281 89 {*movdi_internal}
     (nil))
(call_insn 19 18 20 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fe3570c8000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:281 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 19 66 3 (set (reg:SI 0 ax [orig:87 D.26025 ] [87])
        (const_int 0 [0])) ge2fitman_preproc.cpp:282 90 {*movsi_internal}
     (nil))
(jump_insn 66 20 67 3 (set (pc)
        (label_ref 57)) ge2fitman_preproc.cpp:282 654 {jump}
     (nil)
 -> 57)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 67 66 23)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 103 104
(code_label 23 67 24 4 67 "" [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:285 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 0 ax [orig:91 D.26025 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 324 [0x144])) [0 procpar_info_9(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:285 90 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:SI 0 ax [104])
                (ashift:SI (reg:SI 0 ax [orig:91 D.26025 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:285 511 {*ashlsi3_1}
     (nil))
(insn 28 27 51 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (reg:SI 0 ax [104])) ge2fitman_preproc.cpp:285 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 105
(code_label 51 28 29 5 70 "" [1 uses])
(note 29 51 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:285 89 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:SI 0 ax [orig:92 D.26025 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 24 [0x18])) [0 preprocess_7(D)->data_zero_fill+0 S4 A32])) ge2fitman_preproc.cpp:285 90 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:92 D.26025 ] [92])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32]))) ge2fitman_preproc.cpp:285 7 {*cmpsi_1}
     (nil))
(jump_insn 33 32 34 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) ge2fitman_preproc.cpp:285 612 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 106 107 108 109 110 111
(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:287 90 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (set (reg:DI 0 ax [orig:93 D.26026 ] [93])
        (sign_extend:DI (reg:SI 0 ax [106]))) ge2fitman_preproc.cpp:287 142 {*extendsidi2_rex64}
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg:DI 1 dx [orig:94 D.26026 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.26026 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:287 512 {*ashldi3_1}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:287 89 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.26027 ] [95])
                (plus:DI (reg/f:DI 0 ax [107])
                    (reg:DI 1 dx [orig:94 D.26026 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:287 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.26026 ] [94]))
        (nil)))
(insn 40 39 41 6 (set (reg:SF 21 xmm0 [108])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:287 129 {*movsf_internal}
     (nil))
(insn 41 40 42 6 (set (mem:SF (reg/f:DI 0 ax [orig:95 D.26027 ] [95]) [0 *_20+0 S4 A32])
        (reg:SF 21 xmm0 [108])) ge2fitman_preproc.cpp:287 129 {*movsf_internal}
     (nil))
(insn 42 41 43 6 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_preproc.cpp:288 90 {*movsi_internal}
     (nil))
(insn 43 42 44 6 (set (reg:DI 0 ax [orig:96 D.26028 ] [96])
        (sign_extend:DI (reg:SI 0 ax [109]))) ge2fitman_preproc.cpp:288 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:DI 0 ax [orig:97 D.26028 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 D.26028 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:288 218 {*adddi_1}
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg:DI 1 dx [orig:98 D.26028 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.26028 ] [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:288 512 {*ashldi3_1}
     (nil))
(insn 46 45 47 6 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:288 89 {*movdi_internal}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.26027 ] [99])
                (plus:DI (reg/f:DI 0 ax [110])
                    (reg:DI 1 dx [orig:98 D.26028 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:288 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.26028 ] [98]))
        (nil)))
(insn 48 47 49 6 (set (reg:SF 21 xmm0 [111])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:288 129 {*movsf_internal}
     (nil))
(insn 49 48 50 6 (set (mem:SF (reg/f:DI 0 ax [orig:99 D.26027 ] [99]) [0 *_25+0 S4 A32])
        (reg:SF 21 xmm0 [111])) ge2fitman_preproc.cpp:288 129 {*movsf_internal}
     (nil))
(insn 50 49 68 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:285 217 {*addsi_1}
     (nil))
(jump_insn 68 50 69 6 (set (pc)
        (label_ref 51)) ge2fitman_preproc.cpp:285 654 {jump}
     (nil)
 -> 51)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 69 68 54)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 54 69 55 7 69 "" [1 uses])
(note 55 54 56 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 7 (set (reg:SI 0 ax [orig:87 D.26025 ] [87])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:291 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 100
(code_label 57 56 58 8 68 "" [1 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 63 8 (set (reg:SI 0 ax [orig:100 <retval> ] [100])
        (reg:SI 0 ax [orig:87 D.26025 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 63 59 64 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:100 <retval> ] [100])) ge2fitman_preproc.cpp:293 90 {*movsi_internal}
     (nil))
(insn 64 63 70 8 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:293 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 70 64 0 NOTE_INSN_DELETED)

;; Function int normalize(float*, float*, Procpar_info*) (_Z9normalizePfS_P12Procpar_info, funcdef_no=1026, decl_uid=24418, cgraph_uid=231, symbol_order=232)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 9:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 10:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 11:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 12:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 22
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 23:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 30:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 39:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 53:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 54:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 55:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 62:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 63:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 66:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 89
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 90:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 92:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=159 from oldreg=122, assigning class SSE_REGS to r159
   92: r159:SF=r159:SF/r121:SF
      REG_DEAD r121:SF
      REG_DEAD r120:SF
    Inserting insn reload before:
  134: r159:SF=r120:SF
    Inserting insn reload after:
  135: r122:SF=r159:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 93:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 99
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 106:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 108:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=160 from oldreg=133, assigning class SSE_REGS to r160
  108: r160:SF=r160:SF/r132:SF
      REG_DEAD r132:SF
      REG_DEAD r131:SF
    Inserting insn reload before:
  136: r160:SF=r131:SF
    Inserting insn reload after:
  137: r133:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 109:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 110:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 124: point = 0
   Insn 123: point = 0
   Insn 119: point = 1
   Insn 116: point = 3
  BB 8
   Insn 78: point = 4
   Insn 77: point = 4
   Insn 76: point = 5
   Insn 75: point = 7
   Insn 74: point = 9
  BB 9
   Insn 131: point = 10
   Insn 110: point = 10
   Insn 109: point = 10
   Insn 137: point = 11
	Hard reg 21 is preferable by r160 with profit 1
   Insn 108: point = 13
   Insn 136: point = 14
	Hard reg 21 is preferable by r160 with profit 1
	Hard reg 22 is preferable by r160 with profit 1
   Insn 107: point = 16
   Insn 106: point = 17
   Insn 105: point = 19
   Insn 104: point = 21
   Insn 103: point = 22
   Insn 102: point = 24
   Insn 101: point = 26
   Insn 100: point = 28
   Insn 99: point = 29
   Insn 98: point = 31
   Insn 97: point = 32
   Insn 96: point = 34
   Insn 95: point = 36
   Insn 94: point = 38
   Insn 93: point = 39
   Insn 135: point = 40
	Hard reg 21 is preferable by r159 with profit 1
   Insn 92: point = 42
   Insn 134: point = 43
	Hard reg 21 is preferable by r159 with profit 1
	Hard reg 22 is preferable by r159 with profit 1
   Insn 91: point = 45
   Insn 90: point = 46
   Insn 89: point = 48
   Insn 88: point = 50
   Insn 87: point = 51
   Insn 86: point = 53
   Insn 85: point = 55
   Insn 84: point = 56
   Insn 83: point = 58
   Insn 82: point = 59
   Insn 81: point = 61
   Insn 80: point = 63
  BB 7
   Insn 72: point = 64
  BB 3
   Insn 16: point = 64
   Insn 15: point = 64
  BB 6
   Insn 129: point = 64
   Insn 66: point = 64
  BB 5
   Insn 63: point = 64
   Insn 62: point = 65
  BB 4
   Insn 57: point = 66
   Insn 56: point = 66
   Insn 55: point = 67
   Insn 54: point = 68
   Insn 53: point = 69
   Insn 52: point = 70
   Insn 51: point = 70
   Insn 50: point = 71
   Insn 49: point = 73
   Insn 48: point = 75
   Insn 47: point = 77
   Insn 46: point = 79
   Insn 45: point = 81
   Insn 44: point = 82
   Insn 43: point = 84
   Insn 42: point = 86
   Insn 41: point = 88
   Insn 40: point = 89
   Insn 39: point = 91
   Insn 38: point = 93
   Insn 37: point = 95
   Insn 36: point = 96
   Insn 35: point = 98
   Insn 34: point = 100
   Insn 33: point = 102
   Insn 32: point = 103
   Insn 31: point = 105
   Insn 30: point = 107
   Insn 29: point = 109
   Insn 28: point = 111
   Insn 27: point = 112
   Insn 26: point = 114
   Insn 25: point = 116
   Insn 24: point = 117
   Insn 23: point = 119
   Insn 22: point = 121
   Insn 21: point = 123
   Insn 20: point = 124
   Insn 19: point = 126
   Insn 18: point = 128
  BB 2
   Insn 13: point = 129
   Insn 12: point = 129
   Insn 11: point = 130
   Insn 10: point = 131
   Insn 9: point = 132
   Insn 8: point = 133
   Insn 4: point = 133
   Insn 3: point = 133
   Insn 2: point = 133
 r87: [125..126]
 r88: [122..124]
 r89: [120..121]
 r90: [118..119]
 r91: [104..117]
 r92: [113..114]
 r93: [110..112]
 r94: [108..109]
 r95: [106..107]
 r96: [104..105]
 r97: [72..103]
 r98: [99..100]
 r99: [97..98]
 r100: [94..96]
 r101: [92..93]
 r102: [90..91]
 r103: [74..89]
 r104: [85..86]
 r105: [83..84]
 r106: [80..82]
 r107: [78..79]
 r108: [76..77]
 r109: [74..75]
 r110: [72..73]
 r111: [70..71]
 r112: [6..7]
 r113: [4..5]
 r114: [60..61]
 r115: [57..59]
 r116: [39..56]
 r117: [52..53]
 r118: [49..51]
 r119: [47..48]
 r120: [44..46]
 r121: [42..45]
 r122: [39..40]
 r123: [35..36]
 r124: [33..34]
 r125: [30..32]
 r126: [10..29]
 r127: [25..26]
 r128: [23..24]
 r129: [20..22]
 r130: [18..19]
 r131: [15..17]
 r132: [13..16]
 r133: [10..11]
 r134: [2..3]
 r135: [0..1]
 r136: [131..132]
 r137: [129..130]
 r138: [127..128]
 r139: [122..123]
 r140: [115..116]
 r141: [110..111]
 r142: [101..102]
 r143: [94..95]
 r144: [87..88]
 r145: [80..81]
 r146: [68..69]
 r147: [66..67]
 r148: [64..65]
 r149: [8..9]
 r150: [62..63]
 r151: [57..58]
 r152: [54..55]
 r153: [49..50]
 r154: [37..38]
 r155: [30..31]
 r156: [27..28]
 r157: [20..21]
 r159: [41..43]
 r160: [12..14]
Compressing live ranges: from 133 to 116 - 87%
Ranges after the compression:
 r87: [108..109]
 r88: [106..107]
 r89: [104..105]
 r90: [102..103]
 r91: [90..101]
 r92: [98..99]
 r93: [96..97]
 r94: [94..95]
 r95: [92..93]
 r96: [90..91]
 r97: [62..89]
 r98: [86..87]
 r99: [84..85]
 r100: [82..83]
 r101: [80..81]
 r102: [78..79]
 r103: [64..77]
 r104: [74..75]
 r105: [72..73]
 r106: [70..71]
 r107: [68..69]
 r108: [66..67]
 r109: [64..65]
 r110: [62..63]
 r111: [60..61]
 r112: [6..7]
 r113: [4..5]
 r114: [50..51]
 r115: [48..49]
 r116: [34..47]
 r117: [44..45]
 r118: [42..43]
 r119: [40..41]
 r120: [38..39]
 r121: [36..39]
 r122: [34..35]
 r123: [30..31]
 r124: [28..29]
 r125: [26..27]
 r126: [10..25]
 r127: [22..23]
 r128: [20..21]
 r129: [18..19]
 r130: [16..17]
 r131: [14..15]
 r132: [12..15]
 r133: [10..11]
 r134: [2..3]
 r135: [0..1]
 r136: [114..115]
 r137: [112..113]
 r138: [110..111]
 r139: [106..107]
 r140: [100..101]
 r141: [96..97]
 r142: [88..89]
 r143: [82..83]
 r144: [76..77]
 r145: [70..71]
 r146: [58..59]
 r147: [56..57]
 r148: [54..55]
 r149: [8..9]
 r150: [52..53]
 r151: [48..49]
 r152: [46..47]
 r153: [42..43]
 r154: [32..33]
 r155: [26..27]
 r156: [24..25]
 r157: [18..19]
 r159: [36..37]
 r160: [12..13]

********** Assignment #1: **********

	 Assigning to 159 (cl=SSE_REGS, orig=122, freq=3, tfirst=159, tfreq=3)...
	   Assign 22 to reload r159 (freq=3)
	 Assigning to 160 (cl=SSE_REGS, orig=133, freq=3, tfirst=160, tfreq=3)...
	   Assign 22 to reload r160 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 32
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 93
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 99
changing reg in insn 109
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 116
changing reg in insn 119
changing reg in insn 119
changing reg in insn 123
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 62
changing reg in insn 63
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 88
changing reg in insn 94
changing reg in insn 95
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
deleting insn with uid = 51.
deleting insn with uid = 134.
deleting insn with uid = 136.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 52.


int normalize(float*, float*, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2]
;;  ref usage 	r0={36d,35u} r1={17d,16u,6e} r2={4d,2u,2e} r4={2d,1u} r5={2d,1u} r6={1d,48u} r7={1d,11u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={27d,3u} r18={1d} r19={1d} r20={1d,1u,8e} r21={18d,17u} r22={8d,6u} r23={3d,1u} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 348{190d,142u,16e} in 98{97 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 136 137
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) ge2fitman_preproc.cpp:295 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
        (reg:DI 4 si [ scratch ])) ge2fitman_preproc.cpp:295 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:295 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:297 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DF 21 xmm0 [136])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:298 128 {*movdf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])
        (reg:DF 21 xmm0 [136])) ge2fitman_preproc.cpp:298 128 {*movdf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 21 xmm0 [137])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:299 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64])
        (reg:DF 21 xmm0 [137])) ge2fitman_preproc.cpp:299 128 {*movdf_internal}
     (nil))
(insn 13 12 67 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:305 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 67 13 14 3 75 "" [1 uses])
(note 14 67 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 99 [0x63]))) ge2fitman_preproc.cpp:305 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) ge2fitman_preproc.cpp:305 612 {*jcc_1}
     (nil)
 -> 70)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 138 139 140 141 142 143 144 145 146 147
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [138])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:307 90 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 0 ax [orig:87 D.26030 ] [87])
        (sign_extend:DI (reg:SI 0 ax [138]))) ge2fitman_preproc.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 1 dx [orig:88 D.26030 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.26030 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:307 512 {*ashldi3_1}
     (nil))
(insn 21 20 22 4 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:307 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.26031 ] [89])
                (plus:DI (reg/f:DI 0 ax [139])
                    (reg:DI 1 dx [orig:88 D.26030 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:307 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.26030 ] [88]))
        (nil)))
(insn 23 22 24 4 (set (reg:SF 21 xmm0 [orig:90 D.26032 ] [90])
        (mem:SF (reg/f:DI 0 ax [orig:89 D.26031 ] [89]) [0 *_15+0 S4 A32])) ge2fitman_preproc.cpp:307 129 {*movsf_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DF 22 xmm1 [orig:91 D.26033 ] [91])
        (float_extend:DF (reg:SF 21 xmm0 [orig:90 D.26032 ] [90]))) ge2fitman_preproc.cpp:307 152 {*extendsfdf2_sse}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:307 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 0 ax [orig:92 D.26030 ] [92])
        (sign_extend:DI (reg:SI 0 ax [140]))) ge2fitman_preproc.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 1 dx [orig:93 D.26030 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.26030 ] [92])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:307 512 {*ashldi3_1}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:307 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.26031 ] [94])
                (plus:DI (reg/f:DI 0 ax [141])
                    (reg:DI 1 dx [orig:93 D.26030 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:307 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.26030 ] [93]))
        (nil)))
(insn 30 29 31 4 (set (reg:SF 21 xmm0 [orig:95 D.26032 ] [95])
        (mem:SF (reg/f:DI 0 ax [orig:94 D.26031 ] [94]) [0 *_20+0 S4 A32])) ge2fitman_preproc.cpp:307 129 {*movsf_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DF 21 xmm0 [orig:96 D.26033 ] [96])
        (float_extend:DF (reg:SF 21 xmm0 [orig:95 D.26032 ] [95]))) ge2fitman_preproc.cpp:307 152 {*extendsfdf2_sse}
     (nil))
(insn 32 31 33 4 (set (reg:DF 22 xmm1 [orig:97 D.26033 ] [97])
        (mult:DF (reg:DF 22 xmm1 [orig:91 D.26033 ] [91])
            (reg:DF 21 xmm0 [orig:96 D.26033 ] [96]))) ge2fitman_preproc.cpp:307 798 {*fop_df_comm_sse}
     (nil))
(insn 33 32 34 4 (set (reg:SI 0 ax [142])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:308 90 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 0 ax [orig:98 D.26034 ] [98])
        (sign_extend:DI (reg:SI 0 ax [142]))) ge2fitman_preproc.cpp:308 142 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [orig:99 D.26034 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 D.26034 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 218 {*adddi_1}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 1 dx [orig:100 D.26034 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 D.26034 ] [99])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 512 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:308 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.26031 ] [101])
                (plus:DI (reg/f:DI 0 ax [143])
                    (reg:DI 1 dx [orig:100 D.26034 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.26034 ] [100]))
        (nil)))
(insn 39 38 40 4 (set (reg:SF 21 xmm0 [orig:102 D.26032 ] [102])
        (mem:SF (reg/f:DI 0 ax [orig:101 D.26031 ] [101]) [0 *_27+0 S4 A32])) ge2fitman_preproc.cpp:308 129 {*movsf_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DF 23 xmm2 [orig:103 D.26033 ] [103])
        (float_extend:DF (reg:SF 21 xmm0 [orig:102 D.26032 ] [102]))) ge2fitman_preproc.cpp:308 152 {*extendsfdf2_sse}
     (nil))
(insn 41 40 42 4 (set (reg:SI 0 ax [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:308 90 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 0 ax [orig:104 D.26034 ] [104])
        (sign_extend:DI (reg:SI 0 ax [144]))) ge2fitman_preproc.cpp:308 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [orig:105 D.26034 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 D.26034 ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 218 {*adddi_1}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 1 dx [orig:106 D.26034 ] [106])
                (ashift:DI (reg:DI 0 ax [orig:105 D.26034 ] [105])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 512 {*ashldi3_1}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:308 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.26031 ] [107])
                (plus:DI (reg/f:DI 0 ax [145])
                    (reg:DI 1 dx [orig:106 D.26034 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:308 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:106 D.26034 ] [106]))
        (nil)))
(insn 47 46 48 4 (set (reg:SF 21 xmm0 [orig:108 D.26032 ] [108])
        (mem:SF (reg/f:DI 0 ax [orig:107 D.26031 ] [107]) [0 *_33+0 S4 A32])) ge2fitman_preproc.cpp:308 129 {*movsf_internal}
     (nil))
(insn 48 47 49 4 (set (reg:DF 21 xmm0 [orig:109 D.26033 ] [109])
        (float_extend:DF (reg:SF 21 xmm0 [orig:108 D.26032 ] [108]))) ge2fitman_preproc.cpp:308 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 4 (set (reg:DF 21 xmm0 [orig:110 D.26033 ] [110])
        (mult:DF (reg:DF 21 xmm0 [orig:109 D.26033 ] [109])
            (reg:DF 23 xmm2 [orig:103 D.26033 ] [103]))) ge2fitman_preproc.cpp:308 798 {*fop_df_comm_sse}
     (nil))
(insn 50 49 52 4 (set (reg:DF 21 xmm0 [orig:111 D.26033 ] [111])
        (plus:DF (reg:DF 21 xmm0 [orig:110 D.26033 ] [110])
            (reg:DF 22 xmm1 [orig:97 D.26033 ] [97]))) ge2fitman_preproc.cpp:307 798 {*fop_df_comm_sse}
     (nil))
(call_insn 52 50 53 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:308 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 53 52 54 4 (set (reg:DF 0 ax [146])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:308 128 {*movdf_internal}
     (nil))
(insn 54 53 55 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])
        (reg:DF 0 ax [146])) ge2fitman_preproc.cpp:308 128 {*movdf_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DF 21 xmm0 [147])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])) ge2fitman_preproc.cpp:310 128 {*movdf_internal}
     (nil))
(insn 56 55 57 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [147])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) ge2fitman_preproc.cpp:310 56 {*cmpiudf_sse}
     (nil))
(jump_insn 57 56 61 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 64)
            (pc))) ge2fitman_preproc.cpp:310 612 {*jcc_1}
     (nil)
 -> 64)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 148
(note 61 57 62 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 5 (set (reg:DF 21 xmm0 [148])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])) ge2fitman_preproc.cpp:310 128 {*movdf_internal}
     (nil))
(insn 63 62 64 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64])
        (reg:DF 21 xmm0 [148])) ge2fitman_preproc.cpp:310 128 {*movdf_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 64 63 65 6 73 "" [1 uses])
(note 65 64 66 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 129 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:305 217 {*addsi_1}
     (nil))
(jump_insn 129 66 130 6 (set (pc)
        (label_ref 67)) ge2fitman_preproc.cpp:305 654 {jump}
     (nil)
 -> 67)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 130 129 70)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 70 130 71 7 72 "" [1 uses])
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 111 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:314 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              9 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 113 149
(code_label 111 72 73 8 77 "" [1 uses])
(note 73 111 74 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 8 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:314 89 {*movdi_internal}
     (nil))
(insn 75 74 76 8 (set (reg:SI 0 ax [orig:112 D.26035 ] [112])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [149])
                (const_int 324 [0x144])) [0 procpar_info_43(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:314 90 {*movsi_internal}
     (nil))
(insn 76 75 77 8 (parallel [
            (set (reg:SI 0 ax [orig:113 D.26035 ] [113])
                (ashift:SI (reg:SI 0 ax [orig:112 D.26035 ] [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:314 511 {*ashlsi3_1}
     (nil))
(insn 77 76 78 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:113 D.26035 ] [113])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:314 7 {*cmpsi_1}
     (nil))
(jump_insn 78 77 79 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) ge2fitman_preproc.cpp:314 612 {*jcc_1}
     (nil)
 -> 114)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 150 151 152 153 154 155 156 157
(note 79 78 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 9 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:316 90 {*movsi_internal}
     (nil))
(insn 81 80 82 9 (set (reg:DI 0 ax [orig:114 D.26030 ] [114])
        (sign_extend:DI (reg:SI 0 ax [150]))) ge2fitman_preproc.cpp:316 142 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 9 (parallel [
            (set (reg:DI 1 dx [orig:115 D.26030 ] [115])
                (ashift:DI (reg:DI 0 ax [orig:114 D.26030 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:316 512 {*ashldi3_1}
     (nil))
(insn 83 82 84 9 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:316 89 {*movdi_internal}
     (nil))
(insn 84 83 85 9 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.26031 ] [116])
                (plus:DI (reg/f:DI 0 ax [151])
                    (reg:DI 1 dx [orig:115 D.26030 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:316 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.26030 ] [115]))
        (nil)))
(insn 85 84 86 9 (set (reg:SI 1 dx [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:316 90 {*movsi_internal}
     (nil))
(insn 86 85 87 9 (set (reg:DI 1 dx [orig:117 D.26030 ] [117])
        (sign_extend:DI (reg:SI 1 dx [152]))) ge2fitman_preproc.cpp:316 142 {*extendsidi2_rex64}
     (nil))
(insn 87 86 88 9 (parallel [
            (set (reg:DI 2 cx [orig:118 D.26030 ] [118])
                (ashift:DI (reg:DI 1 dx [orig:117 D.26030 ] [117])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:316 512 {*ashldi3_1}
     (nil))
(insn 88 87 89 9 (set (reg/f:DI 1 dx [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:316 89 {*movdi_internal}
     (nil))
(insn 89 88 90 9 (parallel [
            (set (reg/f:DI 1 dx [orig:119 D.26031 ] [119])
                (plus:DI (reg/f:DI 1 dx [153])
                    (reg:DI 2 cx [orig:118 D.26030 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:316 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:118 D.26030 ] [118]))
        (nil)))
(insn 90 89 91 9 (set (reg:SF 22 xmm1 [orig:120 D.26032 ] [120])
        (mem:SF (reg/f:DI 1 dx [orig:119 D.26031 ] [119]) [0 *_52+0 S4 A32])) ge2fitman_preproc.cpp:316 129 {*movsf_internal}
     (nil))
(insn 91 90 92 9 (set (reg:SF 21 xmm0 [orig:121 D.26032 ] [121])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) ge2fitman_preproc.cpp:316 157 {*truncdfsf_fast_sse}
     (nil))
(insn 92 91 135 9 (set (reg:SF 22 xmm1 [orig:122 D.26032 ] [122])
        (div:SF (reg:SF 22 xmm1 [orig:122 D.26032 ] [122])
            (reg:SF 21 xmm0 [orig:121 D.26032 ] [121]))) ge2fitman_preproc.cpp:316 804 {*fop_sf_1_sse}
     (nil))
(insn 135 92 93 9 (set (reg:SF 21 xmm0 [orig:122 D.26032 ] [122])
        (reg:SF 22 xmm1 [orig:122 D.26032 ] [122])) ge2fitman_preproc.cpp:316 129 {*movsf_internal}
     (nil))
(insn 93 135 94 9 (set (mem:SF (reg/f:DI 0 ax [orig:116 D.26031 ] [116]) [0 *_49+0 S4 A32])
        (reg:SF 21 xmm0 [orig:122 D.26032 ] [122])) ge2fitman_preproc.cpp:316 129 {*movsf_internal}
     (nil))
(insn 94 93 95 9 (set (reg:SI 0 ax [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:317 90 {*movsi_internal}
     (nil))
(insn 95 94 96 9 (set (reg:DI 0 ax [orig:123 D.26034 ] [123])
        (sign_extend:DI (reg:SI 0 ax [154]))) ge2fitman_preproc.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 9 (parallel [
            (set (reg:DI 0 ax [orig:124 D.26034 ] [124])
                (plus:DI (reg:DI 0 ax [orig:123 D.26034 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 218 {*adddi_1}
     (nil))
(insn 97 96 98 9 (parallel [
            (set (reg:DI 1 dx [orig:125 D.26034 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 D.26034 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 512 {*ashldi3_1}
     (nil))
(insn 98 97 99 9 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:317 89 {*movdi_internal}
     (nil))
(insn 99 98 100 9 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.26031 ] [126])
                (plus:DI (reg/f:DI 0 ax [155])
                    (reg:DI 1 dx [orig:125 D.26034 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.26034 ] [125]))
        (nil)))
(insn 100 99 101 9 (set (reg:SI 1 dx [156])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:317 90 {*movsi_internal}
     (nil))
(insn 101 100 102 9 (set (reg:DI 1 dx [orig:127 D.26034 ] [127])
        (sign_extend:DI (reg:SI 1 dx [156]))) ge2fitman_preproc.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 9 (parallel [
            (set (reg:DI 1 dx [orig:128 D.26034 ] [128])
                (plus:DI (reg:DI 1 dx [orig:127 D.26034 ] [127])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 218 {*adddi_1}
     (nil))
(insn 103 102 104 9 (parallel [
            (set (reg:DI 2 cx [orig:129 D.26034 ] [129])
                (ashift:DI (reg:DI 1 dx [orig:128 D.26034 ] [128])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 512 {*ashldi3_1}
     (nil))
(insn 104 103 105 9 (set (reg/f:DI 1 dx [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) ge2fitman_preproc.cpp:317 89 {*movdi_internal}
     (nil))
(insn 105 104 106 9 (parallel [
            (set (reg/f:DI 1 dx [orig:130 D.26031 ] [130])
                (plus:DI (reg/f:DI 1 dx [157])
                    (reg:DI 2 cx [orig:129 D.26034 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:317 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:129 D.26034 ] [129]))
        (nil)))
(insn 106 105 107 9 (set (reg:SF 22 xmm1 [orig:131 D.26032 ] [131])
        (mem:SF (reg/f:DI 1 dx [orig:130 D.26031 ] [130]) [0 *_64+0 S4 A32])) ge2fitman_preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 107 106 108 9 (set (reg:SF 21 xmm0 [orig:132 D.26032 ] [132])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) ge2fitman_preproc.cpp:317 157 {*truncdfsf_fast_sse}
     (nil))
(insn 108 107 137 9 (set (reg:SF 22 xmm1 [orig:133 D.26032 ] [133])
        (div:SF (reg:SF 22 xmm1 [orig:133 D.26032 ] [133])
            (reg:SF 21 xmm0 [orig:132 D.26032 ] [132]))) ge2fitman_preproc.cpp:317 804 {*fop_sf_1_sse}
     (nil))
(insn 137 108 109 9 (set (reg:SF 21 xmm0 [orig:133 D.26032 ] [133])
        (reg:SF 22 xmm1 [orig:133 D.26032 ] [133])) ge2fitman_preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 109 137 110 9 (set (mem:SF (reg/f:DI 0 ax [orig:126 D.26031 ] [126]) [0 *_60+0 S4 A32])
        (reg:SF 21 xmm0 [orig:133 D.26032 ] [133])) ge2fitman_preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 110 109 131 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:314 217 {*addsi_1}
     (nil))
(jump_insn 131 110 132 9 (set (pc)
        (label_ref 111)) ge2fitman_preproc.cpp:314 654 {jump}
     (nil)
 -> 111)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 132 131 114)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 134 135
(code_label 114 132 115 10 76 "" [1 uses])
(note 115 114 116 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 119 10 (set (reg:SI 0 ax [orig:134 D.26035 ] [134])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:321 90 {*movsi_internal}
     (nil))
(insn 119 116 123 10 (set (reg:SI 0 ax [orig:135 <retval> ] [135])
        (reg:SI 0 ax [orig:134 D.26035 ] [134])) ge2fitman_preproc.cpp:321 90 {*movsi_internal}
     (nil))
(insn 123 119 124 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:135 <retval> ] [135])) ge2fitman_preproc.cpp:323 90 {*movsi_internal}
     (nil))
(insn 124 123 133 10 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:323 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 133 124 0 NOTE_INSN_DELETED)

;; Function int quality(float*, float*, float*, Procpar_info*, Preprocess*) (_Z7qualityPfS_S_P12Procpar_infoP10Preprocess, funcdef_no=1027, decl_uid=24429, cgraph_uid=232, symbol_order=233)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 11:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 12:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 13:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 14:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 15:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 16:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 17:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 18:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 19:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 20:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 21:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 22:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 23:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 24:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 25:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 26:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 27:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 28:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 29:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 30:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 44:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 51:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 60:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 74:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 75:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 80
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 81:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 94:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 95:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 101:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 117:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 131:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 132:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 138:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 151:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 152:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 157
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 158:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 165:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 173
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 174:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 181
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 182:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 0 in insn 185:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 188:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 189:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 194
	 Choosing alt 0 in insn 194:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 195:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 199:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 200:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 203:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 208:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 209:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 210:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 212:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 213:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 215:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 221:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=303 from oldreg=200, assigning class SSE_REGS to r303
  221: r303:SF=float_trunc([frame:DI-0x50])
    Inserting insn reload after:
  295: r200:SF=r303:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 295:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 222:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=304, assigning class NO_REGS to secondary r304
  223: r304:DF=r288:DF
      REG_DEAD r288:DF
    Inserting the sec. move after:
  296: xmm0:DF=r304:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 296:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 227
	 Choosing alt 0 in insn 227:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=305 from oldreg=200, assigning class SSE_REGS to r305
      Making reload reg 305 for reg 200 optional
  227: r203:SF=r202:SF*r305:SF
      REG_DEAD r202:SF
      REG_DEAD r200:SF
    Inserting insn reload before:
  297: r305:SF=r200:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 297:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 228:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 231:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 235:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=306 from oldreg=208, assigning class SSE_REGS to r306
  235: r306:SF=float_trunc([frame:DI-0x50])
    Inserting insn reload after:
  298: r208:SF=r306:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 298:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 236:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=307, assigning class NO_REGS to secondary r307
  237: r307:DF=r291:DF
      REG_DEAD r291:DF
    Inserting the sec. move after:
  299: xmm0:DF=r307:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 299:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 241
	 Choosing alt 0 in insn 241:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=308 from oldreg=208, assigning class SSE_REGS to r308
      Making reload reg 308 for reg 208 optional
  241: r211:SF=r210:SF*r308:SF
      REG_DEAD r210:SF
      REG_DEAD r208:SF
    Inserting insn reload before:
  300: r308:SF=r208:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 300:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 242:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 243:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 245:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 246:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 248:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 251:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 254:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=309 from oldreg=215, assigning class SSE_REGS to r309
  254: r309:SF=float_trunc([frame:DI-0x48])
    Inserting insn reload after:
  301: r215:SF=r309:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 301:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 255:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=310, assigning class NO_REGS to secondary r310
  256: r310:DF=r298:DF
      REG_DEAD r298:DF
    Inserting the sec. move after:
  302: xmm0:DF=r310:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 302:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 260
	 Choosing alt 0 in insn 260:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=311 from oldreg=215, assigning class SSE_REGS to r311
      Making reload reg 311 for reg 215 optional
  260: r218:SF=r217:SF*r311:SF
      REG_DEAD r217:SF
      REG_DEAD r215:SF
    Inserting insn reload before:
  303: r311:SF=r215:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 303:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 261:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 265:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 266:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 268:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=312 from oldreg=223, assigning class SSE_REGS to r312
  268: r312:SF=float_trunc([frame:DI-0x48])
    Inserting insn reload after:
  304: r223:SF=r312:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 304:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 269:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=313, assigning class NO_REGS to secondary r313
  270: r313:DF=r301:DF
      REG_DEAD r301:DF
    Inserting the sec. move after:
  305: xmm0:DF=r313:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 305:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 274
	 Choosing alt 0 in insn 274:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=314 from oldreg=223, assigning class SSE_REGS to r314
      Making reload reg 314 for reg 223 optional
  274: r226:SF=r225:SF*r314:SF
      REG_DEAD r225:SF
      REG_DEAD r223:SF
    Inserting insn reload before:
  306: r314:SF=r223:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 306:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 275:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 276:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=315 from oldreg=223, assigning class SSE_REGS to inheritance r315
    Original reg change 223->315 (bb4):
  304: r315:SF=r312:SF
    Add original<-inheritance after:
  307: r223:SF=r315:SF

    Inheritance reuse change 223->315 (bb4):
  306: r314:SF=r315:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=316 from oldreg=215, assigning class SSE_REGS to inheritance r316
    Original reg change 215->316 (bb4):
  301: r316:SF=r309:SF
    Add original<-inheritance after:
  308: r215:SF=r316:SF

    Inheritance reuse change 215->316 (bb4):
  303: r311:SF=r316:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=317 from oldreg=208, assigning class SSE_REGS to inheritance r317
    Original reg change 208->317 (bb4):
  298: r317:SF=r306:SF
    Add original<-inheritance after:
  309: r208:SF=r317:SF

    Inheritance reuse change 208->317 (bb4):
  300: r308:SF=r317:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=318 from oldreg=200, assigning class SSE_REGS to inheritance r318
    Original reg change 200->318 (bb4):
  295: r318:SF=r303:SF
    Add original<-inheritance after:
  310: r200:SF=r318:SF

    Inheritance reuse change 200->318 (bb4):
  297: r305:SF=r318:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   307: r223:SF=r315:SF
deleting insn with uid = 307.
	    Removing dead insn:
   308: r215:SF=r316:SF
deleting insn with uid = 308.
	    Removing dead insn:
   309: r208:SF=r317:SF
deleting insn with uid = 309.
	    Removing dead insn:
   310: r200:SF=r318:SF
deleting insn with uid = 310.
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 290: point = 0
   Insn 289: point = 0
   Insn 285: point = 1
   Insn 282: point = 3
  BB 3
   Insn 37: point = 4
   Insn 36: point = 4
   Insn 35: point = 5
   Insn 34: point = 7
   Insn 33: point = 9
  BB 4
   Insn 292: point = 10
   Insn 276: point = 10
   Insn 275: point = 10
   Insn 274: point = 11
   Insn 306: point = 13
	   Creating copy r314<-r315@1
   Insn 273: point = 15
   Insn 272: point = 17
   Insn 271: point = 18
   Insn 305: point = 18
	Hard reg 21 is preferable by r313 with profit 1
   Insn 270: point = 19
	Hard reg 21 is preferable by r313 with profit 1
	Hard reg 0 is preferable by r313 with profit 1
   Insn 269: point = 21
   Insn 304: point = 22
	   Creating copy r312->r315@1
   Insn 268: point = 24
   Insn 267: point = 25
   Insn 266: point = 27
   Insn 265: point = 28
   Insn 264: point = 30
   Insn 263: point = 32
   Insn 262: point = 34
   Insn 261: point = 35
   Insn 260: point = 36
   Insn 303: point = 38
	   Creating copy r311<-r316@1
   Insn 259: point = 40
   Insn 258: point = 42
   Insn 257: point = 43
   Insn 302: point = 43
	Hard reg 21 is preferable by r310 with profit 1
   Insn 256: point = 44
	Hard reg 21 is preferable by r310 with profit 1
	Hard reg 0 is preferable by r310 with profit 1
   Insn 255: point = 46
   Insn 301: point = 47
	   Creating copy r309->r316@1
   Insn 254: point = 49
   Insn 253: point = 50
   Insn 252: point = 52
   Insn 251: point = 53
   Insn 250: point = 55
   Insn 249: point = 57
   Insn 248: point = 58
   Insn 247: point = 59
   Insn 246: point = 61
   Insn 245: point = 62
   Insn 244: point = 63
   Insn 243: point = 65
   Insn 242: point = 66
   Insn 241: point = 67
   Insn 300: point = 69
	   Creating copy r308<-r317@1
   Insn 240: point = 71
   Insn 239: point = 73
   Insn 238: point = 74
   Insn 299: point = 74
	Hard reg 21 is preferable by r307 with profit 1
   Insn 237: point = 75
	Hard reg 21 is preferable by r307 with profit 1
	Hard reg 0 is preferable by r307 with profit 1
   Insn 236: point = 77
   Insn 298: point = 78
	   Creating copy r306->r317@1
   Insn 235: point = 80
   Insn 234: point = 81
   Insn 233: point = 83
   Insn 232: point = 84
   Insn 231: point = 86
   Insn 230: point = 88
   Insn 229: point = 90
   Insn 228: point = 91
   Insn 227: point = 92
   Insn 297: point = 94
	   Creating copy r305<-r318@1
   Insn 226: point = 96
   Insn 225: point = 98
   Insn 224: point = 99
   Insn 296: point = 99
	Hard reg 21 is preferable by r304 with profit 1
   Insn 223: point = 100
	Hard reg 21 is preferable by r304 with profit 1
	Hard reg 0 is preferable by r304 with profit 1
   Insn 222: point = 102
   Insn 295: point = 103
	   Creating copy r303->r318@1
   Insn 221: point = 105
   Insn 220: point = 106
   Insn 219: point = 108
   Insn 218: point = 109
   Insn 217: point = 111
   Insn 216: point = 113
   Insn 215: point = 114
   Insn 214: point = 115
   Insn 213: point = 117
   Insn 212: point = 118
   Insn 211: point = 119
   Insn 210: point = 121
   Insn 209: point = 122
   Insn 208: point = 123
   Insn 207: point = 124
   Insn 206: point = 124
   Insn 205: point = 125
   Insn 204: point = 126
   Insn 203: point = 128
   Insn 202: point = 130
   Insn 201: point = 132
   Insn 200: point = 133
   Insn 199: point = 135
   Insn 198: point = 137
   Insn 197: point = 139
   Insn 196: point = 140
   Insn 195: point = 142
   Insn 194: point = 144
   Insn 193: point = 146
   Insn 192: point = 147
   Insn 191: point = 149
   Insn 190: point = 151
   Insn 189: point = 152
   Insn 188: point = 153
   Insn 187: point = 154
   Insn 186: point = 154
   Insn 185: point = 155
   Insn 184: point = 157
   Insn 183: point = 159
   Insn 182: point = 161
   Insn 181: point = 163
   Insn 180: point = 165
   Insn 179: point = 166
   Insn 178: point = 168
   Insn 177: point = 170
   Insn 176: point = 172
   Insn 175: point = 173
   Insn 174: point = 175
   Insn 173: point = 177
   Insn 172: point = 179
   Insn 171: point = 180
   Insn 170: point = 182
   Insn 169: point = 184
   Insn 168: point = 186
   Insn 167: point = 187
   Insn 166: point = 189
   Insn 165: point = 191
   Insn 164: point = 193
   Insn 163: point = 195
   Insn 162: point = 196
   Insn 161: point = 198
   Insn 160: point = 200
   Insn 159: point = 201
   Insn 158: point = 203
   Insn 157: point = 205
   Insn 156: point = 207
   Insn 155: point = 208
   Insn 154: point = 210
   Insn 153: point = 212
   Insn 152: point = 213
   Insn 151: point = 214
   Insn 150: point = 215
   Insn 149: point = 215
   Insn 148: point = 216
   Insn 147: point = 217
   Insn 146: point = 219
   Insn 145: point = 221
   Insn 144: point = 223
   Insn 143: point = 224
   Insn 142: point = 226
   Insn 141: point = 228
   Insn 140: point = 230
   Insn 139: point = 231
   Insn 138: point = 233
   Insn 137: point = 235
   Insn 136: point = 237
   Insn 135: point = 238
   Insn 134: point = 240
   Insn 133: point = 242
   Insn 132: point = 243
   Insn 131: point = 244
   Insn 130: point = 245
   Insn 129: point = 245
   Insn 128: point = 246
   Insn 127: point = 248
   Insn 126: point = 250
   Insn 125: point = 252
   Insn 124: point = 254
   Insn 123: point = 256
   Insn 122: point = 257
   Insn 121: point = 259
   Insn 120: point = 261
   Insn 119: point = 263
   Insn 118: point = 264
   Insn 117: point = 266
   Insn 116: point = 268
   Insn 115: point = 270
   Insn 114: point = 271
   Insn 113: point = 273
   Insn 112: point = 275
   Insn 111: point = 277
   Insn 110: point = 278
   Insn 109: point = 280
   Insn 108: point = 282
   Insn 107: point = 284
   Insn 106: point = 286
   Insn 105: point = 287
   Insn 104: point = 289
   Insn 103: point = 291
   Insn 102: point = 292
   Insn 101: point = 294
   Insn 100: point = 296
   Insn 99: point = 298
   Insn 98: point = 299
   Insn 97: point = 301
   Insn 96: point = 303
   Insn 95: point = 304
   Insn 94: point = 305
   Insn 93: point = 306
   Insn 92: point = 306
   Insn 91: point = 307
   Insn 90: point = 308
   Insn 89: point = 310
   Insn 88: point = 312
   Insn 87: point = 314
   Insn 86: point = 315
   Insn 85: point = 317
   Insn 84: point = 319
   Insn 83: point = 321
   Insn 82: point = 322
   Insn 81: point = 324
   Insn 80: point = 326
   Insn 79: point = 328
   Insn 78: point = 329
   Insn 77: point = 331
   Insn 76: point = 333
   Insn 75: point = 334
   Insn 74: point = 335
   Insn 73: point = 336
   Insn 72: point = 336
   Insn 71: point = 337
   Insn 70: point = 339
   Insn 69: point = 341
   Insn 68: point = 343
   Insn 67: point = 345
   Insn 66: point = 347
   Insn 65: point = 348
   Insn 64: point = 350
   Insn 63: point = 352
   Insn 62: point = 354
   Insn 61: point = 355
   Insn 60: point = 357
   Insn 59: point = 359
   Insn 58: point = 361
   Insn 57: point = 362
   Insn 56: point = 364
   Insn 55: point = 366
   Insn 54: point = 368
   Insn 53: point = 369
   Insn 52: point = 371
   Insn 51: point = 373
   Insn 50: point = 375
   Insn 49: point = 377
   Insn 48: point = 378
   Insn 47: point = 380
   Insn 46: point = 382
   Insn 45: point = 383
   Insn 44: point = 385
   Insn 43: point = 387
   Insn 42: point = 389
   Insn 41: point = 390
   Insn 40: point = 392
   Insn 39: point = 394
  BB 2
   Insn 31: point = 395
   Insn 30: point = 395
   Insn 29: point = 396
   Insn 28: point = 397
   Insn 27: point = 398
   Insn 26: point = 399
   Insn 25: point = 400
   Insn 24: point = 401
   Insn 23: point = 402
   Insn 22: point = 403
   Insn 21: point = 404
   Insn 20: point = 405
   Insn 19: point = 406
   Insn 18: point = 407
   Insn 17: point = 408
   Insn 16: point = 409
   Insn 15: point = 410
   Insn 14: point = 411
   Insn 13: point = 412
   Insn 12: point = 413
   Insn 11: point = 414
   Insn 10: point = 415
   Insn 6: point = 415
   Insn 5: point = 415
   Insn 4: point = 415
   Insn 3: point = 415
   Insn 2: point = 415
 r87: [6..7]
 r88: [4..5]
 r89: [391..392]
 r90: [388..390]
 r91: [386..387]
 r92: [384..385]
 r93: [370..383]
 r94: [379..380]
 r95: [376..378]
 r96: [374..375]
 r97: [372..373]
 r98: [370..371]
 r99: [338..369]
 r100: [365..366]
 r101: [363..364]
 r102: [360..362]
 r103: [358..359]
 r104: [356..357]
 r105: [340..355]
 r106: [351..352]
 r107: [349..350]
 r108: [346..348]
 r109: [344..345]
 r110: [342..343]
 r111: [340..341]
 r112: [338..339]
 r113: [336..337]
 r114: [330..331]
 r115: [327..329]
 r116: [325..326]
 r117: [323..324]
 r118: [307..322]
 r119: [318..319]
 r120: [316..317]
 r121: [313..315]
 r122: [311..312]
 r123: [309..310]
 r124: [306..308]
 r125: [300..301]
 r126: [297..299]
 r127: [295..296]
 r128: [293..294]
 r129: [279..292]
 r130: [288..289]
 r131: [285..287]
 r132: [283..284]
 r133: [281..282]
 r134: [279..280]
 r135: [247..278]
 r136: [274..275]
 r137: [272..273]
 r138: [269..271]
 r139: [267..268]
 r140: [265..266]
 r141: [249..264]
 r142: [260..261]
 r143: [258..259]
 r144: [255..257]
 r145: [253..254]
 r146: [251..252]
 r147: [249..250]
 r148: [247..248]
 r149: [245..246]
 r150: [239..240]
 r151: [236..238]
 r152: [234..235]
 r153: [232..233]
 r154: [216..231]
 r155: [227..228]
 r156: [225..226]
 r157: [222..224]
 r158: [220..221]
 r159: [218..219]
 r160: [215..217]
 r161: [209..210]
 r162: [206..208]
 r163: [204..205]
 r164: [202..203]
 r165: [188..201]
 r166: [197..198]
 r167: [194..196]
 r168: [192..193]
 r169: [190..191]
 r170: [188..189]
 r171: [156..187]
 r172: [183..184]
 r173: [181..182]
 r174: [178..180]
 r175: [176..177]
 r176: [174..175]
 r177: [158..173]
 r178: [169..170]
 r179: [167..168]
 r180: [164..166]
 r181: [162..163]
 r182: [160..161]
 r183: [158..159]
 r184: [156..157]
 r185: [154..155]
 r186: [148..149]
 r187: [145..147]
 r188: [143..144]
 r189: [141..142]
 r190: [125..140]
 r191: [136..137]
 r192: [134..135]
 r193: [131..133]
 r194: [129..130]
 r195: [127..128]
 r196: [124..126]
 r197: [110..111]
 r198: [107..109]
 r199: [91..106]
 r201: [97..98]
 r202: [93..96]
 r203: [91..92]
 r204: [87..88]
 r205: [85..86]
 r206: [82..84]
 r207: [66..81]
 r209: [72..73]
 r210: [68..71]
 r211: [66..67]
 r212: [54..55]
 r213: [51..53]
 r214: [35..50]
 r216: [41..42]
 r217: [37..40]
 r218: [35..36]
 r219: [31..32]
 r220: [29..30]
 r221: [26..28]
 r222: [10..25]
 r224: [16..17]
 r225: [12..15]
 r226: [10..11]
 r227: [2..3]
 r228: [0..1]
 r229: [413..414]
 r230: [411..412]
 r231: [409..410]
 r232: [407..408]
 r233: [405..406]
 r234: [403..404]
 r235: [401..402]
 r236: [399..400]
 r237: [397..398]
 r238: [395..396]
 r239: [8..9]
 r240: [393..394]
 r241: [388..389]
 r242: [381..382]
 r243: [376..377]
 r244: [367..368]
 r245: [360..361]
 r246: [353..354]
 r247: [346..347]
 r248: [334..335]
 r249: [332..333]
 r250: [327..328]
 r251: [320..321]
 r252: [313..314]
 r253: [304..305]
 r254: [302..303]
 r255: [297..298]
 r256: [290..291]
 r257: [285..286]
 r258: [276..277]
 r259: [269..270]
 r260: [262..263]
 r261: [255..256]
 r262: [243..244]
 r263: [241..242]
 r264: [236..237]
 r265: [229..230]
 r266: [222..223]
 r267: [213..214]
 r268: [211..212]
 r269: [206..207]
 r270: [199..200]
 r271: [194..195]
 r272: [185..186]
 r273: [178..179]
 r274: [171..172]
 r275: [164..165]
 r276: [152..153]
 r277: [150..151]
 r278: [145..146]
 r279: [138..139]
 r280: [131..132]
 r281: [122..123]
 r282: [118..119]
 r283: [120..121]
 r284: [114..115]
 r285: [116..117]
 r286: [112..113]
 r287: [107..108]
 r288: [101..102]
 r289: [89..90]
 r290: [82..83]
 r291: [76..77]
 r292: [62..63]
 r293: [64..65]
 r294: [58..59]
 r295: [60..61]
 r296: [56..57]
 r297: [51..52]
 r298: [45..46]
 r299: [33..34]
 r300: [26..27]
 r301: [20..21]
 r303: [104..105]
 r304: [99..100]
 r305: [93..94]
 r306: [79..80]
 r307: [74..75]
 r308: [68..69]
 r309: [48..49]
 r310: [43..44]
 r311: [37..38]
 r312: [23..24]
 r313: [18..19]
 r314: [12..13]
 r315: [14..22]
 r316: [39..47]
 r317: [70..78]
 r318: [95..103]
Compressing live ranges: from 415 to 370 - 89%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [346..347]
 r90: [344..345]
 r91: [342..343]
 r92: [340..341]
 r93: [328..339]
 r94: [336..337]
 r95: [334..335]
 r96: [332..333]
 r97: [330..331]
 r98: [328..329]
 r99: [300..327]
 r100: [324..325]
 r101: [322..323]
 r102: [320..321]
 r103: [318..319]
 r104: [316..317]
 r105: [302..315]
 r106: [312..313]
 r107: [310..311]
 r108: [308..309]
 r109: [306..307]
 r110: [304..305]
 r111: [302..303]
 r112: [300..301]
 r113: [298..299]
 r114: [292..293]
 r115: [290..291]
 r116: [288..289]
 r117: [286..287]
 r118: [272..285]
 r119: [282..283]
 r120: [280..281]
 r121: [278..279]
 r122: [276..277]
 r123: [274..275]
 r124: [272..273]
 r125: [266..267]
 r126: [264..265]
 r127: [262..263]
 r128: [260..261]
 r129: [248..259]
 r130: [256..257]
 r131: [254..255]
 r132: [252..253]
 r133: [250..251]
 r134: [248..249]
 r135: [220..247]
 r136: [244..245]
 r137: [242..243]
 r138: [240..241]
 r139: [238..239]
 r140: [236..237]
 r141: [222..235]
 r142: [232..233]
 r143: [230..231]
 r144: [228..229]
 r145: [226..227]
 r146: [224..225]
 r147: [222..223]
 r148: [220..221]
 r149: [218..219]
 r150: [212..213]
 r151: [210..211]
 r152: [208..209]
 r153: [206..207]
 r154: [192..205]
 r155: [202..203]
 r156: [200..201]
 r157: [198..199]
 r158: [196..197]
 r159: [194..195]
 r160: [192..193]
 r161: [186..187]
 r162: [184..185]
 r163: [182..183]
 r164: [180..181]
 r165: [168..179]
 r166: [176..177]
 r167: [174..175]
 r168: [172..173]
 r169: [170..171]
 r170: [168..169]
 r171: [140..167]
 r172: [164..165]
 r173: [162..163]
 r174: [160..161]
 r175: [158..159]
 r176: [156..157]
 r177: [142..155]
 r178: [152..153]
 r179: [150..151]
 r180: [148..149]
 r181: [146..147]
 r182: [144..145]
 r183: [142..143]
 r184: [140..141]
 r185: [138..139]
 r186: [132..133]
 r187: [130..131]
 r188: [128..129]
 r189: [126..127]
 r190: [112..125]
 r191: [122..123]
 r192: [120..121]
 r193: [118..119]
 r194: [116..117]
 r195: [114..115]
 r196: [112..113]
 r197: [98..99]
 r198: [96..97]
 r199: [82..95]
 r201: [88..89]
 r202: [84..87]
 r203: [82..83]
 r204: [78..79]
 r205: [76..77]
 r206: [74..75]
 r207: [60..73]
 r209: [66..67]
 r210: [62..65]
 r211: [60..61]
 r212: [48..49]
 r213: [46..47]
 r214: [32..45]
 r216: [38..39]
 r217: [34..37]
 r218: [32..33]
 r219: [28..29]
 r220: [26..27]
 r221: [24..25]
 r222: [10..23]
 r224: [16..17]
 r225: [12..15]
 r226: [10..11]
 r227: [2..3]
 r228: [0..1]
 r229: [368..369]
 r230: [366..367]
 r231: [364..365]
 r232: [362..363]
 r233: [360..361]
 r234: [358..359]
 r235: [356..357]
 r236: [354..355]
 r237: [352..353]
 r238: [350..351]
 r239: [8..9]
 r240: [348..349]
 r241: [344..345]
 r242: [338..339]
 r243: [334..335]
 r244: [326..327]
 r245: [320..321]
 r246: [314..315]
 r247: [308..309]
 r248: [296..297]
 r249: [294..295]
 r250: [290..291]
 r251: [284..285]
 r252: [278..279]
 r253: [270..271]
 r254: [268..269]
 r255: [264..265]
 r256: [258..259]
 r257: [254..255]
 r258: [246..247]
 r259: [240..241]
 r260: [234..235]
 r261: [228..229]
 r262: [216..217]
 r263: [214..215]
 r264: [210..211]
 r265: [204..205]
 r266: [198..199]
 r267: [190..191]
 r268: [188..189]
 r269: [184..185]
 r270: [178..179]
 r271: [174..175]
 r272: [166..167]
 r273: [160..161]
 r274: [154..155]
 r275: [148..149]
 r276: [136..137]
 r277: [134..135]
 r278: [130..131]
 r279: [124..125]
 r280: [118..119]
 r281: [110..111]
 r282: [106..107]
 r283: [108..109]
 r284: [102..103]
 r285: [104..105]
 r286: [100..101]
 r287: [96..97]
 r288: [92..93]
 r289: [80..81]
 r290: [74..75]
 r291: [70..71]
 r292: [56..57]
 r293: [58..59]
 r294: [52..53]
 r295: [54..55]
 r296: [50..51]
 r297: [46..47]
 r298: [42..43]
 r299: [30..31]
 r300: [24..25]
 r301: [20..21]
 r303: [94..95]
 r304: [90..91]
 r305: [84..85]
 r306: [72..73]
 r307: [68..69]
 r308: [62..63]
 r309: [44..45]
 r310: [40..41]
 r311: [34..35]
 r312: [22..23]
 r313: [18..19]
 r314: [12..13]
 r315: [14..21]
 r316: [36..43]
 r317: [64..71]
 r318: [86..93]

********** Assignment #1: **********

	 Assigning to 303 (cl=SSE_REGS, orig=200, freq=2, tfirst=303, tfreq=2)...
	   Assign 24 to reload r303 (freq=2)
	Hard reg 24 is preferable by r318 with profit 1
	Hard reg 24 is preferable by r305 with profit 1
	 Assigning to 305 (cl=SSE_REGS, orig=200, freq=2, tfirst=303, tfreq=2)...
	   Assign 24 to optional reload r305 (freq=2)
	Hard reg 24 is preferable by r318 with profit 2
	 Assigning to 318 (cl=SSE_REGS, orig=200, freq=2, tfirst=303, tfreq=2)...
	 Assigning to 306 (cl=SSE_REGS, orig=208, freq=2, tfirst=306, tfreq=2)...
	   Assign 25 to reload r306 (freq=2)
	Hard reg 25 is preferable by r317 with profit 1
	Hard reg 25 is preferable by r308 with profit 1
	 Assigning to 308 (cl=SSE_REGS, orig=208, freq=2, tfirst=306, tfreq=2)...
	   Assign 25 to optional reload r308 (freq=2)
	Hard reg 25 is preferable by r317 with profit 2
	 Assigning to 317 (cl=SSE_REGS, orig=208, freq=2, tfirst=306, tfreq=2)...
	 Assigning to 309 (cl=SSE_REGS, orig=215, freq=2, tfirst=309, tfreq=2)...
	   Assign 26 to reload r309 (freq=2)
	Hard reg 26 is preferable by r316 with profit 1
	Hard reg 26 is preferable by r311 with profit 1
	 Assigning to 311 (cl=SSE_REGS, orig=215, freq=2, tfirst=309, tfreq=2)...
	   Assign 26 to optional reload r311 (freq=2)
	Hard reg 26 is preferable by r316 with profit 2
	 Assigning to 316 (cl=SSE_REGS, orig=215, freq=2, tfirst=309, tfreq=2)...
	 Assigning to 312 (cl=SSE_REGS, orig=223, freq=2, tfirst=312, tfreq=2)...
	   Assign 27 to reload r312 (freq=2)
	Hard reg 27 is preferable by r315 with profit 1
	Hard reg 27 is preferable by r314 with profit 1
	 Assigning to 314 (cl=SSE_REGS, orig=223, freq=2, tfirst=312, tfreq=2)...
	   Assign 27 to optional reload r314 (freq=2)
	Hard reg 27 is preferable by r315 with profit 2
	 Assigning to 315 (cl=SSE_REGS, orig=223, freq=2, tfirst=312, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  306: r314:SF=r223:SF
      REG_DEAD r223:SF
   Insn after restoring regs:
  304: r223:SF=r312:SF
      REG_DEAD r312:SF
   Insn after restoring regs:
  303: r311:SF=r215:SF
      REG_DEAD r215:SF
   Insn after restoring regs:
  301: r215:SF=r309:SF
      REG_DEAD r309:SF
   Insn after restoring regs:
  300: r308:SF=r208:SF
      REG_DEAD r208:SF
   Insn after restoring regs:
  298: r208:SF=r306:SF
      REG_DEAD r306:SF
   Insn after restoring regs:
  297: r305:SF=r200:SF
      REG_DEAD r200:SF
   Insn after restoring regs:
  295: r200:SF=r303:SF
      REG_DEAD r303:SF
Remove optional reload reg 305
  Restoring original insn:
  227: r203:SF=r202:SF*r200:SF
      REG_DEAD r200:SF
      REG_DEAD r202:SF
  Deleting move 297
  297: r305:SF=r200:SF
      REG_DEAD r200:SF
deleting insn with uid = 297.
Remove optional reload reg 308
  Restoring original insn:
  241: r211:SF=r210:SF*r208:SF
      REG_DEAD r208:SF
      REG_DEAD r210:SF
  Deleting move 300
  300: r308:SF=r208:SF
      REG_DEAD r208:SF
deleting insn with uid = 300.
Remove optional reload reg 311
  Restoring original insn:
  260: r218:SF=r217:SF*r215:SF
      REG_DEAD r215:SF
      REG_DEAD r217:SF
  Deleting move 303
  303: r311:SF=r215:SF
      REG_DEAD r215:SF
deleting insn with uid = 303.
Remove optional reload reg 314
  Restoring original insn:
  274: r226:SF=r225:SF*r223:SF
      REG_DEAD r223:SF
      REG_DEAD r225:SF
  Deleting move 306
  306: r314:SF=r223:SF
      REG_DEAD r223:SF
deleting insn with uid = 306.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 274:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=319 from oldreg=223, assigning class SSE_REGS to r319
      Making reload reg 319 for reg 223 optional
  274: r226:SF=r225:SF*r319:SF
      REG_DEAD r223:SF
      REG_DEAD r225:SF
    Inserting insn reload before:
  311: r319:SF=r223:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 311:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 260:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=320 from oldreg=215, assigning class SSE_REGS to r320
      Making reload reg 320 for reg 215 optional
  260: r218:SF=r217:SF*r320:SF
      REG_DEAD r215:SF
      REG_DEAD r217:SF
    Inserting insn reload before:
  312: r320:SF=r215:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 312:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 241:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=321 from oldreg=208, assigning class SSE_REGS to r321
      Making reload reg 321 for reg 208 optional
  241: r211:SF=r210:SF*r321:SF
      REG_DEAD r208:SF
      REG_DEAD r210:SF
    Inserting insn reload before:
  313: r321:SF=r208:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 313:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 227:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=322 from oldreg=200, assigning class SSE_REGS to r322
      Making reload reg 322 for reg 200 optional
  227: r203:SF=r202:SF*r322:SF
      REG_DEAD r200:SF
      REG_DEAD r202:SF
    Inserting insn reload before:
  314: r322:SF=r200:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 314:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=323 from oldreg=223, assigning class SSE_REGS to inheritance r323
    Original reg change 223->323 (bb4):
  304: r323:SF=r312:SF
      REG_DEAD r312:SF
    Add original<-inheritance after:
  315: r223:SF=r323:SF

    Inheritance reuse change 223->323 (bb4):
  311: r319:SF=r323:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=324 from oldreg=215, assigning class SSE_REGS to inheritance r324
    Original reg change 215->324 (bb4):
  301: r324:SF=r309:SF
      REG_DEAD r309:SF
    Add original<-inheritance after:
  316: r215:SF=r324:SF

    Inheritance reuse change 215->324 (bb4):
  312: r320:SF=r324:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=325 from oldreg=208, assigning class SSE_REGS to inheritance r325
    Original reg change 208->325 (bb4):
  298: r325:SF=r306:SF
      REG_DEAD r306:SF
    Add original<-inheritance after:
  317: r208:SF=r325:SF

    Inheritance reuse change 208->325 (bb4):
  313: r321:SF=r325:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=326 from oldreg=200, assigning class SSE_REGS to inheritance r326
    Original reg change 200->326 (bb4):
  295: r326:SF=r303:SF
      REG_DEAD r303:SF
    Add original<-inheritance after:
  318: r200:SF=r326:SF

    Inheritance reuse change 200->326 (bb4):
  314: r322:SF=r326:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   315: r223:SF=r323:SF
deleting insn with uid = 315.
	    Removing dead insn:
   316: r215:SF=r324:SF
deleting insn with uid = 316.
	    Removing dead insn:
   317: r208:SF=r325:SF
deleting insn with uid = 317.
	    Removing dead insn:
   318: r200:SF=r326:SF
deleting insn with uid = 318.
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
   Insn 290: point = 0
   Insn 289: point = 0
   Insn 285: point = 1
   Insn 282: point = 3
  BB 3
   Insn 37: point = 4
   Insn 36: point = 4
   Insn 35: point = 5
   Insn 34: point = 7
   Insn 33: point = 9
  BB 4
   Insn 292: point = 10
   Insn 276: point = 10
   Insn 275: point = 10
   Insn 274: point = 11
   Insn 311: point = 13
	   Creating copy r319<-r323@1
   Insn 273: point = 15
   Insn 272: point = 17
   Insn 271: point = 18
   Insn 305: point = 18
	Hard reg 21 is preferable by r313 with profit 1
   Insn 270: point = 19
	Hard reg 21 is preferable by r313 with profit 1
	Hard reg 0 is preferable by r313 with profit 1
   Insn 269: point = 21
   Insn 304: point = 22
	   Creating copy r312->r323@1
   Insn 268: point = 24
   Insn 267: point = 25
   Insn 266: point = 27
   Insn 265: point = 28
   Insn 264: point = 30
   Insn 263: point = 32
   Insn 262: point = 34
   Insn 261: point = 35
   Insn 260: point = 36
   Insn 312: point = 38
	   Creating copy r320<-r324@1
   Insn 259: point = 40
   Insn 258: point = 42
   Insn 257: point = 43
   Insn 302: point = 43
	Hard reg 21 is preferable by r310 with profit 1
   Insn 256: point = 44
	Hard reg 21 is preferable by r310 with profit 1
	Hard reg 0 is preferable by r310 with profit 1
   Insn 255: point = 46
   Insn 301: point = 47
	   Creating copy r309->r324@1
   Insn 254: point = 49
   Insn 253: point = 50
   Insn 252: point = 52
   Insn 251: point = 53
   Insn 250: point = 55
   Insn 249: point = 57
   Insn 248: point = 58
   Insn 247: point = 59
   Insn 246: point = 61
   Insn 245: point = 62
   Insn 244: point = 63
   Insn 243: point = 65
   Insn 242: point = 66
   Insn 241: point = 67
   Insn 313: point = 69
	   Creating copy r321<-r325@1
   Insn 240: point = 71
   Insn 239: point = 73
   Insn 238: point = 74
   Insn 299: point = 74
	Hard reg 21 is preferable by r307 with profit 1
   Insn 237: point = 75
	Hard reg 21 is preferable by r307 with profit 1
	Hard reg 0 is preferable by r307 with profit 1
   Insn 236: point = 77
   Insn 298: point = 78
	   Creating copy r306->r325@1
   Insn 235: point = 80
   Insn 234: point = 81
   Insn 233: point = 83
   Insn 232: point = 84
   Insn 231: point = 86
   Insn 230: point = 88
   Insn 229: point = 90
   Insn 228: point = 91
   Insn 227: point = 92
   Insn 314: point = 94
	   Creating copy r322<-r326@1
   Insn 226: point = 96
   Insn 225: point = 98
   Insn 224: point = 99
   Insn 296: point = 99
	Hard reg 21 is preferable by r304 with profit 1
   Insn 223: point = 100
	Hard reg 21 is preferable by r304 with profit 1
	Hard reg 0 is preferable by r304 with profit 1
   Insn 222: point = 102
   Insn 295: point = 103
	   Creating copy r303->r326@1
   Insn 221: point = 105
   Insn 220: point = 106
   Insn 219: point = 108
   Insn 218: point = 109
   Insn 217: point = 111
   Insn 216: point = 113
   Insn 215: point = 114
   Insn 214: point = 115
   Insn 213: point = 117
   Insn 212: point = 118
   Insn 211: point = 119
   Insn 210: point = 121
   Insn 209: point = 122
   Insn 208: point = 123
   Insn 207: point = 124
   Insn 206: point = 124
   Insn 205: point = 125
   Insn 204: point = 126
   Insn 203: point = 128
   Insn 202: point = 130
   Insn 201: point = 132
   Insn 200: point = 133
   Insn 199: point = 135
   Insn 198: point = 137
   Insn 197: point = 139
   Insn 196: point = 140
   Insn 195: point = 142
   Insn 194: point = 144
   Insn 193: point = 146
   Insn 192: point = 147
   Insn 191: point = 149
   Insn 190: point = 151
   Insn 189: point = 152
   Insn 188: point = 153
   Insn 187: point = 154
   Insn 186: point = 154
   Insn 185: point = 155
   Insn 184: point = 157
   Insn 183: point = 159
   Insn 182: point = 161
   Insn 181: point = 163
   Insn 180: point = 165
   Insn 179: point = 166
   Insn 178: point = 168
   Insn 177: point = 170
   Insn 176: point = 172
   Insn 175: point = 173
   Insn 174: point = 175
   Insn 173: point = 177
   Insn 172: point = 179
   Insn 171: point = 180
   Insn 170: point = 182
   Insn 169: point = 184
   Insn 168: point = 186
   Insn 167: point = 187
   Insn 166: point = 189
   Insn 165: point = 191
   Insn 164: point = 193
   Insn 163: point = 195
   Insn 162: point = 196
   Insn 161: point = 198
   Insn 160: point = 200
   Insn 159: point = 201
   Insn 158: point = 203
   Insn 157: point = 205
   Insn 156: point = 207
   Insn 155: point = 208
   Insn 154: point = 210
   Insn 153: point = 212
   Insn 152: point = 213
   Insn 151: point = 214
   Insn 150: point = 215
   Insn 149: point = 215
   Insn 148: point = 216
   Insn 147: point = 217
   Insn 146: point = 219
   Insn 145: point = 221
   Insn 144: point = 223
   Insn 143: point = 224
   Insn 142: point = 226
   Insn 141: point = 228
   Insn 140: point = 230
   Insn 139: point = 231
   Insn 138: point = 233
   Insn 137: point = 235
   Insn 136: point = 237
   Insn 135: point = 238
   Insn 134: point = 240
   Insn 133: point = 242
   Insn 132: point = 243
   Insn 131: point = 244
   Insn 130: point = 245
   Insn 129: point = 245
   Insn 128: point = 246
   Insn 127: point = 248
   Insn 126: point = 250
   Insn 125: point = 252
   Insn 124: point = 254
   Insn 123: point = 256
   Insn 122: point = 257
   Insn 121: point = 259
   Insn 120: point = 261
   Insn 119: point = 263
   Insn 118: point = 264
   Insn 117: point = 266
   Insn 116: point = 268
   Insn 115: point = 270
   Insn 114: point = 271
   Insn 113: point = 273
   Insn 112: point = 275
   Insn 111: point = 277
   Insn 110: point = 278
   Insn 109: point = 280
   Insn 108: point = 282
   Insn 107: point = 284
   Insn 106: point = 286
   Insn 105: point = 287
   Insn 104: point = 289
   Insn 103: point = 291
   Insn 102: point = 292
   Insn 101: point = 294
   Insn 100: point = 296
   Insn 99: point = 298
   Insn 98: point = 299
   Insn 97: point = 301
   Insn 96: point = 303
   Insn 95: point = 304
   Insn 94: point = 305
   Insn 93: point = 306
   Insn 92: point = 306
   Insn 91: point = 307
   Insn 90: point = 308
   Insn 89: point = 310
   Insn 88: point = 312
   Insn 87: point = 314
   Insn 86: point = 315
   Insn 85: point = 317
   Insn 84: point = 319
   Insn 83: point = 321
   Insn 82: point = 322
   Insn 81: point = 324
   Insn 80: point = 326
   Insn 79: point = 328
   Insn 78: point = 329
   Insn 77: point = 331
   Insn 76: point = 333
   Insn 75: point = 334
   Insn 74: point = 335
   Insn 73: point = 336
   Insn 72: point = 336
   Insn 71: point = 337
   Insn 70: point = 339
   Insn 69: point = 341
   Insn 68: point = 343
   Insn 67: point = 345
   Insn 66: point = 347
   Insn 65: point = 348
   Insn 64: point = 350
   Insn 63: point = 352
   Insn 62: point = 354
   Insn 61: point = 355
   Insn 60: point = 357
   Insn 59: point = 359
   Insn 58: point = 361
   Insn 57: point = 362
   Insn 56: point = 364
   Insn 55: point = 366
   Insn 54: point = 368
   Insn 53: point = 369
   Insn 52: point = 371
   Insn 51: point = 373
   Insn 50: point = 375
   Insn 49: point = 377
   Insn 48: point = 378
   Insn 47: point = 380
   Insn 46: point = 382
   Insn 45: point = 383
   Insn 44: point = 385
   Insn 43: point = 387
   Insn 42: point = 389
   Insn 41: point = 390
   Insn 40: point = 392
   Insn 39: point = 394
  BB 2
   Insn 31: point = 395
   Insn 30: point = 395
   Insn 29: point = 396
   Insn 28: point = 397
   Insn 27: point = 398
   Insn 26: point = 399
   Insn 25: point = 400
   Insn 24: point = 401
   Insn 23: point = 402
   Insn 22: point = 403
   Insn 21: point = 404
   Insn 20: point = 405
   Insn 19: point = 406
   Insn 18: point = 407
   Insn 17: point = 408
   Insn 16: point = 409
   Insn 15: point = 410
   Insn 14: point = 411
   Insn 13: point = 412
   Insn 12: point = 413
   Insn 11: point = 414
   Insn 10: point = 415
   Insn 6: point = 415
   Insn 5: point = 415
   Insn 4: point = 415
   Insn 3: point = 415
   Insn 2: point = 415
 r87: [6..7]
 r88: [4..5]
 r89: [391..392]
 r90: [388..390]
 r91: [386..387]
 r92: [384..385]
 r93: [370..383]
 r94: [379..380]
 r95: [376..378]
 r96: [374..375]
 r97: [372..373]
 r98: [370..371]
 r99: [338..369]
 r100: [365..366]
 r101: [363..364]
 r102: [360..362]
 r103: [358..359]
 r104: [356..357]
 r105: [340..355]
 r106: [351..352]
 r107: [349..350]
 r108: [346..348]
 r109: [344..345]
 r110: [342..343]
 r111: [340..341]
 r112: [338..339]
 r113: [336..337]
 r114: [330..331]
 r115: [327..329]
 r116: [325..326]
 r117: [323..324]
 r118: [307..322]
 r119: [318..319]
 r120: [316..317]
 r121: [313..315]
 r122: [311..312]
 r123: [309..310]
 r124: [306..308]
 r125: [300..301]
 r126: [297..299]
 r127: [295..296]
 r128: [293..294]
 r129: [279..292]
 r130: [288..289]
 r131: [285..287]
 r132: [283..284]
 r133: [281..282]
 r134: [279..280]
 r135: [247..278]
 r136: [274..275]
 r137: [272..273]
 r138: [269..271]
 r139: [267..268]
 r140: [265..266]
 r141: [249..264]
 r142: [260..261]
 r143: [258..259]
 r144: [255..257]
 r145: [253..254]
 r146: [251..252]
 r147: [249..250]
 r148: [247..248]
 r149: [245..246]
 r150: [239..240]
 r151: [236..238]
 r152: [234..235]
 r153: [232..233]
 r154: [216..231]
 r155: [227..228]
 r156: [225..226]
 r157: [222..224]
 r158: [220..221]
 r159: [218..219]
 r160: [215..217]
 r161: [209..210]
 r162: [206..208]
 r163: [204..205]
 r164: [202..203]
 r165: [188..201]
 r166: [197..198]
 r167: [194..196]
 r168: [192..193]
 r169: [190..191]
 r170: [188..189]
 r171: [156..187]
 r172: [183..184]
 r173: [181..182]
 r174: [178..180]
 r175: [176..177]
 r176: [174..175]
 r177: [158..173]
 r178: [169..170]
 r179: [167..168]
 r180: [164..166]
 r181: [162..163]
 r182: [160..161]
 r183: [158..159]
 r184: [156..157]
 r185: [154..155]
 r186: [148..149]
 r187: [145..147]
 r188: [143..144]
 r189: [141..142]
 r190: [125..140]
 r191: [136..137]
 r192: [134..135]
 r193: [131..133]
 r194: [129..130]
 r195: [127..128]
 r196: [124..126]
 r197: [110..111]
 r198: [107..109]
 r199: [91..106]
 r201: [97..98]
 r202: [93..96]
 r203: [91..92]
 r204: [87..88]
 r205: [85..86]
 r206: [82..84]
 r207: [66..81]
 r209: [72..73]
 r210: [68..71]
 r211: [66..67]
 r212: [54..55]
 r213: [51..53]
 r214: [35..50]
 r216: [41..42]
 r217: [37..40]
 r218: [35..36]
 r219: [31..32]
 r220: [29..30]
 r221: [26..28]
 r222: [10..25]
 r224: [16..17]
 r225: [12..15]
 r226: [10..11]
 r227: [2..3]
 r228: [0..1]
 r229: [413..414]
 r230: [411..412]
 r231: [409..410]
 r232: [407..408]
 r233: [405..406]
 r234: [403..404]
 r235: [401..402]
 r236: [399..400]
 r237: [397..398]
 r238: [395..396]
 r239: [8..9]
 r240: [393..394]
 r241: [388..389]
 r242: [381..382]
 r243: [376..377]
 r244: [367..368]
 r245: [360..361]
 r246: [353..354]
 r247: [346..347]
 r248: [334..335]
 r249: [332..333]
 r250: [327..328]
 r251: [320..321]
 r252: [313..314]
 r253: [304..305]
 r254: [302..303]
 r255: [297..298]
 r256: [290..291]
 r257: [285..286]
 r258: [276..277]
 r259: [269..270]
 r260: [262..263]
 r261: [255..256]
 r262: [243..244]
 r263: [241..242]
 r264: [236..237]
 r265: [229..230]
 r266: [222..223]
 r267: [213..214]
 r268: [211..212]
 r269: [206..207]
 r270: [199..200]
 r271: [194..195]
 r272: [185..186]
 r273: [178..179]
 r274: [171..172]
 r275: [164..165]
 r276: [152..153]
 r277: [150..151]
 r278: [145..146]
 r279: [138..139]
 r280: [131..132]
 r281: [122..123]
 r282: [118..119]
 r283: [120..121]
 r284: [114..115]
 r285: [116..117]
 r286: [112..113]
 r287: [107..108]
 r288: [101..102]
 r289: [89..90]
 r290: [82..83]
 r291: [76..77]
 r292: [62..63]
 r293: [64..65]
 r294: [58..59]
 r295: [60..61]
 r296: [56..57]
 r297: [51..52]
 r298: [45..46]
 r299: [33..34]
 r300: [26..27]
 r301: [20..21]
 r303: [104..105]
 r304: [99..100]
 r306: [79..80]
 r307: [74..75]
 r309: [48..49]
 r310: [43..44]
 r312: [23..24]
 r313: [18..19]
 r319: [12..13]
 r320: [37..38]
 r321: [68..69]
 r322: [93..94]
 r323: [14..22]
 r324: [39..47]
 r325: [70..78]
 r326: [95..103]
Compressing live ranges: from 415 to 370 - 89%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [346..347]
 r90: [344..345]
 r91: [342..343]
 r92: [340..341]
 r93: [328..339]
 r94: [336..337]
 r95: [334..335]
 r96: [332..333]
 r97: [330..331]
 r98: [328..329]
 r99: [300..327]
 r100: [324..325]
 r101: [322..323]
 r102: [320..321]
 r103: [318..319]
 r104: [316..317]
 r105: [302..315]
 r106: [312..313]
 r107: [310..311]
 r108: [308..309]
 r109: [306..307]
 r110: [304..305]
 r111: [302..303]
 r112: [300..301]
 r113: [298..299]
 r114: [292..293]
 r115: [290..291]
 r116: [288..289]
 r117: [286..287]
 r118: [272..285]
 r119: [282..283]
 r120: [280..281]
 r121: [278..279]
 r122: [276..277]
 r123: [274..275]
 r124: [272..273]
 r125: [266..267]
 r126: [264..265]
 r127: [262..263]
 r128: [260..261]
 r129: [248..259]
 r130: [256..257]
 r131: [254..255]
 r132: [252..253]
 r133: [250..251]
 r134: [248..249]
 r135: [220..247]
 r136: [244..245]
 r137: [242..243]
 r138: [240..241]
 r139: [238..239]
 r140: [236..237]
 r141: [222..235]
 r142: [232..233]
 r143: [230..231]
 r144: [228..229]
 r145: [226..227]
 r146: [224..225]
 r147: [222..223]
 r148: [220..221]
 r149: [218..219]
 r150: [212..213]
 r151: [210..211]
 r152: [208..209]
 r153: [206..207]
 r154: [192..205]
 r155: [202..203]
 r156: [200..201]
 r157: [198..199]
 r158: [196..197]
 r159: [194..195]
 r160: [192..193]
 r161: [186..187]
 r162: [184..185]
 r163: [182..183]
 r164: [180..181]
 r165: [168..179]
 r166: [176..177]
 r167: [174..175]
 r168: [172..173]
 r169: [170..171]
 r170: [168..169]
 r171: [140..167]
 r172: [164..165]
 r173: [162..163]
 r174: [160..161]
 r175: [158..159]
 r176: [156..157]
 r177: [142..155]
 r178: [152..153]
 r179: [150..151]
 r180: [148..149]
 r181: [146..147]
 r182: [144..145]
 r183: [142..143]
 r184: [140..141]
 r185: [138..139]
 r186: [132..133]
 r187: [130..131]
 r188: [128..129]
 r189: [126..127]
 r190: [112..125]
 r191: [122..123]
 r192: [120..121]
 r193: [118..119]
 r194: [116..117]
 r195: [114..115]
 r196: [112..113]
 r197: [98..99]
 r198: [96..97]
 r199: [82..95]
 r201: [88..89]
 r202: [84..87]
 r203: [82..83]
 r204: [78..79]
 r205: [76..77]
 r206: [74..75]
 r207: [60..73]
 r209: [66..67]
 r210: [62..65]
 r211: [60..61]
 r212: [48..49]
 r213: [46..47]
 r214: [32..45]
 r216: [38..39]
 r217: [34..37]
 r218: [32..33]
 r219: [28..29]
 r220: [26..27]
 r221: [24..25]
 r222: [10..23]
 r224: [16..17]
 r225: [12..15]
 r226: [10..11]
 r227: [2..3]
 r228: [0..1]
 r229: [368..369]
 r230: [366..367]
 r231: [364..365]
 r232: [362..363]
 r233: [360..361]
 r234: [358..359]
 r235: [356..357]
 r236: [354..355]
 r237: [352..353]
 r238: [350..351]
 r239: [8..9]
 r240: [348..349]
 r241: [344..345]
 r242: [338..339]
 r243: [334..335]
 r244: [326..327]
 r245: [320..321]
 r246: [314..315]
 r247: [308..309]
 r248: [296..297]
 r249: [294..295]
 r250: [290..291]
 r251: [284..285]
 r252: [278..279]
 r253: [270..271]
 r254: [268..269]
 r255: [264..265]
 r256: [258..259]
 r257: [254..255]
 r258: [246..247]
 r259: [240..241]
 r260: [234..235]
 r261: [228..229]
 r262: [216..217]
 r263: [214..215]
 r264: [210..211]
 r265: [204..205]
 r266: [198..199]
 r267: [190..191]
 r268: [188..189]
 r269: [184..185]
 r270: [178..179]
 r271: [174..175]
 r272: [166..167]
 r273: [160..161]
 r274: [154..155]
 r275: [148..149]
 r276: [136..137]
 r277: [134..135]
 r278: [130..131]
 r279: [124..125]
 r280: [118..119]
 r281: [110..111]
 r282: [106..107]
 r283: [108..109]
 r284: [102..103]
 r285: [104..105]
 r286: [100..101]
 r287: [96..97]
 r288: [92..93]
 r289: [80..81]
 r290: [74..75]
 r291: [70..71]
 r292: [56..57]
 r293: [58..59]
 r294: [52..53]
 r295: [54..55]
 r296: [50..51]
 r297: [46..47]
 r298: [42..43]
 r299: [30..31]
 r300: [24..25]
 r301: [20..21]
 r303: [94..95]
 r304: [90..91]
 r306: [72..73]
 r307: [68..69]
 r309: [44..45]
 r310: [40..41]
 r312: [22..23]
 r313: [18..19]
 r319: [12..13]
 r320: [34..35]
 r321: [62..63]
 r322: [84..85]
 r323: [14..21]
 r324: [36..43]
 r325: [64..71]
 r326: [86..93]

********** Assignment #2: **********

	 Assigning to 319 (cl=SSE_REGS, orig=223, freq=2, tfirst=319, tfreq=2)...
	   Assign 28 to optional reload r319 (freq=2)
	Hard reg 28 is preferable by r323 with profit 1
	 Assigning to 323 (cl=SSE_REGS, orig=223, freq=2, tfirst=319, tfreq=2)...
	 Assigning to 320 (cl=SSE_REGS, orig=215, freq=2, tfirst=320, tfreq=2)...
	   Assign 24 to optional reload r320 (freq=2)
	Hard reg 24 is preferable by r324 with profit 1
	 Assigning to 324 (cl=SSE_REGS, orig=215, freq=2, tfirst=320, tfreq=2)...
	 Assigning to 321 (cl=SSE_REGS, orig=208, freq=2, tfirst=321, tfreq=2)...
	   Assign 25 to optional reload r321 (freq=2)
	Hard reg 25 is preferable by r325 with profit 1
	 Assigning to 325 (cl=SSE_REGS, orig=208, freq=2, tfirst=321, tfreq=2)...
	 Assigning to 322 (cl=SSE_REGS, orig=200, freq=2, tfirst=322, tfreq=2)...
	   Assign 26 to optional reload r322 (freq=2)
	Hard reg 26 is preferable by r326 with profit 1
	 Assigning to 326 (cl=SSE_REGS, orig=200, freq=2, tfirst=322, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  311: r319:SF=r223:SF
      REG_DEAD r223:SF
   Insn after restoring regs:
  304: r223:SF=r312:SF
      REG_DEAD r312:SF
   Insn after restoring regs:
  312: r320:SF=r215:SF
      REG_DEAD r215:SF
   Insn after restoring regs:
  301: r215:SF=r309:SF
      REG_DEAD r309:SF
   Insn after restoring regs:
  313: r321:SF=r208:SF
      REG_DEAD r208:SF
   Insn after restoring regs:
  298: r208:SF=r306:SF
      REG_DEAD r306:SF
   Insn after restoring regs:
  314: r322:SF=r200:SF
      REG_DEAD r200:SF
   Insn after restoring regs:
  295: r200:SF=r303:SF
      REG_DEAD r303:SF
Keep optional reload reg 305
Keep optional reload reg 308
Keep optional reload reg 311
Keep optional reload reg 314
Remove optional reload reg 319
  Restoring original insn:
  274: r226:SF=r225:SF*r223:SF
      REG_DEAD r223:SF
      REG_DEAD r225:SF
  Deleting move 311
  311: r319:SF=r223:SF
      REG_DEAD r223:SF
deleting insn with uid = 311.
Remove optional reload reg 320
  Restoring original insn:
  260: r218:SF=r217:SF*r215:SF
      REG_DEAD r215:SF
      REG_DEAD r217:SF
  Deleting move 312
  312: r320:SF=r215:SF
      REG_DEAD r215:SF
deleting insn with uid = 312.
Remove optional reload reg 321
  Restoring original insn:
  241: r211:SF=r210:SF*r208:SF
      REG_DEAD r208:SF
      REG_DEAD r210:SF
  Deleting move 313
  313: r321:SF=r208:SF
      REG_DEAD r208:SF
deleting insn with uid = 313.
Remove optional reload reg 322
  Restoring original insn:
  227: r203:SF=r202:SF*r200:SF
      REG_DEAD r200:SF
      REG_DEAD r202:SF
  Deleting move 314
  314: r322:SF=r200:SF
      REG_DEAD r200:SF
deleting insn with uid = 314.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 274:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 260:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 241:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 227:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
   Insn 290: point = 0
   Insn 289: point = 0
   Insn 285: point = 1
   Insn 282: point = 3
  BB 3
   Insn 37: point = 4
   Insn 36: point = 4
   Insn 35: point = 5
   Insn 34: point = 7
   Insn 33: point = 9
  BB 4
   Insn 292: point = 10
   Insn 276: point = 10
   Insn 275: point = 10
   Insn 274: point = 11
   Insn 273: point = 13
   Insn 272: point = 15
   Insn 271: point = 16
   Insn 305: point = 16
   Insn 270: point = 17
   Insn 269: point = 19
   Insn 304: point = 20
   Insn 268: point = 22
   Insn 267: point = 23
   Insn 266: point = 25
   Insn 265: point = 26
   Insn 264: point = 28
   Insn 263: point = 30
   Insn 262: point = 32
   Insn 261: point = 33
   Insn 260: point = 34
   Insn 259: point = 36
   Insn 258: point = 38
   Insn 257: point = 39
   Insn 302: point = 39
   Insn 256: point = 40
   Insn 255: point = 42
   Insn 301: point = 43
   Insn 254: point = 45
   Insn 253: point = 46
   Insn 252: point = 48
   Insn 251: point = 49
   Insn 250: point = 51
   Insn 249: point = 53
   Insn 248: point = 54
   Insn 247: point = 55
   Insn 246: point = 57
   Insn 245: point = 58
   Insn 244: point = 59
   Insn 243: point = 61
   Insn 242: point = 62
   Insn 241: point = 63
   Insn 240: point = 65
   Insn 239: point = 67
   Insn 238: point = 68
   Insn 299: point = 68
   Insn 237: point = 69
   Insn 236: point = 71
   Insn 298: point = 72
   Insn 235: point = 74
   Insn 234: point = 75
   Insn 233: point = 77
   Insn 232: point = 78
   Insn 231: point = 80
   Insn 230: point = 82
   Insn 229: point = 84
   Insn 228: point = 85
   Insn 227: point = 86
   Insn 226: point = 88
   Insn 225: point = 90
   Insn 224: point = 91
   Insn 296: point = 91
   Insn 223: point = 92
   Insn 222: point = 94
   Insn 295: point = 95
   Insn 221: point = 97
   Insn 220: point = 98
   Insn 219: point = 100
   Insn 218: point = 101
   Insn 217: point = 103
   Insn 216: point = 105
   Insn 215: point = 106
   Insn 214: point = 107
   Insn 213: point = 109
   Insn 212: point = 110
   Insn 211: point = 111
   Insn 210: point = 113
   Insn 209: point = 114
   Insn 208: point = 115
   Insn 207: point = 116
   Insn 206: point = 116
   Insn 205: point = 117
   Insn 204: point = 118
   Insn 203: point = 120
   Insn 202: point = 122
   Insn 201: point = 124
   Insn 200: point = 125
   Insn 199: point = 127
   Insn 198: point = 129
   Insn 197: point = 131
   Insn 196: point = 132
   Insn 195: point = 134
   Insn 194: point = 136
   Insn 193: point = 138
   Insn 192: point = 139
   Insn 191: point = 141
   Insn 190: point = 143
   Insn 189: point = 144
   Insn 188: point = 145
   Insn 187: point = 146
   Insn 186: point = 146
   Insn 185: point = 147
   Insn 184: point = 149
   Insn 183: point = 151
   Insn 182: point = 153
   Insn 181: point = 155
   Insn 180: point = 157
   Insn 179: point = 158
   Insn 178: point = 160
   Insn 177: point = 162
   Insn 176: point = 164
   Insn 175: point = 165
   Insn 174: point = 167
   Insn 173: point = 169
   Insn 172: point = 171
   Insn 171: point = 172
   Insn 170: point = 174
   Insn 169: point = 176
   Insn 168: point = 178
   Insn 167: point = 179
   Insn 166: point = 181
   Insn 165: point = 183
   Insn 164: point = 185
   Insn 163: point = 187
   Insn 162: point = 188
   Insn 161: point = 190
   Insn 160: point = 192
   Insn 159: point = 193
   Insn 158: point = 195
   Insn 157: point = 197
   Insn 156: point = 199
   Insn 155: point = 200
   Insn 154: point = 202
   Insn 153: point = 204
   Insn 152: point = 205
   Insn 151: point = 206
   Insn 150: point = 207
   Insn 149: point = 207
   Insn 148: point = 208
   Insn 147: point = 209
   Insn 146: point = 211
   Insn 145: point = 213
   Insn 144: point = 215
   Insn 143: point = 216
   Insn 142: point = 218
   Insn 141: point = 220
   Insn 140: point = 222
   Insn 139: point = 223
   Insn 138: point = 225
   Insn 137: point = 227
   Insn 136: point = 229
   Insn 135: point = 230
   Insn 134: point = 232
   Insn 133: point = 234
   Insn 132: point = 235
   Insn 131: point = 236
   Insn 130: point = 237
   Insn 129: point = 237
   Insn 128: point = 238
   Insn 127: point = 240
   Insn 126: point = 242
   Insn 125: point = 244
   Insn 124: point = 246
   Insn 123: point = 248
   Insn 122: point = 249
   Insn 121: point = 251
   Insn 120: point = 253
   Insn 119: point = 255
   Insn 118: point = 256
   Insn 117: point = 258
   Insn 116: point = 260
   Insn 115: point = 262
   Insn 114: point = 263
   Insn 113: point = 265
   Insn 112: point = 267
   Insn 111: point = 269
   Insn 110: point = 270
   Insn 109: point = 272
   Insn 108: point = 274
   Insn 107: point = 276
   Insn 106: point = 278
   Insn 105: point = 279
   Insn 104: point = 281
   Insn 103: point = 283
   Insn 102: point = 284
   Insn 101: point = 286
   Insn 100: point = 288
   Insn 99: point = 290
   Insn 98: point = 291
   Insn 97: point = 293
   Insn 96: point = 295
   Insn 95: point = 296
   Insn 94: point = 297
   Insn 93: point = 298
   Insn 92: point = 298
   Insn 91: point = 299
   Insn 90: point = 300
   Insn 89: point = 302
   Insn 88: point = 304
   Insn 87: point = 306
   Insn 86: point = 307
   Insn 85: point = 309
   Insn 84: point = 311
   Insn 83: point = 313
   Insn 82: point = 314
   Insn 81: point = 316
   Insn 80: point = 318
   Insn 79: point = 320
   Insn 78: point = 321
   Insn 77: point = 323
   Insn 76: point = 325
   Insn 75: point = 326
   Insn 74: point = 327
   Insn 73: point = 328
   Insn 72: point = 328
   Insn 71: point = 329
   Insn 70: point = 331
   Insn 69: point = 333
   Insn 68: point = 335
   Insn 67: point = 337
   Insn 66: point = 339
   Insn 65: point = 340
   Insn 64: point = 342
   Insn 63: point = 344
   Insn 62: point = 346
   Insn 61: point = 347
   Insn 60: point = 349
   Insn 59: point = 351
   Insn 58: point = 353
   Insn 57: point = 354
   Insn 56: point = 356
   Insn 55: point = 358
   Insn 54: point = 360
   Insn 53: point = 361
   Insn 52: point = 363
   Insn 51: point = 365
   Insn 50: point = 367
   Insn 49: point = 369
   Insn 48: point = 370
   Insn 47: point = 372
   Insn 46: point = 374
   Insn 45: point = 375
   Insn 44: point = 377
   Insn 43: point = 379
   Insn 42: point = 381
   Insn 41: point = 382
   Insn 40: point = 384
   Insn 39: point = 386
  BB 2
   Insn 31: point = 387
   Insn 30: point = 387
   Insn 29: point = 388
   Insn 28: point = 389
   Insn 27: point = 390
   Insn 26: point = 391
   Insn 25: point = 392
   Insn 24: point = 393
   Insn 23: point = 394
   Insn 22: point = 395
   Insn 21: point = 396
   Insn 20: point = 397
   Insn 19: point = 398
   Insn 18: point = 399
   Insn 17: point = 400
   Insn 16: point = 401
   Insn 15: point = 402
   Insn 14: point = 403
   Insn 13: point = 404
   Insn 12: point = 405
   Insn 11: point = 406
   Insn 10: point = 407
   Insn 6: point = 407
   Insn 5: point = 407
   Insn 4: point = 407
   Insn 3: point = 407
   Insn 2: point = 407
 r200: [87..95]
 r208: [64..72]
 r215: [35..43]
 r223: [12..20]
 r304: [91..92]
 r307: [68..69]
 r310: [39..40]
 r313: [16..17]
Compressing live ranges: from 407 to 8 - 1%
Ranges after the compression:
 r200: [6..7]
 r208: [4..5]
 r215: [2..3]
 r223: [0..1]
 r304: [6..7]
 r307: [4..5]
 r310: [2..3]
 r313: [0..1]
  Slot 0 regnos (width = 4):	 200	 223	 215	 208
  Slot 1 regnos (width = 8):	 304	 313	 310	 307
Changing spilled pseudos to memory in insn #295
Changing spilled pseudos to memory in insn #223
Changing spilled pseudos to memory in insn #296
Changing spilled pseudos to memory in insn #227
Changing spilled pseudos to memory in insn #298
Changing spilled pseudos to memory in insn #237
Changing spilled pseudos to memory in insn #299
Changing spilled pseudos to memory in insn #241
Changing spilled pseudos to memory in insn #301
Changing spilled pseudos to memory in insn #256
Changing spilled pseudos to memory in insn #302
Changing spilled pseudos to memory in insn #260
Changing spilled pseudos to memory in insn #304
Changing spilled pseudos to memory in insn #270
Changing spilled pseudos to memory in insn #305
Changing spilled pseudos to memory in insn #274
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #274
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #305
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 305:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 270:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #304
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 304:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #260
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #302
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 302:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 256:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #301
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 301:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #241
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #299
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 299:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 237:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #298
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 298:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #227
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #296
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 296:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 223:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #295
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 295:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 53
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 91
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 110
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 148
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 157
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 167
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 205
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 206
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 220
changing reg in insn 220
changing reg in insn 220
changing reg in insn 228
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 234
changing reg in insn 234
changing reg in insn 234
changing reg in insn 242
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 253
changing reg in insn 253
changing reg in insn 253
changing reg in insn 261
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 267
changing reg in insn 267
changing reg in insn 267
changing reg in insn 275
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 282
changing reg in insn 285
changing reg in insn 285
changing reg in insn 289
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 140
changing reg in insn 141
changing reg in insn 144
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 160
changing reg in insn 161
changing reg in insn 163
changing reg in insn 168
changing reg in insn 169
changing reg in insn 172
changing reg in insn 176
changing reg in insn 177
changing reg in insn 180
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 197
changing reg in insn 198
changing reg in insn 201
changing reg in insn 208
changing reg in insn 209
changing reg in insn 211
changing reg in insn 212
changing reg in insn 210
changing reg in insn 211
changing reg in insn 214
changing reg in insn 215
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 219
changing reg in insn 220
changing reg in insn 222
changing reg in insn 223
changing reg in insn 229
changing reg in insn 230
changing reg in insn 233
changing reg in insn 234
changing reg in insn 236
changing reg in insn 237
changing reg in insn 244
changing reg in insn 245
changing reg in insn 243
changing reg in insn 244
changing reg in insn 247
changing reg in insn 248
changing reg in insn 246
changing reg in insn 247
changing reg in insn 249
changing reg in insn 250
changing reg in insn 252
changing reg in insn 253
changing reg in insn 255
changing reg in insn 256
changing reg in insn 262
changing reg in insn 263
changing reg in insn 266
changing reg in insn 267
changing reg in insn 269
changing reg in insn 270
deleting insn with uid = 72.
deleting insn with uid = 91.
deleting insn with uid = 92.
deleting insn with uid = 129.
deleting insn with uid = 148.
deleting insn with uid = 149.
deleting insn with uid = 186.
deleting insn with uid = 205.
deleting insn with uid = 206.
deleting insn with uid = 225.
deleting insn with uid = 239.
deleting insn with uid = 258.
deleting insn with uid = 272.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 207.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 238.
verify found no changes in insn with uid = 257.
verify found no changes in insn with uid = 271.


int quality(float*, float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8]
;;  ref usage 	r0={122d,112u} r1={33d,23u,22e} r2={11d,1u} r3={4d,4u} r4={11d,1u} r5={11d,1u} r6={1d,112u} r7={1d,15u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={68d,1u} r18={10d} r19={10d} r20={1d,1u,22e} r21={74d,73u} r22={20d,9u} r23={14d,3u} r24={12d,1u} r25={12d,1u} r26={12d,1u} r27={12d,1u} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d,1u} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} 
;;    total ref usage 1417{1012d,361u,44e} in 270{260 regular + 10 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 229 230 231 232 233 234 235 236 237 238
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
        (reg:DI 1 dx [ scratch ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 procpar_info+0 S8 A64])
        (reg:DI 2 cx [ procpar_info ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 preprocess+0 S8 A64])
        (reg:DI 37 r8 [ preprocess ])) ge2fitman_preproc.cpp:326 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:328 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 21 xmm0 [229])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 21 xmm0 [229])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DF 21 xmm0 [230])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [230])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DF 21 xmm0 [231])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [231])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 21 xmm0 [232])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [232])) ge2fitman_preproc.cpp:329 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DF 21 xmm0 [233])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])
        (reg:DF 21 xmm0 [233])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DF 21 xmm0 [234])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [234])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 21 xmm0 [235])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [235])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DF 21 xmm0 [236])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [236])) ge2fitman_preproc.cpp:330 128 {*movdf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DF 21 xmm0 [237])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:331 128 {*movdf_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 21 xmm0 [237])) ge2fitman_preproc.cpp:331 128 {*movdf_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DF 21 xmm0 [238])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:331 128 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 21 xmm0 [238])) ge2fitman_preproc.cpp:331 128 {*movdf_internal}
     (nil))
(insn 31 30 277 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:333 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 239
(code_label 277 31 32 3 82 "" [1 uses])
(note 32 277 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 3 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:333 89 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:SI 0 ax [orig:87 D.26036 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [239])
                (const_int 324 [0x144])) [0 procpar_info_16(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:333 90 {*movsi_internal}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.26036 ] [88])
                (ashift:SI (reg:SI 0 ax [orig:87 D.26036 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:333 511 {*ashlsi3_1}
     (nil))
(insn 36 35 37 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.26036 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:333 7 {*cmpsi_1}
     (nil))
(jump_insn 37 36 38 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 280)
            (pc))) ge2fitman_preproc.cpp:333 612 {*jcc_1}
     (nil)
 -> 280)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301
(note 38 37 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 4 (set (reg:SI 0 ax [240])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:335 90 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 0 ax [orig:89 D.26037 ] [89])
        (sign_extend:DI (reg:SI 0 ax [240]))) ge2fitman_preproc.cpp:335 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 1 dx [orig:90 D.26037 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.26037 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:335 512 {*ashldi3_1}
     (nil))
(insn 42 41 43 4 (set (reg/f:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:335 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.26038 ] [91])
                (plus:DI (reg/f:DI 0 ax [241])
                    (reg:DI 1 dx [orig:90 D.26037 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:335 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.26037 ] [90]))
        (nil)))
(insn 44 43 45 4 (set (reg:SF 21 xmm0 [orig:92 D.26039 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.26038 ] [91]) [0 *_22+0 S4 A32])) ge2fitman_preproc.cpp:335 129 {*movsf_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DF 22 xmm1 [orig:93 D.26040 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.26039 ] [92]))) ge2fitman_preproc.cpp:335 152 {*extendsfdf2_sse}
     (nil))
(insn 46 45 47 4 (set (reg:SI 0 ax [242])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:335 90 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:DI 0 ax [orig:94 D.26037 ] [94])
        (sign_extend:DI (reg:SI 0 ax [242]))) ge2fitman_preproc.cpp:335 142 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 1 dx [orig:95 D.26037 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.26037 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:335 512 {*ashldi3_1}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [243])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:335 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.26038 ] [96])
                (plus:DI (reg/f:DI 0 ax [243])
                    (reg:DI 1 dx [orig:95 D.26037 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:335 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.26037 ] [95]))
        (nil)))
(insn 51 50 52 4 (set (reg:SF 21 xmm0 [orig:97 D.26039 ] [97])
        (mem:SF (reg/f:DI 0 ax [orig:96 D.26038 ] [96]) [0 *_27+0 S4 A32])) ge2fitman_preproc.cpp:335 129 {*movsf_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DF 21 xmm0 [orig:98 D.26040 ] [98])
        (float_extend:DF (reg:SF 21 xmm0 [orig:97 D.26039 ] [97]))) ge2fitman_preproc.cpp:335 152 {*extendsfdf2_sse}
     (nil))
(insn 53 52 54 4 (set (reg:DF 22 xmm1 [orig:99 D.26040 ] [99])
        (mult:DF (reg:DF 22 xmm1 [orig:93 D.26040 ] [93])
            (reg:DF 21 xmm0 [orig:98 D.26040 ] [98]))) ge2fitman_preproc.cpp:335 798 {*fop_df_comm_sse}
     (nil))
(insn 54 53 55 4 (set (reg:SI 0 ax [244])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:336 90 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 0 ax [orig:100 D.26041 ] [100])
        (sign_extend:DI (reg:SI 0 ax [244]))) ge2fitman_preproc.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 4 (parallel [
            (set (reg:DI 0 ax [orig:101 D.26041 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 D.26041 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 218 {*adddi_1}
     (nil))
(insn 57 56 58 4 (parallel [
            (set (reg:DI 1 dx [orig:102 D.26041 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.26041 ] [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 512 {*ashldi3_1}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:336 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.26038 ] [103])
                (plus:DI (reg/f:DI 0 ax [245])
                    (reg:DI 1 dx [orig:102 D.26041 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.26041 ] [102]))
        (nil)))
(insn 60 59 61 4 (set (reg:SF 21 xmm0 [orig:104 D.26039 ] [104])
        (mem:SF (reg/f:DI 0 ax [orig:103 D.26038 ] [103]) [0 *_34+0 S4 A32])) ge2fitman_preproc.cpp:336 129 {*movsf_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DF 23 xmm2 [orig:105 D.26040 ] [105])
        (float_extend:DF (reg:SF 21 xmm0 [orig:104 D.26039 ] [104]))) ge2fitman_preproc.cpp:336 152 {*extendsfdf2_sse}
     (nil))
(insn 62 61 63 4 (set (reg:SI 0 ax [246])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:336 90 {*movsi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:DI 0 ax [orig:106 D.26041 ] [106])
        (sign_extend:DI (reg:SI 0 ax [246]))) ge2fitman_preproc.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 4 (parallel [
            (set (reg:DI 0 ax [orig:107 D.26041 ] [107])
                (plus:DI (reg:DI 0 ax [orig:106 D.26041 ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 218 {*adddi_1}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg:DI 1 dx [orig:108 D.26041 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:107 D.26041 ] [107])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 512 {*ashldi3_1}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [247])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:336 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.26038 ] [109])
                (plus:DI (reg/f:DI 0 ax [247])
                    (reg:DI 1 dx [orig:108 D.26041 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:336 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.26041 ] [108]))
        (nil)))
(insn 68 67 69 4 (set (reg:SF 21 xmm0 [orig:110 D.26039 ] [110])
        (mem:SF (reg/f:DI 0 ax [orig:109 D.26038 ] [109]) [0 *_40+0 S4 A32])) ge2fitman_preproc.cpp:336 129 {*movsf_internal}
     (nil))
(insn 69 68 70 4 (set (reg:DF 21 xmm0 [orig:111 D.26040 ] [111])
        (float_extend:DF (reg:SF 21 xmm0 [orig:110 D.26039 ] [110]))) ge2fitman_preproc.cpp:336 152 {*extendsfdf2_sse}
     (nil))
(insn 70 69 71 4 (set (reg:DF 21 xmm0 [orig:112 D.26040 ] [112])
        (mult:DF (reg:DF 21 xmm0 [orig:111 D.26040 ] [111])
            (reg:DF 23 xmm2 [orig:105 D.26040 ] [105]))) ge2fitman_preproc.cpp:336 798 {*fop_df_comm_sse}
     (nil))
(insn 71 70 73 4 (set (reg:DF 21 xmm0 [orig:113 D.26040 ] [113])
        (plus:DF (reg:DF 21 xmm0 [orig:112 D.26040 ] [112])
            (reg:DF 22 xmm1 [orig:99 D.26040 ] [99]))) ge2fitman_preproc.cpp:335 798 {*fop_df_comm_sse}
     (nil))
(call_insn 73 71 74 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:336 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 74 73 75 4 (set (reg:DF 0 ax [248])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:336 128 {*movdf_internal}
     (nil))
(insn 75 74 76 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [248])) ge2fitman_preproc.cpp:336 128 {*movdf_internal}
     (nil))
(insn 76 75 77 4 (set (reg:SI 0 ax [249])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:338 90 {*movsi_internal}
     (nil))
(insn 77 76 78 4 (set (reg:DI 0 ax [orig:114 D.26037 ] [114])
        (sign_extend:DI (reg:SI 0 ax [249]))) ge2fitman_preproc.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 4 (parallel [
            (set (reg:DI 1 dx [orig:115 D.26037 ] [115])
                (ashift:DI (reg:DI 0 ax [orig:114 D.26037 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 512 {*ashldi3_1}
     (nil))
(insn 79 78 80 4 (set (reg/f:DI 0 ax [250])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:338 89 {*movdi_internal}
     (nil))
(insn 80 79 81 4 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.26038 ] [116])
                (plus:DI (reg/f:DI 0 ax [250])
                    (reg:DI 1 dx [orig:115 D.26037 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.26037 ] [115]))
        (nil)))
(insn 81 80 82 4 (set (reg:SF 21 xmm0 [orig:117 D.26039 ] [117])
        (mem:SF (reg/f:DI 0 ax [orig:116 D.26038 ] [116]) [0 *_49+0 S4 A32])) ge2fitman_preproc.cpp:338 129 {*movsf_internal}
     (nil))
(insn 82 81 83 4 (set (reg:DF 22 xmm1 [orig:118 D.26040 ] [118])
        (float_extend:DF (reg:SF 21 xmm0 [orig:117 D.26039 ] [117]))) ge2fitman_preproc.cpp:338 152 {*extendsfdf2_sse}
     (nil))
(insn 83 82 84 4 (set (reg:SI 0 ax [251])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:338 90 {*movsi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:DI 0 ax [orig:119 D.26041 ] [119])
        (sign_extend:DI (reg:SI 0 ax [251]))) ge2fitman_preproc.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 4 (parallel [
            (set (reg:DI 0 ax [orig:120 D.26041 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 D.26041 ] [119])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 218 {*adddi_1}
     (nil))
(insn 86 85 87 4 (parallel [
            (set (reg:DI 1 dx [orig:121 D.26041 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.26041 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 512 {*ashldi3_1}
     (nil))
(insn 87 86 88 4 (set (reg/f:DI 0 ax [252])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:338 89 {*movdi_internal}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.26038 ] [122])
                (plus:DI (reg/f:DI 0 ax [252])
                    (reg:DI 1 dx [orig:121 D.26041 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:338 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.26041 ] [121]))
        (nil)))
(insn 89 88 90 4 (set (reg:SF 21 xmm0 [orig:123 D.26039 ] [123])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.26038 ] [122]) [0 *_55+0 S4 A32])) ge2fitman_preproc.cpp:338 129 {*movsf_internal}
     (nil))
(insn 90 89 93 4 (set (reg:DF 21 xmm0 [orig:124 D.26040 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.26039 ] [123]))) ge2fitman_preproc.cpp:338 152 {*extendsfdf2_sse}
     (nil))
(call_insn 93 90 94 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fe35704f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:338 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 94 93 95 4 (set (reg:DF 0 ax [253])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:338 128 {*movdf_internal}
     (nil))
(insn 95 94 96 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [253])) ge2fitman_preproc.cpp:338 128 {*movdf_internal}
     (nil))
(insn 96 95 97 4 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:340 90 {*movsi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:DI 0 ax [orig:125 D.26037 ] [125])
        (sign_extend:DI (reg:SI 0 ax [254]))) ge2fitman_preproc.cpp:340 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 4 (parallel [
            (set (reg:DI 1 dx [orig:126 D.26037 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.26037 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:340 512 {*ashldi3_1}
     (nil))
(insn 99 98 100 4 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:340 89 {*movdi_internal}
     (nil))
(insn 100 99 101 4 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.26038 ] [127])
                (plus:DI (reg/f:DI 0 ax [255])
                    (reg:DI 1 dx [orig:126 D.26037 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:340 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.26037 ] [126]))
        (nil)))
(insn 101 100 102 4 (set (reg:SF 21 xmm0 [orig:128 D.26039 ] [128])
        (mem:SF (reg/f:DI 0 ax [orig:127 D.26038 ] [127]) [0 *_63+0 S4 A32])) ge2fitman_preproc.cpp:340 129 {*movsf_internal}
     (nil))
(insn 102 101 103 4 (set (reg:DF 22 xmm1 [orig:129 D.26040 ] [129])
        (float_extend:DF (reg:SF 21 xmm0 [orig:128 D.26039 ] [128]))) ge2fitman_preproc.cpp:340 152 {*extendsfdf2_sse}
     (nil))
(insn 103 102 104 4 (set (reg:SI 0 ax [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:340 90 {*movsi_internal}
     (nil))
(insn 104 103 105 4 (set (reg:DI 0 ax [orig:130 D.26037 ] [130])
        (sign_extend:DI (reg:SI 0 ax [256]))) ge2fitman_preproc.cpp:340 142 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 4 (parallel [
            (set (reg:DI 1 dx [orig:131 D.26037 ] [131])
                (ashift:DI (reg:DI 0 ax [orig:130 D.26037 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:340 512 {*ashldi3_1}
     (nil))
(insn 106 105 107 4 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:340 89 {*movdi_internal}
     (nil))
(insn 107 106 108 4 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.26038 ] [132])
                (plus:DI (reg/f:DI 0 ax [257])
                    (reg:DI 1 dx [orig:131 D.26037 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:340 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.26037 ] [131]))
        (nil)))
(insn 108 107 109 4 (set (reg:SF 21 xmm0 [orig:133 D.26039 ] [133])
        (mem:SF (reg/f:DI 0 ax [orig:132 D.26038 ] [132]) [0 *_68+0 S4 A32])) ge2fitman_preproc.cpp:340 129 {*movsf_internal}
     (nil))
(insn 109 108 110 4 (set (reg:DF 21 xmm0 [orig:134 D.26040 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.26039 ] [133]))) ge2fitman_preproc.cpp:340 152 {*extendsfdf2_sse}
     (nil))
(insn 110 109 111 4 (set (reg:DF 22 xmm1 [orig:135 D.26040 ] [135])
        (mult:DF (reg:DF 22 xmm1 [orig:129 D.26040 ] [129])
            (reg:DF 21 xmm0 [orig:134 D.26040 ] [134]))) ge2fitman_preproc.cpp:340 798 {*fop_df_comm_sse}
     (nil))
(insn 111 110 112 4 (set (reg:SI 0 ax [258])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:341 90 {*movsi_internal}
     (nil))
(insn 112 111 113 4 (set (reg:DI 0 ax [orig:136 D.26041 ] [136])
        (sign_extend:DI (reg:SI 0 ax [258]))) ge2fitman_preproc.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 4 (parallel [
            (set (reg:DI 0 ax [orig:137 D.26041 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 D.26041 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 218 {*adddi_1}
     (nil))
(insn 114 113 115 4 (parallel [
            (set (reg:DI 1 dx [orig:138 D.26041 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:137 D.26041 ] [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 512 {*ashldi3_1}
     (nil))
(insn 115 114 116 4 (set (reg/f:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:341 89 {*movdi_internal}
     (nil))
(insn 116 115 117 4 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.26038 ] [139])
                (plus:DI (reg/f:DI 0 ax [259])
                    (reg:DI 1 dx [orig:138 D.26041 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:138 D.26041 ] [138]))
        (nil)))
(insn 117 116 118 4 (set (reg:SF 21 xmm0 [orig:140 D.26039 ] [140])
        (mem:SF (reg/f:DI 0 ax [orig:139 D.26038 ] [139]) [0 *_75+0 S4 A32])) ge2fitman_preproc.cpp:341 129 {*movsf_internal}
     (nil))
(insn 118 117 119 4 (set (reg:DF 23 xmm2 [orig:141 D.26040 ] [141])
        (float_extend:DF (reg:SF 21 xmm0 [orig:140 D.26039 ] [140]))) ge2fitman_preproc.cpp:341 152 {*extendsfdf2_sse}
     (nil))
(insn 119 118 120 4 (set (reg:SI 0 ax [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:341 90 {*movsi_internal}
     (nil))
(insn 120 119 121 4 (set (reg:DI 0 ax [orig:142 D.26041 ] [142])
        (sign_extend:DI (reg:SI 0 ax [260]))) ge2fitman_preproc.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 4 (parallel [
            (set (reg:DI 0 ax [orig:143 D.26041 ] [143])
                (plus:DI (reg:DI 0 ax [orig:142 D.26041 ] [142])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 218 {*adddi_1}
     (nil))
(insn 122 121 123 4 (parallel [
            (set (reg:DI 1 dx [orig:144 D.26041 ] [144])
                (ashift:DI (reg:DI 0 ax [orig:143 D.26041 ] [143])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 512 {*ashldi3_1}
     (nil))
(insn 123 122 124 4 (set (reg/f:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:341 89 {*movdi_internal}
     (nil))
(insn 124 123 125 4 (parallel [
            (set (reg/f:DI 0 ax [orig:145 D.26038 ] [145])
                (plus:DI (reg/f:DI 0 ax [261])
                    (reg:DI 1 dx [orig:144 D.26041 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:341 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:144 D.26041 ] [144]))
        (nil)))
(insn 125 124 126 4 (set (reg:SF 21 xmm0 [orig:146 D.26039 ] [146])
        (mem:SF (reg/f:DI 0 ax [orig:145 D.26038 ] [145]) [0 *_81+0 S4 A32])) ge2fitman_preproc.cpp:341 129 {*movsf_internal}
     (nil))
(insn 126 125 127 4 (set (reg:DF 21 xmm0 [orig:147 D.26040 ] [147])
        (float_extend:DF (reg:SF 21 xmm0 [orig:146 D.26039 ] [146]))) ge2fitman_preproc.cpp:341 152 {*extendsfdf2_sse}
     (nil))
(insn 127 126 128 4 (set (reg:DF 21 xmm0 [orig:148 D.26040 ] [148])
        (mult:DF (reg:DF 21 xmm0 [orig:147 D.26040 ] [147])
            (reg:DF 23 xmm2 [orig:141 D.26040 ] [141]))) ge2fitman_preproc.cpp:341 798 {*fop_df_comm_sse}
     (nil))
(insn 128 127 130 4 (set (reg:DF 21 xmm0 [orig:149 D.26040 ] [149])
        (plus:DF (reg:DF 21 xmm0 [orig:148 D.26040 ] [148])
            (reg:DF 22 xmm1 [orig:135 D.26040 ] [135]))) ge2fitman_preproc.cpp:340 798 {*fop_df_comm_sse}
     (nil))
(call_insn 130 128 131 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:341 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 131 130 132 4 (set (reg:DF 0 ax [262])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:341 128 {*movdf_internal}
     (nil))
(insn 132 131 133 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [262])) ge2fitman_preproc.cpp:341 128 {*movdf_internal}
     (nil))
(insn 133 132 134 4 (set (reg:SI 0 ax [263])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:343 90 {*movsi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:DI 0 ax [orig:150 D.26037 ] [150])
        (sign_extend:DI (reg:SI 0 ax [263]))) ge2fitman_preproc.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 4 (parallel [
            (set (reg:DI 1 dx [orig:151 D.26037 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.26037 ] [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 512 {*ashldi3_1}
     (nil))
(insn 136 135 137 4 (set (reg/f:DI 0 ax [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:343 89 {*movdi_internal}
     (nil))
(insn 137 136 138 4 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.26038 ] [152])
                (plus:DI (reg/f:DI 0 ax [264])
                    (reg:DI 1 dx [orig:151 D.26037 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.26037 ] [151]))
        (nil)))
(insn 138 137 139 4 (set (reg:SF 21 xmm0 [orig:153 D.26039 ] [153])
        (mem:SF (reg/f:DI 0 ax [orig:152 D.26038 ] [152]) [0 *_90+0 S4 A32])) ge2fitman_preproc.cpp:343 129 {*movsf_internal}
     (nil))
(insn 139 138 140 4 (set (reg:DF 22 xmm1 [orig:154 D.26040 ] [154])
        (float_extend:DF (reg:SF 21 xmm0 [orig:153 D.26039 ] [153]))) ge2fitman_preproc.cpp:343 152 {*extendsfdf2_sse}
     (nil))
(insn 140 139 141 4 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:343 90 {*movsi_internal}
     (nil))
(insn 141 140 142 4 (set (reg:DI 0 ax [orig:155 D.26041 ] [155])
        (sign_extend:DI (reg:SI 0 ax [265]))) ge2fitman_preproc.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 4 (parallel [
            (set (reg:DI 0 ax [orig:156 D.26041 ] [156])
                (plus:DI (reg:DI 0 ax [orig:155 D.26041 ] [155])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 218 {*adddi_1}
     (nil))
(insn 143 142 144 4 (parallel [
            (set (reg:DI 1 dx [orig:157 D.26041 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 D.26041 ] [156])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 512 {*ashldi3_1}
     (nil))
(insn 144 143 145 4 (set (reg/f:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:343 89 {*movdi_internal}
     (nil))
(insn 145 144 146 4 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.26038 ] [158])
                (plus:DI (reg/f:DI 0 ax [266])
                    (reg:DI 1 dx [orig:157 D.26041 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:343 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:157 D.26041 ] [157]))
        (nil)))
(insn 146 145 147 4 (set (reg:SF 21 xmm0 [orig:159 D.26039 ] [159])
        (mem:SF (reg/f:DI 0 ax [orig:158 D.26038 ] [158]) [0 *_96+0 S4 A32])) ge2fitman_preproc.cpp:343 129 {*movsf_internal}
     (nil))
(insn 147 146 150 4 (set (reg:DF 21 xmm0 [orig:160 D.26040 ] [160])
        (float_extend:DF (reg:SF 21 xmm0 [orig:159 D.26039 ] [159]))) ge2fitman_preproc.cpp:343 152 {*extendsfdf2_sse}
     (nil))
(call_insn 150 147 151 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fe35704f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:343 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 151 150 152 4 (set (reg:DF 0 ax [267])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:343 128 {*movdf_internal}
     (nil))
(insn 152 151 153 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [267])) ge2fitman_preproc.cpp:343 128 {*movdf_internal}
     (nil))
(insn 153 152 154 4 (set (reg:SI 0 ax [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:345 90 {*movsi_internal}
     (nil))
(insn 154 153 155 4 (set (reg:DI 0 ax [orig:161 D.26037 ] [161])
        (sign_extend:DI (reg:SI 0 ax [268]))) ge2fitman_preproc.cpp:345 142 {*extendsidi2_rex64}
     (nil))
(insn 155 154 156 4 (parallel [
            (set (reg:DI 1 dx [orig:162 D.26037 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.26037 ] [161])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:345 512 {*ashldi3_1}
     (nil))
(insn 156 155 157 4 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:345 89 {*movdi_internal}
     (nil))
(insn 157 156 158 4 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.26038 ] [163])
                (plus:DI (reg/f:DI 0 ax [269])
                    (reg:DI 1 dx [orig:162 D.26037 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:345 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.26037 ] [162]))
        (nil)))
(insn 158 157 159 4 (set (reg:SF 21 xmm0 [orig:164 D.26039 ] [164])
        (mem:SF (reg/f:DI 0 ax [orig:163 D.26038 ] [163]) [0 *_104+0 S4 A32])) ge2fitman_preproc.cpp:345 129 {*movsf_internal}
     (nil))
(insn 159 158 160 4 (set (reg:DF 22 xmm1 [orig:165 D.26040 ] [165])
        (float_extend:DF (reg:SF 21 xmm0 [orig:164 D.26039 ] [164]))) ge2fitman_preproc.cpp:345 152 {*extendsfdf2_sse}
     (nil))
(insn 160 159 161 4 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:345 90 {*movsi_internal}
     (nil))
(insn 161 160 162 4 (set (reg:DI 0 ax [orig:166 D.26037 ] [166])
        (sign_extend:DI (reg:SI 0 ax [270]))) ge2fitman_preproc.cpp:345 142 {*extendsidi2_rex64}
     (nil))
(insn 162 161 163 4 (parallel [
            (set (reg:DI 1 dx [orig:167 D.26037 ] [167])
                (ashift:DI (reg:DI 0 ax [orig:166 D.26037 ] [166])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:345 512 {*ashldi3_1}
     (nil))
(insn 163 162 164 4 (set (reg/f:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:345 89 {*movdi_internal}
     (nil))
(insn 164 163 165 4 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.26038 ] [168])
                (plus:DI (reg/f:DI 0 ax [271])
                    (reg:DI 1 dx [orig:167 D.26037 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:345 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:167 D.26037 ] [167]))
        (nil)))
(insn 165 164 166 4 (set (reg:SF 21 xmm0 [orig:169 D.26039 ] [169])
        (mem:SF (reg/f:DI 0 ax [orig:168 D.26038 ] [168]) [0 *_109+0 S4 A32])) ge2fitman_preproc.cpp:345 129 {*movsf_internal}
     (nil))
(insn 166 165 167 4 (set (reg:DF 21 xmm0 [orig:170 D.26040 ] [170])
        (float_extend:DF (reg:SF 21 xmm0 [orig:169 D.26039 ] [169]))) ge2fitman_preproc.cpp:345 152 {*extendsfdf2_sse}
     (nil))
(insn 167 166 168 4 (set (reg:DF 22 xmm1 [orig:171 D.26040 ] [171])
        (mult:DF (reg:DF 22 xmm1 [orig:165 D.26040 ] [165])
            (reg:DF 21 xmm0 [orig:170 D.26040 ] [170]))) ge2fitman_preproc.cpp:345 798 {*fop_df_comm_sse}
     (nil))
(insn 168 167 169 4 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:346 90 {*movsi_internal}
     (nil))
(insn 169 168 170 4 (set (reg:DI 0 ax [orig:172 D.26041 ] [172])
        (sign_extend:DI (reg:SI 0 ax [272]))) ge2fitman_preproc.cpp:346 142 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 4 (parallel [
            (set (reg:DI 0 ax [orig:173 D.26041 ] [173])
                (plus:DI (reg:DI 0 ax [orig:172 D.26041 ] [172])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 218 {*adddi_1}
     (nil))
(insn 171 170 172 4 (parallel [
            (set (reg:DI 1 dx [orig:174 D.26041 ] [174])
                (ashift:DI (reg:DI 0 ax [orig:173 D.26041 ] [173])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 512 {*ashldi3_1}
     (nil))
(insn 172 171 173 4 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:346 89 {*movdi_internal}
     (nil))
(insn 173 172 174 4 (parallel [
            (set (reg/f:DI 0 ax [orig:175 D.26038 ] [175])
                (plus:DI (reg/f:DI 0 ax [273])
                    (reg:DI 1 dx [orig:174 D.26041 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:174 D.26041 ] [174]))
        (nil)))
(insn 174 173 175 4 (set (reg:SF 21 xmm0 [orig:176 D.26039 ] [176])
        (mem:SF (reg/f:DI 0 ax [orig:175 D.26038 ] [175]) [0 *_116+0 S4 A32])) ge2fitman_preproc.cpp:346 129 {*movsf_internal}
     (nil))
(insn 175 174 176 4 (set (reg:DF 23 xmm2 [orig:177 D.26040 ] [177])
        (float_extend:DF (reg:SF 21 xmm0 [orig:176 D.26039 ] [176]))) ge2fitman_preproc.cpp:346 152 {*extendsfdf2_sse}
     (nil))
(insn 176 175 177 4 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:346 90 {*movsi_internal}
     (nil))
(insn 177 176 178 4 (set (reg:DI 0 ax [orig:178 D.26041 ] [178])
        (sign_extend:DI (reg:SI 0 ax [274]))) ge2fitman_preproc.cpp:346 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 4 (parallel [
            (set (reg:DI 0 ax [orig:179 D.26041 ] [179])
                (plus:DI (reg:DI 0 ax [orig:178 D.26041 ] [178])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 218 {*adddi_1}
     (nil))
(insn 179 178 180 4 (parallel [
            (set (reg:DI 1 dx [orig:180 D.26041 ] [180])
                (ashift:DI (reg:DI 0 ax [orig:179 D.26041 ] [179])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 512 {*ashldi3_1}
     (nil))
(insn 180 179 181 4 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:346 89 {*movdi_internal}
     (nil))
(insn 181 180 182 4 (parallel [
            (set (reg/f:DI 0 ax [orig:181 D.26038 ] [181])
                (plus:DI (reg/f:DI 0 ax [275])
                    (reg:DI 1 dx [orig:180 D.26041 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:346 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:180 D.26041 ] [180]))
        (nil)))
(insn 182 181 183 4 (set (reg:SF 21 xmm0 [orig:182 D.26039 ] [182])
        (mem:SF (reg/f:DI 0 ax [orig:181 D.26038 ] [181]) [0 *_122+0 S4 A32])) ge2fitman_preproc.cpp:346 129 {*movsf_internal}
     (nil))
(insn 183 182 184 4 (set (reg:DF 21 xmm0 [orig:183 D.26040 ] [183])
        (float_extend:DF (reg:SF 21 xmm0 [orig:182 D.26039 ] [182]))) ge2fitman_preproc.cpp:346 152 {*extendsfdf2_sse}
     (nil))
(insn 184 183 185 4 (set (reg:DF 21 xmm0 [orig:184 D.26040 ] [184])
        (mult:DF (reg:DF 21 xmm0 [orig:183 D.26040 ] [183])
            (reg:DF 23 xmm2 [orig:177 D.26040 ] [177]))) ge2fitman_preproc.cpp:346 798 {*fop_df_comm_sse}
     (nil))
(insn 185 184 187 4 (set (reg:DF 21 xmm0 [orig:185 D.26040 ] [185])
        (plus:DF (reg:DF 21 xmm0 [orig:184 D.26040 ] [184])
            (reg:DF 22 xmm1 [orig:171 D.26040 ] [171]))) ge2fitman_preproc.cpp:345 798 {*fop_df_comm_sse}
     (nil))
(call_insn 187 185 188 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:346 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 188 187 189 4 (set (reg:DF 0 ax [276])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:346 128 {*movdf_internal}
     (nil))
(insn 189 188 190 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [276])) ge2fitman_preproc.cpp:346 128 {*movdf_internal}
     (nil))
(insn 190 189 191 4 (set (reg:SI 0 ax [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:348 90 {*movsi_internal}
     (nil))
(insn 191 190 192 4 (set (reg:DI 0 ax [orig:186 D.26037 ] [186])
        (sign_extend:DI (reg:SI 0 ax [277]))) ge2fitman_preproc.cpp:348 142 {*extendsidi2_rex64}
     (nil))
(insn 192 191 193 4 (parallel [
            (set (reg:DI 1 dx [orig:187 D.26037 ] [187])
                (ashift:DI (reg:DI 0 ax [orig:186 D.26037 ] [186])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 512 {*ashldi3_1}
     (nil))
(insn 193 192 194 4 (set (reg/f:DI 0 ax [278])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:348 89 {*movdi_internal}
     (nil))
(insn 194 193 195 4 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.26038 ] [188])
                (plus:DI (reg/f:DI 0 ax [278])
                    (reg:DI 1 dx [orig:187 D.26037 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:187 D.26037 ] [187]))
        (nil)))
(insn 195 194 196 4 (set (reg:SF 21 xmm0 [orig:189 D.26039 ] [189])
        (mem:SF (reg/f:DI 0 ax [orig:188 D.26038 ] [188]) [0 *_131+0 S4 A32])) ge2fitman_preproc.cpp:348 129 {*movsf_internal}
     (nil))
(insn 196 195 197 4 (set (reg:DF 22 xmm1 [orig:190 D.26040 ] [190])
        (float_extend:DF (reg:SF 21 xmm0 [orig:189 D.26039 ] [189]))) ge2fitman_preproc.cpp:348 152 {*extendsfdf2_sse}
     (nil))
(insn 197 196 198 4 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:348 90 {*movsi_internal}
     (nil))
(insn 198 197 199 4 (set (reg:DI 0 ax [orig:191 D.26041 ] [191])
        (sign_extend:DI (reg:SI 0 ax [279]))) ge2fitman_preproc.cpp:348 142 {*extendsidi2_rex64}
     (nil))
(insn 199 198 200 4 (parallel [
            (set (reg:DI 0 ax [orig:192 D.26041 ] [192])
                (plus:DI (reg:DI 0 ax [orig:191 D.26041 ] [191])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 218 {*adddi_1}
     (nil))
(insn 200 199 201 4 (parallel [
            (set (reg:DI 1 dx [orig:193 D.26041 ] [193])
                (ashift:DI (reg:DI 0 ax [orig:192 D.26041 ] [192])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 512 {*ashldi3_1}
     (nil))
(insn 201 200 202 4 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:348 89 {*movdi_internal}
     (nil))
(insn 202 201 203 4 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.26038 ] [194])
                (plus:DI (reg/f:DI 0 ax [280])
                    (reg:DI 1 dx [orig:193 D.26041 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:348 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:193 D.26041 ] [193]))
        (nil)))
(insn 203 202 204 4 (set (reg:SF 21 xmm0 [orig:195 D.26039 ] [195])
        (mem:SF (reg/f:DI 0 ax [orig:194 D.26038 ] [194]) [0 *_137+0 S4 A32])) ge2fitman_preproc.cpp:348 129 {*movsf_internal}
     (nil))
(insn 204 203 207 4 (set (reg:DF 21 xmm0 [orig:196 D.26040 ] [196])
        (float_extend:DF (reg:SF 21 xmm0 [orig:195 D.26039 ] [195]))) ge2fitman_preproc.cpp:348 152 {*extendsfdf2_sse}
     (nil))
(call_insn 207 204 208 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fe35704f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:348 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 208 207 209 4 (set (reg:DF 0 ax [281])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:348 128 {*movdf_internal}
     (nil))
(insn 209 208 210 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [281])) ge2fitman_preproc.cpp:348 128 {*movdf_internal}
     (nil))
(insn 210 209 211 4 (set (reg:DF 21 xmm0 [283])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])) ge2fitman_preproc.cpp:352 128 {*movdf_internal}
     (nil))
(insn 211 210 212 4 (set (reg:DF 21 xmm0 [282])
        (div:DF (reg:DF 21 xmm0 [283])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:352 805 {*fop_df_1_sse}
     (nil))
(insn 212 211 213 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [282])) ge2fitman_preproc.cpp:352 128 {*movdf_internal}
     (nil))
(insn 213 212 214 4 (set (reg:DF 21 xmm0 [285])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])) ge2fitman_preproc.cpp:353 128 {*movdf_internal}
     (nil))
(insn 214 213 215 4 (set (reg:DF 21 xmm0 [284])
        (minus:DF (reg:DF 21 xmm0 [285])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:353 805 {*fop_df_1_sse}
     (nil))
(insn 215 214 216 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [284])) ge2fitman_preproc.cpp:353 128 {*movdf_internal}
     (nil))
(insn 216 215 217 4 (set (reg:SI 0 ax [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:355 90 {*movsi_internal}
     (nil))
(insn 217 216 218 4 (set (reg:DI 0 ax [orig:197 D.26037 ] [197])
        (sign_extend:DI (reg:SI 0 ax [286]))) ge2fitman_preproc.cpp:355 142 {*extendsidi2_rex64}
     (nil))
(insn 218 217 219 4 (parallel [
            (set (reg:DI 1 dx [orig:198 D.26037 ] [198])
                (ashift:DI (reg:DI 0 ax [orig:197 D.26037 ] [197])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:355 512 {*ashldi3_1}
     (nil))
(insn 219 218 220 4 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:355 89 {*movdi_internal}
     (nil))
(insn 220 219 221 4 (parallel [
            (set (reg/f:DI 3 bx [orig:199 D.26038 ] [199])
                (plus:DI (reg:DI 1 dx [orig:198 D.26037 ] [198])
                    (reg/f:DI 0 ax [287])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:355 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:198 D.26037 ] [198]))
        (nil)))
(insn 221 220 295 4 (set (reg:SF 24 xmm3 [orig:200 D.26039 ] [200])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:355 157 {*truncdfsf_fast_sse}
     (nil))
(insn 295 221 318 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 24 xmm3 [orig:200 D.26039 ] [200])) ge2fitman_preproc.cpp:355 129 {*movsf_internal}
     (nil))
(note 318 295 310 4 NOTE_INSN_DELETED)
(note 310 318 222 4 NOTE_INSN_DELETED)
(insn 222 310 223 4 (set (reg:DF 0 ax [288])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])) ge2fitman_preproc.cpp:355 128 {*movdf_internal}
     (nil))
(insn 223 222 296 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [288])) ge2fitman_preproc.cpp:355 128 {*movdf_internal}
     (nil))
(insn 296 223 224 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) ge2fitman_preproc.cpp:355 128 {*movdf_internal}
     (nil))
(call_insn/u 224 296 226 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fe3570545e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:355 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 226 224 297 4 (set (reg:SF 21 xmm0 [orig:202 D.26039 ] [202])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:201 D.26040 ] [201]))) ge2fitman_preproc.cpp:355 157 {*truncdfsf_fast_sse}
     (nil))
(note 297 226 314 4 NOTE_INSN_DELETED)
(note 314 297 227 4 NOTE_INSN_DELETED)
(insn 227 314 228 4 (set (reg:SF 21 xmm0 [orig:203 D.26039 ] [203])
        (mult:SF (reg:SF 21 xmm0 [orig:202 D.26039 ] [202])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) ge2fitman_preproc.cpp:355 797 {*fop_sf_comm_sse}
     (nil))
(insn 228 227 229 4 (set (mem:SF (reg/f:DI 3 bx [orig:199 D.26038 ] [199]) [0 *_146+0 S4 A32])
        (reg:SF 21 xmm0 [orig:203 D.26039 ] [203])) ge2fitman_preproc.cpp:355 129 {*movsf_internal}
     (nil))
(insn 229 228 230 4 (set (reg:SI 0 ax [289])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:356 90 {*movsi_internal}
     (nil))
(insn 230 229 231 4 (set (reg:DI 0 ax [orig:204 D.26041 ] [204])
        (sign_extend:DI (reg:SI 0 ax [289]))) ge2fitman_preproc.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 231 230 232 4 (parallel [
            (set (reg:DI 0 ax [orig:205 D.26041 ] [205])
                (plus:DI (reg:DI 0 ax [orig:204 D.26041 ] [204])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:356 218 {*adddi_1}
     (nil))
(insn 232 231 233 4 (parallel [
            (set (reg:DI 1 dx [orig:206 D.26041 ] [206])
                (ashift:DI (reg:DI 0 ax [orig:205 D.26041 ] [205])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:356 512 {*ashldi3_1}
     (nil))
(insn 233 232 234 4 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:356 89 {*movdi_internal}
     (nil))
(insn 234 233 235 4 (parallel [
            (set (reg/f:DI 3 bx [orig:207 D.26038 ] [207])
                (plus:DI (reg:DI 1 dx [orig:206 D.26041 ] [206])
                    (reg/f:DI 0 ax [290])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:356 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:206 D.26041 ] [206]))
        (nil)))
(insn 235 234 298 4 (set (reg:SF 25 xmm4 [orig:208 D.26039 ] [208])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:356 157 {*truncdfsf_fast_sse}
     (nil))
(insn 298 235 317 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 25 xmm4 [orig:208 D.26039 ] [208])) ge2fitman_preproc.cpp:356 129 {*movsf_internal}
     (nil))
(note 317 298 309 4 NOTE_INSN_DELETED)
(note 309 317 236 4 NOTE_INSN_DELETED)
(insn 236 309 237 4 (set (reg:DF 0 ax [291])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])) ge2fitman_preproc.cpp:356 128 {*movdf_internal}
     (nil))
(insn 237 236 299 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [291])) ge2fitman_preproc.cpp:356 128 {*movdf_internal}
     (nil))
(insn 299 237 238 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) ge2fitman_preproc.cpp:356 128 {*movdf_internal}
     (nil))
(call_insn/u 238 299 240 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fe3570915e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:356 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 240 238 300 4 (set (reg:SF 21 xmm0 [orig:210 D.26039 ] [210])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:209 D.26040 ] [209]))) ge2fitman_preproc.cpp:356 157 {*truncdfsf_fast_sse}
     (nil))
(note 300 240 313 4 NOTE_INSN_DELETED)
(note 313 300 241 4 NOTE_INSN_DELETED)
(insn 241 313 242 4 (set (reg:SF 21 xmm0 [orig:211 D.26039 ] [211])
        (mult:SF (reg:SF 21 xmm0 [orig:210 D.26039 ] [210])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) ge2fitman_preproc.cpp:356 797 {*fop_sf_comm_sse}
     (nil))
(insn 242 241 243 4 (set (mem:SF (reg/f:DI 3 bx [orig:207 D.26038 ] [207]) [0 *_155+0 S4 A32])
        (reg:SF 21 xmm0 [orig:211 D.26039 ] [211])) ge2fitman_preproc.cpp:356 129 {*movsf_internal}
     (nil))
(insn 243 242 244 4 (set (reg:DF 21 xmm0 [293])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])) ge2fitman_preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 244 243 245 4 (set (reg:DF 21 xmm0 [292])
        (div:DF (reg:DF 21 xmm0 [293])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:360 805 {*fop_df_1_sse}
     (nil))
(insn 245 244 246 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [292])) ge2fitman_preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 246 245 247 4 (set (reg:DF 21 xmm0 [295])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])) ge2fitman_preproc.cpp:361 128 {*movdf_internal}
     (nil))
(insn 247 246 248 4 (set (reg:DF 21 xmm0 [294])
        (minus:DF (reg:DF 21 xmm0 [295])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:361 805 {*fop_df_1_sse}
     (nil))
(insn 248 247 249 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [294])) ge2fitman_preproc.cpp:361 128 {*movdf_internal}
     (nil))
(insn 249 248 250 4 (set (reg:SI 0 ax [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:363 90 {*movsi_internal}
     (nil))
(insn 250 249 251 4 (set (reg:DI 0 ax [orig:212 D.26037 ] [212])
        (sign_extend:DI (reg:SI 0 ax [296]))) ge2fitman_preproc.cpp:363 142 {*extendsidi2_rex64}
     (nil))
(insn 251 250 252 4 (parallel [
            (set (reg:DI 1 dx [orig:213 D.26037 ] [213])
                (ashift:DI (reg:DI 0 ax [orig:212 D.26037 ] [212])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:363 512 {*ashldi3_1}
     (nil))
(insn 252 251 253 4 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:363 89 {*movdi_internal}
     (nil))
(insn 253 252 254 4 (parallel [
            (set (reg/f:DI 3 bx [orig:214 D.26038 ] [214])
                (plus:DI (reg:DI 1 dx [orig:213 D.26037 ] [213])
                    (reg/f:DI 0 ax [297])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:363 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:213 D.26037 ] [213]))
        (nil)))
(insn 254 253 301 4 (set (reg:SF 26 xmm5 [orig:215 D.26039 ] [215])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:363 157 {*truncdfsf_fast_sse}
     (nil))
(insn 301 254 316 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 26 xmm5 [orig:215 D.26039 ] [215])) ge2fitman_preproc.cpp:363 129 {*movsf_internal}
     (nil))
(note 316 301 308 4 NOTE_INSN_DELETED)
(note 308 316 255 4 NOTE_INSN_DELETED)
(insn 255 308 256 4 (set (reg:DF 0 ax [298])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])) ge2fitman_preproc.cpp:363 128 {*movdf_internal}
     (nil))
(insn 256 255 302 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [298])) ge2fitman_preproc.cpp:363 128 {*movdf_internal}
     (nil))
(insn 302 256 257 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) ge2fitman_preproc.cpp:363 128 {*movdf_internal}
     (nil))
(call_insn/u 257 302 259 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fe3570545e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:363 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 259 257 303 4 (set (reg:SF 21 xmm0 [orig:217 D.26039 ] [217])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:216 D.26040 ] [216]))) ge2fitman_preproc.cpp:363 157 {*truncdfsf_fast_sse}
     (nil))
(note 303 259 312 4 NOTE_INSN_DELETED)
(note 312 303 260 4 NOTE_INSN_DELETED)
(insn 260 312 261 4 (set (reg:SF 21 xmm0 [orig:218 D.26039 ] [218])
        (mult:SF (reg:SF 21 xmm0 [orig:217 D.26039 ] [217])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) ge2fitman_preproc.cpp:363 797 {*fop_sf_comm_sse}
     (nil))
(insn 261 260 262 4 (set (mem:SF (reg/f:DI 3 bx [orig:214 D.26038 ] [214]) [0 *_165+0 S4 A32])
        (reg:SF 21 xmm0 [orig:218 D.26039 ] [218])) ge2fitman_preproc.cpp:363 129 {*movsf_internal}
     (nil))
(insn 262 261 263 4 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:364 90 {*movsi_internal}
     (nil))
(insn 263 262 264 4 (set (reg:DI 0 ax [orig:219 D.26041 ] [219])
        (sign_extend:DI (reg:SI 0 ax [299]))) ge2fitman_preproc.cpp:364 142 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 4 (parallel [
            (set (reg:DI 0 ax [orig:220 D.26041 ] [220])
                (plus:DI (reg:DI 0 ax [orig:219 D.26041 ] [219])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:364 218 {*adddi_1}
     (nil))
(insn 265 264 266 4 (parallel [
            (set (reg:DI 1 dx [orig:221 D.26041 ] [221])
                (ashift:DI (reg:DI 0 ax [orig:220 D.26041 ] [220])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:364 512 {*ashldi3_1}
     (nil))
(insn 266 265 267 4 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:364 89 {*movdi_internal}
     (nil))
(insn 267 266 268 4 (parallel [
            (set (reg/f:DI 3 bx [orig:222 D.26038 ] [222])
                (plus:DI (reg:DI 1 dx [orig:221 D.26041 ] [221])
                    (reg/f:DI 0 ax [300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:364 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:221 D.26041 ] [221]))
        (nil)))
(insn 268 267 304 4 (set (reg:SF 27 xmm6 [orig:223 D.26039 ] [223])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:364 157 {*truncdfsf_fast_sse}
     (nil))
(insn 304 268 315 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 27 xmm6 [orig:223 D.26039 ] [223])) ge2fitman_preproc.cpp:364 129 {*movsf_internal}
     (nil))
(note 315 304 307 4 NOTE_INSN_DELETED)
(note 307 315 269 4 NOTE_INSN_DELETED)
(insn 269 307 270 4 (set (reg:DF 0 ax [301])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])) ge2fitman_preproc.cpp:364 128 {*movdf_internal}
     (nil))
(insn 270 269 305 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [301])) ge2fitman_preproc.cpp:364 128 {*movdf_internal}
     (nil))
(insn 305 270 271 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) ge2fitman_preproc.cpp:364 128 {*movdf_internal}
     (nil))
(call_insn/u 271 305 273 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fe3570915e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:364 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 273 271 306 4 (set (reg:SF 21 xmm0 [orig:225 D.26039 ] [225])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:224 D.26040 ] [224]))) ge2fitman_preproc.cpp:364 157 {*truncdfsf_fast_sse}
     (nil))
(note 306 273 311 4 NOTE_INSN_DELETED)
(note 311 306 274 4 NOTE_INSN_DELETED)
(insn 274 311 275 4 (set (reg:SF 21 xmm0 [orig:226 D.26039 ] [226])
        (mult:SF (reg:SF 21 xmm0 [orig:225 D.26039 ] [225])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) ge2fitman_preproc.cpp:364 797 {*fop_sf_comm_sse}
     (nil))
(insn 275 274 276 4 (set (mem:SF (reg/f:DI 3 bx [orig:222 D.26038 ] [222]) [0 *_174+0 S4 A32])
        (reg:SF 21 xmm0 [orig:226 D.26039 ] [226])) ge2fitman_preproc.cpp:364 129 {*movsf_internal}
     (nil))
(insn 276 275 292 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:333 217 {*addsi_1}
     (nil))
(jump_insn 292 276 293 4 (set (pc)
        (label_ref 277)) ge2fitman_preproc.cpp:333 654 {jump}
     (nil)
 -> 277)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 293 292 280)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 227 228
(code_label 280 293 281 5 81 "" [1 uses])
(note 281 280 282 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 285 5 (set (reg:SI 0 ax [orig:227 D.26036 ] [227])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:367 90 {*movsi_internal}
     (nil))
(insn 285 282 289 5 (set (reg:SI 0 ax [orig:228 <retval> ] [228])
        (reg:SI 0 ax [orig:227 D.26036 ] [227])) ge2fitman_preproc.cpp:367 90 {*movsi_internal}
     (nil))
(insn 289 285 290 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:228 <retval> ] [228])) ge2fitman_preproc.cpp:369 90 {*movsi_internal}
     (nil))
(insn 290 289 294 5 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:369 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 294 290 0 NOTE_INSN_DELETED)

;; Function int filter(float*, float*, Procpar_info*, Preprocess*) (_Z6filterPfS_P12Procpar_infoP10Preprocess, funcdef_no=1028, decl_uid=24445, cgraph_uid=233, symbol_order=234)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 10:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 11:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 12:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 13:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 15:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=489 from oldreg=348, assigning class SSE_REGS to r489
   19: r489:SF=r489:SF/r89:SF
      REG_DEAD r89:SF
      REG_DEAD r87:SF
    Inserting insn reload before:
  558: r489:SF=r87:SF
    Inserting insn reload after:
  559: r348:SF=r489:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 20:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 22:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 23:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 25:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 40:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 43:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 44:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 51:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 52:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 53:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=490 from oldreg=363, assigning class GENERAL_REGS to r490
   66: {r490:SI=r490:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  560: r490:SI=r109:SI
    Inserting insn reload after:
  561: r363:SI=r490:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 71:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =x  (1) 0  (2) xm {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 76:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 81:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 102:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 103:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 111:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 113:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=491 from oldreg=381, assigning class GENERAL_REGS to r491
  127: {r491:SI=r491:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  562: r491:SI=r139:SI
    Inserting insn reload after:
  563: r381:SI=r491:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =x  (1) 0  (2) xm {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 137:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 138:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 141:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 145:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) x  (1) xm {*cmpiusf_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
      Creating newreg=492 from oldreg=160, assigning class ALL_SSE_REGS to r492
  184: r492:SF=[r159:DI]
      REG_DEAD r159:DI
    Inserting insn reload after:
  564: r160:SF=r492:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 564:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 186:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=493 from oldreg=397, assigning class GENERAL_REGS to r493
  186: {r493:SI=r493:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  565: r493:SI=r396:SI
    Inserting insn reload after:
  566: r397:SI=r493:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 192:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 194
	 Choosing alt 0 in insn 194:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 197:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 200:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 207
	 Choosing alt 0 in insn 207:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=494 from oldreg=160, assigning class SSE_REGS to r494
      Making reload reg 494 for reg 160 optional
  207: r174:SF=r173:SF*r494:SF
      REG_DEAD r173:SF
      REG_DEAD r160:SF
    Inserting insn reload before:
  567: r494:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 567:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 208:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 212:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 221:  (0) v  (1) m {*movsf_internal}
      Creating newreg=495 from oldreg=183, assigning class ALL_SSE_REGS to r495
  221: r495:SF=[r182:DI]
      REG_DEAD r182:DI
    Inserting insn reload after:
  568: r183:SF=r495:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 568:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 223:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=496 from oldreg=408, assigning class GENERAL_REGS to r496
  223: {r496:SI=r496:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  569: r496:SI=r407:SI
    Inserting insn reload after:
  570: r408:SI=r496:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 224
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 227:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 229:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 0 in insn 231:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 234:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 235
	 Choosing alt 0 in insn 235:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 237:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 239
	 Choosing alt 0 in insn 239:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 244
	 Choosing alt 0 in insn 244:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=497 from oldreg=183, assigning class SSE_REGS to r497
      Making reload reg 497 for reg 183 optional
  244: r197:SF=r196:SF*r497:SF
      REG_DEAD r196:SF
      REG_DEAD r183:SF
    Inserting insn reload before:
  571: r497:SF=r183:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 571:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 245:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 257:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 262:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 263:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 264
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 265:  (0) v  (1) m {*movsf_internal}
      Creating newreg=498 from oldreg=205, assigning class ALL_SSE_REGS to r498
  265: r498:SF=[r204:DI]
      REG_DEAD r204:DI
    Inserting insn reload after:
  572: r205:SF=r498:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 572:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 267:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=499 from oldreg=420, assigning class GENERAL_REGS to r499
  267: {r499:SI=r499:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  573: r499:SI=r419:SI
    Inserting insn reload after:
  574: r420:SI=r499:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 268
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 273:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 275
	 Choosing alt 0 in insn 275:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 276:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 278:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 279
	 Choosing alt 0 in insn 279:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 281:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 283
	 Choosing alt 0 in insn 283:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 288
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=500 from oldreg=205, assigning class SSE_REGS to r500
      Making reload reg 500 for reg 205 optional
  288: r219:SF=r218:SF*r500:SF
      REG_DEAD r218:SF
      REG_DEAD r205:SF
    Inserting insn reload before:
  575: r500:SF=r205:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 575:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 289:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 293:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 294:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 298:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 301
	 Choosing alt 0 in insn 301:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 302:  (0) v  (1) m {*movsf_internal}
      Creating newreg=501 from oldreg=228, assigning class ALL_SSE_REGS to r501
  302: r501:SF=[r227:DI]
      REG_DEAD r227:DI
    Inserting insn reload after:
  576: r228:SF=r501:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 576:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 304:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=502 from oldreg=431, assigning class GENERAL_REGS to r502
  304: {r502:SI=r502:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  577: r502:SI=r430:SI
    Inserting insn reload after:
  578: r431:SI=r502:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 305
	 Choosing alt 0 in insn 305:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 308:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 310:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 312
	 Choosing alt 0 in insn 312:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 315:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 316
	 Choosing alt 0 in insn 316:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 318:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 320
	 Choosing alt 0 in insn 320:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 325
	 Choosing alt 0 in insn 325:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=503 from oldreg=228, assigning class SSE_REGS to r503
      Making reload reg 503 for reg 228 optional
  325: r242:SF=r241:SF*r503:SF
      REG_DEAD r241:SF
      REG_DEAD r228:SF
    Inserting insn reload before:
  579: r503:SF=r228:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 579:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 326:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 329:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 335:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 336:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 337:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 338:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 341:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) x  (1) xm {*cmpiusf_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 353:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 356:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 361:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 363:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 368:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 375
	 Choosing alt 0 in insn 375:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 376:  (0) v  (1) m {*movsf_internal}
      Creating newreg=504 from oldreg=255, assigning class ALL_SSE_REGS to r504
  376: r504:SF=[r254:DI]
      REG_DEAD r254:DI
    Inserting insn reload after:
  580: r255:SF=r504:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 580:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 378:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=505 from oldreg=448, assigning class GENERAL_REGS to r505
  378: {r505:SI=r505:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  581: r505:SI=r447:SI
    Inserting insn reload after:
  582: r448:SI=r505:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 379
	 Choosing alt 0 in insn 379:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 382:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 384:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 386
	 Choosing alt 0 in insn 386:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 387:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 389:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 390
	 Choosing alt 0 in insn 390:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 393:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 395
	 Choosing alt 0 in insn 395:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 400
	 Choosing alt 0 in insn 400:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=506 from oldreg=255, assigning class SSE_REGS to r506
      Making reload reg 506 for reg 255 optional
  400: r270:SF=r269:SF*r506:SF
      REG_DEAD r269:SF
      REG_DEAD r255:SF
    Inserting insn reload before:
  583: r506:SF=r255:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 583:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 401:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 404:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 410:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 413
	 Choosing alt 0 in insn 413:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 414:  (0) v  (1) m {*movsf_internal}
      Creating newreg=507 from oldreg=279, assigning class ALL_SSE_REGS to r507
  414: r507:SF=[r278:DI]
      REG_DEAD r278:DI
    Inserting insn reload after:
  584: r279:SF=r507:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 584:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 416:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=508 from oldreg=459, assigning class GENERAL_REGS to r508
  416: {r508:SI=r508:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  585: r508:SI=r458:SI
    Inserting insn reload after:
  586: r459:SI=r508:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 417
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 420:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 422:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 424
	 Choosing alt 0 in insn 424:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 425:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 427:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 428
	 Choosing alt 0 in insn 428:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 430:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 431:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 433
	 Choosing alt 0 in insn 433:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 438
	 Choosing alt 0 in insn 438:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=509 from oldreg=279, assigning class SSE_REGS to r509
      Making reload reg 509 for reg 279 optional
  438: r294:SF=r293:SF*r509:SF
      REG_DEAD r293:SF
      REG_DEAD r279:SF
    Inserting insn reload before:
  587: r509:SF=r279:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 587:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 439:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 452:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 456:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 458
	 Choosing alt 0 in insn 458:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 459:  (0) v  (1) m {*movsf_internal}
      Creating newreg=510 from oldreg=302, assigning class ALL_SSE_REGS to r510
  459: r510:SF=[r301:DI]
      REG_DEAD r301:DI
    Inserting insn reload after:
  588: r302:SF=r510:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 588:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 461:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=511 from oldreg=471, assigning class GENERAL_REGS to r511
  461: {r511:SI=r511:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  589: r511:SI=r470:SI
    Inserting insn reload after:
  590: r471:SI=r511:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 462
	 Choosing alt 0 in insn 462:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 465:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 467:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 469
	 Choosing alt 0 in insn 469:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 470:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 472:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 473
	 Choosing alt 0 in insn 473:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 476:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 478
	 Choosing alt 0 in insn 478:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 483
	 Choosing alt 0 in insn 483:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=512 from oldreg=302, assigning class SSE_REGS to r512
      Making reload reg 512 for reg 302 optional
  483: r317:SF=r316:SF*r512:SF
      REG_DEAD r316:SF
      REG_DEAD r302:SF
    Inserting insn reload before:
  591: r512:SF=r302:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 591:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 484:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 487:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 489:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 494:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 495:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 496
	 Choosing alt 0 in insn 496:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 497:  (0) v  (1) m {*movsf_internal}
      Creating newreg=513 from oldreg=326, assigning class ALL_SSE_REGS to r513
  497: r513:SF=[r325:DI]
      REG_DEAD r325:DI
    Inserting insn reload after:
  592: r326:SF=r513:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 592:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 499:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=514 from oldreg=482, assigning class GENERAL_REGS to r514
  499: {r514:SI=r514:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  593: r514:SI=r481:SI
    Inserting insn reload after:
  594: r482:SI=r514:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 500
	 Choosing alt 0 in insn 500:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 503:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 505:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 507
	 Choosing alt 0 in insn 507:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 508:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 510:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 511
	 Choosing alt 0 in insn 511:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 512:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 513:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 514:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 516
	 Choosing alt 0 in insn 516:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 521
	 Choosing alt 0 in insn 521:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=515 from oldreg=326, assigning class SSE_REGS to r515
      Making reload reg 515 for reg 326 optional
  521: r341:SF=r340:SF*r515:SF
      REG_DEAD r340:SF
      REG_DEAD r326:SF
    Inserting insn reload before:
  595: r515:SF=r326:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 595:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 522:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 525:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=516 from oldreg=183, assigning class ALL_SSE_REGS to inheritance r516
    Original reg change 183->516 (bb14):
  568: r516:SF=r495:SF
    Add original<-inheritance after:
  596: r183:SF=r516:SF

    Inheritance reuse change 183->516 (bb14):
  571: r497:SF=r516:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=517 from oldreg=160, assigning class ALL_SSE_REGS to inheritance r517
    Original reg change 160->517 (bb14):
  564: r517:SF=r492:SF
    Add original<-inheritance after:
  597: r160:SF=r517:SF

    Inheritance reuse change 160->517 (bb14):
  567: r494:SF=r517:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   596: r183:SF=r516:SF
deleting insn with uid = 596.
	    Removing dead insn:
   597: r160:SF=r517:SF
deleting insn with uid = 597.
EBB 15
EBB 16
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=518 from oldreg=228, assigning class ALL_SSE_REGS to inheritance r518
    Original reg change 228->518 (bb16):
  576: r518:SF=r501:SF
    Add original<-inheritance after:
  598: r228:SF=r518:SF

    Inheritance reuse change 228->518 (bb16):
  579: r503:SF=r518:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=519 from oldreg=205, assigning class ALL_SSE_REGS to inheritance r519
    Original reg change 205->519 (bb16):
  572: r519:SF=r498:SF
    Add original<-inheritance after:
  599: r205:SF=r519:SF

    Inheritance reuse change 205->519 (bb16):
  575: r500:SF=r519:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   598: r228:SF=r518:SF
deleting insn with uid = 598.
	    Removing dead insn:
   599: r205:SF=r519:SF
deleting insn with uid = 599.
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=520 from oldreg=279, assigning class ALL_SSE_REGS to inheritance r520
    Original reg change 279->520 (bb24):
  584: r520:SF=r507:SF
    Add original<-inheritance after:
  600: r279:SF=r520:SF

    Inheritance reuse change 279->520 (bb24):
  587: r509:SF=r520:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=521 from oldreg=255, assigning class ALL_SSE_REGS to inheritance r521
    Original reg change 255->521 (bb24):
  580: r521:SF=r504:SF
    Add original<-inheritance after:
  601: r255:SF=r521:SF

    Inheritance reuse change 255->521 (bb24):
  583: r506:SF=r521:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   600: r279:SF=r520:SF
deleting insn with uid = 600.
	    Removing dead insn:
   601: r255:SF=r521:SF
deleting insn with uid = 601.
EBB 25
EBB 26
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=522 from oldreg=326, assigning class ALL_SSE_REGS to inheritance r522
    Original reg change 326->522 (bb26):
  592: r522:SF=r513:SF
    Add original<-inheritance after:
  602: r326:SF=r522:SF

    Inheritance reuse change 326->522 (bb26):
  595: r515:SF=r522:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=523 from oldreg=302, assigning class ALL_SSE_REGS to inheritance r523
    Original reg change 302->523 (bb26):
  588: r523:SF=r510:SF
    Add original<-inheritance after:
  603: r302:SF=r523:SF

    Inheritance reuse change 302->523 (bb26):
  591: r512:SF=r523:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   602: r326:SF=r522:SF
deleting insn with uid = 602.
	    Removing dead insn:
   603: r302:SF=r523:SF
deleting insn with uid = 603.
EBB 27
EBB 28

********** Pseudo live ranges #1: **********

  BB 28
   Insn 539: point = 0
   Insn 538: point = 0
   Insn 534: point = 1
   Insn 531: point = 3
  BB 21
   Insn 354: point = 4
   Insn 353: point = 4
   Insn 352: point = 5
   Insn 351: point = 7
   Insn 350: point = 9
  BB 27
   Insn 555: point = 10
   Insn 525: point = 10
  BB 24
   Insn 553: point = 10
   Insn 439: point = 10
   Insn 438: point = 11
   Insn 587: point = 13
	   Creating copy r509<-r520@1
   Insn 437: point = 15
   Insn 436: point = 17
   Insn 435: point = 18
   Insn 434: point = 18
   Insn 433: point = 19
   Insn 432: point = 21
   Insn 431: point = 23
   Insn 430: point = 25
   Insn 429: point = 27
   Insn 428: point = 28
   Insn 427: point = 30
   Insn 426: point = 31
   Insn 425: point = 33
   Insn 424: point = 34
   Insn 423: point = 36
   Insn 422: point = 37
   Insn 421: point = 39
   Insn 420: point = 40
   Insn 419: point = 42
   Insn 418: point = 44
   Insn 417: point = 46
   Insn 586: point = 48
	Hard reg 1 is preferable by r508 with profit 1
   Insn 416: point = 50
   Insn 585: point = 50
   Insn 415: point = 51
   Insn 584: point = 52
	   Creating copy r507->r520@1
   Insn 414: point = 54
   Insn 413: point = 56
   Insn 412: point = 58
   Insn 411: point = 59
   Insn 410: point = 61
   Insn 409: point = 63
   Insn 408: point = 65
   Insn 407: point = 66
   Insn 406: point = 68
   Insn 405: point = 69
   Insn 404: point = 71
   Insn 403: point = 73
   Insn 402: point = 75
   Insn 401: point = 76
   Insn 400: point = 77
   Insn 583: point = 79
	   Creating copy r506<-r521@1
   Insn 399: point = 81
   Insn 398: point = 83
   Insn 397: point = 84
   Insn 396: point = 84
   Insn 395: point = 85
   Insn 394: point = 87
   Insn 393: point = 89
   Insn 392: point = 91
   Insn 391: point = 93
   Insn 390: point = 94
   Insn 389: point = 96
   Insn 388: point = 97
   Insn 387: point = 99
   Insn 386: point = 100
   Insn 385: point = 102
   Insn 384: point = 103
   Insn 383: point = 105
   Insn 382: point = 106
   Insn 381: point = 108
   Insn 380: point = 110
   Insn 379: point = 112
   Insn 582: point = 114
	Hard reg 1 is preferable by r505 with profit 1
   Insn 378: point = 116
   Insn 581: point = 116
   Insn 377: point = 117
   Insn 580: point = 118
	   Creating copy r504->r521@1
   Insn 376: point = 120
   Insn 375: point = 122
   Insn 374: point = 124
   Insn 373: point = 125
   Insn 372: point = 127
   Insn 371: point = 129
   Insn 370: point = 130
   Insn 369: point = 132
   Insn 368: point = 133
   Insn 367: point = 135
   Insn 366: point = 137
  BB 26
   Insn 522: point = 138
   Insn 521: point = 139
   Insn 595: point = 141
	   Creating copy r515<-r522@1
   Insn 520: point = 143
   Insn 519: point = 145
   Insn 518: point = 146
   Insn 517: point = 146
   Insn 516: point = 147
   Insn 515: point = 149
   Insn 514: point = 151
   Insn 513: point = 153
   Insn 512: point = 155
   Insn 511: point = 156
   Insn 510: point = 158
   Insn 509: point = 159
   Insn 508: point = 161
   Insn 507: point = 162
   Insn 506: point = 164
   Insn 505: point = 165
   Insn 504: point = 167
   Insn 503: point = 168
   Insn 502: point = 170
   Insn 501: point = 172
   Insn 500: point = 174
   Insn 594: point = 176
	Hard reg 1 is preferable by r514 with profit 1
   Insn 499: point = 178
   Insn 593: point = 178
   Insn 498: point = 179
   Insn 592: point = 180
	   Creating copy r513->r522@1
   Insn 497: point = 182
   Insn 496: point = 184
   Insn 495: point = 186
   Insn 494: point = 187
   Insn 493: point = 189
   Insn 492: point = 191
   Insn 491: point = 193
   Insn 490: point = 194
   Insn 489: point = 196
   Insn 488: point = 197
   Insn 487: point = 199
   Insn 486: point = 201
   Insn 485: point = 203
   Insn 484: point = 204
   Insn 483: point = 205
   Insn 591: point = 207
	   Creating copy r512<-r523@1
   Insn 482: point = 209
   Insn 481: point = 211
   Insn 480: point = 212
   Insn 479: point = 212
   Insn 478: point = 213
   Insn 477: point = 215
   Insn 476: point = 217
   Insn 475: point = 219
   Insn 474: point = 221
   Insn 473: point = 222
   Insn 472: point = 224
   Insn 471: point = 225
   Insn 470: point = 227
   Insn 469: point = 228
   Insn 468: point = 230
   Insn 467: point = 231
   Insn 466: point = 233
   Insn 465: point = 234
   Insn 464: point = 236
   Insn 463: point = 238
   Insn 462: point = 240
   Insn 590: point = 242
	Hard reg 1 is preferable by r511 with profit 1
   Insn 461: point = 244
   Insn 589: point = 244
   Insn 460: point = 245
   Insn 588: point = 246
	   Creating copy r510->r523@1
   Insn 459: point = 248
   Insn 458: point = 250
   Insn 457: point = 252
   Insn 456: point = 253
   Insn 455: point = 255
   Insn 454: point = 257
   Insn 453: point = 258
   Insn 452: point = 260
   Insn 451: point = 261
   Insn 450: point = 263
   Insn 449: point = 265
  BB 25
   Insn 447: point = 266
   Insn 446: point = 266
   Insn 445: point = 267
   Insn 444: point = 269
  BB 23
   Insn 364: point = 270
   Insn 363: point = 270
   Insn 362: point = 271
   Insn 361: point = 273
  BB 22
   Insn 359: point = 274
   Insn 358: point = 274
   Insn 357: point = 275
   Insn 356: point = 277
  BB 20
   Insn 348: point = 278
  BB 19
   Insn 343: point = 278
   Insn 342: point = 278
   Insn 341: point = 279
  BB 18
   Insn 340: point = 281
   Insn 339: point = 281
   Insn 338: point = 282
   Insn 337: point = 283
   Insn 336: point = 285
   Insn 335: point = 287
  BB 11
   Insn 162: point = 288
   Insn 161: point = 288
   Insn 160: point = 289
   Insn 159: point = 291
   Insn 158: point = 293
  BB 17
   Insn 551: point = 294
   Insn 329: point = 294
  BB 14
   Insn 549: point = 294
   Insn 245: point = 294
   Insn 244: point = 295
   Insn 571: point = 297
	   Creating copy r497<-r516@1
   Insn 243: point = 299
   Insn 242: point = 301
   Insn 241: point = 302
   Insn 240: point = 302
   Insn 239: point = 303
   Insn 238: point = 305
   Insn 237: point = 307
   Insn 236: point = 309
   Insn 235: point = 310
   Insn 234: point = 312
   Insn 233: point = 313
   Insn 232: point = 315
   Insn 231: point = 316
   Insn 230: point = 318
   Insn 229: point = 319
   Insn 228: point = 321
   Insn 227: point = 322
   Insn 226: point = 324
   Insn 225: point = 326
   Insn 224: point = 328
   Insn 570: point = 330
	Hard reg 1 is preferable by r496 with profit 1
   Insn 223: point = 332
   Insn 569: point = 332
   Insn 222: point = 333
   Insn 568: point = 334
	   Creating copy r495->r516@1
   Insn 221: point = 336
   Insn 220: point = 338
   Insn 219: point = 340
   Insn 218: point = 341
   Insn 217: point = 343
   Insn 216: point = 345
   Insn 215: point = 347
   Insn 214: point = 348
   Insn 213: point = 350
   Insn 212: point = 351
   Insn 211: point = 353
   Insn 210: point = 355
   Insn 209: point = 357
   Insn 208: point = 358
   Insn 207: point = 359
   Insn 567: point = 361
	   Creating copy r494<-r517@1
   Insn 206: point = 363
   Insn 205: point = 365
   Insn 204: point = 366
   Insn 203: point = 366
   Insn 202: point = 367
   Insn 201: point = 369
   Insn 200: point = 371
   Insn 199: point = 373
   Insn 198: point = 374
   Insn 197: point = 376
   Insn 196: point = 377
   Insn 195: point = 379
   Insn 194: point = 380
   Insn 193: point = 382
   Insn 192: point = 383
   Insn 191: point = 385
   Insn 190: point = 386
   Insn 189: point = 388
   Insn 188: point = 390
   Insn 187: point = 392
   Insn 566: point = 394
	Hard reg 1 is preferable by r493 with profit 1
   Insn 186: point = 396
   Insn 565: point = 396
   Insn 185: point = 397
   Insn 564: point = 398
	   Creating copy r492->r517@1
   Insn 184: point = 400
   Insn 183: point = 402
   Insn 182: point = 404
   Insn 181: point = 405
   Insn 180: point = 407
   Insn 179: point = 409
   Insn 178: point = 410
   Insn 177: point = 412
   Insn 176: point = 413
   Insn 175: point = 415
   Insn 174: point = 417
  BB 16
   Insn 326: point = 418
   Insn 325: point = 419
   Insn 579: point = 421
	   Creating copy r503<-r518@1
   Insn 324: point = 423
   Insn 323: point = 425
   Insn 322: point = 426
   Insn 321: point = 426
   Insn 320: point = 427
   Insn 319: point = 429
   Insn 318: point = 431
   Insn 317: point = 433
   Insn 316: point = 434
   Insn 315: point = 436
   Insn 314: point = 437
   Insn 313: point = 439
   Insn 312: point = 440
   Insn 311: point = 442
   Insn 310: point = 443
   Insn 309: point = 445
   Insn 308: point = 446
   Insn 307: point = 448
   Insn 306: point = 450
   Insn 305: point = 452
   Insn 578: point = 454
	Hard reg 1 is preferable by r502 with profit 1
   Insn 304: point = 456
   Insn 577: point = 456
   Insn 303: point = 457
   Insn 576: point = 458
	   Creating copy r501->r518@1
   Insn 302: point = 460
   Insn 301: point = 462
   Insn 300: point = 464
   Insn 299: point = 465
   Insn 298: point = 467
   Insn 297: point = 469
   Insn 296: point = 471
   Insn 295: point = 472
   Insn 294: point = 474
   Insn 293: point = 475
   Insn 292: point = 477
   Insn 291: point = 479
   Insn 290: point = 481
   Insn 289: point = 482
   Insn 288: point = 483
   Insn 575: point = 485
	   Creating copy r500<-r519@1
   Insn 287: point = 487
   Insn 286: point = 489
   Insn 285: point = 490
   Insn 284: point = 490
   Insn 283: point = 491
   Insn 282: point = 493
   Insn 281: point = 495
   Insn 280: point = 497
   Insn 279: point = 498
   Insn 278: point = 500
   Insn 277: point = 501
   Insn 276: point = 503
   Insn 275: point = 504
   Insn 274: point = 506
   Insn 273: point = 507
   Insn 272: point = 509
   Insn 271: point = 510
   Insn 270: point = 512
   Insn 269: point = 514
   Insn 268: point = 516
   Insn 574: point = 518
	Hard reg 1 is preferable by r499 with profit 1
   Insn 267: point = 520
   Insn 573: point = 520
   Insn 266: point = 521
   Insn 572: point = 522
	   Creating copy r498->r519@1
   Insn 265: point = 524
   Insn 264: point = 526
   Insn 263: point = 528
   Insn 262: point = 529
   Insn 261: point = 531
   Insn 260: point = 533
   Insn 259: point = 534
   Insn 258: point = 536
   Insn 257: point = 537
   Insn 256: point = 539
   Insn 255: point = 541
  BB 15
   Insn 253: point = 542
   Insn 252: point = 542
   Insn 251: point = 543
   Insn 250: point = 545
  BB 13
   Insn 172: point = 546
   Insn 171: point = 546
   Insn 170: point = 547
   Insn 169: point = 549
  BB 12
   Insn 167: point = 550
   Insn 166: point = 550
   Insn 165: point = 551
   Insn 164: point = 553
  BB 10
   Insn 156: point = 554
  BB 9
   Insn 151: point = 554
   Insn 150: point = 554
   Insn 149: point = 555
  BB 8
   Insn 148: point = 557
   Insn 147: point = 557
   Insn 146: point = 558
   Insn 145: point = 559
   Insn 144: point = 561
  BB 7
   Insn 141: point = 562
   Insn 140: point = 563
   Insn 139: point = 565
   Insn 138: point = 567
   Insn 137: point = 569
   Insn 136: point = 570
   Insn 135: point = 572
   Insn 134: point = 574
   Insn 133: point = 575
   Insn 132: point = 577
   Insn 131: point = 579
   Insn 130: point = 581
   Insn 129: point = 583
   Insn 128: point = 585
   Insn 563: point = 587
	Hard reg 1 is preferable by r491 with profit 1
   Insn 127: point = 589
   Insn 562: point = 589
   Insn 126: point = 590
   Insn 125: point = 592
   Insn 124: point = 594
   Insn 123: point = 595
   Insn 122: point = 597
   Insn 121: point = 598
   Insn 120: point = 600
   Insn 119: point = 602
   Insn 118: point = 603
   Insn 117: point = 603
   Insn 116: point = 604
   Insn 115: point = 606
   Insn 114: point = 608
   Insn 113: point = 609
   Insn 112: point = 611
   Insn 111: point = 612
   Insn 110: point = 613
   Insn 109: point = 615
   Insn 108: point = 617
   Insn 107: point = 618
   Insn 106: point = 620
   Insn 105: point = 622
   Insn 104: point = 624
   Insn 103: point = 625
   Insn 102: point = 626
   Insn 101: point = 628
   Insn 100: point = 630
   Insn 99: point = 631
   Insn 98: point = 633
   Insn 97: point = 635
   Insn 96: point = 637
   Insn 95: point = 639
  BB 6
   Insn 93: point = 640
   Insn 92: point = 640
   Insn 91: point = 641
   Insn 90: point = 643
   Insn 89: point = 645
  BB 5
   Insn 87: point = 646
   Insn 86: point = 646
   Insn 85: point = 647
   Insn 84: point = 649
  BB 4
   Insn 81: point = 650
   Insn 80: point = 651
   Insn 79: point = 652
   Insn 78: point = 654
   Insn 77: point = 656
   Insn 76: point = 658
   Insn 75: point = 659
   Insn 74: point = 661
   Insn 73: point = 663
   Insn 72: point = 664
   Insn 71: point = 666
   Insn 70: point = 668
   Insn 69: point = 670
   Insn 68: point = 672
   Insn 67: point = 674
   Insn 561: point = 676
	Hard reg 1 is preferable by r490 with profit 1
   Insn 66: point = 678
   Insn 560: point = 678
   Insn 65: point = 679
   Insn 64: point = 681
   Insn 63: point = 683
   Insn 62: point = 684
   Insn 61: point = 686
   Insn 60: point = 687
   Insn 59: point = 689
   Insn 58: point = 691
   Insn 57: point = 692
   Insn 56: point = 692
   Insn 55: point = 693
   Insn 54: point = 695
   Insn 53: point = 697
   Insn 52: point = 698
   Insn 51: point = 699
   Insn 50: point = 701
   Insn 49: point = 703
   Insn 48: point = 704
   Insn 47: point = 706
   Insn 46: point = 708
   Insn 45: point = 710
   Insn 44: point = 711
   Insn 43: point = 712
   Insn 42: point = 714
   Insn 41: point = 716
   Insn 40: point = 717
   Insn 39: point = 719
   Insn 38: point = 721
   Insn 37: point = 723
   Insn 36: point = 725
  BB 3
   Insn 34: point = 726
   Insn 33: point = 726
   Insn 32: point = 727
   Insn 31: point = 729
  BB 2
   Insn 29: point = 730
   Insn 28: point = 730
   Insn 27: point = 731
   Insn 26: point = 733
   Insn 25: point = 734
   Insn 24: point = 735
   Insn 23: point = 737
   Insn 22: point = 738
   Insn 21: point = 740
   Insn 20: point = 741
   Insn 559: point = 742
	Hard reg 21 is preferable by r489 with profit 1
   Insn 19: point = 744
   Insn 558: point = 745
	Hard reg 21 is preferable by r489 with profit 1
	Hard reg 22 is preferable by r489 with profit 1
   Insn 18: point = 747
   Insn 17: point = 749
   Insn 16: point = 751
   Insn 15: point = 752
   Insn 14: point = 754
   Insn 13: point = 755
   Insn 12: point = 756
   Insn 11: point = 757
   Insn 10: point = 758
   Insn 9: point = 759
   Insn 5: point = 759
   Insn 4: point = 759
   Insn 3: point = 759
   Insn 2: point = 759
 r87: [746..752]
 r88: [748..749]
 r89: [744..747]
 r90: [736..738]
 r91: [730..731]
 r92: [726..727]
 r93: [722..723]
 r94: [720..721]
 r95: [718..719]
 r96: [715..717]
 r97: [713..714]
 r98: [707..708]
 r99: [705..706]
 r100: [702..704]
 r101: [700..701]
 r102: [694..695]
 r103: [692..693]
 r104: [690..691]
 r105: [688..689]
 r106: [685..687]
 r107: [655..684]
 r108: [680..681]
 r109: [675..679]
 r110: [669..670]
 r111: [667..668]
 r112: [665..666]
 r113: [662..664]
 r114: [660..661]
 r115: [657..659]
 r116: [655..656]
 r117: [653..654]
 r118: [650..652]
 r119: [646..647]
 r120: [642..643]
 r121: [640..641]
 r122: [636..637]
 r123: [634..635]
 r124: [632..633]
 r125: [629..631]
 r126: [627..628]
 r127: [621..622]
 r128: [619..620]
 r129: [616..618]
 r130: [614..615]
 r131: [562..609]
 r132: [605..606]
 r133: [603..604]
 r134: [601..602]
 r135: [599..600]
 r136: [596..598]
 r137: [566..595]
 r138: [591..592]
 r139: [586..590]
 r140: [580..581]
 r141: [578..579]
 r142: [576..577]
 r143: [573..575]
 r144: [571..572]
 r145: [568..570]
 r146: [566..567]
 r147: [564..565]
 r148: [562..563]
 r149: [554..559]
 r150: [290..291]
 r151: [288..289]
 r152: [550..551]
 r153: [546..547]
 r154: [414..415]
 r155: [411..413]
 r156: [358..410]
 r157: [406..407]
 r158: [403..405]
 r159: [401..402]
 r161: [387..388]
 r162: [384..386]
 r163: [384..385]
 r164: [381..383]
 r165: [381..382]
 r166: [378..380]
 r167: [375..377]
 r168: [368..374]
 r169: [370..371]
 r170: [368..369]
 r171: [366..367]
 r172: [364..365]
 r173: [360..363]
 r174: [358..359]
 r175: [354..355]
 r176: [352..353]
 r177: [349..351]
 r178: [294..348]
 r179: [344..345]
 r180: [342..343]
 r181: [339..341]
 r182: [337..338]
 r184: [323..324]
 r185: [320..322]
 r186: [320..321]
 r187: [317..319]
 r188: [317..318]
 r189: [314..316]
 r190: [311..313]
 r191: [304..310]
 r192: [306..307]
 r193: [304..305]
 r194: [302..303]
 r195: [300..301]
 r196: [296..299]
 r197: [294..295]
 r198: [542..543]
 r199: [538..539]
 r200: [535..537]
 r201: [482..534]
 r202: [530..531]
 r203: [527..529]
 r204: [525..526]
 r206: [511..512]
 r207: [508..510]
 r208: [508..509]
 r209: [505..507]
 r210: [505..506]
 r211: [502..504]
 r212: [499..501]
 r213: [492..498]
 r214: [494..495]
 r215: [492..493]
 r216: [490..491]
 r217: [488..489]
 r218: [484..487]
 r219: [482..483]
 r220: [478..479]
 r221: [476..477]
 r222: [473..475]
 r223: [418..472]
 r224: [468..469]
 r225: [466..467]
 r226: [463..465]
 r227: [461..462]
 r229: [447..448]
 r230: [444..446]
 r231: [444..445]
 r232: [441..443]
 r233: [441..442]
 r234: [438..440]
 r235: [435..437]
 r236: [428..434]
 r237: [430..431]
 r238: [428..429]
 r239: [426..427]
 r240: [424..425]
 r241: [420..423]
 r242: [418..419]
 r243: [284..285]
 r244: [278..283]
 r245: [6..7]
 r246: [4..5]
 r247: [274..275]
 r248: [270..271]
 r249: [134..135]
 r250: [131..133]
 r251: [76..130]
 r252: [126..127]
 r253: [123..125]
 r254: [121..122]
 r256: [107..108]
 r257: [104..106]
 r258: [104..105]
 r259: [101..103]
 r260: [101..102]
 r261: [98..100]
 r262: [95..97]
 r263: [86..94]
 r264: [90..91]
 r265: [88..89]
 r266: [86..87]
 r267: [84..85]
 r268: [82..83]
 r269: [78..81]
 r270: [76..77]
 r271: [72..73]
 r272: [70..71]
 r273: [67..69]
 r274: [10..66]
 r275: [62..63]
 r276: [60..61]
 r277: [57..59]
 r278: [55..56]
 r280: [41..42]
 r281: [38..40]
 r282: [38..39]
 r283: [35..37]
 r284: [35..36]
 r285: [32..34]
 r286: [29..31]
 r287: [20..28]
 r288: [24..25]
 r289: [22..23]
 r290: [20..21]
 r291: [18..19]
 r292: [16..17]
 r293: [12..15]
 r294: [10..11]
 r295: [266..267]
 r296: [262..263]
 r297: [259..261]
 r298: [204..258]
 r299: [254..255]
 r300: [251..253]
 r301: [249..250]
 r303: [235..236]
 r304: [232..234]
 r305: [232..233]
 r306: [229..231]
 r307: [229..230]
 r308: [226..228]
 r309: [223..225]
 r310: [214..222]
 r311: [218..219]
 r312: [216..217]
 r313: [214..215]
 r314: [212..213]
 r315: [210..211]
 r316: [206..209]
 r317: [204..205]
 r318: [200..201]
 r319: [198..199]
 r320: [195..197]
 r321: [138..194]
 r322: [190..191]
 r323: [188..189]
 r324: [185..187]
 r325: [183..184]
 r327: [169..170]
 r328: [166..168]
 r329: [166..167]
 r330: [163..165]
 r331: [163..164]
 r332: [160..162]
 r333: [157..159]
 r334: [148..156]
 r335: [152..153]
 r336: [150..151]
 r337: [148..149]
 r338: [146..147]
 r339: [144..145]
 r340: [140..143]
 r341: [138..139]
 r342: [2..3]
 r343: [0..1]
 r344: [757..758]
 r345: [755..756]
 r346: [753..754]
 r347: [750..751]
 r348: [741..742]
 r349: [739..740]
 r350: [734..735]
 r351: [736..737]
 r352: [732..733]
 r353: [728..729]
 r354: [724..725]
 r355: [715..716]
 r356: [711..712]
 r357: [709..710]
 r358: [702..703]
 r359: [698..699]
 r360: [696..697]
 r361: [685..686]
 r362: [682..683]
 r363: [675..676]
 r364: [673..674]
 r365: [671..672]
 r366: [662..663]
 r367: [657..658]
 r368: [650..651]
 r369: [648..649]
 r370: [644..645]
 r371: [638..639]
 r372: [629..630]
 r373: [625..626]
 r374: [623..624]
 r375: [616..617]
 r376: [612..613]
 r377: [610..611]
 r378: [607..608]
 r379: [596..597]
 r380: [593..594]
 r381: [586..587]
 r382: [584..585]
 r383: [582..583]
 r384: [573..574]
 r385: [568..569]
 r386: [560..561]
 r387: [557..558]
 r388: [554..555]
 r389: [292..293]
 r390: [552..553]
 r391: [548..549]
 r392: [416..417]
 r393: [411..412]
 r394: [408..409]
 r395: [403..404]
 r396: [393..397]
 r397: [393..394]
 r398: [391..392]
 r399: [389..390]
 r400: [378..379]
 r401: [375..376]
 r402: [372..373]
 r403: [356..357]
 r404: [349..350]
 r405: [346..347]
 r406: [339..340]
 r407: [329..333]
 r408: [329..330]
 r409: [327..328]
 r410: [325..326]
 r411: [314..315]
 r412: [311..312]
 r413: [308..309]
 r414: [544..545]
 r415: [540..541]
 r416: [535..536]
 r417: [532..533]
 r418: [527..528]
 r419: [517..521]
 r420: [517..518]
 r421: [515..516]
 r422: [513..514]
 r423: [502..503]
 r424: [499..500]
 r425: [496..497]
 r426: [480..481]
 r427: [473..474]
 r428: [470..471]
 r429: [463..464]
 r430: [453..457]
 r431: [453..454]
 r432: [451..452]
 r433: [449..450]
 r434: [438..439]
 r435: [435..436]
 r436: [432..433]
 r437: [286..287]
 r438: [281..282]
 r439: [278..279]
 r440: [8..9]
 r441: [276..277]
 r442: [272..273]
 r443: [136..137]
 r444: [131..132]
 r445: [128..129]
 r446: [123..124]
 r447: [113..117]
 r448: [113..114]
 r449: [111..112]
 r450: [109..110]
 r451: [98..99]
 r452: [95..96]
 r453: [92..93]
 r454: [74..75]
 r455: [67..68]
 r456: [64..65]
 r457: [57..58]
 r458: [47..51]
 r459: [47..48]
 r460: [45..46]
 r461: [43..44]
 r462: [32..33]
 r463: [29..30]
 r464: [26..27]
 r465: [268..269]
 r466: [264..265]
 r467: [259..260]
 r468: [256..257]
 r469: [251..252]
 r470: [241..245]
 r471: [241..242]
 r472: [239..240]
 r473: [237..238]
 r474: [226..227]
 r475: [223..224]
 r476: [220..221]
 r477: [202..203]
 r478: [195..196]
 r479: [192..193]
 r480: [185..186]
 r481: [175..179]
 r482: [175..176]
 r483: [173..174]
 r484: [171..172]
 r485: [160..161]
 r486: [157..158]
 r487: [154..155]
 r489: [743..745]
 r490: [677..678]
 r491: [588..589]
 r492: [399..400]
 r493: [395..396]
 r494: [360..361]
 r495: [335..336]
 r496: [331..332]
 r497: [296..297]
 r498: [523..524]
 r499: [519..520]
 r500: [484..485]
 r501: [459..460]
 r502: [455..456]
 r503: [420..421]
 r504: [119..120]
 r505: [115..116]
 r506: [78..79]
 r507: [53..54]
 r508: [49..50]
 r509: [12..13]
 r510: [247..248]
 r511: [243..244]
 r512: [206..207]
 r513: [181..182]
 r514: [177..178]
 r515: [140..141]
 r516: [298..334]
 r517: [362..398]
 r518: [422..458]
 r519: [486..522]
 r520: [14..52]
 r521: [80..118]
 r522: [142..180]
 r523: [208..246]
Compressing live ranges: from 759 to 656 - 86%
Ranges after the compression:
 r87: [644..649]
 r88: [646..647]
 r89: [642..645]
 r90: [636..637]
 r91: [630..631]
 r92: [626..627]
 r93: [622..623]
 r94: [620..621]
 r95: [618..619]
 r96: [616..617]
 r97: [614..615]
 r98: [608..609]
 r99: [606..607]
 r100: [604..605]
 r101: [602..603]
 r102: [596..597]
 r103: [594..595]
 r104: [592..593]
 r105: [590..591]
 r106: [588..589]
 r107: [562..587]
 r108: [584..585]
 r109: [580..583]
 r110: [574..575]
 r111: [572..573]
 r112: [570..571]
 r113: [568..569]
 r114: [566..567]
 r115: [564..565]
 r116: [562..563]
 r117: [560..561]
 r118: [558..559]
 r119: [554..555]
 r120: [550..551]
 r121: [548..549]
 r122: [544..545]
 r123: [542..543]
 r124: [540..541]
 r125: [538..539]
 r126: [536..537]
 r127: [530..531]
 r128: [528..529]
 r129: [526..527]
 r130: [524..525]
 r131: [478..519]
 r132: [516..517]
 r133: [514..515]
 r134: [512..513]
 r135: [510..511]
 r136: [508..509]
 r137: [482..507]
 r138: [504..505]
 r139: [500..503]
 r140: [494..495]
 r141: [492..493]
 r142: [490..491]
 r143: [488..489]
 r144: [486..487]
 r145: [484..485]
 r146: [482..483]
 r147: [480..481]
 r148: [478..479]
 r149: [472..475]
 r150: [248..249]
 r151: [246..247]
 r152: [468..469]
 r153: [464..465]
 r154: [352..353]
 r155: [350..351]
 r156: [306..349]
 r157: [346..347]
 r158: [344..345]
 r159: [342..343]
 r161: [330..331]
 r162: [328..329]
 r163: [328..329]
 r164: [326..327]
 r165: [326..327]
 r166: [324..325]
 r167: [322..323]
 r168: [316..321]
 r169: [318..319]
 r170: [316..317]
 r171: [314..315]
 r172: [312..313]
 r173: [308..311]
 r174: [306..307]
 r175: [302..303]
 r176: [300..301]
 r177: [298..299]
 r178: [252..297]
 r179: [294..295]
 r180: [292..293]
 r181: [290..291]
 r182: [288..289]
 r184: [276..277]
 r185: [274..275]
 r186: [274..275]
 r187: [272..273]
 r188: [272..273]
 r189: [270..271]
 r190: [268..269]
 r191: [262..267]
 r192: [264..265]
 r193: [262..263]
 r194: [260..261]
 r195: [258..259]
 r196: [254..257]
 r197: [252..253]
 r198: [460..461]
 r199: [456..457]
 r200: [454..455]
 r201: [410..453]
 r202: [450..451]
 r203: [448..449]
 r204: [446..447]
 r206: [434..435]
 r207: [432..433]
 r208: [432..433]
 r209: [430..431]
 r210: [430..431]
 r211: [428..429]
 r212: [426..427]
 r213: [420..425]
 r214: [422..423]
 r215: [420..421]
 r216: [418..419]
 r217: [416..417]
 r218: [412..415]
 r219: [410..411]
 r220: [406..407]
 r221: [404..405]
 r222: [402..403]
 r223: [356..401]
 r224: [398..399]
 r225: [396..397]
 r226: [394..395]
 r227: [392..393]
 r229: [380..381]
 r230: [378..379]
 r231: [378..379]
 r232: [376..377]
 r233: [376..377]
 r234: [374..375]
 r235: [372..373]
 r236: [366..371]
 r237: [368..369]
 r238: [366..367]
 r239: [364..365]
 r240: [362..363]
 r241: [358..361]
 r242: [356..357]
 r243: [242..243]
 r244: [238..241]
 r245: [6..7]
 r246: [4..5]
 r247: [234..235]
 r248: [230..231]
 r249: [114..115]
 r250: [112..113]
 r251: [66..111]
 r252: [108..109]
 r253: [106..107]
 r254: [104..105]
 r256: [92..93]
 r257: [90..91]
 r258: [90..91]
 r259: [88..89]
 r260: [88..89]
 r261: [86..87]
 r262: [84..85]
 r263: [76..83]
 r264: [80..81]
 r265: [78..79]
 r266: [76..77]
 r267: [74..75]
 r268: [72..73]
 r269: [68..71]
 r270: [66..67]
 r271: [62..63]
 r272: [60..61]
 r273: [58..59]
 r274: [10..57]
 r275: [54..55]
 r276: [52..53]
 r277: [50..51]
 r278: [48..49]
 r280: [36..37]
 r281: [34..35]
 r282: [34..35]
 r283: [32..33]
 r284: [32..33]
 r285: [30..31]
 r286: [28..29]
 r287: [20..27]
 r288: [24..25]
 r289: [22..23]
 r290: [20..21]
 r291: [18..19]
 r292: [16..17]
 r293: [12..15]
 r294: [10..11]
 r295: [226..227]
 r296: [222..223]
 r297: [220..221]
 r298: [174..219]
 r299: [216..217]
 r300: [214..215]
 r301: [212..213]
 r303: [200..201]
 r304: [198..199]
 r305: [198..199]
 r306: [196..197]
 r307: [196..197]
 r308: [194..195]
 r309: [192..193]
 r310: [184..191]
 r311: [188..189]
 r312: [186..187]
 r313: [184..185]
 r314: [182..183]
 r315: [180..181]
 r316: [176..179]
 r317: [174..175]
 r318: [170..171]
 r319: [168..169]
 r320: [166..167]
 r321: [118..165]
 r322: [162..163]
 r323: [160..161]
 r324: [158..159]
 r325: [156..157]
 r327: [144..145]
 r328: [142..143]
 r329: [142..143]
 r330: [140..141]
 r331: [140..141]
 r332: [138..139]
 r333: [136..137]
 r334: [128..135]
 r335: [132..133]
 r336: [130..131]
 r337: [128..129]
 r338: [126..127]
 r339: [124..125]
 r340: [120..123]
 r341: [118..119]
 r342: [2..3]
 r343: [0..1]
 r344: [654..655]
 r345: [652..653]
 r346: [650..651]
 r347: [648..649]
 r348: [640..641]
 r349: [638..639]
 r350: [634..635]
 r351: [636..637]
 r352: [632..633]
 r353: [628..629]
 r354: [624..625]
 r355: [616..617]
 r356: [612..613]
 r357: [610..611]
 r358: [604..605]
 r359: [600..601]
 r360: [598..599]
 r361: [588..589]
 r362: [586..587]
 r363: [580..581]
 r364: [578..579]
 r365: [576..577]
 r366: [568..569]
 r367: [564..565]
 r368: [558..559]
 r369: [556..557]
 r370: [552..553]
 r371: [546..547]
 r372: [538..539]
 r373: [534..535]
 r374: [532..533]
 r375: [526..527]
 r376: [522..523]
 r377: [520..521]
 r378: [518..519]
 r379: [508..509]
 r380: [506..507]
 r381: [500..501]
 r382: [498..499]
 r383: [496..497]
 r384: [488..489]
 r385: [484..485]
 r386: [476..477]
 r387: [474..475]
 r388: [472..473]
 r389: [250..251]
 r390: [470..471]
 r391: [466..467]
 r392: [354..355]
 r393: [350..351]
 r394: [348..349]
 r395: [344..345]
 r396: [336..339]
 r397: [336..337]
 r398: [334..335]
 r399: [332..333]
 r400: [324..325]
 r401: [322..323]
 r402: [320..321]
 r403: [304..305]
 r404: [298..299]
 r405: [296..297]
 r406: [290..291]
 r407: [282..285]
 r408: [282..283]
 r409: [280..281]
 r410: [278..279]
 r411: [270..271]
 r412: [268..269]
 r413: [266..267]
 r414: [462..463]
 r415: [458..459]
 r416: [454..455]
 r417: [452..453]
 r418: [448..449]
 r419: [440..443]
 r420: [440..441]
 r421: [438..439]
 r422: [436..437]
 r423: [428..429]
 r424: [426..427]
 r425: [424..425]
 r426: [408..409]
 r427: [402..403]
 r428: [400..401]
 r429: [394..395]
 r430: [386..389]
 r431: [386..387]
 r432: [384..385]
 r433: [382..383]
 r434: [374..375]
 r435: [372..373]
 r436: [370..371]
 r437: [244..245]
 r438: [240..241]
 r439: [238..239]
 r440: [8..9]
 r441: [236..237]
 r442: [232..233]
 r443: [116..117]
 r444: [112..113]
 r445: [110..111]
 r446: [106..107]
 r447: [98..101]
 r448: [98..99]
 r449: [96..97]
 r450: [94..95]
 r451: [86..87]
 r452: [84..85]
 r453: [82..83]
 r454: [64..65]
 r455: [58..59]
 r456: [56..57]
 r457: [50..51]
 r458: [42..45]
 r459: [42..43]
 r460: [40..41]
 r461: [38..39]
 r462: [30..31]
 r463: [28..29]
 r464: [26..27]
 r465: [228..229]
 r466: [224..225]
 r467: [220..221]
 r468: [218..219]
 r469: [214..215]
 r470: [206..209]
 r471: [206..207]
 r472: [204..205]
 r473: [202..203]
 r474: [194..195]
 r475: [192..193]
 r476: [190..191]
 r477: [172..173]
 r478: [166..167]
 r479: [164..165]
 r480: [158..159]
 r481: [150..153]
 r482: [150..151]
 r483: [148..149]
 r484: [146..147]
 r485: [138..139]
 r486: [136..137]
 r487: [134..135]
 r489: [642..643]
 r490: [582..583]
 r491: [502..503]
 r492: [340..341]
 r493: [338..339]
 r494: [308..309]
 r495: [286..287]
 r496: [284..285]
 r497: [254..255]
 r498: [444..445]
 r499: [442..443]
 r500: [412..413]
 r501: [390..391]
 r502: [388..389]
 r503: [358..359]
 r504: [102..103]
 r505: [100..101]
 r506: [68..69]
 r507: [46..47]
 r508: [44..45]
 r509: [12..13]
 r510: [210..211]
 r511: [208..209]
 r512: [176..177]
 r513: [154..155]
 r514: [152..153]
 r515: [120..121]
 r516: [256..285]
 r517: [310..339]
 r518: [360..389]
 r519: [414..443]
 r520: [14..45]
 r521: [70..101]
 r522: [122..153]
 r523: [178..209]

********** Assignment #1: **********

	 Assigning to 490 (cl=GENERAL_REGS, orig=363, freq=3, tfirst=490, tfreq=3)...
	   Assign 1 to reload r490 (freq=3)
	 Assigning to 491 (cl=GENERAL_REGS, orig=381, freq=3, tfirst=491, tfreq=3)...
	   Assign 1 to reload r491 (freq=3)
	 Assigning to 493 (cl=GENERAL_REGS, orig=397, freq=3, tfirst=493, tfreq=3)...
	   Assign 1 to reload r493 (freq=3)
	 Assigning to 496 (cl=GENERAL_REGS, orig=408, freq=3, tfirst=496, tfreq=3)...
	   Assign 1 to reload r496 (freq=3)
	 Assigning to 499 (cl=GENERAL_REGS, orig=420, freq=3, tfirst=499, tfreq=3)...
	   Assign 1 to reload r499 (freq=3)
	 Assigning to 502 (cl=GENERAL_REGS, orig=431, freq=3, tfirst=502, tfreq=3)...
	   Assign 1 to reload r502 (freq=3)
	 Assigning to 505 (cl=GENERAL_REGS, orig=448, freq=3, tfirst=505, tfreq=3)...
	   Assign 1 to reload r505 (freq=3)
	 Assigning to 508 (cl=GENERAL_REGS, orig=459, freq=3, tfirst=508, tfreq=3)...
	   Assign 1 to reload r508 (freq=3)
	 Assigning to 511 (cl=GENERAL_REGS, orig=471, freq=3, tfirst=511, tfreq=3)...
	   Assign 1 to reload r511 (freq=3)
	 Assigning to 514 (cl=GENERAL_REGS, orig=482, freq=3, tfirst=514, tfreq=3)...
	   Assign 1 to reload r514 (freq=3)
	 Assigning to 489 (cl=SSE_REGS, orig=348, freq=3, tfirst=489, tfreq=3)...
	   Assign 22 to reload r489 (freq=3)
	 Assigning to 492 (cl=ALL_SSE_REGS, orig=160, freq=2, tfirst=492, tfreq=2)...
	   Assign 24 to reload r492 (freq=2)
	Hard reg 24 is preferable by r517 with profit 1
	Hard reg 24 is preferable by r494 with profit 1
	 Assigning to 494 (cl=SSE_REGS, orig=160, freq=2, tfirst=492, tfreq=2)...
	   Assign 24 to optional reload r494 (freq=2)
	Hard reg 24 is preferable by r517 with profit 2
	 Assigning to 517 (cl=ALL_SSE_REGS, orig=160, freq=2, tfirst=492, tfreq=2)...
	 Assigning to 495 (cl=ALL_SSE_REGS, orig=183, freq=2, tfirst=495, tfreq=2)...
	   Assign 25 to reload r495 (freq=2)
	Hard reg 25 is preferable by r516 with profit 1
	Hard reg 25 is preferable by r497 with profit 1
	 Assigning to 497 (cl=SSE_REGS, orig=183, freq=2, tfirst=495, tfreq=2)...
	   Assign 25 to optional reload r497 (freq=2)
	Hard reg 25 is preferable by r516 with profit 2
	 Assigning to 516 (cl=ALL_SSE_REGS, orig=183, freq=2, tfirst=495, tfreq=2)...
	 Assigning to 498 (cl=ALL_SSE_REGS, orig=205, freq=2, tfirst=498, tfreq=2)...
	   Assign 26 to reload r498 (freq=2)
	Hard reg 26 is preferable by r519 with profit 1
	Hard reg 26 is preferable by r500 with profit 1
	 Assigning to 500 (cl=SSE_REGS, orig=205, freq=2, tfirst=498, tfreq=2)...
	   Assign 26 to optional reload r500 (freq=2)
	Hard reg 26 is preferable by r519 with profit 2
	 Assigning to 519 (cl=ALL_SSE_REGS, orig=205, freq=2, tfirst=498, tfreq=2)...
	 Assigning to 501 (cl=ALL_SSE_REGS, orig=228, freq=2, tfirst=501, tfreq=2)...
	   Assign 27 to reload r501 (freq=2)
	Hard reg 27 is preferable by r518 with profit 1
	Hard reg 27 is preferable by r503 with profit 1
	 Assigning to 503 (cl=SSE_REGS, orig=228, freq=2, tfirst=501, tfreq=2)...
	   Assign 27 to optional reload r503 (freq=2)
	Hard reg 27 is preferable by r518 with profit 2
	 Assigning to 518 (cl=ALL_SSE_REGS, orig=228, freq=2, tfirst=501, tfreq=2)...
	 Assigning to 504 (cl=ALL_SSE_REGS, orig=255, freq=2, tfirst=504, tfreq=2)...
	   Assign 28 to reload r504 (freq=2)
	Hard reg 28 is preferable by r521 with profit 1
	Hard reg 28 is preferable by r506 with profit 1
	 Assigning to 506 (cl=SSE_REGS, orig=255, freq=2, tfirst=504, tfreq=2)...
	   Assign 28 to optional reload r506 (freq=2)
	Hard reg 28 is preferable by r521 with profit 2
	 Assigning to 521 (cl=ALL_SSE_REGS, orig=255, freq=2, tfirst=504, tfreq=2)...
	 Assigning to 507 (cl=ALL_SSE_REGS, orig=279, freq=2, tfirst=507, tfreq=2)...
	   Assign 24 to reload r507 (freq=2)
	Hard reg 24 is preferable by r520 with profit 1
	Hard reg 24 is preferable by r509 with profit 1
	 Assigning to 509 (cl=SSE_REGS, orig=279, freq=2, tfirst=507, tfreq=2)...
	   Assign 24 to optional reload r509 (freq=2)
	Hard reg 24 is preferable by r520 with profit 2
	 Assigning to 520 (cl=ALL_SSE_REGS, orig=279, freq=2, tfirst=507, tfreq=2)...
	 Assigning to 510 (cl=ALL_SSE_REGS, orig=302, freq=2, tfirst=510, tfreq=2)...
	   Assign 25 to reload r510 (freq=2)
	Hard reg 25 is preferable by r523 with profit 1
	Hard reg 25 is preferable by r512 with profit 1
	 Assigning to 512 (cl=SSE_REGS, orig=302, freq=2, tfirst=510, tfreq=2)...
	   Assign 25 to optional reload r512 (freq=2)
	Hard reg 25 is preferable by r523 with profit 2
	 Assigning to 523 (cl=ALL_SSE_REGS, orig=302, freq=2, tfirst=510, tfreq=2)...
	 Assigning to 513 (cl=ALL_SSE_REGS, orig=326, freq=2, tfirst=513, tfreq=2)...
	   Assign 26 to reload r513 (freq=2)
	Hard reg 26 is preferable by r522 with profit 1
	Hard reg 26 is preferable by r515 with profit 1
	 Assigning to 515 (cl=SSE_REGS, orig=326, freq=2, tfirst=513, tfreq=2)...
	   Assign 26 to optional reload r515 (freq=2)
	Hard reg 26 is preferable by r522 with profit 2
	 Assigning to 522 (cl=ALL_SSE_REGS, orig=326, freq=2, tfirst=513, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  571: r497:SF=r183:SF
      REG_DEAD r183:SF
   Insn after restoring regs:
  568: r183:SF=r495:SF
      REG_DEAD r495:SF
   Insn after restoring regs:
  567: r494:SF=r160:SF
      REG_DEAD r160:SF
   Insn after restoring regs:
  564: r160:SF=r492:SF
      REG_DEAD r492:SF
   Insn after restoring regs:
  579: r503:SF=r228:SF
      REG_DEAD r228:SF
   Insn after restoring regs:
  576: r228:SF=r501:SF
      REG_DEAD r501:SF
   Insn after restoring regs:
  575: r500:SF=r205:SF
      REG_DEAD r205:SF
   Insn after restoring regs:
  572: r205:SF=r498:SF
      REG_DEAD r498:SF
   Insn after restoring regs:
  587: r509:SF=r279:SF
      REG_DEAD r279:SF
   Insn after restoring regs:
  584: r279:SF=r507:SF
      REG_DEAD r507:SF
   Insn after restoring regs:
  583: r506:SF=r255:SF
      REG_DEAD r255:SF
   Insn after restoring regs:
  580: r255:SF=r504:SF
      REG_DEAD r504:SF
   Insn after restoring regs:
  595: r515:SF=r326:SF
      REG_DEAD r326:SF
   Insn after restoring regs:
  592: r326:SF=r513:SF
      REG_DEAD r513:SF
   Insn after restoring regs:
  591: r512:SF=r302:SF
      REG_DEAD r302:SF
   Insn after restoring regs:
  588: r302:SF=r510:SF
      REG_DEAD r510:SF
Remove optional reload reg 494
  Restoring original insn:
  207: r174:SF=r173:SF*r160:SF
      REG_DEAD r160:SF
      REG_DEAD r173:SF
  Deleting move 567
  567: r494:SF=r160:SF
      REG_DEAD r160:SF
deleting insn with uid = 567.
Remove optional reload reg 497
  Restoring original insn:
  244: r197:SF=r196:SF*r183:SF
      REG_DEAD r183:SF
      REG_DEAD r196:SF
  Deleting move 571
  571: r497:SF=r183:SF
      REG_DEAD r183:SF
deleting insn with uid = 571.
Remove optional reload reg 500
  Restoring original insn:
  288: r219:SF=r218:SF*r205:SF
      REG_DEAD r205:SF
      REG_DEAD r218:SF
  Deleting move 575
  575: r500:SF=r205:SF
      REG_DEAD r205:SF
deleting insn with uid = 575.
Remove optional reload reg 503
  Restoring original insn:
  325: r242:SF=r241:SF*r228:SF
      REG_DEAD r228:SF
      REG_DEAD r241:SF
  Deleting move 579
  579: r503:SF=r228:SF
      REG_DEAD r228:SF
deleting insn with uid = 579.
Remove optional reload reg 506
  Restoring original insn:
  400: r270:SF=r269:SF*r255:SF
      REG_DEAD r255:SF
      REG_DEAD r269:SF
  Deleting move 583
  583: r506:SF=r255:SF
      REG_DEAD r255:SF
deleting insn with uid = 583.
Remove optional reload reg 509
  Restoring original insn:
  438: r294:SF=r293:SF*r279:SF
      REG_DEAD r279:SF
      REG_DEAD r293:SF
  Deleting move 587
  587: r509:SF=r279:SF
      REG_DEAD r279:SF
deleting insn with uid = 587.
Remove optional reload reg 512
  Restoring original insn:
  483: r317:SF=r316:SF*r302:SF
      REG_DEAD r302:SF
      REG_DEAD r316:SF
  Deleting move 591
  591: r512:SF=r302:SF
      REG_DEAD r302:SF
deleting insn with uid = 591.
Remove optional reload reg 515
  Restoring original insn:
  521: r341:SF=r340:SF*r326:SF
      REG_DEAD r326:SF
      REG_DEAD r340:SF
  Deleting move 595
  595: r515:SF=r326:SF
      REG_DEAD r326:SF
deleting insn with uid = 595.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 521:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=524 from oldreg=326, assigning class SSE_REGS to r524
      Making reload reg 524 for reg 326 optional
  521: r341:SF=r340:SF*r524:SF
      REG_DEAD r326:SF
      REG_DEAD r340:SF
    Inserting insn reload before:
  604: r524:SF=r326:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 604:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 483:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=525 from oldreg=302, assigning class SSE_REGS to r525
      Making reload reg 525 for reg 302 optional
  483: r317:SF=r316:SF*r525:SF
      REG_DEAD r302:SF
      REG_DEAD r316:SF
    Inserting insn reload before:
  605: r525:SF=r302:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 605:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 438:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=526 from oldreg=279, assigning class SSE_REGS to r526
      Making reload reg 526 for reg 279 optional
  438: r294:SF=r293:SF*r526:SF
      REG_DEAD r279:SF
      REG_DEAD r293:SF
    Inserting insn reload before:
  606: r526:SF=r279:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 606:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 400:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=527 from oldreg=255, assigning class SSE_REGS to r527
      Making reload reg 527 for reg 255 optional
  400: r270:SF=r269:SF*r527:SF
      REG_DEAD r255:SF
      REG_DEAD r269:SF
    Inserting insn reload before:
  607: r527:SF=r255:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 607:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 325:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=528 from oldreg=228, assigning class SSE_REGS to r528
      Making reload reg 528 for reg 228 optional
  325: r242:SF=r241:SF*r528:SF
      REG_DEAD r228:SF
      REG_DEAD r241:SF
    Inserting insn reload before:
  608: r528:SF=r228:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 608:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=529 from oldreg=205, assigning class SSE_REGS to r529
      Making reload reg 529 for reg 205 optional
  288: r219:SF=r218:SF*r529:SF
      REG_DEAD r205:SF
      REG_DEAD r218:SF
    Inserting insn reload before:
  609: r529:SF=r205:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 609:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 244:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=530 from oldreg=183, assigning class SSE_REGS to r530
      Making reload reg 530 for reg 183 optional
  244: r197:SF=r196:SF*r530:SF
      REG_DEAD r183:SF
      REG_DEAD r196:SF
    Inserting insn reload before:
  610: r530:SF=r183:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 610:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=531 from oldreg=160, assigning class SSE_REGS to r531
      Making reload reg 531 for reg 160 optional
  207: r174:SF=r173:SF*r531:SF
      REG_DEAD r160:SF
      REG_DEAD r173:SF
    Inserting insn reload before:
  611: r531:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 611:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=532 from oldreg=183, assigning class ALL_SSE_REGS to inheritance r532
    Original reg change 183->532 (bb14):
  568: r532:SF=r495:SF
      REG_DEAD r495:SF
    Add original<-inheritance after:
  612: r183:SF=r532:SF

    Inheritance reuse change 183->532 (bb14):
  610: r530:SF=r532:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=533 from oldreg=160, assigning class ALL_SSE_REGS to inheritance r533
    Original reg change 160->533 (bb14):
  564: r533:SF=r492:SF
      REG_DEAD r492:SF
    Add original<-inheritance after:
  613: r160:SF=r533:SF

    Inheritance reuse change 160->533 (bb14):
  611: r531:SF=r533:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   612: r183:SF=r532:SF
deleting insn with uid = 612.
	    Removing dead insn:
   613: r160:SF=r533:SF
deleting insn with uid = 613.
EBB 15
EBB 16
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=534 from oldreg=228, assigning class ALL_SSE_REGS to inheritance r534
    Original reg change 228->534 (bb16):
  576: r534:SF=r501:SF
      REG_DEAD r501:SF
    Add original<-inheritance after:
  614: r228:SF=r534:SF

    Inheritance reuse change 228->534 (bb16):
  608: r528:SF=r534:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=535 from oldreg=205, assigning class ALL_SSE_REGS to inheritance r535
    Original reg change 205->535 (bb16):
  572: r535:SF=r498:SF
      REG_DEAD r498:SF
    Add original<-inheritance after:
  615: r205:SF=r535:SF

    Inheritance reuse change 205->535 (bb16):
  609: r529:SF=r535:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   614: r228:SF=r534:SF
deleting insn with uid = 614.
	    Removing dead insn:
   615: r205:SF=r535:SF
deleting insn with uid = 615.
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=536 from oldreg=279, assigning class ALL_SSE_REGS to inheritance r536
    Original reg change 279->536 (bb24):
  584: r536:SF=r507:SF
      REG_DEAD r507:SF
    Add original<-inheritance after:
  616: r279:SF=r536:SF

    Inheritance reuse change 279->536 (bb24):
  606: r526:SF=r536:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=537 from oldreg=255, assigning class ALL_SSE_REGS to inheritance r537
    Original reg change 255->537 (bb24):
  580: r537:SF=r504:SF
      REG_DEAD r504:SF
    Add original<-inheritance after:
  617: r255:SF=r537:SF

    Inheritance reuse change 255->537 (bb24):
  607: r527:SF=r537:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   616: r279:SF=r536:SF
deleting insn with uid = 616.
	    Removing dead insn:
   617: r255:SF=r537:SF
deleting insn with uid = 617.
EBB 25
EBB 26
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=538 from oldreg=326, assigning class ALL_SSE_REGS to inheritance r538
    Original reg change 326->538 (bb26):
  592: r538:SF=r513:SF
      REG_DEAD r513:SF
    Add original<-inheritance after:
  618: r326:SF=r538:SF

    Inheritance reuse change 326->538 (bb26):
  604: r524:SF=r538:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=539 from oldreg=302, assigning class ALL_SSE_REGS to inheritance r539
    Original reg change 302->539 (bb26):
  588: r539:SF=r510:SF
      REG_DEAD r510:SF
    Add original<-inheritance after:
  619: r302:SF=r539:SF

    Inheritance reuse change 302->539 (bb26):
  605: r525:SF=r539:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   618: r326:SF=r538:SF
deleting insn with uid = 618.
	    Removing dead insn:
   619: r302:SF=r539:SF
deleting insn with uid = 619.
EBB 27
EBB 28

********** Pseudo live ranges #2: **********

  BB 28
   Insn 539: point = 0
   Insn 538: point = 0
   Insn 534: point = 1
   Insn 531: point = 3
  BB 21
   Insn 354: point = 4
   Insn 353: point = 4
   Insn 352: point = 5
   Insn 351: point = 7
   Insn 350: point = 9
  BB 27
   Insn 555: point = 10
   Insn 525: point = 10
  BB 24
   Insn 553: point = 10
   Insn 439: point = 10
   Insn 438: point = 11
   Insn 606: point = 13
	   Creating copy r526<-r536@1
   Insn 437: point = 15
   Insn 436: point = 17
   Insn 435: point = 18
   Insn 434: point = 18
   Insn 433: point = 19
   Insn 432: point = 21
   Insn 431: point = 23
   Insn 430: point = 25
   Insn 429: point = 27
   Insn 428: point = 28
   Insn 427: point = 30
   Insn 426: point = 31
   Insn 425: point = 33
   Insn 424: point = 34
   Insn 423: point = 36
   Insn 422: point = 37
   Insn 421: point = 39
   Insn 420: point = 40
   Insn 419: point = 42
   Insn 418: point = 44
   Insn 417: point = 46
   Insn 586: point = 48
	Hard reg 1 is preferable by r508 with profit 1
   Insn 416: point = 50
   Insn 585: point = 50
   Insn 415: point = 51
   Insn 584: point = 52
	   Creating copy r507->r536@1
   Insn 414: point = 54
   Insn 413: point = 56
   Insn 412: point = 58
   Insn 411: point = 59
   Insn 410: point = 61
   Insn 409: point = 63
   Insn 408: point = 65
   Insn 407: point = 66
   Insn 406: point = 68
   Insn 405: point = 69
   Insn 404: point = 71
   Insn 403: point = 73
   Insn 402: point = 75
   Insn 401: point = 76
   Insn 400: point = 77
   Insn 607: point = 79
	   Creating copy r527<-r537@1
   Insn 399: point = 81
   Insn 398: point = 83
   Insn 397: point = 84
   Insn 396: point = 84
   Insn 395: point = 85
   Insn 394: point = 87
   Insn 393: point = 89
   Insn 392: point = 91
   Insn 391: point = 93
   Insn 390: point = 94
   Insn 389: point = 96
   Insn 388: point = 97
   Insn 387: point = 99
   Insn 386: point = 100
   Insn 385: point = 102
   Insn 384: point = 103
   Insn 383: point = 105
   Insn 382: point = 106
   Insn 381: point = 108
   Insn 380: point = 110
   Insn 379: point = 112
   Insn 582: point = 114
	Hard reg 1 is preferable by r505 with profit 1
   Insn 378: point = 116
   Insn 581: point = 116
   Insn 377: point = 117
   Insn 580: point = 118
	   Creating copy r504->r537@1
   Insn 376: point = 120
   Insn 375: point = 122
   Insn 374: point = 124
   Insn 373: point = 125
   Insn 372: point = 127
   Insn 371: point = 129
   Insn 370: point = 130
   Insn 369: point = 132
   Insn 368: point = 133
   Insn 367: point = 135
   Insn 366: point = 137
  BB 26
   Insn 522: point = 138
   Insn 521: point = 139
   Insn 604: point = 141
	   Creating copy r524<-r538@1
   Insn 520: point = 143
   Insn 519: point = 145
   Insn 518: point = 146
   Insn 517: point = 146
   Insn 516: point = 147
   Insn 515: point = 149
   Insn 514: point = 151
   Insn 513: point = 153
   Insn 512: point = 155
   Insn 511: point = 156
   Insn 510: point = 158
   Insn 509: point = 159
   Insn 508: point = 161
   Insn 507: point = 162
   Insn 506: point = 164
   Insn 505: point = 165
   Insn 504: point = 167
   Insn 503: point = 168
   Insn 502: point = 170
   Insn 501: point = 172
   Insn 500: point = 174
   Insn 594: point = 176
	Hard reg 1 is preferable by r514 with profit 1
   Insn 499: point = 178
   Insn 593: point = 178
   Insn 498: point = 179
   Insn 592: point = 180
	   Creating copy r513->r538@1
   Insn 497: point = 182
   Insn 496: point = 184
   Insn 495: point = 186
   Insn 494: point = 187
   Insn 493: point = 189
   Insn 492: point = 191
   Insn 491: point = 193
   Insn 490: point = 194
   Insn 489: point = 196
   Insn 488: point = 197
   Insn 487: point = 199
   Insn 486: point = 201
   Insn 485: point = 203
   Insn 484: point = 204
   Insn 483: point = 205
   Insn 605: point = 207
	   Creating copy r525<-r539@1
   Insn 482: point = 209
   Insn 481: point = 211
   Insn 480: point = 212
   Insn 479: point = 212
   Insn 478: point = 213
   Insn 477: point = 215
   Insn 476: point = 217
   Insn 475: point = 219
   Insn 474: point = 221
   Insn 473: point = 222
   Insn 472: point = 224
   Insn 471: point = 225
   Insn 470: point = 227
   Insn 469: point = 228
   Insn 468: point = 230
   Insn 467: point = 231
   Insn 466: point = 233
   Insn 465: point = 234
   Insn 464: point = 236
   Insn 463: point = 238
   Insn 462: point = 240
   Insn 590: point = 242
	Hard reg 1 is preferable by r511 with profit 1
   Insn 461: point = 244
   Insn 589: point = 244
   Insn 460: point = 245
   Insn 588: point = 246
	   Creating copy r510->r539@1
   Insn 459: point = 248
   Insn 458: point = 250
   Insn 457: point = 252
   Insn 456: point = 253
   Insn 455: point = 255
   Insn 454: point = 257
   Insn 453: point = 258
   Insn 452: point = 260
   Insn 451: point = 261
   Insn 450: point = 263
   Insn 449: point = 265
  BB 25
   Insn 447: point = 266
   Insn 446: point = 266
   Insn 445: point = 267
   Insn 444: point = 269
  BB 23
   Insn 364: point = 270
   Insn 363: point = 270
   Insn 362: point = 271
   Insn 361: point = 273
  BB 22
   Insn 359: point = 274
   Insn 358: point = 274
   Insn 357: point = 275
   Insn 356: point = 277
  BB 20
   Insn 348: point = 278
  BB 19
   Insn 343: point = 278
   Insn 342: point = 278
   Insn 341: point = 279
  BB 18
   Insn 340: point = 281
   Insn 339: point = 281
   Insn 338: point = 282
   Insn 337: point = 283
   Insn 336: point = 285
   Insn 335: point = 287
  BB 11
   Insn 162: point = 288
   Insn 161: point = 288
   Insn 160: point = 289
   Insn 159: point = 291
   Insn 158: point = 293
  BB 17
   Insn 551: point = 294
   Insn 329: point = 294
  BB 14
   Insn 549: point = 294
   Insn 245: point = 294
   Insn 244: point = 295
   Insn 610: point = 297
	   Creating copy r530<-r532@1
   Insn 243: point = 299
   Insn 242: point = 301
   Insn 241: point = 302
   Insn 240: point = 302
   Insn 239: point = 303
   Insn 238: point = 305
   Insn 237: point = 307
   Insn 236: point = 309
   Insn 235: point = 310
   Insn 234: point = 312
   Insn 233: point = 313
   Insn 232: point = 315
   Insn 231: point = 316
   Insn 230: point = 318
   Insn 229: point = 319
   Insn 228: point = 321
   Insn 227: point = 322
   Insn 226: point = 324
   Insn 225: point = 326
   Insn 224: point = 328
   Insn 570: point = 330
	Hard reg 1 is preferable by r496 with profit 1
   Insn 223: point = 332
   Insn 569: point = 332
   Insn 222: point = 333
   Insn 568: point = 334
	   Creating copy r495->r532@1
   Insn 221: point = 336
   Insn 220: point = 338
   Insn 219: point = 340
   Insn 218: point = 341
   Insn 217: point = 343
   Insn 216: point = 345
   Insn 215: point = 347
   Insn 214: point = 348
   Insn 213: point = 350
   Insn 212: point = 351
   Insn 211: point = 353
   Insn 210: point = 355
   Insn 209: point = 357
   Insn 208: point = 358
   Insn 207: point = 359
   Insn 611: point = 361
	   Creating copy r531<-r533@1
   Insn 206: point = 363
   Insn 205: point = 365
   Insn 204: point = 366
   Insn 203: point = 366
   Insn 202: point = 367
   Insn 201: point = 369
   Insn 200: point = 371
   Insn 199: point = 373
   Insn 198: point = 374
   Insn 197: point = 376
   Insn 196: point = 377
   Insn 195: point = 379
   Insn 194: point = 380
   Insn 193: point = 382
   Insn 192: point = 383
   Insn 191: point = 385
   Insn 190: point = 386
   Insn 189: point = 388
   Insn 188: point = 390
   Insn 187: point = 392
   Insn 566: point = 394
	Hard reg 1 is preferable by r493 with profit 1
   Insn 186: point = 396
   Insn 565: point = 396
   Insn 185: point = 397
   Insn 564: point = 398
	   Creating copy r492->r533@1
   Insn 184: point = 400
   Insn 183: point = 402
   Insn 182: point = 404
   Insn 181: point = 405
   Insn 180: point = 407
   Insn 179: point = 409
   Insn 178: point = 410
   Insn 177: point = 412
   Insn 176: point = 413
   Insn 175: point = 415
   Insn 174: point = 417
  BB 16
   Insn 326: point = 418
   Insn 325: point = 419
   Insn 608: point = 421
	   Creating copy r528<-r534@1
   Insn 324: point = 423
   Insn 323: point = 425
   Insn 322: point = 426
   Insn 321: point = 426
   Insn 320: point = 427
   Insn 319: point = 429
   Insn 318: point = 431
   Insn 317: point = 433
   Insn 316: point = 434
   Insn 315: point = 436
   Insn 314: point = 437
   Insn 313: point = 439
   Insn 312: point = 440
   Insn 311: point = 442
   Insn 310: point = 443
   Insn 309: point = 445
   Insn 308: point = 446
   Insn 307: point = 448
   Insn 306: point = 450
   Insn 305: point = 452
   Insn 578: point = 454
	Hard reg 1 is preferable by r502 with profit 1
   Insn 304: point = 456
   Insn 577: point = 456
   Insn 303: point = 457
   Insn 576: point = 458
	   Creating copy r501->r534@1
   Insn 302: point = 460
   Insn 301: point = 462
   Insn 300: point = 464
   Insn 299: point = 465
   Insn 298: point = 467
   Insn 297: point = 469
   Insn 296: point = 471
   Insn 295: point = 472
   Insn 294: point = 474
   Insn 293: point = 475
   Insn 292: point = 477
   Insn 291: point = 479
   Insn 290: point = 481
   Insn 289: point = 482
   Insn 288: point = 483
   Insn 609: point = 485
	   Creating copy r529<-r535@1
   Insn 287: point = 487
   Insn 286: point = 489
   Insn 285: point = 490
   Insn 284: point = 490
   Insn 283: point = 491
   Insn 282: point = 493
   Insn 281: point = 495
   Insn 280: point = 497
   Insn 279: point = 498
   Insn 278: point = 500
   Insn 277: point = 501
   Insn 276: point = 503
   Insn 275: point = 504
   Insn 274: point = 506
   Insn 273: point = 507
   Insn 272: point = 509
   Insn 271: point = 510
   Insn 270: point = 512
   Insn 269: point = 514
   Insn 268: point = 516
   Insn 574: point = 518
	Hard reg 1 is preferable by r499 with profit 1
   Insn 267: point = 520
   Insn 573: point = 520
   Insn 266: point = 521
   Insn 572: point = 522
	   Creating copy r498->r535@1
   Insn 265: point = 524
   Insn 264: point = 526
   Insn 263: point = 528
   Insn 262: point = 529
   Insn 261: point = 531
   Insn 260: point = 533
   Insn 259: point = 534
   Insn 258: point = 536
   Insn 257: point = 537
   Insn 256: point = 539
   Insn 255: point = 541
  BB 15
   Insn 253: point = 542
   Insn 252: point = 542
   Insn 251: point = 543
   Insn 250: point = 545
  BB 13
   Insn 172: point = 546
   Insn 171: point = 546
   Insn 170: point = 547
   Insn 169: point = 549
  BB 12
   Insn 167: point = 550
   Insn 166: point = 550
   Insn 165: point = 551
   Insn 164: point = 553
  BB 10
   Insn 156: point = 554
  BB 9
   Insn 151: point = 554
   Insn 150: point = 554
   Insn 149: point = 555
  BB 8
   Insn 148: point = 557
   Insn 147: point = 557
   Insn 146: point = 558
   Insn 145: point = 559
   Insn 144: point = 561
  BB 7
   Insn 141: point = 562
   Insn 140: point = 563
   Insn 139: point = 565
   Insn 138: point = 567
   Insn 137: point = 569
   Insn 136: point = 570
   Insn 135: point = 572
   Insn 134: point = 574
   Insn 133: point = 575
   Insn 132: point = 577
   Insn 131: point = 579
   Insn 130: point = 581
   Insn 129: point = 583
   Insn 128: point = 585
   Insn 563: point = 587
	Hard reg 1 is preferable by r491 with profit 1
   Insn 127: point = 589
   Insn 562: point = 589
   Insn 126: point = 590
   Insn 125: point = 592
   Insn 124: point = 594
   Insn 123: point = 595
   Insn 122: point = 597
   Insn 121: point = 598
   Insn 120: point = 600
   Insn 119: point = 602
   Insn 118: point = 603
   Insn 117: point = 603
   Insn 116: point = 604
   Insn 115: point = 606
   Insn 114: point = 608
   Insn 113: point = 609
   Insn 112: point = 611
   Insn 111: point = 612
   Insn 110: point = 613
   Insn 109: point = 615
   Insn 108: point = 617
   Insn 107: point = 618
   Insn 106: point = 620
   Insn 105: point = 622
   Insn 104: point = 624
   Insn 103: point = 625
   Insn 102: point = 626
   Insn 101: point = 628
   Insn 100: point = 630
   Insn 99: point = 631
   Insn 98: point = 633
   Insn 97: point = 635
   Insn 96: point = 637
   Insn 95: point = 639
  BB 6
   Insn 93: point = 640
   Insn 92: point = 640
   Insn 91: point = 641
   Insn 90: point = 643
   Insn 89: point = 645
  BB 5
   Insn 87: point = 646
   Insn 86: point = 646
   Insn 85: point = 647
   Insn 84: point = 649
  BB 4
   Insn 81: point = 650
   Insn 80: point = 651
   Insn 79: point = 652
   Insn 78: point = 654
   Insn 77: point = 656
   Insn 76: point = 658
   Insn 75: point = 659
   Insn 74: point = 661
   Insn 73: point = 663
   Insn 72: point = 664
   Insn 71: point = 666
   Insn 70: point = 668
   Insn 69: point = 670
   Insn 68: point = 672
   Insn 67: point = 674
   Insn 561: point = 676
	Hard reg 1 is preferable by r490 with profit 1
   Insn 66: point = 678
   Insn 560: point = 678
   Insn 65: point = 679
   Insn 64: point = 681
   Insn 63: point = 683
   Insn 62: point = 684
   Insn 61: point = 686
   Insn 60: point = 687
   Insn 59: point = 689
   Insn 58: point = 691
   Insn 57: point = 692
   Insn 56: point = 692
   Insn 55: point = 693
   Insn 54: point = 695
   Insn 53: point = 697
   Insn 52: point = 698
   Insn 51: point = 699
   Insn 50: point = 701
   Insn 49: point = 703
   Insn 48: point = 704
   Insn 47: point = 706
   Insn 46: point = 708
   Insn 45: point = 710
   Insn 44: point = 711
   Insn 43: point = 712
   Insn 42: point = 714
   Insn 41: point = 716
   Insn 40: point = 717
   Insn 39: point = 719
   Insn 38: point = 721
   Insn 37: point = 723
   Insn 36: point = 725
  BB 3
   Insn 34: point = 726
   Insn 33: point = 726
   Insn 32: point = 727
   Insn 31: point = 729
  BB 2
   Insn 29: point = 730
   Insn 28: point = 730
   Insn 27: point = 731
   Insn 26: point = 733
   Insn 25: point = 734
   Insn 24: point = 735
   Insn 23: point = 737
   Insn 22: point = 738
   Insn 21: point = 740
   Insn 20: point = 741
   Insn 559: point = 742
	Hard reg 21 is preferable by r489 with profit 1
   Insn 19: point = 744
   Insn 558: point = 745
	Hard reg 21 is preferable by r489 with profit 1
	Hard reg 22 is preferable by r489 with profit 1
   Insn 18: point = 747
   Insn 17: point = 749
   Insn 16: point = 751
   Insn 15: point = 752
   Insn 14: point = 754
   Insn 13: point = 755
   Insn 12: point = 756
   Insn 11: point = 757
   Insn 10: point = 758
   Insn 9: point = 759
   Insn 5: point = 759
   Insn 4: point = 759
   Insn 3: point = 759
   Insn 2: point = 759
 r87: [746..752]
 r88: [748..749]
 r89: [744..747]
 r90: [736..738]
 r91: [730..731]
 r92: [726..727]
 r93: [722..723]
 r94: [720..721]
 r95: [718..719]
 r96: [715..717]
 r97: [713..714]
 r98: [707..708]
 r99: [705..706]
 r100: [702..704]
 r101: [700..701]
 r102: [694..695]
 r103: [692..693]
 r104: [690..691]
 r105: [688..689]
 r106: [685..687]
 r107: [655..684]
 r108: [680..681]
 r109: [675..679]
 r110: [669..670]
 r111: [667..668]
 r112: [665..666]
 r113: [662..664]
 r114: [660..661]
 r115: [657..659]
 r116: [655..656]
 r117: [653..654]
 r118: [650..652]
 r119: [646..647]
 r120: [642..643]
 r121: [640..641]
 r122: [636..637]
 r123: [634..635]
 r124: [632..633]
 r125: [629..631]
 r126: [627..628]
 r127: [621..622]
 r128: [619..620]
 r129: [616..618]
 r130: [614..615]
 r131: [562..609]
 r132: [605..606]
 r133: [603..604]
 r134: [601..602]
 r135: [599..600]
 r136: [596..598]
 r137: [566..595]
 r138: [591..592]
 r139: [586..590]
 r140: [580..581]
 r141: [578..579]
 r142: [576..577]
 r143: [573..575]
 r144: [571..572]
 r145: [568..570]
 r146: [566..567]
 r147: [564..565]
 r148: [562..563]
 r149: [554..559]
 r150: [290..291]
 r151: [288..289]
 r152: [550..551]
 r153: [546..547]
 r154: [414..415]
 r155: [411..413]
 r156: [358..410]
 r157: [406..407]
 r158: [403..405]
 r159: [401..402]
 r161: [387..388]
 r162: [384..386]
 r163: [384..385]
 r164: [381..383]
 r165: [381..382]
 r166: [378..380]
 r167: [375..377]
 r168: [368..374]
 r169: [370..371]
 r170: [368..369]
 r171: [366..367]
 r172: [364..365]
 r173: [360..363]
 r174: [358..359]
 r175: [354..355]
 r176: [352..353]
 r177: [349..351]
 r178: [294..348]
 r179: [344..345]
 r180: [342..343]
 r181: [339..341]
 r182: [337..338]
 r184: [323..324]
 r185: [320..322]
 r186: [320..321]
 r187: [317..319]
 r188: [317..318]
 r189: [314..316]
 r190: [311..313]
 r191: [304..310]
 r192: [306..307]
 r193: [304..305]
 r194: [302..303]
 r195: [300..301]
 r196: [296..299]
 r197: [294..295]
 r198: [542..543]
 r199: [538..539]
 r200: [535..537]
 r201: [482..534]
 r202: [530..531]
 r203: [527..529]
 r204: [525..526]
 r206: [511..512]
 r207: [508..510]
 r208: [508..509]
 r209: [505..507]
 r210: [505..506]
 r211: [502..504]
 r212: [499..501]
 r213: [492..498]
 r214: [494..495]
 r215: [492..493]
 r216: [490..491]
 r217: [488..489]
 r218: [484..487]
 r219: [482..483]
 r220: [478..479]
 r221: [476..477]
 r222: [473..475]
 r223: [418..472]
 r224: [468..469]
 r225: [466..467]
 r226: [463..465]
 r227: [461..462]
 r229: [447..448]
 r230: [444..446]
 r231: [444..445]
 r232: [441..443]
 r233: [441..442]
 r234: [438..440]
 r235: [435..437]
 r236: [428..434]
 r237: [430..431]
 r238: [428..429]
 r239: [426..427]
 r240: [424..425]
 r241: [420..423]
 r242: [418..419]
 r243: [284..285]
 r244: [278..283]
 r245: [6..7]
 r246: [4..5]
 r247: [274..275]
 r248: [270..271]
 r249: [134..135]
 r250: [131..133]
 r251: [76..130]
 r252: [126..127]
 r253: [123..125]
 r254: [121..122]
 r256: [107..108]
 r257: [104..106]
 r258: [104..105]
 r259: [101..103]
 r260: [101..102]
 r261: [98..100]
 r262: [95..97]
 r263: [86..94]
 r264: [90..91]
 r265: [88..89]
 r266: [86..87]
 r267: [84..85]
 r268: [82..83]
 r269: [78..81]
 r270: [76..77]
 r271: [72..73]
 r272: [70..71]
 r273: [67..69]
 r274: [10..66]
 r275: [62..63]
 r276: [60..61]
 r277: [57..59]
 r278: [55..56]
 r280: [41..42]
 r281: [38..40]
 r282: [38..39]
 r283: [35..37]
 r284: [35..36]
 r285: [32..34]
 r286: [29..31]
 r287: [20..28]
 r288: [24..25]
 r289: [22..23]
 r290: [20..21]
 r291: [18..19]
 r292: [16..17]
 r293: [12..15]
 r294: [10..11]
 r295: [266..267]
 r296: [262..263]
 r297: [259..261]
 r298: [204..258]
 r299: [254..255]
 r300: [251..253]
 r301: [249..250]
 r303: [235..236]
 r304: [232..234]
 r305: [232..233]
 r306: [229..231]
 r307: [229..230]
 r308: [226..228]
 r309: [223..225]
 r310: [214..222]
 r311: [218..219]
 r312: [216..217]
 r313: [214..215]
 r314: [212..213]
 r315: [210..211]
 r316: [206..209]
 r317: [204..205]
 r318: [200..201]
 r319: [198..199]
 r320: [195..197]
 r321: [138..194]
 r322: [190..191]
 r323: [188..189]
 r324: [185..187]
 r325: [183..184]
 r327: [169..170]
 r328: [166..168]
 r329: [166..167]
 r330: [163..165]
 r331: [163..164]
 r332: [160..162]
 r333: [157..159]
 r334: [148..156]
 r335: [152..153]
 r336: [150..151]
 r337: [148..149]
 r338: [146..147]
 r339: [144..145]
 r340: [140..143]
 r341: [138..139]
 r342: [2..3]
 r343: [0..1]
 r344: [757..758]
 r345: [755..756]
 r346: [753..754]
 r347: [750..751]
 r348: [741..742]
 r349: [739..740]
 r350: [734..735]
 r351: [736..737]
 r352: [732..733]
 r353: [728..729]
 r354: [724..725]
 r355: [715..716]
 r356: [711..712]
 r357: [709..710]
 r358: [702..703]
 r359: [698..699]
 r360: [696..697]
 r361: [685..686]
 r362: [682..683]
 r363: [675..676]
 r364: [673..674]
 r365: [671..672]
 r366: [662..663]
 r367: [657..658]
 r368: [650..651]
 r369: [648..649]
 r370: [644..645]
 r371: [638..639]
 r372: [629..630]
 r373: [625..626]
 r374: [623..624]
 r375: [616..617]
 r376: [612..613]
 r377: [610..611]
 r378: [607..608]
 r379: [596..597]
 r380: [593..594]
 r381: [586..587]
 r382: [584..585]
 r383: [582..583]
 r384: [573..574]
 r385: [568..569]
 r386: [560..561]
 r387: [557..558]
 r388: [554..555]
 r389: [292..293]
 r390: [552..553]
 r391: [548..549]
 r392: [416..417]
 r393: [411..412]
 r394: [408..409]
 r395: [403..404]
 r396: [393..397]
 r397: [393..394]
 r398: [391..392]
 r399: [389..390]
 r400: [378..379]
 r401: [375..376]
 r402: [372..373]
 r403: [356..357]
 r404: [349..350]
 r405: [346..347]
 r406: [339..340]
 r407: [329..333]
 r408: [329..330]
 r409: [327..328]
 r410: [325..326]
 r411: [314..315]
 r412: [311..312]
 r413: [308..309]
 r414: [544..545]
 r415: [540..541]
 r416: [535..536]
 r417: [532..533]
 r418: [527..528]
 r419: [517..521]
 r420: [517..518]
 r421: [515..516]
 r422: [513..514]
 r423: [502..503]
 r424: [499..500]
 r425: [496..497]
 r426: [480..481]
 r427: [473..474]
 r428: [470..471]
 r429: [463..464]
 r430: [453..457]
 r431: [453..454]
 r432: [451..452]
 r433: [449..450]
 r434: [438..439]
 r435: [435..436]
 r436: [432..433]
 r437: [286..287]
 r438: [281..282]
 r439: [278..279]
 r440: [8..9]
 r441: [276..277]
 r442: [272..273]
 r443: [136..137]
 r444: [131..132]
 r445: [128..129]
 r446: [123..124]
 r447: [113..117]
 r448: [113..114]
 r449: [111..112]
 r450: [109..110]
 r451: [98..99]
 r452: [95..96]
 r453: [92..93]
 r454: [74..75]
 r455: [67..68]
 r456: [64..65]
 r457: [57..58]
 r458: [47..51]
 r459: [47..48]
 r460: [45..46]
 r461: [43..44]
 r462: [32..33]
 r463: [29..30]
 r464: [26..27]
 r465: [268..269]
 r466: [264..265]
 r467: [259..260]
 r468: [256..257]
 r469: [251..252]
 r470: [241..245]
 r471: [241..242]
 r472: [239..240]
 r473: [237..238]
 r474: [226..227]
 r475: [223..224]
 r476: [220..221]
 r477: [202..203]
 r478: [195..196]
 r479: [192..193]
 r480: [185..186]
 r481: [175..179]
 r482: [175..176]
 r483: [173..174]
 r484: [171..172]
 r485: [160..161]
 r486: [157..158]
 r487: [154..155]
 r489: [743..745]
 r490: [677..678]
 r491: [588..589]
 r492: [399..400]
 r493: [395..396]
 r495: [335..336]
 r496: [331..332]
 r498: [523..524]
 r499: [519..520]
 r501: [459..460]
 r502: [455..456]
 r504: [119..120]
 r505: [115..116]
 r507: [53..54]
 r508: [49..50]
 r510: [247..248]
 r511: [243..244]
 r513: [181..182]
 r514: [177..178]
 r524: [140..141]
 r525: [206..207]
 r526: [12..13]
 r527: [78..79]
 r528: [420..421]
 r529: [484..485]
 r530: [296..297]
 r531: [360..361]
 r532: [298..334]
 r533: [362..398]
 r534: [422..458]
 r535: [486..522]
 r536: [14..52]
 r537: [80..118]
 r538: [142..180]
 r539: [208..246]
Compressing live ranges: from 759 to 656 - 86%
Ranges after the compression:
 r87: [644..649]
 r88: [646..647]
 r89: [642..645]
 r90: [636..637]
 r91: [630..631]
 r92: [626..627]
 r93: [622..623]
 r94: [620..621]
 r95: [618..619]
 r96: [616..617]
 r97: [614..615]
 r98: [608..609]
 r99: [606..607]
 r100: [604..605]
 r101: [602..603]
 r102: [596..597]
 r103: [594..595]
 r104: [592..593]
 r105: [590..591]
 r106: [588..589]
 r107: [562..587]
 r108: [584..585]
 r109: [580..583]
 r110: [574..575]
 r111: [572..573]
 r112: [570..571]
 r113: [568..569]
 r114: [566..567]
 r115: [564..565]
 r116: [562..563]
 r117: [560..561]
 r118: [558..559]
 r119: [554..555]
 r120: [550..551]
 r121: [548..549]
 r122: [544..545]
 r123: [542..543]
 r124: [540..541]
 r125: [538..539]
 r126: [536..537]
 r127: [530..531]
 r128: [528..529]
 r129: [526..527]
 r130: [524..525]
 r131: [478..519]
 r132: [516..517]
 r133: [514..515]
 r134: [512..513]
 r135: [510..511]
 r136: [508..509]
 r137: [482..507]
 r138: [504..505]
 r139: [500..503]
 r140: [494..495]
 r141: [492..493]
 r142: [490..491]
 r143: [488..489]
 r144: [486..487]
 r145: [484..485]
 r146: [482..483]
 r147: [480..481]
 r148: [478..479]
 r149: [472..475]
 r150: [248..249]
 r151: [246..247]
 r152: [468..469]
 r153: [464..465]
 r154: [352..353]
 r155: [350..351]
 r156: [306..349]
 r157: [346..347]
 r158: [344..345]
 r159: [342..343]
 r161: [330..331]
 r162: [328..329]
 r163: [328..329]
 r164: [326..327]
 r165: [326..327]
 r166: [324..325]
 r167: [322..323]
 r168: [316..321]
 r169: [318..319]
 r170: [316..317]
 r171: [314..315]
 r172: [312..313]
 r173: [308..311]
 r174: [306..307]
 r175: [302..303]
 r176: [300..301]
 r177: [298..299]
 r178: [252..297]
 r179: [294..295]
 r180: [292..293]
 r181: [290..291]
 r182: [288..289]
 r184: [276..277]
 r185: [274..275]
 r186: [274..275]
 r187: [272..273]
 r188: [272..273]
 r189: [270..271]
 r190: [268..269]
 r191: [262..267]
 r192: [264..265]
 r193: [262..263]
 r194: [260..261]
 r195: [258..259]
 r196: [254..257]
 r197: [252..253]
 r198: [460..461]
 r199: [456..457]
 r200: [454..455]
 r201: [410..453]
 r202: [450..451]
 r203: [448..449]
 r204: [446..447]
 r206: [434..435]
 r207: [432..433]
 r208: [432..433]
 r209: [430..431]
 r210: [430..431]
 r211: [428..429]
 r212: [426..427]
 r213: [420..425]
 r214: [422..423]
 r215: [420..421]
 r216: [418..419]
 r217: [416..417]
 r218: [412..415]
 r219: [410..411]
 r220: [406..407]
 r221: [404..405]
 r222: [402..403]
 r223: [356..401]
 r224: [398..399]
 r225: [396..397]
 r226: [394..395]
 r227: [392..393]
 r229: [380..381]
 r230: [378..379]
 r231: [378..379]
 r232: [376..377]
 r233: [376..377]
 r234: [374..375]
 r235: [372..373]
 r236: [366..371]
 r237: [368..369]
 r238: [366..367]
 r239: [364..365]
 r240: [362..363]
 r241: [358..361]
 r242: [356..357]
 r243: [242..243]
 r244: [238..241]
 r245: [6..7]
 r246: [4..5]
 r247: [234..235]
 r248: [230..231]
 r249: [114..115]
 r250: [112..113]
 r251: [66..111]
 r252: [108..109]
 r253: [106..107]
 r254: [104..105]
 r256: [92..93]
 r257: [90..91]
 r258: [90..91]
 r259: [88..89]
 r260: [88..89]
 r261: [86..87]
 r262: [84..85]
 r263: [76..83]
 r264: [80..81]
 r265: [78..79]
 r266: [76..77]
 r267: [74..75]
 r268: [72..73]
 r269: [68..71]
 r270: [66..67]
 r271: [62..63]
 r272: [60..61]
 r273: [58..59]
 r274: [10..57]
 r275: [54..55]
 r276: [52..53]
 r277: [50..51]
 r278: [48..49]
 r280: [36..37]
 r281: [34..35]
 r282: [34..35]
 r283: [32..33]
 r284: [32..33]
 r285: [30..31]
 r286: [28..29]
 r287: [20..27]
 r288: [24..25]
 r289: [22..23]
 r290: [20..21]
 r291: [18..19]
 r292: [16..17]
 r293: [12..15]
 r294: [10..11]
 r295: [226..227]
 r296: [222..223]
 r297: [220..221]
 r298: [174..219]
 r299: [216..217]
 r300: [214..215]
 r301: [212..213]
 r303: [200..201]
 r304: [198..199]
 r305: [198..199]
 r306: [196..197]
 r307: [196..197]
 r308: [194..195]
 r309: [192..193]
 r310: [184..191]
 r311: [188..189]
 r312: [186..187]
 r313: [184..185]
 r314: [182..183]
 r315: [180..181]
 r316: [176..179]
 r317: [174..175]
 r318: [170..171]
 r319: [168..169]
 r320: [166..167]
 r321: [118..165]
 r322: [162..163]
 r323: [160..161]
 r324: [158..159]
 r325: [156..157]
 r327: [144..145]
 r328: [142..143]
 r329: [142..143]
 r330: [140..141]
 r331: [140..141]
 r332: [138..139]
 r333: [136..137]
 r334: [128..135]
 r335: [132..133]
 r336: [130..131]
 r337: [128..129]
 r338: [126..127]
 r339: [124..125]
 r340: [120..123]
 r341: [118..119]
 r342: [2..3]
 r343: [0..1]
 r344: [654..655]
 r345: [652..653]
 r346: [650..651]
 r347: [648..649]
 r348: [640..641]
 r349: [638..639]
 r350: [634..635]
 r351: [636..637]
 r352: [632..633]
 r353: [628..629]
 r354: [624..625]
 r355: [616..617]
 r356: [612..613]
 r357: [610..611]
 r358: [604..605]
 r359: [600..601]
 r360: [598..599]
 r361: [588..589]
 r362: [586..587]
 r363: [580..581]
 r364: [578..579]
 r365: [576..577]
 r366: [568..569]
 r367: [564..565]
 r368: [558..559]
 r369: [556..557]
 r370: [552..553]
 r371: [546..547]
 r372: [538..539]
 r373: [534..535]
 r374: [532..533]
 r375: [526..527]
 r376: [522..523]
 r377: [520..521]
 r378: [518..519]
 r379: [508..509]
 r380: [506..507]
 r381: [500..501]
 r382: [498..499]
 r383: [496..497]
 r384: [488..489]
 r385: [484..485]
 r386: [476..477]
 r387: [474..475]
 r388: [472..473]
 r389: [250..251]
 r390: [470..471]
 r391: [466..467]
 r392: [354..355]
 r393: [350..351]
 r394: [348..349]
 r395: [344..345]
 r396: [336..339]
 r397: [336..337]
 r398: [334..335]
 r399: [332..333]
 r400: [324..325]
 r401: [322..323]
 r402: [320..321]
 r403: [304..305]
 r404: [298..299]
 r405: [296..297]
 r406: [290..291]
 r407: [282..285]
 r408: [282..283]
 r409: [280..281]
 r410: [278..279]
 r411: [270..271]
 r412: [268..269]
 r413: [266..267]
 r414: [462..463]
 r415: [458..459]
 r416: [454..455]
 r417: [452..453]
 r418: [448..449]
 r419: [440..443]
 r420: [440..441]
 r421: [438..439]
 r422: [436..437]
 r423: [428..429]
 r424: [426..427]
 r425: [424..425]
 r426: [408..409]
 r427: [402..403]
 r428: [400..401]
 r429: [394..395]
 r430: [386..389]
 r431: [386..387]
 r432: [384..385]
 r433: [382..383]
 r434: [374..375]
 r435: [372..373]
 r436: [370..371]
 r437: [244..245]
 r438: [240..241]
 r439: [238..239]
 r440: [8..9]
 r441: [236..237]
 r442: [232..233]
 r443: [116..117]
 r444: [112..113]
 r445: [110..111]
 r446: [106..107]
 r447: [98..101]
 r448: [98..99]
 r449: [96..97]
 r450: [94..95]
 r451: [86..87]
 r452: [84..85]
 r453: [82..83]
 r454: [64..65]
 r455: [58..59]
 r456: [56..57]
 r457: [50..51]
 r458: [42..45]
 r459: [42..43]
 r460: [40..41]
 r461: [38..39]
 r462: [30..31]
 r463: [28..29]
 r464: [26..27]
 r465: [228..229]
 r466: [224..225]
 r467: [220..221]
 r468: [218..219]
 r469: [214..215]
 r470: [206..209]
 r471: [206..207]
 r472: [204..205]
 r473: [202..203]
 r474: [194..195]
 r475: [192..193]
 r476: [190..191]
 r477: [172..173]
 r478: [166..167]
 r479: [164..165]
 r480: [158..159]
 r481: [150..153]
 r482: [150..151]
 r483: [148..149]
 r484: [146..147]
 r485: [138..139]
 r486: [136..137]
 r487: [134..135]
 r489: [642..643]
 r490: [582..583]
 r491: [502..503]
 r492: [340..341]
 r493: [338..339]
 r495: [286..287]
 r496: [284..285]
 r498: [444..445]
 r499: [442..443]
 r501: [390..391]
 r502: [388..389]
 r504: [102..103]
 r505: [100..101]
 r507: [46..47]
 r508: [44..45]
 r510: [210..211]
 r511: [208..209]
 r513: [154..155]
 r514: [152..153]
 r524: [120..121]
 r525: [176..177]
 r526: [12..13]
 r527: [68..69]
 r528: [358..359]
 r529: [412..413]
 r530: [254..255]
 r531: [308..309]
 r532: [256..285]
 r533: [310..339]
 r534: [360..389]
 r535: [414..443]
 r536: [14..45]
 r537: [70..101]
 r538: [122..153]
 r539: [178..209]

********** Assignment #2: **********

	 Assigning to 524 (cl=SSE_REGS, orig=326, freq=2, tfirst=524, tfreq=2)...
	   Assign 27 to optional reload r524 (freq=2)
	Hard reg 27 is preferable by r538 with profit 1
	 Assigning to 538 (cl=ALL_SSE_REGS, orig=326, freq=2, tfirst=524, tfreq=2)...
	 Assigning to 525 (cl=SSE_REGS, orig=302, freq=2, tfirst=525, tfreq=2)...
	   Assign 28 to optional reload r525 (freq=2)
	Hard reg 28 is preferable by r539 with profit 1
	 Assigning to 539 (cl=ALL_SSE_REGS, orig=302, freq=2, tfirst=525, tfreq=2)...
	 Assigning to 526 (cl=SSE_REGS, orig=279, freq=2, tfirst=526, tfreq=2)...
	   Assign 24 to optional reload r526 (freq=2)
	Hard reg 24 is preferable by r536 with profit 1
	 Assigning to 536 (cl=ALL_SSE_REGS, orig=279, freq=2, tfirst=526, tfreq=2)...
	 Assigning to 527 (cl=SSE_REGS, orig=255, freq=2, tfirst=527, tfreq=2)...
	   Assign 25 to optional reload r527 (freq=2)
	Hard reg 25 is preferable by r537 with profit 1
	 Assigning to 537 (cl=ALL_SSE_REGS, orig=255, freq=2, tfirst=527, tfreq=2)...
	 Assigning to 528 (cl=SSE_REGS, orig=228, freq=2, tfirst=528, tfreq=2)...
	   Assign 26 to optional reload r528 (freq=2)
	Hard reg 26 is preferable by r534 with profit 1
	 Assigning to 534 (cl=ALL_SSE_REGS, orig=228, freq=2, tfirst=528, tfreq=2)...
	 Assigning to 529 (cl=SSE_REGS, orig=205, freq=2, tfirst=529, tfreq=2)...
	   Assign 27 to optional reload r529 (freq=2)
	Hard reg 27 is preferable by r535 with profit 1
	 Assigning to 535 (cl=ALL_SSE_REGS, orig=205, freq=2, tfirst=529, tfreq=2)...
	 Assigning to 530 (cl=SSE_REGS, orig=183, freq=2, tfirst=530, tfreq=2)...
	   Assign 28 to optional reload r530 (freq=2)
	Hard reg 28 is preferable by r532 with profit 1
	 Assigning to 532 (cl=ALL_SSE_REGS, orig=183, freq=2, tfirst=530, tfreq=2)...
	 Assigning to 531 (cl=SSE_REGS, orig=160, freq=2, tfirst=531, tfreq=2)...
	   Assign 24 to optional reload r531 (freq=2)
	Hard reg 24 is preferable by r533 with profit 1
	 Assigning to 533 (cl=ALL_SSE_REGS, orig=160, freq=2, tfirst=531, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  610: r530:SF=r183:SF
      REG_DEAD r183:SF
   Insn after restoring regs:
  568: r183:SF=r495:SF
      REG_DEAD r495:SF
   Insn after restoring regs:
  611: r531:SF=r160:SF
      REG_DEAD r160:SF
   Insn after restoring regs:
  564: r160:SF=r492:SF
      REG_DEAD r492:SF
   Insn after restoring regs:
  608: r528:SF=r228:SF
      REG_DEAD r228:SF
   Insn after restoring regs:
  576: r228:SF=r501:SF
      REG_DEAD r501:SF
   Insn after restoring regs:
  609: r529:SF=r205:SF
      REG_DEAD r205:SF
   Insn after restoring regs:
  572: r205:SF=r498:SF
      REG_DEAD r498:SF
   Insn after restoring regs:
  606: r526:SF=r279:SF
      REG_DEAD r279:SF
   Insn after restoring regs:
  584: r279:SF=r507:SF
      REG_DEAD r507:SF
   Insn after restoring regs:
  607: r527:SF=r255:SF
      REG_DEAD r255:SF
   Insn after restoring regs:
  580: r255:SF=r504:SF
      REG_DEAD r504:SF
   Insn after restoring regs:
  604: r524:SF=r326:SF
      REG_DEAD r326:SF
   Insn after restoring regs:
  592: r326:SF=r513:SF
      REG_DEAD r513:SF
   Insn after restoring regs:
  605: r525:SF=r302:SF
      REG_DEAD r302:SF
   Insn after restoring regs:
  588: r302:SF=r510:SF
      REG_DEAD r510:SF
Keep optional reload reg 494
Keep optional reload reg 497
Keep optional reload reg 500
Keep optional reload reg 503
Keep optional reload reg 506
Keep optional reload reg 509
Keep optional reload reg 512
Keep optional reload reg 515
Remove optional reload reg 524
  Restoring original insn:
  521: r341:SF=r340:SF*r326:SF
      REG_DEAD r326:SF
      REG_DEAD r340:SF
  Deleting move 604
  604: r524:SF=r326:SF
      REG_DEAD r326:SF
deleting insn with uid = 604.
Remove optional reload reg 525
  Restoring original insn:
  483: r317:SF=r316:SF*r302:SF
      REG_DEAD r302:SF
      REG_DEAD r316:SF
  Deleting move 605
  605: r525:SF=r302:SF
      REG_DEAD r302:SF
deleting insn with uid = 605.
Remove optional reload reg 526
  Restoring original insn:
  438: r294:SF=r293:SF*r279:SF
      REG_DEAD r279:SF
      REG_DEAD r293:SF
  Deleting move 606
  606: r526:SF=r279:SF
      REG_DEAD r279:SF
deleting insn with uid = 606.
Remove optional reload reg 527
  Restoring original insn:
  400: r270:SF=r269:SF*r255:SF
      REG_DEAD r255:SF
      REG_DEAD r269:SF
  Deleting move 607
  607: r527:SF=r255:SF
      REG_DEAD r255:SF
deleting insn with uid = 607.
Remove optional reload reg 528
  Restoring original insn:
  325: r242:SF=r241:SF*r228:SF
      REG_DEAD r228:SF
      REG_DEAD r241:SF
  Deleting move 608
  608: r528:SF=r228:SF
      REG_DEAD r228:SF
deleting insn with uid = 608.
Remove optional reload reg 529
  Restoring original insn:
  288: r219:SF=r218:SF*r205:SF
      REG_DEAD r205:SF
      REG_DEAD r218:SF
  Deleting move 609
  609: r529:SF=r205:SF
      REG_DEAD r205:SF
deleting insn with uid = 609.
Remove optional reload reg 530
  Restoring original insn:
  244: r197:SF=r196:SF*r183:SF
      REG_DEAD r183:SF
      REG_DEAD r196:SF
  Deleting move 610
  610: r530:SF=r183:SF
      REG_DEAD r183:SF
deleting insn with uid = 610.
Remove optional reload reg 531
  Restoring original insn:
  207: r174:SF=r173:SF*r160:SF
      REG_DEAD r160:SF
      REG_DEAD r173:SF
  Deleting move 611
  611: r531:SF=r160:SF
      REG_DEAD r160:SF
deleting insn with uid = 611.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 521:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 483:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 438:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 400:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 325:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 244:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 28
   Insn 539: point = 0
   Insn 538: point = 0
   Insn 534: point = 1
   Insn 531: point = 3
  BB 21
   Insn 354: point = 4
   Insn 353: point = 4
   Insn 352: point = 5
   Insn 351: point = 7
   Insn 350: point = 9
  BB 27
   Insn 555: point = 10
   Insn 525: point = 10
  BB 24
   Insn 553: point = 10
   Insn 439: point = 10
   Insn 438: point = 11
   Insn 437: point = 13
   Insn 436: point = 15
   Insn 435: point = 16
   Insn 434: point = 16
   Insn 433: point = 17
   Insn 432: point = 19
   Insn 431: point = 21
   Insn 430: point = 23
   Insn 429: point = 25
   Insn 428: point = 26
   Insn 427: point = 28
   Insn 426: point = 29
   Insn 425: point = 31
   Insn 424: point = 32
   Insn 423: point = 34
   Insn 422: point = 35
   Insn 421: point = 37
   Insn 420: point = 38
   Insn 419: point = 40
   Insn 418: point = 42
   Insn 417: point = 44
   Insn 586: point = 46
   Insn 416: point = 48
   Insn 585: point = 48
   Insn 415: point = 49
   Insn 584: point = 50
   Insn 414: point = 52
   Insn 413: point = 54
   Insn 412: point = 56
   Insn 411: point = 57
   Insn 410: point = 59
   Insn 409: point = 61
   Insn 408: point = 63
   Insn 407: point = 64
   Insn 406: point = 66
   Insn 405: point = 67
   Insn 404: point = 69
   Insn 403: point = 71
   Insn 402: point = 73
   Insn 401: point = 74
   Insn 400: point = 75
   Insn 399: point = 77
   Insn 398: point = 79
   Insn 397: point = 80
   Insn 396: point = 80
   Insn 395: point = 81
   Insn 394: point = 83
   Insn 393: point = 85
   Insn 392: point = 87
   Insn 391: point = 89
   Insn 390: point = 90
   Insn 389: point = 92
   Insn 388: point = 93
   Insn 387: point = 95
   Insn 386: point = 96
   Insn 385: point = 98
   Insn 384: point = 99
   Insn 383: point = 101
   Insn 382: point = 102
   Insn 381: point = 104
   Insn 380: point = 106
   Insn 379: point = 108
   Insn 582: point = 110
   Insn 378: point = 112
   Insn 581: point = 112
   Insn 377: point = 113
   Insn 580: point = 114
   Insn 376: point = 116
   Insn 375: point = 118
   Insn 374: point = 120
   Insn 373: point = 121
   Insn 372: point = 123
   Insn 371: point = 125
   Insn 370: point = 126
   Insn 369: point = 128
   Insn 368: point = 129
   Insn 367: point = 131
   Insn 366: point = 133
  BB 26
   Insn 522: point = 134
   Insn 521: point = 135
   Insn 520: point = 137
   Insn 519: point = 139
   Insn 518: point = 140
   Insn 517: point = 140
   Insn 516: point = 141
   Insn 515: point = 143
   Insn 514: point = 145
   Insn 513: point = 147
   Insn 512: point = 149
   Insn 511: point = 150
   Insn 510: point = 152
   Insn 509: point = 153
   Insn 508: point = 155
   Insn 507: point = 156
   Insn 506: point = 158
   Insn 505: point = 159
   Insn 504: point = 161
   Insn 503: point = 162
   Insn 502: point = 164
   Insn 501: point = 166
   Insn 500: point = 168
   Insn 594: point = 170
   Insn 499: point = 172
   Insn 593: point = 172
   Insn 498: point = 173
   Insn 592: point = 174
   Insn 497: point = 176
   Insn 496: point = 178
   Insn 495: point = 180
   Insn 494: point = 181
   Insn 493: point = 183
   Insn 492: point = 185
   Insn 491: point = 187
   Insn 490: point = 188
   Insn 489: point = 190
   Insn 488: point = 191
   Insn 487: point = 193
   Insn 486: point = 195
   Insn 485: point = 197
   Insn 484: point = 198
   Insn 483: point = 199
   Insn 482: point = 201
   Insn 481: point = 203
   Insn 480: point = 204
   Insn 479: point = 204
   Insn 478: point = 205
   Insn 477: point = 207
   Insn 476: point = 209
   Insn 475: point = 211
   Insn 474: point = 213
   Insn 473: point = 214
   Insn 472: point = 216
   Insn 471: point = 217
   Insn 470: point = 219
   Insn 469: point = 220
   Insn 468: point = 222
   Insn 467: point = 223
   Insn 466: point = 225
   Insn 465: point = 226
   Insn 464: point = 228
   Insn 463: point = 230
   Insn 462: point = 232
   Insn 590: point = 234
   Insn 461: point = 236
   Insn 589: point = 236
   Insn 460: point = 237
   Insn 588: point = 238
   Insn 459: point = 240
   Insn 458: point = 242
   Insn 457: point = 244
   Insn 456: point = 245
   Insn 455: point = 247
   Insn 454: point = 249
   Insn 453: point = 250
   Insn 452: point = 252
   Insn 451: point = 253
   Insn 450: point = 255
   Insn 449: point = 257
  BB 25
   Insn 447: point = 258
   Insn 446: point = 258
   Insn 445: point = 259
   Insn 444: point = 261
  BB 23
   Insn 364: point = 262
   Insn 363: point = 262
   Insn 362: point = 263
   Insn 361: point = 265
  BB 22
   Insn 359: point = 266
   Insn 358: point = 266
   Insn 357: point = 267
   Insn 356: point = 269
  BB 20
   Insn 348: point = 270
  BB 19
   Insn 343: point = 270
   Insn 342: point = 270
   Insn 341: point = 271
  BB 18
   Insn 340: point = 273
   Insn 339: point = 273
   Insn 338: point = 274
   Insn 337: point = 275
   Insn 336: point = 277
   Insn 335: point = 279
  BB 11
   Insn 162: point = 280
   Insn 161: point = 280
   Insn 160: point = 281
   Insn 159: point = 283
   Insn 158: point = 285
  BB 17
   Insn 551: point = 286
   Insn 329: point = 286
  BB 14
   Insn 549: point = 286
   Insn 245: point = 286
   Insn 244: point = 287
   Insn 243: point = 289
   Insn 242: point = 291
   Insn 241: point = 292
   Insn 240: point = 292
   Insn 239: point = 293
   Insn 238: point = 295
   Insn 237: point = 297
   Insn 236: point = 299
   Insn 235: point = 300
   Insn 234: point = 302
   Insn 233: point = 303
   Insn 232: point = 305
   Insn 231: point = 306
   Insn 230: point = 308
   Insn 229: point = 309
   Insn 228: point = 311
   Insn 227: point = 312
   Insn 226: point = 314
   Insn 225: point = 316
   Insn 224: point = 318
   Insn 570: point = 320
   Insn 223: point = 322
   Insn 569: point = 322
   Insn 222: point = 323
   Insn 568: point = 324
   Insn 221: point = 326
   Insn 220: point = 328
   Insn 219: point = 330
   Insn 218: point = 331
   Insn 217: point = 333
   Insn 216: point = 335
   Insn 215: point = 337
   Insn 214: point = 338
   Insn 213: point = 340
   Insn 212: point = 341
   Insn 211: point = 343
   Insn 210: point = 345
   Insn 209: point = 347
   Insn 208: point = 348
   Insn 207: point = 349
   Insn 206: point = 351
   Insn 205: point = 353
   Insn 204: point = 354
   Insn 203: point = 354
   Insn 202: point = 355
   Insn 201: point = 357
   Insn 200: point = 359
   Insn 199: point = 361
   Insn 198: point = 362
   Insn 197: point = 364
   Insn 196: point = 365
   Insn 195: point = 367
   Insn 194: point = 368
   Insn 193: point = 370
   Insn 192: point = 371
   Insn 191: point = 373
   Insn 190: point = 374
   Insn 189: point = 376
   Insn 188: point = 378
   Insn 187: point = 380
   Insn 566: point = 382
   Insn 186: point = 384
   Insn 565: point = 384
   Insn 185: point = 385
   Insn 564: point = 386
   Insn 184: point = 388
   Insn 183: point = 390
   Insn 182: point = 392
   Insn 181: point = 393
   Insn 180: point = 395
   Insn 179: point = 397
   Insn 178: point = 398
   Insn 177: point = 400
   Insn 176: point = 401
   Insn 175: point = 403
   Insn 174: point = 405
  BB 16
   Insn 326: point = 406
   Insn 325: point = 407
   Insn 324: point = 409
   Insn 323: point = 411
   Insn 322: point = 412
   Insn 321: point = 412
   Insn 320: point = 413
   Insn 319: point = 415
   Insn 318: point = 417
   Insn 317: point = 419
   Insn 316: point = 420
   Insn 315: point = 422
   Insn 314: point = 423
   Insn 313: point = 425
   Insn 312: point = 426
   Insn 311: point = 428
   Insn 310: point = 429
   Insn 309: point = 431
   Insn 308: point = 432
   Insn 307: point = 434
   Insn 306: point = 436
   Insn 305: point = 438
   Insn 578: point = 440
   Insn 304: point = 442
   Insn 577: point = 442
   Insn 303: point = 443
   Insn 576: point = 444
   Insn 302: point = 446
   Insn 301: point = 448
   Insn 300: point = 450
   Insn 299: point = 451
   Insn 298: point = 453
   Insn 297: point = 455
   Insn 296: point = 457
   Insn 295: point = 458
   Insn 294: point = 460
   Insn 293: point = 461
   Insn 292: point = 463
   Insn 291: point = 465
   Insn 290: point = 467
   Insn 289: point = 468
   Insn 288: point = 469
   Insn 287: point = 471
   Insn 286: point = 473
   Insn 285: point = 474
   Insn 284: point = 474
   Insn 283: point = 475
   Insn 282: point = 477
   Insn 281: point = 479
   Insn 280: point = 481
   Insn 279: point = 482
   Insn 278: point = 484
   Insn 277: point = 485
   Insn 276: point = 487
   Insn 275: point = 488
   Insn 274: point = 490
   Insn 273: point = 491
   Insn 272: point = 493
   Insn 271: point = 494
   Insn 270: point = 496
   Insn 269: point = 498
   Insn 268: point = 500
   Insn 574: point = 502
   Insn 267: point = 504
   Insn 573: point = 504
   Insn 266: point = 505
   Insn 572: point = 506
   Insn 265: point = 508
   Insn 264: point = 510
   Insn 263: point = 512
   Insn 262: point = 513
   Insn 261: point = 515
   Insn 260: point = 517
   Insn 259: point = 518
   Insn 258: point = 520
   Insn 257: point = 521
   Insn 256: point = 523
   Insn 255: point = 525
  BB 15
   Insn 253: point = 526
   Insn 252: point = 526
   Insn 251: point = 527
   Insn 250: point = 529
  BB 13
   Insn 172: point = 530
   Insn 171: point = 530
   Insn 170: point = 531
   Insn 169: point = 533
  BB 12
   Insn 167: point = 534
   Insn 166: point = 534
   Insn 165: point = 535
   Insn 164: point = 537
  BB 10
   Insn 156: point = 538
  BB 9
   Insn 151: point = 538
   Insn 150: point = 538
   Insn 149: point = 539
  BB 8
   Insn 148: point = 541
   Insn 147: point = 541
   Insn 146: point = 542
   Insn 145: point = 543
   Insn 144: point = 545
  BB 7
   Insn 141: point = 546
   Insn 140: point = 547
   Insn 139: point = 549
   Insn 138: point = 551
   Insn 137: point = 553
   Insn 136: point = 554
   Insn 135: point = 556
   Insn 134: point = 558
   Insn 133: point = 559
   Insn 132: point = 561
   Insn 131: point = 563
   Insn 130: point = 565
   Insn 129: point = 567
   Insn 128: point = 569
   Insn 563: point = 571
   Insn 127: point = 573
   Insn 562: point = 573
   Insn 126: point = 574
   Insn 125: point = 576
   Insn 124: point = 578
   Insn 123: point = 579
   Insn 122: point = 581
   Insn 121: point = 582
   Insn 120: point = 584
   Insn 119: point = 586
   Insn 118: point = 587
   Insn 117: point = 587
   Insn 116: point = 588
   Insn 115: point = 590
   Insn 114: point = 592
   Insn 113: point = 593
   Insn 112: point = 595
   Insn 111: point = 596
   Insn 110: point = 597
   Insn 109: point = 599
   Insn 108: point = 601
   Insn 107: point = 602
   Insn 106: point = 604
   Insn 105: point = 606
   Insn 104: point = 608
   Insn 103: point = 609
   Insn 102: point = 610
   Insn 101: point = 612
   Insn 100: point = 614
   Insn 99: point = 615
   Insn 98: point = 617
   Insn 97: point = 619
   Insn 96: point = 621
   Insn 95: point = 623
  BB 6
   Insn 93: point = 624
   Insn 92: point = 624
   Insn 91: point = 625
   Insn 90: point = 627
   Insn 89: point = 629
  BB 5
   Insn 87: point = 630
   Insn 86: point = 630
   Insn 85: point = 631
   Insn 84: point = 633
  BB 4
   Insn 81: point = 634
   Insn 80: point = 635
   Insn 79: point = 636
   Insn 78: point = 638
   Insn 77: point = 640
   Insn 76: point = 642
   Insn 75: point = 643
   Insn 74: point = 645
   Insn 73: point = 647
   Insn 72: point = 648
   Insn 71: point = 650
   Insn 70: point = 652
   Insn 69: point = 654
   Insn 68: point = 656
   Insn 67: point = 658
   Insn 561: point = 660
   Insn 66: point = 662
   Insn 560: point = 662
   Insn 65: point = 663
   Insn 64: point = 665
   Insn 63: point = 667
   Insn 62: point = 668
   Insn 61: point = 670
   Insn 60: point = 671
   Insn 59: point = 673
   Insn 58: point = 675
   Insn 57: point = 676
   Insn 56: point = 676
   Insn 55: point = 677
   Insn 54: point = 679
   Insn 53: point = 681
   Insn 52: point = 682
   Insn 51: point = 683
   Insn 50: point = 685
   Insn 49: point = 687
   Insn 48: point = 688
   Insn 47: point = 690
   Insn 46: point = 692
   Insn 45: point = 694
   Insn 44: point = 695
   Insn 43: point = 696
   Insn 42: point = 698
   Insn 41: point = 700
   Insn 40: point = 701
   Insn 39: point = 703
   Insn 38: point = 705
   Insn 37: point = 707
   Insn 36: point = 709
  BB 3
   Insn 34: point = 710
   Insn 33: point = 710
   Insn 32: point = 711
   Insn 31: point = 713
  BB 2
   Insn 29: point = 714
   Insn 28: point = 714
   Insn 27: point = 715
   Insn 26: point = 717
   Insn 25: point = 718
   Insn 24: point = 719
   Insn 23: point = 721
   Insn 22: point = 722
   Insn 21: point = 724
   Insn 20: point = 725
   Insn 559: point = 726
   Insn 19: point = 728
   Insn 558: point = 729
   Insn 18: point = 731
   Insn 17: point = 733
   Insn 16: point = 735
   Insn 15: point = 736
   Insn 14: point = 738
   Insn 13: point = 739
   Insn 12: point = 740
   Insn 11: point = 741
   Insn 10: point = 742
   Insn 9: point = 743
   Insn 5: point = 743
   Insn 4: point = 743
   Insn 3: point = 743
   Insn 2: point = 743
 r160: [350..386]
 r183: [288..324]
 r205: [470..506]
 r228: [408..444]
 r255: [76..114]
 r279: [12..50]
 r302: [200..238]
 r326: [136..174]
Compressing live ranges: from 743 to 16 - 2%
Ranges after the compression:
 r160: [10..11]
 r183: [8..9]
 r205: [14..15]
 r228: [12..13]
 r255: [2..3]
 r279: [0..1]
 r302: [6..7]
 r326: [4..5]
  Slot 0 regnos (width = 4):	 160	 326	 302	 279	 255	 228	 205	 183
Changing spilled pseudos to memory in insn #564
Changing spilled pseudos to memory in insn #207
Changing spilled pseudos to memory in insn #568
Changing spilled pseudos to memory in insn #244
Changing spilled pseudos to memory in insn #572
Changing spilled pseudos to memory in insn #288
Changing spilled pseudos to memory in insn #576
Changing spilled pseudos to memory in insn #325
Changing spilled pseudos to memory in insn #580
Changing spilled pseudos to memory in insn #400
Changing spilled pseudos to memory in insn #584
Changing spilled pseudos to memory in insn #438
Changing spilled pseudos to memory in insn #588
Changing spilled pseudos to memory in insn #483
Changing spilled pseudos to memory in insn #592
Changing spilled pseudos to memory in insn #521
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #521
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #592
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 592:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #483
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #588
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 588:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #438
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #584
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 584:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #400
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #580
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 580:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #325
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #576
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 576:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #288
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #572
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 572:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #244
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #568
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 568:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #207
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #564
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 564:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 62
changing reg in insn 78
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 85
changing reg in insn 86
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 141
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 123
changing reg in insn 123
changing reg in insn 139
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 145
changing reg in insn 150
changing reg in insn 147
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 165
changing reg in insn 166
changing reg in insn 170
changing reg in insn 171
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 178
changing reg in insn 178
changing reg in insn 208
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 214
changing reg in insn 214
changing reg in insn 214
changing reg in insn 245
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 229
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 233
changing reg in insn 233
changing reg in insn 233
changing reg in insn 235
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 245
changing reg in insn 251
changing reg in insn 252
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 259
changing reg in insn 259
changing reg in insn 259
changing reg in insn 289
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 264
changing reg in insn 264
changing reg in insn 265
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 273
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 277
changing reg in insn 277
changing reg in insn 277
changing reg in insn 279
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 283
changing reg in insn 284
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 295
changing reg in insn 295
changing reg in insn 295
changing reg in insn 326
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 299
changing reg in insn 301
changing reg in insn 301
changing reg in insn 302
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 310
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 314
changing reg in insn 314
changing reg in insn 314
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 336
changing reg in insn 337
changing reg in insn 337
changing reg in insn 342
changing reg in insn 339
changing reg in insn 351
changing reg in insn 352
changing reg in insn 352
changing reg in insn 353
changing reg in insn 357
changing reg in insn 358
changing reg in insn 362
changing reg in insn 363
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 370
changing reg in insn 370
changing reg in insn 370
changing reg in insn 401
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 384
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 388
changing reg in insn 388
changing reg in insn 388
changing reg in insn 390
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 396
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 400
changing reg in insn 401
changing reg in insn 403
changing reg in insn 404
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 407
changing reg in insn 407
changing reg in insn 407
changing reg in insn 439
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 413
changing reg in insn 413
changing reg in insn 414
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 422
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 423
changing reg in insn 424
changing reg in insn 426
changing reg in insn 426
changing reg in insn 426
changing reg in insn 428
changing reg in insn 430
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 436
changing reg in insn 437
changing reg in insn 437
changing reg in insn 438
changing reg in insn 439
changing reg in insn 445
changing reg in insn 446
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 453
changing reg in insn 453
changing reg in insn 453
changing reg in insn 484
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 458
changing reg in insn 458
changing reg in insn 459
changing reg in insn 464
changing reg in insn 465
changing reg in insn 465
changing reg in insn 467
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 469
changing reg in insn 471
changing reg in insn 471
changing reg in insn 471
changing reg in insn 473
changing reg in insn 475
changing reg in insn 476
changing reg in insn 476
changing reg in insn 477
changing reg in insn 477
changing reg in insn 478
changing reg in insn 479
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 483
changing reg in insn 484
changing reg in insn 486
changing reg in insn 487
changing reg in insn 487
changing reg in insn 488
changing reg in insn 488
changing reg in insn 490
changing reg in insn 490
changing reg in insn 490
changing reg in insn 522
changing reg in insn 492
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 496
changing reg in insn 496
changing reg in insn 497
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 505
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 506
changing reg in insn 507
changing reg in insn 509
changing reg in insn 509
changing reg in insn 509
changing reg in insn 511
changing reg in insn 513
changing reg in insn 514
changing reg in insn 514
changing reg in insn 515
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 519
changing reg in insn 520
changing reg in insn 520
changing reg in insn 521
changing reg in insn 522
changing reg in insn 531
changing reg in insn 534
changing reg in insn 534
changing reg in insn 538
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 158
changing reg in insn 159
changing reg in insn 164
changing reg in insn 165
changing reg in insn 169
changing reg in insn 170
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 209
changing reg in insn 210
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 219
changing reg in insn 222
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 236
changing reg in insn 237
changing reg in insn 250
changing reg in insn 251
changing reg in insn 255
changing reg in insn 256
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 263
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 290
changing reg in insn 291
changing reg in insn 294
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 300
changing reg in insn 303
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 318
changing reg in insn 335
changing reg in insn 336
changing reg in insn 338
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 350
changing reg in insn 351
changing reg in insn 356
changing reg in insn 357
changing reg in insn 361
changing reg in insn 362
changing reg in insn 366
changing reg in insn 367
changing reg in insn 369
changing reg in insn 370
changing reg in insn 371
changing reg in insn 372
changing reg in insn 374
changing reg in insn 377
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 381
changing reg in insn 387
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 392
changing reg in insn 402
changing reg in insn 403
changing reg in insn 406
changing reg in insn 407
changing reg in insn 408
changing reg in insn 409
changing reg in insn 412
changing reg in insn 415
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 419
changing reg in insn 425
changing reg in insn 426
changing reg in insn 427
changing reg in insn 429
changing reg in insn 430
changing reg in insn 444
changing reg in insn 445
changing reg in insn 449
changing reg in insn 450
changing reg in insn 452
changing reg in insn 453
changing reg in insn 454
changing reg in insn 455
changing reg in insn 457
changing reg in insn 460
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 464
changing reg in insn 470
changing reg in insn 471
changing reg in insn 472
changing reg in insn 474
changing reg in insn 475
changing reg in insn 485
changing reg in insn 486
changing reg in insn 489
changing reg in insn 490
changing reg in insn 491
changing reg in insn 492
changing reg in insn 495
changing reg in insn 498
changing reg in insn 500
changing reg in insn 501
changing reg in insn 501
changing reg in insn 502
changing reg in insn 508
changing reg in insn 509
changing reg in insn 510
changing reg in insn 512
changing reg in insn 513
deleting insn with uid = 558.
deleting insn with uid = 56.
deleting insn with uid = 58.
deleting insn with uid = 561.
deleting insn with uid = 117.
deleting insn with uid = 119.
deleting insn with uid = 563.
deleting insn with uid = 566.
deleting insn with uid = 203.
deleting insn with uid = 205.
deleting insn with uid = 570.
deleting insn with uid = 240.
deleting insn with uid = 242.
deleting insn with uid = 574.
deleting insn with uid = 284.
deleting insn with uid = 286.
deleting insn with uid = 578.
deleting insn with uid = 321.
deleting insn with uid = 323.
deleting insn with uid = 582.
deleting insn with uid = 396.
deleting insn with uid = 398.
deleting insn with uid = 586.
deleting insn with uid = 434.
deleting insn with uid = 436.
deleting insn with uid = 590.
deleting insn with uid = 479.
deleting insn with uid = 481.
deleting insn with uid = 594.
deleting insn with uid = 517.
deleting insn with uid = 519.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 204.
verify found no changes in insn with uid = 241.
verify found no changes in insn with uid = 285.
verify found no changes in insn with uid = 322.
verify found no changes in insn with uid = 397.
verify found no changes in insn with uid = 435.
verify found no changes in insn with uid = 480.
verify found no changes in insn with uid = 518.


int filter(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={192d,192u} r1={51d,41u,20e} r2={11d,1u} r3={9d,9u} r4={11d,1u} r5={11d,1u} r6={1d,168u} r7={1d,38u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={131d,16u} r18={10d} r19={10d} r20={1d,1u,27e} r21={111d,112u,10e} r22={72d,61u,2e} r23={15d,4u} r24={13d,2u} r25={13d,2u} r26={13d,2u} r27={12d,1u} r28={12d,1u} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} 
;;    total ref usage 1974{1262d,653u,59e} in 485{475 regular + 10 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 344 345 346 347 348 349 350 351 352
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:372 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:372 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_preproc.cpp:372 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) ge2fitman_preproc.cpp:372 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:374 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SF 21 xmm0 [344])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:376 129 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [344])) ge2fitman_preproc.cpp:376 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SF 21 xmm0 [345])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:376 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [345])) ge2fitman_preproc.cpp:376 129 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SF 22 xmm1 [orig:87 D.26042 ] [87])
        (mem/j:SF (reg/f:DI 0 ax [346]) [0 procpar_info_15(D)->acquision_time+0 S4 A64])) ge2fitman_preproc.cpp:378 129 {*movsf_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 0 ax [orig:88 D.26043 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [347])
                (const_int 324 [0x144])) [0 procpar_info_15(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:378 90 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SF 21 xmm0 [orig:89 D.26042 ] [89])
        (float:SF (reg:SI 0 ax [orig:88 D.26043 ] [88]))) ge2fitman_preproc.cpp:378 199 {*floatsisf2_sse}
     (nil))
(insn 19 18 559 2 (set (reg:SF 22 xmm1 [348])
        (div:SF (reg:SF 22 xmm1 [348])
            (reg:SF 21 xmm0 [orig:89 D.26042 ] [89]))) ge2fitman_preproc.cpp:378 804 {*fop_sf_1_sse}
     (nil))
(insn 559 19 20 2 (set (reg:SF 21 xmm0 [348])
        (reg:SF 22 xmm1 [348])) ge2fitman_preproc.cpp:378 129 {*movsf_internal}
     (nil))
(insn 20 559 21 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32])
        (reg:SF 21 xmm0 [348])) ge2fitman_preproc.cpp:378 129 {*movsf_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:379 89 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SF 21 xmm0 [orig:90 D.26042 ] [90])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [349])
                (const_int 48 [0x30])) [0 preprocess_20(D)->pre_delay_time+0 S4 A32])) ge2fitman_preproc.cpp:379 129 {*movsf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SF 22 xmm1 [351])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:379 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 24 23 25 2 (set (reg:SF 21 xmm0 [350])
        (div:SF (reg:SF 21 xmm0 [orig:90 D.26042 ] [90])
            (reg:SF 22 xmm1 [351]))) ge2fitman_preproc.cpp:379 804 {*fop_sf_1_sse}
     (nil))
(insn 25 24 26 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32])
        (reg:SF 21 xmm0 [350])) ge2fitman_preproc.cpp:379 129 {*movsf_internal}
     (nil))
(insn 26 25 27 2 (set (reg/f:DI 0 ax [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:385 89 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SI 0 ax [orig:91 D.26043 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [352])
                (const_int 40 [0x28])) [0 preprocess_20(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:385 90 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 D.26043 ] [91])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:385 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 29 28 30 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) ge2fitman_preproc.cpp:385 612 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 353
(note 30 29 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 3 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:385 89 {*movdi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:SI 0 ax [orig:92 D.26043 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [353])
                (const_int 52 [0x34])) [0 preprocess_20(D)->pre_quecc_if+0 S4 A32])) ge2fitman_preproc.cpp:385 90 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.26043 ] [92])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:385 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) ge2fitman_preproc.cpp:385 612 {*jcc_1}
     (nil)
 -> 82)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368
(note 35 34 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 4 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:386 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:SI 0 ax [orig:93 D.26043 ] [93])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [354])
                (const_int 44 [0x2c])) [0 preprocess_20(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:386 90 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 0 ax [orig:94 D.26044 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.26043 ] [93]))) ge2fitman_preproc.cpp:386 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 0 ax [orig:95 D.26044 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.26044 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:386 512 {*ashldi3_1}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg:DI 1 dx [orig:96 D.26045 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 D.26044 ] [95])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:386 218 {*adddi_1}
     (nil))
(insn 41 40 42 4 (set (reg/f:DI 0 ax [355])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:386 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.26046 ] [97])
                (plus:DI (reg/f:DI 0 ax [355])
                    (reg:DI 1 dx [orig:96 D.26045 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:386 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.26045 ] [96]))
        (nil)))
(insn 43 42 44 4 (set (reg:SF 21 xmm0 [356])
        (mem:SF (reg/f:DI 0 ax [orig:97 D.26046 ] [97]) [0 *_30+0 S4 A32])) ge2fitman_preproc.cpp:386 129 {*movsf_internal}
     (nil))
(insn 44 43 45 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [356])) ge2fitman_preproc.cpp:386 129 {*movsf_internal}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:387 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SI 0 ax [orig:98 D.26043 ] [98])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [357])
                (const_int 44 [0x2c])) [0 preprocess_20(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:387 90 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:DI 0 ax [orig:99 D.26044 ] [99])
        (sign_extend:DI (reg:SI 0 ax [orig:98 D.26043 ] [98]))) ge2fitman_preproc.cpp:387 142 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 1 dx [orig:100 D.26044 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 D.26044 ] [99])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:387 512 {*ashldi3_1}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [358])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:387 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.26046 ] [101])
                (plus:DI (reg/f:DI 0 ax [358])
                    (reg:DI 1 dx [orig:100 D.26044 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:387 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.26044 ] [100]))
        (nil)))
(insn 51 50 52 4 (set (reg:SF 21 xmm0 [359])
        (mem:SF (reg/f:DI 0 ax [orig:101 D.26046 ] [101]) [0 *_35+0 S4 A32])) ge2fitman_preproc.cpp:387 129 {*movsf_internal}
     (nil))
(insn 52 51 53 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [359])) ge2fitman_preproc.cpp:387 129 {*movsf_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SF 21 xmm0 [360])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])) ge2fitman_preproc.cpp:389 129 {*movsf_internal}
     (nil))
(insn 54 53 55 4 (set (reg:SF 21 xmm0 [orig:102 D.26042 ] [102])
        (div:SF (reg:SF 21 xmm0 [360])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32]))) ge2fitman_preproc.cpp:389 804 {*fop_sf_1_sse}
     (nil))
(insn 55 54 57 4 (set (reg:DF 21 xmm0 [orig:103 D.26047 ] [103])
        (float_extend:DF (reg:SF 21 xmm0 [orig:102 D.26042 ] [102]))) ge2fitman_preproc.cpp:389 152 {*extendsfdf2_sse}
     (nil))
(call_insn 57 55 59 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x7fe357076d80 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:389 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 59 57 60 4 (set (reg:SF 21 xmm0 [orig:105 D.26042 ] [105])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:104 D.26047 ] [104]))) ge2fitman_preproc.cpp:389 157 {*truncdfsf_fast_sse}
     (nil))
(insn 60 59 61 4 (set (reg:DF 21 xmm0 [orig:106 D.26047 ] [106])
        (float_extend:DF (reg:SF 21 xmm0 [orig:105 D.26042 ] [105]))) ge2fitman_preproc.cpp:389 152 {*extendsfdf2_sse}
     (nil))
(insn 61 60 62 4 (set (reg:V2DF 22 xmm1 [361])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:389 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 62 61 63 4 (parallel [
            (set (reg:DF 21 xmm0 [orig:107 D.26047 ] [107])
                (neg:DF (reg:DF 21 xmm0 [orig:106 D.26047 ] [106])))
            (use (reg:V2DF 22 xmm1 [361]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:389 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 21 xmm0 [orig:106 D.26047 ] [106]))
        (nil)))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:390 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SI 0 ax [orig:108 D.26043 ] [108])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [362])
                (const_int 44 [0x2c])) [0 preprocess_20(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 65 64 560 4 (parallel [
            (set (reg:SI 0 ax [orig:109 D.26043 ] [109])
                (plus:SI (reg:SI 0 ax [orig:108 D.26043 ] [108])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 217 {*addsi_1}
     (nil))
(insn 560 65 66 4 (set (reg:SI 1 dx [363])
        (reg:SI 0 ax [orig:109 D.26043 ] [109])) ge2fitman_preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 66 560 67 4 (parallel [
            (set (reg:SI 1 dx [363])
                (lshiftrt:SI (reg:SI 1 dx [363])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 544 {*lshrsi3_1}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg:SI 0 ax [364])
                (plus:SI (reg:SI 0 ax [orig:109 D.26043 ] [109])
                    (reg:SI 1 dx [363])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 217 {*addsi_1}
     (nil))
(insn 68 67 69 4 (parallel [
            (set (reg:SI 0 ax [365])
                (ashiftrt:SI (reg:SI 0 ax [364])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 545 {*ashrsi3_1}
     (nil))
(insn 69 68 70 4 (set (reg:SI 0 ax [orig:110 D.26043 ] [110])
        (reg:SI 0 ax [365])) ge2fitman_preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:SF 22 xmm1 [orig:111 D.26042 ] [111])
        (float:SF (reg:SI 0 ax [orig:110 D.26043 ] [110]))) ge2fitman_preproc.cpp:390 199 {*floatsisf2_sse}
     (nil))
(insn 71 70 72 4 (set (reg:SF 22 xmm1 [orig:112 D.26042 ] [112])
        (mult:SF (reg:SF 22 xmm1 [orig:111 D.26042 ] [111])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:390 797 {*fop_sf_comm_sse}
     (nil))
(insn 72 71 73 4 (set (reg:SF 22 xmm1 [orig:113 D.26042 ] [113])
        (plus:SF (reg:SF 22 xmm1 [orig:112 D.26042 ] [112])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:390 797 {*fop_sf_comm_sse}
     (nil))
(insn 73 72 74 4 (set (reg:V4SF 23 xmm2 [366])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:390 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 74 73 75 4 (parallel [
            (set (reg:SF 22 xmm1 [orig:114 D.26042 ] [114])
                (abs:SF (reg:SF 22 xmm1 [orig:113 D.26042 ] [113])))
            (use (reg:V4SF 23 xmm2 [366]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:390 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:113 D.26042 ] [113]))
        (nil)))
(insn 75 74 76 4 (set (reg:DF 22 xmm1 [orig:115 D.26047 ] [115])
        (float_extend:DF (reg:SF 22 xmm1 [orig:114 D.26042 ] [114]))) ge2fitman_preproc.cpp:390 152 {*extendsfdf2_sse}
     (nil))
(insn 76 75 77 4 (set (reg:DF 23 xmm2 [367])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:390 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 77 76 78 4 (set (reg:DF 22 xmm1 [orig:116 D.26047 ] [116])
        (mult:DF (reg:DF 22 xmm1 [orig:115 D.26047 ] [115])
            (reg:DF 23 xmm2 [367]))) ge2fitman_preproc.cpp:390 798 {*fop_df_comm_sse}
     (nil))
(insn 78 77 79 4 (set (reg:DF 21 xmm0 [orig:117 D.26047 ] [117])
        (div:DF (reg:DF 21 xmm0 [orig:107 D.26047 ] [107])
            (reg:DF 22 xmm1 [orig:116 D.26047 ] [116]))) ge2fitman_preproc.cpp:389 805 {*fop_df_1_sse}
     (nil))
(insn 79 78 80 4 (set (reg:SF 21 xmm0 [orig:118 D.26042 ] [118])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:117 D.26047 ] [117]))) ge2fitman_preproc.cpp:390 157 {*truncdfsf_fast_sse}
     (nil))
(insn 80 79 81 4 (set (reg/f:DI 0 ax [368])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:390 89 {*movdi_internal}
     (nil))
(insn 81 80 82 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [368])
                (const_int 28 [0x1c])) [0 preprocess_20(D)->comp_filter+0 S4 A32])
        (reg:SF 21 xmm0 [orig:118 D.26042 ] [118])) ge2fitman_preproc.cpp:390 129 {*movsf_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 119 369
(code_label 82 81 83 5 85 "" [2 uses])
(note 83 82 84 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 5 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:393 89 {*movdi_internal}
     (nil))
(insn 85 84 86 5 (set (reg:SI 0 ax [orig:119 D.26043 ] [119])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [369])
                (const_int 40 [0x28])) [0 preprocess_20(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:393 90 {*movsi_internal}
     (nil))
(insn 86 85 87 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:119 D.26043 ] [119])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:393 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 87 86 88 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) ge2fitman_preproc.cpp:393 612 {*jcc_1}
     (nil)
 -> 142)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 370
(note 88 87 89 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 6 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:393 89 {*movdi_internal}
     (nil))
(insn 90 89 91 6 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.26048 ] [120])
                (plus:DI (reg/f:DI 0 ax [370])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:393 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 91 90 92 6 (set (reg:SI 0 ax [orig:121 D.26043 ] [121])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:120 D.26048 ] [120])
                (const_int 52 [0x34])) [0 _57->pre_quecc_if+0 S4 A32])) ge2fitman_preproc.cpp:393 90 {*movsi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:121 D.26043 ] [121])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:393 7 {*cmpsi_1}
     (nil))
(jump_insn 93 92 94 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) ge2fitman_preproc.cpp:393 612 {*jcc_1}
     (nil)
 -> 142)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385
(note 94 93 95 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 7 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:394 89 {*movdi_internal}
     (nil))
(insn 96 95 97 7 (set (reg:SI 0 ax [orig:122 D.26043 ] [122])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [371])
                (const_int 44 [0x2c])) [0 preprocess_20(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:394 90 {*movsi_internal}
     (nil))
(insn 97 96 98 7 (set (reg:DI 0 ax [orig:123 D.26044 ] [123])
        (sign_extend:DI (reg:SI 0 ax [orig:122 D.26043 ] [122]))) ge2fitman_preproc.cpp:394 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 7 (parallel [
            (set (reg:DI 0 ax [orig:124 D.26044 ] [124])
                (ashift:DI (reg:DI 0 ax [orig:123 D.26044 ] [123])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:394 512 {*ashldi3_1}
     (nil))
(insn 99 98 100 7 (parallel [
            (set (reg:DI 1 dx [orig:125 D.26045 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 D.26044 ] [124])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:394 218 {*adddi_1}
     (nil))
(insn 100 99 101 7 (set (reg/f:DI 0 ax [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:394 89 {*movdi_internal}
     (nil))
(insn 101 100 102 7 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.26046 ] [126])
                (plus:DI (reg/f:DI 0 ax [372])
                    (reg:DI 1 dx [orig:125 D.26045 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:394 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.26045 ] [125]))
        (nil)))
(insn 102 101 103 7 (set (reg:SF 21 xmm0 [373])
        (mem:SF (reg/f:DI 0 ax [orig:126 D.26046 ] [126]) [0 *_63+0 S4 A32])) ge2fitman_preproc.cpp:394 129 {*movsf_internal}
     (nil))
(insn 103 102 104 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [373])) ge2fitman_preproc.cpp:394 129 {*movsf_internal}
     (nil))
(insn 104 103 105 7 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:395 89 {*movdi_internal}
     (nil))
(insn 105 104 106 7 (set (reg:SI 0 ax [orig:127 D.26043 ] [127])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [374])
                (const_int 44 [0x2c])) [0 preprocess_20(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:395 90 {*movsi_internal}
     (nil))
(insn 106 105 107 7 (set (reg:DI 0 ax [orig:128 D.26044 ] [128])
        (sign_extend:DI (reg:SI 0 ax [orig:127 D.26043 ] [127]))) ge2fitman_preproc.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 7 (parallel [
            (set (reg:DI 1 dx [orig:129 D.26044 ] [129])
                (ashift:DI (reg:DI 0 ax [orig:128 D.26044 ] [128])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:395 512 {*ashldi3_1}
     (nil))
(insn 108 107 109 7 (set (reg/f:DI 0 ax [375])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:395 89 {*movdi_internal}
     (nil))
(insn 109 108 110 7 (parallel [
            (set (reg/f:DI 0 ax [orig:130 D.26046 ] [130])
                (plus:DI (reg/f:DI 0 ax [375])
                    (reg:DI 1 dx [orig:129 D.26044 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:395 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.26044 ] [129]))
        (nil)))
(insn 110 109 111 7 (set (reg:SF 21 xmm0 [376])
        (mem:SF (reg/f:DI 0 ax [orig:130 D.26046 ] [130]) [0 *_68+0 S4 A32])) ge2fitman_preproc.cpp:395 129 {*movsf_internal}
     (nil))
(insn 111 110 112 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [376])) ge2fitman_preproc.cpp:395 129 {*movsf_internal}
     (nil))
(insn 112 111 113 7 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:397 89 {*movdi_internal}
     (nil))
(insn 113 112 114 7 (parallel [
            (set (reg/f:DI 3 bx [orig:131 D.26048 ] [131])
                (plus:DI (reg/f:DI 0 ax [377])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:397 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 114 113 115 7 (set (reg:SF 21 xmm0 [378])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])) ge2fitman_preproc.cpp:397 129 {*movsf_internal}
     (nil))
(insn 115 114 116 7 (set (reg:SF 21 xmm0 [orig:132 D.26042 ] [132])
        (div:SF (reg:SF 21 xmm0 [378])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32]))) ge2fitman_preproc.cpp:397 804 {*fop_sf_1_sse}
     (nil))
(insn 116 115 118 7 (set (reg:DF 21 xmm0 [orig:133 D.26047 ] [133])
        (float_extend:DF (reg:SF 21 xmm0 [orig:132 D.26042 ] [132]))) ge2fitman_preproc.cpp:397 152 {*extendsfdf2_sse}
     (nil))
(call_insn 118 116 120 7 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x7fe357076d80 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:397 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 120 118 121 7 (set (reg:SF 21 xmm0 [orig:135 D.26042 ] [135])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:134 D.26047 ] [134]))) ge2fitman_preproc.cpp:397 157 {*truncdfsf_fast_sse}
     (nil))
(insn 121 120 122 7 (set (reg:DF 21 xmm0 [orig:136 D.26047 ] [136])
        (float_extend:DF (reg:SF 21 xmm0 [orig:135 D.26042 ] [135]))) ge2fitman_preproc.cpp:397 152 {*extendsfdf2_sse}
     (nil))
(insn 122 121 123 7 (set (reg:V2DF 22 xmm1 [379])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:397 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 123 122 124 7 (parallel [
            (set (reg:DF 21 xmm0 [orig:137 D.26047 ] [137])
                (neg:DF (reg:DF 21 xmm0 [orig:136 D.26047 ] [136])))
            (use (reg:V2DF 22 xmm1 [379]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:397 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 21 xmm0 [orig:136 D.26047 ] [136]))
        (nil)))
(insn 124 123 125 7 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:398 89 {*movdi_internal}
     (nil))
(insn 125 124 126 7 (set (reg:SI 0 ax [orig:138 D.26043 ] [138])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [380])
                (const_int 44 [0x2c])) [0 preprocess_20(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 126 125 562 7 (parallel [
            (set (reg:SI 0 ax [orig:139 D.26043 ] [139])
                (plus:SI (reg:SI 0 ax [orig:138 D.26043 ] [138])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 217 {*addsi_1}
     (nil))
(insn 562 126 127 7 (set (reg:SI 1 dx [381])
        (reg:SI 0 ax [orig:139 D.26043 ] [139])) ge2fitman_preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 127 562 128 7 (parallel [
            (set (reg:SI 1 dx [381])
                (lshiftrt:SI (reg:SI 1 dx [381])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 544 {*lshrsi3_1}
     (nil))
(insn 128 127 129 7 (parallel [
            (set (reg:SI 0 ax [382])
                (plus:SI (reg:SI 0 ax [orig:139 D.26043 ] [139])
                    (reg:SI 1 dx [381])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 217 {*addsi_1}
     (nil))
(insn 129 128 130 7 (parallel [
            (set (reg:SI 0 ax [383])
                (ashiftrt:SI (reg:SI 0 ax [382])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 545 {*ashrsi3_1}
     (nil))
(insn 130 129 131 7 (set (reg:SI 0 ax [orig:140 D.26043 ] [140])
        (reg:SI 0 ax [383])) ge2fitman_preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 131 130 132 7 (set (reg:SF 22 xmm1 [orig:141 D.26042 ] [141])
        (float:SF (reg:SI 0 ax [orig:140 D.26043 ] [140]))) ge2fitman_preproc.cpp:398 199 {*floatsisf2_sse}
     (nil))
(insn 132 131 133 7 (set (reg:SF 22 xmm1 [orig:142 D.26042 ] [142])
        (mult:SF (reg:SF 22 xmm1 [orig:141 D.26042 ] [141])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:398 797 {*fop_sf_comm_sse}
     (nil))
(insn 133 132 134 7 (set (reg:SF 22 xmm1 [orig:143 D.26042 ] [143])
        (plus:SF (reg:SF 22 xmm1 [orig:142 D.26042 ] [142])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:398 797 {*fop_sf_comm_sse}
     (nil))
(insn 134 133 135 7 (set (reg:V4SF 23 xmm2 [384])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:398 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 135 134 136 7 (parallel [
            (set (reg:SF 22 xmm1 [orig:144 D.26042 ] [144])
                (abs:SF (reg:SF 22 xmm1 [orig:143 D.26042 ] [143])))
            (use (reg:V4SF 23 xmm2 [384]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:398 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:143 D.26042 ] [143]))
        (nil)))
(insn 136 135 137 7 (set (reg:DF 22 xmm1 [orig:145 D.26047 ] [145])
        (float_extend:DF (reg:SF 22 xmm1 [orig:144 D.26042 ] [144]))) ge2fitman_preproc.cpp:398 152 {*extendsfdf2_sse}
     (nil))
(insn 137 136 138 7 (set (reg:DF 23 xmm2 [385])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:398 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 138 137 139 7 (set (reg:DF 22 xmm1 [orig:146 D.26047 ] [146])
        (mult:DF (reg:DF 22 xmm1 [orig:145 D.26047 ] [145])
            (reg:DF 23 xmm2 [385]))) ge2fitman_preproc.cpp:398 798 {*fop_df_comm_sse}
     (nil))
(insn 139 138 140 7 (set (reg:DF 21 xmm0 [orig:147 D.26047 ] [147])
        (div:DF (reg:DF 21 xmm0 [orig:137 D.26047 ] [137])
            (reg:DF 22 xmm1 [orig:146 D.26047 ] [146]))) ge2fitman_preproc.cpp:397 805 {*fop_df_1_sse}
     (nil))
(insn 140 139 141 7 (set (reg:SF 21 xmm0 [orig:148 D.26042 ] [148])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:147 D.26047 ] [147]))) ge2fitman_preproc.cpp:398 157 {*truncdfsf_fast_sse}
     (nil))
(insn 141 140 142 7 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:131 D.26048 ] [131])
                (const_int 28 [0x1c])) [0 _70->comp_filter+0 S4 A32])
        (reg:SF 21 xmm0 [orig:148 D.26042 ] [148])) ge2fitman_preproc.cpp:398 129 {*movsf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 386 387
(code_label 142 141 143 8 86 "" [2 uses])
(note 143 142 144 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 8 (set (reg/f:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:403 89 {*movdi_internal}
     (nil))
(insn 145 144 146 8 (set (reg:SF 21 xmm0 [orig:149 D.26042 ] [149])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [386])
                (const_int 28 [0x1c])) [0 preprocess_20(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:403 129 {*movsf_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SF 22 xmm1 [387])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:403 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 147 146 148 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:149 D.26042 ] [149])
            (reg:SF 22 xmm1 [387]))) ge2fitman_preproc.cpp:403 55 {*cmpiusf_sse}
     (nil))
(jump_insn 148 147 541 8 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 547)
            (pc))) ge2fitman_preproc.cpp:403 612 {*jcc_1}
     (nil)
 -> 547)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 149

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 149
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 149
;; lr  def 	 17 [flags] 388
(note 541 148 149 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 149 541 150 9 (set (reg:SF 22 xmm1 [388])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:403 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 150 149 151 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:149 D.26042 ] [149])
            (reg:SF 22 xmm1 [388]))) ge2fitman_preproc.cpp:403 55 {*cmpiusf_sse}
     (nil))
(jump_insn 151 150 547 9 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 333)
            (pc))) ge2fitman_preproc.cpp:403 612 {*jcc_1}
     (nil)
 -> 333)
;;  succ:       10 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 547 151 155 10 98 "" [1 uses])
(note 155 547 156 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 330 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:405 90 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              17 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 389
(code_label 330 156 157 11 91 "" [1 uses])
(note 157 330 158 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 159 11 (set (reg/f:DI 0 ax [389])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:405 89 {*movdi_internal}
     (nil))
(insn 159 158 160 11 (set (reg:SI 0 ax [orig:150 D.26043 ] [150])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [389])
                (const_int 324 [0x144])) [0 procpar_info_15(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:405 90 {*movsi_internal}
     (nil))
(insn 160 159 161 11 (parallel [
            (set (reg:SI 0 ax [orig:151 D.26043 ] [151])
                (ashift:SI (reg:SI 0 ax [orig:150 D.26043 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:405 511 {*ashlsi3_1}
     (nil))
(insn 161 160 162 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:151 D.26043 ] [151])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:405 7 {*cmpsi_1}
     (nil))
(jump_insn 162 161 163 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 333)
            (pc))) ge2fitman_preproc.cpp:405 612 {*jcc_1}
     (nil)
 -> 333)
;;  succ:       18
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 390
(note 163 162 164 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 12 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:406 89 {*movdi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:SI 0 ax [orig:152 D.26043 ] [152])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [390])
                (const_int 40 [0x28])) [0 preprocess_20(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:406 90 {*movsi_internal}
     (nil))
(insn 166 165 167 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:152 D.26043 ] [152])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:406 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 167 166 168 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) ge2fitman_preproc.cpp:406 612 {*jcc_1}
     (nil)
 -> 248)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 391
(note 168 167 169 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 13 (set (reg/f:DI 0 ax [391])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:406 89 {*movdi_internal}
     (nil))
(insn 170 169 171 13 (set (reg:SI 0 ax [orig:153 D.26043 ] [153])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [391])
                (const_int 44 [0x2c])) [0 preprocess_20(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:406 90 {*movsi_internal}
     (nil))
(insn 171 170 172 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:153 D.26043 ] [153])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:406 7 {*cmpsi_1}
     (nil))
(jump_insn 172 171 173 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) ge2fitman_preproc.cpp:406 612 {*jcc_1}
     (nil)
 -> 248)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
(note 173 172 174 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 14 (set (reg:SI 0 ax [392])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 175 174 176 14 (set (reg:DI 0 ax [orig:154 D.26044 ] [154])
        (sign_extend:DI (reg:SI 0 ax [392]))) ge2fitman_preproc.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 14 (parallel [
            (set (reg:DI 1 dx [orig:155 D.26044 ] [155])
                (ashift:DI (reg:DI 0 ax [orig:154 D.26044 ] [154])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 512 {*ashldi3_1}
     (nil))
(insn 177 176 178 14 (set (reg/f:DI 0 ax [393])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:407 89 {*movdi_internal}
     (nil))
(insn 178 177 179 14 (parallel [
            (set (reg/f:DI 3 bx [orig:156 D.26046 ] [156])
                (plus:DI (reg:DI 1 dx [orig:155 D.26044 ] [155])
                    (reg/f:DI 0 ax [393])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.26044 ] [155]))
        (nil)))
(insn 179 178 180 14 (set (reg:SI 0 ax [394])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 180 179 181 14 (set (reg:DI 0 ax [orig:157 D.26044 ] [157])
        (sign_extend:DI (reg:SI 0 ax [394]))) ge2fitman_preproc.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 181 180 182 14 (parallel [
            (set (reg:DI 1 dx [orig:158 D.26044 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.26044 ] [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 512 {*ashldi3_1}
     (nil))
(insn 182 181 183 14 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:407 89 {*movdi_internal}
     (nil))
(insn 183 182 184 14 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.26046 ] [159])
                (plus:DI (reg/f:DI 0 ax [395])
                    (reg:DI 1 dx [orig:158 D.26044 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.26044 ] [158]))
        (nil)))
(insn 184 183 564 14 (set (reg:SF 24 xmm3 [orig:160 D.26042 ] [160])
        (mem:SF (reg/f:DI 0 ax [orig:159 D.26046 ] [159]) [0 *_102+0 S4 A32])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 564 184 613 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 24 xmm3 [orig:160 D.26042 ] [160])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(note 613 564 597 14 NOTE_INSN_DELETED)
(note 597 613 185 14 NOTE_INSN_DELETED)
(insn 185 597 565 14 (set (reg:SI 0 ax [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 565 185 186 14 (set (reg:SI 1 dx [397])
        (reg:SI 0 ax [396])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 186 565 187 14 (parallel [
            (set (reg:SI 1 dx [397])
                (lshiftrt:SI (reg:SI 1 dx [397])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 544 {*lshrsi3_1}
     (nil))
(insn 187 186 188 14 (parallel [
            (set (reg:SI 0 ax [398])
                (plus:SI (reg:SI 0 ax [396])
                    (reg:SI 1 dx [397])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 217 {*addsi_1}
     (nil))
(insn 188 187 189 14 (parallel [
            (set (reg:SI 0 ax [399])
                (ashiftrt:SI (reg:SI 0 ax [398])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 545 {*ashrsi3_1}
     (nil))
(insn 189 188 190 14 (set (reg:SI 0 ax [orig:161 D.26043 ] [161])
        (reg:SI 0 ax [399])) ge2fitman_preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 190 189 191 14 (set (reg:DF 22 xmm1 [orig:162 D.26047 ] [162])
        (float:DF (reg:SI 0 ax [orig:161 D.26043 ] [161]))) ge2fitman_preproc.cpp:407 201 {*floatsidf2_sse}
     (nil))
(insn 191 190 192 14 (set (reg:DF 21 xmm0 [orig:163 D.26047 ] [163])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:407 152 {*extendsfdf2_sse}
     (nil))
(insn 192 191 193 14 (set (reg:DF 22 xmm1 [orig:164 D.26047 ] [164])
        (mult:DF (reg:DF 22 xmm1 [orig:162 D.26047 ] [162])
            (reg:DF 21 xmm0 [orig:163 D.26047 ] [163]))) ge2fitman_preproc.cpp:407 798 {*fop_df_comm_sse}
     (nil))
(insn 193 192 194 14 (set (reg:DF 21 xmm0 [orig:165 D.26047 ] [165])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:407 152 {*extendsfdf2_sse}
     (nil))
(insn 194 193 195 14 (set (reg:DF 21 xmm0 [orig:166 D.26047 ] [166])
        (plus:DF (reg:DF 21 xmm0 [orig:165 D.26047 ] [165])
            (reg:DF 22 xmm1 [orig:164 D.26047 ] [164]))) ge2fitman_preproc.cpp:407 798 {*fop_df_comm_sse}
     (nil))
(insn 195 194 196 14 (set (reg:V2DF 22 xmm1 [400])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:407 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 196 195 197 14 (parallel [
            (set (reg:DF 21 xmm0 [orig:167 D.26047 ] [167])
                (abs:DF (reg:DF 21 xmm0 [orig:166 D.26047 ] [166])))
            (use (reg:V2DF 22 xmm1 [400]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:407 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:166 D.26047 ] [166]))
        (nil)))
(insn 197 196 198 14 (set (reg:DF 22 xmm1 [401])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:407 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 198 197 199 14 (set (reg:DF 22 xmm1 [orig:168 D.26047 ] [168])
        (mult:DF (reg:DF 22 xmm1 [401])
            (reg:DF 21 xmm0 [orig:167 D.26047 ] [167]))) ge2fitman_preproc.cpp:407 798 {*fop_df_comm_sse}
     (nil))
(insn 199 198 200 14 (set (reg/f:DI 0 ax [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:407 89 {*movdi_internal}
     (nil))
(insn 200 199 201 14 (set (reg:SF 21 xmm0 [orig:169 D.26042 ] [169])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [402])
                (const_int 28 [0x1c])) [0 preprocess_20(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 201 200 202 14 (set (reg:DF 21 xmm0 [orig:170 D.26047 ] [170])
        (float_extend:DF (reg:SF 21 xmm0 [orig:169 D.26042 ] [169]))) ge2fitman_preproc.cpp:407 152 {*extendsfdf2_sse}
     (nil))
(insn 202 201 204 14 (set (reg:DF 21 xmm0 [orig:171 D.26047 ] [171])
        (mult:DF (reg:DF 21 xmm0 [orig:170 D.26047 ] [170])
            (reg:DF 22 xmm1 [orig:168 D.26047 ] [168]))) ge2fitman_preproc.cpp:407 798 {*fop_df_comm_sse}
     (nil))
(call_insn 204 202 206 14 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fe357058d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:407 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 206 204 567 14 (set (reg:SF 21 xmm0 [orig:173 D.26042 ] [173])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:172 D.26047 ] [172]))) ge2fitman_preproc.cpp:407 157 {*truncdfsf_fast_sse}
     (nil))
(note 567 206 611 14 NOTE_INSN_DELETED)
(note 611 567 207 14 NOTE_INSN_DELETED)
(insn 207 611 208 14 (set (reg:SF 21 xmm0 [orig:174 D.26042 ] [174])
        (mult:SF (reg:SF 21 xmm0 [orig:173 D.26042 ] [173])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:407 797 {*fop_sf_comm_sse}
     (nil))
(insn 208 207 209 14 (set (mem:SF (reg/f:DI 3 bx [orig:156 D.26046 ] [156]) [0 *_99+0 S4 A32])
        (reg:SF 21 xmm0 [orig:174 D.26042 ] [174])) ge2fitman_preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 209 208 210 14 (set (reg:SI 0 ax [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 210 209 211 14 (set (reg:DI 0 ax [orig:175 D.26045 ] [175])
        (sign_extend:DI (reg:SI 0 ax [403]))) ge2fitman_preproc.cpp:408 142 {*extendsidi2_rex64}
     (nil))
(insn 211 210 212 14 (parallel [
            (set (reg:DI 0 ax [orig:176 D.26045 ] [176])
                (plus:DI (reg:DI 0 ax [orig:175 D.26045 ] [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 218 {*adddi_1}
     (nil))
(insn 212 211 213 14 (parallel [
            (set (reg:DI 1 dx [orig:177 D.26045 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.26045 ] [176])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 512 {*ashldi3_1}
     (nil))
(insn 213 212 214 14 (set (reg/f:DI 0 ax [404])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:408 89 {*movdi_internal}
     (nil))
(insn 214 213 215 14 (parallel [
            (set (reg/f:DI 3 bx [orig:178 D.26046 ] [178])
                (plus:DI (reg:DI 1 dx [orig:177 D.26045 ] [177])
                    (reg/f:DI 0 ax [404])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.26045 ] [177]))
        (nil)))
(insn 215 214 216 14 (set (reg:SI 0 ax [405])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 216 215 217 14 (set (reg:DI 0 ax [orig:179 D.26045 ] [179])
        (sign_extend:DI (reg:SI 0 ax [405]))) ge2fitman_preproc.cpp:408 142 {*extendsidi2_rex64}
     (nil))
(insn 217 216 218 14 (parallel [
            (set (reg:DI 0 ax [orig:180 D.26045 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 D.26045 ] [179])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 218 {*adddi_1}
     (nil))
(insn 218 217 219 14 (parallel [
            (set (reg:DI 1 dx [orig:181 D.26045 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:180 D.26045 ] [180])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 512 {*ashldi3_1}
     (nil))
(insn 219 218 220 14 (set (reg/f:DI 0 ax [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:408 89 {*movdi_internal}
     (nil))
(insn 220 219 221 14 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.26046 ] [182])
                (plus:DI (reg/f:DI 0 ax [406])
                    (reg:DI 1 dx [orig:181 D.26045 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:181 D.26045 ] [181]))
        (nil)))
(insn 221 220 568 14 (set (reg:SF 25 xmm4 [orig:183 D.26042 ] [183])
        (mem:SF (reg/f:DI 0 ax [orig:182 D.26046 ] [182]) [0 *_127+0 S4 A32])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(insn 568 221 612 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 25 xmm4 [orig:183 D.26042 ] [183])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(note 612 568 596 14 NOTE_INSN_DELETED)
(note 596 612 222 14 NOTE_INSN_DELETED)
(insn 222 596 569 14 (set (reg:SI 0 ax [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 569 222 223 14 (set (reg:SI 1 dx [408])
        (reg:SI 0 ax [407])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 223 569 224 14 (parallel [
            (set (reg:SI 1 dx [408])
                (lshiftrt:SI (reg:SI 1 dx [408])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 544 {*lshrsi3_1}
     (nil))
(insn 224 223 225 14 (parallel [
            (set (reg:SI 0 ax [409])
                (plus:SI (reg:SI 0 ax [407])
                    (reg:SI 1 dx [408])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 217 {*addsi_1}
     (nil))
(insn 225 224 226 14 (parallel [
            (set (reg:SI 0 ax [410])
                (ashiftrt:SI (reg:SI 0 ax [409])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 545 {*ashrsi3_1}
     (nil))
(insn 226 225 227 14 (set (reg:SI 0 ax [orig:184 D.26043 ] [184])
        (reg:SI 0 ax [410])) ge2fitman_preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 227 226 228 14 (set (reg:DF 22 xmm1 [orig:185 D.26047 ] [185])
        (float:DF (reg:SI 0 ax [orig:184 D.26043 ] [184]))) ge2fitman_preproc.cpp:408 201 {*floatsidf2_sse}
     (nil))
(insn 228 227 229 14 (set (reg:DF 21 xmm0 [orig:186 D.26047 ] [186])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:408 152 {*extendsfdf2_sse}
     (nil))
(insn 229 228 230 14 (set (reg:DF 22 xmm1 [orig:187 D.26047 ] [187])
        (mult:DF (reg:DF 22 xmm1 [orig:185 D.26047 ] [185])
            (reg:DF 21 xmm0 [orig:186 D.26047 ] [186]))) ge2fitman_preproc.cpp:408 798 {*fop_df_comm_sse}
     (nil))
(insn 230 229 231 14 (set (reg:DF 21 xmm0 [orig:188 D.26047 ] [188])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:408 152 {*extendsfdf2_sse}
     (nil))
(insn 231 230 232 14 (set (reg:DF 21 xmm0 [orig:189 D.26047 ] [189])
        (plus:DF (reg:DF 21 xmm0 [orig:188 D.26047 ] [188])
            (reg:DF 22 xmm1 [orig:187 D.26047 ] [187]))) ge2fitman_preproc.cpp:408 798 {*fop_df_comm_sse}
     (nil))
(insn 232 231 233 14 (set (reg:V2DF 22 xmm1 [411])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:408 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 233 232 234 14 (parallel [
            (set (reg:DF 21 xmm0 [orig:190 D.26047 ] [190])
                (abs:DF (reg:DF 21 xmm0 [orig:189 D.26047 ] [189])))
            (use (reg:V2DF 22 xmm1 [411]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:408 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:189 D.26047 ] [189]))
        (nil)))
(insn 234 233 235 14 (set (reg:DF 22 xmm1 [412])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:408 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 235 234 236 14 (set (reg:DF 22 xmm1 [orig:191 D.26047 ] [191])
        (mult:DF (reg:DF 22 xmm1 [412])
            (reg:DF 21 xmm0 [orig:190 D.26047 ] [190]))) ge2fitman_preproc.cpp:408 798 {*fop_df_comm_sse}
     (nil))
(insn 236 235 237 14 (set (reg/f:DI 0 ax [413])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:408 89 {*movdi_internal}
     (nil))
(insn 237 236 238 14 (set (reg:SF 21 xmm0 [orig:192 D.26042 ] [192])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [413])
                (const_int 28 [0x1c])) [0 preprocess_20(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(insn 238 237 239 14 (set (reg:DF 21 xmm0 [orig:193 D.26047 ] [193])
        (float_extend:DF (reg:SF 21 xmm0 [orig:192 D.26042 ] [192]))) ge2fitman_preproc.cpp:408 152 {*extendsfdf2_sse}
     (nil))
(insn 239 238 241 14 (set (reg:DF 21 xmm0 [orig:194 D.26047 ] [194])
        (mult:DF (reg:DF 21 xmm0 [orig:193 D.26047 ] [193])
            (reg:DF 22 xmm1 [orig:191 D.26047 ] [191]))) ge2fitman_preproc.cpp:408 798 {*fop_df_comm_sse}
     (nil))
(call_insn 241 239 243 14 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fe357058d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:408 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 243 241 571 14 (set (reg:SF 21 xmm0 [orig:196 D.26042 ] [196])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:195 D.26047 ] [195]))) ge2fitman_preproc.cpp:408 157 {*truncdfsf_fast_sse}
     (nil))
(note 571 243 610 14 NOTE_INSN_DELETED)
(note 610 571 244 14 NOTE_INSN_DELETED)
(insn 244 610 245 14 (set (reg:SF 21 xmm0 [orig:197 D.26042 ] [197])
        (mult:SF (reg:SF 21 xmm0 [orig:196 D.26042 ] [196])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:408 797 {*fop_sf_comm_sse}
     (nil))
(insn 245 244 549 14 (set (mem:SF (reg/f:DI 3 bx [orig:178 D.26046 ] [178]) [0 *_123+0 S4 A32])
        (reg:SF 21 xmm0 [orig:197 D.26042 ] [197])) ge2fitman_preproc.cpp:408 129 {*movsf_internal}
     (nil))
(jump_insn 549 245 550 14 (set (pc)
        (label_ref 327)) ge2fitman_preproc.cpp:408 654 {jump}
     (nil)
 -> 327)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 550 549 248)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 198 414
(code_label 248 550 249 15 89 "" [2 uses])
(note 249 248 250 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 15 (set (reg/f:DI 0 ax [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:409 89 {*movdi_internal}
     (nil))
(insn 251 250 252 15 (set (reg:SI 0 ax [orig:198 D.26043 ] [198])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [414])
                (const_int 40 [0x28])) [0 preprocess_20(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:409 90 {*movsi_internal}
     (nil))
(insn 252 251 253 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:198 D.26043 ] [198])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:409 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 253 252 254 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 327)
            (pc))) ge2fitman_preproc.cpp:409 612 {*jcc_1}
     (nil)
 -> 327)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436
(note 254 253 255 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 16 (set (reg:SI 0 ax [415])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 256 255 257 16 (set (reg:DI 0 ax [orig:199 D.26044 ] [199])
        (sign_extend:DI (reg:SI 0 ax [415]))) ge2fitman_preproc.cpp:410 142 {*extendsidi2_rex64}
     (nil))
(insn 257 256 258 16 (parallel [
            (set (reg:DI 1 dx [orig:200 D.26044 ] [200])
                (ashift:DI (reg:DI 0 ax [orig:199 D.26044 ] [199])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 512 {*ashldi3_1}
     (nil))
(insn 258 257 259 16 (set (reg/f:DI 0 ax [416])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:410 89 {*movdi_internal}
     (nil))
(insn 259 258 260 16 (parallel [
            (set (reg/f:DI 3 bx [orig:201 D.26046 ] [201])
                (plus:DI (reg:DI 1 dx [orig:200 D.26044 ] [200])
                    (reg/f:DI 0 ax [416])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:200 D.26044 ] [200]))
        (nil)))
(insn 260 259 261 16 (set (reg:SI 0 ax [417])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 261 260 262 16 (set (reg:DI 0 ax [orig:202 D.26044 ] [202])
        (sign_extend:DI (reg:SI 0 ax [417]))) ge2fitman_preproc.cpp:410 142 {*extendsidi2_rex64}
     (nil))
(insn 262 261 263 16 (parallel [
            (set (reg:DI 1 dx [orig:203 D.26044 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.26044 ] [202])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 512 {*ashldi3_1}
     (nil))
(insn 263 262 264 16 (set (reg/f:DI 0 ax [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:410 89 {*movdi_internal}
     (nil))
(insn 264 263 265 16 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.26046 ] [204])
                (plus:DI (reg/f:DI 0 ax [418])
                    (reg:DI 1 dx [orig:203 D.26044 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:203 D.26044 ] [203]))
        (nil)))
(insn 265 264 572 16 (set (reg:SF 26 xmm5 [orig:205 D.26042 ] [205])
        (mem:SF (reg/f:DI 0 ax [orig:204 D.26046 ] [204]) [0 *_151+0 S4 A32])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(insn 572 265 615 16 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 26 xmm5 [orig:205 D.26042 ] [205])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(note 615 572 599 16 NOTE_INSN_DELETED)
(note 599 615 266 16 NOTE_INSN_DELETED)
(insn 266 599 573 16 (set (reg:SI 0 ax [419])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 573 266 267 16 (set (reg:SI 1 dx [420])
        (reg:SI 0 ax [419])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 267 573 268 16 (parallel [
            (set (reg:SI 1 dx [420])
                (lshiftrt:SI (reg:SI 1 dx [420])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 544 {*lshrsi3_1}
     (nil))
(insn 268 267 269 16 (parallel [
            (set (reg:SI 0 ax [421])
                (plus:SI (reg:SI 0 ax [419])
                    (reg:SI 1 dx [420])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 217 {*addsi_1}
     (nil))
(insn 269 268 270 16 (parallel [
            (set (reg:SI 0 ax [422])
                (ashiftrt:SI (reg:SI 0 ax [421])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 545 {*ashrsi3_1}
     (nil))
(insn 270 269 271 16 (set (reg:SI 0 ax [orig:206 D.26043 ] [206])
        (reg:SI 0 ax [422])) ge2fitman_preproc.cpp:410 90 {*movsi_internal}
     (nil))
(insn 271 270 272 16 (set (reg:DF 22 xmm1 [orig:207 D.26047 ] [207])
        (float:DF (reg:SI 0 ax [orig:206 D.26043 ] [206]))) ge2fitman_preproc.cpp:410 201 {*floatsidf2_sse}
     (nil))
(insn 272 271 273 16 (set (reg:DF 21 xmm0 [orig:208 D.26047 ] [208])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:410 152 {*extendsfdf2_sse}
     (nil))
(insn 273 272 274 16 (set (reg:DF 22 xmm1 [orig:209 D.26047 ] [209])
        (mult:DF (reg:DF 22 xmm1 [orig:207 D.26047 ] [207])
            (reg:DF 21 xmm0 [orig:208 D.26047 ] [208]))) ge2fitman_preproc.cpp:410 798 {*fop_df_comm_sse}
     (nil))
(insn 274 273 275 16 (set (reg:DF 21 xmm0 [orig:210 D.26047 ] [210])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:410 152 {*extendsfdf2_sse}
     (nil))
(insn 275 274 276 16 (set (reg:DF 21 xmm0 [orig:211 D.26047 ] [211])
        (plus:DF (reg:DF 21 xmm0 [orig:210 D.26047 ] [210])
            (reg:DF 22 xmm1 [orig:209 D.26047 ] [209]))) ge2fitman_preproc.cpp:410 798 {*fop_df_comm_sse}
     (nil))
(insn 276 275 277 16 (set (reg:V2DF 22 xmm1 [423])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:410 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 277 276 278 16 (parallel [
            (set (reg:DF 21 xmm0 [orig:212 D.26047 ] [212])
                (abs:DF (reg:DF 21 xmm0 [orig:211 D.26047 ] [211])))
            (use (reg:V2DF 22 xmm1 [423]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:410 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:211 D.26047 ] [211]))
        (nil)))
(insn 278 277 279 16 (set (reg:DF 22 xmm1 [424])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:410 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 279 278 280 16 (set (reg:DF 22 xmm1 [orig:213 D.26047 ] [213])
        (mult:DF (reg:DF 22 xmm1 [424])
            (reg:DF 21 xmm0 [orig:212 D.26047 ] [212]))) ge2fitman_preproc.cpp:410 798 {*fop_df_comm_sse}
     (nil))
(insn 280 279 281 16 (set (reg/f:DI 0 ax [425])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:410 89 {*movdi_internal}
     (nil))
(insn 281 280 282 16 (set (reg:SF 21 xmm0 [orig:214 D.26042 ] [214])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [425])
                (const_int 28 [0x1c])) [0 preprocess_20(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(insn 282 281 283 16 (set (reg:DF 21 xmm0 [orig:215 D.26047 ] [215])
        (float_extend:DF (reg:SF 21 xmm0 [orig:214 D.26042 ] [214]))) ge2fitman_preproc.cpp:410 152 {*extendsfdf2_sse}
     (nil))
(insn 283 282 285 16 (set (reg:DF 21 xmm0 [orig:216 D.26047 ] [216])
        (mult:DF (reg:DF 21 xmm0 [orig:215 D.26047 ] [215])
            (reg:DF 22 xmm1 [orig:213 D.26047 ] [213]))) ge2fitman_preproc.cpp:410 798 {*fop_df_comm_sse}
     (nil))
(call_insn 285 283 287 16 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fe357058d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:410 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 287 285 575 16 (set (reg:SF 21 xmm0 [orig:218 D.26042 ] [218])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:217 D.26047 ] [217]))) ge2fitman_preproc.cpp:410 157 {*truncdfsf_fast_sse}
     (nil))
(note 575 287 609 16 NOTE_INSN_DELETED)
(note 609 575 288 16 NOTE_INSN_DELETED)
(insn 288 609 289 16 (set (reg:SF 21 xmm0 [orig:219 D.26042 ] [219])
        (mult:SF (reg:SF 21 xmm0 [orig:218 D.26042 ] [218])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:410 797 {*fop_sf_comm_sse}
     (nil))
(insn 289 288 290 16 (set (mem:SF (reg/f:DI 3 bx [orig:201 D.26046 ] [201]) [0 *_148+0 S4 A32])
        (reg:SF 21 xmm0 [orig:219 D.26042 ] [219])) ge2fitman_preproc.cpp:410 129 {*movsf_internal}
     (nil))
(insn 290 289 291 16 (set (reg:SI 0 ax [426])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 291 290 292 16 (set (reg:DI 0 ax [orig:220 D.26045 ] [220])
        (sign_extend:DI (reg:SI 0 ax [426]))) ge2fitman_preproc.cpp:411 142 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 16 (parallel [
            (set (reg:DI 0 ax [orig:221 D.26045 ] [221])
                (plus:DI (reg:DI 0 ax [orig:220 D.26045 ] [220])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 218 {*adddi_1}
     (nil))
(insn 293 292 294 16 (parallel [
            (set (reg:DI 1 dx [orig:222 D.26045 ] [222])
                (ashift:DI (reg:DI 0 ax [orig:221 D.26045 ] [221])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 512 {*ashldi3_1}
     (nil))
(insn 294 293 295 16 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:411 89 {*movdi_internal}
     (nil))
(insn 295 294 296 16 (parallel [
            (set (reg/f:DI 3 bx [orig:223 D.26046 ] [223])
                (plus:DI (reg:DI 1 dx [orig:222 D.26045 ] [222])
                    (reg/f:DI 0 ax [427])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.26045 ] [222]))
        (nil)))
(insn 296 295 297 16 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 297 296 298 16 (set (reg:DI 0 ax [orig:224 D.26045 ] [224])
        (sign_extend:DI (reg:SI 0 ax [428]))) ge2fitman_preproc.cpp:411 142 {*extendsidi2_rex64}
     (nil))
(insn 298 297 299 16 (parallel [
            (set (reg:DI 0 ax [orig:225 D.26045 ] [225])
                (plus:DI (reg:DI 0 ax [orig:224 D.26045 ] [224])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 218 {*adddi_1}
     (nil))
(insn 299 298 300 16 (parallel [
            (set (reg:DI 1 dx [orig:226 D.26045 ] [226])
                (ashift:DI (reg:DI 0 ax [orig:225 D.26045 ] [225])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 512 {*ashldi3_1}
     (nil))
(insn 300 299 301 16 (set (reg/f:DI 0 ax [429])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:411 89 {*movdi_internal}
     (nil))
(insn 301 300 302 16 (parallel [
            (set (reg/f:DI 0 ax [orig:227 D.26046 ] [227])
                (plus:DI (reg/f:DI 0 ax [429])
                    (reg:DI 1 dx [orig:226 D.26045 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:226 D.26045 ] [226]))
        (nil)))
(insn 302 301 576 16 (set (reg:SF 27 xmm6 [orig:228 D.26042 ] [228])
        (mem:SF (reg/f:DI 0 ax [orig:227 D.26046 ] [227]) [0 *_176+0 S4 A32])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
(insn 576 302 614 16 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 27 xmm6 [orig:228 D.26042 ] [228])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
(note 614 576 598 16 NOTE_INSN_DELETED)
(note 598 614 303 16 NOTE_INSN_DELETED)
(insn 303 598 577 16 (set (reg:SI 0 ax [430])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 577 303 304 16 (set (reg:SI 1 dx [431])
        (reg:SI 0 ax [430])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 304 577 305 16 (parallel [
            (set (reg:SI 1 dx [431])
                (lshiftrt:SI (reg:SI 1 dx [431])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 544 {*lshrsi3_1}
     (nil))
(insn 305 304 306 16 (parallel [
            (set (reg:SI 0 ax [432])
                (plus:SI (reg:SI 0 ax [430])
                    (reg:SI 1 dx [431])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 217 {*addsi_1}
     (nil))
(insn 306 305 307 16 (parallel [
            (set (reg:SI 0 ax [433])
                (ashiftrt:SI (reg:SI 0 ax [432])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 545 {*ashrsi3_1}
     (nil))
(insn 307 306 308 16 (set (reg:SI 0 ax [orig:229 D.26043 ] [229])
        (reg:SI 0 ax [433])) ge2fitman_preproc.cpp:411 90 {*movsi_internal}
     (nil))
(insn 308 307 309 16 (set (reg:DF 22 xmm1 [orig:230 D.26047 ] [230])
        (float:DF (reg:SI 0 ax [orig:229 D.26043 ] [229]))) ge2fitman_preproc.cpp:411 201 {*floatsidf2_sse}
     (nil))
(insn 309 308 310 16 (set (reg:DF 21 xmm0 [orig:231 D.26047 ] [231])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:411 152 {*extendsfdf2_sse}
     (nil))
(insn 310 309 311 16 (set (reg:DF 22 xmm1 [orig:232 D.26047 ] [232])
        (mult:DF (reg:DF 22 xmm1 [orig:230 D.26047 ] [230])
            (reg:DF 21 xmm0 [orig:231 D.26047 ] [231]))) ge2fitman_preproc.cpp:411 798 {*fop_df_comm_sse}
     (nil))
(insn 311 310 312 16 (set (reg:DF 21 xmm0 [orig:233 D.26047 ] [233])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:411 152 {*extendsfdf2_sse}
     (nil))
(insn 312 311 313 16 (set (reg:DF 21 xmm0 [orig:234 D.26047 ] [234])
        (plus:DF (reg:DF 21 xmm0 [orig:233 D.26047 ] [233])
            (reg:DF 22 xmm1 [orig:232 D.26047 ] [232]))) ge2fitman_preproc.cpp:411 798 {*fop_df_comm_sse}
     (nil))
(insn 313 312 314 16 (set (reg:V2DF 22 xmm1 [434])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:411 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 314 313 315 16 (parallel [
            (set (reg:DF 21 xmm0 [orig:235 D.26047 ] [235])
                (abs:DF (reg:DF 21 xmm0 [orig:234 D.26047 ] [234])))
            (use (reg:V2DF 22 xmm1 [434]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:411 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:234 D.26047 ] [234]))
        (nil)))
(insn 315 314 316 16 (set (reg:DF 22 xmm1 [435])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:411 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 316 315 317 16 (set (reg:DF 22 xmm1 [orig:236 D.26047 ] [236])
        (mult:DF (reg:DF 22 xmm1 [435])
            (reg:DF 21 xmm0 [orig:235 D.26047 ] [235]))) ge2fitman_preproc.cpp:411 798 {*fop_df_comm_sse}
     (nil))
(insn 317 316 318 16 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:411 89 {*movdi_internal}
     (nil))
(insn 318 317 319 16 (set (reg:SF 21 xmm0 [orig:237 D.26042 ] [237])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [436])
                (const_int 28 [0x1c])) [0 preprocess_20(D)->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
(insn 319 318 320 16 (set (reg:DF 21 xmm0 [orig:238 D.26047 ] [238])
        (float_extend:DF (reg:SF 21 xmm0 [orig:237 D.26042 ] [237]))) ge2fitman_preproc.cpp:411 152 {*extendsfdf2_sse}
     (nil))
(insn 320 319 322 16 (set (reg:DF 21 xmm0 [orig:239 D.26047 ] [239])
        (mult:DF (reg:DF 21 xmm0 [orig:238 D.26047 ] [238])
            (reg:DF 22 xmm1 [orig:236 D.26047 ] [236]))) ge2fitman_preproc.cpp:411 798 {*fop_df_comm_sse}
     (nil))
(call_insn 322 320 324 16 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fe357058d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:411 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 324 322 579 16 (set (reg:SF 21 xmm0 [orig:241 D.26042 ] [241])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:240 D.26047 ] [240]))) ge2fitman_preproc.cpp:411 157 {*truncdfsf_fast_sse}
     (nil))
(note 579 324 608 16 NOTE_INSN_DELETED)
(note 608 579 325 16 NOTE_INSN_DELETED)
(insn 325 608 326 16 (set (reg:SF 21 xmm0 [orig:242 D.26042 ] [242])
        (mult:SF (reg:SF 21 xmm0 [orig:241 D.26042 ] [241])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:411 797 {*fop_sf_comm_sse}
     (nil))
(insn 326 325 327 16 (set (mem:SF (reg/f:DI 3 bx [orig:223 D.26046 ] [223]) [0 *_172+0 S4 A32])
        (reg:SF 21 xmm0 [orig:242 D.26042 ] [242])) ge2fitman_preproc.cpp:411 129 {*movsf_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              15
;;              14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 327 326 328 17 90 "" [2 uses])
(note 328 327 329 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 551 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:405 217 {*addsi_1}
     (nil))
(jump_insn 551 329 552 17 (set (pc)
        (label_ref 330)) ge2fitman_preproc.cpp:405 654 {jump}
     (nil)
 -> 330)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 552 551 333)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              9
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243 244 437 438
(code_label 333 552 334 18 87 "" [2 uses])
(note 334 333 335 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 335 334 336 18 (set (reg/f:DI 0 ax [437])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:417 89 {*movdi_internal}
     (nil))
(insn 336 335 337 18 (parallel [
            (set (reg/f:DI 0 ax [orig:243 D.26048 ] [243])
                (plus:DI (reg/f:DI 0 ax [437])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:417 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 337 336 338 18 (set (reg:SF 21 xmm0 [orig:244 D.26042 ] [244])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:243 D.26048 ] [243])
                (const_int 28 [0x1c])) [0 _195->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:417 129 {*movsf_internal}
     (nil))
(insn 338 337 339 18 (set (reg:SF 22 xmm1 [438])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:417 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 339 338 340 18 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:244 D.26042 ] [244])
            (reg:SF 22 xmm1 [438]))) ge2fitman_preproc.cpp:417 55 {*cmpiusf_sse}
     (nil))
(jump_insn 340 339 544 18 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 548)
            (pc))) ge2fitman_preproc.cpp:417 612 {*jcc_1}
     (nil)
 -> 548)
;;  succ:       20
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 244

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 244
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 244
;; lr  def 	 17 [flags] 439
(note 544 340 341 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 341 544 342 19 (set (reg:SF 22 xmm1 [439])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S4 A32])) ge2fitman_preproc.cpp:417 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 342 341 343 19 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:244 D.26042 ] [244])
            (reg:SF 22 xmm1 [439]))) ge2fitman_preproc.cpp:417 55 {*cmpiusf_sse}
     (nil))
(jump_insn 343 342 548 19 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 529)
            (pc))) ge2fitman_preproc.cpp:417 612 {*jcc_1}
     (nil)
 -> 529)
;;  succ:       20 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 548 343 347 20 99 "" [1 uses])
(note 347 548 348 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 348 347 526 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:419 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              27 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 246 440
(code_label 526 348 349 21 96 "" [1 uses])
(note 349 526 350 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 350 349 351 21 (set (reg/f:DI 0 ax [440])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:419 89 {*movdi_internal}
     (nil))
(insn 351 350 352 21 (set (reg:SI 0 ax [orig:245 D.26043 ] [245])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [440])
                (const_int 324 [0x144])) [0 procpar_info_15(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:419 90 {*movsi_internal}
     (nil))
(insn 352 351 353 21 (parallel [
            (set (reg:SI 0 ax [orig:246 D.26043 ] [246])
                (ashift:SI (reg:SI 0 ax [orig:245 D.26043 ] [245])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:419 511 {*ashlsi3_1}
     (nil))
(insn 353 352 354 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:246 D.26043 ] [246])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:419 7 {*cmpsi_1}
     (nil))
(jump_insn 354 353 355 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) ge2fitman_preproc.cpp:419 612 {*jcc_1}
     (nil)
 -> 529)
;;  succ:       28
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 247 441
(note 355 354 356 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 356 355 357 22 (set (reg/f:DI 0 ax [441])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:420 89 {*movdi_internal}
     (nil))
(insn 357 356 358 22 (set (reg:SI 0 ax [orig:247 D.26043 ] [247])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [441])
                (const_int 40 [0x28])) [0 preprocess_20(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:420 90 {*movsi_internal}
     (nil))
(insn 358 357 359 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:247 D.26043 ] [247])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:420 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 359 358 360 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 442)
            (pc))) ge2fitman_preproc.cpp:420 612 {*jcc_1}
     (nil)
 -> 442)
;;  succ:       23 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 248 442
(note 360 359 361 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 361 360 362 23 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:420 89 {*movdi_internal}
     (nil))
(insn 362 361 363 23 (set (reg:SI 0 ax [orig:248 D.26043 ] [248])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [442])
                (const_int 44 [0x2c])) [0 preprocess_20(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:420 90 {*movsi_internal}
     (nil))
(insn 363 362 364 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:248 D.26043 ] [248])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:420 7 {*cmpsi_1}
     (nil))
(jump_insn 364 363 365 23 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 442)
            (pc))) ge2fitman_preproc.cpp:420 612 {*jcc_1}
     (nil)
 -> 442)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464
(note 365 364 366 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 366 365 367 24 (set (reg:SI 0 ax [443])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 367 366 368 24 (set (reg:DI 0 ax [orig:249 D.26044 ] [249])
        (sign_extend:DI (reg:SI 0 ax [443]))) ge2fitman_preproc.cpp:421 142 {*extendsidi2_rex64}
     (nil))
(insn 368 367 369 24 (parallel [
            (set (reg:DI 1 dx [orig:250 D.26044 ] [250])
                (ashift:DI (reg:DI 0 ax [orig:249 D.26044 ] [249])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 512 {*ashldi3_1}
     (nil))
(insn 369 368 370 24 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:421 89 {*movdi_internal}
     (nil))
(insn 370 369 371 24 (parallel [
            (set (reg/f:DI 3 bx [orig:251 D.26046 ] [251])
                (plus:DI (reg:DI 1 dx [orig:250 D.26044 ] [250])
                    (reg/f:DI 0 ax [444])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:250 D.26044 ] [250]))
        (nil)))
(insn 371 370 372 24 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 372 371 373 24 (set (reg:DI 0 ax [orig:252 D.26044 ] [252])
        (sign_extend:DI (reg:SI 0 ax [445]))) ge2fitman_preproc.cpp:421 142 {*extendsidi2_rex64}
     (nil))
(insn 373 372 374 24 (parallel [
            (set (reg:DI 1 dx [orig:253 D.26044 ] [253])
                (ashift:DI (reg:DI 0 ax [orig:252 D.26044 ] [252])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 512 {*ashldi3_1}
     (nil))
(insn 374 373 375 24 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:421 89 {*movdi_internal}
     (nil))
(insn 375 374 376 24 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.26046 ] [254])
                (plus:DI (reg/f:DI 0 ax [446])
                    (reg:DI 1 dx [orig:253 D.26044 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:253 D.26044 ] [253]))
        (nil)))
(insn 376 375 580 24 (set (reg:SF 28 xmm7 [orig:255 D.26042 ] [255])
        (mem:SF (reg/f:DI 0 ax [orig:254 D.26046 ] [254]) [0 *_207+0 S4 A32])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(insn 580 376 617 24 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 28 xmm7 [orig:255 D.26042 ] [255])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(note 617 580 601 24 NOTE_INSN_DELETED)
(note 601 617 377 24 NOTE_INSN_DELETED)
(insn 377 601 581 24 (set (reg:SI 0 ax [447])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 581 377 378 24 (set (reg:SI 1 dx [448])
        (reg:SI 0 ax [447])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 378 581 379 24 (parallel [
            (set (reg:SI 1 dx [448])
                (lshiftrt:SI (reg:SI 1 dx [448])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 544 {*lshrsi3_1}
     (nil))
(insn 379 378 380 24 (parallel [
            (set (reg:SI 0 ax [449])
                (plus:SI (reg:SI 0 ax [447])
                    (reg:SI 1 dx [448])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 217 {*addsi_1}
     (nil))
(insn 380 379 381 24 (parallel [
            (set (reg:SI 0 ax [450])
                (ashiftrt:SI (reg:SI 0 ax [449])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 545 {*ashrsi3_1}
     (nil))
(insn 381 380 382 24 (set (reg:SI 0 ax [orig:256 D.26043 ] [256])
        (reg:SI 0 ax [450])) ge2fitman_preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 382 381 383 24 (set (reg:DF 22 xmm1 [orig:257 D.26047 ] [257])
        (float:DF (reg:SI 0 ax [orig:256 D.26043 ] [256]))) ge2fitman_preproc.cpp:421 201 {*floatsidf2_sse}
     (nil))
(insn 383 382 384 24 (set (reg:DF 21 xmm0 [orig:258 D.26047 ] [258])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:421 152 {*extendsfdf2_sse}
     (nil))
(insn 384 383 385 24 (set (reg:DF 22 xmm1 [orig:259 D.26047 ] [259])
        (mult:DF (reg:DF 22 xmm1 [orig:257 D.26047 ] [257])
            (reg:DF 21 xmm0 [orig:258 D.26047 ] [258]))) ge2fitman_preproc.cpp:421 798 {*fop_df_comm_sse}
     (nil))
(insn 385 384 386 24 (set (reg:DF 21 xmm0 [orig:260 D.26047 ] [260])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:421 152 {*extendsfdf2_sse}
     (nil))
(insn 386 385 387 24 (set (reg:DF 21 xmm0 [orig:261 D.26047 ] [261])
        (plus:DF (reg:DF 21 xmm0 [orig:260 D.26047 ] [260])
            (reg:DF 22 xmm1 [orig:259 D.26047 ] [259]))) ge2fitman_preproc.cpp:421 798 {*fop_df_comm_sse}
     (nil))
(insn 387 386 388 24 (set (reg:V2DF 22 xmm1 [451])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:421 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 388 387 389 24 (parallel [
            (set (reg:DF 21 xmm0 [orig:262 D.26047 ] [262])
                (abs:DF (reg:DF 21 xmm0 [orig:261 D.26047 ] [261])))
            (use (reg:V2DF 22 xmm1 [451]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:261 D.26047 ] [261]))
        (nil)))
(insn 389 388 390 24 (set (reg:DF 22 xmm1 [452])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:421 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 390 389 391 24 (set (reg:DF 22 xmm1 [orig:263 D.26047 ] [263])
        (mult:DF (reg:DF 22 xmm1 [452])
            (reg:DF 21 xmm0 [orig:262 D.26047 ] [262]))) ge2fitman_preproc.cpp:421 798 {*fop_df_comm_sse}
     (nil))
(insn 391 390 392 24 (set (reg/f:DI 0 ax [453])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:421 89 {*movdi_internal}
     (nil))
(insn 392 391 393 24 (parallel [
            (set (reg/f:DI 0 ax [orig:264 D.26048 ] [264])
                (plus:DI (reg/f:DI 0 ax [453])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:421 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 393 392 394 24 (set (reg:SF 21 xmm0 [orig:265 D.26042 ] [265])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:264 D.26048 ] [264])
                (const_int 28 [0x1c])) [0 _217->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(insn 394 393 395 24 (set (reg:DF 21 xmm0 [orig:266 D.26047 ] [266])
        (float_extend:DF (reg:SF 21 xmm0 [orig:265 D.26042 ] [265]))) ge2fitman_preproc.cpp:421 152 {*extendsfdf2_sse}
     (nil))
(insn 395 394 397 24 (set (reg:DF 21 xmm0 [orig:267 D.26047 ] [267])
        (mult:DF (reg:DF 21 xmm0 [orig:266 D.26047 ] [266])
            (reg:DF 22 xmm1 [orig:263 D.26047 ] [263]))) ge2fitman_preproc.cpp:421 798 {*fop_df_comm_sse}
     (nil))
(call_insn 397 395 399 24 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fe357058d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:421 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 399 397 583 24 (set (reg:SF 21 xmm0 [orig:269 D.26042 ] [269])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:268 D.26047 ] [268]))) ge2fitman_preproc.cpp:421 157 {*truncdfsf_fast_sse}
     (nil))
(note 583 399 607 24 NOTE_INSN_DELETED)
(note 607 583 400 24 NOTE_INSN_DELETED)
(insn 400 607 401 24 (set (reg:SF 21 xmm0 [orig:270 D.26042 ] [270])
        (mult:SF (reg:SF 21 xmm0 [orig:269 D.26042 ] [269])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:421 797 {*fop_sf_comm_sse}
     (nil))
(insn 401 400 402 24 (set (mem:SF (reg/f:DI 3 bx [orig:251 D.26046 ] [251]) [0 *_204+0 S4 A32])
        (reg:SF 21 xmm0 [orig:270 D.26042 ] [270])) ge2fitman_preproc.cpp:421 129 {*movsf_internal}
     (nil))
(insn 402 401 403 24 (set (reg:SI 0 ax [454])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 403 402 404 24 (set (reg:DI 0 ax [orig:271 D.26045 ] [271])
        (sign_extend:DI (reg:SI 0 ax [454]))) ge2fitman_preproc.cpp:422 142 {*extendsidi2_rex64}
     (nil))
(insn 404 403 405 24 (parallel [
            (set (reg:DI 0 ax [orig:272 D.26045 ] [272])
                (plus:DI (reg:DI 0 ax [orig:271 D.26045 ] [271])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 218 {*adddi_1}
     (nil))
(insn 405 404 406 24 (parallel [
            (set (reg:DI 1 dx [orig:273 D.26045 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:272 D.26045 ] [272])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 512 {*ashldi3_1}
     (nil))
(insn 406 405 407 24 (set (reg/f:DI 0 ax [455])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:422 89 {*movdi_internal}
     (nil))
(insn 407 406 408 24 (parallel [
            (set (reg/f:DI 3 bx [orig:274 D.26046 ] [274])
                (plus:DI (reg:DI 1 dx [orig:273 D.26045 ] [273])
                    (reg/f:DI 0 ax [455])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:273 D.26045 ] [273]))
        (nil)))
(insn 408 407 409 24 (set (reg:SI 0 ax [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 409 408 410 24 (set (reg:DI 0 ax [orig:275 D.26045 ] [275])
        (sign_extend:DI (reg:SI 0 ax [456]))) ge2fitman_preproc.cpp:422 142 {*extendsidi2_rex64}
     (nil))
(insn 410 409 411 24 (parallel [
            (set (reg:DI 0 ax [orig:276 D.26045 ] [276])
                (plus:DI (reg:DI 0 ax [orig:275 D.26045 ] [275])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 218 {*adddi_1}
     (nil))
(insn 411 410 412 24 (parallel [
            (set (reg:DI 1 dx [orig:277 D.26045 ] [277])
                (ashift:DI (reg:DI 0 ax [orig:276 D.26045 ] [276])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 512 {*ashldi3_1}
     (nil))
(insn 412 411 413 24 (set (reg/f:DI 0 ax [457])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:422 89 {*movdi_internal}
     (nil))
(insn 413 412 414 24 (parallel [
            (set (reg/f:DI 0 ax [orig:278 D.26046 ] [278])
                (plus:DI (reg/f:DI 0 ax [457])
                    (reg:DI 1 dx [orig:277 D.26045 ] [277])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:277 D.26045 ] [277]))
        (nil)))
(insn 414 413 584 24 (set (reg:SF 24 xmm3 [orig:279 D.26042 ] [279])
        (mem:SF (reg/f:DI 0 ax [orig:278 D.26046 ] [278]) [0 *_233+0 S4 A32])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(insn 584 414 616 24 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 24 xmm3 [orig:279 D.26042 ] [279])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(note 616 584 600 24 NOTE_INSN_DELETED)
(note 600 616 415 24 NOTE_INSN_DELETED)
(insn 415 600 585 24 (set (reg:SI 0 ax [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 585 415 416 24 (set (reg:SI 1 dx [459])
        (reg:SI 0 ax [458])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 416 585 417 24 (parallel [
            (set (reg:SI 1 dx [459])
                (lshiftrt:SI (reg:SI 1 dx [459])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 544 {*lshrsi3_1}
     (nil))
(insn 417 416 418 24 (parallel [
            (set (reg:SI 0 ax [460])
                (plus:SI (reg:SI 0 ax [458])
                    (reg:SI 1 dx [459])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 217 {*addsi_1}
     (nil))
(insn 418 417 419 24 (parallel [
            (set (reg:SI 0 ax [461])
                (ashiftrt:SI (reg:SI 0 ax [460])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 545 {*ashrsi3_1}
     (nil))
(insn 419 418 420 24 (set (reg:SI 0 ax [orig:280 D.26043 ] [280])
        (reg:SI 0 ax [461])) ge2fitman_preproc.cpp:422 90 {*movsi_internal}
     (nil))
(insn 420 419 421 24 (set (reg:DF 22 xmm1 [orig:281 D.26047 ] [281])
        (float:DF (reg:SI 0 ax [orig:280 D.26043 ] [280]))) ge2fitman_preproc.cpp:422 201 {*floatsidf2_sse}
     (nil))
(insn 421 420 422 24 (set (reg:DF 21 xmm0 [orig:282 D.26047 ] [282])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:422 152 {*extendsfdf2_sse}
     (nil))
(insn 422 421 423 24 (set (reg:DF 22 xmm1 [orig:283 D.26047 ] [283])
        (mult:DF (reg:DF 22 xmm1 [orig:281 D.26047 ] [281])
            (reg:DF 21 xmm0 [orig:282 D.26047 ] [282]))) ge2fitman_preproc.cpp:422 798 {*fop_df_comm_sse}
     (nil))
(insn 423 422 424 24 (set (reg:DF 21 xmm0 [orig:284 D.26047 ] [284])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:422 152 {*extendsfdf2_sse}
     (nil))
(insn 424 423 425 24 (set (reg:DF 21 xmm0 [orig:285 D.26047 ] [285])
        (plus:DF (reg:DF 21 xmm0 [orig:284 D.26047 ] [284])
            (reg:DF 22 xmm1 [orig:283 D.26047 ] [283]))) ge2fitman_preproc.cpp:422 798 {*fop_df_comm_sse}
     (nil))
(insn 425 424 426 24 (set (reg:V2DF 22 xmm1 [462])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:422 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 426 425 427 24 (parallel [
            (set (reg:DF 21 xmm0 [orig:286 D.26047 ] [286])
                (abs:DF (reg:DF 21 xmm0 [orig:285 D.26047 ] [285])))
            (use (reg:V2DF 22 xmm1 [462]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:285 D.26047 ] [285]))
        (nil)))
(insn 427 426 428 24 (set (reg:DF 22 xmm1 [463])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:422 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 428 427 429 24 (set (reg:DF 22 xmm1 [orig:287 D.26047 ] [287])
        (mult:DF (reg:DF 22 xmm1 [463])
            (reg:DF 21 xmm0 [orig:286 D.26047 ] [286]))) ge2fitman_preproc.cpp:422 798 {*fop_df_comm_sse}
     (nil))
(insn 429 428 430 24 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:422 89 {*movdi_internal}
     (nil))
(insn 430 429 431 24 (parallel [
            (set (reg/f:DI 0 ax [orig:288 D.26048 ] [288])
                (plus:DI (reg/f:DI 0 ax [464])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:422 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 431 430 432 24 (set (reg:SF 21 xmm0 [orig:289 D.26042 ] [289])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:288 D.26048 ] [288])
                (const_int 28 [0x1c])) [0 _243->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(insn 432 431 433 24 (set (reg:DF 21 xmm0 [orig:290 D.26047 ] [290])
        (float_extend:DF (reg:SF 21 xmm0 [orig:289 D.26042 ] [289]))) ge2fitman_preproc.cpp:422 152 {*extendsfdf2_sse}
     (nil))
(insn 433 432 435 24 (set (reg:DF 21 xmm0 [orig:291 D.26047 ] [291])
        (mult:DF (reg:DF 21 xmm0 [orig:290 D.26047 ] [290])
            (reg:DF 22 xmm1 [orig:287 D.26047 ] [287]))) ge2fitman_preproc.cpp:422 798 {*fop_df_comm_sse}
     (nil))
(call_insn 435 433 437 24 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fe357058d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:422 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 437 435 587 24 (set (reg:SF 21 xmm0 [orig:293 D.26042 ] [293])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:292 D.26047 ] [292]))) ge2fitman_preproc.cpp:422 157 {*truncdfsf_fast_sse}
     (nil))
(note 587 437 606 24 NOTE_INSN_DELETED)
(note 606 587 438 24 NOTE_INSN_DELETED)
(insn 438 606 439 24 (set (reg:SF 21 xmm0 [orig:294 D.26042 ] [294])
        (mult:SF (reg:SF 21 xmm0 [orig:293 D.26042 ] [293])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:422 797 {*fop_sf_comm_sse}
     (nil))
(insn 439 438 553 24 (set (mem:SF (reg/f:DI 3 bx [orig:274 D.26046 ] [274]) [0 *_229+0 S4 A32])
        (reg:SF 21 xmm0 [orig:294 D.26042 ] [294])) ge2fitman_preproc.cpp:422 129 {*movsf_internal}
     (nil))
(jump_insn 553 439 554 24 (set (pc)
        (label_ref 523)) ge2fitman_preproc.cpp:422 654 {jump}
     (nil)
 -> 523)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 554 553 442)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              23
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 295 465
(code_label 442 554 443 25 94 "" [2 uses])
(note 443 442 444 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 444 443 445 25 (set (reg/f:DI 0 ax [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:423 89 {*movdi_internal}
     (nil))
(insn 445 444 446 25 (set (reg:SI 0 ax [orig:295 D.26043 ] [295])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [465])
                (const_int 40 [0x28])) [0 preprocess_20(D)->pre_quecc+0 S4 A32])) ge2fitman_preproc.cpp:423 90 {*movsi_internal}
     (nil))
(insn 446 445 447 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:295 D.26043 ] [295])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:423 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 447 446 448 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 523)
            (pc))) ge2fitman_preproc.cpp:423 612 {*jcc_1}
     (nil)
 -> 523)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487
(note 448 447 449 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 449 448 450 26 (set (reg:SI 0 ax [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 450 449 451 26 (set (reg:DI 0 ax [orig:296 D.26044 ] [296])
        (sign_extend:DI (reg:SI 0 ax [466]))) ge2fitman_preproc.cpp:424 142 {*extendsidi2_rex64}
     (nil))
(insn 451 450 452 26 (parallel [
            (set (reg:DI 1 dx [orig:297 D.26044 ] [297])
                (ashift:DI (reg:DI 0 ax [orig:296 D.26044 ] [296])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 512 {*ashldi3_1}
     (nil))
(insn 452 451 453 26 (set (reg/f:DI 0 ax [467])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 453 452 454 26 (parallel [
            (set (reg/f:DI 3 bx [orig:298 D.26046 ] [298])
                (plus:DI (reg:DI 1 dx [orig:297 D.26044 ] [297])
                    (reg/f:DI 0 ax [467])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:297 D.26044 ] [297]))
        (nil)))
(insn 454 453 455 26 (set (reg:SI 0 ax [468])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 455 454 456 26 (set (reg:DI 0 ax [orig:299 D.26044 ] [299])
        (sign_extend:DI (reg:SI 0 ax [468]))) ge2fitman_preproc.cpp:424 142 {*extendsidi2_rex64}
     (nil))
(insn 456 455 457 26 (parallel [
            (set (reg:DI 1 dx [orig:300 D.26044 ] [300])
                (ashift:DI (reg:DI 0 ax [orig:299 D.26044 ] [299])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 512 {*ashldi3_1}
     (nil))
(insn 457 456 458 26 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 458 457 459 26 (parallel [
            (set (reg/f:DI 0 ax [orig:301 D.26046 ] [301])
                (plus:DI (reg/f:DI 0 ax [469])
                    (reg:DI 1 dx [orig:300 D.26044 ] [300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:300 D.26044 ] [300]))
        (nil)))
(insn 459 458 588 26 (set (reg:SF 25 xmm4 [orig:302 D.26042 ] [302])
        (mem:SF (reg/f:DI 0 ax [orig:301 D.26046 ] [301]) [0 *_258+0 S4 A32])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(insn 588 459 619 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 25 xmm4 [orig:302 D.26042 ] [302])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(note 619 588 603 26 NOTE_INSN_DELETED)
(note 603 619 460 26 NOTE_INSN_DELETED)
(insn 460 603 589 26 (set (reg:SI 0 ax [470])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 589 460 461 26 (set (reg:SI 1 dx [471])
        (reg:SI 0 ax [470])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 461 589 462 26 (parallel [
            (set (reg:SI 1 dx [471])
                (lshiftrt:SI (reg:SI 1 dx [471])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 544 {*lshrsi3_1}
     (nil))
(insn 462 461 463 26 (parallel [
            (set (reg:SI 0 ax [472])
                (plus:SI (reg:SI 0 ax [470])
                    (reg:SI 1 dx [471])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 217 {*addsi_1}
     (nil))
(insn 463 462 464 26 (parallel [
            (set (reg:SI 0 ax [473])
                (ashiftrt:SI (reg:SI 0 ax [472])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 545 {*ashrsi3_1}
     (nil))
(insn 464 463 465 26 (set (reg:SI 0 ax [orig:303 D.26043 ] [303])
        (reg:SI 0 ax [473])) ge2fitman_preproc.cpp:424 90 {*movsi_internal}
     (nil))
(insn 465 464 466 26 (set (reg:DF 22 xmm1 [orig:304 D.26047 ] [304])
        (float:DF (reg:SI 0 ax [orig:303 D.26043 ] [303]))) ge2fitman_preproc.cpp:424 201 {*floatsidf2_sse}
     (nil))
(insn 466 465 467 26 (set (reg:DF 21 xmm0 [orig:305 D.26047 ] [305])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:424 152 {*extendsfdf2_sse}
     (nil))
(insn 467 466 468 26 (set (reg:DF 22 xmm1 [orig:306 D.26047 ] [306])
        (mult:DF (reg:DF 22 xmm1 [orig:304 D.26047 ] [304])
            (reg:DF 21 xmm0 [orig:305 D.26047 ] [305]))) ge2fitman_preproc.cpp:424 798 {*fop_df_comm_sse}
     (nil))
(insn 468 467 469 26 (set (reg:DF 21 xmm0 [orig:307 D.26047 ] [307])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:424 152 {*extendsfdf2_sse}
     (nil))
(insn 469 468 470 26 (set (reg:DF 21 xmm0 [orig:308 D.26047 ] [308])
        (plus:DF (reg:DF 21 xmm0 [orig:307 D.26047 ] [307])
            (reg:DF 22 xmm1 [orig:306 D.26047 ] [306]))) ge2fitman_preproc.cpp:424 798 {*fop_df_comm_sse}
     (nil))
(insn 470 469 471 26 (set (reg:V2DF 22 xmm1 [474])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:424 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 471 470 472 26 (parallel [
            (set (reg:DF 21 xmm0 [orig:309 D.26047 ] [309])
                (abs:DF (reg:DF 21 xmm0 [orig:308 D.26047 ] [308])))
            (use (reg:V2DF 22 xmm1 [474]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:308 D.26047 ] [308]))
        (nil)))
(insn 472 471 473 26 (set (reg:DF 22 xmm1 [475])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:424 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 473 472 474 26 (set (reg:DF 22 xmm1 [orig:310 D.26047 ] [310])
        (mult:DF (reg:DF 22 xmm1 [475])
            (reg:DF 21 xmm0 [orig:309 D.26047 ] [309]))) ge2fitman_preproc.cpp:424 798 {*fop_df_comm_sse}
     (nil))
(insn 474 473 475 26 (set (reg/f:DI 0 ax [476])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 475 474 476 26 (parallel [
            (set (reg/f:DI 0 ax [orig:311 D.26048 ] [311])
                (plus:DI (reg/f:DI 0 ax [476])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:424 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 476 475 477 26 (set (reg:SF 21 xmm0 [orig:312 D.26042 ] [312])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:311 D.26048 ] [311])
                (const_int 28 [0x1c])) [0 _268->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(insn 477 476 478 26 (set (reg:DF 21 xmm0 [orig:313 D.26047 ] [313])
        (float_extend:DF (reg:SF 21 xmm0 [orig:312 D.26042 ] [312]))) ge2fitman_preproc.cpp:424 152 {*extendsfdf2_sse}
     (nil))
(insn 478 477 480 26 (set (reg:DF 21 xmm0 [orig:314 D.26047 ] [314])
        (mult:DF (reg:DF 21 xmm0 [orig:313 D.26047 ] [313])
            (reg:DF 22 xmm1 [orig:310 D.26047 ] [310]))) ge2fitman_preproc.cpp:424 798 {*fop_df_comm_sse}
     (nil))
(call_insn 480 478 482 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fe357058d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:424 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 482 480 591 26 (set (reg:SF 21 xmm0 [orig:316 D.26042 ] [316])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:315 D.26047 ] [315]))) ge2fitman_preproc.cpp:424 157 {*truncdfsf_fast_sse}
     (nil))
(note 591 482 605 26 NOTE_INSN_DELETED)
(note 605 591 483 26 NOTE_INSN_DELETED)
(insn 483 605 484 26 (set (reg:SF 21 xmm0 [orig:317 D.26042 ] [317])
        (mult:SF (reg:SF 21 xmm0 [orig:316 D.26042 ] [316])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:424 797 {*fop_sf_comm_sse}
     (nil))
(insn 484 483 485 26 (set (mem:SF (reg/f:DI 3 bx [orig:298 D.26046 ] [298]) [0 *_255+0 S4 A32])
        (reg:SF 21 xmm0 [orig:317 D.26042 ] [317])) ge2fitman_preproc.cpp:424 129 {*movsf_internal}
     (nil))
(insn 485 484 486 26 (set (reg:SI 0 ax [477])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 486 485 487 26 (set (reg:DI 0 ax [orig:318 D.26045 ] [318])
        (sign_extend:DI (reg:SI 0 ax [477]))) ge2fitman_preproc.cpp:425 142 {*extendsidi2_rex64}
     (nil))
(insn 487 486 488 26 (parallel [
            (set (reg:DI 0 ax [orig:319 D.26045 ] [319])
                (plus:DI (reg:DI 0 ax [orig:318 D.26045 ] [318])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 218 {*adddi_1}
     (nil))
(insn 488 487 489 26 (parallel [
            (set (reg:DI 1 dx [orig:320 D.26045 ] [320])
                (ashift:DI (reg:DI 0 ax [orig:319 D.26045 ] [319])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 512 {*ashldi3_1}
     (nil))
(insn 489 488 490 26 (set (reg/f:DI 0 ax [478])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:425 89 {*movdi_internal}
     (nil))
(insn 490 489 491 26 (parallel [
            (set (reg/f:DI 3 bx [orig:321 D.26046 ] [321])
                (plus:DI (reg:DI 1 dx [orig:320 D.26045 ] [320])
                    (reg/f:DI 0 ax [478])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:320 D.26045 ] [320]))
        (nil)))
(insn 491 490 492 26 (set (reg:SI 0 ax [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 492 491 493 26 (set (reg:DI 0 ax [orig:322 D.26045 ] [322])
        (sign_extend:DI (reg:SI 0 ax [479]))) ge2fitman_preproc.cpp:425 142 {*extendsidi2_rex64}
     (nil))
(insn 493 492 494 26 (parallel [
            (set (reg:DI 0 ax [orig:323 D.26045 ] [323])
                (plus:DI (reg:DI 0 ax [orig:322 D.26045 ] [322])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 218 {*adddi_1}
     (nil))
(insn 494 493 495 26 (parallel [
            (set (reg:DI 1 dx [orig:324 D.26045 ] [324])
                (ashift:DI (reg:DI 0 ax [orig:323 D.26045 ] [323])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 512 {*ashldi3_1}
     (nil))
(insn 495 494 496 26 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:425 89 {*movdi_internal}
     (nil))
(insn 496 495 497 26 (parallel [
            (set (reg/f:DI 0 ax [orig:325 D.26046 ] [325])
                (plus:DI (reg/f:DI 0 ax [480])
                    (reg:DI 1 dx [orig:324 D.26045 ] [324])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:324 D.26045 ] [324]))
        (nil)))
(insn 497 496 592 26 (set (reg:SF 26 xmm5 [orig:326 D.26042 ] [326])
        (mem:SF (reg/f:DI 0 ax [orig:325 D.26046 ] [325]) [0 *_284+0 S4 A32])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
(insn 592 497 618 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 26 xmm5 [orig:326 D.26042 ] [326])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
(note 618 592 602 26 NOTE_INSN_DELETED)
(note 602 618 498 26 NOTE_INSN_DELETED)
(insn 498 602 593 26 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 593 498 499 26 (set (reg:SI 1 dx [482])
        (reg:SI 0 ax [481])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 499 593 500 26 (parallel [
            (set (reg:SI 1 dx [482])
                (lshiftrt:SI (reg:SI 1 dx [482])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 544 {*lshrsi3_1}
     (nil))
(insn 500 499 501 26 (parallel [
            (set (reg:SI 0 ax [483])
                (plus:SI (reg:SI 0 ax [481])
                    (reg:SI 1 dx [482])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 217 {*addsi_1}
     (nil))
(insn 501 500 502 26 (parallel [
            (set (reg:SI 0 ax [484])
                (ashiftrt:SI (reg:SI 0 ax [483])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 545 {*ashrsi3_1}
     (nil))
(insn 502 501 503 26 (set (reg:SI 0 ax [orig:327 D.26043 ] [327])
        (reg:SI 0 ax [484])) ge2fitman_preproc.cpp:425 90 {*movsi_internal}
     (nil))
(insn 503 502 504 26 (set (reg:DF 22 xmm1 [orig:328 D.26047 ] [328])
        (float:DF (reg:SI 0 ax [orig:327 D.26043 ] [327]))) ge2fitman_preproc.cpp:425 201 {*floatsidf2_sse}
     (nil))
(insn 504 503 505 26 (set (reg:DF 21 xmm0 [orig:329 D.26047 ] [329])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) ge2fitman_preproc.cpp:425 152 {*extendsfdf2_sse}
     (nil))
(insn 505 504 506 26 (set (reg:DF 22 xmm1 [orig:330 D.26047 ] [330])
        (mult:DF (reg:DF 22 xmm1 [orig:328 D.26047 ] [328])
            (reg:DF 21 xmm0 [orig:329 D.26047 ] [329]))) ge2fitman_preproc.cpp:425 798 {*fop_df_comm_sse}
     (nil))
(insn 506 505 507 26 (set (reg:DF 21 xmm0 [orig:331 D.26047 ] [331])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) ge2fitman_preproc.cpp:425 152 {*extendsfdf2_sse}
     (nil))
(insn 507 506 508 26 (set (reg:DF 21 xmm0 [orig:332 D.26047 ] [332])
        (plus:DF (reg:DF 21 xmm0 [orig:331 D.26047 ] [331])
            (reg:DF 22 xmm1 [orig:330 D.26047 ] [330]))) ge2fitman_preproc.cpp:425 798 {*fop_df_comm_sse}
     (nil))
(insn 508 507 509 26 (set (reg:V2DF 22 xmm1 [485])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S16 A128])) ge2fitman_preproc.cpp:425 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 509 508 510 26 (parallel [
            (set (reg:DF 21 xmm0 [orig:333 D.26047 ] [333])
                (abs:DF (reg:DF 21 xmm0 [orig:332 D.26047 ] [332])))
            (use (reg:V2DF 22 xmm1 [485]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:332 D.26047 ] [332]))
        (nil)))
(insn 510 509 511 26 (set (reg:DF 22 xmm1 [486])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:425 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 511 510 512 26 (set (reg:DF 22 xmm1 [orig:334 D.26047 ] [334])
        (mult:DF (reg:DF 22 xmm1 [486])
            (reg:DF 21 xmm0 [orig:333 D.26047 ] [333]))) ge2fitman_preproc.cpp:425 798 {*fop_df_comm_sse}
     (nil))
(insn 512 511 513 26 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:425 89 {*movdi_internal}
     (nil))
(insn 513 512 514 26 (parallel [
            (set (reg/f:DI 0 ax [orig:335 D.26048 ] [335])
                (plus:DI (reg/f:DI 0 ax [487])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:425 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 514 513 515 26 (set (reg:SF 21 xmm0 [orig:336 D.26042 ] [336])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:335 D.26048 ] [335])
                (const_int 28 [0x1c])) [0 _294->comp_filter+0 S4 A32])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
(insn 515 514 516 26 (set (reg:DF 21 xmm0 [orig:337 D.26047 ] [337])
        (float_extend:DF (reg:SF 21 xmm0 [orig:336 D.26042 ] [336]))) ge2fitman_preproc.cpp:425 152 {*extendsfdf2_sse}
     (nil))
(insn 516 515 518 26 (set (reg:DF 21 xmm0 [orig:338 D.26047 ] [338])
        (mult:DF (reg:DF 21 xmm0 [orig:337 D.26047 ] [337])
            (reg:DF 22 xmm1 [orig:334 D.26047 ] [334]))) ge2fitman_preproc.cpp:425 798 {*fop_df_comm_sse}
     (nil))
(call_insn 518 516 520 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fe357058d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:425 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 520 518 595 26 (set (reg:SF 21 xmm0 [orig:340 D.26042 ] [340])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:339 D.26047 ] [339]))) ge2fitman_preproc.cpp:425 157 {*truncdfsf_fast_sse}
     (nil))
(note 595 520 604 26 NOTE_INSN_DELETED)
(note 604 595 521 26 NOTE_INSN_DELETED)
(insn 521 604 522 26 (set (reg:SF 21 xmm0 [orig:341 D.26042 ] [341])
        (mult:SF (reg:SF 21 xmm0 [orig:340 D.26042 ] [340])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) ge2fitman_preproc.cpp:425 797 {*fop_sf_comm_sse}
     (nil))
(insn 522 521 523 26 (set (mem:SF (reg/f:DI 3 bx [orig:321 D.26046 ] [321]) [0 *_280+0 S4 A32])
        (reg:SF 21 xmm0 [orig:341 D.26042 ] [341])) ge2fitman_preproc.cpp:425 129 {*movsf_internal}
     (nil))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;;              25
;;              24 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 523 522 524 27 95 "" [2 uses])
(note 524 523 525 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 525 524 555 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:419 217 {*addsi_1}
     (nil))
(jump_insn 555 525 556 27 (set (pc)
        (label_ref 526)) ge2fitman_preproc.cpp:419 654 {jump}
     (nil)
 -> 526)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 556 555 529)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              19
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 342 343
(code_label 529 556 530 28 92 "" [2 uses])
(note 530 529 531 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 531 530 534 28 (set (reg:SI 0 ax [orig:342 D.26043 ] [342])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:431 90 {*movsi_internal}
     (nil))
(insn 534 531 538 28 (set (reg:SI 0 ax [orig:343 <retval> ] [343])
        (reg:SI 0 ax [orig:342 D.26043 ] [342])) ge2fitman_preproc.cpp:431 90 {*movsi_internal}
     (nil))
(insn 538 534 539 28 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:343 <retval> ] [343])) ge2fitman_preproc.cpp:433 90 {*movsi_internal}
     (nil))
(insn 539 538 557 28 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:433 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 557 539 0 NOTE_INSN_DELETED)

;; Function int quecc(float*, float*, float*, Procpar_info*, Preprocess*) (_Z5queccPfS_S_P12Procpar_infoP10Preprocess, funcdef_no=1029, decl_uid=24435, cgraph_uid=234, symbol_order=235)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 11:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 12:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 13:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 14:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 15:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 16:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 17:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 18:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 19:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 20:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 21:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 22:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 23:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 24:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 25:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 26:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 27:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 28:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 29:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 30:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 31:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 32:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 33:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 34:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 55:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 64:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 72:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 75
	 Choosing alt 0 in insn 75:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 78:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 79:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 93:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 98:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 99:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 105:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 112:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 114:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 121:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 129:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 135:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 136:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 142:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 155:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 156:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 166
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 167:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 173
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 174:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 176:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 182
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 183:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 193
	 Choosing alt 0 in insn 193:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 194
	 Choosing alt 0 in insn 194:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 197:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 198:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 203
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 204:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 208:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 209:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 211
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 212:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 217:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 218:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 219:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 226:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 227:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 232:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 234:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 237:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 239:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 242:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 243:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 245:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=357 from oldreg=201, assigning class SSE_REGS to r357
  245: r357:SF=float_trunc([frame:DI-0x70])
    Inserting insn reload after:
  414: r201:SF=r357:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 414:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 246:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=358, assigning class NO_REGS to secondary r358
  247: r358:DF=r324:DF
      REG_DEAD r324:DF
    Inserting the sec. move after:
  415: xmm0:DF=r358:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 415:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 251
	 Choosing alt 0 in insn 251:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=359 from oldreg=201, assigning class SSE_REGS to r359
      Making reload reg 359 for reg 201 optional
  251: r204:SF=r203:SF*r359:SF
      REG_DEAD r203:SF
      REG_DEAD r201:SF
    Inserting insn reload before:
  416: r359:SF=r201:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 416:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 252:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 255:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 259:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=360 from oldreg=209, assigning class SSE_REGS to r360
  259: r360:SF=float_trunc([frame:DI-0x70])
    Inserting insn reload after:
  417: r209:SF=r360:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 417:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 260:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=361, assigning class NO_REGS to secondary r361
  261: r361:DF=r327:DF
      REG_DEAD r327:DF
    Inserting the sec. move after:
  418: xmm0:DF=r361:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 418:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 265
	 Choosing alt 0 in insn 265:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=362 from oldreg=209, assigning class SSE_REGS to r362
      Making reload reg 362 for reg 209 optional
  265: r212:SF=r211:SF*r362:SF
      REG_DEAD r211:SF
      REG_DEAD r209:SF
    Inserting insn reload before:
  419: r362:SF=r209:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 419:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 266:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 267:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 274:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 275:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 280:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 282:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 285:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 287:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 290:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 292:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 293:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=363 from oldreg=216, assigning class SSE_REGS to r363
  293: r363:SF=float_trunc([frame:DI-0x68])
    Inserting insn reload after:
  420: r216:SF=r363:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 420:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 294:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=364, assigning class NO_REGS to secondary r364
  295: r364:DF=r336:DF
      REG_DEAD r336:DF
    Inserting the sec. move after:
  421: xmm0:DF=r364:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 421:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 299
	 Choosing alt 0 in insn 299:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=365 from oldreg=216, assigning class SSE_REGS to r365
      Making reload reg 365 for reg 216 optional
  299: r219:SF=r218:SF*r365:SF
      REG_DEAD r218:SF
      REG_DEAD r216:SF
    Inserting insn reload before:
  422: r365:SF=r216:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 422:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 300:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 303:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 307:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=366 from oldreg=224, assigning class SSE_REGS to r366
  307: r366:SF=float_trunc([frame:DI-0x68])
    Inserting insn reload after:
  423: r224:SF=r366:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 423:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 308:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=367, assigning class NO_REGS to secondary r367
  309: r367:DF=r339:DF
      REG_DEAD r339:DF
    Inserting the sec. move after:
  424: xmm0:DF=r367:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 424:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 313
	 Choosing alt 0 in insn 313:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=368 from oldreg=224, assigning class SSE_REGS to r368
      Making reload reg 368 for reg 224 optional
  313: r227:SF=r226:SF*r368:SF
      REG_DEAD r226:SF
      REG_DEAD r224:SF
    Inserting insn reload before:
  425: r368:SF=r224:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 425:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 314:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 319:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 321:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 322:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 324:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 327:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 329:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 330:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=369 from oldreg=231, assigning class SSE_REGS to r369
  330: r369:SF=float_trunc([frame:DI-0x60])
    Inserting insn reload after:
  426: r231:SF=r369:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 426:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 331:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=370, assigning class NO_REGS to secondary r370
  332: r370:DF=r346:DF
      REG_DEAD r346:DF
    Inserting the sec. move after:
  427: xmm0:DF=r370:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 427:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 336
	 Choosing alt 0 in insn 336:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=371 from oldreg=231, assigning class SSE_REGS to r371
      Making reload reg 371 for reg 231 optional
  336: r234:SF=r233:SF*r371:SF
      REG_DEAD r233:SF
      REG_DEAD r231:SF
    Inserting insn reload before:
  428: r371:SF=r231:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 428:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 337:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 341:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 343:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 344:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=372 from oldreg=239, assigning class SSE_REGS to r372
  344: r372:SF=float_trunc([frame:DI-0x60])
    Inserting insn reload after:
  429: r239:SF=r372:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 429:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 345:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=373, assigning class NO_REGS to secondary r373
  346: r373:DF=r349:DF
      REG_DEAD r349:DF
    Inserting the sec. move after:
  430: xmm0:DF=r373:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 430:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 350
	 Choosing alt 0 in insn 350:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=374 from oldreg=239, assigning class SSE_REGS to r374
      Making reload reg 374 for reg 239 optional
  350: r242:SF=r241:SF*r374:SF
      REG_DEAD r241:SF
      REG_DEAD r239:SF
    Inserting insn reload before:
  431: r374:SF=r239:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 431:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 351:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 356:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 357:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=375 from oldreg=246, assigning class SSE_REGS to r375
  357: r375:SF=float_trunc([frame:DI-0x58])
    Inserting insn reload after:
  432: r246:SF=r375:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 432:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 358:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=376, assigning class NO_REGS to secondary r376
  359: r376:DF=r352:DF
      REG_DEAD r352:DF
    Inserting the sec. move after:
  433: xmm0:DF=r376:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 433:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 0 in insn 363:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=377 from oldreg=246, assigning class SSE_REGS to r377
      Making reload reg 377 for reg 246 optional
  363: r249:SF=r248:SF*r377:SF
      REG_DEAD r248:SF
      REG_DEAD r246:SF
    Inserting insn reload before:
  434: r377:SF=r246:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 434:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 364:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 367:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 368:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 371:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=378 from oldreg=254, assigning class SSE_REGS to r378
  371: r378:SF=float_trunc([frame:DI-0x58])
    Inserting insn reload after:
  435: r254:SF=r378:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 435:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 372:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=379, assigning class NO_REGS to secondary r379
  373: r379:DF=r355:DF
      REG_DEAD r355:DF
    Inserting the sec. move after:
  436: xmm0:DF=r379:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 436:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 377
	 Choosing alt 0 in insn 377:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=380 from oldreg=254, assigning class SSE_REGS to r380
      Making reload reg 380 for reg 254 optional
  377: r257:SF=r256:SF*r380:SF
      REG_DEAD r256:SF
      REG_DEAD r254:SF
    Inserting insn reload before:
  437: r380:SF=r254:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 437:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 378:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 381:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=381 from oldreg=209, assigning class SSE_REGS to inheritance r381
    Original reg change 209->381 (bb8):
  417: r381:SF=r360:SF
    Add original<-inheritance after:
  438: r209:SF=r381:SF

    Inheritance reuse change 209->381 (bb8):
  419: r362:SF=r381:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=382 from oldreg=201, assigning class SSE_REGS to inheritance r382
    Original reg change 201->382 (bb8):
  414: r382:SF=r357:SF
    Add original<-inheritance after:
  439: r201:SF=r382:SF

    Inheritance reuse change 201->382 (bb8):
  416: r359:SF=r382:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   438: r209:SF=r381:SF
deleting insn with uid = 438.
	    Removing dead insn:
   439: r201:SF=r382:SF
deleting insn with uid = 439.
EBB 9
EBB 10
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=383 from oldreg=224, assigning class SSE_REGS to inheritance r383
    Original reg change 224->383 (bb11):
  423: r383:SF=r366:SF
    Add original<-inheritance after:
  440: r224:SF=r383:SF

    Inheritance reuse change 224->383 (bb11):
  425: r368:SF=r383:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=384 from oldreg=216, assigning class SSE_REGS to inheritance r384
    Original reg change 216->384 (bb11):
  420: r384:SF=r363:SF
    Add original<-inheritance after:
  441: r216:SF=r384:SF

    Inheritance reuse change 216->384 (bb11):
  422: r365:SF=r384:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   440: r224:SF=r383:SF
deleting insn with uid = 440.
	    Removing dead insn:
   441: r216:SF=r384:SF
deleting insn with uid = 441.
EBB 12
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=385 from oldreg=254, assigning class SSE_REGS to inheritance r385
    Original reg change 254->385 (bb12):
  435: r385:SF=r378:SF
    Add original<-inheritance after:
  442: r254:SF=r385:SF

    Inheritance reuse change 254->385 (bb12):
  437: r380:SF=r385:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=386 from oldreg=246, assigning class SSE_REGS to inheritance r386
    Original reg change 246->386 (bb12):
  432: r386:SF=r375:SF
    Add original<-inheritance after:
  443: r246:SF=r386:SF

    Inheritance reuse change 246->386 (bb12):
  434: r377:SF=r386:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=387 from oldreg=239, assigning class SSE_REGS to inheritance r387
    Original reg change 239->387 (bb12):
  429: r387:SF=r372:SF
    Add original<-inheritance after:
  444: r239:SF=r387:SF

    Inheritance reuse change 239->387 (bb12):
  431: r374:SF=r387:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=388 from oldreg=231, assigning class SSE_REGS to inheritance r388
    Original reg change 231->388 (bb12):
  426: r388:SF=r369:SF
    Add original<-inheritance after:
  445: r231:SF=r388:SF

    Inheritance reuse change 231->388 (bb12):
  428: r371:SF=r388:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   442: r254:SF=r385:SF
deleting insn with uid = 442.
	    Removing dead insn:
   443: r246:SF=r386:SF
deleting insn with uid = 443.
	    Removing dead insn:
   444: r239:SF=r387:SF
deleting insn with uid = 444.
	    Removing dead insn:
   445: r231:SF=r388:SF
deleting insn with uid = 445.
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 395: point = 0
   Insn 394: point = 0
   Insn 390: point = 1
   Insn 387: point = 3
  BB 3
   Insn 41: point = 4
   Insn 40: point = 4
   Insn 39: point = 5
   Insn 38: point = 7
   Insn 37: point = 9
  BB 13
   Insn 411: point = 10
   Insn 381: point = 10
  BB 11
   Insn 409: point = 10
   Insn 314: point = 10
   Insn 313: point = 11
   Insn 425: point = 13
	   Creating copy r368<-r383@1
   Insn 312: point = 15
   Insn 311: point = 17
   Insn 310: point = 18
   Insn 424: point = 18
	Hard reg 21 is preferable by r367 with profit 1
   Insn 309: point = 19
	Hard reg 21 is preferable by r367 with profit 1
	Hard reg 0 is preferable by r367 with profit 1
   Insn 308: point = 21
   Insn 423: point = 22
	   Creating copy r366->r383@1
   Insn 307: point = 24
   Insn 306: point = 25
   Insn 305: point = 27
   Insn 304: point = 28
   Insn 303: point = 30
   Insn 302: point = 32
   Insn 301: point = 34
   Insn 300: point = 35
   Insn 299: point = 36
   Insn 422: point = 38
	   Creating copy r365<-r384@1
   Insn 298: point = 40
   Insn 297: point = 42
   Insn 296: point = 43
   Insn 421: point = 43
	Hard reg 21 is preferable by r364 with profit 1
   Insn 295: point = 44
	Hard reg 21 is preferable by r364 with profit 1
	Hard reg 0 is preferable by r364 with profit 1
   Insn 294: point = 46
   Insn 420: point = 47
	   Creating copy r363->r384@1
   Insn 293: point = 49
   Insn 292: point = 50
   Insn 291: point = 52
   Insn 290: point = 53
   Insn 289: point = 55
   Insn 288: point = 57
   Insn 287: point = 58
   Insn 286: point = 59
   Insn 285: point = 61
  BB 9
   Insn 407: point = 62
   Insn 275: point = 62
   Insn 274: point = 63
  BB 10
   Insn 282: point = 64
   Insn 281: point = 65
   Insn 280: point = 67
  BB 8
   Insn 269: point = 68
   Insn 268: point = 68
   Insn 267: point = 69
   Insn 266: point = 70
   Insn 265: point = 71
   Insn 419: point = 73
	   Creating copy r362<-r381@1
   Insn 264: point = 75
   Insn 263: point = 77
   Insn 262: point = 78
   Insn 418: point = 78
	Hard reg 21 is preferable by r361 with profit 1
   Insn 261: point = 79
	Hard reg 21 is preferable by r361 with profit 1
	Hard reg 0 is preferable by r361 with profit 1
   Insn 260: point = 81
   Insn 417: point = 82
	   Creating copy r360->r381@1
   Insn 259: point = 84
   Insn 258: point = 85
   Insn 257: point = 87
   Insn 256: point = 88
   Insn 255: point = 90
   Insn 254: point = 92
   Insn 253: point = 94
   Insn 252: point = 95
   Insn 251: point = 96
   Insn 416: point = 98
	   Creating copy r359<-r382@1
   Insn 250: point = 100
   Insn 249: point = 102
   Insn 248: point = 103
   Insn 415: point = 103
	Hard reg 21 is preferable by r358 with profit 1
   Insn 247: point = 104
	Hard reg 21 is preferable by r358 with profit 1
	Hard reg 0 is preferable by r358 with profit 1
   Insn 246: point = 106
   Insn 414: point = 107
	   Creating copy r357->r382@1
   Insn 245: point = 109
   Insn 244: point = 110
   Insn 243: point = 112
   Insn 242: point = 113
   Insn 241: point = 115
   Insn 240: point = 117
   Insn 239: point = 118
   Insn 238: point = 119
   Insn 237: point = 121
  BB 6
   Insn 404: point = 122
   Insn 227: point = 122
   Insn 226: point = 123
  BB 7
   Insn 234: point = 124
   Insn 233: point = 125
   Insn 232: point = 127
  BB 5
   Insn 221: point = 128
   Insn 220: point = 128
   Insn 219: point = 129
   Insn 218: point = 130
   Insn 217: point = 131
   Insn 216: point = 132
   Insn 215: point = 132
   Insn 214: point = 133
   Insn 213: point = 134
   Insn 212: point = 136
   Insn 211: point = 138
   Insn 210: point = 140
   Insn 209: point = 141
   Insn 208: point = 143
   Insn 207: point = 145
   Insn 206: point = 147
   Insn 205: point = 148
   Insn 204: point = 150
   Insn 203: point = 152
   Insn 202: point = 154
   Insn 201: point = 155
   Insn 200: point = 157
   Insn 199: point = 159
   Insn 198: point = 160
   Insn 197: point = 161
   Insn 196: point = 162
   Insn 195: point = 162
   Insn 194: point = 163
   Insn 193: point = 165
   Insn 192: point = 167
   Insn 191: point = 169
   Insn 190: point = 171
   Insn 189: point = 173
   Insn 188: point = 174
   Insn 187: point = 176
   Insn 186: point = 178
   Insn 185: point = 180
   Insn 184: point = 181
   Insn 183: point = 183
   Insn 182: point = 185
   Insn 181: point = 187
   Insn 180: point = 188
   Insn 179: point = 190
   Insn 178: point = 192
   Insn 177: point = 194
   Insn 176: point = 195
   Insn 175: point = 197
   Insn 174: point = 199
   Insn 173: point = 201
   Insn 172: point = 203
   Insn 171: point = 204
   Insn 170: point = 206
   Insn 169: point = 208
   Insn 168: point = 209
   Insn 167: point = 211
   Insn 166: point = 213
   Insn 165: point = 215
   Insn 164: point = 216
   Insn 163: point = 218
   Insn 162: point = 220
  BB 12
   Insn 378: point = 221
   Insn 377: point = 222
   Insn 437: point = 224
	   Creating copy r380<-r385@1
   Insn 376: point = 226
   Insn 375: point = 228
   Insn 374: point = 229
   Insn 436: point = 229
	Hard reg 21 is preferable by r379 with profit 1
   Insn 373: point = 230
	Hard reg 21 is preferable by r379 with profit 1
	Hard reg 0 is preferable by r379 with profit 1
   Insn 372: point = 232
   Insn 435: point = 233
	   Creating copy r378->r385@1
   Insn 371: point = 235
   Insn 370: point = 236
   Insn 369: point = 238
   Insn 368: point = 239
   Insn 367: point = 241
   Insn 366: point = 243
   Insn 365: point = 245
   Insn 364: point = 246
   Insn 363: point = 247
   Insn 434: point = 249
	   Creating copy r377<-r386@1
   Insn 362: point = 251
   Insn 361: point = 253
   Insn 360: point = 254
   Insn 433: point = 254
	Hard reg 21 is preferable by r376 with profit 1
   Insn 359: point = 255
	Hard reg 21 is preferable by r376 with profit 1
	Hard reg 0 is preferable by r376 with profit 1
   Insn 358: point = 257
   Insn 432: point = 258
	   Creating copy r375->r386@1
   Insn 357: point = 260
   Insn 356: point = 261
   Insn 355: point = 263
   Insn 354: point = 264
   Insn 353: point = 266
   Insn 352: point = 268
   Insn 351: point = 269
   Insn 350: point = 270
   Insn 431: point = 272
	   Creating copy r374<-r387@1
   Insn 349: point = 274
   Insn 348: point = 276
   Insn 347: point = 277
   Insn 430: point = 277
	Hard reg 21 is preferable by r373 with profit 1
   Insn 346: point = 278
	Hard reg 21 is preferable by r373 with profit 1
	Hard reg 0 is preferable by r373 with profit 1
   Insn 345: point = 280
   Insn 429: point = 281
	   Creating copy r372->r387@1
   Insn 344: point = 283
   Insn 343: point = 284
   Insn 342: point = 286
   Insn 341: point = 287
   Insn 340: point = 289
   Insn 339: point = 291
   Insn 338: point = 293
   Insn 337: point = 294
   Insn 336: point = 295
   Insn 428: point = 297
	   Creating copy r371<-r388@1
   Insn 335: point = 299
   Insn 334: point = 301
   Insn 333: point = 302
   Insn 427: point = 302
	Hard reg 21 is preferable by r370 with profit 1
   Insn 332: point = 303
	Hard reg 21 is preferable by r370 with profit 1
	Hard reg 0 is preferable by r370 with profit 1
   Insn 331: point = 305
   Insn 426: point = 306
	   Creating copy r369->r388@1
   Insn 330: point = 308
   Insn 329: point = 309
   Insn 328: point = 311
   Insn 327: point = 312
   Insn 326: point = 314
   Insn 325: point = 316
   Insn 324: point = 317
   Insn 323: point = 318
   Insn 322: point = 320
   Insn 321: point = 321
   Insn 320: point = 322
   Insn 319: point = 324
  BB 4
   Insn 160: point = 325
   Insn 159: point = 325
   Insn 158: point = 326
   Insn 157: point = 328
   Insn 156: point = 329
   Insn 155: point = 330
   Insn 154: point = 331
   Insn 153: point = 331
   Insn 152: point = 332
   Insn 151: point = 333
   Insn 150: point = 335
   Insn 149: point = 337
   Insn 148: point = 339
   Insn 147: point = 340
   Insn 146: point = 342
   Insn 145: point = 344
   Insn 144: point = 346
   Insn 143: point = 347
   Insn 142: point = 349
   Insn 141: point = 351
   Insn 140: point = 353
   Insn 139: point = 354
   Insn 138: point = 356
   Insn 137: point = 358
   Insn 136: point = 359
   Insn 135: point = 360
   Insn 134: point = 361
   Insn 133: point = 361
   Insn 132: point = 362
   Insn 131: point = 364
   Insn 130: point = 366
   Insn 129: point = 368
   Insn 128: point = 370
   Insn 127: point = 372
   Insn 126: point = 373
   Insn 125: point = 375
   Insn 124: point = 377
   Insn 123: point = 379
   Insn 122: point = 380
   Insn 121: point = 382
   Insn 120: point = 384
   Insn 119: point = 386
   Insn 118: point = 387
   Insn 117: point = 389
   Insn 116: point = 391
   Insn 115: point = 393
   Insn 114: point = 394
   Insn 113: point = 396
   Insn 112: point = 398
   Insn 111: point = 400
   Insn 110: point = 402
   Insn 109: point = 403
   Insn 108: point = 405
   Insn 107: point = 407
   Insn 106: point = 408
   Insn 105: point = 410
   Insn 104: point = 412
   Insn 103: point = 414
   Insn 102: point = 415
   Insn 101: point = 417
   Insn 100: point = 419
   Insn 99: point = 420
   Insn 98: point = 421
   Insn 97: point = 422
   Insn 96: point = 422
   Insn 95: point = 423
   Insn 94: point = 424
   Insn 93: point = 426
   Insn 92: point = 428
   Insn 91: point = 430
   Insn 90: point = 431
   Insn 89: point = 433
   Insn 88: point = 435
   Insn 87: point = 437
   Insn 86: point = 438
   Insn 85: point = 440
   Insn 84: point = 442
   Insn 83: point = 444
   Insn 82: point = 445
   Insn 81: point = 447
   Insn 80: point = 449
   Insn 79: point = 450
   Insn 78: point = 451
   Insn 77: point = 452
   Insn 76: point = 452
   Insn 75: point = 453
   Insn 74: point = 455
   Insn 73: point = 457
   Insn 72: point = 459
   Insn 71: point = 461
   Insn 70: point = 463
   Insn 69: point = 464
   Insn 68: point = 466
   Insn 67: point = 468
   Insn 66: point = 470
   Insn 65: point = 471
   Insn 64: point = 473
   Insn 63: point = 475
   Insn 62: point = 477
   Insn 61: point = 478
   Insn 60: point = 480
   Insn 59: point = 482
   Insn 58: point = 484
   Insn 57: point = 485
   Insn 56: point = 487
   Insn 55: point = 489
   Insn 54: point = 491
   Insn 53: point = 493
   Insn 52: point = 494
   Insn 51: point = 496
   Insn 50: point = 498
   Insn 49: point = 499
   Insn 48: point = 501
   Insn 47: point = 503
   Insn 46: point = 505
   Insn 45: point = 506
   Insn 44: point = 508
   Insn 43: point = 510
  BB 2
   Insn 35: point = 511
   Insn 34: point = 511
   Insn 33: point = 512
   Insn 32: point = 513
   Insn 31: point = 514
   Insn 30: point = 515
   Insn 29: point = 516
   Insn 28: point = 517
   Insn 27: point = 518
   Insn 26: point = 519
   Insn 25: point = 520
   Insn 24: point = 521
   Insn 23: point = 522
   Insn 22: point = 523
   Insn 21: point = 524
   Insn 20: point = 525
   Insn 19: point = 526
   Insn 18: point = 527
   Insn 17: point = 528
   Insn 16: point = 529
   Insn 15: point = 530
   Insn 14: point = 531
   Insn 13: point = 532
   Insn 12: point = 533
   Insn 11: point = 534
   Insn 10: point = 535
   Insn 6: point = 535
   Insn 5: point = 535
   Insn 4: point = 535
   Insn 3: point = 535
   Insn 2: point = 535
 r87: [6..7]
 r88: [4..5]
 r89: [507..508]
 r90: [504..506]
 r91: [502..503]
 r92: [500..501]
 r93: [486..499]
 r94: [495..496]
 r95: [492..494]
 r96: [490..491]
 r97: [488..489]
 r98: [486..487]
 r99: [454..485]
 r100: [481..482]
 r101: [479..480]
 r102: [476..478]
 r103: [474..475]
 r104: [472..473]
 r105: [456..471]
 r106: [467..468]
 r107: [465..466]
 r108: [462..464]
 r109: [460..461]
 r110: [458..459]
 r111: [456..457]
 r112: [454..455]
 r113: [452..453]
 r114: [446..447]
 r115: [443..445]
 r116: [441..442]
 r117: [439..440]
 r118: [423..438]
 r119: [434..435]
 r120: [432..433]
 r121: [429..431]
 r122: [427..428]
 r123: [425..426]
 r124: [422..424]
 r125: [416..417]
 r126: [413..415]
 r127: [411..412]
 r128: [409..410]
 r129: [395..408]
 r130: [404..405]
 r131: [401..403]
 r132: [399..400]
 r133: [397..398]
 r134: [395..396]
 r135: [363..394]
 r136: [390..391]
 r137: [388..389]
 r138: [385..387]
 r139: [383..384]
 r140: [381..382]
 r141: [365..380]
 r142: [376..377]
 r143: [374..375]
 r144: [371..373]
 r145: [369..370]
 r146: [367..368]
 r147: [365..366]
 r148: [363..364]
 r149: [361..362]
 r150: [355..356]
 r151: [352..354]
 r152: [350..351]
 r153: [348..349]
 r154: [332..347]
 r155: [343..344]
 r156: [341..342]
 r157: [338..340]
 r158: [336..337]
 r159: [334..335]
 r160: [331..333]
 r161: [325..326]
 r162: [217..218]
 r163: [214..216]
 r164: [212..213]
 r165: [210..211]
 r166: [196..209]
 r167: [205..206]
 r168: [202..204]
 r169: [200..201]
 r170: [198..199]
 r171: [196..197]
 r172: [164..195]
 r173: [191..192]
 r174: [189..190]
 r175: [186..188]
 r176: [184..185]
 r177: [182..183]
 r178: [166..181]
 r179: [177..178]
 r180: [175..176]
 r181: [172..174]
 r182: [170..171]
 r183: [168..169]
 r184: [166..167]
 r185: [164..165]
 r186: [162..163]
 r187: [156..157]
 r188: [153..155]
 r189: [151..152]
 r190: [149..150]
 r191: [133..148]
 r192: [144..145]
 r193: [142..143]
 r194: [139..141]
 r195: [137..138]
 r196: [135..136]
 r197: [132..134]
 r198: [114..115]
 r199: [111..113]
 r200: [95..110]
 r202: [101..102]
 r203: [97..100]
 r204: [95..96]
 r205: [91..92]
 r206: [89..90]
 r207: [86..88]
 r208: [70..85]
 r210: [76..77]
 r211: [72..75]
 r212: [70..71]
 r213: [54..55]
 r214: [51..53]
 r215: [35..50]
 r217: [41..42]
 r218: [37..40]
 r219: [35..36]
 r220: [31..32]
 r221: [29..30]
 r222: [26..28]
 r223: [10..25]
 r225: [16..17]
 r226: [12..15]
 r227: [10..11]
 r228: [313..314]
 r229: [310..312]
 r230: [294..309]
 r232: [300..301]
 r233: [296..299]
 r234: [294..295]
 r235: [290..291]
 r236: [288..289]
 r237: [285..287]
 r238: [269..284]
 r240: [275..276]
 r241: [271..274]
 r242: [269..270]
 r243: [265..266]
 r244: [262..264]
 r245: [246..261]
 r247: [252..253]
 r248: [248..251]
 r249: [246..247]
 r250: [242..243]
 r251: [240..241]
 r252: [237..239]
 r253: [221..236]
 r255: [227..228]
 r256: [223..226]
 r257: [221..222]
 r258: [2..3]
 r259: [0..1]
 r260: [533..534]
 r261: [531..532]
 r262: [529..530]
 r263: [527..528]
 r264: [525..526]
 r265: [523..524]
 r266: [521..522]
 r267: [519..520]
 r268: [517..518]
 r269: [515..516]
 r270: [513..514]
 r271: [511..512]
 r272: [8..9]
 r273: [509..510]
 r274: [504..505]
 r275: [497..498]
 r276: [492..493]
 r277: [483..484]
 r278: [476..477]
 r279: [469..470]
 r280: [462..463]
 r281: [450..451]
 r282: [448..449]
 r283: [443..444]
 r284: [436..437]
 r285: [429..430]
 r286: [420..421]
 r287: [418..419]
 r288: [413..414]
 r289: [406..407]
 r290: [401..402]
 r291: [392..393]
 r292: [385..386]
 r293: [378..379]
 r294: [371..372]
 r295: [359..360]
 r296: [357..358]
 r297: [352..353]
 r298: [345..346]
 r299: [338..339]
 r300: [329..330]
 r301: [327..328]
 r302: [219..220]
 r303: [214..215]
 r304: [207..208]
 r305: [202..203]
 r306: [193..194]
 r307: [186..187]
 r308: [179..180]
 r309: [172..173]
 r310: [160..161]
 r311: [158..159]
 r312: [153..154]
 r313: [146..147]
 r314: [139..140]
 r315: [130..131]
 r316: [128..129]
 r317: [122..123]
 r318: [124..125]
 r319: [126..127]
 r320: [118..119]
 r321: [120..121]
 r322: [116..117]
 r323: [111..112]
 r324: [105..106]
 r325: [93..94]
 r326: [86..87]
 r327: [80..81]
 r328: [68..69]
 r329: [62..63]
 r330: [64..65]
 r331: [66..67]
 r332: [58..59]
 r333: [60..61]
 r334: [56..57]
 r335: [51..52]
 r336: [45..46]
 r337: [33..34]
 r338: [26..27]
 r339: [20..21]
 r340: [321..322]
 r341: [323..324]
 r342: [317..318]
 r343: [319..320]
 r344: [315..316]
 r345: [310..311]
 r346: [304..305]
 r347: [292..293]
 r348: [285..286]
 r349: [279..280]
 r350: [267..268]
 r351: [262..263]
 r352: [256..257]
 r353: [244..245]
 r354: [237..238]
 r355: [231..232]
 r357: [108..109]
 r358: [103..104]
 r359: [97..98]
 r360: [83..84]
 r361: [78..79]
 r362: [72..73]
 r363: [48..49]
 r364: [43..44]
 r365: [37..38]
 r366: [23..24]
 r367: [18..19]
 r368: [12..13]
 r369: [307..308]
 r370: [302..303]
 r371: [296..297]
 r372: [282..283]
 r373: [277..278]
 r374: [271..272]
 r375: [259..260]
 r376: [254..255]
 r377: [248..249]
 r378: [234..235]
 r379: [229..230]
 r380: [223..224]
 r381: [74..82]
 r382: [99..107]
 r383: [14..22]
 r384: [39..47]
 r385: [225..233]
 r386: [250..258]
 r387: [273..281]
 r388: [298..306]
Compressing live ranges: from 535 to 478 - 89%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [450..451]
 r90: [448..449]
 r91: [446..447]
 r92: [444..445]
 r93: [432..443]
 r94: [440..441]
 r95: [438..439]
 r96: [436..437]
 r97: [434..435]
 r98: [432..433]
 r99: [404..431]
 r100: [428..429]
 r101: [426..427]
 r102: [424..425]
 r103: [422..423]
 r104: [420..421]
 r105: [406..419]
 r106: [416..417]
 r107: [414..415]
 r108: [412..413]
 r109: [410..411]
 r110: [408..409]
 r111: [406..407]
 r112: [404..405]
 r113: [402..403]
 r114: [396..397]
 r115: [394..395]
 r116: [392..393]
 r117: [390..391]
 r118: [376..389]
 r119: [386..387]
 r120: [384..385]
 r121: [382..383]
 r122: [380..381]
 r123: [378..379]
 r124: [376..377]
 r125: [370..371]
 r126: [368..369]
 r127: [366..367]
 r128: [364..365]
 r129: [352..363]
 r130: [360..361]
 r131: [358..359]
 r132: [356..357]
 r133: [354..355]
 r134: [352..353]
 r135: [324..351]
 r136: [348..349]
 r137: [346..347]
 r138: [344..345]
 r139: [342..343]
 r140: [340..341]
 r141: [326..339]
 r142: [336..337]
 r143: [334..335]
 r144: [332..333]
 r145: [330..331]
 r146: [328..329]
 r147: [326..327]
 r148: [324..325]
 r149: [322..323]
 r150: [316..317]
 r151: [314..315]
 r152: [312..313]
 r153: [310..311]
 r154: [296..309]
 r155: [306..307]
 r156: [304..305]
 r157: [302..303]
 r158: [300..301]
 r159: [298..299]
 r160: [296..297]
 r161: [290..291]
 r162: [194..195]
 r163: [192..193]
 r164: [190..191]
 r165: [188..189]
 r166: [176..187]
 r167: [184..185]
 r168: [182..183]
 r169: [180..181]
 r170: [178..179]
 r171: [176..177]
 r172: [148..175]
 r173: [172..173]
 r174: [170..171]
 r175: [168..169]
 r176: [166..167]
 r177: [164..165]
 r178: [150..163]
 r179: [160..161]
 r180: [158..159]
 r181: [156..157]
 r182: [154..155]
 r183: [152..153]
 r184: [150..151]
 r185: [148..149]
 r186: [146..147]
 r187: [140..141]
 r188: [138..139]
 r189: [136..137]
 r190: [134..135]
 r191: [120..133]
 r192: [130..131]
 r193: [128..129]
 r194: [126..127]
 r195: [124..125]
 r196: [122..123]
 r197: [120..121]
 r198: [102..103]
 r199: [100..101]
 r200: [86..99]
 r202: [92..93]
 r203: [88..91]
 r204: [86..87]
 r205: [82..83]
 r206: [80..81]
 r207: [78..79]
 r208: [64..77]
 r210: [70..71]
 r211: [66..69]
 r212: [64..65]
 r213: [48..49]
 r214: [46..47]
 r215: [32..45]
 r217: [38..39]
 r218: [34..37]
 r219: [32..33]
 r220: [28..29]
 r221: [26..27]
 r222: [24..25]
 r223: [10..23]
 r225: [16..17]
 r226: [12..15]
 r227: [10..11]
 r228: [278..279]
 r229: [276..277]
 r230: [262..275]
 r232: [268..269]
 r233: [264..267]
 r234: [262..263]
 r235: [258..259]
 r236: [256..257]
 r237: [254..255]
 r238: [240..253]
 r240: [246..247]
 r241: [242..245]
 r242: [240..241]
 r243: [236..237]
 r244: [234..235]
 r245: [220..233]
 r247: [226..227]
 r248: [222..225]
 r249: [220..221]
 r250: [216..217]
 r251: [214..215]
 r252: [212..213]
 r253: [198..211]
 r255: [204..205]
 r256: [200..203]
 r257: [198..199]
 r258: [2..3]
 r259: [0..1]
 r260: [476..477]
 r261: [474..475]
 r262: [472..473]
 r263: [470..471]
 r264: [468..469]
 r265: [466..467]
 r266: [464..465]
 r267: [462..463]
 r268: [460..461]
 r269: [458..459]
 r270: [456..457]
 r271: [454..455]
 r272: [8..9]
 r273: [452..453]
 r274: [448..449]
 r275: [442..443]
 r276: [438..439]
 r277: [430..431]
 r278: [424..425]
 r279: [418..419]
 r280: [412..413]
 r281: [400..401]
 r282: [398..399]
 r283: [394..395]
 r284: [388..389]
 r285: [382..383]
 r286: [374..375]
 r287: [372..373]
 r288: [368..369]
 r289: [362..363]
 r290: [358..359]
 r291: [350..351]
 r292: [344..345]
 r293: [338..339]
 r294: [332..333]
 r295: [320..321]
 r296: [318..319]
 r297: [314..315]
 r298: [308..309]
 r299: [302..303]
 r300: [294..295]
 r301: [292..293]
 r302: [196..197]
 r303: [192..193]
 r304: [186..187]
 r305: [182..183]
 r306: [174..175]
 r307: [168..169]
 r308: [162..163]
 r309: [156..157]
 r310: [144..145]
 r311: [142..143]
 r312: [138..139]
 r313: [132..133]
 r314: [126..127]
 r315: [118..119]
 r316: [116..117]
 r317: [110..111]
 r318: [112..113]
 r319: [114..115]
 r320: [106..107]
 r321: [108..109]
 r322: [104..105]
 r323: [100..101]
 r324: [96..97]
 r325: [84..85]
 r326: [78..79]
 r327: [74..75]
 r328: [62..63]
 r329: [56..57]
 r330: [58..59]
 r331: [60..61]
 r332: [52..53]
 r333: [54..55]
 r334: [50..51]
 r335: [46..47]
 r336: [42..43]
 r337: [30..31]
 r338: [24..25]
 r339: [20..21]
 r340: [286..287]
 r341: [288..289]
 r342: [282..283]
 r343: [284..285]
 r344: [280..281]
 r345: [276..277]
 r346: [272..273]
 r347: [260..261]
 r348: [254..255]
 r349: [250..251]
 r350: [238..239]
 r351: [234..235]
 r352: [230..231]
 r353: [218..219]
 r354: [212..213]
 r355: [208..209]
 r357: [98..99]
 r358: [94..95]
 r359: [88..89]
 r360: [76..77]
 r361: [72..73]
 r362: [66..67]
 r363: [44..45]
 r364: [40..41]
 r365: [34..35]
 r366: [22..23]
 r367: [18..19]
 r368: [12..13]
 r369: [274..275]
 r370: [270..271]
 r371: [264..265]
 r372: [252..253]
 r373: [248..249]
 r374: [242..243]
 r375: [232..233]
 r376: [228..229]
 r377: [222..223]
 r378: [210..211]
 r379: [206..207]
 r380: [200..201]
 r381: [68..75]
 r382: [90..97]
 r383: [14..21]
 r384: [36..43]
 r385: [202..209]
 r386: [224..231]
 r387: [244..251]
 r388: [266..273]

********** Assignment #1: **********

	 Assigning to 357 (cl=SSE_REGS, orig=201, freq=2, tfirst=357, tfreq=2)...
	   Assign 24 to reload r357 (freq=2)
	Hard reg 24 is preferable by r382 with profit 1
	Hard reg 24 is preferable by r359 with profit 1
	 Assigning to 359 (cl=SSE_REGS, orig=201, freq=2, tfirst=357, tfreq=2)...
	   Assign 24 to optional reload r359 (freq=2)
	Hard reg 24 is preferable by r382 with profit 2
	 Assigning to 382 (cl=SSE_REGS, orig=201, freq=2, tfirst=357, tfreq=2)...
	 Assigning to 360 (cl=SSE_REGS, orig=209, freq=2, tfirst=360, tfreq=2)...
	   Assign 25 to reload r360 (freq=2)
	Hard reg 25 is preferable by r381 with profit 1
	Hard reg 25 is preferable by r362 with profit 1
	 Assigning to 362 (cl=SSE_REGS, orig=209, freq=2, tfirst=360, tfreq=2)...
	   Assign 25 to optional reload r362 (freq=2)
	Hard reg 25 is preferable by r381 with profit 2
	 Assigning to 381 (cl=SSE_REGS, orig=209, freq=2, tfirst=360, tfreq=2)...
	 Assigning to 363 (cl=SSE_REGS, orig=216, freq=2, tfirst=363, tfreq=2)...
	   Assign 26 to reload r363 (freq=2)
	Hard reg 26 is preferable by r384 with profit 1
	Hard reg 26 is preferable by r365 with profit 1
	 Assigning to 365 (cl=SSE_REGS, orig=216, freq=2, tfirst=363, tfreq=2)...
	   Assign 26 to optional reload r365 (freq=2)
	Hard reg 26 is preferable by r384 with profit 2
	 Assigning to 384 (cl=SSE_REGS, orig=216, freq=2, tfirst=363, tfreq=2)...
	 Assigning to 366 (cl=SSE_REGS, orig=224, freq=2, tfirst=366, tfreq=2)...
	   Assign 27 to reload r366 (freq=2)
	Hard reg 27 is preferable by r383 with profit 1
	Hard reg 27 is preferable by r368 with profit 1
	 Assigning to 368 (cl=SSE_REGS, orig=224, freq=2, tfirst=366, tfreq=2)...
	   Assign 27 to optional reload r368 (freq=2)
	Hard reg 27 is preferable by r383 with profit 2
	 Assigning to 383 (cl=SSE_REGS, orig=224, freq=2, tfirst=366, tfreq=2)...
	 Assigning to 369 (cl=SSE_REGS, orig=231, freq=2, tfirst=369, tfreq=2)...
	   Assign 28 to reload r369 (freq=2)
	Hard reg 28 is preferable by r388 with profit 1
	Hard reg 28 is preferable by r371 with profit 1
	 Assigning to 371 (cl=SSE_REGS, orig=231, freq=2, tfirst=369, tfreq=2)...
	   Assign 28 to optional reload r371 (freq=2)
	Hard reg 28 is preferable by r388 with profit 2
	 Assigning to 388 (cl=SSE_REGS, orig=231, freq=2, tfirst=369, tfreq=2)...
	 Assigning to 372 (cl=SSE_REGS, orig=239, freq=2, tfirst=372, tfreq=2)...
	   Assign 24 to reload r372 (freq=2)
	Hard reg 24 is preferable by r387 with profit 1
	Hard reg 24 is preferable by r374 with profit 1
	 Assigning to 374 (cl=SSE_REGS, orig=239, freq=2, tfirst=372, tfreq=2)...
	   Assign 24 to optional reload r374 (freq=2)
	Hard reg 24 is preferable by r387 with profit 2
	 Assigning to 387 (cl=SSE_REGS, orig=239, freq=2, tfirst=372, tfreq=2)...
	 Assigning to 375 (cl=SSE_REGS, orig=246, freq=2, tfirst=375, tfreq=2)...
	   Assign 25 to reload r375 (freq=2)
	Hard reg 25 is preferable by r386 with profit 1
	Hard reg 25 is preferable by r377 with profit 1
	 Assigning to 377 (cl=SSE_REGS, orig=246, freq=2, tfirst=375, tfreq=2)...
	   Assign 25 to optional reload r377 (freq=2)
	Hard reg 25 is preferable by r386 with profit 2
	 Assigning to 386 (cl=SSE_REGS, orig=246, freq=2, tfirst=375, tfreq=2)...
	 Assigning to 378 (cl=SSE_REGS, orig=254, freq=2, tfirst=378, tfreq=2)...
	   Assign 26 to reload r378 (freq=2)
	Hard reg 26 is preferable by r385 with profit 1
	Hard reg 26 is preferable by r380 with profit 1
	 Assigning to 380 (cl=SSE_REGS, orig=254, freq=2, tfirst=378, tfreq=2)...
	   Assign 26 to optional reload r380 (freq=2)
	Hard reg 26 is preferable by r385 with profit 2
	 Assigning to 385 (cl=SSE_REGS, orig=254, freq=2, tfirst=378, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  419: r362:SF=r209:SF
      REG_DEAD r209:SF
   Insn after restoring regs:
  417: r209:SF=r360:SF
      REG_DEAD r360:SF
   Insn after restoring regs:
  416: r359:SF=r201:SF
      REG_DEAD r201:SF
   Insn after restoring regs:
  414: r201:SF=r357:SF
      REG_DEAD r357:SF
   Insn after restoring regs:
  425: r368:SF=r224:SF
      REG_DEAD r224:SF
   Insn after restoring regs:
  423: r224:SF=r366:SF
      REG_DEAD r366:SF
   Insn after restoring regs:
  422: r365:SF=r216:SF
      REG_DEAD r216:SF
   Insn after restoring regs:
  420: r216:SF=r363:SF
      REG_DEAD r363:SF
   Insn after restoring regs:
  437: r380:SF=r254:SF
      REG_DEAD r254:SF
   Insn after restoring regs:
  435: r254:SF=r378:SF
      REG_DEAD r378:SF
   Insn after restoring regs:
  434: r377:SF=r246:SF
      REG_DEAD r246:SF
   Insn after restoring regs:
  432: r246:SF=r375:SF
      REG_DEAD r375:SF
   Insn after restoring regs:
  431: r374:SF=r239:SF
      REG_DEAD r239:SF
   Insn after restoring regs:
  429: r239:SF=r372:SF
      REG_DEAD r372:SF
   Insn after restoring regs:
  428: r371:SF=r231:SF
      REG_DEAD r231:SF
   Insn after restoring regs:
  426: r231:SF=r369:SF
      REG_DEAD r369:SF
Remove optional reload reg 359
  Restoring original insn:
  251: r204:SF=r203:SF*r201:SF
      REG_DEAD r201:SF
      REG_DEAD r203:SF
  Deleting move 416
  416: r359:SF=r201:SF
      REG_DEAD r201:SF
deleting insn with uid = 416.
Remove optional reload reg 362
  Restoring original insn:
  265: r212:SF=r211:SF*r209:SF
      REG_DEAD r209:SF
      REG_DEAD r211:SF
  Deleting move 419
  419: r362:SF=r209:SF
      REG_DEAD r209:SF
deleting insn with uid = 419.
Remove optional reload reg 365
  Restoring original insn:
  299: r219:SF=r218:SF*r216:SF
      REG_DEAD r216:SF
      REG_DEAD r218:SF
  Deleting move 422
  422: r365:SF=r216:SF
      REG_DEAD r216:SF
deleting insn with uid = 422.
Remove optional reload reg 368
  Restoring original insn:
  313: r227:SF=r226:SF*r224:SF
      REG_DEAD r224:SF
      REG_DEAD r226:SF
  Deleting move 425
  425: r368:SF=r224:SF
      REG_DEAD r224:SF
deleting insn with uid = 425.
Remove optional reload reg 371
  Restoring original insn:
  336: r234:SF=r233:SF*r231:SF
      REG_DEAD r231:SF
      REG_DEAD r233:SF
  Deleting move 428
  428: r371:SF=r231:SF
      REG_DEAD r231:SF
deleting insn with uid = 428.
Remove optional reload reg 374
  Restoring original insn:
  350: r242:SF=r241:SF*r239:SF
      REG_DEAD r239:SF
      REG_DEAD r241:SF
  Deleting move 431
  431: r374:SF=r239:SF
      REG_DEAD r239:SF
deleting insn with uid = 431.
Remove optional reload reg 377
  Restoring original insn:
  363: r249:SF=r248:SF*r246:SF
      REG_DEAD r246:SF
      REG_DEAD r248:SF
  Deleting move 434
  434: r377:SF=r246:SF
      REG_DEAD r246:SF
deleting insn with uid = 434.
Remove optional reload reg 380
  Restoring original insn:
  377: r257:SF=r256:SF*r254:SF
      REG_DEAD r254:SF
      REG_DEAD r256:SF
  Deleting move 437
  437: r380:SF=r254:SF
      REG_DEAD r254:SF
deleting insn with uid = 437.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 377:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=389 from oldreg=254, assigning class SSE_REGS to r389
      Making reload reg 389 for reg 254 optional
  377: r257:SF=r256:SF*r389:SF
      REG_DEAD r254:SF
      REG_DEAD r256:SF
    Inserting insn reload before:
  446: r389:SF=r254:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 446:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 363:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=390 from oldreg=246, assigning class SSE_REGS to r390
      Making reload reg 390 for reg 246 optional
  363: r249:SF=r248:SF*r390:SF
      REG_DEAD r246:SF
      REG_DEAD r248:SF
    Inserting insn reload before:
  447: r390:SF=r246:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 447:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 350:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=391 from oldreg=239, assigning class SSE_REGS to r391
      Making reload reg 391 for reg 239 optional
  350: r242:SF=r241:SF*r391:SF
      REG_DEAD r239:SF
      REG_DEAD r241:SF
    Inserting insn reload before:
  448: r391:SF=r239:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 448:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 336:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=392 from oldreg=231, assigning class SSE_REGS to r392
      Making reload reg 392 for reg 231 optional
  336: r234:SF=r233:SF*r392:SF
      REG_DEAD r231:SF
      REG_DEAD r233:SF
    Inserting insn reload before:
  449: r392:SF=r231:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 449:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 313:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=393 from oldreg=224, assigning class SSE_REGS to r393
      Making reload reg 393 for reg 224 optional
  313: r227:SF=r226:SF*r393:SF
      REG_DEAD r224:SF
      REG_DEAD r226:SF
    Inserting insn reload before:
  450: r393:SF=r224:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 450:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 299:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=394 from oldreg=216, assigning class SSE_REGS to r394
      Making reload reg 394 for reg 216 optional
  299: r219:SF=r218:SF*r394:SF
      REG_DEAD r216:SF
      REG_DEAD r218:SF
    Inserting insn reload before:
  451: r394:SF=r216:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 451:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 265:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=395 from oldreg=209, assigning class SSE_REGS to r395
      Making reload reg 395 for reg 209 optional
  265: r212:SF=r211:SF*r395:SF
      REG_DEAD r209:SF
      REG_DEAD r211:SF
    Inserting insn reload before:
  452: r395:SF=r209:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 452:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 251:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=396 from oldreg=201, assigning class SSE_REGS to r396
      Making reload reg 396 for reg 201 optional
  251: r204:SF=r203:SF*r396:SF
      REG_DEAD r201:SF
      REG_DEAD r203:SF
    Inserting insn reload before:
  453: r396:SF=r201:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 453:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=397 from oldreg=209, assigning class SSE_REGS to inheritance r397
    Original reg change 209->397 (bb8):
  417: r397:SF=r360:SF
      REG_DEAD r360:SF
    Add original<-inheritance after:
  454: r209:SF=r397:SF

    Inheritance reuse change 209->397 (bb8):
  452: r395:SF=r397:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=398 from oldreg=201, assigning class SSE_REGS to inheritance r398
    Original reg change 201->398 (bb8):
  414: r398:SF=r357:SF
      REG_DEAD r357:SF
    Add original<-inheritance after:
  455: r201:SF=r398:SF

    Inheritance reuse change 201->398 (bb8):
  453: r396:SF=r398:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   454: r209:SF=r397:SF
deleting insn with uid = 454.
	    Removing dead insn:
   455: r201:SF=r398:SF
deleting insn with uid = 455.
EBB 9
EBB 10
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=399 from oldreg=224, assigning class SSE_REGS to inheritance r399
    Original reg change 224->399 (bb11):
  423: r399:SF=r366:SF
      REG_DEAD r366:SF
    Add original<-inheritance after:
  456: r224:SF=r399:SF

    Inheritance reuse change 224->399 (bb11):
  450: r393:SF=r399:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=400 from oldreg=216, assigning class SSE_REGS to inheritance r400
    Original reg change 216->400 (bb11):
  420: r400:SF=r363:SF
      REG_DEAD r363:SF
    Add original<-inheritance after:
  457: r216:SF=r400:SF

    Inheritance reuse change 216->400 (bb11):
  451: r394:SF=r400:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   456: r224:SF=r399:SF
deleting insn with uid = 456.
	    Removing dead insn:
   457: r216:SF=r400:SF
deleting insn with uid = 457.
EBB 12
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=401 from oldreg=254, assigning class SSE_REGS to inheritance r401
    Original reg change 254->401 (bb12):
  435: r401:SF=r378:SF
      REG_DEAD r378:SF
    Add original<-inheritance after:
  458: r254:SF=r401:SF

    Inheritance reuse change 254->401 (bb12):
  446: r389:SF=r401:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=402 from oldreg=246, assigning class SSE_REGS to inheritance r402
    Original reg change 246->402 (bb12):
  432: r402:SF=r375:SF
      REG_DEAD r375:SF
    Add original<-inheritance after:
  459: r246:SF=r402:SF

    Inheritance reuse change 246->402 (bb12):
  447: r390:SF=r402:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=403 from oldreg=239, assigning class SSE_REGS to inheritance r403
    Original reg change 239->403 (bb12):
  429: r403:SF=r372:SF
      REG_DEAD r372:SF
    Add original<-inheritance after:
  460: r239:SF=r403:SF

    Inheritance reuse change 239->403 (bb12):
  448: r391:SF=r403:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=404 from oldreg=231, assigning class SSE_REGS to inheritance r404
    Original reg change 231->404 (bb12):
  426: r404:SF=r369:SF
      REG_DEAD r369:SF
    Add original<-inheritance after:
  461: r231:SF=r404:SF

    Inheritance reuse change 231->404 (bb12):
  449: r392:SF=r404:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   458: r254:SF=r401:SF
deleting insn with uid = 458.
	    Removing dead insn:
   459: r246:SF=r402:SF
deleting insn with uid = 459.
	    Removing dead insn:
   460: r239:SF=r403:SF
deleting insn with uid = 460.
	    Removing dead insn:
   461: r231:SF=r404:SF
deleting insn with uid = 461.
EBB 13
EBB 14

********** Pseudo live ranges #2: **********

  BB 14
   Insn 395: point = 0
   Insn 394: point = 0
   Insn 390: point = 1
   Insn 387: point = 3
  BB 3
   Insn 41: point = 4
   Insn 40: point = 4
   Insn 39: point = 5
   Insn 38: point = 7
   Insn 37: point = 9
  BB 13
   Insn 411: point = 10
   Insn 381: point = 10
  BB 11
   Insn 409: point = 10
   Insn 314: point = 10
   Insn 313: point = 11
   Insn 450: point = 13
	   Creating copy r393<-r399@1
   Insn 312: point = 15
   Insn 311: point = 17
   Insn 310: point = 18
   Insn 424: point = 18
	Hard reg 21 is preferable by r367 with profit 1
   Insn 309: point = 19
	Hard reg 21 is preferable by r367 with profit 1
	Hard reg 0 is preferable by r367 with profit 1
   Insn 308: point = 21
   Insn 423: point = 22
	   Creating copy r366->r399@1
   Insn 307: point = 24
   Insn 306: point = 25
   Insn 305: point = 27
   Insn 304: point = 28
   Insn 303: point = 30
   Insn 302: point = 32
   Insn 301: point = 34
   Insn 300: point = 35
   Insn 299: point = 36
   Insn 451: point = 38
	   Creating copy r394<-r400@1
   Insn 298: point = 40
   Insn 297: point = 42
   Insn 296: point = 43
   Insn 421: point = 43
	Hard reg 21 is preferable by r364 with profit 1
   Insn 295: point = 44
	Hard reg 21 is preferable by r364 with profit 1
	Hard reg 0 is preferable by r364 with profit 1
   Insn 294: point = 46
   Insn 420: point = 47
	   Creating copy r363->r400@1
   Insn 293: point = 49
   Insn 292: point = 50
   Insn 291: point = 52
   Insn 290: point = 53
   Insn 289: point = 55
   Insn 288: point = 57
   Insn 287: point = 58
   Insn 286: point = 59
   Insn 285: point = 61
  BB 9
   Insn 407: point = 62
   Insn 275: point = 62
   Insn 274: point = 63
  BB 10
   Insn 282: point = 64
   Insn 281: point = 65
   Insn 280: point = 67
  BB 8
   Insn 269: point = 68
   Insn 268: point = 68
   Insn 267: point = 69
   Insn 266: point = 70
   Insn 265: point = 71
   Insn 452: point = 73
	   Creating copy r395<-r397@1
   Insn 264: point = 75
   Insn 263: point = 77
   Insn 262: point = 78
   Insn 418: point = 78
	Hard reg 21 is preferable by r361 with profit 1
   Insn 261: point = 79
	Hard reg 21 is preferable by r361 with profit 1
	Hard reg 0 is preferable by r361 with profit 1
   Insn 260: point = 81
   Insn 417: point = 82
	   Creating copy r360->r397@1
   Insn 259: point = 84
   Insn 258: point = 85
   Insn 257: point = 87
   Insn 256: point = 88
   Insn 255: point = 90
   Insn 254: point = 92
   Insn 253: point = 94
   Insn 252: point = 95
   Insn 251: point = 96
   Insn 453: point = 98
	   Creating copy r396<-r398@1
   Insn 250: point = 100
   Insn 249: point = 102
   Insn 248: point = 103
   Insn 415: point = 103
	Hard reg 21 is preferable by r358 with profit 1
   Insn 247: point = 104
	Hard reg 21 is preferable by r358 with profit 1
	Hard reg 0 is preferable by r358 with profit 1
   Insn 246: point = 106
   Insn 414: point = 107
	   Creating copy r357->r398@1
   Insn 245: point = 109
   Insn 244: point = 110
   Insn 243: point = 112
   Insn 242: point = 113
   Insn 241: point = 115
   Insn 240: point = 117
   Insn 239: point = 118
   Insn 238: point = 119
   Insn 237: point = 121
  BB 6
   Insn 404: point = 122
   Insn 227: point = 122
   Insn 226: point = 123
  BB 7
   Insn 234: point = 124
   Insn 233: point = 125
   Insn 232: point = 127
  BB 5
   Insn 221: point = 128
   Insn 220: point = 128
   Insn 219: point = 129
   Insn 218: point = 130
   Insn 217: point = 131
   Insn 216: point = 132
   Insn 215: point = 132
   Insn 214: point = 133
   Insn 213: point = 134
   Insn 212: point = 136
   Insn 211: point = 138
   Insn 210: point = 140
   Insn 209: point = 141
   Insn 208: point = 143
   Insn 207: point = 145
   Insn 206: point = 147
   Insn 205: point = 148
   Insn 204: point = 150
   Insn 203: point = 152
   Insn 202: point = 154
   Insn 201: point = 155
   Insn 200: point = 157
   Insn 199: point = 159
   Insn 198: point = 160
   Insn 197: point = 161
   Insn 196: point = 162
   Insn 195: point = 162
   Insn 194: point = 163
   Insn 193: point = 165
   Insn 192: point = 167
   Insn 191: point = 169
   Insn 190: point = 171
   Insn 189: point = 173
   Insn 188: point = 174
   Insn 187: point = 176
   Insn 186: point = 178
   Insn 185: point = 180
   Insn 184: point = 181
   Insn 183: point = 183
   Insn 182: point = 185
   Insn 181: point = 187
   Insn 180: point = 188
   Insn 179: point = 190
   Insn 178: point = 192
   Insn 177: point = 194
   Insn 176: point = 195
   Insn 175: point = 197
   Insn 174: point = 199
   Insn 173: point = 201
   Insn 172: point = 203
   Insn 171: point = 204
   Insn 170: point = 206
   Insn 169: point = 208
   Insn 168: point = 209
   Insn 167: point = 211
   Insn 166: point = 213
   Insn 165: point = 215
   Insn 164: point = 216
   Insn 163: point = 218
   Insn 162: point = 220
  BB 12
   Insn 378: point = 221
   Insn 377: point = 222
   Insn 446: point = 224
	   Creating copy r389<-r401@1
   Insn 376: point = 226
   Insn 375: point = 228
   Insn 374: point = 229
   Insn 436: point = 229
	Hard reg 21 is preferable by r379 with profit 1
   Insn 373: point = 230
	Hard reg 21 is preferable by r379 with profit 1
	Hard reg 0 is preferable by r379 with profit 1
   Insn 372: point = 232
   Insn 435: point = 233
	   Creating copy r378->r401@1
   Insn 371: point = 235
   Insn 370: point = 236
   Insn 369: point = 238
   Insn 368: point = 239
   Insn 367: point = 241
   Insn 366: point = 243
   Insn 365: point = 245
   Insn 364: point = 246
   Insn 363: point = 247
   Insn 447: point = 249
	   Creating copy r390<-r402@1
   Insn 362: point = 251
   Insn 361: point = 253
   Insn 360: point = 254
   Insn 433: point = 254
	Hard reg 21 is preferable by r376 with profit 1
   Insn 359: point = 255
	Hard reg 21 is preferable by r376 with profit 1
	Hard reg 0 is preferable by r376 with profit 1
   Insn 358: point = 257
   Insn 432: point = 258
	   Creating copy r375->r402@1
   Insn 357: point = 260
   Insn 356: point = 261
   Insn 355: point = 263
   Insn 354: point = 264
   Insn 353: point = 266
   Insn 352: point = 268
   Insn 351: point = 269
   Insn 350: point = 270
   Insn 448: point = 272
	   Creating copy r391<-r403@1
   Insn 349: point = 274
   Insn 348: point = 276
   Insn 347: point = 277
   Insn 430: point = 277
	Hard reg 21 is preferable by r373 with profit 1
   Insn 346: point = 278
	Hard reg 21 is preferable by r373 with profit 1
	Hard reg 0 is preferable by r373 with profit 1
   Insn 345: point = 280
   Insn 429: point = 281
	   Creating copy r372->r403@1
   Insn 344: point = 283
   Insn 343: point = 284
   Insn 342: point = 286
   Insn 341: point = 287
   Insn 340: point = 289
   Insn 339: point = 291
   Insn 338: point = 293
   Insn 337: point = 294
   Insn 336: point = 295
   Insn 449: point = 297
	   Creating copy r392<-r404@1
   Insn 335: point = 299
   Insn 334: point = 301
   Insn 333: point = 302
   Insn 427: point = 302
	Hard reg 21 is preferable by r370 with profit 1
   Insn 332: point = 303
	Hard reg 21 is preferable by r370 with profit 1
	Hard reg 0 is preferable by r370 with profit 1
   Insn 331: point = 305
   Insn 426: point = 306
	   Creating copy r369->r404@1
   Insn 330: point = 308
   Insn 329: point = 309
   Insn 328: point = 311
   Insn 327: point = 312
   Insn 326: point = 314
   Insn 325: point = 316
   Insn 324: point = 317
   Insn 323: point = 318
   Insn 322: point = 320
   Insn 321: point = 321
   Insn 320: point = 322
   Insn 319: point = 324
  BB 4
   Insn 160: point = 325
   Insn 159: point = 325
   Insn 158: point = 326
   Insn 157: point = 328
   Insn 156: point = 329
   Insn 155: point = 330
   Insn 154: point = 331
   Insn 153: point = 331
   Insn 152: point = 332
   Insn 151: point = 333
   Insn 150: point = 335
   Insn 149: point = 337
   Insn 148: point = 339
   Insn 147: point = 340
   Insn 146: point = 342
   Insn 145: point = 344
   Insn 144: point = 346
   Insn 143: point = 347
   Insn 142: point = 349
   Insn 141: point = 351
   Insn 140: point = 353
   Insn 139: point = 354
   Insn 138: point = 356
   Insn 137: point = 358
   Insn 136: point = 359
   Insn 135: point = 360
   Insn 134: point = 361
   Insn 133: point = 361
   Insn 132: point = 362
   Insn 131: point = 364
   Insn 130: point = 366
   Insn 129: point = 368
   Insn 128: point = 370
   Insn 127: point = 372
   Insn 126: point = 373
   Insn 125: point = 375
   Insn 124: point = 377
   Insn 123: point = 379
   Insn 122: point = 380
   Insn 121: point = 382
   Insn 120: point = 384
   Insn 119: point = 386
   Insn 118: point = 387
   Insn 117: point = 389
   Insn 116: point = 391
   Insn 115: point = 393
   Insn 114: point = 394
   Insn 113: point = 396
   Insn 112: point = 398
   Insn 111: point = 400
   Insn 110: point = 402
   Insn 109: point = 403
   Insn 108: point = 405
   Insn 107: point = 407
   Insn 106: point = 408
   Insn 105: point = 410
   Insn 104: point = 412
   Insn 103: point = 414
   Insn 102: point = 415
   Insn 101: point = 417
   Insn 100: point = 419
   Insn 99: point = 420
   Insn 98: point = 421
   Insn 97: point = 422
   Insn 96: point = 422
   Insn 95: point = 423
   Insn 94: point = 424
   Insn 93: point = 426
   Insn 92: point = 428
   Insn 91: point = 430
   Insn 90: point = 431
   Insn 89: point = 433
   Insn 88: point = 435
   Insn 87: point = 437
   Insn 86: point = 438
   Insn 85: point = 440
   Insn 84: point = 442
   Insn 83: point = 444
   Insn 82: point = 445
   Insn 81: point = 447
   Insn 80: point = 449
   Insn 79: point = 450
   Insn 78: point = 451
   Insn 77: point = 452
   Insn 76: point = 452
   Insn 75: point = 453
   Insn 74: point = 455
   Insn 73: point = 457
   Insn 72: point = 459
   Insn 71: point = 461
   Insn 70: point = 463
   Insn 69: point = 464
   Insn 68: point = 466
   Insn 67: point = 468
   Insn 66: point = 470
   Insn 65: point = 471
   Insn 64: point = 473
   Insn 63: point = 475
   Insn 62: point = 477
   Insn 61: point = 478
   Insn 60: point = 480
   Insn 59: point = 482
   Insn 58: point = 484
   Insn 57: point = 485
   Insn 56: point = 487
   Insn 55: point = 489
   Insn 54: point = 491
   Insn 53: point = 493
   Insn 52: point = 494
   Insn 51: point = 496
   Insn 50: point = 498
   Insn 49: point = 499
   Insn 48: point = 501
   Insn 47: point = 503
   Insn 46: point = 505
   Insn 45: point = 506
   Insn 44: point = 508
   Insn 43: point = 510
  BB 2
   Insn 35: point = 511
   Insn 34: point = 511
   Insn 33: point = 512
   Insn 32: point = 513
   Insn 31: point = 514
   Insn 30: point = 515
   Insn 29: point = 516
   Insn 28: point = 517
   Insn 27: point = 518
   Insn 26: point = 519
   Insn 25: point = 520
   Insn 24: point = 521
   Insn 23: point = 522
   Insn 22: point = 523
   Insn 21: point = 524
   Insn 20: point = 525
   Insn 19: point = 526
   Insn 18: point = 527
   Insn 17: point = 528
   Insn 16: point = 529
   Insn 15: point = 530
   Insn 14: point = 531
   Insn 13: point = 532
   Insn 12: point = 533
   Insn 11: point = 534
   Insn 10: point = 535
   Insn 6: point = 535
   Insn 5: point = 535
   Insn 4: point = 535
   Insn 3: point = 535
   Insn 2: point = 535
 r87: [6..7]
 r88: [4..5]
 r89: [507..508]
 r90: [504..506]
 r91: [502..503]
 r92: [500..501]
 r93: [486..499]
 r94: [495..496]
 r95: [492..494]
 r96: [490..491]
 r97: [488..489]
 r98: [486..487]
 r99: [454..485]
 r100: [481..482]
 r101: [479..480]
 r102: [476..478]
 r103: [474..475]
 r104: [472..473]
 r105: [456..471]
 r106: [467..468]
 r107: [465..466]
 r108: [462..464]
 r109: [460..461]
 r110: [458..459]
 r111: [456..457]
 r112: [454..455]
 r113: [452..453]
 r114: [446..447]
 r115: [443..445]
 r116: [441..442]
 r117: [439..440]
 r118: [423..438]
 r119: [434..435]
 r120: [432..433]
 r121: [429..431]
 r122: [427..428]
 r123: [425..426]
 r124: [422..424]
 r125: [416..417]
 r126: [413..415]
 r127: [411..412]
 r128: [409..410]
 r129: [395..408]
 r130: [404..405]
 r131: [401..403]
 r132: [399..400]
 r133: [397..398]
 r134: [395..396]
 r135: [363..394]
 r136: [390..391]
 r137: [388..389]
 r138: [385..387]
 r139: [383..384]
 r140: [381..382]
 r141: [365..380]
 r142: [376..377]
 r143: [374..375]
 r144: [371..373]
 r145: [369..370]
 r146: [367..368]
 r147: [365..366]
 r148: [363..364]
 r149: [361..362]
 r150: [355..356]
 r151: [352..354]
 r152: [350..351]
 r153: [348..349]
 r154: [332..347]
 r155: [343..344]
 r156: [341..342]
 r157: [338..340]
 r158: [336..337]
 r159: [334..335]
 r160: [331..333]
 r161: [325..326]
 r162: [217..218]
 r163: [214..216]
 r164: [212..213]
 r165: [210..211]
 r166: [196..209]
 r167: [205..206]
 r168: [202..204]
 r169: [200..201]
 r170: [198..199]
 r171: [196..197]
 r172: [164..195]
 r173: [191..192]
 r174: [189..190]
 r175: [186..188]
 r176: [184..185]
 r177: [182..183]
 r178: [166..181]
 r179: [177..178]
 r180: [175..176]
 r181: [172..174]
 r182: [170..171]
 r183: [168..169]
 r184: [166..167]
 r185: [164..165]
 r186: [162..163]
 r187: [156..157]
 r188: [153..155]
 r189: [151..152]
 r190: [149..150]
 r191: [133..148]
 r192: [144..145]
 r193: [142..143]
 r194: [139..141]
 r195: [137..138]
 r196: [135..136]
 r197: [132..134]
 r198: [114..115]
 r199: [111..113]
 r200: [95..110]
 r202: [101..102]
 r203: [97..100]
 r204: [95..96]
 r205: [91..92]
 r206: [89..90]
 r207: [86..88]
 r208: [70..85]
 r210: [76..77]
 r211: [72..75]
 r212: [70..71]
 r213: [54..55]
 r214: [51..53]
 r215: [35..50]
 r217: [41..42]
 r218: [37..40]
 r219: [35..36]
 r220: [31..32]
 r221: [29..30]
 r222: [26..28]
 r223: [10..25]
 r225: [16..17]
 r226: [12..15]
 r227: [10..11]
 r228: [313..314]
 r229: [310..312]
 r230: [294..309]
 r232: [300..301]
 r233: [296..299]
 r234: [294..295]
 r235: [290..291]
 r236: [288..289]
 r237: [285..287]
 r238: [269..284]
 r240: [275..276]
 r241: [271..274]
 r242: [269..270]
 r243: [265..266]
 r244: [262..264]
 r245: [246..261]
 r247: [252..253]
 r248: [248..251]
 r249: [246..247]
 r250: [242..243]
 r251: [240..241]
 r252: [237..239]
 r253: [221..236]
 r255: [227..228]
 r256: [223..226]
 r257: [221..222]
 r258: [2..3]
 r259: [0..1]
 r260: [533..534]
 r261: [531..532]
 r262: [529..530]
 r263: [527..528]
 r264: [525..526]
 r265: [523..524]
 r266: [521..522]
 r267: [519..520]
 r268: [517..518]
 r269: [515..516]
 r270: [513..514]
 r271: [511..512]
 r272: [8..9]
 r273: [509..510]
 r274: [504..505]
 r275: [497..498]
 r276: [492..493]
 r277: [483..484]
 r278: [476..477]
 r279: [469..470]
 r280: [462..463]
 r281: [450..451]
 r282: [448..449]
 r283: [443..444]
 r284: [436..437]
 r285: [429..430]
 r286: [420..421]
 r287: [418..419]
 r288: [413..414]
 r289: [406..407]
 r290: [401..402]
 r291: [392..393]
 r292: [385..386]
 r293: [378..379]
 r294: [371..372]
 r295: [359..360]
 r296: [357..358]
 r297: [352..353]
 r298: [345..346]
 r299: [338..339]
 r300: [329..330]
 r301: [327..328]
 r302: [219..220]
 r303: [214..215]
 r304: [207..208]
 r305: [202..203]
 r306: [193..194]
 r307: [186..187]
 r308: [179..180]
 r309: [172..173]
 r310: [160..161]
 r311: [158..159]
 r312: [153..154]
 r313: [146..147]
 r314: [139..140]
 r315: [130..131]
 r316: [128..129]
 r317: [122..123]
 r318: [124..125]
 r319: [126..127]
 r320: [118..119]
 r321: [120..121]
 r322: [116..117]
 r323: [111..112]
 r324: [105..106]
 r325: [93..94]
 r326: [86..87]
 r327: [80..81]
 r328: [68..69]
 r329: [62..63]
 r330: [64..65]
 r331: [66..67]
 r332: [58..59]
 r333: [60..61]
 r334: [56..57]
 r335: [51..52]
 r336: [45..46]
 r337: [33..34]
 r338: [26..27]
 r339: [20..21]
 r340: [321..322]
 r341: [323..324]
 r342: [317..318]
 r343: [319..320]
 r344: [315..316]
 r345: [310..311]
 r346: [304..305]
 r347: [292..293]
 r348: [285..286]
 r349: [279..280]
 r350: [267..268]
 r351: [262..263]
 r352: [256..257]
 r353: [244..245]
 r354: [237..238]
 r355: [231..232]
 r357: [108..109]
 r358: [103..104]
 r360: [83..84]
 r361: [78..79]
 r363: [48..49]
 r364: [43..44]
 r366: [23..24]
 r367: [18..19]
 r369: [307..308]
 r370: [302..303]
 r372: [282..283]
 r373: [277..278]
 r375: [259..260]
 r376: [254..255]
 r378: [234..235]
 r379: [229..230]
 r389: [223..224]
 r390: [248..249]
 r391: [271..272]
 r392: [296..297]
 r393: [12..13]
 r394: [37..38]
 r395: [72..73]
 r396: [97..98]
 r397: [74..82]
 r398: [99..107]
 r399: [14..22]
 r400: [39..47]
 r401: [225..233]
 r402: [250..258]
 r403: [273..281]
 r404: [298..306]
Compressing live ranges: from 535 to 478 - 89%
Ranges after the compression:
 r87: [6..7]
 r88: [4..5]
 r89: [450..451]
 r90: [448..449]
 r91: [446..447]
 r92: [444..445]
 r93: [432..443]
 r94: [440..441]
 r95: [438..439]
 r96: [436..437]
 r97: [434..435]
 r98: [432..433]
 r99: [404..431]
 r100: [428..429]
 r101: [426..427]
 r102: [424..425]
 r103: [422..423]
 r104: [420..421]
 r105: [406..419]
 r106: [416..417]
 r107: [414..415]
 r108: [412..413]
 r109: [410..411]
 r110: [408..409]
 r111: [406..407]
 r112: [404..405]
 r113: [402..403]
 r114: [396..397]
 r115: [394..395]
 r116: [392..393]
 r117: [390..391]
 r118: [376..389]
 r119: [386..387]
 r120: [384..385]
 r121: [382..383]
 r122: [380..381]
 r123: [378..379]
 r124: [376..377]
 r125: [370..371]
 r126: [368..369]
 r127: [366..367]
 r128: [364..365]
 r129: [352..363]
 r130: [360..361]
 r131: [358..359]
 r132: [356..357]
 r133: [354..355]
 r134: [352..353]
 r135: [324..351]
 r136: [348..349]
 r137: [346..347]
 r138: [344..345]
 r139: [342..343]
 r140: [340..341]
 r141: [326..339]
 r142: [336..337]
 r143: [334..335]
 r144: [332..333]
 r145: [330..331]
 r146: [328..329]
 r147: [326..327]
 r148: [324..325]
 r149: [322..323]
 r150: [316..317]
 r151: [314..315]
 r152: [312..313]
 r153: [310..311]
 r154: [296..309]
 r155: [306..307]
 r156: [304..305]
 r157: [302..303]
 r158: [300..301]
 r159: [298..299]
 r160: [296..297]
 r161: [290..291]
 r162: [194..195]
 r163: [192..193]
 r164: [190..191]
 r165: [188..189]
 r166: [176..187]
 r167: [184..185]
 r168: [182..183]
 r169: [180..181]
 r170: [178..179]
 r171: [176..177]
 r172: [148..175]
 r173: [172..173]
 r174: [170..171]
 r175: [168..169]
 r176: [166..167]
 r177: [164..165]
 r178: [150..163]
 r179: [160..161]
 r180: [158..159]
 r181: [156..157]
 r182: [154..155]
 r183: [152..153]
 r184: [150..151]
 r185: [148..149]
 r186: [146..147]
 r187: [140..141]
 r188: [138..139]
 r189: [136..137]
 r190: [134..135]
 r191: [120..133]
 r192: [130..131]
 r193: [128..129]
 r194: [126..127]
 r195: [124..125]
 r196: [122..123]
 r197: [120..121]
 r198: [102..103]
 r199: [100..101]
 r200: [86..99]
 r202: [92..93]
 r203: [88..91]
 r204: [86..87]
 r205: [82..83]
 r206: [80..81]
 r207: [78..79]
 r208: [64..77]
 r210: [70..71]
 r211: [66..69]
 r212: [64..65]
 r213: [48..49]
 r214: [46..47]
 r215: [32..45]
 r217: [38..39]
 r218: [34..37]
 r219: [32..33]
 r220: [28..29]
 r221: [26..27]
 r222: [24..25]
 r223: [10..23]
 r225: [16..17]
 r226: [12..15]
 r227: [10..11]
 r228: [278..279]
 r229: [276..277]
 r230: [262..275]
 r232: [268..269]
 r233: [264..267]
 r234: [262..263]
 r235: [258..259]
 r236: [256..257]
 r237: [254..255]
 r238: [240..253]
 r240: [246..247]
 r241: [242..245]
 r242: [240..241]
 r243: [236..237]
 r244: [234..235]
 r245: [220..233]
 r247: [226..227]
 r248: [222..225]
 r249: [220..221]
 r250: [216..217]
 r251: [214..215]
 r252: [212..213]
 r253: [198..211]
 r255: [204..205]
 r256: [200..203]
 r257: [198..199]
 r258: [2..3]
 r259: [0..1]
 r260: [476..477]
 r261: [474..475]
 r262: [472..473]
 r263: [470..471]
 r264: [468..469]
 r265: [466..467]
 r266: [464..465]
 r267: [462..463]
 r268: [460..461]
 r269: [458..459]
 r270: [456..457]
 r271: [454..455]
 r272: [8..9]
 r273: [452..453]
 r274: [448..449]
 r275: [442..443]
 r276: [438..439]
 r277: [430..431]
 r278: [424..425]
 r279: [418..419]
 r280: [412..413]
 r281: [400..401]
 r282: [398..399]
 r283: [394..395]
 r284: [388..389]
 r285: [382..383]
 r286: [374..375]
 r287: [372..373]
 r288: [368..369]
 r289: [362..363]
 r290: [358..359]
 r291: [350..351]
 r292: [344..345]
 r293: [338..339]
 r294: [332..333]
 r295: [320..321]
 r296: [318..319]
 r297: [314..315]
 r298: [308..309]
 r299: [302..303]
 r300: [294..295]
 r301: [292..293]
 r302: [196..197]
 r303: [192..193]
 r304: [186..187]
 r305: [182..183]
 r306: [174..175]
 r307: [168..169]
 r308: [162..163]
 r309: [156..157]
 r310: [144..145]
 r311: [142..143]
 r312: [138..139]
 r313: [132..133]
 r314: [126..127]
 r315: [118..119]
 r316: [116..117]
 r317: [110..111]
 r318: [112..113]
 r319: [114..115]
 r320: [106..107]
 r321: [108..109]
 r322: [104..105]
 r323: [100..101]
 r324: [96..97]
 r325: [84..85]
 r326: [78..79]
 r327: [74..75]
 r328: [62..63]
 r329: [56..57]
 r330: [58..59]
 r331: [60..61]
 r332: [52..53]
 r333: [54..55]
 r334: [50..51]
 r335: [46..47]
 r336: [42..43]
 r337: [30..31]
 r338: [24..25]
 r339: [20..21]
 r340: [286..287]
 r341: [288..289]
 r342: [282..283]
 r343: [284..285]
 r344: [280..281]
 r345: [276..277]
 r346: [272..273]
 r347: [260..261]
 r348: [254..255]
 r349: [250..251]
 r350: [238..239]
 r351: [234..235]
 r352: [230..231]
 r353: [218..219]
 r354: [212..213]
 r355: [208..209]
 r357: [98..99]
 r358: [94..95]
 r360: [76..77]
 r361: [72..73]
 r363: [44..45]
 r364: [40..41]
 r366: [22..23]
 r367: [18..19]
 r369: [274..275]
 r370: [270..271]
 r372: [252..253]
 r373: [248..249]
 r375: [232..233]
 r376: [228..229]
 r378: [210..211]
 r379: [206..207]
 r389: [200..201]
 r390: [222..223]
 r391: [242..243]
 r392: [264..265]
 r393: [12..13]
 r394: [34..35]
 r395: [66..67]
 r396: [88..89]
 r397: [68..75]
 r398: [90..97]
 r399: [14..21]
 r400: [36..43]
 r401: [202..209]
 r402: [224..231]
 r403: [244..251]
 r404: [266..273]

********** Assignment #2: **********

	 Assigning to 389 (cl=SSE_REGS, orig=254, freq=2, tfirst=389, tfreq=2)...
	   Assign 27 to optional reload r389 (freq=2)
	Hard reg 27 is preferable by r401 with profit 1
	 Assigning to 401 (cl=SSE_REGS, orig=254, freq=2, tfirst=389, tfreq=2)...
	 Assigning to 390 (cl=SSE_REGS, orig=246, freq=2, tfirst=390, tfreq=2)...
	   Assign 28 to optional reload r390 (freq=2)
	Hard reg 28 is preferable by r402 with profit 1
	 Assigning to 402 (cl=SSE_REGS, orig=246, freq=2, tfirst=390, tfreq=2)...
	 Assigning to 391 (cl=SSE_REGS, orig=239, freq=2, tfirst=391, tfreq=2)...
	   Assign 24 to optional reload r391 (freq=2)
	Hard reg 24 is preferable by r403 with profit 1
	 Assigning to 403 (cl=SSE_REGS, orig=239, freq=2, tfirst=391, tfreq=2)...
	 Assigning to 392 (cl=SSE_REGS, orig=231, freq=2, tfirst=392, tfreq=2)...
	   Assign 25 to optional reload r392 (freq=2)
	Hard reg 25 is preferable by r404 with profit 1
	 Assigning to 404 (cl=SSE_REGS, orig=231, freq=2, tfirst=392, tfreq=2)...
	 Assigning to 393 (cl=SSE_REGS, orig=224, freq=2, tfirst=393, tfreq=2)...
	   Assign 26 to optional reload r393 (freq=2)
	Hard reg 26 is preferable by r399 with profit 1
	 Assigning to 399 (cl=SSE_REGS, orig=224, freq=2, tfirst=393, tfreq=2)...
	 Assigning to 394 (cl=SSE_REGS, orig=216, freq=2, tfirst=394, tfreq=2)...
	   Assign 27 to optional reload r394 (freq=2)
	Hard reg 27 is preferable by r400 with profit 1
	 Assigning to 400 (cl=SSE_REGS, orig=216, freq=2, tfirst=394, tfreq=2)...
	 Assigning to 395 (cl=SSE_REGS, orig=209, freq=2, tfirst=395, tfreq=2)...
	   Assign 28 to optional reload r395 (freq=2)
	Hard reg 28 is preferable by r397 with profit 1
	 Assigning to 397 (cl=SSE_REGS, orig=209, freq=2, tfirst=395, tfreq=2)...
	 Assigning to 396 (cl=SSE_REGS, orig=201, freq=2, tfirst=396, tfreq=2)...
	   Assign 23 to optional reload r396 (freq=2)
	Hard reg 23 is preferable by r398 with profit 1
	 Assigning to 398 (cl=SSE_REGS, orig=201, freq=2, tfirst=396, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  452: r395:SF=r209:SF
      REG_DEAD r209:SF
   Insn after restoring regs:
  417: r209:SF=r360:SF
      REG_DEAD r360:SF
   Insn after restoring regs:
  453: r396:SF=r201:SF
      REG_DEAD r201:SF
   Insn after restoring regs:
  414: r201:SF=r357:SF
      REG_DEAD r357:SF
   Insn after restoring regs:
  450: r393:SF=r224:SF
      REG_DEAD r224:SF
   Insn after restoring regs:
  423: r224:SF=r366:SF
      REG_DEAD r366:SF
   Insn after restoring regs:
  451: r394:SF=r216:SF
      REG_DEAD r216:SF
   Insn after restoring regs:
  420: r216:SF=r363:SF
      REG_DEAD r363:SF
   Insn after restoring regs:
  446: r389:SF=r254:SF
      REG_DEAD r254:SF
   Insn after restoring regs:
  435: r254:SF=r378:SF
      REG_DEAD r378:SF
   Insn after restoring regs:
  447: r390:SF=r246:SF
      REG_DEAD r246:SF
   Insn after restoring regs:
  432: r246:SF=r375:SF
      REG_DEAD r375:SF
   Insn after restoring regs:
  448: r391:SF=r239:SF
      REG_DEAD r239:SF
   Insn after restoring regs:
  429: r239:SF=r372:SF
      REG_DEAD r372:SF
   Insn after restoring regs:
  449: r392:SF=r231:SF
      REG_DEAD r231:SF
   Insn after restoring regs:
  426: r231:SF=r369:SF
      REG_DEAD r369:SF
Keep optional reload reg 359
Keep optional reload reg 362
Keep optional reload reg 365
Keep optional reload reg 368
Keep optional reload reg 371
Keep optional reload reg 374
Keep optional reload reg 377
Keep optional reload reg 380
Remove optional reload reg 389
  Restoring original insn:
  377: r257:SF=r256:SF*r254:SF
      REG_DEAD r254:SF
      REG_DEAD r256:SF
  Deleting move 446
  446: r389:SF=r254:SF
      REG_DEAD r254:SF
deleting insn with uid = 446.
Remove optional reload reg 390
  Restoring original insn:
  363: r249:SF=r248:SF*r246:SF
      REG_DEAD r246:SF
      REG_DEAD r248:SF
  Deleting move 447
  447: r390:SF=r246:SF
      REG_DEAD r246:SF
deleting insn with uid = 447.
Remove optional reload reg 391
  Restoring original insn:
  350: r242:SF=r241:SF*r239:SF
      REG_DEAD r239:SF
      REG_DEAD r241:SF
  Deleting move 448
  448: r391:SF=r239:SF
      REG_DEAD r239:SF
deleting insn with uid = 448.
Remove optional reload reg 392
  Restoring original insn:
  336: r234:SF=r233:SF*r231:SF
      REG_DEAD r231:SF
      REG_DEAD r233:SF
  Deleting move 449
  449: r392:SF=r231:SF
      REG_DEAD r231:SF
deleting insn with uid = 449.
Remove optional reload reg 393
  Restoring original insn:
  313: r227:SF=r226:SF*r224:SF
      REG_DEAD r224:SF
      REG_DEAD r226:SF
  Deleting move 450
  450: r393:SF=r224:SF
      REG_DEAD r224:SF
deleting insn with uid = 450.
Remove optional reload reg 394
  Restoring original insn:
  299: r219:SF=r218:SF*r216:SF
      REG_DEAD r216:SF
      REG_DEAD r218:SF
  Deleting move 451
  451: r394:SF=r216:SF
      REG_DEAD r216:SF
deleting insn with uid = 451.
Remove optional reload reg 395
  Restoring original insn:
  265: r212:SF=r211:SF*r209:SF
      REG_DEAD r209:SF
      REG_DEAD r211:SF
  Deleting move 452
  452: r395:SF=r209:SF
      REG_DEAD r209:SF
deleting insn with uid = 452.
Remove optional reload reg 396
  Restoring original insn:
  251: r204:SF=r203:SF*r201:SF
      REG_DEAD r201:SF
      REG_DEAD r203:SF
  Deleting move 453
  453: r396:SF=r201:SF
      REG_DEAD r201:SF
deleting insn with uid = 453.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 377:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 363:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 350:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 336:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 313:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 299:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 265:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 251:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 14
   Insn 395: point = 0
   Insn 394: point = 0
   Insn 390: point = 1
   Insn 387: point = 3
  BB 3
   Insn 41: point = 4
   Insn 40: point = 4
   Insn 39: point = 5
   Insn 38: point = 7
   Insn 37: point = 9
  BB 13
   Insn 411: point = 10
   Insn 381: point = 10
  BB 11
   Insn 409: point = 10
   Insn 314: point = 10
   Insn 313: point = 11
   Insn 312: point = 13
   Insn 311: point = 15
   Insn 310: point = 16
   Insn 424: point = 16
   Insn 309: point = 17
   Insn 308: point = 19
   Insn 423: point = 20
   Insn 307: point = 22
   Insn 306: point = 23
   Insn 305: point = 25
   Insn 304: point = 26
   Insn 303: point = 28
   Insn 302: point = 30
   Insn 301: point = 32
   Insn 300: point = 33
   Insn 299: point = 34
   Insn 298: point = 36
   Insn 297: point = 38
   Insn 296: point = 39
   Insn 421: point = 39
   Insn 295: point = 40
   Insn 294: point = 42
   Insn 420: point = 43
   Insn 293: point = 45
   Insn 292: point = 46
   Insn 291: point = 48
   Insn 290: point = 49
   Insn 289: point = 51
   Insn 288: point = 53
   Insn 287: point = 54
   Insn 286: point = 55
   Insn 285: point = 57
  BB 9
   Insn 407: point = 58
   Insn 275: point = 58
   Insn 274: point = 59
  BB 10
   Insn 282: point = 60
   Insn 281: point = 61
   Insn 280: point = 63
  BB 8
   Insn 269: point = 64
   Insn 268: point = 64
   Insn 267: point = 65
   Insn 266: point = 66
   Insn 265: point = 67
   Insn 264: point = 69
   Insn 263: point = 71
   Insn 262: point = 72
   Insn 418: point = 72
   Insn 261: point = 73
   Insn 260: point = 75
   Insn 417: point = 76
   Insn 259: point = 78
   Insn 258: point = 79
   Insn 257: point = 81
   Insn 256: point = 82
   Insn 255: point = 84
   Insn 254: point = 86
   Insn 253: point = 88
   Insn 252: point = 89
   Insn 251: point = 90
   Insn 250: point = 92
   Insn 249: point = 94
   Insn 248: point = 95
   Insn 415: point = 95
   Insn 247: point = 96
   Insn 246: point = 98
   Insn 414: point = 99
   Insn 245: point = 101
   Insn 244: point = 102
   Insn 243: point = 104
   Insn 242: point = 105
   Insn 241: point = 107
   Insn 240: point = 109
   Insn 239: point = 110
   Insn 238: point = 111
   Insn 237: point = 113
  BB 6
   Insn 404: point = 114
   Insn 227: point = 114
   Insn 226: point = 115
  BB 7
   Insn 234: point = 116
   Insn 233: point = 117
   Insn 232: point = 119
  BB 5
   Insn 221: point = 120
   Insn 220: point = 120
   Insn 219: point = 121
   Insn 218: point = 122
   Insn 217: point = 123
   Insn 216: point = 124
   Insn 215: point = 124
   Insn 214: point = 125
   Insn 213: point = 126
   Insn 212: point = 128
   Insn 211: point = 130
   Insn 210: point = 132
   Insn 209: point = 133
   Insn 208: point = 135
   Insn 207: point = 137
   Insn 206: point = 139
   Insn 205: point = 140
   Insn 204: point = 142
   Insn 203: point = 144
   Insn 202: point = 146
   Insn 201: point = 147
   Insn 200: point = 149
   Insn 199: point = 151
   Insn 198: point = 152
   Insn 197: point = 153
   Insn 196: point = 154
   Insn 195: point = 154
   Insn 194: point = 155
   Insn 193: point = 157
   Insn 192: point = 159
   Insn 191: point = 161
   Insn 190: point = 163
   Insn 189: point = 165
   Insn 188: point = 166
   Insn 187: point = 168
   Insn 186: point = 170
   Insn 185: point = 172
   Insn 184: point = 173
   Insn 183: point = 175
   Insn 182: point = 177
   Insn 181: point = 179
   Insn 180: point = 180
   Insn 179: point = 182
   Insn 178: point = 184
   Insn 177: point = 186
   Insn 176: point = 187
   Insn 175: point = 189
   Insn 174: point = 191
   Insn 173: point = 193
   Insn 172: point = 195
   Insn 171: point = 196
   Insn 170: point = 198
   Insn 169: point = 200
   Insn 168: point = 201
   Insn 167: point = 203
   Insn 166: point = 205
   Insn 165: point = 207
   Insn 164: point = 208
   Insn 163: point = 210
   Insn 162: point = 212
  BB 12
   Insn 378: point = 213
   Insn 377: point = 214
   Insn 376: point = 216
   Insn 375: point = 218
   Insn 374: point = 219
   Insn 436: point = 219
   Insn 373: point = 220
   Insn 372: point = 222
   Insn 435: point = 223
   Insn 371: point = 225
   Insn 370: point = 226
   Insn 369: point = 228
   Insn 368: point = 229
   Insn 367: point = 231
   Insn 366: point = 233
   Insn 365: point = 235
   Insn 364: point = 236
   Insn 363: point = 237
   Insn 362: point = 239
   Insn 361: point = 241
   Insn 360: point = 242
   Insn 433: point = 242
   Insn 359: point = 243
   Insn 358: point = 245
   Insn 432: point = 246
   Insn 357: point = 248
   Insn 356: point = 249
   Insn 355: point = 251
   Insn 354: point = 252
   Insn 353: point = 254
   Insn 352: point = 256
   Insn 351: point = 257
   Insn 350: point = 258
   Insn 349: point = 260
   Insn 348: point = 262
   Insn 347: point = 263
   Insn 430: point = 263
   Insn 346: point = 264
   Insn 345: point = 266
   Insn 429: point = 267
   Insn 344: point = 269
   Insn 343: point = 270
   Insn 342: point = 272
   Insn 341: point = 273
   Insn 340: point = 275
   Insn 339: point = 277
   Insn 338: point = 279
   Insn 337: point = 280
   Insn 336: point = 281
   Insn 335: point = 283
   Insn 334: point = 285
   Insn 333: point = 286
   Insn 427: point = 286
   Insn 332: point = 287
   Insn 331: point = 289
   Insn 426: point = 290
   Insn 330: point = 292
   Insn 329: point = 293
   Insn 328: point = 295
   Insn 327: point = 296
   Insn 326: point = 298
   Insn 325: point = 300
   Insn 324: point = 301
   Insn 323: point = 302
   Insn 322: point = 304
   Insn 321: point = 305
   Insn 320: point = 306
   Insn 319: point = 308
  BB 4
   Insn 160: point = 309
   Insn 159: point = 309
   Insn 158: point = 310
   Insn 157: point = 312
   Insn 156: point = 313
   Insn 155: point = 314
   Insn 154: point = 315
   Insn 153: point = 315
   Insn 152: point = 316
   Insn 151: point = 317
   Insn 150: point = 319
   Insn 149: point = 321
   Insn 148: point = 323
   Insn 147: point = 324
   Insn 146: point = 326
   Insn 145: point = 328
   Insn 144: point = 330
   Insn 143: point = 331
   Insn 142: point = 333
   Insn 141: point = 335
   Insn 140: point = 337
   Insn 139: point = 338
   Insn 138: point = 340
   Insn 137: point = 342
   Insn 136: point = 343
   Insn 135: point = 344
   Insn 134: point = 345
   Insn 133: point = 345
   Insn 132: point = 346
   Insn 131: point = 348
   Insn 130: point = 350
   Insn 129: point = 352
   Insn 128: point = 354
   Insn 127: point = 356
   Insn 126: point = 357
   Insn 125: point = 359
   Insn 124: point = 361
   Insn 123: point = 363
   Insn 122: point = 364
   Insn 121: point = 366
   Insn 120: point = 368
   Insn 119: point = 370
   Insn 118: point = 371
   Insn 117: point = 373
   Insn 116: point = 375
   Insn 115: point = 377
   Insn 114: point = 378
   Insn 113: point = 380
   Insn 112: point = 382
   Insn 111: point = 384
   Insn 110: point = 386
   Insn 109: point = 387
   Insn 108: point = 389
   Insn 107: point = 391
   Insn 106: point = 392
   Insn 105: point = 394
   Insn 104: point = 396
   Insn 103: point = 398
   Insn 102: point = 399
   Insn 101: point = 401
   Insn 100: point = 403
   Insn 99: point = 404
   Insn 98: point = 405
   Insn 97: point = 406
   Insn 96: point = 406
   Insn 95: point = 407
   Insn 94: point = 408
   Insn 93: point = 410
   Insn 92: point = 412
   Insn 91: point = 414
   Insn 90: point = 415
   Insn 89: point = 417
   Insn 88: point = 419
   Insn 87: point = 421
   Insn 86: point = 422
   Insn 85: point = 424
   Insn 84: point = 426
   Insn 83: point = 428
   Insn 82: point = 429
   Insn 81: point = 431
   Insn 80: point = 433
   Insn 79: point = 434
   Insn 78: point = 435
   Insn 77: point = 436
   Insn 76: point = 436
   Insn 75: point = 437
   Insn 74: point = 439
   Insn 73: point = 441
   Insn 72: point = 443
   Insn 71: point = 445
   Insn 70: point = 447
   Insn 69: point = 448
   Insn 68: point = 450
   Insn 67: point = 452
   Insn 66: point = 454
   Insn 65: point = 455
   Insn 64: point = 457
   Insn 63: point = 459
   Insn 62: point = 461
   Insn 61: point = 462
   Insn 60: point = 464
   Insn 59: point = 466
   Insn 58: point = 468
   Insn 57: point = 469
   Insn 56: point = 471
   Insn 55: point = 473
   Insn 54: point = 475
   Insn 53: point = 477
   Insn 52: point = 478
   Insn 51: point = 480
   Insn 50: point = 482
   Insn 49: point = 483
   Insn 48: point = 485
   Insn 47: point = 487
   Insn 46: point = 489
   Insn 45: point = 490
   Insn 44: point = 492
   Insn 43: point = 494
  BB 2
   Insn 35: point = 495
   Insn 34: point = 495
   Insn 33: point = 496
   Insn 32: point = 497
   Insn 31: point = 498
   Insn 30: point = 499
   Insn 29: point = 500
   Insn 28: point = 501
   Insn 27: point = 502
   Insn 26: point = 503
   Insn 25: point = 504
   Insn 24: point = 505
   Insn 23: point = 506
   Insn 22: point = 507
   Insn 21: point = 508
   Insn 20: point = 509
   Insn 19: point = 510
   Insn 18: point = 511
   Insn 17: point = 512
   Insn 16: point = 513
   Insn 15: point = 514
   Insn 14: point = 515
   Insn 13: point = 516
   Insn 12: point = 517
   Insn 11: point = 518
   Insn 10: point = 519
   Insn 6: point = 519
   Insn 5: point = 519
   Insn 4: point = 519
   Insn 3: point = 519
   Insn 2: point = 519
 r201: [91..99]
 r209: [68..76]
 r216: [35..43]
 r224: [12..20]
 r231: [282..290]
 r239: [259..267]
 r246: [238..246]
 r254: [215..223]
 r358: [95..96]
 r361: [72..73]
 r364: [39..40]
 r367: [16..17]
 r370: [286..287]
 r373: [263..264]
 r376: [242..243]
 r379: [219..220]
Compressing live ranges: from 519 to 16 - 3%
Ranges after the compression:
 r201: [6..7]
 r209: [4..5]
 r216: [2..3]
 r224: [0..1]
 r231: [14..15]
 r239: [12..13]
 r246: [10..11]
 r254: [8..9]
 r358: [6..7]
 r361: [4..5]
 r364: [2..3]
 r367: [0..1]
 r370: [14..15]
 r373: [12..13]
 r376: [10..11]
 r379: [8..9]
  Slot 0 regnos (width = 4):	 201	 254	 246	 239	 231	 224	 216	 209
  Slot 1 regnos (width = 8):	 358	 379	 376	 373	 370	 367	 364	 361
Changing spilled pseudos to memory in insn #414
Changing spilled pseudos to memory in insn #247
Changing spilled pseudos to memory in insn #415
Changing spilled pseudos to memory in insn #251
Changing spilled pseudos to memory in insn #417
Changing spilled pseudos to memory in insn #261
Changing spilled pseudos to memory in insn #418
Changing spilled pseudos to memory in insn #265
Changing spilled pseudos to memory in insn #420
Changing spilled pseudos to memory in insn #295
Changing spilled pseudos to memory in insn #421
Changing spilled pseudos to memory in insn #299
Changing spilled pseudos to memory in insn #423
Changing spilled pseudos to memory in insn #309
Changing spilled pseudos to memory in insn #424
Changing spilled pseudos to memory in insn #313
Changing spilled pseudos to memory in insn #426
Changing spilled pseudos to memory in insn #332
Changing spilled pseudos to memory in insn #427
Changing spilled pseudos to memory in insn #336
Changing spilled pseudos to memory in insn #429
Changing spilled pseudos to memory in insn #346
Changing spilled pseudos to memory in insn #430
Changing spilled pseudos to memory in insn #350
Changing spilled pseudos to memory in insn #432
Changing spilled pseudos to memory in insn #359
Changing spilled pseudos to memory in insn #433
Changing spilled pseudos to memory in insn #363
Changing spilled pseudos to memory in insn #435
Changing spilled pseudos to memory in insn #373
Changing spilled pseudos to memory in insn #436
Changing spilled pseudos to memory in insn #377
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #377
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #436
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 436:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 373:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #435
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 435:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #363
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #433
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 433:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 359:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #432
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 432:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #350
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #430
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 430:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 346:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #429
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 429:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #336
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #427
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 427:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 332:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #426
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 426:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #313
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #424
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 424:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 309:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #423
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 423:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #299
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #421
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 421:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 295:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #420
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 420:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #265
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #418
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 418:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 261:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #417
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 417:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #251
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #415
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 415:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 247:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #414
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 414:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=208, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=176, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 57
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 95
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 114
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 152
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 158
changing reg in insn 159
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 176
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 214
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 215
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 244
changing reg in insn 244
changing reg in insn 244
changing reg in insn 252
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 258
changing reg in insn 258
changing reg in insn 258
changing reg in insn 266
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 292
changing reg in insn 292
changing reg in insn 292
changing reg in insn 300
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 300
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 306
changing reg in insn 306
changing reg in insn 306
changing reg in insn 314
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 329
changing reg in insn 329
changing reg in insn 329
changing reg in insn 337
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 336
changing reg in insn 337
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 343
changing reg in insn 343
changing reg in insn 343
changing reg in insn 351
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 350
changing reg in insn 351
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 356
changing reg in insn 356
changing reg in insn 356
changing reg in insn 364
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 363
changing reg in insn 364
changing reg in insn 366
changing reg in insn 367
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 370
changing reg in insn 370
changing reg in insn 370
changing reg in insn 378
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 378
changing reg in insn 387
changing reg in insn 390
changing reg in insn 390
changing reg in insn 394
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 123
changing reg in insn 124
changing reg in insn 127
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 162
changing reg in insn 163
changing reg in insn 165
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 177
changing reg in insn 178
changing reg in insn 181
changing reg in insn 185
changing reg in insn 186
changing reg in insn 189
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 202
changing reg in insn 206
changing reg in insn 207
changing reg in insn 210
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 226
changing reg in insn 227
changing reg in insn 233
changing reg in insn 234
changing reg in insn 232
changing reg in insn 233
changing reg in insn 238
changing reg in insn 239
changing reg in insn 237
changing reg in insn 238
changing reg in insn 240
changing reg in insn 241
changing reg in insn 243
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 253
changing reg in insn 254
changing reg in insn 257
changing reg in insn 258
changing reg in insn 260
changing reg in insn 261
changing reg in insn 267
changing reg in insn 268
changing reg in insn 274
changing reg in insn 275
changing reg in insn 281
changing reg in insn 282
changing reg in insn 280
changing reg in insn 281
changing reg in insn 286
changing reg in insn 287
changing reg in insn 285
changing reg in insn 286
changing reg in insn 288
changing reg in insn 289
changing reg in insn 291
changing reg in insn 292
changing reg in insn 294
changing reg in insn 295
changing reg in insn 301
changing reg in insn 302
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 309
changing reg in insn 320
changing reg in insn 321
changing reg in insn 319
changing reg in insn 320
changing reg in insn 323
changing reg in insn 324
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 326
changing reg in insn 328
changing reg in insn 329
changing reg in insn 331
changing reg in insn 332
changing reg in insn 338
changing reg in insn 339
changing reg in insn 342
changing reg in insn 343
changing reg in insn 345
changing reg in insn 346
changing reg in insn 352
changing reg in insn 353
changing reg in insn 355
changing reg in insn 356
changing reg in insn 358
changing reg in insn 359
changing reg in insn 365
changing reg in insn 366
changing reg in insn 369
changing reg in insn 370
changing reg in insn 372
changing reg in insn 373
deleting insn with uid = 76.
deleting insn with uid = 95.
deleting insn with uid = 96.
deleting insn with uid = 133.
deleting insn with uid = 152.
deleting insn with uid = 153.
deleting insn with uid = 195.
deleting insn with uid = 214.
deleting insn with uid = 215.
deleting insn with uid = 249.
deleting insn with uid = 263.
deleting insn with uid = 297.
deleting insn with uid = 311.
deleting insn with uid = 334.
deleting insn with uid = 348.
deleting insn with uid = 361.
deleting insn with uid = 375.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 134.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 196.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 248.
verify found no changes in insn with uid = 262.
verify found no changes in insn with uid = 296.
verify found no changes in insn with uid = 310.
verify found no changes in insn with uid = 333.
verify found no changes in insn with uid = 347.
verify found no changes in insn with uid = 360.
verify found no changes in insn with uid = 374.


int quecc(float*, float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8]
;;  ref usage 	r0={146d,132u} r1={41d,27u,26e} r2={15d,1u} r3={8d,8u} r4={15d,1u} r5={15d,1u} r6={1d,167u} r7={1d,28u} r8={14d} r9={14d} r10={14d} r11={14d} r12={14d} r13={14d} r14={14d} r15={14d} r17={85d,4u} r18={14d} r19={14d} r20={1d,1u,26e} r21={100d,99u} r22={24d,9u} r23={18d,3u} r24={17d,2u} r25={17d,2u} r26={17d,2u} r27={16d,1u} r28={16d,1u} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={15d,1u} r38={15d} r39={14d} r40={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} 
;;    total ref usage 1909{1367d,490u,52e} in 355{341 regular + 14 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 260 261 262 263 264 265 266 267 268 269 270 271
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])
        (reg:DI 1 dx [ scratch ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 procpar_info+0 S8 A64])
        (reg:DI 2 cx [ procpar_info ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 preprocess+0 S8 A64])
        (reg:DI 37 r8 [ preprocess ])) ge2fitman_preproc.cpp:436 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:438 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 21 xmm0 [260])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 21 xmm0 [260])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DF 21 xmm0 [261])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [261])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DF 21 xmm0 [262])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [262])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 21 xmm0 [263])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [263])) ge2fitman_preproc.cpp:439 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DF 21 xmm0 [264])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])
        (reg:DF 21 xmm0 [264])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DF 21 xmm0 [265])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [265])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 21 xmm0 [266])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [266])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DF 21 xmm0 [267])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [267])) ge2fitman_preproc.cpp:440 128 {*movdf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DF 21 xmm0 [268])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:441 128 {*movdf_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 21 xmm0 [268])) ge2fitman_preproc.cpp:441 128 {*movdf_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DF 21 xmm0 [269])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:441 128 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 21 xmm0 [269])) ge2fitman_preproc.cpp:441 128 {*movdf_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DF 21 xmm0 [270])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:442 128 {*movdf_internal}
     (nil))
(insn 32 31 33 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 21 xmm0 [270])) ge2fitman_preproc.cpp:442 128 {*movdf_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DF 21 xmm0 [271])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:442 128 {*movdf_internal}
     (nil))
(insn 34 33 35 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [271])) ge2fitman_preproc.cpp:442 128 {*movdf_internal}
     (nil))
(insn 35 34 382 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_preproc.cpp:444 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              13 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 272
(code_label 382 35 36 3 110 "" [1 uses])
(note 36 382 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 3 (set (reg/f:DI 0 ax [272])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 procpar_info+0 S8 A64])) ge2fitman_preproc.cpp:444 89 {*movdi_internal}
     (nil))
(insn 38 37 39 3 (set (reg:SI 0 ax [orig:87 D.26049 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [272])
                (const_int 324 [0x144])) [0 procpar_info_21(D)->num_points+0 S4 A32])) ge2fitman_preproc.cpp:444 90 {*movsi_internal}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.26049 ] [88])
                (ashift:SI (reg:SI 0 ax [orig:87 D.26049 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:444 511 {*ashlsi3_1}
     (nil))
(insn 40 39 41 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.26049 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:444 7 {*cmpsi_1}
     (nil))
(jump_insn 41 40 42 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 385)
            (pc))) ge2fitman_preproc.cpp:444 612 {*jcc_1}
     (nil)
 -> 385)
;;  succ:       14
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301
(note 42 41 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 4 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:447 90 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 0 ax [orig:89 D.26050 ] [89])
        (sign_extend:DI (reg:SI 0 ax [273]))) ge2fitman_preproc.cpp:447 142 {*extendsidi2_rex64}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 1 dx [orig:90 D.26050 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.26050 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:447 512 {*ashldi3_1}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:447 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.26051 ] [91])
                (plus:DI (reg/f:DI 0 ax [274])
                    (reg:DI 1 dx [orig:90 D.26050 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:447 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.26050 ] [90]))
        (nil)))
(insn 48 47 49 4 (set (reg:SF 21 xmm0 [orig:92 D.26052 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.26051 ] [91]) [0 *_27+0 S4 A32])) ge2fitman_preproc.cpp:447 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DF 22 xmm1 [orig:93 D.26053 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.26052 ] [92]))) ge2fitman_preproc.cpp:447 152 {*extendsfdf2_sse}
     (nil))
(insn 50 49 51 4 (set (reg:SI 0 ax [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:447 90 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 0 ax [orig:94 D.26050 ] [94])
        (sign_extend:DI (reg:SI 0 ax [275]))) ge2fitman_preproc.cpp:447 142 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 1 dx [orig:95 D.26050 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.26050 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:447 512 {*ashldi3_1}
     (nil))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:447 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.26051 ] [96])
                (plus:DI (reg/f:DI 0 ax [276])
                    (reg:DI 1 dx [orig:95 D.26050 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:447 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.26050 ] [95]))
        (nil)))
(insn 55 54 56 4 (set (reg:SF 21 xmm0 [orig:97 D.26052 ] [97])
        (mem:SF (reg/f:DI 0 ax [orig:96 D.26051 ] [96]) [0 *_32+0 S4 A32])) ge2fitman_preproc.cpp:447 129 {*movsf_internal}
     (nil))
(insn 56 55 57 4 (set (reg:DF 21 xmm0 [orig:98 D.26053 ] [98])
        (float_extend:DF (reg:SF 21 xmm0 [orig:97 D.26052 ] [97]))) ge2fitman_preproc.cpp:447 152 {*extendsfdf2_sse}
     (nil))
(insn 57 56 58 4 (set (reg:DF 22 xmm1 [orig:99 D.26053 ] [99])
        (mult:DF (reg:DF 22 xmm1 [orig:93 D.26053 ] [93])
            (reg:DF 21 xmm0 [orig:98 D.26053 ] [98]))) ge2fitman_preproc.cpp:447 798 {*fop_df_comm_sse}
     (nil))
(insn 58 57 59 4 (set (reg:SI 0 ax [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:448 90 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DI 0 ax [orig:100 D.26054 ] [100])
        (sign_extend:DI (reg:SI 0 ax [277]))) ge2fitman_preproc.cpp:448 142 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 0 ax [orig:101 D.26054 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 D.26054 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 218 {*adddi_1}
     (nil))
(insn 61 60 62 4 (parallel [
            (set (reg:DI 1 dx [orig:102 D.26054 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.26054 ] [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 512 {*ashldi3_1}
     (nil))
(insn 62 61 63 4 (set (reg/f:DI 0 ax [278])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:448 89 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.26051 ] [103])
                (plus:DI (reg/f:DI 0 ax [278])
                    (reg:DI 1 dx [orig:102 D.26054 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.26054 ] [102]))
        (nil)))
(insn 64 63 65 4 (set (reg:SF 21 xmm0 [orig:104 D.26052 ] [104])
        (mem:SF (reg/f:DI 0 ax [orig:103 D.26051 ] [103]) [0 *_39+0 S4 A32])) ge2fitman_preproc.cpp:448 129 {*movsf_internal}
     (nil))
(insn 65 64 66 4 (set (reg:DF 23 xmm2 [orig:105 D.26053 ] [105])
        (float_extend:DF (reg:SF 21 xmm0 [orig:104 D.26052 ] [104]))) ge2fitman_preproc.cpp:448 152 {*extendsfdf2_sse}
     (nil))
(insn 66 65 67 4 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:448 90 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:DI 0 ax [orig:106 D.26054 ] [106])
        (sign_extend:DI (reg:SI 0 ax [279]))) ge2fitman_preproc.cpp:448 142 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 4 (parallel [
            (set (reg:DI 0 ax [orig:107 D.26054 ] [107])
                (plus:DI (reg:DI 0 ax [orig:106 D.26054 ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 218 {*adddi_1}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:DI 1 dx [orig:108 D.26054 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:107 D.26054 ] [107])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 4 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:448 89 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.26051 ] [109])
                (plus:DI (reg/f:DI 0 ax [280])
                    (reg:DI 1 dx [orig:108 D.26054 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:448 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.26054 ] [108]))
        (nil)))
(insn 72 71 73 4 (set (reg:SF 21 xmm0 [orig:110 D.26052 ] [110])
        (mem:SF (reg/f:DI 0 ax [orig:109 D.26051 ] [109]) [0 *_45+0 S4 A32])) ge2fitman_preproc.cpp:448 129 {*movsf_internal}
     (nil))
(insn 73 72 74 4 (set (reg:DF 21 xmm0 [orig:111 D.26053 ] [111])
        (float_extend:DF (reg:SF 21 xmm0 [orig:110 D.26052 ] [110]))) ge2fitman_preproc.cpp:448 152 {*extendsfdf2_sse}
     (nil))
(insn 74 73 75 4 (set (reg:DF 21 xmm0 [orig:112 D.26053 ] [112])
        (mult:DF (reg:DF 21 xmm0 [orig:111 D.26053 ] [111])
            (reg:DF 23 xmm2 [orig:105 D.26053 ] [105]))) ge2fitman_preproc.cpp:448 798 {*fop_df_comm_sse}
     (nil))
(insn 75 74 77 4 (set (reg:DF 21 xmm0 [orig:113 D.26053 ] [113])
        (plus:DF (reg:DF 21 xmm0 [orig:112 D.26053 ] [112])
            (reg:DF 22 xmm1 [orig:99 D.26053 ] [99]))) ge2fitman_preproc.cpp:447 798 {*fop_df_comm_sse}
     (nil))
(call_insn 77 75 78 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:448 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 78 77 79 4 (set (reg:DF 0 ax [281])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:448 128 {*movdf_internal}
     (nil))
(insn 79 78 80 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [281])) ge2fitman_preproc.cpp:448 128 {*movdf_internal}
     (nil))
(insn 80 79 81 4 (set (reg:SI 0 ax [282])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 81 80 82 4 (set (reg:DI 0 ax [orig:114 D.26050 ] [114])
        (sign_extend:DI (reg:SI 0 ax [282]))) ge2fitman_preproc.cpp:450 142 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 4 (parallel [
            (set (reg:DI 1 dx [orig:115 D.26050 ] [115])
                (ashift:DI (reg:DI 0 ax [orig:114 D.26050 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 512 {*ashldi3_1}
     (nil))
(insn 83 82 84 4 (set (reg/f:DI 0 ax [283])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:450 89 {*movdi_internal}
     (nil))
(insn 84 83 85 4 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.26051 ] [116])
                (plus:DI (reg/f:DI 0 ax [283])
                    (reg:DI 1 dx [orig:115 D.26050 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.26050 ] [115]))
        (nil)))
(insn 85 84 86 4 (set (reg:SF 21 xmm0 [orig:117 D.26052 ] [117])
        (mem:SF (reg/f:DI 0 ax [orig:116 D.26051 ] [116]) [0 *_54+0 S4 A32])) ge2fitman_preproc.cpp:450 129 {*movsf_internal}
     (nil))
(insn 86 85 87 4 (set (reg:DF 22 xmm1 [orig:118 D.26053 ] [118])
        (float_extend:DF (reg:SF 21 xmm0 [orig:117 D.26052 ] [117]))) ge2fitman_preproc.cpp:450 152 {*extendsfdf2_sse}
     (nil))
(insn 87 86 88 4 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 88 87 89 4 (set (reg:DI 0 ax [orig:119 D.26054 ] [119])
        (sign_extend:DI (reg:SI 0 ax [284]))) ge2fitman_preproc.cpp:450 142 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 4 (parallel [
            (set (reg:DI 0 ax [orig:120 D.26054 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 D.26054 ] [119])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 218 {*adddi_1}
     (nil))
(insn 90 89 91 4 (parallel [
            (set (reg:DI 1 dx [orig:121 D.26054 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.26054 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 512 {*ashldi3_1}
     (nil))
(insn 91 90 92 4 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:450 89 {*movdi_internal}
     (nil))
(insn 92 91 93 4 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.26051 ] [122])
                (plus:DI (reg/f:DI 0 ax [285])
                    (reg:DI 1 dx [orig:121 D.26054 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:450 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.26054 ] [121]))
        (nil)))
(insn 93 92 94 4 (set (reg:SF 21 xmm0 [orig:123 D.26052 ] [123])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.26051 ] [122]) [0 *_60+0 S4 A32])) ge2fitman_preproc.cpp:450 129 {*movsf_internal}
     (nil))
(insn 94 93 97 4 (set (reg:DF 21 xmm0 [orig:124 D.26053 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.26052 ] [123]))) ge2fitman_preproc.cpp:450 152 {*extendsfdf2_sse}
     (nil))
(call_insn 97 94 98 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fe35704f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:450 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 98 97 99 4 (set (reg:DF 0 ax [286])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:450 128 {*movdf_internal}
     (nil))
(insn 99 98 100 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [286])) ge2fitman_preproc.cpp:450 128 {*movdf_internal}
     (nil))
(insn 100 99 101 4 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:452 90 {*movsi_internal}
     (nil))
(insn 101 100 102 4 (set (reg:DI 0 ax [orig:125 D.26050 ] [125])
        (sign_extend:DI (reg:SI 0 ax [287]))) ge2fitman_preproc.cpp:452 142 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 4 (parallel [
            (set (reg:DI 1 dx [orig:126 D.26050 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.26050 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:452 512 {*ashldi3_1}
     (nil))
(insn 103 102 104 4 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:452 89 {*movdi_internal}
     (nil))
(insn 104 103 105 4 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.26051 ] [127])
                (plus:DI (reg/f:DI 0 ax [288])
                    (reg:DI 1 dx [orig:126 D.26050 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:452 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.26050 ] [126]))
        (nil)))
(insn 105 104 106 4 (set (reg:SF 21 xmm0 [orig:128 D.26052 ] [128])
        (mem:SF (reg/f:DI 0 ax [orig:127 D.26051 ] [127]) [0 *_68+0 S4 A32])) ge2fitman_preproc.cpp:452 129 {*movsf_internal}
     (nil))
(insn 106 105 107 4 (set (reg:DF 22 xmm1 [orig:129 D.26053 ] [129])
        (float_extend:DF (reg:SF 21 xmm0 [orig:128 D.26052 ] [128]))) ge2fitman_preproc.cpp:452 152 {*extendsfdf2_sse}
     (nil))
(insn 107 106 108 4 (set (reg:SI 0 ax [289])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:452 90 {*movsi_internal}
     (nil))
(insn 108 107 109 4 (set (reg:DI 0 ax [orig:130 D.26050 ] [130])
        (sign_extend:DI (reg:SI 0 ax [289]))) ge2fitman_preproc.cpp:452 142 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 4 (parallel [
            (set (reg:DI 1 dx [orig:131 D.26050 ] [131])
                (ashift:DI (reg:DI 0 ax [orig:130 D.26050 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:452 512 {*ashldi3_1}
     (nil))
(insn 110 109 111 4 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:452 89 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.26051 ] [132])
                (plus:DI (reg/f:DI 0 ax [290])
                    (reg:DI 1 dx [orig:131 D.26050 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:452 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.26050 ] [131]))
        (nil)))
(insn 112 111 113 4 (set (reg:SF 21 xmm0 [orig:133 D.26052 ] [133])
        (mem:SF (reg/f:DI 0 ax [orig:132 D.26051 ] [132]) [0 *_73+0 S4 A32])) ge2fitman_preproc.cpp:452 129 {*movsf_internal}
     (nil))
(insn 113 112 114 4 (set (reg:DF 21 xmm0 [orig:134 D.26053 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.26052 ] [133]))) ge2fitman_preproc.cpp:452 152 {*extendsfdf2_sse}
     (nil))
(insn 114 113 115 4 (set (reg:DF 22 xmm1 [orig:135 D.26053 ] [135])
        (mult:DF (reg:DF 22 xmm1 [orig:129 D.26053 ] [129])
            (reg:DF 21 xmm0 [orig:134 D.26053 ] [134]))) ge2fitman_preproc.cpp:452 798 {*fop_df_comm_sse}
     (nil))
(insn 115 114 116 4 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:453 90 {*movsi_internal}
     (nil))
(insn 116 115 117 4 (set (reg:DI 0 ax [orig:136 D.26054 ] [136])
        (sign_extend:DI (reg:SI 0 ax [291]))) ge2fitman_preproc.cpp:453 142 {*extendsidi2_rex64}
     (nil))
(insn 117 116 118 4 (parallel [
            (set (reg:DI 0 ax [orig:137 D.26054 ] [137])
                (plus:DI (reg:DI 0 ax [orig:136 D.26054 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 218 {*adddi_1}
     (nil))
(insn 118 117 119 4 (parallel [
            (set (reg:DI 1 dx [orig:138 D.26054 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:137 D.26054 ] [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 512 {*ashldi3_1}
     (nil))
(insn 119 118 120 4 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:453 89 {*movdi_internal}
     (nil))
(insn 120 119 121 4 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.26051 ] [139])
                (plus:DI (reg/f:DI 0 ax [292])
                    (reg:DI 1 dx [orig:138 D.26054 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:138 D.26054 ] [138]))
        (nil)))
(insn 121 120 122 4 (set (reg:SF 21 xmm0 [orig:140 D.26052 ] [140])
        (mem:SF (reg/f:DI 0 ax [orig:139 D.26051 ] [139]) [0 *_80+0 S4 A32])) ge2fitman_preproc.cpp:453 129 {*movsf_internal}
     (nil))
(insn 122 121 123 4 (set (reg:DF 23 xmm2 [orig:141 D.26053 ] [141])
        (float_extend:DF (reg:SF 21 xmm0 [orig:140 D.26052 ] [140]))) ge2fitman_preproc.cpp:453 152 {*extendsfdf2_sse}
     (nil))
(insn 123 122 124 4 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:453 90 {*movsi_internal}
     (nil))
(insn 124 123 125 4 (set (reg:DI 0 ax [orig:142 D.26054 ] [142])
        (sign_extend:DI (reg:SI 0 ax [293]))) ge2fitman_preproc.cpp:453 142 {*extendsidi2_rex64}
     (nil))
(insn 125 124 126 4 (parallel [
            (set (reg:DI 0 ax [orig:143 D.26054 ] [143])
                (plus:DI (reg:DI 0 ax [orig:142 D.26054 ] [142])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 218 {*adddi_1}
     (nil))
(insn 126 125 127 4 (parallel [
            (set (reg:DI 1 dx [orig:144 D.26054 ] [144])
                (ashift:DI (reg:DI 0 ax [orig:143 D.26054 ] [143])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 512 {*ashldi3_1}
     (nil))
(insn 127 126 128 4 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:453 89 {*movdi_internal}
     (nil))
(insn 128 127 129 4 (parallel [
            (set (reg/f:DI 0 ax [orig:145 D.26051 ] [145])
                (plus:DI (reg/f:DI 0 ax [294])
                    (reg:DI 1 dx [orig:144 D.26054 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:453 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:144 D.26054 ] [144]))
        (nil)))
(insn 129 128 130 4 (set (reg:SF 21 xmm0 [orig:146 D.26052 ] [146])
        (mem:SF (reg/f:DI 0 ax [orig:145 D.26051 ] [145]) [0 *_86+0 S4 A32])) ge2fitman_preproc.cpp:453 129 {*movsf_internal}
     (nil))
(insn 130 129 131 4 (set (reg:DF 21 xmm0 [orig:147 D.26053 ] [147])
        (float_extend:DF (reg:SF 21 xmm0 [orig:146 D.26052 ] [146]))) ge2fitman_preproc.cpp:453 152 {*extendsfdf2_sse}
     (nil))
(insn 131 130 132 4 (set (reg:DF 21 xmm0 [orig:148 D.26053 ] [148])
        (mult:DF (reg:DF 21 xmm0 [orig:147 D.26053 ] [147])
            (reg:DF 23 xmm2 [orig:141 D.26053 ] [141]))) ge2fitman_preproc.cpp:453 798 {*fop_df_comm_sse}
     (nil))
(insn 132 131 134 4 (set (reg:DF 21 xmm0 [orig:149 D.26053 ] [149])
        (plus:DF (reg:DF 21 xmm0 [orig:148 D.26053 ] [148])
            (reg:DF 22 xmm1 [orig:135 D.26053 ] [135]))) ge2fitman_preproc.cpp:452 798 {*fop_df_comm_sse}
     (nil))
(call_insn 134 132 135 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:453 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 135 134 136 4 (set (reg:DF 0 ax [295])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:453 128 {*movdf_internal}
     (nil))
(insn 136 135 137 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [295])) ge2fitman_preproc.cpp:453 128 {*movdf_internal}
     (nil))
(insn 137 136 138 4 (set (reg:SI 0 ax [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:455 90 {*movsi_internal}
     (nil))
(insn 138 137 139 4 (set (reg:DI 0 ax [orig:150 D.26050 ] [150])
        (sign_extend:DI (reg:SI 0 ax [296]))) ge2fitman_preproc.cpp:455 142 {*extendsidi2_rex64}
     (nil))
(insn 139 138 140 4 (parallel [
            (set (reg:DI 1 dx [orig:151 D.26050 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.26050 ] [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 512 {*ashldi3_1}
     (nil))
(insn 140 139 141 4 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:455 89 {*movdi_internal}
     (nil))
(insn 141 140 142 4 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.26051 ] [152])
                (plus:DI (reg/f:DI 0 ax [297])
                    (reg:DI 1 dx [orig:151 D.26050 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.26050 ] [151]))
        (nil)))
(insn 142 141 143 4 (set (reg:SF 21 xmm0 [orig:153 D.26052 ] [153])
        (mem:SF (reg/f:DI 0 ax [orig:152 D.26051 ] [152]) [0 *_95+0 S4 A32])) ge2fitman_preproc.cpp:455 129 {*movsf_internal}
     (nil))
(insn 143 142 144 4 (set (reg:DF 22 xmm1 [orig:154 D.26053 ] [154])
        (float_extend:DF (reg:SF 21 xmm0 [orig:153 D.26052 ] [153]))) ge2fitman_preproc.cpp:455 152 {*extendsfdf2_sse}
     (nil))
(insn 144 143 145 4 (set (reg:SI 0 ax [298])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:455 90 {*movsi_internal}
     (nil))
(insn 145 144 146 4 (set (reg:DI 0 ax [orig:155 D.26054 ] [155])
        (sign_extend:DI (reg:SI 0 ax [298]))) ge2fitman_preproc.cpp:455 142 {*extendsidi2_rex64}
     (nil))
(insn 146 145 147 4 (parallel [
            (set (reg:DI 0 ax [orig:156 D.26054 ] [156])
                (plus:DI (reg:DI 0 ax [orig:155 D.26054 ] [155])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 218 {*adddi_1}
     (nil))
(insn 147 146 148 4 (parallel [
            (set (reg:DI 1 dx [orig:157 D.26054 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 D.26054 ] [156])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 512 {*ashldi3_1}
     (nil))
(insn 148 147 149 4 (set (reg/f:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:455 89 {*movdi_internal}
     (nil))
(insn 149 148 150 4 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.26051 ] [158])
                (plus:DI (reg/f:DI 0 ax [299])
                    (reg:DI 1 dx [orig:157 D.26054 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:455 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:157 D.26054 ] [157]))
        (nil)))
(insn 150 149 151 4 (set (reg:SF 21 xmm0 [orig:159 D.26052 ] [159])
        (mem:SF (reg/f:DI 0 ax [orig:158 D.26051 ] [158]) [0 *_101+0 S4 A32])) ge2fitman_preproc.cpp:455 129 {*movsf_internal}
     (nil))
(insn 151 150 154 4 (set (reg:DF 21 xmm0 [orig:160 D.26053 ] [160])
        (float_extend:DF (reg:SF 21 xmm0 [orig:159 D.26052 ] [159]))) ge2fitman_preproc.cpp:455 152 {*extendsfdf2_sse}
     (nil))
(call_insn 154 151 155 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fe35704f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:455 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 155 154 156 4 (set (reg:DF 0 ax [300])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:455 128 {*movdf_internal}
     (nil))
(insn 156 155 157 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [300])) ge2fitman_preproc.cpp:455 128 {*movdf_internal}
     (nil))
(insn 157 156 158 4 (set (reg/f:DI 0 ax [301])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 preprocess+0 S8 A64])) ge2fitman_preproc.cpp:457 89 {*movdi_internal}
     (nil))
(insn 158 157 159 4 (set (reg:SI 0 ax [orig:161 D.26049 ] [161])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [301])
                (const_int 44 [0x2c])) [0 preprocess_106(D)->pre_quecc_points+0 S4 A32])) ge2fitman_preproc.cpp:457 90 {*movsi_internal}
     (nil))
(insn 159 158 160 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:161 D.26049 ] [161])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) ge2fitman_preproc.cpp:457 7 {*cmpsi_1}
     (nil))
(jump_insn 160 159 161 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 317)
            (pc))) ge2fitman_preproc.cpp:457 612 {*jcc_1}
     (nil)
 -> 317)
;;  succ:       5 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316
(note 161 160 162 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 5 (set (reg:SI 0 ax [302])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 163 162 164 5 (set (reg:DI 0 ax [orig:162 D.26050 ] [162])
        (sign_extend:DI (reg:SI 0 ax [302]))) ge2fitman_preproc.cpp:459 142 {*extendsidi2_rex64}
     (nil))
(insn 164 163 165 5 (parallel [
            (set (reg:DI 1 dx [orig:163 D.26050 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:162 D.26050 ] [162])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:459 512 {*ashldi3_1}
     (nil))
(insn 165 164 166 5 (set (reg/f:DI 0 ax [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 166 165 167 5 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.26051 ] [164])
                (plus:DI (reg/f:DI 0 ax [303])
                    (reg:DI 1 dx [orig:163 D.26050 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:459 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:163 D.26050 ] [163]))
        (nil)))
(insn 167 166 168 5 (set (reg:SF 21 xmm0 [orig:165 D.26052 ] [165])
        (mem:SF (reg/f:DI 0 ax [orig:164 D.26051 ] [164]) [0 *_111+0 S4 A32])) ge2fitman_preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 168 167 169 5 (set (reg:DF 22 xmm1 [orig:166 D.26053 ] [166])
        (float_extend:DF (reg:SF 21 xmm0 [orig:165 D.26052 ] [165]))) ge2fitman_preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 169 168 170 5 (set (reg:SI 0 ax [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 170 169 171 5 (set (reg:DI 0 ax [orig:167 D.26050 ] [167])
        (sign_extend:DI (reg:SI 0 ax [304]))) ge2fitman_preproc.cpp:459 142 {*extendsidi2_rex64}
     (nil))
(insn 171 170 172 5 (parallel [
            (set (reg:DI 1 dx [orig:168 D.26050 ] [168])
                (ashift:DI (reg:DI 0 ax [orig:167 D.26050 ] [167])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:459 512 {*ashldi3_1}
     (nil))
(insn 172 171 173 5 (set (reg/f:DI 0 ax [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 173 172 174 5 (parallel [
            (set (reg/f:DI 0 ax [orig:169 D.26051 ] [169])
                (plus:DI (reg/f:DI 0 ax [305])
                    (reg:DI 1 dx [orig:168 D.26050 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:459 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:168 D.26050 ] [168]))
        (nil)))
(insn 174 173 175 5 (set (reg:SF 21 xmm0 [orig:170 D.26052 ] [170])
        (mem:SF (reg/f:DI 0 ax [orig:169 D.26051 ] [169]) [0 *_116+0 S4 A32])) ge2fitman_preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 175 174 176 5 (set (reg:DF 21 xmm0 [orig:171 D.26053 ] [171])
        (float_extend:DF (reg:SF 21 xmm0 [orig:170 D.26052 ] [170]))) ge2fitman_preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 176 175 177 5 (set (reg:DF 22 xmm1 [orig:172 D.26053 ] [172])
        (mult:DF (reg:DF 22 xmm1 [orig:166 D.26053 ] [166])
            (reg:DF 21 xmm0 [orig:171 D.26053 ] [171]))) ge2fitman_preproc.cpp:459 798 {*fop_df_comm_sse}
     (nil))
(insn 177 176 178 5 (set (reg:SI 0 ax [306])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 178 177 179 5 (set (reg:DI 0 ax [orig:173 D.26054 ] [173])
        (sign_extend:DI (reg:SI 0 ax [306]))) ge2fitman_preproc.cpp:460 142 {*extendsidi2_rex64}
     (nil))
(insn 179 178 180 5 (parallel [
            (set (reg:DI 0 ax [orig:174 D.26054 ] [174])
                (plus:DI (reg:DI 0 ax [orig:173 D.26054 ] [173])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 218 {*adddi_1}
     (nil))
(insn 180 179 181 5 (parallel [
            (set (reg:DI 1 dx [orig:175 D.26054 ] [175])
                (ashift:DI (reg:DI 0 ax [orig:174 D.26054 ] [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 512 {*ashldi3_1}
     (nil))
(insn 181 180 182 5 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 182 181 183 5 (parallel [
            (set (reg/f:DI 0 ax [orig:176 D.26051 ] [176])
                (plus:DI (reg/f:DI 0 ax [307])
                    (reg:DI 1 dx [orig:175 D.26054 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.26054 ] [175]))
        (nil)))
(insn 183 182 184 5 (set (reg:SF 21 xmm0 [orig:177 D.26052 ] [177])
        (mem:SF (reg/f:DI 0 ax [orig:176 D.26051 ] [176]) [0 *_123+0 S4 A32])) ge2fitman_preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 184 183 185 5 (set (reg:DF 23 xmm2 [orig:178 D.26053 ] [178])
        (float_extend:DF (reg:SF 21 xmm0 [orig:177 D.26052 ] [177]))) ge2fitman_preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 185 184 186 5 (set (reg:SI 0 ax [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 186 185 187 5 (set (reg:DI 0 ax [orig:179 D.26054 ] [179])
        (sign_extend:DI (reg:SI 0 ax [308]))) ge2fitman_preproc.cpp:460 142 {*extendsidi2_rex64}
     (nil))
(insn 187 186 188 5 (parallel [
            (set (reg:DI 0 ax [orig:180 D.26054 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 D.26054 ] [179])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 218 {*adddi_1}
     (nil))
(insn 188 187 189 5 (parallel [
            (set (reg:DI 1 dx [orig:181 D.26054 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:180 D.26054 ] [180])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 512 {*ashldi3_1}
     (nil))
(insn 189 188 190 5 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 190 189 191 5 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.26051 ] [182])
                (plus:DI (reg/f:DI 0 ax [309])
                    (reg:DI 1 dx [orig:181 D.26054 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:460 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:181 D.26054 ] [181]))
        (nil)))
(insn 191 190 192 5 (set (reg:SF 21 xmm0 [orig:183 D.26052 ] [183])
        (mem:SF (reg/f:DI 0 ax [orig:182 D.26051 ] [182]) [0 *_129+0 S4 A32])) ge2fitman_preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 192 191 193 5 (set (reg:DF 21 xmm0 [orig:184 D.26053 ] [184])
        (float_extend:DF (reg:SF 21 xmm0 [orig:183 D.26052 ] [183]))) ge2fitman_preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 193 192 194 5 (set (reg:DF 21 xmm0 [orig:185 D.26053 ] [185])
        (mult:DF (reg:DF 21 xmm0 [orig:184 D.26053 ] [184])
            (reg:DF 23 xmm2 [orig:178 D.26053 ] [178]))) ge2fitman_preproc.cpp:460 798 {*fop_df_comm_sse}
     (nil))
(insn 194 193 196 5 (set (reg:DF 21 xmm0 [orig:186 D.26053 ] [186])
        (plus:DF (reg:DF 21 xmm0 [orig:185 D.26053 ] [185])
            (reg:DF 22 xmm1 [orig:172 D.26053 ] [172]))) ge2fitman_preproc.cpp:459 798 {*fop_df_comm_sse}
     (nil))
(call_insn 196 194 197 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fe357093d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:460 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 197 196 198 5 (set (reg:DF 0 ax [310])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:460 128 {*movdf_internal}
     (nil))
(insn 198 197 199 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [310])) ge2fitman_preproc.cpp:460 128 {*movdf_internal}
     (nil))
(insn 199 198 200 5 (set (reg:SI 0 ax [311])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 200 199 201 5 (set (reg:DI 0 ax [orig:187 D.26050 ] [187])
        (sign_extend:DI (reg:SI 0 ax [311]))) ge2fitman_preproc.cpp:462 142 {*extendsidi2_rex64}
     (nil))
(insn 201 200 202 5 (parallel [
            (set (reg:DI 1 dx [orig:188 D.26050 ] [188])
                (ashift:DI (reg:DI 0 ax [orig:187 D.26050 ] [187])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 512 {*ashldi3_1}
     (nil))
(insn 202 201 203 5 (set (reg/f:DI 0 ax [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 203 202 204 5 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.26051 ] [189])
                (plus:DI (reg/f:DI 0 ax [312])
                    (reg:DI 1 dx [orig:188 D.26050 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:188 D.26050 ] [188]))
        (nil)))
(insn 204 203 205 5 (set (reg:SF 21 xmm0 [orig:190 D.26052 ] [190])
        (mem:SF (reg/f:DI 0 ax [orig:189 D.26051 ] [189]) [0 *_138+0 S4 A32])) ge2fitman_preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 205 204 206 5 (set (reg:DF 22 xmm1 [orig:191 D.26053 ] [191])
        (float_extend:DF (reg:SF 21 xmm0 [orig:190 D.26052 ] [190]))) ge2fitman_preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(insn 206 205 207 5 (set (reg:SI 0 ax [313])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 207 206 208 5 (set (reg:DI 0 ax [orig:192 D.26054 ] [192])
        (sign_extend:DI (reg:SI 0 ax [313]))) ge2fitman_preproc.cpp:462 142 {*extendsidi2_rex64}
     (nil))
(insn 208 207 209 5 (parallel [
            (set (reg:DI 0 ax [orig:193 D.26054 ] [193])
                (plus:DI (reg:DI 0 ax [orig:192 D.26054 ] [192])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 218 {*adddi_1}
     (nil))
(insn 209 208 210 5 (parallel [
            (set (reg:DI 1 dx [orig:194 D.26054 ] [194])
                (ashift:DI (reg:DI 0 ax [orig:193 D.26054 ] [193])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 512 {*ashldi3_1}
     (nil))
(insn 210 209 211 5 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) ge2fitman_preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 211 210 212 5 (parallel [
            (set (reg/f:DI 0 ax [orig:195 D.26051 ] [195])
                (plus:DI (reg/f:DI 0 ax [314])
                    (reg:DI 1 dx [orig:194 D.26054 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:462 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:194 D.26054 ] [194]))
        (nil)))
(insn 212 211 213 5 (set (reg:SF 21 xmm0 [orig:196 D.26052 ] [196])
        (mem:SF (reg/f:DI 0 ax [orig:195 D.26051 ] [195]) [0 *_144+0 S4 A32])) ge2fitman_preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 213 212 216 5 (set (reg:DF 21 xmm0 [orig:197 D.26053 ] [197])
        (float_extend:DF (reg:SF 21 xmm0 [orig:196 D.26052 ] [196]))) ge2fitman_preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(call_insn 216 213 217 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fe35704f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:462 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 217 216 218 5 (set (reg:DF 0 ax [315])
        (reg:DF 21 xmm0)) ge2fitman_preproc.cpp:462 128 {*movdf_internal}
     (nil))
(insn 218 217 219 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [315])) ge2fitman_preproc.cpp:462 128 {*movdf_internal}
     (nil))
(insn 219 218 220 5 (set (reg:DF 21 xmm0 [316])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:468 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 9.9999999999999995474811182588625868561393872369080782e-7 [0x0.8637bd05af6c68p-19])
        (nil)))
(insn 220 219 221 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [316])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:468 56 {*cmpiudf_sse}
     (nil))
(jump_insn 221 220 225 5 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 403)
            (pc))) ge2fitman_preproc.cpp:468 612 {*jcc_1}
     (nil)
 -> 403)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 317
(note 225 221 226 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 6 (set (reg:DF 21 xmm0 [317])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:469 128 {*movdf_internal}
     (nil))
(insn 227 226 404 6 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [317])) ge2fitman_preproc.cpp:469 128 {*movdf_internal}
     (nil))
(jump_insn 404 227 405 6 (set (pc)
        (label_ref 235)) 654 {jump}
     (nil)
 -> 235)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 405 404 403)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 318 319
(code_label 403 405 231 7 114 "" [1 uses])
(note 231 403 232 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 232 231 233 7 (set (reg:DF 21 xmm0 [319])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])) ge2fitman_preproc.cpp:471 128 {*movdf_internal}
     (nil))
(insn 233 232 234 7 (set (reg:DF 21 xmm0 [318])
        (div:DF (reg:DF 21 xmm0 [319])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:471 805 {*fop_df_1_sse}
     (nil))
(insn 234 233 235 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [318])) ge2fitman_preproc.cpp:471 128 {*movdf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 320 321 322 323 324 325 326 327 328
(code_label 235 234 236 8 105 "" [1 uses])
(note 236 235 237 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 237 236 238 8 (set (reg:DF 21 xmm0 [321])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])) ge2fitman_preproc.cpp:474 128 {*movdf_internal}
     (nil))
(insn 238 237 239 8 (set (reg:DF 21 xmm0 [320])
        (minus:DF (reg:DF 21 xmm0 [321])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:474 805 {*fop_df_1_sse}
     (nil))
(insn 239 238 240 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [320])) ge2fitman_preproc.cpp:474 128 {*movdf_internal}
     (nil))
(insn 240 239 241 8 (set (reg:SI 0 ax [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 241 240 242 8 (set (reg:DI 0 ax [orig:198 D.26050 ] [198])
        (sign_extend:DI (reg:SI 0 ax [322]))) ge2fitman_preproc.cpp:476 142 {*extendsidi2_rex64}
     (nil))
(insn 242 241 243 8 (parallel [
            (set (reg:DI 1 dx [orig:199 D.26050 ] [199])
                (ashift:DI (reg:DI 0 ax [orig:198 D.26050 ] [198])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:476 512 {*ashldi3_1}
     (nil))
(insn 243 242 244 8 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:476 89 {*movdi_internal}
     (nil))
(insn 244 243 245 8 (parallel [
            (set (reg/f:DI 3 bx [orig:200 D.26051 ] [200])
                (plus:DI (reg:DI 1 dx [orig:199 D.26050 ] [199])
                    (reg/f:DI 0 ax [323])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:476 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:199 D.26050 ] [199]))
        (nil)))
(insn 245 244 414 8 (set (reg:SF 24 xmm3 [orig:201 D.26052 ] [201])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:476 157 {*truncdfsf_fast_sse}
     (nil))
(insn 414 245 455 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 24 xmm3 [orig:201 D.26052 ] [201])) ge2fitman_preproc.cpp:476 129 {*movsf_internal}
     (nil))
(note 455 414 439 8 NOTE_INSN_DELETED)
(note 439 455 246 8 NOTE_INSN_DELETED)
(insn 246 439 247 8 (set (reg:DF 0 ax [324])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])) ge2fitman_preproc.cpp:476 128 {*movdf_internal}
     (nil))
(insn 247 246 415 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [324])) ge2fitman_preproc.cpp:476 128 {*movdf_internal}
     (nil))
(insn 415 247 248 8 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:476 128 {*movdf_internal}
     (nil))
(call_insn/u 248 415 250 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fe3570545e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:476 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 250 248 416 8 (set (reg:SF 21 xmm0 [orig:203 D.26052 ] [203])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:202 D.26053 ] [202]))) ge2fitman_preproc.cpp:476 157 {*truncdfsf_fast_sse}
     (nil))
(note 416 250 453 8 NOTE_INSN_DELETED)
(note 453 416 251 8 NOTE_INSN_DELETED)
(insn 251 453 252 8 (set (reg:SF 21 xmm0 [orig:204 D.26052 ] [204])
        (mult:SF (reg:SF 21 xmm0 [orig:203 D.26052 ] [203])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:476 797 {*fop_sf_comm_sse}
     (nil))
(insn 252 251 253 8 (set (mem:SF (reg/f:DI 3 bx [orig:200 D.26051 ] [200]) [0 *_154+0 S4 A32])
        (reg:SF 21 xmm0 [orig:204 D.26052 ] [204])) ge2fitman_preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 253 252 254 8 (set (reg:SI 0 ax [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 254 253 255 8 (set (reg:DI 0 ax [orig:205 D.26054 ] [205])
        (sign_extend:DI (reg:SI 0 ax [325]))) ge2fitman_preproc.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 255 254 256 8 (parallel [
            (set (reg:DI 0 ax [orig:206 D.26054 ] [206])
                (plus:DI (reg:DI 0 ax [orig:205 D.26054 ] [205])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:477 218 {*adddi_1}
     (nil))
(insn 256 255 257 8 (parallel [
            (set (reg:DI 1 dx [orig:207 D.26054 ] [207])
                (ashift:DI (reg:DI 0 ax [orig:206 D.26054 ] [206])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:477 512 {*ashldi3_1}
     (nil))
(insn 257 256 258 8 (set (reg/f:DI 0 ax [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:477 89 {*movdi_internal}
     (nil))
(insn 258 257 259 8 (parallel [
            (set (reg/f:DI 3 bx [orig:208 D.26051 ] [208])
                (plus:DI (reg:DI 1 dx [orig:207 D.26054 ] [207])
                    (reg/f:DI 0 ax [326])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:477 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:207 D.26054 ] [207]))
        (nil)))
(insn 259 258 417 8 (set (reg:SF 25 xmm4 [orig:209 D.26052 ] [209])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:477 157 {*truncdfsf_fast_sse}
     (nil))
(insn 417 259 454 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 25 xmm4 [orig:209 D.26052 ] [209])) ge2fitman_preproc.cpp:477 129 {*movsf_internal}
     (nil))
(note 454 417 438 8 NOTE_INSN_DELETED)
(note 438 454 260 8 NOTE_INSN_DELETED)
(insn 260 438 261 8 (set (reg:DF 0 ax [327])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])) ge2fitman_preproc.cpp:477 128 {*movdf_internal}
     (nil))
(insn 261 260 418 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [327])) ge2fitman_preproc.cpp:477 128 {*movdf_internal}
     (nil))
(insn 418 261 262 8 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:477 128 {*movdf_internal}
     (nil))
(call_insn/u 262 418 264 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fe3570915e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:477 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 264 262 419 8 (set (reg:SF 21 xmm0 [orig:211 D.26052 ] [211])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:210 D.26053 ] [210]))) ge2fitman_preproc.cpp:477 157 {*truncdfsf_fast_sse}
     (nil))
(note 419 264 452 8 NOTE_INSN_DELETED)
(note 452 419 265 8 NOTE_INSN_DELETED)
(insn 265 452 266 8 (set (reg:SF 21 xmm0 [orig:212 D.26052 ] [212])
        (mult:SF (reg:SF 21 xmm0 [orig:211 D.26052 ] [211])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:477 797 {*fop_sf_comm_sse}
     (nil))
(insn 266 265 267 8 (set (mem:SF (reg/f:DI 3 bx [orig:208 D.26051 ] [208]) [0 *_163+0 S4 A32])
        (reg:SF 21 xmm0 [orig:212 D.26052 ] [212])) ge2fitman_preproc.cpp:477 129 {*movsf_internal}
     (nil))
(insn 267 266 268 8 (set (reg:DF 21 xmm0 [328])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:482 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 9.9999999999999995474811182588625868561393872369080782e-7 [0x0.8637bd05af6c68p-19])
        (nil)))
(insn 268 267 269 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [328])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:482 56 {*cmpiudf_sse}
     (nil))
(jump_insn 269 268 273 8 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 406)
            (pc))) ge2fitman_preproc.cpp:482 612 {*jcc_1}
     (nil)
 -> 406)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 329
(note 273 269 274 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 9 (set (reg:DF 21 xmm0 [329])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S8 A64])) ge2fitman_preproc.cpp:483 128 {*movdf_internal}
     (nil))
(insn 275 274 407 9 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [329])) ge2fitman_preproc.cpp:483 128 {*movdf_internal}
     (nil))
(jump_insn 407 275 408 9 (set (pc)
        (label_ref 283)) 654 {jump}
     (nil)
 -> 283)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 408 407 406)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 330 331
(code_label 406 408 279 10 115 "" [1 uses])
(note 279 406 280 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 280 279 281 10 (set (reg:DF 21 xmm0 [331])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])) ge2fitman_preproc.cpp:485 128 {*movdf_internal}
     (nil))
(insn 281 280 282 10 (set (reg:DF 21 xmm0 [330])
        (div:DF (reg:DF 21 xmm0 [331])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:485 805 {*fop_df_1_sse}
     (nil))
(insn 282 281 283 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [330])) ge2fitman_preproc.cpp:485 128 {*movdf_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 332 333 334 335 336 337 338 339
(code_label 283 282 284 11 108 "" [1 uses])
(note 284 283 285 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 11 (set (reg:DF 21 xmm0 [333])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])) ge2fitman_preproc.cpp:488 128 {*movdf_internal}
     (nil))
(insn 286 285 287 11 (set (reg:DF 21 xmm0 [332])
        (minus:DF (reg:DF 21 xmm0 [333])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64]))) ge2fitman_preproc.cpp:488 805 {*fop_df_1_sse}
     (nil))
(insn 287 286 288 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [332])) ge2fitman_preproc.cpp:488 128 {*movdf_internal}
     (nil))
(insn 288 287 289 11 (set (reg:SI 0 ax [334])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:490 90 {*movsi_internal}
     (nil))
(insn 289 288 290 11 (set (reg:DI 0 ax [orig:213 D.26050 ] [213])
        (sign_extend:DI (reg:SI 0 ax [334]))) ge2fitman_preproc.cpp:490 142 {*extendsidi2_rex64}
     (nil))
(insn 290 289 291 11 (parallel [
            (set (reg:DI 1 dx [orig:214 D.26050 ] [214])
                (ashift:DI (reg:DI 0 ax [orig:213 D.26050 ] [213])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:490 512 {*ashldi3_1}
     (nil))
(insn 291 290 292 11 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:490 89 {*movdi_internal}
     (nil))
(insn 292 291 293 11 (parallel [
            (set (reg/f:DI 3 bx [orig:215 D.26051 ] [215])
                (plus:DI (reg:DI 1 dx [orig:214 D.26050 ] [214])
                    (reg/f:DI 0 ax [335])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:490 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:214 D.26050 ] [214]))
        (nil)))
(insn 293 292 420 11 (set (reg:SF 26 xmm5 [orig:216 D.26052 ] [216])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:490 157 {*truncdfsf_fast_sse}
     (nil))
(insn 420 293 457 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 26 xmm5 [orig:216 D.26052 ] [216])) ge2fitman_preproc.cpp:490 129 {*movsf_internal}
     (nil))
(note 457 420 441 11 NOTE_INSN_DELETED)
(note 441 457 294 11 NOTE_INSN_DELETED)
(insn 294 441 295 11 (set (reg:DF 0 ax [336])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])) ge2fitman_preproc.cpp:490 128 {*movdf_internal}
     (nil))
(insn 295 294 421 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [336])) ge2fitman_preproc.cpp:490 128 {*movdf_internal}
     (nil))
(insn 421 295 296 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:490 128 {*movdf_internal}
     (nil))
(call_insn/u 296 421 298 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fe3570545e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:490 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 298 296 422 11 (set (reg:SF 21 xmm0 [orig:218 D.26052 ] [218])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:217 D.26053 ] [217]))) ge2fitman_preproc.cpp:490 157 {*truncdfsf_fast_sse}
     (nil))
(note 422 298 451 11 NOTE_INSN_DELETED)
(note 451 422 299 11 NOTE_INSN_DELETED)
(insn 299 451 300 11 (set (reg:SF 21 xmm0 [orig:219 D.26052 ] [219])
        (mult:SF (reg:SF 21 xmm0 [orig:218 D.26052 ] [218])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:490 797 {*fop_sf_comm_sse}
     (nil))
(insn 300 299 301 11 (set (mem:SF (reg/f:DI 3 bx [orig:215 D.26051 ] [215]) [0 *_174+0 S4 A32])
        (reg:SF 21 xmm0 [orig:219 D.26052 ] [219])) ge2fitman_preproc.cpp:490 129 {*movsf_internal}
     (nil))
(insn 301 300 302 11 (set (reg:SI 0 ax [337])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:491 90 {*movsi_internal}
     (nil))
(insn 302 301 303 11 (set (reg:DI 0 ax [orig:220 D.26054 ] [220])
        (sign_extend:DI (reg:SI 0 ax [337]))) ge2fitman_preproc.cpp:491 142 {*extendsidi2_rex64}
     (nil))
(insn 303 302 304 11 (parallel [
            (set (reg:DI 0 ax [orig:221 D.26054 ] [221])
                (plus:DI (reg:DI 0 ax [orig:220 D.26054 ] [220])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:491 218 {*adddi_1}
     (nil))
(insn 304 303 305 11 (parallel [
            (set (reg:DI 1 dx [orig:222 D.26054 ] [222])
                (ashift:DI (reg:DI 0 ax [orig:221 D.26054 ] [221])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:491 512 {*ashldi3_1}
     (nil))
(insn 305 304 306 11 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:491 89 {*movdi_internal}
     (nil))
(insn 306 305 307 11 (parallel [
            (set (reg/f:DI 3 bx [orig:223 D.26051 ] [223])
                (plus:DI (reg:DI 1 dx [orig:222 D.26054 ] [222])
                    (reg/f:DI 0 ax [338])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:491 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.26054 ] [222]))
        (nil)))
(insn 307 306 423 11 (set (reg:SF 27 xmm6 [orig:224 D.26052 ] [224])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64]))) ge2fitman_preproc.cpp:491 157 {*truncdfsf_fast_sse}
     (nil))
(insn 423 307 456 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 27 xmm6 [orig:224 D.26052 ] [224])) ge2fitman_preproc.cpp:491 129 {*movsf_internal}
     (nil))
(note 456 423 440 11 NOTE_INSN_DELETED)
(note 440 456 308 11 NOTE_INSN_DELETED)
(insn 308 440 309 11 (set (reg:DF 0 ax [339])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])) ge2fitman_preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 309 308 424 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [339])) ge2fitman_preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 424 309 310 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:491 128 {*movdf_internal}
     (nil))
(call_insn/u 310 424 312 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fe3570915e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:491 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 312 310 425 11 (set (reg:SF 21 xmm0 [orig:226 D.26052 ] [226])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:225 D.26053 ] [225]))) ge2fitman_preproc.cpp:491 157 {*truncdfsf_fast_sse}
     (nil))
(note 425 312 450 11 NOTE_INSN_DELETED)
(note 450 425 313 11 NOTE_INSN_DELETED)
(insn 313 450 314 11 (set (reg:SF 21 xmm0 [orig:227 D.26052 ] [227])
        (mult:SF (reg:SF 21 xmm0 [orig:226 D.26052 ] [226])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:491 797 {*fop_sf_comm_sse}
     (nil))
(insn 314 313 409 11 (set (mem:SF (reg/f:DI 3 bx [orig:223 D.26051 ] [223]) [0 *_183+0 S4 A32])
        (reg:SF 21 xmm0 [orig:227 D.26052 ] [227])) ge2fitman_preproc.cpp:491 129 {*movsf_internal}
     (nil))
(jump_insn 409 314 410 11 (set (pc)
        (label_ref 379)) 654 {jump}
     (nil)
 -> 379)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 410 409 317)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355
(code_label 317 410 318 12 102 "" [1 uses])
(note 318 317 319 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 319 318 320 12 (set (reg:DF 21 xmm0 [341])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])) ge2fitman_preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 320 319 321 12 (set (reg:DF 21 xmm0 [340])
        (minus:DF (reg:DF 21 xmm0 [341])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:494 805 {*fop_df_1_sse}
     (nil))
(insn 321 320 322 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 21 xmm0 [340])) ge2fitman_preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 322 321 323 12 (set (reg:DF 21 xmm0 [343])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])) ge2fitman_preproc.cpp:495 128 {*movdf_internal}
     (nil))
(insn 323 322 324 12 (set (reg:DF 21 xmm0 [342])
        (minus:DF (reg:DF 21 xmm0 [343])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:495 805 {*fop_df_1_sse}
     (nil))
(insn 324 323 325 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [342])) ge2fitman_preproc.cpp:495 128 {*movdf_internal}
     (nil))
(insn 325 324 326 12 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:497 90 {*movsi_internal}
     (nil))
(insn 326 325 327 12 (set (reg:DI 0 ax [orig:228 D.26050 ] [228])
        (sign_extend:DI (reg:SI 0 ax [344]))) ge2fitman_preproc.cpp:497 142 {*extendsidi2_rex64}
     (nil))
(insn 327 326 328 12 (parallel [
            (set (reg:DI 1 dx [orig:229 D.26050 ] [229])
                (ashift:DI (reg:DI 0 ax [orig:228 D.26050 ] [228])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:497 512 {*ashldi3_1}
     (nil))
(insn 328 327 329 12 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:497 89 {*movdi_internal}
     (nil))
(insn 329 328 330 12 (parallel [
            (set (reg/f:DI 3 bx [orig:230 D.26051 ] [230])
                (plus:DI (reg:DI 1 dx [orig:229 D.26050 ] [229])
                    (reg/f:DI 0 ax [345])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:497 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:229 D.26050 ] [229]))
        (nil)))
(insn 330 329 426 12 (set (reg:SF 28 xmm7 [orig:231 D.26052 ] [231])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64]))) ge2fitman_preproc.cpp:497 157 {*truncdfsf_fast_sse}
     (nil))
(insn 426 330 461 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 28 xmm7 [orig:231 D.26052 ] [231])) ge2fitman_preproc.cpp:497 129 {*movsf_internal}
     (nil))
(note 461 426 445 12 NOTE_INSN_DELETED)
(note 445 461 331 12 NOTE_INSN_DELETED)
(insn 331 445 332 12 (set (reg:DF 0 ax [346])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) ge2fitman_preproc.cpp:497 128 {*movdf_internal}
     (nil))
(insn 332 331 427 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [346])) ge2fitman_preproc.cpp:497 128 {*movdf_internal}
     (nil))
(insn 427 332 333 12 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:497 128 {*movdf_internal}
     (nil))
(call_insn/u 333 427 335 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fe3570545e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:497 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 335 333 428 12 (set (reg:SF 21 xmm0 [orig:233 D.26052 ] [233])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:232 D.26053 ] [232]))) ge2fitman_preproc.cpp:497 157 {*truncdfsf_fast_sse}
     (nil))
(note 428 335 449 12 NOTE_INSN_DELETED)
(note 449 428 336 12 NOTE_INSN_DELETED)
(insn 336 449 337 12 (set (reg:SF 21 xmm0 [orig:234 D.26052 ] [234])
        (mult:SF (reg:SF 21 xmm0 [orig:233 D.26052 ] [233])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:497 797 {*fop_sf_comm_sse}
     (nil))
(insn 337 336 338 12 (set (mem:SF (reg/f:DI 3 bx [orig:230 D.26051 ] [230]) [0 *_193+0 S4 A32])
        (reg:SF 21 xmm0 [orig:234 D.26052 ] [234])) ge2fitman_preproc.cpp:497 129 {*movsf_internal}
     (nil))
(insn 338 337 339 12 (set (reg:SI 0 ax [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:498 90 {*movsi_internal}
     (nil))
(insn 339 338 340 12 (set (reg:DI 0 ax [orig:235 D.26054 ] [235])
        (sign_extend:DI (reg:SI 0 ax [347]))) ge2fitman_preproc.cpp:498 142 {*extendsidi2_rex64}
     (nil))
(insn 340 339 341 12 (parallel [
            (set (reg:DI 0 ax [orig:236 D.26054 ] [236])
                (plus:DI (reg:DI 0 ax [orig:235 D.26054 ] [235])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:498 218 {*adddi_1}
     (nil))
(insn 341 340 342 12 (parallel [
            (set (reg:DI 1 dx [orig:237 D.26054 ] [237])
                (ashift:DI (reg:DI 0 ax [orig:236 D.26054 ] [236])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:498 512 {*ashldi3_1}
     (nil))
(insn 342 341 343 12 (set (reg/f:DI 0 ax [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) ge2fitman_preproc.cpp:498 89 {*movdi_internal}
     (nil))
(insn 343 342 344 12 (parallel [
            (set (reg/f:DI 3 bx [orig:238 D.26051 ] [238])
                (plus:DI (reg:DI 1 dx [orig:237 D.26054 ] [237])
                    (reg/f:DI 0 ax [348])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:498 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:237 D.26054 ] [237]))
        (nil)))
(insn 344 343 429 12 (set (reg:SF 24 xmm3 [orig:239 D.26052 ] [239])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64]))) ge2fitman_preproc.cpp:498 157 {*truncdfsf_fast_sse}
     (nil))
(insn 429 344 460 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 24 xmm3 [orig:239 D.26052 ] [239])) ge2fitman_preproc.cpp:498 129 {*movsf_internal}
     (nil))
(note 460 429 444 12 NOTE_INSN_DELETED)
(note 444 460 345 12 NOTE_INSN_DELETED)
(insn 345 444 346 12 (set (reg:DF 0 ax [349])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) ge2fitman_preproc.cpp:498 128 {*movdf_internal}
     (nil))
(insn 346 345 430 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [349])) ge2fitman_preproc.cpp:498 128 {*movdf_internal}
     (nil))
(insn 430 346 347 12 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:498 128 {*movdf_internal}
     (nil))
(call_insn/u 347 430 349 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fe3570915e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:498 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 349 347 431 12 (set (reg:SF 21 xmm0 [orig:241 D.26052 ] [241])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:240 D.26053 ] [240]))) ge2fitman_preproc.cpp:498 157 {*truncdfsf_fast_sse}
     (nil))
(note 431 349 448 12 NOTE_INSN_DELETED)
(note 448 431 350 12 NOTE_INSN_DELETED)
(insn 350 448 351 12 (set (reg:SF 21 xmm0 [orig:242 D.26052 ] [242])
        (mult:SF (reg:SF 21 xmm0 [orig:241 D.26052 ] [241])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:498 797 {*fop_sf_comm_sse}
     (nil))
(insn 351 350 352 12 (set (mem:SF (reg/f:DI 3 bx [orig:238 D.26051 ] [238]) [0 *_202+0 S4 A32])
        (reg:SF 21 xmm0 [orig:242 D.26052 ] [242])) ge2fitman_preproc.cpp:498 129 {*movsf_internal}
     (nil))
(insn 352 351 353 12 (set (reg:SI 0 ax [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:500 90 {*movsi_internal}
     (nil))
(insn 353 352 354 12 (set (reg:DI 0 ax [orig:243 D.26050 ] [243])
        (sign_extend:DI (reg:SI 0 ax [350]))) ge2fitman_preproc.cpp:500 142 {*extendsidi2_rex64}
     (nil))
(insn 354 353 355 12 (parallel [
            (set (reg:DI 1 dx [orig:244 D.26050 ] [244])
                (ashift:DI (reg:DI 0 ax [orig:243 D.26050 ] [243])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:500 512 {*ashldi3_1}
     (nil))
(insn 355 354 356 12 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:500 89 {*movdi_internal}
     (nil))
(insn 356 355 357 12 (parallel [
            (set (reg/f:DI 3 bx [orig:245 D.26051 ] [245])
                (plus:DI (reg:DI 1 dx [orig:244 D.26050 ] [244])
                    (reg/f:DI 0 ax [351])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:500 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:244 D.26050 ] [244]))
        (nil)))
(insn 357 356 432 12 (set (reg:SF 25 xmm4 [orig:246 D.26052 ] [246])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:500 157 {*truncdfsf_fast_sse}
     (nil))
(insn 432 357 459 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 25 xmm4 [orig:246 D.26052 ] [246])) ge2fitman_preproc.cpp:500 129 {*movsf_internal}
     (nil))
(note 459 432 443 12 NOTE_INSN_DELETED)
(note 443 459 358 12 NOTE_INSN_DELETED)
(insn 358 443 359 12 (set (reg:DF 0 ax [352])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) ge2fitman_preproc.cpp:500 128 {*movdf_internal}
     (nil))
(insn 359 358 433 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [352])) ge2fitman_preproc.cpp:500 128 {*movdf_internal}
     (nil))
(insn 433 359 360 12 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:500 128 {*movdf_internal}
     (nil))
(call_insn/u 360 433 362 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fe3570545e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:500 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 362 360 434 12 (set (reg:SF 21 xmm0 [orig:248 D.26052 ] [248])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:247 D.26053 ] [247]))) ge2fitman_preproc.cpp:500 157 {*truncdfsf_fast_sse}
     (nil))
(note 434 362 447 12 NOTE_INSN_DELETED)
(note 447 434 363 12 NOTE_INSN_DELETED)
(insn 363 447 364 12 (set (reg:SF 21 xmm0 [orig:249 D.26052 ] [249])
        (mult:SF (reg:SF 21 xmm0 [orig:248 D.26052 ] [248])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:500 797 {*fop_sf_comm_sse}
     (nil))
(insn 364 363 365 12 (set (mem:SF (reg/f:DI 3 bx [orig:245 D.26051 ] [245]) [0 *_210+0 S4 A32])
        (reg:SF 21 xmm0 [orig:249 D.26052 ] [249])) ge2fitman_preproc.cpp:500 129 {*movsf_internal}
     (nil))
(insn 365 364 366 12 (set (reg:SI 0 ax [353])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) ge2fitman_preproc.cpp:501 90 {*movsi_internal}
     (nil))
(insn 366 365 367 12 (set (reg:DI 0 ax [orig:250 D.26054 ] [250])
        (sign_extend:DI (reg:SI 0 ax [353]))) ge2fitman_preproc.cpp:501 142 {*extendsidi2_rex64}
     (nil))
(insn 367 366 368 12 (parallel [
            (set (reg:DI 0 ax [orig:251 D.26054 ] [251])
                (plus:DI (reg:DI 0 ax [orig:250 D.26054 ] [250])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:501 218 {*adddi_1}
     (nil))
(insn 368 367 369 12 (parallel [
            (set (reg:DI 1 dx [orig:252 D.26054 ] [252])
                (ashift:DI (reg:DI 0 ax [orig:251 D.26054 ] [251])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:501 512 {*ashldi3_1}
     (nil))
(insn 369 368 370 12 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) ge2fitman_preproc.cpp:501 89 {*movdi_internal}
     (nil))
(insn 370 369 371 12 (parallel [
            (set (reg/f:DI 3 bx [orig:253 D.26051 ] [253])
                (plus:DI (reg:DI 1 dx [orig:252 D.26054 ] [252])
                    (reg/f:DI 0 ax [354])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:501 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:252 D.26054 ] [252]))
        (nil)))
(insn 371 370 435 12 (set (reg:SF 26 xmm5 [orig:254 D.26052 ] [254])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64]))) ge2fitman_preproc.cpp:501 157 {*truncdfsf_fast_sse}
     (nil))
(insn 435 371 458 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 26 xmm5 [orig:254 D.26052 ] [254])) ge2fitman_preproc.cpp:501 129 {*movsf_internal}
     (nil))
(note 458 435 442 12 NOTE_INSN_DELETED)
(note 442 458 372 12 NOTE_INSN_DELETED)
(insn 372 442 373 12 (set (reg:DF 0 ax [355])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) ge2fitman_preproc.cpp:501 128 {*movdf_internal}
     (nil))
(insn 373 372 436 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [355])) ge2fitman_preproc.cpp:501 128 {*movdf_internal}
     (nil))
(insn 436 373 374 12 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) ge2fitman_preproc.cpp:501 128 {*movdf_internal}
     (nil))
(call_insn/u 374 436 376 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fe3570915e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_preproc.cpp:501 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 376 374 437 12 (set (reg:SF 21 xmm0 [orig:256 D.26052 ] [256])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:255 D.26053 ] [255]))) ge2fitman_preproc.cpp:501 157 {*truncdfsf_fast_sse}
     (nil))
(note 437 376 446 12 NOTE_INSN_DELETED)
(note 446 437 377 12 NOTE_INSN_DELETED)
(insn 377 446 378 12 (set (reg:SF 21 xmm0 [orig:257 D.26052 ] [257])
        (mult:SF (reg:SF 21 xmm0 [orig:256 D.26052 ] [256])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) ge2fitman_preproc.cpp:501 797 {*fop_sf_comm_sse}
     (nil))
(insn 378 377 379 12 (set (mem:SF (reg/f:DI 3 bx [orig:253 D.26051 ] [253]) [0 *_219+0 S4 A32])
        (reg:SF 21 xmm0 [orig:257 D.26052 ] [257])) ge2fitman_preproc.cpp:501 129 {*movsf_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 379 378 380 13 109 "" [1 uses])
(note 380 379 381 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 411 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_preproc.cpp:444 217 {*addsi_1}
     (nil))
(jump_insn 411 381 412 13 (set (pc)
        (label_ref 382)) ge2fitman_preproc.cpp:444 654 {jump}
     (nil)
 -> 382)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 412 411 385)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 258 259
(code_label 385 412 386 14 101 "" [1 uses])
(note 386 385 387 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 387 386 390 14 (set (reg:SI 0 ax [orig:258 D.26049 ] [258])
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:505 90 {*movsi_internal}
     (nil))
(insn 390 387 394 14 (set (reg:SI 0 ax [orig:259 <retval> ] [259])
        (reg:SI 0 ax [orig:258 D.26049 ] [258])) ge2fitman_preproc.cpp:505 90 {*movsi_internal}
     (nil))
(insn 394 390 395 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:259 <retval> ] [259])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 395 394 413 14 (use (reg/i:SI 0 ax)) ge2fitman_preproc.cpp:506 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 413 395 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1030, decl_uid=24712, cgraph_uid=235, symbol_order=262)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,10u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 195{168d,27u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_preproc.cpp:506 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) ge2fitman_preproc.cpp:506 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) ge2fitman_preproc.cpp:506 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) ge2fitman_preproc.cpp:506 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7fe355c50000 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x7fe355fc1870 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/iostream:74 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7fe355cb51b0 __dso_handle>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7fe355c50000 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7fe355fc1a20 __comp_dtor >)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 18 17 25 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7fe355c81e58 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/iostream:74 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 18 23 6 118 "" [2 uses])
(note 23 25 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 21 6 (const_int 0 [0]) ge2fitman_preproc.cpp:506 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 24 22 5 116 "" [0 uses])
(note 22 21 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 22 0 NOTE_INSN_DELETED)

;; Function (static initializers for ge2fitman_preproc.cpp) (_GLOBAL__sub_I__Z11pre_processPiP10PreprocessP12Procpar_infoPPfS5_, funcdef_no=1031, decl_uid=24718, cgraph_uid=236, symbol_order=366)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for ge2fitman_preproc.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{92d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) ge2fitman_preproc.cpp:506 90 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x7fe355c81d80 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) ge2fitman_preproc.cpp:506 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
